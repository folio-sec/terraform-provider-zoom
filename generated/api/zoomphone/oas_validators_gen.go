// Code generated by ogen, DO NOT EDIT.

package zoomphone

import (
	"fmt"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/validate"
)

func (s AccountCallHistoryCallResultsItem) Validate() error {
	switch s {
	case "answered":
		return nil
	case "connected":
		return nil
	case "voicemail":
		return nil
	case "hang_up":
		return nil
	case "no_answer":
		return nil
	case "invalid_operation":
		return nil
	case "abandoned":
		return nil
	case "blocked":
		return nil
	case "service_unavailable":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AccountCallHistoryCallTypesItem) Validate() error {
	switch s {
	case "general":
		return nil
	case "emergency":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AccountCallHistoryConnectTypesItem) Validate() error {
	switch s {
	case "internal":
		return nil
	case "external":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AccountCallHistoryDirectionsItem) Validate() error {
	switch s {
	case "inbound":
		return nil
	case "outbound":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AccountCallHistoryExtensionTypesItem) Validate() error {
	switch s {
	case "user":
		return nil
	case "call_queue":
		return nil
	case "auto_receptionist":
		return nil
	case "common_area":
		return nil
	case "zoom_room":
		return nil
	case "cisco_room":
		return nil
	case "shared_line_group":
		return nil
	case "group_call_pickup":
		return nil
	case "external_contact":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AccountCallHistoryNumberTypesItem) Validate() error {
	switch s {
	case "zoom_pstn":
		return nil
	case "zoom_toll_free_number":
		return nil
	case "external_pstn":
		return nil
	case "external_contact":
		return nil
	case "byoc":
		return nil
	case "byop":
		return nil
	case "3rd_party_contact_center":
		return nil
	case "zoom_service_number":
		return nil
	case "external_service_number":
		return nil
	case "zoom_contact_center":
		return nil
	case "meeting_phone_number":
		return nil
	case "meeting_id":
		return nil
	case "anonymous_number":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *AccountCallHistoryOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.CallLogs {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_logs",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AccountCallHistoryOKCallLogsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Direction.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "direction",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.International.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "international",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ConnectType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "connect_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallResult.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_result",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallerExtType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "caller_ext_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallerNumberType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "caller_number_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CalleeExtType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "callee_ext_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CalleeNumberType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "callee_number_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RecordingStatus.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "recording_status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s AccountCallHistoryOKCallLogsItemCallResult) Validate() error {
	switch s {
	case "answered":
		return nil
	case "connected":
		return nil
	case "voicemail":
		return nil
	case "hang_up":
		return nil
	case "no_answer":
		return nil
	case "invalid_operation":
		return nil
	case "abandoned":
		return nil
	case "blocked":
		return nil
	case "service_unavailable":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AccountCallHistoryOKCallLogsItemCallType) Validate() error {
	switch s {
	case "general":
		return nil
	case "emergency":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AccountCallHistoryOKCallLogsItemCalleeExtType) Validate() error {
	switch s {
	case "user":
		return nil
	case "call_queue":
		return nil
	case "auto_receptionist":
		return nil
	case "common_area":
		return nil
	case "zoom_room":
		return nil
	case "cisco_room":
		return nil
	case "shared_line_group":
		return nil
	case "group_call_pickup":
		return nil
	case "external_contact":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AccountCallHistoryOKCallLogsItemCalleeNumberType) Validate() error {
	switch s {
	case "zoom_pstn":
		return nil
	case "zoom_toll_free_number":
		return nil
	case "external_pstn":
		return nil
	case "external_contact":
		return nil
	case "byoc":
		return nil
	case "byop":
		return nil
	case "3rd_party_contact_center":
		return nil
	case "zoom_service_number":
		return nil
	case "external_service_number":
		return nil
	case "zoom_contact_center":
		return nil
	case "meeting_phone_number":
		return nil
	case "meeting_id":
		return nil
	case "anonymous_number":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AccountCallHistoryOKCallLogsItemCallerExtType) Validate() error {
	switch s {
	case "user":
		return nil
	case "call_queue":
		return nil
	case "auto_receptionist":
		return nil
	case "common_area":
		return nil
	case "zoom_room":
		return nil
	case "cisco_room":
		return nil
	case "shared_line_group":
		return nil
	case "group_call_pickup":
		return nil
	case "external_contact":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AccountCallHistoryOKCallLogsItemCallerNumberType) Validate() error {
	switch s {
	case "zoom_pstn":
		return nil
	case "zoom_toll_free_number":
		return nil
	case "external_pstn":
		return nil
	case "external_contact":
		return nil
	case "byoc":
		return nil
	case "byop":
		return nil
	case "3rd_party_contact_center":
		return nil
	case "zoom_service_number":
		return nil
	case "external_service_number":
		return nil
	case "zoom_contact_center":
		return nil
	case "meeting_phone_number":
		return nil
	case "meeting_id":
		return nil
	case "anonymous_number":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AccountCallHistoryOKCallLogsItemConnectType) Validate() error {
	switch s {
	case "internal":
		return nil
	case "external":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AccountCallHistoryOKCallLogsItemDirection) Validate() error {
	switch s {
	case "inbound":
		return nil
	case "outbound":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AccountCallHistoryOKCallLogsItemInternational) Validate() error {
	switch s {
	case true:
		return nil
	case false:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AccountCallHistoryOKCallLogsItemRecordingStatus) Validate() error {
	switch s {
	case "recorded":
		return nil
	case "non_recorded":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AccountCallHistoryRecordingStatus) Validate() error {
	switch s {
	case "recorded":
		return nil
	case "non_recorded":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AccountCallHistoryTimeType) Validate() error {
	switch s {
	case "start_time":
		return nil
	case "end_time":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *AccountCallLogsOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.CallLogs {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_logs",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AccountCallLogsOKCallLogsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CallType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CalleeNumberType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "callee_number_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CalleeNumberSource.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "callee_number_source",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallerNumberType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "caller_number_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallerNumberSource.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "caller_number_source",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Owner.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "owner",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RecordingType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "recording_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s AccountCallLogsOKCallLogsItemCallType) Validate() error {
	switch s {
	case "voip":
		return nil
	case "pstn":
		return nil
	case "tollfree":
		return nil
	case "international":
		return nil
	case "contactCenter":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AccountCallLogsOKCallLogsItemCalleeNumberSource) Validate() error {
	switch s {
	case "internal":
		return nil
	case "external":
		return nil
	case "byop":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AccountCallLogsOKCallLogsItemCalleeNumberType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AccountCallLogsOKCallLogsItemCallerNumberSource) Validate() error {
	switch s {
	case "internal":
		return nil
	case "external":
		return nil
	case "byop":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AccountCallLogsOKCallLogsItemCallerNumberType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *AccountCallLogsOKCallLogsItemOwner) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s AccountCallLogsOKCallLogsItemOwnerType) Validate() error {
	switch s {
	case "user":
		return nil
	case "callQueue":
		return nil
	case "autoReceptionist":
		return nil
	case "commonArea":
		return nil
	case "sharedLineGroup":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AccountCallLogsOKCallLogsItemRecordingType) Validate() error {
	switch s {
	case "OnDemand":
		return nil
	case "Automatic":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AccountCallLogsTimeType) Validate() error {
	switch s {
	case "startTime":
		return nil
	case "endTime":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AccountSmsSessionFilterType) Validate() error {
	switch s {
	case "sent_message_time":
		return nil
	case "received_message_time":
		return nil
	case "last_message_time":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *AccountSmsSessionOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.SMSSessions {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sms_sessions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AccountSmsSessionOKSMSSessionsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Participants {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "participants",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AccountSmsSessionOKSMSSessionsItemParticipantsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Owner.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "owner",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ExtensionStatus.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "extension_status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s AccountSmsSessionOKSMSSessionsItemParticipantsItemExtensionStatus) Validate() error {
	switch s {
	case "inactive":
		return nil
	case "deleted":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *AccountSmsSessionOKSMSSessionsItemParticipantsItemOwner) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s AccountSmsSessionOKSMSSessionsItemParticipantsItemOwnerType) Validate() error {
	switch s {
	case "user":
		return nil
	case "callQueue":
		return nil
	case "autoReceptionist":
		return nil
	case "sharedLineGroup":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *AccountVoiceMailsOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.VoiceMails {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "voice_mails",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AccountVoiceMailsOKVoiceMailsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CalleeNumberType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "callee_number_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallerNumberType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "caller_number_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s AccountVoiceMailsOKVoiceMailsItemCalleeNumberType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AccountVoiceMailsOKVoiceMailsItemCallerNumberType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AccountVoiceMailsOKVoiceMailsItemStatus) Validate() error {
	switch s {
	case "read":
		return nil
	case "unread":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AccountVoiceMailsOwnerType) Validate() error {
	switch s {
	case "user":
		return nil
	case "callQueue":
		return nil
	case "sharedLineGroup":
		return nil
	case "autoReceptionist":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AccountVoiceMailsStatus) Validate() error {
	switch s {
	case "all":
		return nil
	case "read":
		return nil
	case "unread":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AccountVoiceMailsVoicemailType) Validate() error {
	switch s {
	case "normal":
		return nil
	case "spam":
		return nil
	case "maybeSpam":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *AddAccountLevelInboundBlockRulesReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.MatchType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "match_type",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    50,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.BlockedNumber)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "blocked_number",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Type.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Comment.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "comment",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Status.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s AddAccountLevelInboundBlockRulesReqMatchType) Validate() error {
	switch s {
	case "prefix":
		return nil
	case "phoneNumber":
		return nil
	case "SMS-shortCodes":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AddAccountLevelInboundBlockRulesReqStatus) Validate() error {
	switch s {
	case "active":
		return nil
	case "inactive":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AddAccountLevelInboundBlockRulesReqType) Validate() error {
	switch s {
	case "block_for_other_reasons":
		return nil
	case "block_as_threat":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *AddAccountOutboundCallingExceptionRuleReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ExceptionRule.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "exception_rule",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AddAccountOutboundCallingExceptionRuleReqExceptionRule) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.MatchType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "match_type",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    50,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.PrefixNumber)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "prefix_number",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Comment.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    255,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "comment",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Status.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s AddAccountOutboundCallingExceptionRuleReqExceptionRuleMatchType) Validate() error {
	switch s {
	case "phoneNumber":
		return nil
	case "prefix":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AddAccountOutboundCallingExceptionRuleReqExceptionRuleStatus) Validate() error {
	switch s {
	case "active":
		return nil
	case "inactive":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *AddAnAlertSettingReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.TargetType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "target_type",
			Error: err,
		})
	}
	if err := func() error {
		if s.RuleConditions == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RuleConditions {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "rule_conditions",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.TimeFrameType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "time_frame_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Frequency.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "frequency",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s AddAnAlertSettingReqFrequency) Validate() error {
	switch s {
	case 5:
		return nil
	case 10:
		return nil
	case 15:
		return nil
	case 30:
		return nil
	case 60:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *AddAnAlertSettingReqRuleConditionsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.RuleConditionType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "rule_condition_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s AddAnAlertSettingReqRuleConditionsItemRuleConditionType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	case 5:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AddAnAlertSettingReqStatus) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AddAnAlertSettingReqTargetType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	case 5:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AddAnAlertSettingReqTimeFrameType) Validate() error {
	switch s {
	case "all_day":
		return nil
	case "specific_time":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *AddAnumberToBlockedListReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.BlockType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "block_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Comment.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    255,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "comment",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Country.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "country",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MatchType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "match_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PhoneNumber.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "phone_number",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s AddAnumberToBlockedListReqBlockType) Validate() error {
	switch s {
	case "inbound":
		return nil
	case "outbound":
		return nil
	case "threat":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AddAnumberToBlockedListReqMatchType) Validate() error {
	switch s {
	case "phoneNumber":
		return nil
	case "prefix":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AddAnumberToBlockedListReqStatus) Validate() error {
	switch s {
	case "active":
		return nil
	case "inactive":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *AddBYOCNumberReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.PhoneNumbers == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "phone_numbers",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s AddCallHandlingReq) Validate() error {
	switch s.Type {
	case PostCallHandlingSettingsCallForwardingAddCallHandlingReq:
		if err := s.PostCallHandlingSettingsCallForwarding.Validate(); err != nil {
			return err
		}
		return nil
	case PostCallHandlingSettingsHolidayAddCallHandlingReq:
		if err := s.PostCallHandlingSettingsHoliday.Validate(); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s AddCallHandlingSettingType) Validate() error {
	switch s {
	case "business_hours":
		return nil
	case "closed_hours":
		return nil
	case "holiday_hours":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *AddCommonAreaOutboundCallingExceptionRuleReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ExceptionRule.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "exception_rule",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AddCommonAreaOutboundCallingExceptionRuleReqExceptionRule) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.MatchType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "match_type",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    50,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.PrefixNumber)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "prefix_number",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Comment.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    255,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "comment",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Status.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s AddCommonAreaOutboundCallingExceptionRuleReqExceptionRuleMatchType) Validate() error {
	switch s {
	case "phoneNumber":
		return nil
	case "prefix":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AddCommonAreaOutboundCallingExceptionRuleReqExceptionRuleStatus) Validate() error {
	switch s {
	case "active":
		return nil
	case "inactive":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *AddEmergencyAddressCreated) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Level.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "level",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s AddEmergencyAddressCreatedLevel) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AddEmergencyAddressCreatedStatus) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	case 5:
		return nil
	case 6:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *AddExtensionsToADeviceReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.AssigneeExtensionIds == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "assignee_extension_ids",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AddExtensiontLevelInboundBlockRulesReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.MatchType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "match_type",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    50,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.BlockedNumber)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "blocked_number",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Type.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s AddExtensiontLevelInboundBlockRulesReqMatchType) Validate() error {
	switch s {
	case "prefix":
		return nil
	case "phoneNumber":
		return nil
	case "SMS-shortCodes":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AddExtensiontLevelInboundBlockRulesReqType) Validate() error {
	switch s {
	case "block_for_other_reasons":
		return nil
	case "block_as_threat":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *AddExternalContactReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Email.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    255,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "email",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    255,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.Name)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "name",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AddFirmwareRuleReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.RestartType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "restart_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s AddFirmwareRuleReqRestartType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *AddGCPMembersReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Array{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    100,
			MaxLengthSet: true,
		}).ValidateLength(len(s.MemberExtensionIds)); err != nil {
			return errors.Wrap(err, "array")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "member_extension_ids",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AddGCPReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    32,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.DisplayName)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "display_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Delay.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "delay",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayIncomingCallsSound.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "play_incoming_calls_sound",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Array{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    100,
			MaxLengthSet: true,
		}).ValidateLength(len(s.MemberExtensionIds)); err != nil {
			return errors.Wrap(err, "array")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "member_extension_ids",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s AddGCPReqDelay) Validate() error {
	switch s {
	case 0:
		return nil
	case 5:
		return nil
	case 10:
		return nil
	case 15:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *AddGCPReqPlayIncomingCallsSound) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.RingTone.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "ring_tone",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Duration.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "duration",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s AddGCPReqPlayIncomingCallsSoundDuration) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	case 3:
		return nil
	case 5:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AddGCPReqPlayIncomingCallsSoundRingTone) Validate() error {
	switch s {
	case "ringtone_1":
		return nil
	case "ringtone_2":
		return nil
	case "ringtone_3":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AddMembersMemberType) Validate() error {
	switch s {
	case "monitor":
		return nil
	case "monitored":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *AddMembersToCallQueueReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Members.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "members",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AddMembersToCallQueueReqMembers) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Users {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "users",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AddMembersToCallQueueReqMembersUsersItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Email.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        true,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "email",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AddOutboundCallerNumbersReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Array{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    30,
			MaxLengthSet: true,
		}).ValidateLength(len(s.PhoneNumberIds)); err != nil {
			return errors.Wrap(err, "array")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "phone_number_ids",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AddPhoneDeviceReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.AssigneeExtensionIds == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "assignee_extension_ids",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    255,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.DisplayName)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "display_name",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        false,
			Hostname:     false,
			Regex:        regexMap["^([0-9A-Fa-f]{2}[:-]?){5}([0-9A-Fa-f]{2})$"],
		}).Validate(string(s.MACAddress)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "mac_address",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Model.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "model",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    50,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.Type)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AddProvisionTemplateReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    128,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.Name)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Description.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    255,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "description",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AddRoutingRuleReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s AddRoutingRuleReqType) Validate() error {
	switch s {
	case "other_sites":
		return nil
	case "pstn":
		return nil
	case "sip_group":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *AddSLGPolicySubSettingCreated) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.VoicemailAccessMembers {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "voicemail_access_members",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AddSLGPolicySubSettingCreatedVoicemailAccessMembersItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.AccessUserType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "access_user_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s AddSLGPolicySubSettingCreatedVoicemailAccessMembersItemAccessUserType) Validate() error {
	switch s {
	case "user":
		return nil
	case "commonArea":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *AddSiteOutboundCallerNumbersReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Array{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    30,
			MaxLengthSet: true,
		}).ValidateLength(len(s.PhoneNumberIds)); err != nil {
			return errors.Wrap(err, "array")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "phone_number_ids",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AddSiteOutboundCallingExceptionRuleReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ExceptionRule.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "exception_rule",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AddSiteOutboundCallingExceptionRuleReqExceptionRule) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.MatchType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "match_type",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    50,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.PrefixNumber)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "prefix_number",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Comment.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    255,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "comment",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Status.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s AddSiteOutboundCallingExceptionRuleReqExceptionRuleMatchType) Validate() error {
	switch s {
	case "phoneNumber":
		return nil
	case "prefix":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AddSiteOutboundCallingExceptionRuleReqExceptionRuleStatus) Validate() error {
	switch s {
	case "active":
		return nil
	case "inactive":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AddSiteSettingSettingType) Validate() error {
	switch s {
	case "holiday_hours":
		return nil
	case "security":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *AddUserOutboundCallerNumbersReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Array{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    30,
			MaxLengthSet: true,
		}).ValidateLength(len(s.PhoneNumberIds)); err != nil {
			return errors.Wrap(err, "array")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "phone_number_ids",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AddUserOutboundCallingExceptionRuleReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ExceptionRule.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "exception_rule",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AddUserOutboundCallingExceptionRuleReqExceptionRule) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.MatchType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "match_type",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    50,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.PrefixNumber)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "prefix_number",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Comment.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    255,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "comment",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Status.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s AddUserOutboundCallingExceptionRuleReqExceptionRuleMatchType) Validate() error {
	switch s {
	case "phoneNumber":
		return nil
	case "prefix":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AddUserOutboundCallingExceptionRuleReqExceptionRuleStatus) Validate() error {
	switch s {
	case "active":
		return nil
	case "inactive":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *AddUserSettingCreated) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Delegation.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "delegation",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AddUserSettingCreatedDelegation) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Privileges {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "privileges",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s AddUserSettingCreatedDelegationPrivilegesItem) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *AssignCallingPlansToCommonAreaReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.CallingPlans == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "calling_plans",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AssignCampaignPhoneNumbersReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Array{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    30,
			MaxLengthSet: true,
		}).ValidateLength(len(s.PhoneNumbers)); err != nil {
			return errors.Wrap(err, "array")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "phone_numbers",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AssignPhoneNumbersToCommonAreaReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.PhoneNumbers == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "phone_numbers",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *BatchAddLocationsReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Locations == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locations",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *BatchAddUsersReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Users {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "users",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *BatchAddUsersReqUsersItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.CallingPlans == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "calling_plans",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *BatchUpdateDeviceLineKeySettingReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Positions {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "positions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *BatchUpdateDeviceLineKeySettingReqPositionsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Index.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           1,
					MaxSet:        true,
					Max:           300,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "index",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *BatchUpdateLineKeySettingReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.LineKeys {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "line_keys",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *BatchUpdateLineKeySettingReqLineKeysItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s BatchUpdateLineKeySettingReqLineKeysItemType) Validate() error {
	switch s {
	case "line":
		return nil
	case "blf":
		return nil
	case "speed_dial":
		return nil
	case "zoom_meeting":
		return nil
	case "call_park":
		return nil
	case "group_call_pickup":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *CreateASharedLineGroupReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Description.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    255,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "description",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    200,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.DisplayName)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "display_name",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *CreateCRPhoneNumbersReqItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s CreateCRPhoneNumbersReqItemStatus) Validate() error {
	switch s {
	case "active":
		return nil
	case "inactive":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *CreateCallQueueReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Description.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    32,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "description",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Members.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "members",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    32,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.Name)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "name",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *CreateCallQueueReqMembers) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Users {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "users",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *CreateCallQueueReqMembersUsersItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Email.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        true,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "email",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *CreateMonitoringGroupReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.MonitoringPrivileges {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "monitoring_privileges",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s CreateMonitoringGroupReqMonitoringPrivilegesItem) Validate() error {
	switch s {
	case "listen":
		return nil
	case "whisper":
		return nil
	case "barge":
		return nil
	case "take_over":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CreateMonitoringGroupReqType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *CreatePhoneSiteReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.DefaultEmergencyAddress.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "default_emergency_address",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    255,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.Name)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "name",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *CreatePhoneSiteReqDefaultEmergencyAddress) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    2,
			MinLengthSet: true,
			MaxLength:    2,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.Country)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "country",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s DeleteCallHandlingSettingType) Validate() error {
	switch s {
	case "business_hours":
		return nil
	case "closed_hours":
		return nil
	case "holiday_hours":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s DeleteFirmwareUpdateRuleRestartType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s DeleteSiteSettingSettingType) Validate() error {
	switch s {
	case "holiday_hours":
		return nil
	case "security":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetABlockedListOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.BlockType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "block_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Comment.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    255,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "comment",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MatchType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "match_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PhoneNumber.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "phone_number",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetABlockedListOKBlockType) Validate() error {
	switch s {
	case "inbound":
		return nil
	case "outbound":
		return nil
	case "threat":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetABlockedListOKMatchType) Validate() error {
	switch s {
	case "phoneNumber":
		return nil
	case "prefix":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetABlockedListOKStatus) Validate() error {
	switch s {
	case "active":
		return nil
	case "inactive":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetACallQueueOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Members.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "members",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.PhoneNumbers {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "phone_numbers",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetACallQueueOKMembers) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Users {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "users",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetACallQueueOKMembersUsersItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Level.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "level",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetACallQueueOKMembersUsersItemLevel) Validate() error {
	switch s {
	case "manager":
		return nil
	case "user":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetACallQueueOKPhoneNumbersItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Source.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "source",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetACallQueueOKPhoneNumbersItemSource) Validate() error {
	switch s {
	case "internal":
		return nil
	case "external":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetACallQueueOKStatus) Validate() error {
	switch s {
	case "active":
		return nil
	case "inactive":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetACommonAreaOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.EmergencyAddress.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "emergency_address",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.PhoneNumbers {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "phone_numbers",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Policy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "policy",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetACommonAreaOKEmergencyAddress) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetACommonAreaOKEmergencyAddressStatus) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	case 5:
		return nil
	case 6:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetACommonAreaOKPhoneNumbersItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Source.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "source",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetACommonAreaOKPhoneNumbersItemSource) Validate() error {
	switch s {
	case "internal":
		return nil
	case "external":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetACommonAreaOKPolicy) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.InternationalCalling.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "international_calling",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetACommonAreaOKPolicyInternationalCalling) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetACommonAreaOKPolicyInternationalCallingLockedBy) Validate() error {
	switch s {
	case "account":
		return nil
	case "site":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetACommonAreaOKStatus) Validate() error {
	switch s {
	case "online":
		return nil
	case "offline":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetADeviceOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Assignee.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "assignee",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Assignees {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "assignees",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Provision.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "provision",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetADeviceOKAssignee) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ExtensionType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "extension_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetADeviceOKAssigneeExtensionType) Validate() error {
	switch s {
	case "user":
		return nil
	case "commonArea":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetADeviceOKAssigneesItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ExtensionType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "extension_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetADeviceOKAssigneesItemExtensionType) Validate() error {
	switch s {
	case "user":
		return nil
	case "commonArea":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetADeviceOKProvision) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetADeviceOKProvisionType) Validate() error {
	switch s {
	case "assisted":
		return nil
	case "ztp":
		return nil
	case "manual":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetADeviceOKStatus) Validate() error {
	switch s {
	case "online":
		return nil
	case "offline":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetASharedLineGroupOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Policy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "policy",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetASharedLineGroupOKPolicy) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.VoicemailAccessMembers {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "voicemail_access_members",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetASharedLineGroupOKPolicyVoicemailAccessMembersItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.AccessUserType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "access_user_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetASharedLineGroupOKPolicyVoicemailAccessMembersItemAccessUserType) Validate() error {
	switch s {
	case "user":
		return nil
	case "commonArea":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetASharedLineGroupOKStatus) Validate() error {
	switch s {
	case "active":
		return nil
	case "inactive":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetASiteOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Policy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "policy",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetASiteOKPolicy) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.SelectOutboundCallerID.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "select_outbound_caller_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PersonalAudioLibrary.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "personal_audio_library",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Voicemail.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "voicemail",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.VoicemailTranscription.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "voicemail_transcription",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.VoicemailNotificationByEmail.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "voicemail_notification_by_email",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SharedVoicemailNotificationByEmail.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shared_voicemail_notification_by_email",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.InternationalCalling.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "international_calling",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ZoomPhoneOnMobile.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "zoom_phone_on_mobile",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SMS.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sms",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ElevateToMeeting.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "elevate_to_meeting",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.HandOffToRoom.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "hand_off_to_room",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MobileSwitchToCarrier.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "mobile_switch_to_carrier",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Delegation.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "delegation",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AdHocCallRecording.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "ad_hoc_call_recording",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AutoCallRecording.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "auto_call_recording",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallHandlingForwardingToOtherUsers.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_handling_forwarding_to_other_users",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CheckVoicemailsOverPhone.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "check_voicemails_over_phone",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallQueuePickupCode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_queue_pickup_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallQueueOptOutReason.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_queue_opt_out_reason",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AutoDeleteDataAfterRetentionDuration.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "auto_delete_data_after_retention_duration",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallPark.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_park",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallOverflow.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_overflow",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallTransferring.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_transferring",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AudioIntercom.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "audio_intercom",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BlockCallsWithoutCallerID.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "block_calls_without_caller_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BlockExternalCalls.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "block_external_calls",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetASiteOKPolicyAdHocCallRecording) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.PlayRecordingBeepTone.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "play_recording_beep_tone",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetASiteOKPolicyAdHocCallRecordingLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "site":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetASiteOKPolicyAdHocCallRecordingPlayRecordingBeepTone) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.PlayBeepVolume.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "play_beep_volume",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayBeepTimeInterval.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "play_beep_time_interval",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayBeepMember.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "play_beep_member",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetASiteOKPolicyAdHocCallRecordingPlayRecordingBeepTonePlayBeepMember) Validate() error {
	switch s {
	case "allMember":
		return nil
	case "recordingSide":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetASiteOKPolicyAdHocCallRecordingPlayRecordingBeepTonePlayBeepTimeInterval) Validate() error {
	switch s {
	case 5:
		return nil
	case 10:
		return nil
	case 15:
		return nil
	case 20:
		return nil
	case 25:
		return nil
	case 30:
		return nil
	case 60:
		return nil
	case 120:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetASiteOKPolicyAdHocCallRecordingPlayRecordingBeepTonePlayBeepVolume) Validate() error {
	switch s {
	case 0:
		return nil
	case 20:
		return nil
	case 40:
		return nil
	case 60:
		return nil
	case 80:
		return nil
	case 100:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetASiteOKPolicyAudioIntercom) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetASiteOKPolicyAudioIntercomLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "site":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetASiteOKPolicyAutoCallRecording) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RecordingCalls.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "recording_calls",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayRecordingBeepTone.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "play_recording_beep_tone",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetASiteOKPolicyAutoCallRecordingLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "site":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetASiteOKPolicyAutoCallRecordingPlayRecordingBeepTone) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.PlayBeepVolume.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "play_beep_volume",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayBeepTimeInterval.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "play_beep_time_interval",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayBeepMember.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "play_beep_member",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetASiteOKPolicyAutoCallRecordingPlayRecordingBeepTonePlayBeepMember) Validate() error {
	switch s {
	case "allMember":
		return nil
	case "recordingSide":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetASiteOKPolicyAutoCallRecordingPlayRecordingBeepTonePlayBeepTimeInterval) Validate() error {
	switch s {
	case 5:
		return nil
	case 10:
		return nil
	case 15:
		return nil
	case 20:
		return nil
	case 25:
		return nil
	case 30:
		return nil
	case 60:
		return nil
	case 120:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetASiteOKPolicyAutoCallRecordingPlayRecordingBeepTonePlayBeepVolume) Validate() error {
	switch s {
	case 0:
		return nil
	case 20:
		return nil
	case 40:
		return nil
	case 60:
		return nil
	case 80:
		return nil
	case 100:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetASiteOKPolicyAutoCallRecordingRecordingCalls) Validate() error {
	switch s {
	case "inbound":
		return nil
	case "outbound":
		return nil
	case "both":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetASiteOKPolicyAutoDeleteDataAfterRetentionDuration) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DeleteType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "delete_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetASiteOKPolicyAutoDeleteDataAfterRetentionDurationDeleteType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetASiteOKPolicyAutoDeleteDataAfterRetentionDurationItemsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.TimeUnit.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "time_unit",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetASiteOKPolicyAutoDeleteDataAfterRetentionDurationItemsItemTimeUnit) Validate() error {
	switch s {
	case "year":
		return nil
	case "month":
		return nil
	case "day":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetASiteOKPolicyAutoDeleteDataAfterRetentionDurationItemsItemType) Validate() error {
	switch s {
	case "callLog":
		return nil
	case "onDemandRecording":
		return nil
	case "automaticRecording":
		return nil
	case "voicemail":
		return nil
	case "videomail":
		return nil
	case "sms":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetASiteOKPolicyAutoDeleteDataAfterRetentionDurationLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "site":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetASiteOKPolicyBlockCallsWithoutCallerID) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetASiteOKPolicyBlockCallsWithoutCallerIDLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "site":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetASiteOKPolicyBlockExternalCalls) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BlockCallAction.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "block_call_action",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BlockCallChangeType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "block_call_change_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.E2eEncryption.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "e2e_encryption",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetASiteOKPolicyBlockExternalCallsBlockCallAction) Validate() error {
	switch s {
	case 0:
		return nil
	case 9:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetASiteOKPolicyBlockExternalCallsBlockCallChangeType) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetASiteOKPolicyBlockExternalCallsE2eEncryption) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetASiteOKPolicyBlockExternalCallsE2eEncryptionLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "site":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetASiteOKPolicyBlockExternalCallsLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "site":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetASiteOKPolicyCallHandlingForwardingToOtherUsers) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CallForwardingType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_forwarding_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetASiteOKPolicyCallHandlingForwardingToOtherUsersCallForwardingType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetASiteOKPolicyCallHandlingForwardingToOtherUsersLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "site":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetASiteOKPolicyCallOverflow) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CallOverflowType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_overflow_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetASiteOKPolicyCallOverflowCallOverflowType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetASiteOKPolicyCallOverflowLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "site":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetASiteOKPolicyCallPark) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ExpirationPeriod.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "expiration_period",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ForwardTo.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "forward_to",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Sequence.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sequence",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetASiteOKPolicyCallParkExpirationPeriod) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	case 5:
		return nil
	case 6:
		return nil
	case 7:
		return nil
	case 8:
		return nil
	case 9:
		return nil
	case 10:
		return nil
	case 15:
		return nil
	case 20:
		return nil
	case 25:
		return nil
	case 30:
		return nil
	case 35:
		return nil
	case 40:
		return nil
	case 45:
		return nil
	case 50:
		return nil
	case 55:
		return nil
	case 60:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetASiteOKPolicyCallParkForwardTo) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ExtensionType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "extension_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetASiteOKPolicyCallParkForwardToExtensionType) Validate() error {
	switch s {
	case "user":
		return nil
	case "zoomRoom":
		return nil
	case "commonArea":
		return nil
	case "ciscoRoom/polycomRoom":
		return nil
	case "autoReceptionist":
		return nil
	case "callQueue":
		return nil
	case "sharedLineGroup":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetASiteOKPolicyCallParkLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "site":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetASiteOKPolicyCallParkSequence) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetASiteOKPolicyCallQueueOptOutReason) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetASiteOKPolicyCallQueueOptOutReasonLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "site":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetASiteOKPolicyCallQueuePickupCode) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetASiteOKPolicyCallQueuePickupCodeLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "site":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetASiteOKPolicyCallTransferring) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CallTransferringType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_transferring_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetASiteOKPolicyCallTransferringCallTransferringType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetASiteOKPolicyCallTransferringLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "site":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetASiteOKPolicyCheckVoicemailsOverPhone) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetASiteOKPolicyCheckVoicemailsOverPhoneLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "site":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetASiteOKPolicyDelegation) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetASiteOKPolicyDelegationLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "site":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetASiteOKPolicyElevateToMeeting) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetASiteOKPolicyElevateToMeetingLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "site":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetASiteOKPolicyHandOffToRoom) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetASiteOKPolicyHandOffToRoomLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "site":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetASiteOKPolicyInternationalCalling) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetASiteOKPolicyInternationalCallingLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "site":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetASiteOKPolicyMobileSwitchToCarrier) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetASiteOKPolicyMobileSwitchToCarrierLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "site":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetASiteOKPolicyPersonalAudioLibrary) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetASiteOKPolicyPersonalAudioLibraryLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "site":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetASiteOKPolicySMS) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetASiteOKPolicySMSLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "site":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetASiteOKPolicySelectOutboundCallerID) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetASiteOKPolicySelectOutboundCallerIDLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "site":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetASiteOKPolicySharedVoicemailNotificationByEmail) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetASiteOKPolicySharedVoicemailNotificationByEmailLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "site":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetASiteOKPolicyVoicemail) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetASiteOKPolicyVoicemailLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "site":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetASiteOKPolicyVoicemailNotificationByEmail) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetASiteOKPolicyVoicemailNotificationByEmailLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "site":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetASiteOKPolicyVoicemailTranscription) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetASiteOKPolicyVoicemailTranscriptionLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "site":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetASiteOKPolicyZoomPhoneOnMobile) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetASiteOKPolicyZoomPhoneOnMobileLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "site":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetAccountOutboundCallingCountriesAndRegionsOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.CountriesRegions {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "countries_regions",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PageSize.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        false,
					Min:           0,
					MaxSet:        true,
					Max:           300,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "page_size",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetAccountOutboundCallingCountriesAndRegionsOKCountriesRegionsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Rule.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "rule",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetAccountOutboundCallingCountriesAndRegionsOKCountriesRegionsItemRule) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetAlertSettingDetailsOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.RuleConditions {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "rule_conditions",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Targets {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "targets",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.TimeFrameType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "time_frame_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Frequency.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "frequency",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetAlertSettingDetailsOKFrequency) Validate() error {
	switch s {
	case 5:
		return nil
	case 10:
		return nil
	case 15:
		return nil
	case 30:
		return nil
	case 60:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetAlertSettingDetailsOKRuleConditionsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.RuleConditionType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "rule_condition_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetAlertSettingDetailsOKRuleConditionsItemRuleConditionType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	case 5:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetAlertSettingDetailsOKStatus) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetAlertSettingDetailsOKTargetsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.TargetType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "target_type",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Assignees {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "assignees",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetAlertSettingDetailsOKTargetsItemAssigneesItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ExtensionType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "extension_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetAlertSettingDetailsOKTargetsItemAssigneesItemExtensionType) Validate() error {
	switch s {
	case "user":
		return nil
	case "commonArea":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetAlertSettingDetailsOKTargetsItemTargetType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	case 5:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetAlertSettingDetailsOKTimeFrameType) Validate() error {
	switch s {
	case "all_day":
		return nil
	case "specific_time":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetAudioItemOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.VoiceLanguage.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "voice_language",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetAudioItemOKVoiceLanguage) Validate() error {
	switch s {
	case "en-US":
		return nil
	case "en-GB":
		return nil
	case "en-GB-WLS":
		return nil
	case "en-AU":
		return nil
	case "en-IN":
		return nil
	case "en-ZA":
		return nil
	case "en-NZ":
		return nil
	case "es-ES":
		return nil
	case "es-US":
		return nil
	case "es-MX":
		return nil
	case "fr-CA":
		return nil
	case "da-DK":
		return nil
	case "de-DE":
		return nil
	case "fr-FR":
		return nil
	case "it-IT":
		return nil
	case "is-IS":
		return nil
	case "nl-NL":
		return nil
	case "pt-PT":
		return nil
	case "ja-JP":
		return nil
	case "ko-KO":
		return nil
	case "ko-KR":
		return nil
	case "pt-BR":
		return nil
	case "pl-PL":
		return nil
	case "zh-CN":
		return nil
	case "zh-TW":
		return nil
	case "cmn-CN":
		return nil
	case "tr-TR":
		return nil
	case "nb-NO":
		return nil
	case "ro-RO":
		return nil
	case "ru-RU":
		return nil
	case "sv-SE":
		return nil
	case "cy-GB":
		return nil
	case "ca-ES":
		return nil
	case "de-AT":
		return nil
	case "arb":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetAutoReceptionistDetailOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.AudioPromptLanguage.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "audio_prompt_language",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RecordingStorageLocation.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "recording_storage_location",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetAutoReceptionistDetailOKAudioPromptLanguage) Validate() error {
	switch s {
	case "en-US":
		return nil
	case "en-GB":
		return nil
	case "es-US":
		return nil
	case "fr-CA":
		return nil
	case "da-DK":
		return nil
	case "de-DE":
		return nil
	case "es-ES":
		return nil
	case "fr-FR":
		return nil
	case "it-IT":
		return nil
	case "nl-NL":
		return nil
	case "pt-PT":
		return nil
	case "ja":
		return nil
	case "ko-KR":
		return nil
	case "pt-BR":
		return nil
	case "zh-CN":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetAutoReceptionistDetailOKRecordingStorageLocation) Validate() error {
	switch s {
	case "US":
		return nil
	case "AU":
		return nil
	case "CA":
		return nil
	case "DE":
		return nil
	case "IN":
		return nil
	case "JP":
		return nil
	case "SG":
		return nil
	case "BR":
		return nil
	case "CN":
		return nil
	case "MX":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetAutoReceptionistIVROK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CallerEntersNoAction.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "caller_enters_no_action",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetAutoReceptionistIVROKCallerEntersNoAction) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.AudioPromptRepeat.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "audio_prompt_repeat",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetAutoReceptionistIVROKCallerEntersNoActionAudioPromptRepeat) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetAutoReceptionistsPolicyOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.VoicemailTranscription.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "voicemail_transcription",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.VoicemailNotificationByEmail.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "voicemail_notification_by_email",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SMS.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sms",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetAutoReceptionistsPolicyOKSMS) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetAutoReceptionistsPolicyOKSMSLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "site":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetAutoReceptionistsPolicyOKVoicemailNotificationByEmail) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetAutoReceptionistsPolicyOKVoicemailNotificationByEmailLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "site":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetAutoReceptionistsPolicyOKVoicemailTranscription) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetAutoReceptionistsPolicyOKVoicemailTranscriptionLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "site":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetCallChargesUsageReportOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.PageSize.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        false,
					Min:           0,
					MaxSet:        true,
					Max:           300,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "page_size",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.CallCharges {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_charges",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetCallChargesUsageReportOKCallChargesItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CallType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ServiceType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "service_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ChargeMode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "charge_mode",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetCallChargesUsageReportOKCallChargesItemCallType) Validate() error {
	switch s {
	case "voip":
		return nil
	case "local":
		return nil
	case "tollfree":
		return nil
	case "international":
		return nil
	case "callCenter":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetCallChargesUsageReportOKCallChargesItemChargeMode) Validate() error {
	switch s {
	case "per_min":
		return nil
	case "per_call":
		return nil
	case "per_call_per_min":
		return nil
	case "per_min_after_t_duration":
		return nil
	case "per_call_per_min_after_t_duration":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetCallChargesUsageReportOKCallChargesItemServiceType) Validate() error {
	switch s {
	case "meeting":
		return nil
	case "call":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetCallHandlingOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.BusinessHours {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "business_hours",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.ClosedHours {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "closed_hours",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.HolidayHours {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "holiday_hours",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetCallHandlingOKBusinessHoursItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Settings.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "settings",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SubSettingType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sub_setting_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetCallHandlingOKBusinessHoursItemSettings) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CallDistribution.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_distribution",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallNotAnswerAction.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_not_answer_action",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.CustomHoursSettings {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "custom_hours_settings",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MaxWaitTime.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "max_wait_time",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RingMode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "ring_mode",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Routing.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "routing",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BusyRouting.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "busy_routing",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.WrapUpTime.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "wrap_up_time",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetCallHandlingOKBusinessHoursItemSettingsBusyRouting) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ForwardTo.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "forward_to",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Operator.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "operator",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetCallHandlingOKBusinessHoursItemSettingsBusyRoutingForwardTo) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ExtensionType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "extension_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetCallHandlingOKBusinessHoursItemSettingsBusyRoutingForwardToExtensionType) Validate() error {
	switch s {
	case "user":
		return nil
	case "autoReceptionist":
		return nil
	case "callQueue":
		return nil
	case "commonArea":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetCallHandlingOKBusinessHoursItemSettingsBusyRoutingOperator) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ExtensionType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "extension_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetCallHandlingOKBusinessHoursItemSettingsBusyRoutingOperatorExtensionType) Validate() error {
	switch s {
	case "user":
		return nil
	case "commonArea":
		return nil
	case "sharedLineGroup":
		return nil
	case "callQueue":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetCallHandlingOKBusinessHoursItemSettingsCallDistribution) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.RingDuration.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "ring_duration",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RingMode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "ring_mode",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetCallHandlingOKBusinessHoursItemSettingsCallDistributionRingDuration) Validate() error {
	switch s {
	case 10:
		return nil
	case 15:
		return nil
	case 20:
		return nil
	case 25:
		return nil
	case 30:
		return nil
	case 35:
		return nil
	case 40:
		return nil
	case 45:
		return nil
	case 50:
		return nil
	case 55:
		return nil
	case 60:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetCallHandlingOKBusinessHoursItemSettingsCallDistributionRingMode) Validate() error {
	switch s {
	case "simultaneous":
		return nil
	case "sequential":
		return nil
	case "rotating":
		return nil
	case "longest_idle":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetCallHandlingOKBusinessHoursItemSettingsCallNotAnswerAction) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 4:
		return nil
	case 6:
		return nil
	case 7:
		return nil
	case 8:
		return nil
	case 9:
		return nil
	case 10:
		return nil
	case 11:
		return nil
	case 12:
		return nil
	case 13:
		return nil
	case 14:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetCallHandlingOKBusinessHoursItemSettingsCustomHoursSettingsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Weekday.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "weekday",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetCallHandlingOKBusinessHoursItemSettingsCustomHoursSettingsItemType) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetCallHandlingOKBusinessHoursItemSettingsCustomHoursSettingsItemWeekday) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	case 5:
		return nil
	case 6:
		return nil
	case 7:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetCallHandlingOKBusinessHoursItemSettingsMaxWaitTime) Validate() error {
	switch s {
	case 10:
		return nil
	case 15:
		return nil
	case 20:
		return nil
	case 25:
		return nil
	case 30:
		return nil
	case 35:
		return nil
	case 40:
		return nil
	case 45:
		return nil
	case 50:
		return nil
	case 55:
		return nil
	case 60:
		return nil
	case 120:
		return nil
	case 180:
		return nil
	case 240:
		return nil
	case 300:
		return nil
	case 600:
		return nil
	case 900:
		return nil
	case 1200:
		return nil
	case 1500:
		return nil
	case 1800:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetCallHandlingOKBusinessHoursItemSettingsRingMode) Validate() error {
	switch s {
	case "simultaneous":
		return nil
	case "sequential":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetCallHandlingOKBusinessHoursItemSettingsRouting) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ForwardTo.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "forward_to",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Operator.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "operator",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetCallHandlingOKBusinessHoursItemSettingsRoutingForwardTo) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ExtensionType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "extension_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetCallHandlingOKBusinessHoursItemSettingsRoutingForwardToExtensionType) Validate() error {
	switch s {
	case "user":
		return nil
	case "autoReceptionist":
		return nil
	case "callQueue":
		return nil
	case "commonArea":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetCallHandlingOKBusinessHoursItemSettingsRoutingOperator) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ExtensionType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "extension_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetCallHandlingOKBusinessHoursItemSettingsRoutingOperatorExtensionType) Validate() error {
	switch s {
	case "user":
		return nil
	case "commonArea":
		return nil
	case "sharedLineGroup":
		return nil
	case "callQueue":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetCallHandlingOKBusinessHoursItemSettingsType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetCallHandlingOKBusinessHoursItemSettingsWrapUpTime) Validate() error {
	switch s {
	case 10:
		return nil
	case 15:
		return nil
	case 20:
		return nil
	case 25:
		return nil
	case 30:
		return nil
	case 35:
		return nil
	case 40:
		return nil
	case 45:
		return nil
	case 50:
		return nil
	case 55:
		return nil
	case 60:
		return nil
	case 120:
		return nil
	case 180:
		return nil
	case 240:
		return nil
	case 300:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetCallHandlingOKBusinessHoursItemSubSettingType) Validate() error {
	switch s {
	case "call_forwarding":
		return nil
	case "custom_hours":
		return nil
	case "call_handling":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetCallHandlingOKClosedHoursItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Settings.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "settings",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SubSettingType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sub_setting_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetCallHandlingOKClosedHoursItemSettings) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CallNotAnswerAction.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_not_answer_action",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MaxWaitTime.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "max_wait_time",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RingMode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "ring_mode",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Routing.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "routing",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BusyRouting.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "busy_routing",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetCallHandlingOKClosedHoursItemSettingsBusyRouting) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ForwardTo.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "forward_to",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Operator.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "operator",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetCallHandlingOKClosedHoursItemSettingsBusyRoutingForwardTo) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ExtensionType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "extension_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetCallHandlingOKClosedHoursItemSettingsBusyRoutingForwardToExtensionType) Validate() error {
	switch s {
	case "user":
		return nil
	case "autoReceptionist":
		return nil
	case "callQueue":
		return nil
	case "commonArea":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetCallHandlingOKClosedHoursItemSettingsBusyRoutingOperator) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ExtensionType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "extension_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetCallHandlingOKClosedHoursItemSettingsBusyRoutingOperatorExtensionType) Validate() error {
	switch s {
	case "user":
		return nil
	case "commonArea":
		return nil
	case "sharedLineGroup":
		return nil
	case "callQueue":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetCallHandlingOKClosedHoursItemSettingsCallNotAnswerAction) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 4:
		return nil
	case 6:
		return nil
	case 7:
		return nil
	case 8:
		return nil
	case 9:
		return nil
	case 10:
		return nil
	case 11:
		return nil
	case 12:
		return nil
	case 13:
		return nil
	case 14:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetCallHandlingOKClosedHoursItemSettingsMaxWaitTime) Validate() error {
	switch s {
	case 10:
		return nil
	case 15:
		return nil
	case 20:
		return nil
	case 25:
		return nil
	case 30:
		return nil
	case 35:
		return nil
	case 40:
		return nil
	case 45:
		return nil
	case 50:
		return nil
	case 55:
		return nil
	case 60:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetCallHandlingOKClosedHoursItemSettingsRingMode) Validate() error {
	switch s {
	case "simultaneous":
		return nil
	case "sequential":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetCallHandlingOKClosedHoursItemSettingsRouting) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ForwardTo.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "forward_to",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Operator.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "operator",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetCallHandlingOKClosedHoursItemSettingsRoutingForwardTo) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ExtensionType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "extension_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetCallHandlingOKClosedHoursItemSettingsRoutingForwardToExtensionType) Validate() error {
	switch s {
	case "user":
		return nil
	case "autoReceptionist":
		return nil
	case "callQueue":
		return nil
	case "commonArea":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetCallHandlingOKClosedHoursItemSettingsRoutingOperator) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ExtensionType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "extension_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetCallHandlingOKClosedHoursItemSettingsRoutingOperatorExtensionType) Validate() error {
	switch s {
	case "user":
		return nil
	case "commonArea":
		return nil
	case "sharedLineGroup":
		return nil
	case "callQueue":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetCallHandlingOKClosedHoursItemSubSettingType) Validate() error {
	switch s {
	case "call_forwarding":
		return nil
	case "call_handling":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetCallHandlingOKHolidayHoursItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Details {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "details",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetCallHandlingOKHolidayHoursItemDetailsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Settings.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "settings",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SubSettingType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sub_setting_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetCallHandlingOKHolidayHoursItemDetailsItemSettings) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CallNotAnswerAction.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_not_answer_action",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MaxWaitTime.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "max_wait_time",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RingMode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "ring_mode",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Routing.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "routing",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetCallHandlingOKHolidayHoursItemDetailsItemSettingsCallNotAnswerAction) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 4:
		return nil
	case 6:
		return nil
	case 7:
		return nil
	case 8:
		return nil
	case 9:
		return nil
	case 10:
		return nil
	case 11:
		return nil
	case 12:
		return nil
	case 13:
		return nil
	case 14:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetCallHandlingOKHolidayHoursItemDetailsItemSettingsMaxWaitTime) Validate() error {
	switch s {
	case 10:
		return nil
	case 15:
		return nil
	case 20:
		return nil
	case 25:
		return nil
	case 30:
		return nil
	case 35:
		return nil
	case 40:
		return nil
	case 45:
		return nil
	case 50:
		return nil
	case 55:
		return nil
	case 60:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRingMode) Validate() error {
	switch s {
	case "simultaneous":
		return nil
	case "sequential":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRouting) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ForwardTo.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "forward_to",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Operator.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "operator",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingForwardTo) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ExtensionType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "extension_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingForwardToExtensionType) Validate() error {
	switch s {
	case "user":
		return nil
	case "autoReceptionist":
		return nil
	case "callQueue":
		return nil
	case "commonArea":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingOperator) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ExtensionType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "extension_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingOperatorExtensionType) Validate() error {
	switch s {
	case "user":
		return nil
	case "commonArea":
		return nil
	case "sharedLineGroup":
		return nil
	case "callQueue":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetCallHandlingOKHolidayHoursItemDetailsItemSubSettingType) Validate() error {
	switch s {
	case "call_forwarding":
		return nil
	case "call_handling":
		return nil
	case "holiday":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetCallLogDetailsOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CallType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CalleeNumberType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "callee_number_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CalleeNumberSource.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "callee_number_source",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CalleeStatus.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "callee_status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallerNumberType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "caller_number_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallerNumberSource.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "caller_number_source",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallerStatus.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "caller_status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Direction.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "direction",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.LogDetails {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "log_details",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetCallLogDetailsOKCallType) Validate() error {
	switch s {
	case "voip":
		return nil
	case "pstn":
		return nil
	case "tollfree":
		return nil
	case "international":
		return nil
	case "contactCenter":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetCallLogDetailsOKCalleeNumberSource) Validate() error {
	switch s {
	case "internal":
		return nil
	case "external":
		return nil
	case "byop":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetCallLogDetailsOKCalleeNumberType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetCallLogDetailsOKCalleeStatus) Validate() error {
	switch s {
	case "inactive":
		return nil
	case "deleted":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetCallLogDetailsOKCallerNumberSource) Validate() error {
	switch s {
	case "internal":
		return nil
	case "external":
		return nil
	case "byop":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetCallLogDetailsOKCallerNumberType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetCallLogDetailsOKCallerStatus) Validate() error {
	switch s {
	case "inactive":
		return nil
	case "deleted":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetCallLogDetailsOKDirection) Validate() error {
	switch s {
	case "inbound":
		return nil
	case "outbound":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetCallLogDetailsOKLogDetailsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ForwardTo.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "forward_to",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetCallLogDetailsOKLogDetailsItemForwardTo) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ExtensionStatus.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "extension_status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetCallLogDetailsOKLogDetailsItemForwardToExtensionStatus) Validate() error {
	switch s {
	case "inactive":
		return nil
	case "deleted":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetCallLogDetailsOKLogDetailsItemForwardToType) Validate() error {
	switch s {
	case "user":
		return nil
	case "callQueue":
		return nil
	case "autoReceptionist":
		return nil
	case "sharedLineGroup":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetCallLogMetricsDetailsOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Callee.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "callee",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Caller.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "caller",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetCallLogMetricsDetailsOKCallee) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ExtensionType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "extension_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetCallLogMetricsDetailsOKCalleeExtensionType) Validate() error {
	switch s {
	case "user":
		return nil
	case "callQueue":
		return nil
	case "autoReceptionist":
		return nil
	case "sharedLineGroup":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetCallLogMetricsDetailsOKCaller) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ExtensionType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "extension_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetCallLogMetricsDetailsOKCallerExtensionType) Validate() error {
	switch s {
	case "user":
		return nil
	case "callQueue":
		return nil
	case "autoReceptionist":
		return nil
	case "sharedLineGroup":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetCallPathOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ConnectType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "connect_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Direction.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "direction",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.International.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "international",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallerExtType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "caller_ext_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CalleeExtType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "callee_ext_type",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.CallPath {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_path",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetCallPathOKCallPathItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ConnectType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "connect_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Direction.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "direction",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallerExtType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "caller_ext_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallerNumberType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "caller_number_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CalleeExtType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "callee_ext_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CalleeNumberType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "callee_number_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Event.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "event",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Result.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "result",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ResultReason.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "result_reason",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.OperatorExtType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "operator_ext_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetCallPathOKCallPathItemCallType) Validate() error {
	switch s {
	case "general":
		return nil
	case "emergency":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetCallPathOKCallPathItemCalleeExtType) Validate() error {
	switch s {
	case "user":
		return nil
	case "call_queue":
		return nil
	case "auto_receptionist":
		return nil
	case "common_area":
		return nil
	case "zoom_room":
		return nil
	case "cisco_room":
		return nil
	case "shared_line_group":
		return nil
	case "group_call_pickup":
		return nil
	case "external_contact":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetCallPathOKCallPathItemCalleeNumberType) Validate() error {
	switch s {
	case "zoom_pstn":
		return nil
	case "zoom_toll_free_number":
		return nil
	case "external_pstn":
		return nil
	case "external_contact":
		return nil
	case "byoc":
		return nil
	case "byop":
		return nil
	case "3rd_party_contact_center":
		return nil
	case "zoom_service_number":
		return nil
	case "external_service_number":
		return nil
	case "zoom_contact_center":
		return nil
	case "meeting_phone_number":
		return nil
	case "meeting_id":
		return nil
	case "anonymous_number":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetCallPathOKCallPathItemCallerExtType) Validate() error {
	switch s {
	case "user":
		return nil
	case "call_queue":
		return nil
	case "auto_receptionist":
		return nil
	case "common_area":
		return nil
	case "zoom_room":
		return nil
	case "cisco_room":
		return nil
	case "shared_line_group":
		return nil
	case "group_call_pickup":
		return nil
	case "external_contact":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetCallPathOKCallPathItemCallerNumberType) Validate() error {
	switch s {
	case "zoom_pstn":
		return nil
	case "zoom_toll_free_number":
		return nil
	case "external_pstn":
		return nil
	case "external_contact":
		return nil
	case "byoc":
		return nil
	case "byop":
		return nil
	case "3rd_party_contact_center":
		return nil
	case "zoom_service_number":
		return nil
	case "external_service_number":
		return nil
	case "zoom_contact_center":
		return nil
	case "meeting_phone_number":
		return nil
	case "meeting_id":
		return nil
	case "anonymous_number":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetCallPathOKCallPathItemConnectType) Validate() error {
	switch s {
	case "internal":
		return nil
	case "external":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetCallPathOKCallPathItemDirection) Validate() error {
	switch s {
	case "inbound":
		return nil
	case "outbound":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetCallPathOKCallPathItemEvent) Validate() error {
	switch s {
	case "incoming":
		return nil
	case "outgoing":
		return nil
	case "forward":
		return nil
	case "ring_to_member":
		return nil
	case "overflow":
		return nil
	case "direct_transfer":
		return nil
	case "barge":
		return nil
	case "monitor":
		return nil
	case "whisper":
		return nil
	case "listen":
		return nil
	case "takeover":
		return nil
	case "conference_barge":
		return nil
	case "park":
		return nil
	case "timeout":
		return nil
	case "park_pick_up":
		return nil
	case "merge":
		return nil
	case "shared":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetCallPathOKCallPathItemOperatorExtType) Validate() error {
	switch s {
	case "user":
		return nil
	case "call_queue":
		return nil
	case "auto_receptionist":
		return nil
	case "common_area":
		return nil
	case "zoom_room":
		return nil
	case "cisco_room":
		return nil
	case "shared_line_group":
		return nil
	case "group_call_pickup":
		return nil
	case "external_contact":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetCallPathOKCallPathItemResult) Validate() error {
	switch s {
	case "answered":
		return nil
	case "accepted":
		return nil
	case "picked_up":
		return nil
	case "connected":
		return nil
	case "succeeded":
		return nil
	case "voicemail":
		return nil
	case "canceled":
		return nil
	case "call_failed":
		return nil
	case "rejected":
		return nil
	case "busy":
		return nil
	case "ring_timeout":
		return nil
	case "overflowed":
		return nil
	case "no_answer":
		return nil
	case "invalid_key":
		return nil
	case "abandoned":
		return nil
	case "system_blocked":
		return nil
	case "service_unavailable":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetCallPathOKCallPathItemResultReason) Validate() error {
	switch s {
	case "answered_by_other":
		return nil
	case "pickup_by_other":
		return nil
	case "call_out_by_other":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetCallPathOKCallType) Validate() error {
	switch s {
	case "general":
		return nil
	case "emergency":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetCallPathOKCalleeExtType) Validate() error {
	switch s {
	case "user":
		return nil
	case "call_queue":
		return nil
	case "auto_receptionist":
		return nil
	case "common_area":
		return nil
	case "zoom_room":
		return nil
	case "cisco_room":
		return nil
	case "shared_line_group":
		return nil
	case "group_call_pickup":
		return nil
	case "external_contact":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetCallPathOKCallerExtType) Validate() error {
	switch s {
	case "user":
		return nil
	case "call_queue":
		return nil
	case "auto_receptionist":
		return nil
	case "common_area":
		return nil
	case "zoom_room":
		return nil
	case "cisco_room":
		return nil
	case "shared_line_group":
		return nil
	case "group_call_pickup":
		return nil
	case "external_contact":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetCallPathOKConnectType) Validate() error {
	switch s {
	case "internal":
		return nil
	case "external":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetCallPathOKDirection) Validate() error {
	switch s {
	case "inbound":
		return nil
	case "outbound":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetCallPathOKInternational) Validate() error {
	switch s {
	case true:
		return nil
	case false:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetCallQueueRecordingsOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Recordings {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "recordings",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetCallQueueRecordingsOKRecordingsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CalleeNumberType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "callee_number_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallerNumberType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "caller_number_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetCallQueueRecordingsOKRecordingsItemCalleeNumberType) Validate() error {
	switch s {
	case "1":
		return nil
	case "2":
		return nil
	case "3":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetCallQueueRecordingsOKRecordingsItemCallerNumberType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetCommonAreaOutboundCallingCountriesAndRegionsOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.CountriesRegions {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "countries_regions",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PageSize.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        false,
					Min:           0,
					MaxSet:        true,
					Max:           300,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "page_size",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetCommonAreaOutboundCallingCountriesAndRegionsOKCountriesRegionsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Rule.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "rule",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetCommonAreaOutboundCallingCountriesAndRegionsOKCountriesRegionsItemRule) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetCommonAreaSettingsOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.DeskPhones {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "desk_phones",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetCommonAreaSettingsOKDeskPhonesItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.HotDesking.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "hot_desking",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetCommonAreaSettingsOKDeskPhonesItemHotDesking) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetCommonAreaSettingsOKDeskPhonesItemHotDeskingStatus) Validate() error {
	switch s {
	case "unsupported":
		return nil
	case "on":
		return nil
	case "off":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetCommonAreaSettingsOKDeskPhonesItemStatus) Validate() error {
	switch s {
	case "online":
		return nil
	case "offline":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetEmergencyAddressOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Level.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "level",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetEmergencyAddressOKLevel) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetEmergencyAddressOKStatus) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	case 5:
		return nil
	case 6:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetGCPOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Delay.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "delay",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayIncomingCallsSound.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "play_incoming_calls_sound",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetGCPOKDelay) Validate() error {
	switch s {
	case 0:
		return nil
	case 5:
		return nil
	case 10:
		return nil
	case 15:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetGCPOKPlayIncomingCallsSound) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.RingTone.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "ring_tone",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Duration.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "duration",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetGCPOKPlayIncomingCallsSoundDuration) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	case 3:
		return nil
	case 5:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetGCPOKPlayIncomingCallsSoundRingTone) Validate() error {
	switch s {
	case "ringtone_1":
		return nil
	case "ringtone_2":
		return nil
	case "ringtone_3":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetGroupPhoneSettingsOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CallLiveTranscription.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_live_transcription",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.LocalSurvivabilityMode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "local_survivability_mode",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SelectOutboundCallerID.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "select_outbound_caller_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PersonalAudioLibrary.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "personal_audio_library",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Voicemail.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "voicemail",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.VoicemailTranscription.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "voicemail_transcription",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.VoicemailNotificationByEmail.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "voicemail_notification_by_email",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SharedVoicemailNotificationByEmail.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shared_voicemail_notification_by_email",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RestrictedCallHours.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "restricted_call_hours",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AllowedCallLocations.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "allowed_call_locations",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CheckVoicemailsOverPhone.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "check_voicemails_over_phone",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AutoCallRecording.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "auto_call_recording",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AdHocCallRecording.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "ad_hoc_call_recording",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ZoomPhoneOnMobile.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "zoom_phone_on_mobile",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ZoomPhoneOnPwa.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "zoom_phone_on_pwa",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SMSEtiquetteTool.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sms_etiquette_tool",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.OutboundCalling.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "outbound_calling",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.OutboundSMS.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "outbound_sms",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.InternationalCalling.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "international_calling",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SMS.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sms",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.E2eEncryption.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "e2e_encryption",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallHandlingForwarding.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_handling_forwarding",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallOverflow.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_overflow",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallTransferring.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_transferring",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ElevateToMeeting.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "elevate_to_meeting",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallPark.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_park",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.HandOffToRoom.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "hand_off_to_room",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MobileSwitchToCarrier.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "mobile_switch_to_carrier",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Delegation.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "delegation",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AudioIntercom.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "audio_intercom",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BlockListForInboundCallsAndMessaging.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "block_list_for_inbound_calls_and_messaging",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BlockCallsWithoutCallerID.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "block_calls_without_caller_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BlockExternalCalls.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "block_external_calls",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PeerToPeerMedia.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "peer_to_peer_media",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AdvancedEncryption.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "advanced_encryption",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DisplayCallFeedbackSurvey.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "display_call_feedback_survey",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetGroupPhoneSettingsOKAdHocCallRecording) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayRecordingBeepTone.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "play_recording_beep_tone",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetGroupPhoneSettingsOKAdHocCallRecordingLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "site":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetGroupPhoneSettingsOKAdHocCallRecordingPlayRecordingBeepTone) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.PlayBeepVolume.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "play_beep_volume",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayBeepTimeInterval.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "play_beep_time_interval",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayBeepMember.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "play_beep_member",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetGroupPhoneSettingsOKAdHocCallRecordingPlayRecordingBeepTonePlayBeepMember) Validate() error {
	switch s {
	case "allMember":
		return nil
	case "recordingSide":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetGroupPhoneSettingsOKAdHocCallRecordingPlayRecordingBeepTonePlayBeepTimeInterval) Validate() error {
	switch s {
	case 5:
		return nil
	case 10:
		return nil
	case 15:
		return nil
	case 20:
		return nil
	case 25:
		return nil
	case 30:
		return nil
	case 60:
		return nil
	case 120:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetGroupPhoneSettingsOKAdHocCallRecordingPlayRecordingBeepTonePlayBeepVolume) Validate() error {
	switch s {
	case 0:
		return nil
	case 20:
		return nil
	case 40:
		return nil
	case 60:
		return nil
	case 80:
		return nil
	case 100:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetGroupPhoneSettingsOKAdvancedEncryption) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetGroupPhoneSettingsOKAdvancedEncryptionLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "user_group":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetGroupPhoneSettingsOKAllowedCallLocations) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetGroupPhoneSettingsOKAllowedCallLocationsLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "user_group":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetGroupPhoneSettingsOKAudioIntercom) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetGroupPhoneSettingsOKAudioIntercomLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "user_group":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetGroupPhoneSettingsOKAutoCallRecording) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RecordingCalls.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "recording_calls",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayRecordingBeepTone.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "play_recording_beep_tone",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetGroupPhoneSettingsOKAutoCallRecordingLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "user_group":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetGroupPhoneSettingsOKAutoCallRecordingPlayRecordingBeepTone) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.PlayBeepVolume.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "play_beep_volume",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayBeepTimeInterval.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "play_beep_time_interval",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayBeepMember.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "play_beep_member",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetGroupPhoneSettingsOKAutoCallRecordingPlayRecordingBeepTonePlayBeepMember) Validate() error {
	switch s {
	case "allMember":
		return nil
	case "recordingSide":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetGroupPhoneSettingsOKAutoCallRecordingPlayRecordingBeepTonePlayBeepTimeInterval) Validate() error {
	switch s {
	case 5:
		return nil
	case 10:
		return nil
	case 15:
		return nil
	case 20:
		return nil
	case 25:
		return nil
	case 30:
		return nil
	case 60:
		return nil
	case 120:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetGroupPhoneSettingsOKAutoCallRecordingPlayRecordingBeepTonePlayBeepVolume) Validate() error {
	switch s {
	case 0:
		return nil
	case 20:
		return nil
	case 40:
		return nil
	case 60:
		return nil
	case 80:
		return nil
	case 100:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetGroupPhoneSettingsOKAutoCallRecordingRecordingCalls) Validate() error {
	switch s {
	case "inbound":
		return nil
	case "outbound":
		return nil
	case "both":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetGroupPhoneSettingsOKBlockCallsWithoutCallerID) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetGroupPhoneSettingsOKBlockCallsWithoutCallerIDLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "user_group":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetGroupPhoneSettingsOKBlockExternalCalls) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BlockCallAction.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "block_call_action",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetGroupPhoneSettingsOKBlockExternalCallsBlockCallAction) Validate() error {
	switch s {
	case 0:
		return nil
	case 9:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetGroupPhoneSettingsOKBlockExternalCallsLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "user_group":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetGroupPhoneSettingsOKBlockListForInboundCallsAndMessaging) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetGroupPhoneSettingsOKBlockListForInboundCallsAndMessagingLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "user_group":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetGroupPhoneSettingsOKCallHandlingForwarding) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallForwardingType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_forwarding_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetGroupPhoneSettingsOKCallHandlingForwardingCallForwardingType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetGroupPhoneSettingsOKCallHandlingForwardingLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "user_group":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetGroupPhoneSettingsOKCallLiveTranscription) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetGroupPhoneSettingsOKCallLiveTranscriptionLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "user_group":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetGroupPhoneSettingsOKCallOverflow) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallOverflowType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_overflow_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetGroupPhoneSettingsOKCallOverflowCallOverflowType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetGroupPhoneSettingsOKCallOverflowLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "user_group":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetGroupPhoneSettingsOKCallPark) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ExpirationPeriod.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "expiration_period",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ForwardTo.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "forward_to",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Sequence.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sequence",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetGroupPhoneSettingsOKCallParkExpirationPeriod) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	case 5:
		return nil
	case 6:
		return nil
	case 7:
		return nil
	case 8:
		return nil
	case 9:
		return nil
	case 10:
		return nil
	case 15:
		return nil
	case 20:
		return nil
	case 25:
		return nil
	case 30:
		return nil
	case 35:
		return nil
	case 40:
		return nil
	case 45:
		return nil
	case 50:
		return nil
	case 55:
		return nil
	case 60:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetGroupPhoneSettingsOKCallParkForwardTo) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ExtensionType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "extension_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetGroupPhoneSettingsOKCallParkForwardToExtensionType) Validate() error {
	switch s {
	case "user":
		return nil
	case "zoomRoom":
		return nil
	case "commonArea":
		return nil
	case "ciscoRoom/polycomRoom":
		return nil
	case "autoReceptionist":
		return nil
	case "callQueue":
		return nil
	case "sharedLineGroup":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetGroupPhoneSettingsOKCallParkLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "user_group":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetGroupPhoneSettingsOKCallParkSequence) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetGroupPhoneSettingsOKCallTransferring) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallTransferringType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_transferring_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetGroupPhoneSettingsOKCallTransferringCallTransferringType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetGroupPhoneSettingsOKCallTransferringLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "user_group":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetGroupPhoneSettingsOKCheckVoicemailsOverPhone) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetGroupPhoneSettingsOKCheckVoicemailsOverPhoneLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "user_group":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetGroupPhoneSettingsOKDelegation) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetGroupPhoneSettingsOKDelegationLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "user_group":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetGroupPhoneSettingsOKDisplayCallFeedbackSurvey) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.FeedbackType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "feedback_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetGroupPhoneSettingsOKDisplayCallFeedbackSurveyFeedbackType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetGroupPhoneSettingsOKDisplayCallFeedbackSurveyLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "user_group":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetGroupPhoneSettingsOKE2eEncryption) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetGroupPhoneSettingsOKE2eEncryptionLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "user_group":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetGroupPhoneSettingsOKElevateToMeeting) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetGroupPhoneSettingsOKElevateToMeetingLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "user_group":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetGroupPhoneSettingsOKHandOffToRoom) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetGroupPhoneSettingsOKHandOffToRoomLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "user_group":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetGroupPhoneSettingsOKInternationalCalling) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetGroupPhoneSettingsOKInternationalCallingLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "user_group":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetGroupPhoneSettingsOKLocalSurvivabilityMode) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetGroupPhoneSettingsOKLocalSurvivabilityModeLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "user_group":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetGroupPhoneSettingsOKMobileSwitchToCarrier) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetGroupPhoneSettingsOKMobileSwitchToCarrierLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "user_group":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetGroupPhoneSettingsOKOutboundCalling) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetGroupPhoneSettingsOKOutboundCallingLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "user_group":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetGroupPhoneSettingsOKOutboundSMS) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetGroupPhoneSettingsOKOutboundSMSLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "user_group":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetGroupPhoneSettingsOKPeerToPeerMedia) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetGroupPhoneSettingsOKPeerToPeerMediaLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "user_group":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetGroupPhoneSettingsOKPersonalAudioLibrary) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetGroupPhoneSettingsOKPersonalAudioLibraryLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "user_group":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetGroupPhoneSettingsOKRestrictedCallHours) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetGroupPhoneSettingsOKRestrictedCallHoursLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "user_group":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetGroupPhoneSettingsOKSMS) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetGroupPhoneSettingsOKSMSEtiquetteTool) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.SMSEtiquettePolicy {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sms_etiquette_policy",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetGroupPhoneSettingsOKSMSEtiquetteToolSMSEtiquettePolicyItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Rule.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "rule",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Action.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "action",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetGroupPhoneSettingsOKSMSEtiquetteToolSMSEtiquettePolicyItemAction) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetGroupPhoneSettingsOKSMSEtiquetteToolSMSEtiquettePolicyItemRule) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetGroupPhoneSettingsOKSMSLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "user_group":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetGroupPhoneSettingsOKSelectOutboundCallerID) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetGroupPhoneSettingsOKSelectOutboundCallerIDLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "user_group":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetGroupPhoneSettingsOKSharedVoicemailNotificationByEmail) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetGroupPhoneSettingsOKSharedVoicemailNotificationByEmailLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "user_group":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetGroupPhoneSettingsOKVoicemail) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetGroupPhoneSettingsOKVoicemailLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "user_group":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetGroupPhoneSettingsOKVoicemailNotificationByEmail) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetGroupPhoneSettingsOKVoicemailNotificationByEmailLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "user_group":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetGroupPhoneSettingsOKVoicemailTranscription) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetGroupPhoneSettingsOKVoicemailTranscriptionLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "user_group":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetGroupPhoneSettingsOKZoomPhoneOnMobile) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetGroupPhoneSettingsOKZoomPhoneOnMobileLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "user_group":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetGroupPhoneSettingsOKZoomPhoneOnPwa) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetGroupPhoneSettingsOKZoomPhoneOnPwaLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "user_group":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetMonitoringGroupByIdOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.MonitoringPrivileges {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "monitoring_privileges",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetMonitoringGroupByIdOKMonitoringPrivilegesItem) Validate() error {
	switch s {
	case "listen":
		return nil
	case "whisper":
		return nil
	case "barge":
		return nil
	case "take_over":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetMonitoringGroupByIdOKType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetPSOperationLogsOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.PageSize.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        false,
					Min:           0,
					MaxSet:        true,
					Max:           300,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "page_size",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetPhoneNumberDetailsOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Assignee.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "assignee",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.EmergencyAddress.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "emergency_address",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.EmergencyAddressStatus.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "emergency_address_status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.NumberType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "number_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Source.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "source",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetPhoneNumberDetailsOKAssignee) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetPhoneNumberDetailsOKAssigneeType) Validate() error {
	switch s {
	case "user":
		return nil
	case "callQueue":
		return nil
	case "autoReceptionist":
		return nil
	case "commonArea":
		return nil
	case "emergencyNumberPool":
		return nil
	case "companyLocation":
		return nil
	case "meetingService":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetPhoneNumberDetailsOKEmergencyAddress) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Country.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    2,
					MinLengthSet: true,
					MaxLength:    2,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "country",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetPhoneNumberDetailsOKEmergencyAddressStatus) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetPhoneNumberDetailsOKNumberType) Validate() error {
	switch s {
	case "toll":
		return nil
	case "tollfree":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetPhoneNumberDetailsOKSource) Validate() error {
	switch s {
	case "internal":
		return nil
	case "external":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetPhoneNumberDetailsOKStatus) Validate() error {
	switch s {
	case "pending":
		return nil
	case "available":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetPhoneRecordingsByCallIdOrCallLogIdOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CalleeNumberType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "callee_number_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallerNumberType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "caller_number_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Owner.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "owner",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SoftDeletedType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "soft_deleted_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RecordingType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "recording_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DisclaimerStatus.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "disclaimer_status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetPhoneRecordingsByCallIdOrCallLogIdOKCalleeNumberType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetPhoneRecordingsByCallIdOrCallLogIdOKCallerNumberType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetPhoneRecordingsByCallIdOrCallLogIdOKDisclaimerStatus) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetPhoneRecordingsByCallIdOrCallLogIdOKOwner) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ExtensionStatus.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "extension_status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetPhoneRecordingsByCallIdOrCallLogIdOKOwnerExtensionStatus) Validate() error {
	switch s {
	case "inactive":
		return nil
	case "deleted":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetPhoneRecordingsByCallIdOrCallLogIdOKRecordingType) Validate() error {
	switch s {
	case "OnDemand":
		return nil
	case "Automatic":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetPhoneRecordingsByCallIdOrCallLogIdOKSoftDeletedType) Validate() error {
	switch s {
	case "Manual":
		return nil
	case "Data Retention":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetPhoneRecordingsOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Recordings {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "recordings",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetPhoneRecordingsOKRecordingsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CalleeNumberType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "callee_number_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallerNumberType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "caller_number_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DisclaimerStatus.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "disclaimer_status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Direction.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "direction",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Owner.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "owner",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetPhoneRecordingsOKRecordingsItemCalleeNumberType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetPhoneRecordingsOKRecordingsItemCallerNumberType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetPhoneRecordingsOKRecordingsItemDirection) Validate() error {
	switch s {
	case "inbound":
		return nil
	case "outbound":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetPhoneRecordingsOKRecordingsItemDisclaimerStatus) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetPhoneRecordingsOKRecordingsItemOwner) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ExtensionStatus.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "extension_status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetPhoneRecordingsOKRecordingsItemOwnerExtensionStatus) Validate() error {
	switch s {
	case "inactive":
		return nil
	case "deleted":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetPhoneRecordingsOKRecordingsItemOwnerType) Validate() error {
	switch s {
	case "user":
		return nil
	case "call queue":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetPhoneUserVoiceMailsOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.VoiceMails {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "voice_mails",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetPhoneUserVoiceMailsOKVoiceMailsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CalleeNumberType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "callee_number_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallerNumberType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "caller_number_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetPhoneUserVoiceMailsOKVoiceMailsItemCalleeNumberType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetPhoneUserVoiceMailsOKVoiceMailsItemCallerNumberType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetPhoneUserVoiceMailsOKVoiceMailsItemStatus) Validate() error {
	switch s {
	case "read":
		return nil
	case "unread":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetPhoneUserVoiceMailsSyncType) Validate() error {
	switch s {
	case "FSync":
		return nil
	case "BSync":
		return nil
	case "ISync":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetPortedNumbersDetailsOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetPortedNumbersDetailsOKStatus) Validate() error {
	switch s {
	case "Not_Submitted":
		return nil
	case "Waiting":
		return nil
	case "Processing":
		return nil
	case "Successfully":
		return nil
	case "Rejected":
		return nil
	case "Canceled":
		return nil
	case "FOC":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetRoutingRuleOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.RoutingPath.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "routing_path",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetRoutingRuleOKRoutingPath) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetRoutingRuleOKRoutingPathType) Validate() error {
	switch s {
	case "other_sites":
		return nil
	case "pstn":
		return nil
	case "sip_group":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetSMSCampaignOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ServiceType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "service_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.UseCase.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "use_case",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.ContentType {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetSMSCampaignOKContentTypeItem) Validate() error {
	switch s {
	case "urlLink":
		return nil
	case "phoneNumber":
		return nil
	case "ageGated":
		return nil
	case "lending":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetSMSCampaignOKServiceType) Validate() error {
	switch s {
	case "zoomPhone":
		return nil
	case "contactCenter":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetSMSCampaignOKStatus) Validate() error {
	switch s {
	case "draft":
		return nil
	case "active":
		return nil
	case "expired":
		return nil
	case "pending":
		return nil
	case "declined":
		return nil
	case "--":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetSMSCampaignOKUseCase) Validate() error {
	switch s {
	case "lowVolumeMixed":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetSMSChargesUsageReportOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.PageSize.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        false,
					Min:           0,
					MaxSet:        true,
					Max:           300,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "page_size",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetSettingTemplateOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Policy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "policy",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.UserSettings.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "user_settings",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetSettingTemplateOKPolicy) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CallForwarding.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_forwarding",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallOverflow.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_overflow",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetSettingTemplateOKPolicyCallForwarding) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CallForwardingType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_forwarding_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetSettingTemplateOKPolicyCallForwardingCallForwardingType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetSettingTemplateOKPolicyCallOverflow) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CallOverflowType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_overflow_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetSettingTemplateOKPolicyCallOverflowCallOverflowType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetSettingTemplateOKType) Validate() error {
	switch s {
	case "user":
		return nil
	case "group":
		return nil
	case "autoReceptionist":
		return nil
	case "commonArea":
		return nil
	case "zr":
		return nil
	case "interop":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetSettingTemplateOKUserSettings) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CallHandling.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_handling",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.HoldMusic.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "hold_music",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetSettingTemplateOKUserSettingsCallHandling) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.BusinessHours.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "business_hours",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CloseHours.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "close_hours",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetSettingTemplateOKUserSettingsCallHandlingBusinessHours) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.BusinessHourAction.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "business_hour_action",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ConnectToOperator.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "connect_to_operator",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BusyAction.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "busy_action",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BusyConnectOperator.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "busy_connect_operator",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.CustomHours {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "custom_hours",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RingingDuration.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "ringing_duration",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursBusinessHourAction) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	case 9:
		return nil
	case 11:
		return nil
	case 26:
		return nil
	case 50:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursBusyAction) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	case 11:
		return nil
	case 12:
		return nil
	case 13:
		return nil
	case 26:
		return nil
	case 50:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursBusyConnectOperator) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursBusyConnectOperatorType) Validate() error {
	switch s {
	case "user":
		return nil
	case "zoomRoom":
		return nil
	case "commonAreaPhone":
		return nil
	case "autoReceptionist":
		return nil
	case "callQueue":
		return nil
	case "sharedLineGroup":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursConnectToOperator) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursConnectToOperatorType) Validate() error {
	switch s {
	case "user":
		return nil
	case "zoomRoom":
		return nil
	case "commonArea":
		return nil
	case "autoReceptionist":
		return nil
	case "callQueue":
		return nil
	case "sharedLineGroup":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursCustomHoursItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Weekday.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "weekday",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursCustomHoursItemType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursCustomHoursItemWeekday) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	case 5:
		return nil
	case 6:
		return nil
	case 7:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursRingingDuration) Validate() error {
	switch s {
	case "10":
		return nil
	case "15":
		return nil
	case "20":
		return nil
	case "25":
		return nil
	case "30":
		return nil
	case "35":
		return nil
	case "40":
		return nil
	case "45":
		return nil
	case "50":
		return nil
	case "55":
		return nil
	case "60":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetSettingTemplateOKUserSettingsCallHandlingCloseHours) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CloseHourAction.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "close_hour_action",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ConnectToOperator.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "connect_to_operator",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BusyAction.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "busy_action",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BusyConnectOperator.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "busy_connect_operator",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MaxWaitTime.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "max_wait_time",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetSettingTemplateOKUserSettingsCallHandlingCloseHoursBusyAction) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	case 11:
		return nil
	case 12:
		return nil
	case 13:
		return nil
	case 26:
		return nil
	case 50:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetSettingTemplateOKUserSettingsCallHandlingCloseHoursBusyConnectOperator) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetSettingTemplateOKUserSettingsCallHandlingCloseHoursBusyConnectOperatorType) Validate() error {
	switch s {
	case "user":
		return nil
	case "zoomRoom":
		return nil
	case "commonArea":
		return nil
	case "autoReceptionist":
		return nil
	case "callQueue":
		return nil
	case "sharedLineGroup":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetSettingTemplateOKUserSettingsCallHandlingCloseHoursCloseHourAction) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	case 9:
		return nil
	case 11:
		return nil
	case 26:
		return nil
	case 50:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetSettingTemplateOKUserSettingsCallHandlingCloseHoursConnectToOperator) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetSettingTemplateOKUserSettingsCallHandlingCloseHoursConnectToOperatorType) Validate() error {
	switch s {
	case "user":
		return nil
	case "zoomRoom":
		return nil
	case "commonAreaPhone":
		return nil
	case "autoReceptionist":
		return nil
	case "callQueue":
		return nil
	case "sharedLineGroup":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetSettingTemplateOKUserSettingsCallHandlingCloseHoursMaxWaitTime) Validate() error {
	switch s {
	case "10":
		return nil
	case "15":
		return nil
	case "20":
		return nil
	case "25":
		return nil
	case "30":
		return nil
	case "35":
		return nil
	case "40":
		return nil
	case "45":
		return nil
	case "50":
		return nil
	case "55":
		return nil
	case "60":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetSettingTemplateOKUserSettingsHoldMusic) Validate() error {
	switch s {
	case "default":
		return nil
	case "disable":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetSharedLineGroupPolicyOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CheckVoicemailsOverPhone.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "check_voicemails_over_phone",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetSharedLineGroupPolicyOKCheckVoicemailsOverPhone) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetSharedLineGroupPolicyOKCheckVoicemailsOverPhoneLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "site":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetSiteOutboundCallingCountriesAndRegionsOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.CountriesRegions {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "countries_regions",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PageSize.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        false,
					Min:           0,
					MaxSet:        true,
					Max:           300,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "page_size",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetSiteOutboundCallingCountriesAndRegionsOKCountriesRegionsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Rule.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "rule",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetSiteOutboundCallingCountriesAndRegionsOKCountriesRegionsItemRule) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetSiteSettingForTypeOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.BusinessHours.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "business_hours",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClosedHours.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "closed_hours",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.HolidayHours.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "holiday_hours",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DialByName.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "dial_by_name",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetSiteSettingForTypeOKBusinessHours) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CustomHourType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "custom_hour_type",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.CustomHours {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "custom_hours",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Overflow.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "overflow",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetSiteSettingForTypeOKBusinessHoursCustomHourType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetSiteSettingForTypeOKBusinessHoursCustomHoursItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Weekday.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "weekday",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetSiteSettingForTypeOKBusinessHoursCustomHoursItemType) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetSiteSettingForTypeOKBusinessHoursCustomHoursItemWeekday) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	case 5:
		return nil
	case 6:
		return nil
	case 7:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetSiteSettingForTypeOKBusinessHoursOverflow) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Operator.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "operator",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetSiteSettingForTypeOKBusinessHoursOverflowOperator) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ExtensionType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "extension_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetSiteSettingForTypeOKBusinessHoursOverflowOperatorExtensionType) Validate() error {
	switch s {
	case "user":
		return nil
	case "callQueue":
		return nil
	case "autoReceptionist":
		return nil
	case "commonArea":
		return nil
	case "zoomRoom":
		return nil
	case "ciscoRoom/PolycomRoom":
		return nil
	case "sharedLineGroup":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetSiteSettingForTypeOKClosedHours) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Overflow.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "overflow",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetSiteSettingForTypeOKClosedHoursOverflow) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Operator.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "operator",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetSiteSettingForTypeOKClosedHoursOverflowOperator) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ExtensionType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "extension_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetSiteSettingForTypeOKClosedHoursOverflowOperatorExtensionType) Validate() error {
	switch s {
	case "user":
		return nil
	case "callQueue":
		return nil
	case "autoReceptionist":
		return nil
	case "commonArea":
		return nil
	case "zoomRoom":
		return nil
	case "ciscoRoom/PolycomRoom":
		return nil
	case "sharedLineGroup":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetSiteSettingForTypeOKDialByName) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Rule.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "rule",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetSiteSettingForTypeOKDialByNameRule) Validate() error {
	switch s {
	case "first_name":
		return nil
	case "last_name":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetSiteSettingForTypeOKHolidayHours) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Overflow.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "overflow",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetSiteSettingForTypeOKHolidayHoursOverflow) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Operator.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "operator",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetSiteSettingForTypeOKHolidayHoursOverflowOperator) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ExtensionType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "extension_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetSiteSettingForTypeOKHolidayHoursOverflowOperatorExtensionType) Validate() error {
	switch s {
	case "user":
		return nil
	case "callQueue":
		return nil
	case "autoReceptionist":
		return nil
	case "commonArea":
		return nil
	case "zoomRoom":
		return nil
	case "ciscoRoom/PolycomRoom":
		return nil
	case "sharedLineGroup":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetSiteSettingForTypeSettingType) Validate() error {
	switch s {
	case "local_based_routing":
		return nil
	case "business_hours":
		return nil
	case "closed_hours":
		return nil
	case "holiday_hours":
		return nil
	case "security":
		return nil
	case "outbound_caller_id":
		return nil
	case "audio_prompt":
		return nil
	case "desk_phone":
		return nil
	case "dial_by_name":
		return nil
	case "billing_account":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetSmsSessionsOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.SMSSessions {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sms_sessions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetSmsSessionsOKSMSSessionsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LatestMessage.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "latest_message",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Participants {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "participants",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetSmsSessionsOKSMSSessionsItemLatestMessage) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Attachments {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "attachments",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MessageType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "message_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Sender.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sender",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.ToMembers {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "to_members",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetSmsSessionsOKSMSSessionsItemLatestMessageAttachmentsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetSmsSessionsOKSMSSessionsItemLatestMessageAttachmentsItemType) Validate() error {
	switch s {
	case "OTHER":
		return nil
	case "PNG":
		return nil
	case "GIF":
		return nil
	case "JPG/JPEG":
		return nil
	case "AUDIO":
		return nil
	case "VIDEO":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetSmsSessionsOKSMSSessionsItemLatestMessageMessageType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	case 5:
		return nil
	case 6:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetSmsSessionsOKSMSSessionsItemLatestMessageSender) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Owner.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "owner",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetSmsSessionsOKSMSSessionsItemLatestMessageSenderOwner) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetSmsSessionsOKSMSSessionsItemLatestMessageSenderOwnerType) Validate() error {
	switch s {
	case "user":
		return nil
	case "callQueue":
		return nil
	case "autoReceptionist":
		return nil
	case "sharedLineGroup":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetSmsSessionsOKSMSSessionsItemLatestMessageToMembersItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Owner.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "owner",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetSmsSessionsOKSMSSessionsItemLatestMessageToMembersItemOwner) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetSmsSessionsOKSMSSessionsItemLatestMessageToMembersItemOwnerType) Validate() error {
	switch s {
	case "user":
		return nil
	case "callQueue":
		return nil
	case "autoReceptionist":
		return nil
	case "sharedLineGroup":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetSmsSessionsOKSMSSessionsItemParticipantsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Owner.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "owner",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetSmsSessionsOKSMSSessionsItemParticipantsItemOwner) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetSmsSessionsOKSMSSessionsItemParticipantsItemOwnerType) Validate() error {
	switch s {
	case "user":
		return nil
	case "callQueue":
		return nil
	case "autoReceptionist":
		return nil
	case "sharedLineGroup":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetSmsSessionsSyncType) Validate() error {
	switch s {
	case "FSync":
		return nil
	case "BSync":
		return nil
	case "ISync":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetUserOutboundCallingCountriesAndRegionsOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.CountriesRegions {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "countries_regions",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PageSize.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        false,
					Min:           0,
					MaxSet:        true,
					Max:           300,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "page_size",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetUserOutboundCallingCountriesAndRegionsOKCountriesRegionsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Rule.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "rule",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetUserOutboundCallingCountriesAndRegionsOKCountriesRegionsItemRule) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetVoicemailDetailsByCallIdOrCallLogIdOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CalleeNumberType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "callee_number_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallerNumberType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "caller_number_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Transcription.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "transcription",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetVoicemailDetailsByCallIdOrCallLogIdOKCalleeNumberType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetVoicemailDetailsByCallIdOrCallLogIdOKCallerNumberType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetVoicemailDetailsByCallIdOrCallLogIdOKStatus) Validate() error {
	switch s {
	case "read":
		return nil
	case "unread":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetVoicemailDetailsByCallIdOrCallLogIdOKTranscription) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetVoicemailDetailsByCallIdOrCallLogIdOKTranscriptionStatus) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	case 2:
		return nil
	case 4:
		return nil
	case 5:
		return nil
	case 9:
		return nil
	case 11:
		return nil
	case 12:
		return nil
	case 13:
		return nil
	case 14:
		return nil
	case 409:
		return nil
	case 415:
		return nil
	case 422:
		return nil
	case 500:
		return nil
	case 601:
		return nil
	case 602:
		return nil
	case 603:
		return nil
	case 999:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetVoicemailDetailsOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CalleeNumberType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "callee_number_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallerNumberType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "caller_number_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Transcription.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "transcription",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetVoicemailDetailsOKCalleeNumberType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetVoicemailDetailsOKCallerNumberType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetVoicemailDetailsOKStatus) Validate() error {
	switch s {
	case "read":
		return nil
	case "unread":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetVoicemailDetailsOKTranscription) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetVoicemailDetailsOKTranscriptionStatus) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	case 2:
		return nil
	case 4:
		return nil
	case 5:
		return nil
	case 9:
		return nil
	case 11:
		return nil
	case 12:
		return nil
	case 13:
		return nil
	case 14:
		return nil
	case 409:
		return nil
	case 415:
		return nil
	case 422:
		return nil
	case 500:
		return nil
	case 601:
		return nil
	case 602:
		return nil
	case 603:
		return nil
	case 999:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetZoomRoomOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Policy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "policy",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetZoomRoomOKPolicy) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.InternationalCalling.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "international_calling",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SelectOutboundCallerID.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "select_outbound_caller_id",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetZoomRoomOKPolicyInternationalCalling) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetZoomRoomOKPolicyInternationalCallingLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "user_group":
		return nil
	case "site":
		return nil
	case "extension":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetZoomRoomOKPolicySelectOutboundCallerID) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetZoomRoomOKPolicySelectOutboundCallerIDLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "user_group":
		return nil
	case "site":
		return nil
	case "extension":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListAccountLevelInboundBlockRulesMatchType) Validate() error {
	switch s {
	case "prefix":
		return nil
	case "phoneNumber":
		return nil
	case "SMS-shortCodes":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListAccountLevelInboundBlockRulesOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.AccountBlockedRules {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_blocked_rules",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PageSize.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        false,
					Min:           0,
					MaxSet:        true,
					Max:           100,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "page_size",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ListAccountLevelInboundBlockRulesOKAccountBlockedRulesItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.MatchType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "match_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListAccountLevelInboundBlockRulesOKAccountBlockedRulesItemMatchType) Validate() error {
	switch s {
	case "prefix":
		return nil
	case "phoneNumber":
		return nil
	case "SMS-shortCodes":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListAccountLevelInboundBlockRulesOKAccountBlockedRulesItemStatus) Validate() error {
	switch s {
	case "active":
		return nil
	case "inactive":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListAccountLevelInboundBlockRulesOKAccountBlockedRulesItemType) Validate() error {
	switch s {
	case "block_for_other_reasons":
		return nil
	case "block_as_threat":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListAccountLevelInboundBlockRulesStatus) Validate() error {
	switch s {
	case "active":
		return nil
	case "inactive":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListAccountLevelInboundBlockRulesType) Validate() error {
	switch s {
	case "block_for_other_reasons":
		return nil
	case "block_as_threat":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListAccountLevelInboundBlockedStatisticsMatchType) Validate() error {
	switch s {
	case "prefix":
		return nil
	case "phoneNumber":
		return nil
	case "SMS-shortCodes":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListAccountLevelInboundBlockedStatisticsOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.BlockedStatistic {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "blocked_statistic",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ListAccountLevelInboundBlockedStatisticsOKBlockedStatisticItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.MatchType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "match_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListAccountLevelInboundBlockedStatisticsOKBlockedStatisticItemMatchType) Validate() error {
	switch s {
	case "prefix":
		return nil
	case "phoneNumber":
		return nil
	case "SMS-shortCodes":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListAccountLevelInboundBlockedStatisticsOKBlockedStatisticItemType) Validate() error {
	switch s {
	case "block_for_other_reasons":
		return nil
	case "block_as_threat":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListAccountOutboundCallingExceptionRuleMatchType) Validate() error {
	switch s {
	case "phoneNumber":
		return nil
	case "prefix":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListAccountOutboundCallingExceptionRuleOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.ExceptionRules {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "exception_rules",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PageSize.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        false,
					Min:           0,
					MaxSet:        true,
					Max:           300,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "page_size",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ListAccountOutboundCallingExceptionRuleOKExceptionRulesItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.MatchType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "match_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PrefixNumber.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "prefix_number",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Rule.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "rule",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Comment.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    255,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "comment",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListAccountOutboundCallingExceptionRuleOKExceptionRulesItemMatchType) Validate() error {
	switch s {
	case "phoneNumber":
		return nil
	case "prefix":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListAccountOutboundCallingExceptionRuleOKExceptionRulesItemRule) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListAccountOutboundCallingExceptionRuleOKExceptionRulesItemStatus) Validate() error {
	switch s {
	case "active":
		return nil
	case "inactive":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListAccountOutboundCallingExceptionRuleStatus) Validate() error {
	switch s {
	case "active":
		return nil
	case "inactive":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListAccountPhoneNumbersExtensionType) Validate() error {
	switch s {
	case "user":
		return nil
	case "callQueue":
		return nil
	case "autoReceptionist":
		return nil
	case "commonArea":
		return nil
	case "emergencyNumberPool":
		return nil
	case "companyLocation":
		return nil
	case "meetingService":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListAccountPhoneNumbersNumberType) Validate() error {
	switch s {
	case "toll":
		return nil
	case "tollfree":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListAccountPhoneNumbersOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.PhoneNumbers {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "phone_numbers",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ListAccountPhoneNumbersOKPhoneNumbersItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Assignee.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "assignee",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.EmergencyAddress.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "emergency_address",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.EmergencyAddressStatus.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "emergency_address_status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.NumberType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "number_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Source.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "source",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ListAccountPhoneNumbersOKPhoneNumbersItemAssignee) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListAccountPhoneNumbersOKPhoneNumbersItemAssigneeType) Validate() error {
	switch s {
	case "user":
		return nil
	case "callQueue":
		return nil
	case "autoReceptionist":
		return nil
	case "commonArea":
		return nil
	case "emergencyNumberPool":
		return nil
	case "companyLocation":
		return nil
	case "meetingService":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListAccountPhoneNumbersOKPhoneNumbersItemEmergencyAddress) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Country.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    2,
					MinLengthSet: true,
					MaxLength:    2,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "country",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListAccountPhoneNumbersOKPhoneNumbersItemEmergencyAddressStatus) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListAccountPhoneNumbersOKPhoneNumbersItemNumberType) Validate() error {
	switch s {
	case "toll":
		return nil
	case "tollfree":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListAccountPhoneNumbersOKPhoneNumbersItemSource) Validate() error {
	switch s {
	case "internal":
		return nil
	case "external":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListAccountPhoneNumbersOKPhoneNumbersItemStatus) Validate() error {
	switch s {
	case "pending":
		return nil
	case "available":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListAccountPhoneNumbersType) Validate() error {
	switch s {
	case "assigned":
		return nil
	case "unassigned":
		return nil
	case "byoc":
		return nil
	case "all":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListAccountSMSCampaignsOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.SMSCampaigns {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sms_campaigns",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ListAccountSMSCampaignsOKSMSCampaignsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListAccountSMSCampaignsOKSMSCampaignsItemStatus) Validate() error {
	switch s {
	case "draft":
		return nil
	case "active":
		return nil
	case "expired":
		return nil
	case "pending":
		return nil
	case "declined":
		return nil
	case "--":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListActivationCodesOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.CommonAreasActivationCodes {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "common_areas_activation_codes",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ListActivationCodesOKCommonAreasActivationCodesItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListActivationCodesOKCommonAreasActivationCodesItemStatus) Validate() error {
	switch s {
	case "used":
		return nil
	case "not_used":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListAlertSettingsWithPagingQueryModule) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	case 5:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListAlertSettingsWithPagingQueryOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.AlertSettings {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "alert_settings",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ListAlertSettingsWithPagingQueryOKAlertSettingsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.RuleConditions {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "rule_conditions",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.TimeFrameType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "time_frame_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Frequency.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "frequency",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListAlertSettingsWithPagingQueryOKAlertSettingsItemFrequency) Validate() error {
	switch s {
	case 5:
		return nil
	case 10:
		return nil
	case 15:
		return nil
	case 30:
		return nil
	case 60:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListAlertSettingsWithPagingQueryOKAlertSettingsItemRuleConditionsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.RuleConditionType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "rule_condition_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListAlertSettingsWithPagingQueryOKAlertSettingsItemRuleConditionsItemRuleConditionType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	case 5:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListAlertSettingsWithPagingQueryOKAlertSettingsItemStatus) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListAlertSettingsWithPagingQueryOKAlertSettingsItemTimeFrameType) Validate() error {
	switch s {
	case "all_day":
		return nil
	case "specific_time":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListAlertSettingsWithPagingQueryRule) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	case 5:
		return nil
	case 6:
		return nil
	case 7:
		return nil
	case 8:
		return nil
	case 9:
		return nil
	case 10:
		return nil
	case 11:
		return nil
	case 12:
		return nil
	case 13:
		return nil
	case 14:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListAlertSettingsWithPagingQueryStatus) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListBlockedListOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.BlockedList {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "blocked_list",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PageSize.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        false,
					Min:           0,
					MaxSet:        true,
					Max:           300,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "page_size",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ListBlockedListOKBlockedListItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.BlockType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "block_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Comment.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    255,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "comment",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MatchType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "match_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PhoneNumber.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "phone_number",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListBlockedListOKBlockedListItemBlockType) Validate() error {
	switch s {
	case "inbound":
		return nil
	case "outbound":
		return nil
	case "threat":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListBlockedListOKBlockedListItemMatchType) Validate() error {
	switch s {
	case "phoneNumber":
		return nil
	case "prefix":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListBlockedListOKBlockedListItemStatus) Validate() error {
	switch s {
	case "active":
		return nil
	case "inactive":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListCRPhoneNumbersAssignedStatus) Validate() error {
	switch s {
	case "assigned":
		return nil
	case "unassigned":
		return nil
	case "returned":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListCRPhoneNumbersOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.CarrierResellerNumbers {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "carrier_reseller_numbers",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ListCRPhoneNumbersOKCarrierResellerNumbersItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.AssignedStatus.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "assigned_status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListCRPhoneNumbersOKCarrierResellerNumbersItemAssignedStatus) Validate() error {
	switch s {
	case "assigned":
		return nil
	case "unassigned":
		return nil
	case "returned":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListCRPhoneNumbersOKCarrierResellerNumbersItemStatus) Validate() error {
	switch s {
	case "inactive":
		return nil
	case "active":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListCallQueueMembersOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.CallQueueMembers {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_queue_members",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PageSize.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        false,
					Min:           0,
					MaxSet:        true,
					Max:           300,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "page_size",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ListCallQueueMembersOKCallQueueMembersItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Level.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "level",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListCallQueueMembersOKCallQueueMembersItemLevel) Validate() error {
	switch s {
	case "commonArea":
		return nil
	case "user":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListCallQueuesOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.CallQueues {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_queues",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PageSize.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        false,
					Min:           0,
					MaxSet:        true,
					Max:           300,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "page_size",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ListCallQueuesOKCallQueuesItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.PhoneNumbers {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "phone_numbers",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ListCallQueuesOKCallQueuesItemPhoneNumbersItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Source.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "source",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListCallQueuesOKCallQueuesItemPhoneNumbersItemSource) Validate() error {
	switch s {
	case "internal":
		return nil
	case "external":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListCallQueuesOKCallQueuesItemStatus) Validate() error {
	switch s {
	case "active":
		return nil
	case "inactive":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListCommonAreaOutboundCallingExceptionRuleMatchType) Validate() error {
	switch s {
	case "phoneNumber":
		return nil
	case "prefix":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListCommonAreaOutboundCallingExceptionRuleOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.ExceptionRules {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "exception_rules",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PageSize.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        false,
					Min:           0,
					MaxSet:        true,
					Max:           300,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "page_size",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ListCommonAreaOutboundCallingExceptionRuleOKExceptionRulesItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.MatchType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "match_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PrefixNumber.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "prefix_number",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Rule.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "rule",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Comment.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    255,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "comment",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListCommonAreaOutboundCallingExceptionRuleOKExceptionRulesItemMatchType) Validate() error {
	switch s {
	case "phoneNumber":
		return nil
	case "prefix":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListCommonAreaOutboundCallingExceptionRuleOKExceptionRulesItemRule) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListCommonAreaOutboundCallingExceptionRuleOKExceptionRulesItemStatus) Validate() error {
	switch s {
	case "active":
		return nil
	case "inactive":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListCommonAreaOutboundCallingExceptionRuleStatus) Validate() error {
	switch s {
	case "active":
		return nil
	case "inactive":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListCommonAreasOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.CommonAreas {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "common_areas",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ListCommonAreasOKCommonAreasItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.PhoneNumbers {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "phone_numbers",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.DeskPhones {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "desk_phones",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ListCommonAreasOKCommonAreasItemDeskPhonesItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListCommonAreasOKCommonAreasItemDeskPhonesItemStatus) Validate() error {
	switch s {
	case "online":
		return nil
	case "offline":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListCommonAreasOKCommonAreasItemPhoneNumbersItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Source.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "source",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListCommonAreasOKCommonAreasItemPhoneNumbersItemSource) Validate() error {
	switch s {
	case "internal":
		return nil
	case "external":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListCommonAreasOKCommonAreasItemStatus) Validate() error {
	switch s {
	case "online":
		return nil
	case "offline":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListCustomizeOutboundCallerNumbersExtensionType) Validate() error {
	switch s {
	case "autoReceptionist":
		return nil
	case "callQueue":
		return nil
	case "sharedLineGroup":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListDeviceLineKeySettingOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Positions {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "positions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ListDeviceLineKeySettingOKPositionsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Index.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           1,
					MaxSet:        true,
					Max:           300,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "index",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ExtensionType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "extension_type",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OutboundCallerIds {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "outbound_caller_ids",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListDeviceLineKeySettingOKPositionsItemExtensionType) Validate() error {
	switch s {
	case "User":
		return nil
	case "CommonArea":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListDeviceLineKeySettingOKPositionsItemOutboundCallerIdsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.UsageType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "usage_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListDeviceLineKeySettingOKPositionsItemOutboundCallerIdsItemUsageType) Validate() error {
	switch s {
	case "Main Company Number":
		return nil
	case "Additional Company Number":
		return nil
	case "Direct Number":
		return nil
	case "Phone Number":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListEmergencyAddressesLevel) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListEmergencyAddressesOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.EmergencyAddresses {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "emergency_addresses",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ListEmergencyAddressesOKEmergencyAddressesItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Level.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "level",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListEmergencyAddressesOKEmergencyAddressesItemLevel) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListEmergencyAddressesOKEmergencyAddressesItemStatus) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	case 5:
		return nil
	case 6:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListEmergencyAddressesStatus) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	case 5:
		return nil
	case 6:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListExtensionLevelInboundBlockRulesMatchType) Validate() error {
	switch s {
	case "prefix":
		return nil
	case "phoneNumber":
		return nil
	case "SMS-shortCodes":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListExtensionLevelInboundBlockRulesOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.ExtensionBlockedRules {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "extension_blocked_rules",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PageSize.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        false,
					Min:           0,
					MaxSet:        true,
					Max:           100,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "page_size",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ListExtensionLevelInboundBlockRulesOKExtensionBlockedRulesItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.MatchType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "match_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListExtensionLevelInboundBlockRulesOKExtensionBlockedRulesItemMatchType) Validate() error {
	switch s {
	case "prefix":
		return nil
	case "phoneNumber":
		return nil
	case "SMS-shortCodes":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListExtensionLevelInboundBlockRulesOKExtensionBlockedRulesItemType) Validate() error {
	switch s {
	case "block_for_other_reasons":
		return nil
	case "block_as_threat":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListExtensionLevelInboundBlockRulesType) Validate() error {
	switch s {
	case "block_for_other_reasons":
		return nil
	case "block_as_threat":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListFirmwaresOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Firmwares {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "firmwares",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ListFirmwaresOKFirmwaresItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Versions {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "versions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ListFirmwaresOKFirmwaresItemVersionsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListFirmwaresOKFirmwaresItemVersionsItemStatus) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListGCPMembersExtensionType) Validate() error {
	switch s {
	case "user":
		return nil
	case "commonArea":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListGCPMembersOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.GroupCallPickupMember {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "group_call_pickup_member",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ListGCPMembersOKGroupCallPickupMemberItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ExtensionType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "extension_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListGCPMembersOKGroupCallPickupMemberItemExtensionType) Validate() error {
	switch s {
	case "user":
		return nil
	case "commonArea":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListGCPOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.GroupCallPickup {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "group_call_pickup",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ListGCPOKGroupCallPickupItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Delay.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "delay",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListGCPOKGroupCallPickupItemDelay) Validate() error {
	switch s {
	case 0:
		return nil
	case 5:
		return nil
	case 10:
		return nil
	case 15:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListLineKeySettingOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.LineKeys {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "line_keys",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ListLineKeySettingOKLineKeysItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListLineKeySettingOKLineKeysItemType) Validate() error {
	switch s {
	case "line":
		return nil
	case "blf":
		return nil
	case "speed_dial":
		return nil
	case "zoom_meeting":
		return nil
	case "call_park":
		return nil
	case "group_call_pickup":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListMembersMemberType) Validate() error {
	switch s {
	case "monitor":
		return nil
	case "monitored":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListMembersOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Members {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "members",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ListMembersOKMembersItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ExtensionType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "extension_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListMembersOKMembersItemExtensionType) Validate() error {
	switch s {
	case "user":
		return nil
	case "call_queue":
		return nil
	case "shared_line_group":
		return nil
	case "common_area_phone":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListMonitoringGroupOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.MonitoringGroups {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "monitoring_groups",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ListMonitoringGroupOKMonitoringGroupsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.MonitoringPrivileges {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "monitoring_privileges",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListMonitoringGroupOKMonitoringGroupsItemMonitoringPrivilegesItem) Validate() error {
	switch s {
	case "listen":
		return nil
	case "whisper":
		return nil
	case "barge":
		return nil
	case "take_over":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListMonitoringGroupOKMonitoringGroupsItemType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListMonitoringGroupType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListPastCallMetricsDirectionsItem) Validate() error {
	switch s {
	case "inbound":
		return nil
	case "outbound":
		return nil
	case "internal":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListPastCallMetricsDurationsItem) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListPastCallMetricsOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.CallLogs {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_logs",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ListPastCallMetricsOKCallLogsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Direction.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "direction",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListPastCallMetricsOKCallLogsItemDirection) Validate() error {
	switch s {
	case "inbound":
		return nil
	case "outbound":
		return nil
	case "internal":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListPastCallMetricsQualityType) Validate() error {
	switch s {
	case "good":
		return nil
	case "bad":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListPhoneDevicesAssigneeType) Validate() error {
	switch s {
	case "user":
		return nil
	case "commonArea":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListPhoneDevicesDeviceSource) Validate() error {
	switch s {
	case "haas":
		return nil
	case "hotDesking":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListPhoneDevicesDeviceType) Validate() error {
	switch s {
	case "algo":
		return nil
	case "audioCodes":
		return nil
	case "cisco":
		return nil
	case "cyberData":
		return nil
	case "grandstream":
		return nil
	case "poly":
		return nil
	case "yealink":
		return nil
	case "other":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListPhoneDevicesLocationStatus) Validate() error {
	switch s {
	case "unknownAddress":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListPhoneDevicesOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Devices {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "devices",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ListPhoneDevicesOKDevicesItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Assignee.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "assignee",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Assignees {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "assignees",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ListPhoneDevicesOKDevicesItemAssignee) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ExtensionType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "extension_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListPhoneDevicesOKDevicesItemAssigneeExtensionType) Validate() error {
	switch s {
	case "user":
		return nil
	case "commonArea":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListPhoneDevicesOKDevicesItemAssigneesItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ExtensionType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "extension_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListPhoneDevicesOKDevicesItemAssigneesItemExtensionType) Validate() error {
	switch s {
	case "user":
		return nil
	case "commonArea":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListPhoneDevicesOKDevicesItemStatus) Validate() error {
	switch s {
	case "online":
		return nil
	case "offline":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListPhoneDevicesType) Validate() error {
	switch s {
	case "assigned":
		return nil
	case "unassigned":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListPhoneUsersOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.PageSize.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        false,
					Min:           0,
					MaxSet:        true,
					Max:           300,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "page_size",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Users {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "users",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ListPhoneUsersOKUsersItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Email.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        true,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "email",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListPhoneUsersStatus) Validate() error {
	switch s {
	case "activate":
		return nil
	case "deactivate":
		return nil
	case "pending":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListPortedNumbersOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.PortedNumbers {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "ported_numbers",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ListPortedNumbersOKPortedNumbersItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListPortedNumbersOKPortedNumbersItemStatus) Validate() error {
	switch s {
	case "Not_Submitted":
		return nil
	case "Waiting":
		return nil
	case "Processing":
		return nil
	case "Successfully":
		return nil
	case "Rejected":
		return nil
	case "Canceled":
		return nil
	case "FOC":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListRoutingRuleOKItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.RoutingPath.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "routing_path",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ListRoutingRuleOKItemRoutingPath) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListRoutingRuleOKItemRoutingPathType) Validate() error {
	switch s {
	case "other_sites":
		return nil
	case "pstn":
		return nil
	case "sip_group":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListSettingTemplatesOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Templates {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "templates",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ListSettingTemplatesOKTemplatesItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListSettingTemplatesOKTemplatesItemType) Validate() error {
	switch s {
	case "user":
		return nil
	case "group":
		return nil
	case "autReceptionist":
		return nil
	case "commonArea":
		return nil
	case "zr":
		return nil
	case "interop":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListSharedLineAppearancesOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.PageSize.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        false,
					Min:           0,
					MaxSet:        true,
					Max:           300,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "page_size",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.SharedLineAppearances {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shared_line_appearances",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ListSharedLineAppearancesOKSharedLineAppearancesItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Executive.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "executive",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Assistants {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "assistants",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Privileges {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "privileges",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ListSharedLineAppearancesOKSharedLineAppearancesItemAssistantsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ExtensionType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "extension_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListSharedLineAppearancesOKSharedLineAppearancesItemAssistantsItemExtensionType) Validate() error {
	switch s {
	case "user":
		return nil
	case "commonArea":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListSharedLineAppearancesOKSharedLineAppearancesItemExecutive) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ExtensionType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "extension_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListSharedLineAppearancesOKSharedLineAppearancesItemExecutiveExtensionType) Validate() error {
	switch s {
	case "user":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListSharedLineAppearancesOKSharedLineAppearancesItemPrivilegesItem) Validate() error {
	switch s {
	case "place_calls":
		return nil
	case "answer_calls":
		return nil
	case "pickup_hold_calls":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListSharedLineGroupsOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.PageSize.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        false,
					Min:           0,
					MaxSet:        true,
					Max:           300,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "page_size",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.SharedLineGroups {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shared_line_groups",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ListSharedLineGroupsOKSharedLineGroupsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.PhoneNumbers {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "phone_numbers",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ListSharedLineGroupsOKSharedLineGroupsItemPhoneNumbersItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListSharedLineGroupsOKSharedLineGroupsItemPhoneNumbersItemStatus) Validate() error {
	switch s {
	case "pending":
		return nil
	case "available":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListSharedLineGroupsOKSharedLineGroupsItemStatus) Validate() error {
	switch s {
	case "active":
		return nil
	case "inactive":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListSipGroupsOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.SipGroups {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sip_groups",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ListSipGroupsOKSipGroupsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.SendSipGroupName.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "send_sip_group_name",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListSipGroupsOKSipGroupsItemSendSipGroupName) Validate() error {
	switch s {
	case true:
		return nil
	case false:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListSiteCustomizeOutboundCallerNumbersExtensionType) Validate() error {
	switch s {
	case "autoReceptionist":
		return nil
	case "callQueue":
		return nil
	case "sharedLineGroup":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListSiteOutboundCallingExceptionRuleMatchType) Validate() error {
	switch s {
	case "phoneNumber":
		return nil
	case "prefix":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListSiteOutboundCallingExceptionRuleOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.ExceptionRules {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "exception_rules",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PageSize.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        false,
					Min:           0,
					MaxSet:        true,
					Max:           300,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "page_size",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ListSiteOutboundCallingExceptionRuleOKExceptionRulesItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.MatchType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "match_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PrefixNumber.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "prefix_number",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Rule.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "rule",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Comment.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    255,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "comment",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListSiteOutboundCallingExceptionRuleOKExceptionRulesItemMatchType) Validate() error {
	switch s {
	case "phoneNumber":
		return nil
	case "prefix":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListSiteOutboundCallingExceptionRuleOKExceptionRulesItemRule) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListSiteOutboundCallingExceptionRuleOKExceptionRulesItemStatus) Validate() error {
	switch s {
	case "active":
		return nil
	case "inactive":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListSiteOutboundCallingExceptionRuleStatus) Validate() error {
	switch s {
	case "active":
		return nil
	case "inactive":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListTrackedLocationsLocationType) Validate() error {
	switch s {
	case "company":
		return nil
	case "personal":
		return nil
	case "unknown":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListTrackedLocationsOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.LocationTracking {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "location_tracking",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PageSize.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        false,
					Min:           0,
					MaxSet:        true,
					Max:           100,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "page_size",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ListTrackedLocationsOKLocationTrackingItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Country.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    2,
					MinLengthSet: true,
					MaxLength:    2,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "country",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListTrackedLocationsOKLocationTrackingItemType) Validate() error {
	switch s {
	case "company":
		return nil
	case "personal":
		return nil
	case "unknown":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListTrackedLocationsType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	case 5:
		return nil
	case 6:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListUserCustomizeOutboundCallerNumbersExtensionType) Validate() error {
	switch s {
	case "autoReceptionist":
		return nil
	case "callQueue":
		return nil
	case "sharedLineGroup":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListUserOutboundCallingExceptionRuleMatchType) Validate() error {
	switch s {
	case "phoneNumber":
		return nil
	case "prefix":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListUserOutboundCallingExceptionRuleOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.ExceptionRules {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "exception_rules",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PageSize.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        false,
					Min:           0,
					MaxSet:        true,
					Max:           300,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "page_size",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ListUserOutboundCallingExceptionRuleOKExceptionRulesItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.MatchType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "match_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PrefixNumber.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "prefix_number",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Rule.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "rule",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Comment.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    255,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "comment",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListUserOutboundCallingExceptionRuleOKExceptionRulesItemMatchType) Validate() error {
	switch s {
	case "phoneNumber":
		return nil
	case "prefix":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListUserOutboundCallingExceptionRuleOKExceptionRulesItemRule) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListUserOutboundCallingExceptionRuleOKExceptionRulesItemStatus) Validate() error {
	switch s {
	case "active":
		return nil
	case "inactive":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListUserOutboundCallingExceptionRuleStatus) Validate() error {
	switch s {
	case "active":
		return nil
	case "inactive":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListZoomPhoneAccountSettingsOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CallLiveTranscription.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_live_transcription",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.LocalSurvivabilityMode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "local_survivability_mode",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ExternalCallingOnZoomRoomCommonArea.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "external_calling_on_zoom_room_common_area",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SelectOutboundCallerID.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "select_outbound_caller_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PersonalAudioLibrary.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "personal_audio_library",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Voicemail.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "voicemail",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.VoicemailTranscription.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "voicemail_transcription",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.VoicemailNotificationByEmail.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "voicemail_notification_by_email",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SharedVoicemailNotificationByEmail.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shared_voicemail_notification_by_email",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RestrictedCallHours.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "restricted_call_hours",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AllowedCallLocations.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "allowed_call_locations",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CheckVoicemailsOverPhone.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "check_voicemails_over_phone",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AutoCallRecording.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "auto_call_recording",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AdHocCallRecording.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "ad_hoc_call_recording",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.InternationalCalling.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "international_calling",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.OutboundCalling.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "outbound_calling",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.OutboundSMS.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "outbound_sms",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SMS.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sms",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SMSEtiquetteTool.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sms_etiquette_tool",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ZoomPhoneOnMobile.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "zoom_phone_on_mobile",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ZoomPhoneOnPwa.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "zoom_phone_on_pwa",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.E2eEncryption.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "e2e_encryption",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallHandlingForwardingToOtherUsers.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_handling_forwarding_to_other_users",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallOverflow.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_overflow",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallTransferring.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_transferring",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ElevateToMeeting.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "elevate_to_meeting",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallPark.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_park",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.HandOffToRoom.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "hand_off_to_room",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MobileSwitchToCarrier.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "mobile_switch_to_carrier",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Delegation.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "delegation",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AudioIntercom.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "audio_intercom",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BlockCallsWithoutCallerID.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "block_calls_without_caller_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BlockExternalCalls.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "block_external_calls",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallQueueOptOutReason.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_queue_opt_out_reason",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AutoDeleteDataAfterRetentionDuration.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "auto_delete_data_after_retention_duration",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AutoCallFromThirdPartyApps.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "auto_call_from_third_party_apps",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.OverrideDefaultPort.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "override_default_port",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PeerToPeerMedia.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "peer_to_peer_media",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AdvancedEncryption.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "advanced_encryption",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DisplayCallFeedbackSurvey.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "display_call_feedback_survey",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BlockListForInboundCallsAndMessaging.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "block_list_for_inbound_calls_and_messaging",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ListZoomPhoneAccountSettingsOKAdHocCallRecording) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListZoomPhoneAccountSettingsOKAdHocCallRecordingLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListZoomPhoneAccountSettingsOKAdvancedEncryption) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListZoomPhoneAccountSettingsOKAdvancedEncryptionLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListZoomPhoneAccountSettingsOKAllowedCallLocations) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListZoomPhoneAccountSettingsOKAllowedCallLocationsLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListZoomPhoneAccountSettingsOKAudioIntercom) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListZoomPhoneAccountSettingsOKAudioIntercomLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListZoomPhoneAccountSettingsOKAutoCallFromThirdPartyApps) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListZoomPhoneAccountSettingsOKAutoCallFromThirdPartyAppsLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListZoomPhoneAccountSettingsOKAutoCallRecording) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RecordingCalls.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "recording_calls",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayRecordingBeepTone.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "play_recording_beep_tone",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListZoomPhoneAccountSettingsOKAutoCallRecordingLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListZoomPhoneAccountSettingsOKAutoCallRecordingPlayRecordingBeepTone) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.PlayBeepMember.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "play_beep_member",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayBeepVolume.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "play_beep_volume",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayBeepTimeInterval.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "play_beep_time_interval",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListZoomPhoneAccountSettingsOKAutoCallRecordingPlayRecordingBeepTonePlayBeepMember) Validate() error {
	switch s {
	case "allMembers":
		return nil
	case "recordingUser":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListZoomPhoneAccountSettingsOKAutoCallRecordingPlayRecordingBeepTonePlayBeepTimeInterval) Validate() error {
	switch s {
	case 5:
		return nil
	case 10:
		return nil
	case 15:
		return nil
	case 20:
		return nil
	case 25:
		return nil
	case 30:
		return nil
	case 60:
		return nil
	case 120:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListZoomPhoneAccountSettingsOKAutoCallRecordingPlayRecordingBeepTonePlayBeepVolume) Validate() error {
	switch s {
	case 0:
		return nil
	case 20:
		return nil
	case 40:
		return nil
	case 60:
		return nil
	case 80:
		return nil
	case 100:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListZoomPhoneAccountSettingsOKAutoCallRecordingRecordingCalls) Validate() error {
	switch s {
	case "inbound":
		return nil
	case "outbound":
		return nil
	case "both":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListZoomPhoneAccountSettingsOKAutoDeleteDataAfterRetentionDuration) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListZoomPhoneAccountSettingsOKAutoDeleteDataAfterRetentionDurationLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListZoomPhoneAccountSettingsOKBlockCallsWithoutCallerID) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListZoomPhoneAccountSettingsOKBlockCallsWithoutCallerIDLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListZoomPhoneAccountSettingsOKBlockExternalCalls) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListZoomPhoneAccountSettingsOKBlockExternalCallsLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListZoomPhoneAccountSettingsOKBlockListForInboundCallsAndMessaging) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListZoomPhoneAccountSettingsOKBlockListForInboundCallsAndMessagingLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListZoomPhoneAccountSettingsOKCallHandlingForwardingToOtherUsers) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallForwardingType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_forwarding_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListZoomPhoneAccountSettingsOKCallHandlingForwardingToOtherUsersCallForwardingType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListZoomPhoneAccountSettingsOKCallHandlingForwardingToOtherUsersLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListZoomPhoneAccountSettingsOKCallLiveTranscription) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListZoomPhoneAccountSettingsOKCallLiveTranscriptionLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListZoomPhoneAccountSettingsOKCallOverflow) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallOverflowType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_overflow_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListZoomPhoneAccountSettingsOKCallOverflowCallOverflowType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListZoomPhoneAccountSettingsOKCallOverflowLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListZoomPhoneAccountSettingsOKCallPark) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListZoomPhoneAccountSettingsOKCallParkLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListZoomPhoneAccountSettingsOKCallQueueOptOutReason) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListZoomPhoneAccountSettingsOKCallQueueOptOutReasonLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListZoomPhoneAccountSettingsOKCallTransferring) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallTransferringType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_transferring_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListZoomPhoneAccountSettingsOKCallTransferringCallTransferringType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListZoomPhoneAccountSettingsOKCallTransferringLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListZoomPhoneAccountSettingsOKCheckVoicemailsOverPhone) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListZoomPhoneAccountSettingsOKCheckVoicemailsOverPhoneLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListZoomPhoneAccountSettingsOKDelegation) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListZoomPhoneAccountSettingsOKDelegationLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListZoomPhoneAccountSettingsOKDisplayCallFeedbackSurvey) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListZoomPhoneAccountSettingsOKDisplayCallFeedbackSurveyLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListZoomPhoneAccountSettingsOKE2eEncryption) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListZoomPhoneAccountSettingsOKE2eEncryptionLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListZoomPhoneAccountSettingsOKElevateToMeeting) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListZoomPhoneAccountSettingsOKElevateToMeetingLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListZoomPhoneAccountSettingsOKExternalCallingOnZoomRoomCommonArea) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListZoomPhoneAccountSettingsOKExternalCallingOnZoomRoomCommonAreaLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListZoomPhoneAccountSettingsOKHandOffToRoom) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListZoomPhoneAccountSettingsOKHandOffToRoomLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListZoomPhoneAccountSettingsOKInternationalCalling) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListZoomPhoneAccountSettingsOKInternationalCallingLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListZoomPhoneAccountSettingsOKLocalSurvivabilityMode) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListZoomPhoneAccountSettingsOKLocalSurvivabilityModeLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListZoomPhoneAccountSettingsOKMobileSwitchToCarrier) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListZoomPhoneAccountSettingsOKMobileSwitchToCarrierLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListZoomPhoneAccountSettingsOKOutboundCalling) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListZoomPhoneAccountSettingsOKOutboundCallingLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListZoomPhoneAccountSettingsOKOutboundSMS) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListZoomPhoneAccountSettingsOKOutboundSMSLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListZoomPhoneAccountSettingsOKOverrideDefaultPort) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListZoomPhoneAccountSettingsOKOverrideDefaultPortLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListZoomPhoneAccountSettingsOKPeerToPeerMedia) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListZoomPhoneAccountSettingsOKPeerToPeerMediaLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListZoomPhoneAccountSettingsOKPersonalAudioLibrary) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListZoomPhoneAccountSettingsOKPersonalAudioLibraryLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListZoomPhoneAccountSettingsOKRestrictedCallHours) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListZoomPhoneAccountSettingsOKRestrictedCallHoursLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListZoomPhoneAccountSettingsOKSMS) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ListZoomPhoneAccountSettingsOKSMSEtiquetteTool) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListZoomPhoneAccountSettingsOKSMSEtiquetteToolLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListZoomPhoneAccountSettingsOKSMSLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListZoomPhoneAccountSettingsOKSelectOutboundCallerID) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListZoomPhoneAccountSettingsOKSelectOutboundCallerIDLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListZoomPhoneAccountSettingsOKSharedVoicemailNotificationByEmail) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListZoomPhoneAccountSettingsOKSharedVoicemailNotificationByEmailLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListZoomPhoneAccountSettingsOKVoicemail) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListZoomPhoneAccountSettingsOKVoicemailLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListZoomPhoneAccountSettingsOKVoicemailNotificationByEmail) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListZoomPhoneAccountSettingsOKVoicemailNotificationByEmailLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListZoomPhoneAccountSettingsOKVoicemailTranscription) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListZoomPhoneAccountSettingsOKVoicemailTranscriptionLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListZoomPhoneAccountSettingsOKZoomPhoneOnMobile) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListZoomPhoneAccountSettingsOKZoomPhoneOnMobileLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListZoomPhoneAccountSettingsOKZoomPhoneOnPwa) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListZoomPhoneAccountSettingsOKZoomPhoneOnPwaLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ListZoomRoomsOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.PageSize.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        false,
					Min:           0,
					MaxSet:        true,
					Max:           300,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "page_size",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *PatchCallHandlingSettingsCallForwarding) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.SubSettingType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sub_setting_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PatchCallHandlingSettingsCallForwardingSubSettingType) Validate() error {
	switch s {
	case "call_forwarding":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PatchCallHandlingSettingsCallHandling) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Settings.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "settings",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SubSettingType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sub_setting_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *PatchCallHandlingSettingsCallHandlingSettings) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CallDistribution.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_distribution",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallNotAnswerAction.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_not_answer_action",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BusyOnAnotherCallAction.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "busy_on_another_call_action",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MaxWaitTime.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "max_wait_time",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RingMode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "ring_mode",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.WrapUpTime.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "wrap_up_time",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PatchCallHandlingSettingsCallHandlingSettingsBusyOnAnotherCallAction) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 4:
		return nil
	case 6:
		return nil
	case 7:
		return nil
	case 8:
		return nil
	case 9:
		return nil
	case 10:
		return nil
	case 12:
		return nil
	case 21:
		return nil
	case 22:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PatchCallHandlingSettingsCallHandlingSettingsCallDistribution) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.RingDuration.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "ring_duration",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RingMode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "ring_mode",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PatchCallHandlingSettingsCallHandlingSettingsCallDistributionRingDuration) Validate() error {
	switch s {
	case 10:
		return nil
	case 15:
		return nil
	case 20:
		return nil
	case 25:
		return nil
	case 30:
		return nil
	case 35:
		return nil
	case 40:
		return nil
	case 45:
		return nil
	case 50:
		return nil
	case 55:
		return nil
	case 60:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PatchCallHandlingSettingsCallHandlingSettingsCallDistributionRingMode) Validate() error {
	switch s {
	case "simultaneous":
		return nil
	case "sequential":
		return nil
	case "rotating":
		return nil
	case "longest_idle":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PatchCallHandlingSettingsCallHandlingSettingsCallNotAnswerAction) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 4:
		return nil
	case 6:
		return nil
	case 7:
		return nil
	case 8:
		return nil
	case 9:
		return nil
	case 10:
		return nil
	case 11:
		return nil
	case 12:
		return nil
	case 13:
		return nil
	case 14:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PatchCallHandlingSettingsCallHandlingSettingsMaxWaitTime) Validate() error {
	switch s {
	case 10:
		return nil
	case 15:
		return nil
	case 20:
		return nil
	case 25:
		return nil
	case 30:
		return nil
	case 35:
		return nil
	case 40:
		return nil
	case 45:
		return nil
	case 50:
		return nil
	case 55:
		return nil
	case 60:
		return nil
	case 120:
		return nil
	case 180:
		return nil
	case 240:
		return nil
	case 300:
		return nil
	case 600:
		return nil
	case 900:
		return nil
	case 1200:
		return nil
	case 1500:
		return nil
	case 1800:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PatchCallHandlingSettingsCallHandlingSettingsRingMode) Validate() error {
	switch s {
	case "simultaneous":
		return nil
	case "sequential":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PatchCallHandlingSettingsCallHandlingSettingsWrapUpTime) Validate() error {
	switch s {
	case 10:
		return nil
	case 15:
		return nil
	case 20:
		return nil
	case 25:
		return nil
	case 30:
		return nil
	case 35:
		return nil
	case 40:
		return nil
	case 45:
		return nil
	case 50:
		return nil
	case 55:
		return nil
	case 60:
		return nil
	case 120:
		return nil
	case 180:
		return nil
	case 240:
		return nil
	case 300:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PatchCallHandlingSettingsCallHandlingSubSettingType) Validate() error {
	switch s {
	case "call_handling":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PatchCallHandlingSettingsCustomHours) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Settings.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "settings",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SubSettingType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sub_setting_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *PatchCallHandlingSettingsCustomHoursSettings) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.CustomHoursSettings {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "custom_hours_settings",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *PatchCallHandlingSettingsCustomHoursSettingsCustomHoursSettingsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Weekday.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "weekday",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PatchCallHandlingSettingsCustomHoursSettingsCustomHoursSettingsItemType) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PatchCallHandlingSettingsCustomHoursSettingsCustomHoursSettingsItemWeekday) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	case 5:
		return nil
	case 6:
		return nil
	case 7:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PatchCallHandlingSettingsCustomHoursSettingsType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PatchCallHandlingSettingsCustomHoursSubSettingType) Validate() error {
	switch s {
	case "custom_hours":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PatchCallHandlingSettingsHoliday) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.SubSettingType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sub_setting_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PatchCallHandlingSettingsHolidaySubSettingType) Validate() error {
	switch s {
	case "holiday":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PhoneUserCallLogsOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.CallLogs {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_logs",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *PhoneUserCallLogsOKCallLogsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CalleeNumberType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "callee_number_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CalleeNumberSource.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "callee_number_source",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallerNumberType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "caller_number_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallerNumberSource.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "caller_number_source",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ForwardedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "forwarded_by",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RecordingType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "recording_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PhoneUserCallLogsOKCallLogsItemCalleeNumberSource) Validate() error {
	switch s {
	case "internal":
		return nil
	case "external":
		return nil
	case "byop":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PhoneUserCallLogsOKCallLogsItemCalleeNumberType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PhoneUserCallLogsOKCallLogsItemCallerNumberSource) Validate() error {
	switch s {
	case "internal":
		return nil
	case "external":
		return nil
	case "byop":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PhoneUserCallLogsOKCallLogsItemCallerNumberType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PhoneUserCallLogsOKCallLogsItemForwardedBy) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ExtensionType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "extension_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PhoneUserCallLogsOKCallLogsItemForwardedByExtensionType) Validate() error {
	switch s {
	case "user":
		return nil
	case "callQueue":
		return nil
	case "commonAreaPhone":
		return nil
	case "autoReceptionist":
		return nil
	case "sharedLineGroup":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PhoneUserCallLogsOKCallLogsItemRecordingType) Validate() error {
	switch s {
	case "OnDemand":
		return nil
	case "Automatic":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PhoneUserCallLogsTimeType) Validate() error {
	switch s {
	case "startTime":
		return nil
	case "endTime":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PhoneUserCallLogsType) Validate() error {
	switch s {
	case "all":
		return nil
	case "missed":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PhoneUserOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.EmergencyAddress.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "emergency_address",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Policy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "policy",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *PhoneUserOKEmergencyAddress) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Country.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    2,
					MinLengthSet: true,
					MaxLength:    2,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "country",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *PhoneUserOKPolicy) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.AdHocCallRecording.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "ad_hoc_call_recording",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AutoCallRecording.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "auto_call_recording",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallOverflow.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_overflow",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallPark.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_park",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallTransferring.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_transferring",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallHandlingForwardingToOtherUsers.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_handling_forwarding_to_other_users",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.HandOffToRoom.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "hand_off_to_room",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MobileSwitchToCarrier.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "mobile_switch_to_carrier",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SelectOutboundCallerID.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "select_outbound_caller_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SMS.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sms",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ZoomPhoneOnMobile.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "zoom_phone_on_mobile",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PersonalAudioLibrary.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "personal_audio_library",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.VoicemailTranscription.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "voicemail_transcription",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.VoicemailNotificationByEmail.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "voicemail_notification_by_email",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SharedVoicemailNotificationByEmail.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shared_voicemail_notification_by_email",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CheckVoicemailsOverPhone.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "check_voicemails_over_phone",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AudioIntercom.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "audio_intercom",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PeerToPeerMedia.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "peer_to_peer_media",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.E2eEncryption.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "e2e_encryption",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *PhoneUserOKPolicyAdHocCallRecording) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.PlayRecordingBeepTone.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "play_recording_beep_tone",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PhoneUserOKPolicyAdHocCallRecordingLockedBy) Validate() error {
	switch s {
	case "account":
		return nil
	case "user_group":
		return nil
	case "site":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PhoneUserOKPolicyAdHocCallRecordingPlayRecordingBeepTone) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.PlayBeepVolume.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "play_beep_volume",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayBeepTimeInterval.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "play_beep_time_interval",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayBeepMember.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "play_beep_member",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PhoneUserOKPolicyAdHocCallRecordingPlayRecordingBeepTonePlayBeepMember) Validate() error {
	switch s {
	case "allMember":
		return nil
	case "recordingSide":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PhoneUserOKPolicyAdHocCallRecordingPlayRecordingBeepTonePlayBeepTimeInterval) Validate() error {
	switch s {
	case 5:
		return nil
	case 10:
		return nil
	case 15:
		return nil
	case 20:
		return nil
	case 25:
		return nil
	case 30:
		return nil
	case 60:
		return nil
	case 120:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PhoneUserOKPolicyAdHocCallRecordingPlayRecordingBeepTonePlayBeepVolume) Validate() error {
	switch s {
	case 0:
		return nil
	case 20:
		return nil
	case 40:
		return nil
	case 60:
		return nil
	case 80:
		return nil
	case 100:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PhoneUserOKPolicyAudioIntercom) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PhoneUserOKPolicyAudioIntercomLockedBy) Validate() error {
	switch s {
	case "account":
		return nil
	case "user_group":
		return nil
	case "site":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PhoneUserOKPolicyAutoCallRecording) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RecordingCalls.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "recording_calls",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayRecordingBeepTone.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "play_recording_beep_tone",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PhoneUserOKPolicyAutoCallRecordingLockedBy) Validate() error {
	switch s {
	case "account":
		return nil
	case "user_group":
		return nil
	case "site":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PhoneUserOKPolicyAutoCallRecordingPlayRecordingBeepTone) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.PlayBeepVolume.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "play_beep_volume",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayBeepTimeInterval.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "play_beep_time_interval",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayBeepMember.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "play_beep_member",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PhoneUserOKPolicyAutoCallRecordingPlayRecordingBeepTonePlayBeepMember) Validate() error {
	switch s {
	case "allMember":
		return nil
	case "recordingSide":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PhoneUserOKPolicyAutoCallRecordingPlayRecordingBeepTonePlayBeepTimeInterval) Validate() error {
	switch s {
	case 5:
		return nil
	case 10:
		return nil
	case 15:
		return nil
	case 20:
		return nil
	case 25:
		return nil
	case 30:
		return nil
	case 60:
		return nil
	case 120:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PhoneUserOKPolicyAutoCallRecordingPlayRecordingBeepTonePlayBeepVolume) Validate() error {
	switch s {
	case 0:
		return nil
	case 20:
		return nil
	case 40:
		return nil
	case 60:
		return nil
	case 80:
		return nil
	case 100:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PhoneUserOKPolicyAutoCallRecordingRecordingCalls) Validate() error {
	switch s {
	case "inbound":
		return nil
	case "outbound":
		return nil
	case "both":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PhoneUserOKPolicyCallHandlingForwardingToOtherUsers) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CallForwardingType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_forwarding_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PhoneUserOKPolicyCallHandlingForwardingToOtherUsersCallForwardingType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PhoneUserOKPolicyCallHandlingForwardingToOtherUsersLockedBy) Validate() error {
	switch s {
	case "account":
		return nil
	case "user_group":
		return nil
	case "site":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PhoneUserOKPolicyCallOverflow) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CallOverflowType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_overflow_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PhoneUserOKPolicyCallOverflowCallOverflowType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PhoneUserOKPolicyCallOverflowLockedBy) Validate() error {
	switch s {
	case "account":
		return nil
	case "user_group":
		return nil
	case "site":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PhoneUserOKPolicyCallPark) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ExpirationPeriod.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "expiration_period",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ForwardTo.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "forward_to",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PhoneUserOKPolicyCallParkExpirationPeriod) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	case 5:
		return nil
	case 6:
		return nil
	case 7:
		return nil
	case 8:
		return nil
	case 9:
		return nil
	case 10:
		return nil
	case 15:
		return nil
	case 20:
		return nil
	case 25:
		return nil
	case 30:
		return nil
	case 35:
		return nil
	case 40:
		return nil
	case 45:
		return nil
	case 50:
		return nil
	case 55:
		return nil
	case 60:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PhoneUserOKPolicyCallParkForwardTo) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ExtensionType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "extension_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PhoneUserOKPolicyCallParkForwardToExtensionType) Validate() error {
	switch s {
	case "user":
		return nil
	case "zoomRoom":
		return nil
	case "commonArea":
		return nil
	case "ciscoRoom/polycomRoom":
		return nil
	case "autoReceptionist":
		return nil
	case "callQueue":
		return nil
	case "sharedLineGroup":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PhoneUserOKPolicyCallParkLockedBy) Validate() error {
	switch s {
	case "account":
		return nil
	case "user_group":
		return nil
	case "site":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PhoneUserOKPolicyCallTransferring) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CallTransferringType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_transferring_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PhoneUserOKPolicyCallTransferringCallTransferringType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PhoneUserOKPolicyCallTransferringLockedBy) Validate() error {
	switch s {
	case "account":
		return nil
	case "user_group":
		return nil
	case "site":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PhoneUserOKPolicyCheckVoicemailsOverPhone) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PhoneUserOKPolicyCheckVoicemailsOverPhoneLockedBy) Validate() error {
	switch s {
	case "account":
		return nil
	case "user_group":
		return nil
	case "site":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PhoneUserOKPolicyE2eEncryption) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PhoneUserOKPolicyE2eEncryptionLockedBy) Validate() error {
	switch s {
	case "account":
		return nil
	case "user_group":
		return nil
	case "site":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PhoneUserOKPolicyHandOffToRoom) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PhoneUserOKPolicyHandOffToRoomLockedBy) Validate() error {
	switch s {
	case "account":
		return nil
	case "user_group":
		return nil
	case "site":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PhoneUserOKPolicyMobileSwitchToCarrier) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PhoneUserOKPolicyMobileSwitchToCarrierLockedBy) Validate() error {
	switch s {
	case "account":
		return nil
	case "user_group":
		return nil
	case "site":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PhoneUserOKPolicyPeerToPeerMedia) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PhoneUserOKPolicyPeerToPeerMediaLockedBy) Validate() error {
	switch s {
	case "account":
		return nil
	case "user_group":
		return nil
	case "site":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PhoneUserOKPolicyPersonalAudioLibrary) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PhoneUserOKPolicyPersonalAudioLibraryLockedBy) Validate() error {
	switch s {
	case "account":
		return nil
	case "user_group":
		return nil
	case "site":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PhoneUserOKPolicySMS) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PhoneUserOKPolicySMSLockedBy) Validate() error {
	switch s {
	case "account":
		return nil
	case "user_group":
		return nil
	case "site":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PhoneUserOKPolicySelectOutboundCallerID) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PhoneUserOKPolicySelectOutboundCallerIDLockedBy) Validate() error {
	switch s {
	case "account":
		return nil
	case "user_group":
		return nil
	case "site":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PhoneUserOKPolicySharedVoicemailNotificationByEmail) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PhoneUserOKPolicySharedVoicemailNotificationByEmailLockedBy) Validate() error {
	switch s {
	case "account":
		return nil
	case "user_group":
		return nil
	case "site":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PhoneUserOKPolicyVoicemailNotificationByEmail) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PhoneUserOKPolicyVoicemailNotificationByEmailLockedBy) Validate() error {
	switch s {
	case "account":
		return nil
	case "user_group":
		return nil
	case "site":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PhoneUserOKPolicyVoicemailTranscription) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PhoneUserOKPolicyVoicemailTranscriptionLockedBy) Validate() error {
	switch s {
	case "account":
		return nil
	case "user_group":
		return nil
	case "site":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PhoneUserOKPolicyZoomPhoneOnMobile) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PhoneUserOKPolicyZoomPhoneOnMobileLockedBy) Validate() error {
	switch s {
	case "account":
		return nil
	case "user_group":
		return nil
	case "site":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PhoneUserOKStatus) Validate() error {
	switch s {
	case "activate":
		return nil
	case "deactivate":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PhoneUserRecordingsOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Recordings {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "recordings",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *PhoneUserRecordingsOKRecordingsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CalleeNumberType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "callee_number_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallerNumberType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "caller_number_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PhoneUserRecordingsOKRecordingsItemCalleeNumberType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PhoneUserRecordingsOKRecordingsItemCallerNumberType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PhoneUserSettingsOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Delegation.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "delegation",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DeskPhone.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "desk_phone",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Intercom.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "intercom",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *PhoneUserSettingsOKDelegation) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Privileges {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "privileges",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PhoneUserSettingsOKDelegationPrivilegesItem) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PhoneUserSettingsOKDeskPhone) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Devices {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "devices",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *PhoneUserSettingsOKDeskPhoneDevicesItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Policy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "policy",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *PhoneUserSettingsOKDeskPhoneDevicesItemPolicy) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CallControl.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_control",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.HotDesking.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "hot_desking",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *PhoneUserSettingsOKDeskPhoneDevicesItemPolicyCallControl) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PhoneUserSettingsOKDeskPhoneDevicesItemPolicyCallControlStatus) Validate() error {
	switch s {
	case "unsupported":
		return nil
	case "on":
		return nil
	case "off":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PhoneUserSettingsOKDeskPhoneDevicesItemPolicyHotDesking) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PhoneUserSettingsOKDeskPhoneDevicesItemPolicyHotDeskingStatus) Validate() error {
	switch s {
	case "unsupported":
		return nil
	case "on":
		return nil
	case "off":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PhoneUserSettingsOKDeskPhoneDevicesItemStatus) Validate() error {
	switch s {
	case "online":
		return nil
	case "offline":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PhoneUserSettingsOKIntercom) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.AudioIntercoms {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "audio_intercoms",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *PhoneUserSettingsOKIntercomAudioIntercomsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DeviceStatus.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "device_status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PhoneUserSettingsOKIntercomAudioIntercomsItemDeviceStatus) Validate() error {
	switch s {
	case "online":
		return nil
	case "offline":
		return nil
	case "no device":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PhoneUserSettingsOKIntercomAudioIntercomsItemStatus) Validate() error {
	switch s {
	case "active":
		return nil
	case "pending":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PhoneUserSettingsOKStatus) Validate() error {
	switch s {
	case "Active":
		return nil
	case "Inactive":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PhoneUserVoiceMailsOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.VoiceMails {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "voice_mails",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *PhoneUserVoiceMailsOKVoiceMailsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CalleeNumberType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "callee_number_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallerNumberType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "caller_number_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PhoneUserVoiceMailsOKVoiceMailsItemCalleeNumberType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PhoneUserVoiceMailsOKVoiceMailsItemCallerNumberType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PhoneUserVoiceMailsOKVoiceMailsItemStatus) Validate() error {
	switch s {
	case "read":
		return nil
	case "unread":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PhoneUserVoiceMailsStatus) Validate() error {
	switch s {
	case "all":
		return nil
	case "read":
		return nil
	case "unread":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PostCallHandlingSettingsCallForwarding) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.SubSettingType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sub_setting_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PostCallHandlingSettingsCallForwardingSubSettingType) Validate() error {
	switch s {
	case "call_forwarding":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PostCallHandlingSettingsHoliday) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.SubSettingType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sub_setting_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PostCallHandlingSettingsHolidaySubSettingType) Validate() error {
	switch s {
	case "holiday":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s RemoveMemberMemberType) Validate() error {
	switch s {
	case "monitor":
		return nil
	case "monitored":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s RemoveMembersMemberType) Validate() error {
	switch s {
	case "monitor":
		return nil
	case "monitored":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *SmsByMessageIdOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Attachments {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "attachments",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MessageType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "message_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Sender.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sender",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.ToMembers {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "to_members",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *SmsByMessageIdOKAttachmentsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s SmsByMessageIdOKAttachmentsItemType) Validate() error {
	switch s {
	case "OTHER":
		return nil
	case "PNG":
		return nil
	case "GIF":
		return nil
	case "JPG":
		return nil
	case "AUDIO":
		return nil
	case "VIDEO":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s SmsByMessageIdOKMessageType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	case 5:
		return nil
	case 6:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *SmsByMessageIdOKSender) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Owner.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "owner",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *SmsByMessageIdOKSenderOwner) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s SmsByMessageIdOKSenderOwnerType) Validate() error {
	switch s {
	case "user":
		return nil
	case "callQueue":
		return nil
	case "autoReceptionist":
		return nil
	case "sharedLineGroup":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *SmsByMessageIdOKToMembersItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Owner.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "owner",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *SmsByMessageIdOKToMembersItemOwner) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s SmsByMessageIdOKToMembersItemOwnerType) Validate() error {
	switch s {
	case "user":
		return nil
	case "callQueue":
		return nil
	case "autoReceptionist":
		return nil
	case "sharedLineGroup":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *SmsSessionDetailsOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.SMSHistories {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sms_histories",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *SmsSessionDetailsOKSMSHistoriesItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Attachments {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "attachments",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MessageType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "message_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Sender.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sender",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.ToMembers {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "to_members",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *SmsSessionDetailsOKSMSHistoriesItemAttachmentsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s SmsSessionDetailsOKSMSHistoriesItemAttachmentsItemType) Validate() error {
	switch s {
	case "OTHER":
		return nil
	case "PNG":
		return nil
	case "GIF":
		return nil
	case "JPG":
		return nil
	case "AUDIO":
		return nil
	case "VIDEO":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s SmsSessionDetailsOKSMSHistoriesItemMessageType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	case 5:
		return nil
	case 6:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *SmsSessionDetailsOKSMSHistoriesItemSender) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Owner.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "owner",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *SmsSessionDetailsOKSMSHistoriesItemSenderOwner) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s SmsSessionDetailsOKSMSHistoriesItemSenderOwnerType) Validate() error {
	switch s {
	case "user":
		return nil
	case "callQueue":
		return nil
	case "autoReceptionist":
		return nil
	case "sharedLineGroup":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *SmsSessionDetailsOKSMSHistoriesItemToMembersItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Owner.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "owner",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *SmsSessionDetailsOKSMSHistoriesItemToMembersItemOwner) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s SmsSessionDetailsOKSMSHistoriesItemToMembersItemOwnerType) Validate() error {
	switch s {
	case "user":
		return nil
	case "callQueue":
		return nil
	case "autoReceptionist":
		return nil
	case "sharedLineGroup":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *SmsSessionSyncOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.SMSHistories {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sms_histories",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *SmsSessionSyncOKSMSHistoriesItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Attachments {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "attachments",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MessageType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "message_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Sender.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sender",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.ToMembers {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "to_members",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *SmsSessionSyncOKSMSHistoriesItemAttachmentsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s SmsSessionSyncOKSMSHistoriesItemAttachmentsItemType) Validate() error {
	switch s {
	case "OTHER":
		return nil
	case "PNG":
		return nil
	case "GIF":
		return nil
	case "JPG":
		return nil
	case "AUDIO":
		return nil
	case "VIDEO":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s SmsSessionSyncOKSMSHistoriesItemMessageType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	case 5:
		return nil
	case 6:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *SmsSessionSyncOKSMSHistoriesItemSender) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Owner.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "owner",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *SmsSessionSyncOKSMSHistoriesItemSenderOwner) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s SmsSessionSyncOKSMSHistoriesItemSenderOwnerType) Validate() error {
	switch s {
	case "user":
		return nil
	case "callQueue":
		return nil
	case "autoReceptionist":
		return nil
	case "sharedLineGroup":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *SmsSessionSyncOKSMSHistoriesItemToMembersItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Owner.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "owner",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *SmsSessionSyncOKSMSHistoriesItemToMembersItemOwner) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s SmsSessionSyncOKSMSHistoriesItemToMembersItemOwnerType) Validate() error {
	switch s {
	case "user":
		return nil
	case "callQueue":
		return nil
	case "autoReceptionist":
		return nil
	case "sharedLineGroup":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s SmsSessionSyncSyncType) Validate() error {
	switch s {
	case "FSync":
		return nil
	case "ISync":
		return nil
	case "BSync":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *SyncPhoneDeviceReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Int{
			MinSet:        true,
			Min:           1,
			MaxSet:        true,
			Max:           2,
			MinExclusive:  false,
			MaxExclusive:  false,
			MultipleOfSet: false,
			MultipleOf:    0,
		}).Validate(int64(s.Level)); err != nil {
			return errors.Wrap(err, "int")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "level",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SiteID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "site_id",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *SyncUserCallLogsOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.CallLogs {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_logs",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *SyncUserCallLogsOKCallLogsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CalleeNumberType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "callee_number_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CalleeNumberSource.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "callee_number_source",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallerNumberType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "caller_number_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallerNumberSource.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "caller_number_source",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ForwardedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "forwarded_by",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RecordingType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "recording_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s SyncUserCallLogsOKCallLogsItemCalleeNumberSource) Validate() error {
	switch s {
	case "internal":
		return nil
	case "external":
		return nil
	case "byop":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s SyncUserCallLogsOKCallLogsItemCalleeNumberType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s SyncUserCallLogsOKCallLogsItemCallerNumberSource) Validate() error {
	switch s {
	case "internal":
		return nil
	case "external":
		return nil
	case "byop":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s SyncUserCallLogsOKCallLogsItemCallerNumberType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *SyncUserCallLogsOKCallLogsItemForwardedBy) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ExtensionType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "extension_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s SyncUserCallLogsOKCallLogsItemForwardedByExtensionType) Validate() error {
	switch s {
	case "user":
		return nil
	case "callQueue":
		return nil
	case "commonAreaPhone":
		return nil
	case "autoReceptionist":
		return nil
	case "sharedLineGroup":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s SyncUserCallLogsOKCallLogsItemRecordingType) Validate() error {
	switch s {
	case "OnDemand":
		return nil
	case "Automatic":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s SyncUserCallLogsSyncType) Validate() error {
	switch s {
	case "FSync":
		return nil
	case "ISync":
		return nil
	case "BSync":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UpdateADeviceReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.DisplayName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    255,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "display_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MACAddress.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        false,
					Hostname:     false,
					Regex:        regexMap["^([0-9A-Fa-f]{2}[:-]?){5}([0-9A-Fa-f]{2})$"],
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "mac_address",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *UpdateAccountLevelInboundBlockRuleReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.MatchType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "match_type",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Type.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateAccountLevelInboundBlockRuleReqMatchType) Validate() error {
	switch s {
	case "prefix":
		return nil
	case "phoneNumber":
		return nil
	case "SMS-shortCodes":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s UpdateAccountLevelInboundBlockRuleReqStatus) Validate() error {
	switch s {
	case "active":
		return nil
	case "inactive":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s UpdateAccountLevelInboundBlockRuleReqType) Validate() error {
	switch s {
	case "block_for_other_reasons":
		return nil
	case "block_as_threat":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UpdateAccountOutboundCallingCountriesOrRegionsReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.CountryRegions {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "country_regions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *UpdateAccountOutboundCallingCountriesOrRegionsReqCountryRegionsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Rule.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "rule",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateAccountOutboundCallingCountriesOrRegionsReqCountryRegionsItemRule) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UpdateAccountOutboundCallingExceptionRuleReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ExceptionRule.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "exception_rule",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *UpdateAccountOutboundCallingExceptionRuleReqExceptionRule) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.MatchType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "match_type",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    50,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.PrefixNumber)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "prefix_number",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Comment.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    255,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "comment",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Status.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateAccountOutboundCallingExceptionRuleReqExceptionRuleMatchType) Validate() error {
	switch s {
	case "phoneNumber":
		return nil
	case "prefix":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s UpdateAccountOutboundCallingExceptionRuleReqExceptionRuleStatus) Validate() error {
	switch s {
	case "active":
		return nil
	case "inactive":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UpdateAnAlertSettingReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.RuleConditions {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "rule_conditions",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.TimeFrameType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "time_frame_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Frequency.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "frequency",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateAnAlertSettingReqFrequency) Validate() error {
	switch s {
	case 5:
		return nil
	case 10:
		return nil
	case 15:
		return nil
	case 30:
		return nil
	case 60:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UpdateAnAlertSettingReqRuleConditionsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.RuleConditionType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "rule_condition_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateAnAlertSettingReqRuleConditionsItemRuleConditionType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	case 5:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s UpdateAnAlertSettingReqStatus) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s UpdateAnAlertSettingReqTimeFrameType) Validate() error {
	switch s {
	case "all_day":
		return nil
	case "specific_time":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UpdateAutoReceptionistIVRReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CallerEntersNoAction.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "caller_enters_no_action",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *UpdateAutoReceptionistIVRReqCallerEntersNoAction) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.AudioPromptRepeat.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "audio_prompt_repeat",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateAutoReceptionistIVRReqCallerEntersNoActionAudioPromptRepeat) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UpdateAutoReceptionistReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Name.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    32,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AudioPromptLanguage.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "audio_prompt_language",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RecordingStorageLocation.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "recording_storage_location",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateAutoReceptionistReqAudioPromptLanguage) Validate() error {
	switch s {
	case "en-US":
		return nil
	case "en-GB":
		return nil
	case "es-US":
		return nil
	case "fr-CA":
		return nil
	case "da-DK":
		return nil
	case "de-DE":
		return nil
	case "es-ES":
		return nil
	case "fr-FR":
		return nil
	case "it-IT":
		return nil
	case "nl-NL":
		return nil
	case "pt-PT":
		return nil
	case "ja":
		return nil
	case "ko-KR":
		return nil
	case "pt-BR":
		return nil
	case "zh-CN":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s UpdateAutoReceptionistReqRecordingStorageLocation) Validate() error {
	switch s {
	case "US":
		return nil
	case "AU":
		return nil
	case "CA":
		return nil
	case "DE":
		return nil
	case "IN":
		return nil
	case "JP":
		return nil
	case "SG":
		return nil
	case "BR":
		return nil
	case "CN":
		return nil
	case "MX":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s UpdateCallHandlingReq) Validate() error {
	switch s.Type {
	case PatchCallHandlingSettingsCallForwardingUpdateCallHandlingReq:
		if err := s.PatchCallHandlingSettingsCallForwarding.Validate(); err != nil {
			return err
		}
		return nil
	case PatchCallHandlingSettingsHolidayUpdateCallHandlingReq:
		if err := s.PatchCallHandlingSettingsHoliday.Validate(); err != nil {
			return err
		}
		return nil
	case PatchCallHandlingSettingsCustomHoursUpdateCallHandlingReq:
		if err := s.PatchCallHandlingSettingsCustomHours.Validate(); err != nil {
			return err
		}
		return nil
	case PatchCallHandlingSettingsCallHandlingUpdateCallHandlingReq:
		if err := s.PatchCallHandlingSettingsCallHandling.Validate(); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s UpdateCallHandlingSettingType) Validate() error {
	switch s {
	case "business_hours":
		return nil
	case "closed_hours":
		return nil
	case "holiday_hours":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UpdateCallQueueReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Description.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    32,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "description",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Name.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    32,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateCallQueueReqStatus) Validate() error {
	switch s {
	case "active":
		return nil
	case "inactive":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UpdateCommonAreaOutboundCallingCountriesOrRegionsReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.CountryRegions {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "country_regions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *UpdateCommonAreaOutboundCallingCountriesOrRegionsReqCountryRegionsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Rule.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "rule",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateCommonAreaOutboundCallingCountriesOrRegionsReqCountryRegionsItemRule) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UpdateCommonAreaOutboundCallingExceptionRuleReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ExceptionRule.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "exception_rule",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *UpdateCommonAreaOutboundCallingExceptionRuleReqExceptionRule) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.MatchType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "match_type",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    50,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.PrefixNumber)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "prefix_number",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Comment.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    255,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "comment",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Status.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateCommonAreaOutboundCallingExceptionRuleReqExceptionRuleMatchType) Validate() error {
	switch s {
	case "phoneNumber":
		return nil
	case "prefix":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s UpdateCommonAreaOutboundCallingExceptionRuleReqExceptionRuleStatus) Validate() error {
	switch s {
	case "active":
		return nil
	case "inactive":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UpdateCommonAreaSettingReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.DeskPhones {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "desk_phones",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *UpdateCommonAreaSettingReqDeskPhonesItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.HotDesking.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "hot_desking",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *UpdateCommonAreaSettingReqDeskPhonesItemHotDesking) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateCommonAreaSettingReqDeskPhonesItemHotDeskingStatus) Validate() error {
	switch s {
	case "on":
		return nil
	case "off":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UpdateEmergencyAddressOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Level.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "level",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateEmergencyAddressOKLevel) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s UpdateEmergencyAddressOKStatus) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	case 5:
		return nil
	case 6:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UpdateExternalContactReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Email.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    255,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "email",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Name.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    255,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "name",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *UpdateFirmwareRuleReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.RestartType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "restart_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateFirmwareRuleReqRestartType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UpdateGCPReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.DisplayName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    32,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "display_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Description.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    32,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "description",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Delay.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "delay",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayIncomingCallsSound.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "play_incoming_calls_sound",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateGCPReqDelay) Validate() error {
	switch s {
	case 0:
		return nil
	case 5:
		return nil
	case 10:
		return nil
	case 15:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UpdateGCPReqPlayIncomingCallsSound) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.RingTone.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "ring_tone",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Duration.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "duration",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateGCPReqPlayIncomingCallsSoundDuration) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	case 3:
		return nil
	case 5:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s UpdateGCPReqPlayIncomingCallsSoundRingTone) Validate() error {
	switch s {
	case "ringtone_1":
		return nil
	case "ringtone_2":
		return nil
	case "ringtone_3":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UpdateMonitoringGroupReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.MonitoringPrivileges {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "monitoring_privileges",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateMonitoringGroupReqMonitoringPrivilegesItem) Validate() error {
	switch s {
	case "listen":
		return nil
	case "whisper":
		return nil
	case "barge":
		return nil
	case "take_over":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UpdateProvisionTemplateReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Name.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    128,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Description.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    255,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "description",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *UpdateRecordingStatusReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Action.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "action",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateRecordingStatusReqAction) Validate() error {
	switch s {
	case "recover":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UpdateRoutingRuleReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateRoutingRuleReqType) Validate() error {
	switch s {
	case "other_sites":
		return nil
	case "pstn":
		return nil
	case "sip_group":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UpdateSettingTemplateReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Policy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "policy",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.UserSettings.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "user_settings",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *UpdateSettingTemplateReqPolicy) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.AutoCallRecording.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "auto_call_recording",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallForwarding.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_forwarding",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallOverflow.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_overflow",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *UpdateSettingTemplateReqPolicyAutoCallRecording) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.RecordingCalls.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "recording_calls",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateSettingTemplateReqPolicyAutoCallRecordingRecordingCalls) Validate() error {
	switch s {
	case "inbound":
		return nil
	case "outbound":
		return nil
	case "both":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UpdateSettingTemplateReqPolicyCallForwarding) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CallForwardingType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_forwarding_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateSettingTemplateReqPolicyCallForwardingCallForwardingType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UpdateSettingTemplateReqPolicyCallOverflow) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CallOverflowType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_overflow_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateSettingTemplateReqPolicyCallOverflowCallOverflowType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UpdateSettingTemplateReqUserSettings) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CallHandling.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_handling",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.HoldMusic.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "hold_music",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *UpdateSettingTemplateReqUserSettingsCallHandling) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.BusinessHours.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "business_hours",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CloseHours.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "close_hours",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHours) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.BusinessHourAction.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "business_hour_action",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BusyAction.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "busy_action",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.CustomHours {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "custom_hours",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RingingDuration.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "ringing_duration",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursBusinessHourAction) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	case 9:
		return nil
	case 11:
		return nil
	case 26:
		return nil
	case 50:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursBusyAction) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	case 11:
		return nil
	case 12:
		return nil
	case 13:
		return nil
	case 26:
		return nil
	case 50:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursCustomHoursItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Weekday.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "weekday",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursCustomHoursItemType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursCustomHoursItemWeekday) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	case 5:
		return nil
	case 6:
		return nil
	case 7:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursRingingDuration) Validate() error {
	switch s {
	case "10":
		return nil
	case "15":
		return nil
	case "20":
		return nil
	case "25":
		return nil
	case "30":
		return nil
	case "35":
		return nil
	case "40":
		return nil
	case "45":
		return nil
	case "50":
		return nil
	case "55":
		return nil
	case "60":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UpdateSettingTemplateReqUserSettingsCallHandlingCloseHours) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CloseHourAction.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "close_hour_action",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BusyAction.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "busy_action",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MaxWaitTime.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "max_wait_time",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursBusyAction) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	case 11:
		return nil
	case 12:
		return nil
	case 13:
		return nil
	case 26:
		return nil
	case 50:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s UpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursCloseHourAction) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	case 9:
		return nil
	case 11:
		return nil
	case 26:
		return nil
	case 50:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s UpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursMaxWaitTime) Validate() error {
	switch s {
	case "10":
		return nil
	case "15":
		return nil
	case "20":
		return nil
	case "25":
		return nil
	case "30":
		return nil
	case "35":
		return nil
	case "40":
		return nil
	case "45":
		return nil
	case "50":
		return nil
	case "55":
		return nil
	case "60":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s UpdateSettingTemplateReqUserSettingsHoldMusic) Validate() error {
	switch s {
	case "default":
		return nil
	case "disable":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UpdateSiteDetailsReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.DefaultEmergencyAddress.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "default_emergency_address",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Policy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "policy",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *UpdateSiteDetailsReqDefaultEmergencyAddress) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    2,
			MinLengthSet: true,
			MaxLength:    2,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.Country)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "country",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *UpdateSiteDetailsReqPolicy) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.AdHocCallRecording.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "ad_hoc_call_recording",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AutoCallRecording.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "auto_call_recording",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallHandlingForwardingToOtherUsers.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_handling_forwarding_to_other_users",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AutoDeleteDataAfterRetentionDuration.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "auto_delete_data_after_retention_duration",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallPark.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_park",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallOverflow.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_overflow",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallTransferring.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_transferring",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BlockExternalCalls.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "block_external_calls",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *UpdateSiteDetailsReqPolicyAdHocCallRecording) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.PlayRecordingBeepTone.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "play_recording_beep_tone",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *UpdateSiteDetailsReqPolicyAdHocCallRecordingPlayRecordingBeepTone) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.PlayBeepVolume.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "play_beep_volume",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayBeepTimeInterval.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "play_beep_time_interval",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayBeepMember.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "play_beep_member",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateSiteDetailsReqPolicyAdHocCallRecordingPlayRecordingBeepTonePlayBeepMember) Validate() error {
	switch s {
	case "allMember":
		return nil
	case "recordingSide":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s UpdateSiteDetailsReqPolicyAdHocCallRecordingPlayRecordingBeepTonePlayBeepTimeInterval) Validate() error {
	switch s {
	case 5:
		return nil
	case 10:
		return nil
	case 15:
		return nil
	case 20:
		return nil
	case 25:
		return nil
	case 30:
		return nil
	case 60:
		return nil
	case 120:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s UpdateSiteDetailsReqPolicyAdHocCallRecordingPlayRecordingBeepTonePlayBeepVolume) Validate() error {
	switch s {
	case 0:
		return nil
	case 20:
		return nil
	case 40:
		return nil
	case 60:
		return nil
	case 80:
		return nil
	case 100:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UpdateSiteDetailsReqPolicyAutoCallRecording) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.RecordingCalls.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "recording_calls",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayRecordingBeepTone.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "play_recording_beep_tone",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *UpdateSiteDetailsReqPolicyAutoCallRecordingPlayRecordingBeepTone) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.PlayBeepVolume.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "play_beep_volume",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayBeepTimeInterval.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "play_beep_time_interval",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayBeepMember.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "play_beep_member",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateSiteDetailsReqPolicyAutoCallRecordingPlayRecordingBeepTonePlayBeepMember) Validate() error {
	switch s {
	case "allMember":
		return nil
	case "recordingSide":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s UpdateSiteDetailsReqPolicyAutoCallRecordingPlayRecordingBeepTonePlayBeepTimeInterval) Validate() error {
	switch s {
	case 5:
		return nil
	case 10:
		return nil
	case 15:
		return nil
	case 20:
		return nil
	case 25:
		return nil
	case 30:
		return nil
	case 60:
		return nil
	case 120:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s UpdateSiteDetailsReqPolicyAutoCallRecordingPlayRecordingBeepTonePlayBeepVolume) Validate() error {
	switch s {
	case 0:
		return nil
	case 20:
		return nil
	case 40:
		return nil
	case 60:
		return nil
	case 80:
		return nil
	case 100:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s UpdateSiteDetailsReqPolicyAutoCallRecordingRecordingCalls) Validate() error {
	switch s {
	case "inbound":
		return nil
	case "outbound":
		return nil
	case "both":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UpdateSiteDetailsReqPolicyAutoDeleteDataAfterRetentionDuration) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DeleteType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "delete_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateSiteDetailsReqPolicyAutoDeleteDataAfterRetentionDurationDeleteType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UpdateSiteDetailsReqPolicyAutoDeleteDataAfterRetentionDurationItemsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.TimeUnit.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "time_unit",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateSiteDetailsReqPolicyAutoDeleteDataAfterRetentionDurationItemsItemTimeUnit) Validate() error {
	switch s {
	case "year":
		return nil
	case "month":
		return nil
	case "day":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s UpdateSiteDetailsReqPolicyAutoDeleteDataAfterRetentionDurationItemsItemType) Validate() error {
	switch s {
	case "callLog":
		return nil
	case "onDemandRecording":
		return nil
	case "automaticRecording":
		return nil
	case "voicemail":
		return nil
	case "videomail":
		return nil
	case "sms":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UpdateSiteDetailsReqPolicyBlockExternalCalls) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.BlockCallAction.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "block_call_action",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BlockCallChangeType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "block_call_change_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.E2eEncryption.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "e2e_encryption",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateSiteDetailsReqPolicyBlockExternalCallsBlockCallAction) Validate() error {
	switch s {
	case 0:
		return nil
	case 9:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s UpdateSiteDetailsReqPolicyBlockExternalCallsBlockCallChangeType) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UpdateSiteDetailsReqPolicyBlockExternalCallsE2eEncryption) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.LockedBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locked_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateSiteDetailsReqPolicyBlockExternalCallsE2eEncryptionLockedBy) Validate() error {
	switch s {
	case "invalid":
		return nil
	case "account":
		return nil
	case "site":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UpdateSiteDetailsReqPolicyCallHandlingForwardingToOtherUsers) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CallForwardingType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_forwarding_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateSiteDetailsReqPolicyCallHandlingForwardingToOtherUsersCallForwardingType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UpdateSiteDetailsReqPolicyCallOverflow) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CallOverflowType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_overflow_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateSiteDetailsReqPolicyCallOverflowCallOverflowType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UpdateSiteDetailsReqPolicyCallPark) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ExpirationPeriod.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "expiration_period",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Sequence.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sequence",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateSiteDetailsReqPolicyCallParkExpirationPeriod) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	case 5:
		return nil
	case 6:
		return nil
	case 7:
		return nil
	case 8:
		return nil
	case 9:
		return nil
	case 10:
		return nil
	case 15:
		return nil
	case 20:
		return nil
	case 25:
		return nil
	case 30:
		return nil
	case 35:
		return nil
	case 40:
		return nil
	case 45:
		return nil
	case 50:
		return nil
	case 55:
		return nil
	case 60:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s UpdateSiteDetailsReqPolicyCallParkSequence) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UpdateSiteDetailsReqPolicyCallTransferring) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CallTransferringType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_transferring_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateSiteDetailsReqPolicyCallTransferringCallTransferringType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UpdateSiteForUnassignedPhoneNumbersReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Array{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    20,
			MaxLengthSet: true,
		}).ValidateLength(len(s.PhoneNumbers)); err != nil {
			return errors.Wrap(err, "array")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "phone_numbers",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *UpdateSiteOutboundCallingCountriesOrRegionsReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.CountryRegions {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "country_regions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *UpdateSiteOutboundCallingCountriesOrRegionsReqCountryRegionsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Rule.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "rule",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateSiteOutboundCallingCountriesOrRegionsReqCountryRegionsItemRule) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UpdateSiteOutboundCallingExceptionRuleReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ExceptionRule.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "exception_rule",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *UpdateSiteOutboundCallingExceptionRuleReqExceptionRule) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.MatchType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "match_type",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    50,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.PrefixNumber)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "prefix_number",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Comment.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    255,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "comment",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Status.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateSiteOutboundCallingExceptionRuleReqExceptionRuleMatchType) Validate() error {
	switch s {
	case "phoneNumber":
		return nil
	case "prefix":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s UpdateSiteOutboundCallingExceptionRuleReqExceptionRuleStatus) Validate() error {
	switch s {
	case "active":
		return nil
	case "inactive":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UpdateSiteSettingReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.BusinessHours.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "business_hours",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DialByName.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "dial_by_name",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *UpdateSiteSettingReqBusinessHours) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CustomHourType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "custom_hour_type",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.CustomHours {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "custom_hours",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateSiteSettingReqBusinessHoursCustomHourType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UpdateSiteSettingReqBusinessHoursCustomHoursItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Weekday.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "weekday",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateSiteSettingReqBusinessHoursCustomHoursItemType) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s UpdateSiteSettingReqBusinessHoursCustomHoursItemWeekday) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	case 5:
		return nil
	case 6:
		return nil
	case 7:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UpdateSiteSettingReqDialByName) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Rule.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "rule",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateSiteSettingReqDialByNameRule) Validate() error {
	switch s {
	case "first_name":
		return nil
	case "last_name":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s UpdateSiteSettingSettingType) Validate() error {
	switch s {
	case "local_based_routing":
		return nil
	case "business_hours":
		return nil
	case "closed_hours":
		return nil
	case "holiday_hours":
		return nil
	case "outbound_caller_id":
		return nil
	case "audio_prompt":
		return nil
	case "desk_phone":
		return nil
	case "dial_by_name":
		return nil
	case "billing_account":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UpdateUserOutboundCallingCountriesOrRegionsReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.CountryRegions {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "country_regions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *UpdateUserOutboundCallingCountriesOrRegionsReqCountryRegionsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Rule.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "rule",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateUserOutboundCallingCountriesOrRegionsReqCountryRegionsItemRule) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UpdateUserOutboundCallingExceptionRuleReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ExceptionRule.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "exception_rule",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *UpdateUserOutboundCallingExceptionRuleReqExceptionRule) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.MatchType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "match_type",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    50,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.PrefixNumber)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "prefix_number",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Comment.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    255,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "comment",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Status.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateUserOutboundCallingExceptionRuleReqExceptionRuleMatchType) Validate() error {
	switch s {
	case "phoneNumber":
		return nil
	case "prefix":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s UpdateUserOutboundCallingExceptionRuleReqExceptionRuleStatus) Validate() error {
	switch s {
	case "active":
		return nil
	case "inactive":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UpdateUserProfileReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Policy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "policy",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *UpdateUserProfileReqPolicy) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.AdHocCallRecording.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "ad_hoc_call_recording",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AutoCallRecording.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "auto_call_recording",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallOverflow.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_overflow",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallPark.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_park",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallTransferring.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_transferring",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CallHandlingForwardingToOtherUsers.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_handling_forwarding_to_other_users",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *UpdateUserProfileReqPolicyAdHocCallRecording) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.PlayRecordingBeepTone.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "play_recording_beep_tone",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *UpdateUserProfileReqPolicyAdHocCallRecordingPlayRecordingBeepTone) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.PlayBeepVolume.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "play_beep_volume",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayBeepTimeInterval.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "play_beep_time_interval",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayBeepMember.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "play_beep_member",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateUserProfileReqPolicyAdHocCallRecordingPlayRecordingBeepTonePlayBeepMember) Validate() error {
	switch s {
	case "allMember":
		return nil
	case "recordingSide":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s UpdateUserProfileReqPolicyAdHocCallRecordingPlayRecordingBeepTonePlayBeepTimeInterval) Validate() error {
	switch s {
	case 5:
		return nil
	case 10:
		return nil
	case 15:
		return nil
	case 20:
		return nil
	case 25:
		return nil
	case 30:
		return nil
	case 60:
		return nil
	case 120:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s UpdateUserProfileReqPolicyAdHocCallRecordingPlayRecordingBeepTonePlayBeepVolume) Validate() error {
	switch s {
	case 0:
		return nil
	case 20:
		return nil
	case 40:
		return nil
	case 60:
		return nil
	case 80:
		return nil
	case 100:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UpdateUserProfileReqPolicyAutoCallRecording) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.RecordingCalls.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "recording_calls",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayRecordingBeepTone.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "play_recording_beep_tone",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *UpdateUserProfileReqPolicyAutoCallRecordingPlayRecordingBeepTone) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.PlayBeepVolume.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "play_beep_volume",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayBeepTimeInterval.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "play_beep_time_interval",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayBeepMember.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "play_beep_member",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateUserProfileReqPolicyAutoCallRecordingPlayRecordingBeepTonePlayBeepMember) Validate() error {
	switch s {
	case "allMember":
		return nil
	case "recordingSide":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s UpdateUserProfileReqPolicyAutoCallRecordingPlayRecordingBeepTonePlayBeepTimeInterval) Validate() error {
	switch s {
	case 5:
		return nil
	case 10:
		return nil
	case 15:
		return nil
	case 20:
		return nil
	case 25:
		return nil
	case 30:
		return nil
	case 60:
		return nil
	case 120:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s UpdateUserProfileReqPolicyAutoCallRecordingPlayRecordingBeepTonePlayBeepVolume) Validate() error {
	switch s {
	case 0:
		return nil
	case 20:
		return nil
	case 40:
		return nil
	case 60:
		return nil
	case 80:
		return nil
	case 100:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s UpdateUserProfileReqPolicyAutoCallRecordingRecordingCalls) Validate() error {
	switch s {
	case "inbound":
		return nil
	case "outbound":
		return nil
	case "both":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UpdateUserProfileReqPolicyCallHandlingForwardingToOtherUsers) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CallForwardingType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_forwarding_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateUserProfileReqPolicyCallHandlingForwardingToOtherUsersCallForwardingType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UpdateUserProfileReqPolicyCallOverflow) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CallOverflowType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_overflow_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateUserProfileReqPolicyCallOverflowCallOverflowType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UpdateUserProfileReqPolicyCallPark) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ExpirationPeriod.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "expiration_period",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateUserProfileReqPolicyCallParkExpirationPeriod) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	case 5:
		return nil
	case 6:
		return nil
	case 7:
		return nil
	case 8:
		return nil
	case 9:
		return nil
	case 10:
		return nil
	case 15:
		return nil
	case 20:
		return nil
	case 25:
		return nil
	case 30:
		return nil
	case 35:
		return nil
	case 40:
		return nil
	case 45:
		return nil
	case 50:
		return nil
	case 55:
		return nil
	case 60:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UpdateUserProfileReqPolicyCallTransferring) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CallTransferringType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_transferring_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateUserProfileReqPolicyCallTransferringCallTransferringType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UpdateUserSettingReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Delegation.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "delegation",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DeskPhone.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "desk_phone",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *UpdateUserSettingReqDelegation) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Privileges {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "privileges",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateUserSettingReqDelegationPrivilegesItem) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UpdateUserSettingReqDeskPhone) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Devices {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "devices",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *UpdateUserSettingReqDeskPhoneDevicesItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Policy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "policy",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *UpdateUserSettingReqDeskPhoneDevicesItemPolicy) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CallControl.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "call_control",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.HotDesking.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "hot_desking",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *UpdateUserSettingReqDeskPhoneDevicesItemPolicyCallControl) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateUserSettingReqDeskPhoneDevicesItemPolicyCallControlStatus) Validate() error {
	switch s {
	case "on":
		return nil
	case "off":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UpdateUserSettingReqDeskPhoneDevicesItemPolicyHotDesking) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateUserSettingReqDeskPhoneDevicesItemPolicyHotDeskingStatus) Validate() error {
	switch s {
	case "on":
		return nil
	case "off":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UpdateUsersPropertiesInBatchReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.BatchType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "batch_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateUsersPropertiesInBatchReqBatchType) Validate() error {
	switch s {
	case "move_site":
		return nil
	case "assign_pending_user":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s UpdateVoicemailReadStatusReadStatus) Validate() error {
	switch s {
	case "Read":
		return nil
	case "Unread":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s UserSmsSessionFilterType) Validate() error {
	switch s {
	case "sent_message_time":
		return nil
	case "received_message_time":
		return nil
	case "last_message_time":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UserSmsSessionOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.SMSSessions {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sms_sessions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *UserSmsSessionOKSMSSessionsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Participants {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "participants",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *UserSmsSessionOKSMSSessionsItemParticipantsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Owner.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "owner",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *UserSmsSessionOKSMSSessionsItemParticipantsItemOwner) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UserSmsSessionOKSMSSessionsItemParticipantsItemOwnerType) Validate() error {
	switch s {
	case "user":
		return nil
	case "callQueue":
		return nil
	case "autoReceptionist":
		return nil
	case "sharedLineGroup":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

// Code generated by ogen, DO NOT EDIT.

package zoomphone

import (
	"math/bits"
	"strconv"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"

	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/validate"
)

// Encode implements json.Marshaler.
func (s *AccountCallHistoryOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AccountCallHistoryOK) encodeFields(e *jx.Encoder) {
	{
		if s.CallLogs != nil {
			e.FieldStart("call_logs")
			e.ArrStart()
			for _, elem := range s.CallLogs {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.From.Set {
			e.FieldStart("from")
			s.From.Encode(e)
		}
	}
	{
		if s.To.Set {
			e.FieldStart("to")
			s.To.Encode(e)
		}
	}
	{
		if s.PageCount.Set {
			e.FieldStart("page_count")
			s.PageCount.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
	{
		if s.TotalRecords.Set {
			e.FieldStart("total_records")
			s.TotalRecords.Encode(e)
		}
	}
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
}

var jsonFieldsNameOfAccountCallHistoryOK = [7]string{
	0: "call_logs",
	1: "from",
	2: "to",
	3: "page_count",
	4: "page_size",
	5: "total_records",
	6: "next_page_token",
}

// Decode decodes AccountCallHistoryOK from json.
func (s *AccountCallHistoryOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountCallHistoryOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "call_logs":
			if err := func() error {
				s.CallLogs = make([]AccountCallHistoryOKCallLogsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AccountCallHistoryOKCallLogsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CallLogs = append(s.CallLogs, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_logs\"")
			}
		case "from":
			if err := func() error {
				s.From.Reset()
				if err := s.From.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"from\"")
			}
		case "to":
			if err := func() error {
				s.To.Reset()
				if err := s.To.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"to\"")
			}
		case "page_count":
			if err := func() error {
				s.PageCount.Reset()
				if err := s.PageCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_count\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		case "total_records":
			if err := func() error {
				s.TotalRecords.Reset()
				if err := s.TotalRecords.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_records\"")
			}
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AccountCallHistoryOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AccountCallHistoryOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountCallHistoryOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AccountCallHistoryOKCallLogsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AccountCallHistoryOKCallLogsItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.CallID.Set {
			e.FieldStart("call_id")
			s.CallID.Encode(e)
		}
	}
	{
		if s.Direction.Set {
			e.FieldStart("direction")
			s.Direction.Encode(e)
		}
	}
	{
		if s.International.Set {
			e.FieldStart("international")
			s.International.Encode(e)
		}
	}
	{
		if s.StartTime.Set {
			e.FieldStart("start_time")
			s.StartTime.Encode(e)
		}
	}
	{
		if s.AnswerTime.Set {
			e.FieldStart("answer_time")
			s.AnswerTime.Encode(e)
		}
	}
	{
		if s.EndTime.Set {
			e.FieldStart("end_time")
			s.EndTime.Encode(e)
		}
	}
	{
		if s.Duration.Set {
			e.FieldStart("duration")
			s.Duration.Encode(e)
		}
	}
	{
		if s.ConnectType.Set {
			e.FieldStart("connect_type")
			s.ConnectType.Encode(e)
		}
	}
	{
		if s.SbcID.Set {
			e.FieldStart("sbc_id")
			s.SbcID.Encode(e)
		}
	}
	{
		if s.SbcName.Set {
			e.FieldStart("sbc_name")
			s.SbcName.Encode(e)
		}
	}
	{
		if s.SipGroupID.Set {
			e.FieldStart("sip_group_id")
			s.SipGroupID.Encode(e)
		}
	}
	{
		if s.SipGroupName.Set {
			e.FieldStart("sip_group_name")
			s.SipGroupName.Encode(e)
		}
	}
	{
		if s.CallType.Set {
			e.FieldStart("call_type")
			s.CallType.Encode(e)
		}
	}
	{
		if s.CallResult.Set {
			e.FieldStart("call_result")
			s.CallResult.Encode(e)
		}
	}
	{
		if s.CallerExtID.Set {
			e.FieldStart("caller_ext_id")
			s.CallerExtID.Encode(e)
		}
	}
	{
		if s.CallerDidNumber.Set {
			e.FieldStart("caller_did_number")
			s.CallerDidNumber.Encode(e)
		}
	}
	{
		if s.CallerExtNumber.Set {
			e.FieldStart("caller_ext_number")
			s.CallerExtNumber.Encode(e)
		}
	}
	{
		if s.CallerName.Set {
			e.FieldStart("caller_name")
			s.CallerName.Encode(e)
		}
	}
	{
		if s.CallerEmail.Set {
			e.FieldStart("caller_email")
			s.CallerEmail.Encode(e)
		}
	}
	{
		if s.CallerExtType.Set {
			e.FieldStart("caller_ext_type")
			s.CallerExtType.Encode(e)
		}
	}
	{
		if s.CallerNumberType.Set {
			e.FieldStart("caller_number_type")
			s.CallerNumberType.Encode(e)
		}
	}
	{
		if s.CallerDeviceType.Set {
			e.FieldStart("caller_device_type")
			s.CallerDeviceType.Encode(e)
		}
	}
	{
		if s.CallerCountryIsoCode.Set {
			e.FieldStart("caller_country_iso_code")
			s.CallerCountryIsoCode.Encode(e)
		}
	}
	{
		if s.CallerCountryCode.Set {
			e.FieldStart("caller_country_code")
			s.CallerCountryCode.Encode(e)
		}
	}
	{
		if s.CalleeExtID.Set {
			e.FieldStart("callee_ext_id")
			s.CalleeExtID.Encode(e)
		}
	}
	{
		if s.CalleeDidNumber.Set {
			e.FieldStart("callee_did_number")
			s.CalleeDidNumber.Encode(e)
		}
	}
	{
		if s.CalleeExtNumber.Set {
			e.FieldStart("callee_ext_number")
			s.CalleeExtNumber.Encode(e)
		}
	}
	{
		if s.CalleeName.Set {
			e.FieldStart("callee_name")
			s.CalleeName.Encode(e)
		}
	}
	{
		if s.CalleeEmail.Set {
			e.FieldStart("callee_email")
			s.CalleeEmail.Encode(e)
		}
	}
	{
		if s.CalleeExtType.Set {
			e.FieldStart("callee_ext_type")
			s.CalleeExtType.Encode(e)
		}
	}
	{
		if s.CalleeNumberType.Set {
			e.FieldStart("callee_number_type")
			s.CalleeNumberType.Encode(e)
		}
	}
	{
		if s.CalleeDeviceType.Set {
			e.FieldStart("callee_device_type")
			s.CalleeDeviceType.Encode(e)
		}
	}
	{
		if s.CalleeCountryIsoCode.Set {
			e.FieldStart("callee_country_iso_code")
			s.CalleeCountryIsoCode.Encode(e)
		}
	}
	{
		if s.CalleeCountryCode.Set {
			e.FieldStart("callee_country_code")
			s.CalleeCountryCode.Encode(e)
		}
	}
	{
		if s.ClientCode.Set {
			e.FieldStart("client_code")
			s.ClientCode.Encode(e)
		}
	}
	{
		if s.Department.Set {
			e.FieldStart("department")
			s.Department.Encode(e)
		}
	}
	{
		if s.CostCenter.Set {
			e.FieldStart("cost_center")
			s.CostCenter.Encode(e)
		}
	}
	{
		if s.SiteID.Set {
			e.FieldStart("site_id")
			s.SiteID.Encode(e)
		}
	}
	{
		if s.GroupID.Set {
			e.FieldStart("group_id")
			s.GroupID.Encode(e)
		}
	}
	{
		if s.SiteName.Set {
			e.FieldStart("site_name")
			s.SiteName.Encode(e)
		}
	}
	{
		if s.Spam.Set {
			e.FieldStart("spam")
			s.Spam.Encode(e)
		}
	}
	{
		if s.RecordingStatus.Set {
			e.FieldStart("recording_status")
			s.RecordingStatus.Encode(e)
		}
	}
}

var jsonFieldsNameOfAccountCallHistoryOKCallLogsItem = [43]string{
	0:  "id",
	1:  "call_id",
	2:  "direction",
	3:  "international",
	4:  "start_time",
	5:  "answer_time",
	6:  "end_time",
	7:  "duration",
	8:  "connect_type",
	9:  "sbc_id",
	10: "sbc_name",
	11: "sip_group_id",
	12: "sip_group_name",
	13: "call_type",
	14: "call_result",
	15: "caller_ext_id",
	16: "caller_did_number",
	17: "caller_ext_number",
	18: "caller_name",
	19: "caller_email",
	20: "caller_ext_type",
	21: "caller_number_type",
	22: "caller_device_type",
	23: "caller_country_iso_code",
	24: "caller_country_code",
	25: "callee_ext_id",
	26: "callee_did_number",
	27: "callee_ext_number",
	28: "callee_name",
	29: "callee_email",
	30: "callee_ext_type",
	31: "callee_number_type",
	32: "callee_device_type",
	33: "callee_country_iso_code",
	34: "callee_country_code",
	35: "client_code",
	36: "department",
	37: "cost_center",
	38: "site_id",
	39: "group_id",
	40: "site_name",
	41: "spam",
	42: "recording_status",
}

// Decode decodes AccountCallHistoryOKCallLogsItem from json.
func (s *AccountCallHistoryOKCallLogsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountCallHistoryOKCallLogsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "call_id":
			if err := func() error {
				s.CallID.Reset()
				if err := s.CallID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_id\"")
			}
		case "direction":
			if err := func() error {
				s.Direction.Reset()
				if err := s.Direction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"direction\"")
			}
		case "international":
			if err := func() error {
				s.International.Reset()
				if err := s.International.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"international\"")
			}
		case "start_time":
			if err := func() error {
				s.StartTime.Reset()
				if err := s.StartTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"start_time\"")
			}
		case "answer_time":
			if err := func() error {
				s.AnswerTime.Reset()
				if err := s.AnswerTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"answer_time\"")
			}
		case "end_time":
			if err := func() error {
				s.EndTime.Reset()
				if err := s.EndTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"end_time\"")
			}
		case "duration":
			if err := func() error {
				s.Duration.Reset()
				if err := s.Duration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"duration\"")
			}
		case "connect_type":
			if err := func() error {
				s.ConnectType.Reset()
				if err := s.ConnectType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"connect_type\"")
			}
		case "sbc_id":
			if err := func() error {
				s.SbcID.Reset()
				if err := s.SbcID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sbc_id\"")
			}
		case "sbc_name":
			if err := func() error {
				s.SbcName.Reset()
				if err := s.SbcName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sbc_name\"")
			}
		case "sip_group_id":
			if err := func() error {
				s.SipGroupID.Reset()
				if err := s.SipGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sip_group_id\"")
			}
		case "sip_group_name":
			if err := func() error {
				s.SipGroupName.Reset()
				if err := s.SipGroupName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sip_group_name\"")
			}
		case "call_type":
			if err := func() error {
				s.CallType.Reset()
				if err := s.CallType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_type\"")
			}
		case "call_result":
			if err := func() error {
				s.CallResult.Reset()
				if err := s.CallResult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_result\"")
			}
		case "caller_ext_id":
			if err := func() error {
				s.CallerExtID.Reset()
				if err := s.CallerExtID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_ext_id\"")
			}
		case "caller_did_number":
			if err := func() error {
				s.CallerDidNumber.Reset()
				if err := s.CallerDidNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_did_number\"")
			}
		case "caller_ext_number":
			if err := func() error {
				s.CallerExtNumber.Reset()
				if err := s.CallerExtNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_ext_number\"")
			}
		case "caller_name":
			if err := func() error {
				s.CallerName.Reset()
				if err := s.CallerName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_name\"")
			}
		case "caller_email":
			if err := func() error {
				s.CallerEmail.Reset()
				if err := s.CallerEmail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_email\"")
			}
		case "caller_ext_type":
			if err := func() error {
				s.CallerExtType.Reset()
				if err := s.CallerExtType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_ext_type\"")
			}
		case "caller_number_type":
			if err := func() error {
				s.CallerNumberType.Reset()
				if err := s.CallerNumberType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_number_type\"")
			}
		case "caller_device_type":
			if err := func() error {
				s.CallerDeviceType.Reset()
				if err := s.CallerDeviceType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_device_type\"")
			}
		case "caller_country_iso_code":
			if err := func() error {
				s.CallerCountryIsoCode.Reset()
				if err := s.CallerCountryIsoCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_country_iso_code\"")
			}
		case "caller_country_code":
			if err := func() error {
				s.CallerCountryCode.Reset()
				if err := s.CallerCountryCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_country_code\"")
			}
		case "callee_ext_id":
			if err := func() error {
				s.CalleeExtID.Reset()
				if err := s.CalleeExtID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_ext_id\"")
			}
		case "callee_did_number":
			if err := func() error {
				s.CalleeDidNumber.Reset()
				if err := s.CalleeDidNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_did_number\"")
			}
		case "callee_ext_number":
			if err := func() error {
				s.CalleeExtNumber.Reset()
				if err := s.CalleeExtNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_ext_number\"")
			}
		case "callee_name":
			if err := func() error {
				s.CalleeName.Reset()
				if err := s.CalleeName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_name\"")
			}
		case "callee_email":
			if err := func() error {
				s.CalleeEmail.Reset()
				if err := s.CalleeEmail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_email\"")
			}
		case "callee_ext_type":
			if err := func() error {
				s.CalleeExtType.Reset()
				if err := s.CalleeExtType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_ext_type\"")
			}
		case "callee_number_type":
			if err := func() error {
				s.CalleeNumberType.Reset()
				if err := s.CalleeNumberType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_number_type\"")
			}
		case "callee_device_type":
			if err := func() error {
				s.CalleeDeviceType.Reset()
				if err := s.CalleeDeviceType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_device_type\"")
			}
		case "callee_country_iso_code":
			if err := func() error {
				s.CalleeCountryIsoCode.Reset()
				if err := s.CalleeCountryIsoCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_country_iso_code\"")
			}
		case "callee_country_code":
			if err := func() error {
				s.CalleeCountryCode.Reset()
				if err := s.CalleeCountryCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_country_code\"")
			}
		case "client_code":
			if err := func() error {
				s.ClientCode.Reset()
				if err := s.ClientCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_code\"")
			}
		case "department":
			if err := func() error {
				s.Department.Reset()
				if err := s.Department.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"department\"")
			}
		case "cost_center":
			if err := func() error {
				s.CostCenter.Reset()
				if err := s.CostCenter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cost_center\"")
			}
		case "site_id":
			if err := func() error {
				s.SiteID.Reset()
				if err := s.SiteID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_id\"")
			}
		case "group_id":
			if err := func() error {
				s.GroupID.Reset()
				if err := s.GroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"group_id\"")
			}
		case "site_name":
			if err := func() error {
				s.SiteName.Reset()
				if err := s.SiteName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_name\"")
			}
		case "spam":
			if err := func() error {
				s.Spam.Reset()
				if err := s.Spam.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"spam\"")
			}
		case "recording_status":
			if err := func() error {
				s.RecordingStatus.Reset()
				if err := s.RecordingStatus.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AccountCallHistoryOKCallLogsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AccountCallHistoryOKCallLogsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountCallHistoryOKCallLogsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AccountCallLogsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AccountCallLogsOK) encodeFields(e *jx.Encoder) {
	{
		if s.CallLogs != nil {
			e.FieldStart("call_logs")
			e.ArrStart()
			for _, elem := range s.CallLogs {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.From.Set {
			e.FieldStart("from")
			s.From.Encode(e)
		}
	}
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageCount.Set {
			e.FieldStart("page_count")
			s.PageCount.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
	{
		if s.To.Set {
			e.FieldStart("to")
			s.To.Encode(e)
		}
	}
	{
		if s.TotalRecords.Set {
			e.FieldStart("total_records")
			s.TotalRecords.Encode(e)
		}
	}
}

var jsonFieldsNameOfAccountCallLogsOK = [7]string{
	0: "call_logs",
	1: "from",
	2: "next_page_token",
	3: "page_count",
	4: "page_size",
	5: "to",
	6: "total_records",
}

// Decode decodes AccountCallLogsOK from json.
func (s *AccountCallLogsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountCallLogsOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "call_logs":
			if err := func() error {
				s.CallLogs = make([]AccountCallLogsOKCallLogsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AccountCallLogsOKCallLogsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CallLogs = append(s.CallLogs, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_logs\"")
			}
		case "from":
			if err := func() error {
				s.From.Reset()
				if err := s.From.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"from\"")
			}
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_count":
			if err := func() error {
				s.PageCount.Reset()
				if err := s.PageCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_count\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		case "to":
			if err := func() error {
				s.To.Reset()
				if err := s.To.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"to\"")
			}
		case "total_records":
			if err := func() error {
				s.TotalRecords.Reset()
				if err := s.TotalRecords.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_records\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AccountCallLogsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AccountCallLogsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountCallLogsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AccountCallLogsOKCallLogsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AccountCallLogsOKCallLogsItem) encodeFields(e *jx.Encoder) {
	{
		if s.AnswerStartTime.Set {
			e.FieldStart("answer_start_time")
			s.AnswerStartTime.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.CallEndTime.Set {
			e.FieldStart("call_end_time")
			s.CallEndTime.Encode(e)
		}
	}
	{
		if s.CallID.Set {
			e.FieldStart("call_id")
			s.CallID.Encode(e)
		}
	}
	{
		if s.CallType.Set {
			e.FieldStart("call_type")
			s.CallType.Encode(e)
		}
	}
	{
		if s.CalleeCountryCode.Set {
			e.FieldStart("callee_country_code")
			s.CalleeCountryCode.Encode(e)
		}
	}
	{
		if s.CalleeCountryIsoCode.Set {
			e.FieldStart("callee_country_iso_code")
			s.CalleeCountryIsoCode.Encode(e)
		}
	}
	{
		if s.CalleeDidNumber.Set {
			e.FieldStart("callee_did_number")
			s.CalleeDidNumber.Encode(e)
		}
	}
	{
		if s.CalleeName.Set {
			e.FieldStart("callee_name")
			s.CalleeName.Encode(e)
		}
	}
	{
		if s.CalleeNumber.Set {
			e.FieldStart("callee_number")
			s.CalleeNumber.Encode(e)
		}
	}
	{
		if s.CalleeNumberType.Set {
			e.FieldStart("callee_number_type")
			s.CalleeNumberType.Encode(e)
		}
	}
	{
		if s.CalleeNumberSource.Set {
			e.FieldStart("callee_number_source")
			s.CalleeNumberSource.Encode(e)
		}
	}
	{
		if s.CallerCountryCode.Set {
			e.FieldStart("caller_country_code")
			s.CallerCountryCode.Encode(e)
		}
	}
	{
		if s.CallerCountryIsoCode.Set {
			e.FieldStart("caller_country_iso_code")
			s.CallerCountryIsoCode.Encode(e)
		}
	}
	{
		if s.CallerDidNumber.Set {
			e.FieldStart("caller_did_number")
			s.CallerDidNumber.Encode(e)
		}
	}
	{
		if s.CallerName.Set {
			e.FieldStart("caller_name")
			s.CallerName.Encode(e)
		}
	}
	{
		if s.CallerNumber.Set {
			e.FieldStart("caller_number")
			s.CallerNumber.Encode(e)
		}
	}
	{
		if s.CallerNumberType.Set {
			e.FieldStart("caller_number_type")
			s.CallerNumberType.Encode(e)
		}
	}
	{
		if s.CallerNumberSource.Set {
			e.FieldStart("caller_number_source")
			s.CallerNumberSource.Encode(e)
		}
	}
	{
		if s.CallerBillingReferenceID.Set {
			e.FieldStart("caller_billing_reference_id")
			s.CallerBillingReferenceID.Encode(e)
		}
	}
	{
		if s.Charge.Set {
			e.FieldStart("charge")
			s.Charge.Encode(e)
		}
	}
	{
		if s.ClientCode.Set {
			e.FieldStart("client_code")
			s.ClientCode.Encode(e)
		}
	}
	{
		if s.DateTime.Set {
			e.FieldStart("date_time")
			s.DateTime.Encode(e)
		}
	}
	{
		if s.DevicePrivateIP.Set {
			e.FieldStart("device_private_ip")
			s.DevicePrivateIP.Encode(e)
		}
	}
	{
		if s.DevicePublicIP.Set {
			e.FieldStart("device_public_ip")
			s.DevicePublicIP.Encode(e)
		}
	}
	{
		if s.Direction.Set {
			e.FieldStart("direction")
			s.Direction.Encode(e)
		}
	}
	{
		if s.Duration.Set {
			e.FieldStart("duration")
			s.Duration.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Owner.Set {
			e.FieldStart("owner")
			s.Owner.Encode(e)
		}
	}
	{
		if s.Path.Set {
			e.FieldStart("path")
			s.Path.Encode(e)
		}
	}
	{
		if s.Rate.Set {
			e.FieldStart("rate")
			s.Rate.Encode(e)
		}
	}
	{
		if s.RecordingID.Set {
			e.FieldStart("recording_id")
			s.RecordingID.Encode(e)
		}
	}
	{
		if s.RecordingType.Set {
			e.FieldStart("recording_type")
			s.RecordingType.Encode(e)
		}
	}
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Site.Set {
			e.FieldStart("site")
			s.Site.Encode(e)
		}
	}
	{
		if s.UserID.Set {
			e.FieldStart("user_id")
			s.UserID.Encode(e)
		}
	}
	{
		if s.HoldTime.Set {
			e.FieldStart("hold_time")
			s.HoldTime.Encode(e)
		}
	}
	{
		if s.WaitingTime.Set {
			e.FieldStart("waiting_time")
			s.WaitingTime.Encode(e)
		}
	}
	{
		if s.Department.Set {
			e.FieldStart("department")
			s.Department.Encode(e)
		}
	}
	{
		if s.CostCenter.Set {
			e.FieldStart("cost_center")
			s.CostCenter.Encode(e)
		}
	}
}

var jsonFieldsNameOfAccountCallLogsOKCallLogsItem = [39]string{
	0:  "answer_start_time",
	1:  "call_end_time",
	2:  "call_id",
	3:  "call_type",
	4:  "callee_country_code",
	5:  "callee_country_iso_code",
	6:  "callee_did_number",
	7:  "callee_name",
	8:  "callee_number",
	9:  "callee_number_type",
	10: "callee_number_source",
	11: "caller_country_code",
	12: "caller_country_iso_code",
	13: "caller_did_number",
	14: "caller_name",
	15: "caller_number",
	16: "caller_number_type",
	17: "caller_number_source",
	18: "caller_billing_reference_id",
	19: "charge",
	20: "client_code",
	21: "date_time",
	22: "device_private_ip",
	23: "device_public_ip",
	24: "direction",
	25: "duration",
	26: "id",
	27: "owner",
	28: "path",
	29: "rate",
	30: "recording_id",
	31: "recording_type",
	32: "result",
	33: "site",
	34: "user_id",
	35: "hold_time",
	36: "waiting_time",
	37: "department",
	38: "cost_center",
}

// Decode decodes AccountCallLogsOKCallLogsItem from json.
func (s *AccountCallLogsOKCallLogsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountCallLogsOKCallLogsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "answer_start_time":
			if err := func() error {
				s.AnswerStartTime.Reset()
				if err := s.AnswerStartTime.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"answer_start_time\"")
			}
		case "call_end_time":
			if err := func() error {
				s.CallEndTime.Reset()
				if err := s.CallEndTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_end_time\"")
			}
		case "call_id":
			if err := func() error {
				s.CallID.Reset()
				if err := s.CallID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_id\"")
			}
		case "call_type":
			if err := func() error {
				s.CallType.Reset()
				if err := s.CallType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_type\"")
			}
		case "callee_country_code":
			if err := func() error {
				s.CalleeCountryCode.Reset()
				if err := s.CalleeCountryCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_country_code\"")
			}
		case "callee_country_iso_code":
			if err := func() error {
				s.CalleeCountryIsoCode.Reset()
				if err := s.CalleeCountryIsoCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_country_iso_code\"")
			}
		case "callee_did_number":
			if err := func() error {
				s.CalleeDidNumber.Reset()
				if err := s.CalleeDidNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_did_number\"")
			}
		case "callee_name":
			if err := func() error {
				s.CalleeName.Reset()
				if err := s.CalleeName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_name\"")
			}
		case "callee_number":
			if err := func() error {
				s.CalleeNumber.Reset()
				if err := s.CalleeNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_number\"")
			}
		case "callee_number_type":
			if err := func() error {
				s.CalleeNumberType.Reset()
				if err := s.CalleeNumberType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_number_type\"")
			}
		case "callee_number_source":
			if err := func() error {
				s.CalleeNumberSource.Reset()
				if err := s.CalleeNumberSource.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_number_source\"")
			}
		case "caller_country_code":
			if err := func() error {
				s.CallerCountryCode.Reset()
				if err := s.CallerCountryCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_country_code\"")
			}
		case "caller_country_iso_code":
			if err := func() error {
				s.CallerCountryIsoCode.Reset()
				if err := s.CallerCountryIsoCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_country_iso_code\"")
			}
		case "caller_did_number":
			if err := func() error {
				s.CallerDidNumber.Reset()
				if err := s.CallerDidNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_did_number\"")
			}
		case "caller_name":
			if err := func() error {
				s.CallerName.Reset()
				if err := s.CallerName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_name\"")
			}
		case "caller_number":
			if err := func() error {
				s.CallerNumber.Reset()
				if err := s.CallerNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_number\"")
			}
		case "caller_number_type":
			if err := func() error {
				s.CallerNumberType.Reset()
				if err := s.CallerNumberType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_number_type\"")
			}
		case "caller_number_source":
			if err := func() error {
				s.CallerNumberSource.Reset()
				if err := s.CallerNumberSource.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_number_source\"")
			}
		case "caller_billing_reference_id":
			if err := func() error {
				s.CallerBillingReferenceID.Reset()
				if err := s.CallerBillingReferenceID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_billing_reference_id\"")
			}
		case "charge":
			if err := func() error {
				s.Charge.Reset()
				if err := s.Charge.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"charge\"")
			}
		case "client_code":
			if err := func() error {
				s.ClientCode.Reset()
				if err := s.ClientCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_code\"")
			}
		case "date_time":
			if err := func() error {
				s.DateTime.Reset()
				if err := s.DateTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"date_time\"")
			}
		case "device_private_ip":
			if err := func() error {
				s.DevicePrivateIP.Reset()
				if err := s.DevicePrivateIP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_private_ip\"")
			}
		case "device_public_ip":
			if err := func() error {
				s.DevicePublicIP.Reset()
				if err := s.DevicePublicIP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_public_ip\"")
			}
		case "direction":
			if err := func() error {
				s.Direction.Reset()
				if err := s.Direction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"direction\"")
			}
		case "duration":
			if err := func() error {
				s.Duration.Reset()
				if err := s.Duration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"duration\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "owner":
			if err := func() error {
				s.Owner.Reset()
				if err := s.Owner.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"owner\"")
			}
		case "path":
			if err := func() error {
				s.Path.Reset()
				if err := s.Path.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"path\"")
			}
		case "rate":
			if err := func() error {
				s.Rate.Reset()
				if err := s.Rate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rate\"")
			}
		case "recording_id":
			if err := func() error {
				s.RecordingID.Reset()
				if err := s.RecordingID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_id\"")
			}
		case "recording_type":
			if err := func() error {
				s.RecordingType.Reset()
				if err := s.RecordingType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_type\"")
			}
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "site":
			if err := func() error {
				s.Site.Reset()
				if err := s.Site.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site\"")
			}
		case "user_id":
			if err := func() error {
				s.UserID.Reset()
				if err := s.UserID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"user_id\"")
			}
		case "hold_time":
			if err := func() error {
				s.HoldTime.Reset()
				if err := s.HoldTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hold_time\"")
			}
		case "waiting_time":
			if err := func() error {
				s.WaitingTime.Reset()
				if err := s.WaitingTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"waiting_time\"")
			}
		case "department":
			if err := func() error {
				s.Department.Reset()
				if err := s.Department.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"department\"")
			}
		case "cost_center":
			if err := func() error {
				s.CostCenter.Reset()
				if err := s.CostCenter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cost_center\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AccountCallLogsOKCallLogsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AccountCallLogsOKCallLogsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountCallLogsOKCallLogsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AccountCallLogsOKCallLogsItemOwner) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AccountCallLogsOKCallLogsItemOwner) encodeFields(e *jx.Encoder) {
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfAccountCallLogsOKCallLogsItemOwner = [4]string{
	0: "extension_number",
	1: "id",
	2: "name",
	3: "type",
}

// Decode decodes AccountCallLogsOKCallLogsItemOwner from json.
func (s *AccountCallLogsOKCallLogsItemOwner) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountCallLogsOKCallLogsItemOwner to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AccountCallLogsOKCallLogsItemOwner")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AccountCallLogsOKCallLogsItemOwner) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountCallLogsOKCallLogsItemOwner) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AccountCallLogsOKCallLogsItemSite) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AccountCallLogsOKCallLogsItemSite) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfAccountCallLogsOKCallLogsItemSite = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes AccountCallLogsOKCallLogsItemSite from json.
func (s *AccountCallLogsOKCallLogsItemSite) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountCallLogsOKCallLogsItemSite to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AccountCallLogsOKCallLogsItemSite")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AccountCallLogsOKCallLogsItemSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountCallLogsOKCallLogsItemSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AccountSmsSessionOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AccountSmsSessionOK) encodeFields(e *jx.Encoder) {
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
	{
		if s.SMSSessions != nil {
			e.FieldStart("sms_sessions")
			e.ArrStart()
			for _, elem := range s.SMSSessions {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAccountSmsSessionOK = [3]string{
	0: "next_page_token",
	1: "page_size",
	2: "sms_sessions",
}

// Decode decodes AccountSmsSessionOK from json.
func (s *AccountSmsSessionOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountSmsSessionOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		case "sms_sessions":
			if err := func() error {
				s.SMSSessions = make([]AccountSmsSessionOKSMSSessionsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AccountSmsSessionOKSMSSessionsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.SMSSessions = append(s.SMSSessions, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sms_sessions\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AccountSmsSessionOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AccountSmsSessionOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountSmsSessionOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AccountSmsSessionOKSMSSessionsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AccountSmsSessionOKSMSSessionsItem) encodeFields(e *jx.Encoder) {
	{
		if s.LastAccessTime.Set {
			e.FieldStart("last_access_time")
			s.LastAccessTime.Encode(e)
		}
	}
	{
		if s.Participants != nil {
			e.FieldStart("participants")
			e.ArrStart()
			for _, elem := range s.Participants {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.SessionID.Set {
			e.FieldStart("session_id")
			s.SessionID.Encode(e)
		}
	}
	{
		if s.SessionType.Set {
			e.FieldStart("session_type")
			s.SessionType.Encode(e)
		}
	}
}

var jsonFieldsNameOfAccountSmsSessionOKSMSSessionsItem = [4]string{
	0: "last_access_time",
	1: "participants",
	2: "session_id",
	3: "session_type",
}

// Decode decodes AccountSmsSessionOKSMSSessionsItem from json.
func (s *AccountSmsSessionOKSMSSessionsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountSmsSessionOKSMSSessionsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "last_access_time":
			if err := func() error {
				s.LastAccessTime.Reset()
				if err := s.LastAccessTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"last_access_time\"")
			}
		case "participants":
			if err := func() error {
				s.Participants = make([]AccountSmsSessionOKSMSSessionsItemParticipantsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AccountSmsSessionOKSMSSessionsItemParticipantsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Participants = append(s.Participants, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"participants\"")
			}
		case "session_id":
			if err := func() error {
				s.SessionID.Reset()
				if err := s.SessionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"session_id\"")
			}
		case "session_type":
			if err := func() error {
				s.SessionType.Reset()
				if err := s.SessionType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"session_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AccountSmsSessionOKSMSSessionsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AccountSmsSessionOKSMSSessionsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountSmsSessionOKSMSSessionsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AccountSmsSessionOKSMSSessionsItemParticipantsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AccountSmsSessionOKSMSSessionsItemParticipantsItem) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.Owner.Set {
			e.FieldStart("owner")
			s.Owner.Encode(e)
		}
	}
	{
		if s.PhoneNumber.Set {
			e.FieldStart("phone_number")
			s.PhoneNumber.Encode(e)
		}
	}
	{
		if s.IsSessionOwner.Set {
			e.FieldStart("is_session_owner")
			s.IsSessionOwner.Encode(e)
		}
	}
	{
		if s.ExtensionStatus.Set {
			e.FieldStart("extension_status")
			s.ExtensionStatus.Encode(e)
		}
	}
	{
		if s.ExtensionDeletedTime.Set {
			e.FieldStart("extension_deleted_time")
			s.ExtensionDeletedTime.Encode(e)
		}
	}
}

var jsonFieldsNameOfAccountSmsSessionOKSMSSessionsItemParticipantsItem = [6]string{
	0: "display_name",
	1: "owner",
	2: "phone_number",
	3: "is_session_owner",
	4: "extension_status",
	5: "extension_deleted_time",
}

// Decode decodes AccountSmsSessionOKSMSSessionsItemParticipantsItem from json.
func (s *AccountSmsSessionOKSMSSessionsItemParticipantsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountSmsSessionOKSMSSessionsItemParticipantsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "owner":
			if err := func() error {
				s.Owner.Reset()
				if err := s.Owner.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"owner\"")
			}
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		case "is_session_owner":
			if err := func() error {
				s.IsSessionOwner.Reset()
				if err := s.IsSessionOwner.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"is_session_owner\"")
			}
		case "extension_status":
			if err := func() error {
				s.ExtensionStatus.Reset()
				if err := s.ExtensionStatus.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_status\"")
			}
		case "extension_deleted_time":
			if err := func() error {
				s.ExtensionDeletedTime.Reset()
				if err := s.ExtensionDeletedTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_deleted_time\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AccountSmsSessionOKSMSSessionsItemParticipantsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AccountSmsSessionOKSMSSessionsItemParticipantsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountSmsSessionOKSMSSessionsItemParticipantsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AccountSmsSessionOKSMSSessionsItemParticipantsItemOwner) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AccountSmsSessionOKSMSSessionsItemParticipantsItemOwner) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfAccountSmsSessionOKSMSSessionsItemParticipantsItemOwner = [2]string{
	0: "id",
	1: "type",
}

// Decode decodes AccountSmsSessionOKSMSSessionsItemParticipantsItemOwner from json.
func (s *AccountSmsSessionOKSMSSessionsItemParticipantsItemOwner) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountSmsSessionOKSMSSessionsItemParticipantsItemOwner to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AccountSmsSessionOKSMSSessionsItemParticipantsItemOwner")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AccountSmsSessionOKSMSSessionsItemParticipantsItemOwner) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountSmsSessionOKSMSSessionsItemParticipantsItemOwner) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AccountVoiceMailsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AccountVoiceMailsOK) encodeFields(e *jx.Encoder) {
	{
		if s.From.Set {
			e.FieldStart("from")
			s.From.Encode(e, json.EncodeDate)
		}
	}
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageCount.Set {
			e.FieldStart("page_count")
			s.PageCount.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
	{
		if s.To.Set {
			e.FieldStart("to")
			s.To.Encode(e, json.EncodeDate)
		}
	}
	{
		if s.TotalRecords.Set {
			e.FieldStart("total_records")
			s.TotalRecords.Encode(e)
		}
	}
	{
		if s.VoiceMails != nil {
			e.FieldStart("voice_mails")
			e.ArrStart()
			for _, elem := range s.VoiceMails {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAccountVoiceMailsOK = [7]string{
	0: "from",
	1: "next_page_token",
	2: "page_count",
	3: "page_size",
	4: "to",
	5: "total_records",
	6: "voice_mails",
}

// Decode decodes AccountVoiceMailsOK from json.
func (s *AccountVoiceMailsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountVoiceMailsOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "from":
			if err := func() error {
				s.From.Reset()
				if err := s.From.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"from\"")
			}
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_count":
			if err := func() error {
				s.PageCount.Reset()
				if err := s.PageCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_count\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		case "to":
			if err := func() error {
				s.To.Reset()
				if err := s.To.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"to\"")
			}
		case "total_records":
			if err := func() error {
				s.TotalRecords.Reset()
				if err := s.TotalRecords.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_records\"")
			}
		case "voice_mails":
			if err := func() error {
				s.VoiceMails = make([]AccountVoiceMailsOKVoiceMailsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AccountVoiceMailsOKVoiceMailsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.VoiceMails = append(s.VoiceMails, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voice_mails\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AccountVoiceMailsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AccountVoiceMailsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountVoiceMailsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AccountVoiceMailsOKVoiceMailsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AccountVoiceMailsOKVoiceMailsItem) encodeFields(e *jx.Encoder) {
	{
		if s.CallID.Set {
			e.FieldStart("call_id")
			s.CallID.Encode(e)
		}
	}
	{
		if s.CallLogID.Set {
			e.FieldStart("call_log_id")
			s.CallLogID.Encode(e)
		}
	}
	{
		if s.CalleeName.Set {
			e.FieldStart("callee_name")
			s.CalleeName.Encode(e)
		}
	}
	{
		if s.CalleeNumber.Set {
			e.FieldStart("callee_number")
			s.CalleeNumber.Encode(e)
		}
	}
	{
		if s.CalleeNumberType.Set {
			e.FieldStart("callee_number_type")
			s.CalleeNumberType.Encode(e)
		}
	}
	{
		if s.CallerName.Set {
			e.FieldStart("caller_name")
			s.CallerName.Encode(e)
		}
	}
	{
		if s.CallerNumber.Set {
			e.FieldStart("caller_number")
			s.CallerNumber.Encode(e)
		}
	}
	{
		if s.CallerNumberType.Set {
			e.FieldStart("caller_number_type")
			s.CallerNumberType.Encode(e)
		}
	}
	{
		if s.DateTime.Set {
			e.FieldStart("date_time")
			s.DateTime.Encode(e)
		}
	}
	{
		if s.DownloadURL.Set {
			e.FieldStart("download_url")
			s.DownloadURL.Encode(e)
		}
	}
	{
		if s.Duration.Set {
			e.FieldStart("duration")
			s.Duration.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
}

var jsonFieldsNameOfAccountVoiceMailsOKVoiceMailsItem = [13]string{
	0:  "call_id",
	1:  "call_log_id",
	2:  "callee_name",
	3:  "callee_number",
	4:  "callee_number_type",
	5:  "caller_name",
	6:  "caller_number",
	7:  "caller_number_type",
	8:  "date_time",
	9:  "download_url",
	10: "duration",
	11: "id",
	12: "status",
}

// Decode decodes AccountVoiceMailsOKVoiceMailsItem from json.
func (s *AccountVoiceMailsOKVoiceMailsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountVoiceMailsOKVoiceMailsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "call_id":
			if err := func() error {
				s.CallID.Reset()
				if err := s.CallID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_id\"")
			}
		case "call_log_id":
			if err := func() error {
				s.CallLogID.Reset()
				if err := s.CallLogID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_log_id\"")
			}
		case "callee_name":
			if err := func() error {
				s.CalleeName.Reset()
				if err := s.CalleeName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_name\"")
			}
		case "callee_number":
			if err := func() error {
				s.CalleeNumber.Reset()
				if err := s.CalleeNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_number\"")
			}
		case "callee_number_type":
			if err := func() error {
				s.CalleeNumberType.Reset()
				if err := s.CalleeNumberType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_number_type\"")
			}
		case "caller_name":
			if err := func() error {
				s.CallerName.Reset()
				if err := s.CallerName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_name\"")
			}
		case "caller_number":
			if err := func() error {
				s.CallerNumber.Reset()
				if err := s.CallerNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_number\"")
			}
		case "caller_number_type":
			if err := func() error {
				s.CallerNumberType.Reset()
				if err := s.CallerNumberType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_number_type\"")
			}
		case "date_time":
			if err := func() error {
				s.DateTime.Reset()
				if err := s.DateTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"date_time\"")
			}
		case "download_url":
			if err := func() error {
				s.DownloadURL.Reset()
				if err := s.DownloadURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"download_url\"")
			}
		case "duration":
			if err := func() error {
				s.Duration.Reset()
				if err := s.Duration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"duration\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AccountVoiceMailsOKVoiceMailsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AccountVoiceMailsOKVoiceMailsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountVoiceMailsOKVoiceMailsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddAccountLevelInboundBlockRulesCreated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddAccountLevelInboundBlockRulesCreated) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddAccountLevelInboundBlockRulesCreated = [1]string{
	0: "id",
}

// Decode decodes AddAccountLevelInboundBlockRulesCreated from json.
func (s *AddAccountLevelInboundBlockRulesCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddAccountLevelInboundBlockRulesCreated to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddAccountLevelInboundBlockRulesCreated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddAccountLevelInboundBlockRulesCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddAccountLevelInboundBlockRulesCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddAccountLevelInboundBlockRulesReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddAccountLevelInboundBlockRulesReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("match_type")
		e.Str(s.MatchType)
	}
	{
		e.FieldStart("blocked_number")
		e.Str(s.BlockedNumber)
	}
	{
		e.FieldStart("type")
		e.Str(s.Type)
	}
	{
		if s.Comment.Set {
			e.FieldStart("comment")
			s.Comment.Encode(e)
		}
	}
	{
		e.FieldStart("status")
		e.Str(s.Status)
	}
	{
		if s.Country.Set {
			e.FieldStart("country")
			s.Country.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddAccountLevelInboundBlockRulesReq = [6]string{
	0: "match_type",
	1: "blocked_number",
	2: "type",
	3: "comment",
	4: "status",
	5: "country",
}

// Decode decodes AddAccountLevelInboundBlockRulesReq from json.
func (s *AddAccountLevelInboundBlockRulesReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddAccountLevelInboundBlockRulesReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "match_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.MatchType = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"match_type\"")
			}
		case "blocked_number":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.BlockedNumber = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"blocked_number\"")
			}
		case "type":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.Type = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "comment":
			if err := func() error {
				s.Comment.Reset()
				if err := s.Comment.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"comment\"")
			}
		case "status":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				v, err := d.Str()
				s.Status = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "country":
			if err := func() error {
				s.Country.Reset()
				if err := s.Country.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddAccountLevelInboundBlockRulesReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00010111,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfAddAccountLevelInboundBlockRulesReq) {
					name = jsonFieldsNameOfAddAccountLevelInboundBlockRulesReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddAccountLevelInboundBlockRulesReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddAccountLevelInboundBlockRulesReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddAccountOutboundCallingExceptionRuleCreated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddAccountOutboundCallingExceptionRuleCreated) encodeFields(e *jx.Encoder) {
	{
		if s.ExceptionRuleID.Set {
			e.FieldStart("exception_rule_id")
			s.ExceptionRuleID.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddAccountOutboundCallingExceptionRuleCreated = [1]string{
	0: "exception_rule_id",
}

// Decode decodes AddAccountOutboundCallingExceptionRuleCreated from json.
func (s *AddAccountOutboundCallingExceptionRuleCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddAccountOutboundCallingExceptionRuleCreated to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "exception_rule_id":
			if err := func() error {
				s.ExceptionRuleID.Reset()
				if err := s.ExceptionRuleID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exception_rule_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddAccountOutboundCallingExceptionRuleCreated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddAccountOutboundCallingExceptionRuleCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddAccountOutboundCallingExceptionRuleCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddAccountOutboundCallingExceptionRuleReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddAccountOutboundCallingExceptionRuleReq) encodeFields(e *jx.Encoder) {
	{
		if s.ExceptionRule.Set {
			e.FieldStart("exception_rule")
			s.ExceptionRule.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddAccountOutboundCallingExceptionRuleReq = [1]string{
	0: "exception_rule",
}

// Decode decodes AddAccountOutboundCallingExceptionRuleReq from json.
func (s *AddAccountOutboundCallingExceptionRuleReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddAccountOutboundCallingExceptionRuleReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "exception_rule":
			if err := func() error {
				s.ExceptionRule.Reset()
				if err := s.ExceptionRule.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exception_rule\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddAccountOutboundCallingExceptionRuleReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddAccountOutboundCallingExceptionRuleReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddAccountOutboundCallingExceptionRuleReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddAccountOutboundCallingExceptionRuleReqExceptionRule) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddAccountOutboundCallingExceptionRuleReqExceptionRule) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("match_type")
		e.Str(s.MatchType)
	}
	{
		e.FieldStart("prefix_number")
		e.Str(s.PrefixNumber)
	}
	{
		if s.Comment.Set {
			e.FieldStart("comment")
			s.Comment.Encode(e)
		}
	}
	{
		e.FieldStart("status")
		e.Str(s.Status)
	}
	{
		e.FieldStart("country")
		e.Str(s.Country)
	}
}

var jsonFieldsNameOfAddAccountOutboundCallingExceptionRuleReqExceptionRule = [5]string{
	0: "match_type",
	1: "prefix_number",
	2: "comment",
	3: "status",
	4: "country",
}

// Decode decodes AddAccountOutboundCallingExceptionRuleReqExceptionRule from json.
func (s *AddAccountOutboundCallingExceptionRuleReqExceptionRule) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddAccountOutboundCallingExceptionRuleReqExceptionRule to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "match_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.MatchType = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"match_type\"")
			}
		case "prefix_number":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.PrefixNumber = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"prefix_number\"")
			}
		case "comment":
			if err := func() error {
				s.Comment.Reset()
				if err := s.Comment.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"comment\"")
			}
		case "status":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				v, err := d.Str()
				s.Status = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "country":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				v, err := d.Str()
				s.Country = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddAccountOutboundCallingExceptionRuleReqExceptionRule")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00011011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfAddAccountOutboundCallingExceptionRuleReqExceptionRule) {
					name = jsonFieldsNameOfAddAccountOutboundCallingExceptionRuleReqExceptionRule[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddAccountOutboundCallingExceptionRuleReqExceptionRule) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddAccountOutboundCallingExceptionRuleReqExceptionRule) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddAnAlertSettingCreated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddAnAlertSettingCreated) encodeFields(e *jx.Encoder) {
	{
		if s.AlertSettingID.Set {
			e.FieldStart("alert_setting_id")
			s.AlertSettingID.Encode(e)
		}
	}
	{
		if s.AlertSettingName.Set {
			e.FieldStart("alert_setting_name")
			s.AlertSettingName.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddAnAlertSettingCreated = [2]string{
	0: "alert_setting_id",
	1: "alert_setting_name",
}

// Decode decodes AddAnAlertSettingCreated from json.
func (s *AddAnAlertSettingCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddAnAlertSettingCreated to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "alert_setting_id":
			if err := func() error {
				s.AlertSettingID.Reset()
				if err := s.AlertSettingID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"alert_setting_id\"")
			}
		case "alert_setting_name":
			if err := func() error {
				s.AlertSettingName.Reset()
				if err := s.AlertSettingName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"alert_setting_name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddAnAlertSettingCreated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddAnAlertSettingCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddAnAlertSettingCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddAnAlertSettingReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddAnAlertSettingReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("alert_setting_name")
		e.Str(s.AlertSettingName)
	}
	{
		e.FieldStart("module")
		e.Int(s.Module)
	}
	{
		e.FieldStart("rule")
		e.Int(s.Rule)
	}
	{
		e.FieldStart("target_type")
		e.Int(s.TargetType)
	}
	{
		if s.TargetIds != nil {
			e.FieldStart("target_ids")
			e.ArrStart()
			for _, elem := range s.TargetIds {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		e.FieldStart("rule_conditions")
		e.ArrStart()
		for _, elem := range s.RuleConditions {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("time_frame_type")
		e.Str(s.TimeFrameType)
	}
	{
		e.FieldStart("time_frame_from")
		e.Str(s.TimeFrameFrom)
	}
	{
		e.FieldStart("time_frame_to")
		e.Str(s.TimeFrameTo)
	}
	{
		if s.Frequency.Set {
			e.FieldStart("frequency")
			s.Frequency.Encode(e)
		}
	}
	{
		if s.EmailRecipients != nil {
			e.FieldStart("email_recipients")
			e.ArrStart()
			for _, elem := range s.EmailRecipients {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ChatChannels != nil {
			e.FieldStart("chat_channels")
			e.ArrStart()
			for _, elem := range s.ChatChannels {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddAnAlertSettingReq = [13]string{
	0:  "alert_setting_name",
	1:  "module",
	2:  "rule",
	3:  "target_type",
	4:  "target_ids",
	5:  "rule_conditions",
	6:  "time_frame_type",
	7:  "time_frame_from",
	8:  "time_frame_to",
	9:  "frequency",
	10: "email_recipients",
	11: "chat_channels",
	12: "status",
}

// Decode decodes AddAnAlertSettingReq from json.
func (s *AddAnAlertSettingReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddAnAlertSettingReq to nil")
	}
	var requiredBitSet [2]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "alert_setting_name":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.AlertSettingName = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"alert_setting_name\"")
			}
		case "module":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Int()
				s.Module = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"module\"")
			}
		case "rule":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Int()
				s.Rule = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rule\"")
			}
		case "target_type":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				v, err := d.Int()
				s.TargetType = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"target_type\"")
			}
		case "target_ids":
			if err := func() error {
				s.TargetIds = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.TargetIds = append(s.TargetIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"target_ids\"")
			}
		case "rule_conditions":
			requiredBitSet[0] |= 1 << 5
			if err := func() error {
				s.RuleConditions = make([]AddAnAlertSettingReqRuleConditionsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AddAnAlertSettingReqRuleConditionsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.RuleConditions = append(s.RuleConditions, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rule_conditions\"")
			}
		case "time_frame_type":
			requiredBitSet[0] |= 1 << 6
			if err := func() error {
				v, err := d.Str()
				s.TimeFrameType = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"time_frame_type\"")
			}
		case "time_frame_from":
			requiredBitSet[0] |= 1 << 7
			if err := func() error {
				v, err := d.Str()
				s.TimeFrameFrom = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"time_frame_from\"")
			}
		case "time_frame_to":
			requiredBitSet[1] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.TimeFrameTo = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"time_frame_to\"")
			}
		case "frequency":
			if err := func() error {
				s.Frequency.Reset()
				if err := s.Frequency.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"frequency\"")
			}
		case "email_recipients":
			if err := func() error {
				s.EmailRecipients = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.EmailRecipients = append(s.EmailRecipients, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email_recipients\"")
			}
		case "chat_channels":
			if err := func() error {
				s.ChatChannels = make([]AddAnAlertSettingReqChatChannelsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AddAnAlertSettingReqChatChannelsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.ChatChannels = append(s.ChatChannels, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"chat_channels\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddAnAlertSettingReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [2]uint8{
		0b11101111,
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfAddAnAlertSettingReq) {
					name = jsonFieldsNameOfAddAnAlertSettingReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddAnAlertSettingReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddAnAlertSettingReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddAnAlertSettingReqChatChannelsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddAnAlertSettingReqChatChannelsItem) encodeFields(e *jx.Encoder) {
	{
		if s.ChatChannelName.Set {
			e.FieldStart("chat_channel_name")
			s.ChatChannelName.Encode(e)
		}
	}
	{
		if s.Token.Set {
			e.FieldStart("token")
			s.Token.Encode(e)
		}
	}
	{
		if s.EndPoint.Set {
			e.FieldStart("end_point")
			s.EndPoint.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddAnAlertSettingReqChatChannelsItem = [3]string{
	0: "chat_channel_name",
	1: "token",
	2: "end_point",
}

// Decode decodes AddAnAlertSettingReqChatChannelsItem from json.
func (s *AddAnAlertSettingReqChatChannelsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddAnAlertSettingReqChatChannelsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "chat_channel_name":
			if err := func() error {
				s.ChatChannelName.Reset()
				if err := s.ChatChannelName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"chat_channel_name\"")
			}
		case "token":
			if err := func() error {
				s.Token.Reset()
				if err := s.Token.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"token\"")
			}
		case "end_point":
			if err := func() error {
				s.EndPoint.Reset()
				if err := s.EndPoint.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"end_point\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddAnAlertSettingReqChatChannelsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddAnAlertSettingReqChatChannelsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddAnAlertSettingReqChatChannelsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddAnAlertSettingReqRuleConditionsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddAnAlertSettingReqRuleConditionsItem) encodeFields(e *jx.Encoder) {
	{
		if s.RuleConditionType.Set {
			e.FieldStart("rule_condition_type")
			s.RuleConditionType.Encode(e)
		}
	}
	{
		if s.RuleConditionValue.Set {
			e.FieldStart("rule_condition_value")
			s.RuleConditionValue.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddAnAlertSettingReqRuleConditionsItem = [2]string{
	0: "rule_condition_type",
	1: "rule_condition_value",
}

// Decode decodes AddAnAlertSettingReqRuleConditionsItem from json.
func (s *AddAnAlertSettingReqRuleConditionsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddAnAlertSettingReqRuleConditionsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "rule_condition_type":
			if err := func() error {
				s.RuleConditionType.Reset()
				if err := s.RuleConditionType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rule_condition_type\"")
			}
		case "rule_condition_value":
			if err := func() error {
				s.RuleConditionValue.Reset()
				if err := s.RuleConditionValue.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rule_condition_value\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddAnAlertSettingReqRuleConditionsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddAnAlertSettingReqRuleConditionsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddAnAlertSettingReqRuleConditionsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddAnAudioCreated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddAnAudioCreated) encodeFields(e *jx.Encoder) {
	{
		if s.AudioID.Set {
			e.FieldStart("audio_id")
			s.AudioID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddAnAudioCreated = [2]string{
	0: "audio_id",
	1: "name",
}

// Decode decodes AddAnAudioCreated from json.
func (s *AddAnAudioCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddAnAudioCreated to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_id":
			if err := func() error {
				s.AudioID.Reset()
				if err := s.AudioID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddAnAudioCreated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddAnAudioCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddAnAudioCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddAnAudioReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddAnAudioReq) encodeFields(e *jx.Encoder) {
	{
		if s.AudioName.Set {
			e.FieldStart("audio_name")
			s.AudioName.Encode(e)
		}
	}
	{
		if s.Text.Set {
			e.FieldStart("text")
			s.Text.Encode(e)
		}
	}
	{
		if s.VoiceLanguage.Set {
			e.FieldStart("voice_language")
			s.VoiceLanguage.Encode(e)
		}
	}
	{
		if s.VoiceAccent.Set {
			e.FieldStart("voice_accent")
			s.VoiceAccent.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddAnAudioReq = [4]string{
	0: "audio_name",
	1: "text",
	2: "voice_language",
	3: "voice_accent",
}

// Decode decodes AddAnAudioReq from json.
func (s *AddAnAudioReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddAnAudioReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_name":
			if err := func() error {
				s.AudioName.Reset()
				if err := s.AudioName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_name\"")
			}
		case "text":
			if err := func() error {
				s.Text.Reset()
				if err := s.Text.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"text\"")
			}
		case "voice_language":
			if err := func() error {
				s.VoiceLanguage.Reset()
				if err := s.VoiceLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voice_language\"")
			}
		case "voice_accent":
			if err := func() error {
				s.VoiceAccent.Reset()
				if err := s.VoiceAccent.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voice_accent\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddAnAudioReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddAnAudioReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddAnAudioReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddAnumberToBlockedListCreated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddAnumberToBlockedListCreated) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddAnumberToBlockedListCreated = [1]string{
	0: "id",
}

// Decode decodes AddAnumberToBlockedListCreated from json.
func (s *AddAnumberToBlockedListCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddAnumberToBlockedListCreated to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddAnumberToBlockedListCreated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddAnumberToBlockedListCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddAnumberToBlockedListCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddAnumberToBlockedListReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddAnumberToBlockedListReq) encodeFields(e *jx.Encoder) {
	{
		if s.BlockType.Set {
			e.FieldStart("block_type")
			s.BlockType.Encode(e)
		}
	}
	{
		if s.Comment.Set {
			e.FieldStart("comment")
			s.Comment.Encode(e)
		}
	}
	{
		if s.Country.Set {
			e.FieldStart("country")
			s.Country.Encode(e)
		}
	}
	{
		if s.MatchType.Set {
			e.FieldStart("match_type")
			s.MatchType.Encode(e)
		}
	}
	{
		if s.PhoneNumber.Set {
			e.FieldStart("phone_number")
			s.PhoneNumber.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddAnumberToBlockedListReq = [6]string{
	0: "block_type",
	1: "comment",
	2: "country",
	3: "match_type",
	4: "phone_number",
	5: "status",
}

// Decode decodes AddAnumberToBlockedListReq from json.
func (s *AddAnumberToBlockedListReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddAnumberToBlockedListReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "block_type":
			if err := func() error {
				s.BlockType.Reset()
				if err := s.BlockType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"block_type\"")
			}
		case "comment":
			if err := func() error {
				s.Comment.Reset()
				if err := s.Comment.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"comment\"")
			}
		case "country":
			if err := func() error {
				s.Country.Reset()
				if err := s.Country.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country\"")
			}
		case "match_type":
			if err := func() error {
				s.MatchType.Reset()
				if err := s.MatchType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"match_type\"")
			}
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddAnumberToBlockedListReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddAnumberToBlockedListReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddAnumberToBlockedListReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddAudioItemCreated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddAudioItemCreated) encodeFields(e *jx.Encoder) {
	{
		if s.Audios != nil {
			e.FieldStart("audios")
			e.ArrStart()
			for _, elem := range s.Audios {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAddAudioItemCreated = [1]string{
	0: "audios",
}

// Decode decodes AddAudioItemCreated from json.
func (s *AddAudioItemCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddAudioItemCreated to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audios":
			if err := func() error {
				s.Audios = make([]AddAudioItemCreatedAudiosItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AddAudioItemCreatedAudiosItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Audios = append(s.Audios, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audios\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddAudioItemCreated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddAudioItemCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddAudioItemCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddAudioItemCreatedAudiosItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddAudioItemCreatedAudiosItem) encodeFields(e *jx.Encoder) {
	{
		if s.AudioID.Set {
			e.FieldStart("audio_id")
			s.AudioID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddAudioItemCreatedAudiosItem = [2]string{
	0: "audio_id",
	1: "name",
}

// Decode decodes AddAudioItemCreatedAudiosItem from json.
func (s *AddAudioItemCreatedAudiosItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddAudioItemCreatedAudiosItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_id":
			if err := func() error {
				s.AudioID.Reset()
				if err := s.AudioID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddAudioItemCreatedAudiosItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddAudioItemCreatedAudiosItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddAudioItemCreatedAudiosItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddAudioItemReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddAudioItemReq) encodeFields(e *jx.Encoder) {
	{
		if s.Attachments != nil {
			e.FieldStart("attachments")
			e.ArrStart()
			for _, elem := range s.Attachments {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAddAudioItemReq = [1]string{
	0: "attachments",
}

// Decode decodes AddAudioItemReq from json.
func (s *AddAudioItemReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddAudioItemReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "attachments":
			if err := func() error {
				s.Attachments = make([]AddAudioItemReqAttachmentsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AddAudioItemReqAttachmentsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Attachments = append(s.Attachments, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"attachments\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddAudioItemReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddAudioItemReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddAudioItemReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddAudioItemReqAttachmentsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddAudioItemReqAttachmentsItem) encodeFields(e *jx.Encoder) {
	{
		if s.AudioType.Set {
			e.FieldStart("audio_type")
			s.AudioType.Encode(e)
		}
	}
	{
		if s.Base64Encoding.Set {
			e.FieldStart("base64_encoding")
			s.Base64Encoding.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddAudioItemReqAttachmentsItem = [3]string{
	0: "audio_type",
	1: "base64_encoding",
	2: "name",
}

// Decode decodes AddAudioItemReqAttachmentsItem from json.
func (s *AddAudioItemReqAttachmentsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddAudioItemReqAttachmentsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_type":
			if err := func() error {
				s.AudioType.Reset()
				if err := s.AudioType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_type\"")
			}
		case "base64_encoding":
			if err := func() error {
				s.Base64Encoding.Reset()
				if err := s.Base64Encoding.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"base64_encoding\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddAudioItemReqAttachmentsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddAudioItemReqAttachmentsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddAudioItemReqAttachmentsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddAutoReceptionistCreated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddAutoReceptionistCreated) encodeFields(e *jx.Encoder) {
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddAutoReceptionistCreated = [3]string{
	0: "extension_number",
	1: "id",
	2: "name",
}

// Decode decodes AddAutoReceptionistCreated from json.
func (s *AddAutoReceptionistCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddAutoReceptionistCreated to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddAutoReceptionistCreated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddAutoReceptionistCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddAutoReceptionistCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddAutoReceptionistReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddAutoReceptionistReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("name")
		e.Str(s.Name)
	}
	{
		if s.SiteID.Set {
			e.FieldStart("site_id")
			s.SiteID.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddAutoReceptionistReq = [2]string{
	0: "name",
	1: "site_id",
}

// Decode decodes AddAutoReceptionistReq from json.
func (s *AddAutoReceptionistReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddAutoReceptionistReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Name = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "site_id":
			if err := func() error {
				s.SiteID.Reset()
				if err := s.SiteID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddAutoReceptionistReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfAddAutoReceptionistReq) {
					name = jsonFieldsNameOfAddAutoReceptionistReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddAutoReceptionistReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddAutoReceptionistReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddBYOCNumberCreated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddBYOCNumberCreated) encodeFields(e *jx.Encoder) {
	{
		if s.PhoneNumbers != nil {
			e.FieldStart("phone_numbers")
			e.ArrStart()
			for _, elem := range s.PhoneNumbers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAddBYOCNumberCreated = [1]string{
	0: "phone_numbers",
}

// Decode decodes AddBYOCNumberCreated from json.
func (s *AddBYOCNumberCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddBYOCNumberCreated to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "phone_numbers":
			if err := func() error {
				s.PhoneNumbers = make([]AddBYOCNumberCreatedPhoneNumbersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AddBYOCNumberCreatedPhoneNumbersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.PhoneNumbers = append(s.PhoneNumbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_numbers\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddBYOCNumberCreated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddBYOCNumberCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddBYOCNumberCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddBYOCNumberCreatedPhoneNumbersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddBYOCNumberCreatedPhoneNumbersItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Number.Set {
			e.FieldStart("number")
			s.Number.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddBYOCNumberCreatedPhoneNumbersItem = [2]string{
	0: "id",
	1: "number",
}

// Decode decodes AddBYOCNumberCreatedPhoneNumbersItem from json.
func (s *AddBYOCNumberCreatedPhoneNumbersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddBYOCNumberCreatedPhoneNumbersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "number":
			if err := func() error {
				s.Number.Reset()
				if err := s.Number.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddBYOCNumberCreatedPhoneNumbersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddBYOCNumberCreatedPhoneNumbersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddBYOCNumberCreatedPhoneNumbersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddBYOCNumberReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddBYOCNumberReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("carrier")
		e.Str(s.Carrier)
	}
	{
		e.FieldStart("phone_numbers")
		e.ArrStart()
		for _, elem := range s.PhoneNumbers {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	{
		if s.SipGroupID.Set {
			e.FieldStart("sip_group_id")
			s.SipGroupID.Encode(e)
		}
	}
	{
		if s.SiteID.Set {
			e.FieldStart("site_id")
			s.SiteID.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddBYOCNumberReq = [4]string{
	0: "carrier",
	1: "phone_numbers",
	2: "sip_group_id",
	3: "site_id",
}

// Decode decodes AddBYOCNumberReq from json.
func (s *AddBYOCNumberReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddBYOCNumberReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "carrier":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Carrier = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"carrier\"")
			}
		case "phone_numbers":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				s.PhoneNumbers = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.PhoneNumbers = append(s.PhoneNumbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_numbers\"")
			}
		case "sip_group_id":
			if err := func() error {
				s.SipGroupID.Reset()
				if err := s.SipGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sip_group_id\"")
			}
		case "site_id":
			if err := func() error {
				s.SiteID.Reset()
				if err := s.SiteID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddBYOCNumberReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfAddBYOCNumberReq) {
					name = jsonFieldsNameOfAddBYOCNumberReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddBYOCNumberReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddBYOCNumberReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddCQPolicySubSettingCreated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddCQPolicySubSettingCreated) encodeFields(e *jx.Encoder) {
	{
		if s.VoicemailAccessMembers != nil {
			e.FieldStart("voicemail_access_members")
			e.ArrStart()
			for _, elem := range s.VoicemailAccessMembers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAddCQPolicySubSettingCreated = [1]string{
	0: "voicemail_access_members",
}

// Decode decodes AddCQPolicySubSettingCreated from json.
func (s *AddCQPolicySubSettingCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddCQPolicySubSettingCreated to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "voicemail_access_members":
			if err := func() error {
				s.VoicemailAccessMembers = make([]AddCQPolicySubSettingCreatedVoicemailAccessMembersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AddCQPolicySubSettingCreatedVoicemailAccessMembersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.VoicemailAccessMembers = append(s.VoicemailAccessMembers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voicemail_access_members\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddCQPolicySubSettingCreated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddCQPolicySubSettingCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddCQPolicySubSettingCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddCQPolicySubSettingCreatedVoicemailAccessMembersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddCQPolicySubSettingCreatedVoicemailAccessMembersItem) encodeFields(e *jx.Encoder) {
	{
		if s.AccessUserID.Set {
			e.FieldStart("access_user_id")
			s.AccessUserID.Encode(e)
		}
	}
	{
		if s.AllowDownload.Set {
			e.FieldStart("allow_download")
			s.AllowDownload.Encode(e)
		}
	}
	{
		if s.AllowDelete.Set {
			e.FieldStart("allow_delete")
			s.AllowDelete.Encode(e)
		}
	}
	{
		if s.AllowSharing.Set {
			e.FieldStart("allow_sharing")
			s.AllowSharing.Encode(e)
		}
	}
	{
		if s.SharedID.Set {
			e.FieldStart("shared_id")
			s.SharedID.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddCQPolicySubSettingCreatedVoicemailAccessMembersItem = [5]string{
	0: "access_user_id",
	1: "allow_download",
	2: "allow_delete",
	3: "allow_sharing",
	4: "shared_id",
}

// Decode decodes AddCQPolicySubSettingCreatedVoicemailAccessMembersItem from json.
func (s *AddCQPolicySubSettingCreatedVoicemailAccessMembersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddCQPolicySubSettingCreatedVoicemailAccessMembersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "access_user_id":
			if err := func() error {
				s.AccessUserID.Reset()
				if err := s.AccessUserID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_user_id\"")
			}
		case "allow_download":
			if err := func() error {
				s.AllowDownload.Reset()
				if err := s.AllowDownload.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_download\"")
			}
		case "allow_delete":
			if err := func() error {
				s.AllowDelete.Reset()
				if err := s.AllowDelete.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_delete\"")
			}
		case "allow_sharing":
			if err := func() error {
				s.AllowSharing.Reset()
				if err := s.AllowSharing.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_sharing\"")
			}
		case "shared_id":
			if err := func() error {
				s.SharedID.Reset()
				if err := s.SharedID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shared_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddCQPolicySubSettingCreatedVoicemailAccessMembersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddCQPolicySubSettingCreatedVoicemailAccessMembersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddCQPolicySubSettingCreatedVoicemailAccessMembersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddCQPolicySubSettingReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddCQPolicySubSettingReq) encodeFields(e *jx.Encoder) {
	{
		if s.VoicemailAccessMembers != nil {
			e.FieldStart("voicemail_access_members")
			e.ArrStart()
			for _, elem := range s.VoicemailAccessMembers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAddCQPolicySubSettingReq = [1]string{
	0: "voicemail_access_members",
}

// Decode decodes AddCQPolicySubSettingReq from json.
func (s *AddCQPolicySubSettingReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddCQPolicySubSettingReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "voicemail_access_members":
			if err := func() error {
				s.VoicemailAccessMembers = make([]AddCQPolicySubSettingReqVoicemailAccessMembersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AddCQPolicySubSettingReqVoicemailAccessMembersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.VoicemailAccessMembers = append(s.VoicemailAccessMembers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voicemail_access_members\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddCQPolicySubSettingReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddCQPolicySubSettingReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddCQPolicySubSettingReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddCQPolicySubSettingReqVoicemailAccessMembersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddCQPolicySubSettingReqVoicemailAccessMembersItem) encodeFields(e *jx.Encoder) {
	{
		if s.AccessUserID.Set {
			e.FieldStart("access_user_id")
			s.AccessUserID.Encode(e)
		}
	}
	{
		if s.AllowDownload.Set {
			e.FieldStart("allow_download")
			s.AllowDownload.Encode(e)
		}
	}
	{
		if s.AllowDelete.Set {
			e.FieldStart("allow_delete")
			s.AllowDelete.Encode(e)
		}
	}
	{
		if s.AllowSharing.Set {
			e.FieldStart("allow_sharing")
			s.AllowSharing.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddCQPolicySubSettingReqVoicemailAccessMembersItem = [4]string{
	0: "access_user_id",
	1: "allow_download",
	2: "allow_delete",
	3: "allow_sharing",
}

// Decode decodes AddCQPolicySubSettingReqVoicemailAccessMembersItem from json.
func (s *AddCQPolicySubSettingReqVoicemailAccessMembersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddCQPolicySubSettingReqVoicemailAccessMembersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "access_user_id":
			if err := func() error {
				s.AccessUserID.Reset()
				if err := s.AccessUserID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_user_id\"")
			}
		case "allow_download":
			if err := func() error {
				s.AllowDownload.Reset()
				if err := s.AllowDownload.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_download\"")
			}
		case "allow_delete":
			if err := func() error {
				s.AllowDelete.Reset()
				if err := s.AllowDelete.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_delete\"")
			}
		case "allow_sharing":
			if err := func() error {
				s.AllowSharing.Reset()
				if err := s.AllowSharing.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_sharing\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddCQPolicySubSettingReqVoicemailAccessMembersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddCQPolicySubSettingReqVoicemailAccessMembersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddCQPolicySubSettingReqVoicemailAccessMembersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddCallHandlingCreated as json.
func (s AddCallHandlingCreated) Encode(e *jx.Encoder) {
	switch s.Type {
	case AddCallHandlingCreated0AddCallHandlingCreated:
		s.AddCallHandlingCreated0.Encode(e)
	case AddCallHandlingCreated1AddCallHandlingCreated:
		s.AddCallHandlingCreated1.Encode(e)
	}
}

func (s AddCallHandlingCreated) encodeFields(e *jx.Encoder) {
	switch s.Type {
	case AddCallHandlingCreated0AddCallHandlingCreated:
		s.AddCallHandlingCreated0.encodeFields(e)
	case AddCallHandlingCreated1AddCallHandlingCreated:
		s.AddCallHandlingCreated1.encodeFields(e)
	}
}

// Decode decodes AddCallHandlingCreated from json.
func (s *AddCallHandlingCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddCallHandlingCreated to nil")
	}
	// Sum type fields.
	if typ := d.Next(); typ != jx.Object {
		return errors.Errorf("unexpected json type %q", typ)
	}

	var found bool
	if err := d.Capture(func(d *jx.Decoder) error {
		return d.ObjBytes(func(d *jx.Decoder, key []byte) error {
			switch string(key) {
			case "call_forwarding_id":
				match := AddCallHandlingCreated0AddCallHandlingCreated
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "holiday_id":
				match := AddCallHandlingCreated1AddCallHandlingCreated
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			}
			return d.Skip()
		})
	}); err != nil {
		return errors.Wrap(err, "capture")
	}
	if !found {
		return errors.New("unable to detect sum type variant")
	}
	switch s.Type {
	case AddCallHandlingCreated0AddCallHandlingCreated:
		if err := s.AddCallHandlingCreated0.Decode(d); err != nil {
			return err
		}
	case AddCallHandlingCreated1AddCallHandlingCreated:
		if err := s.AddCallHandlingCreated1.Decode(d); err != nil {
			return err
		}
	default:
		return errors.Errorf("inferred invalid type: %s", s.Type)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s AddCallHandlingCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddCallHandlingCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddCallHandlingCreated0) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddCallHandlingCreated0) encodeFields(e *jx.Encoder) {
	{
		if s.CallForwardingID.Set {
			e.FieldStart("call_forwarding_id")
			s.CallForwardingID.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddCallHandlingCreated0 = [1]string{
	0: "call_forwarding_id",
}

// Decode decodes AddCallHandlingCreated0 from json.
func (s *AddCallHandlingCreated0) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddCallHandlingCreated0 to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "call_forwarding_id":
			if err := func() error {
				s.CallForwardingID.Reset()
				if err := s.CallForwardingID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_forwarding_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddCallHandlingCreated0")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddCallHandlingCreated0) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddCallHandlingCreated0) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddCallHandlingCreated1) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddCallHandlingCreated1) encodeFields(e *jx.Encoder) {
	{
		if s.HolidayID.Set {
			e.FieldStart("holiday_id")
			s.HolidayID.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddCallHandlingCreated1 = [1]string{
	0: "holiday_id",
}

// Decode decodes AddCallHandlingCreated1 from json.
func (s *AddCallHandlingCreated1) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddCallHandlingCreated1 to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "holiday_id":
			if err := func() error {
				s.HolidayID.Reset()
				if err := s.HolidayID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holiday_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddCallHandlingCreated1")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddCallHandlingCreated1) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddCallHandlingCreated1) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddCallHandlingReq as json.
func (s AddCallHandlingReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

func (s AddCallHandlingReq) encodeFields(e *jx.Encoder) {
	switch s.Type {
	case PostCallHandlingSettingsCallForwardingAddCallHandlingReq:
		e.FieldStart("sub_setting_type")
		e.Str("call_forwarding")
		{
			s := s.PostCallHandlingSettingsCallForwarding
			{
				if s.Settings.Set {
					e.FieldStart("settings")
					s.Settings.Encode(e)
				}
			}
		}
	case PostCallHandlingSettingsHolidayAddCallHandlingReq:
		e.FieldStart("sub_setting_type")
		e.Str("holiday")
		{
			s := s.PostCallHandlingSettingsHoliday
			{
				if s.Settings.Set {
					e.FieldStart("settings")
					s.Settings.Encode(e)
				}
			}
		}
	}
}

// Decode decodes AddCallHandlingReq from json.
func (s *AddCallHandlingReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddCallHandlingReq to nil")
	}
	// Sum type discriminator.
	if typ := d.Next(); typ != jx.Object {
		return errors.Errorf("unexpected json type %q", typ)
	}

	var found bool
	if err := d.Capture(func(d *jx.Decoder) error {
		return d.ObjBytes(func(d *jx.Decoder, key []byte) error {
			if found {
				return d.Skip()
			}
			switch string(key) {
			case "sub_setting_type":
				typ, err := d.Str()
				if err != nil {
					return err
				}
				switch typ {
				case "call_forwarding":
					s.Type = PostCallHandlingSettingsCallForwardingAddCallHandlingReq
					found = true
				case "holiday":
					s.Type = PostCallHandlingSettingsHolidayAddCallHandlingReq
					found = true
				default:
					return errors.Errorf("unknown type %s", typ)
				}
				return nil
			}
			return d.Skip()
		})
	}); err != nil {
		return errors.Wrap(err, "capture")
	}
	if !found {
		return errors.New("unable to detect sum type variant")
	}
	switch s.Type {
	case PostCallHandlingSettingsCallForwardingAddCallHandlingReq:
		if err := s.PostCallHandlingSettingsCallForwarding.Decode(d); err != nil {
			return err
		}
	case PostCallHandlingSettingsHolidayAddCallHandlingReq:
		if err := s.PostCallHandlingSettingsHoliday.Decode(d); err != nil {
			return err
		}
	default:
		return errors.Errorf("inferred invalid type: %s", s.Type)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s AddCallHandlingReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddCallHandlingReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddClientCodeToCallLogReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddClientCodeToCallLogReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("client_code")
		e.Str(s.ClientCode)
	}
}

var jsonFieldsNameOfAddClientCodeToCallLogReq = [1]string{
	0: "client_code",
}

// Decode decodes AddClientCodeToCallLogReq from json.
func (s *AddClientCodeToCallLogReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddClientCodeToCallLogReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "client_code":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.ClientCode = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_code\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddClientCodeToCallLogReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfAddClientCodeToCallLogReq) {
					name = jsonFieldsNameOfAddClientCodeToCallLogReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddClientCodeToCallLogReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddClientCodeToCallLogReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddCommonAreaCreated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddCommonAreaCreated) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddCommonAreaCreated = [2]string{
	0: "display_name",
	1: "id",
}

// Decode decodes AddCommonAreaCreated from json.
func (s *AddCommonAreaCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddCommonAreaCreated to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddCommonAreaCreated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddCommonAreaCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddCommonAreaCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddCommonAreaOutboundCallingExceptionRuleCreated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddCommonAreaOutboundCallingExceptionRuleCreated) encodeFields(e *jx.Encoder) {
	{
		if s.ExceptionRuleID.Set {
			e.FieldStart("exception_rule_id")
			s.ExceptionRuleID.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddCommonAreaOutboundCallingExceptionRuleCreated = [1]string{
	0: "exception_rule_id",
}

// Decode decodes AddCommonAreaOutboundCallingExceptionRuleCreated from json.
func (s *AddCommonAreaOutboundCallingExceptionRuleCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddCommonAreaOutboundCallingExceptionRuleCreated to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "exception_rule_id":
			if err := func() error {
				s.ExceptionRuleID.Reset()
				if err := s.ExceptionRuleID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exception_rule_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddCommonAreaOutboundCallingExceptionRuleCreated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddCommonAreaOutboundCallingExceptionRuleCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddCommonAreaOutboundCallingExceptionRuleCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddCommonAreaOutboundCallingExceptionRuleReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddCommonAreaOutboundCallingExceptionRuleReq) encodeFields(e *jx.Encoder) {
	{
		if s.ExceptionRule.Set {
			e.FieldStart("exception_rule")
			s.ExceptionRule.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddCommonAreaOutboundCallingExceptionRuleReq = [1]string{
	0: "exception_rule",
}

// Decode decodes AddCommonAreaOutboundCallingExceptionRuleReq from json.
func (s *AddCommonAreaOutboundCallingExceptionRuleReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddCommonAreaOutboundCallingExceptionRuleReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "exception_rule":
			if err := func() error {
				s.ExceptionRule.Reset()
				if err := s.ExceptionRule.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exception_rule\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddCommonAreaOutboundCallingExceptionRuleReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddCommonAreaOutboundCallingExceptionRuleReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddCommonAreaOutboundCallingExceptionRuleReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddCommonAreaOutboundCallingExceptionRuleReqExceptionRule) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddCommonAreaOutboundCallingExceptionRuleReqExceptionRule) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("match_type")
		e.Str(s.MatchType)
	}
	{
		e.FieldStart("prefix_number")
		e.Str(s.PrefixNumber)
	}
	{
		if s.Comment.Set {
			e.FieldStart("comment")
			s.Comment.Encode(e)
		}
	}
	{
		e.FieldStart("status")
		e.Str(s.Status)
	}
	{
		e.FieldStart("country")
		e.Str(s.Country)
	}
}

var jsonFieldsNameOfAddCommonAreaOutboundCallingExceptionRuleReqExceptionRule = [5]string{
	0: "match_type",
	1: "prefix_number",
	2: "comment",
	3: "status",
	4: "country",
}

// Decode decodes AddCommonAreaOutboundCallingExceptionRuleReqExceptionRule from json.
func (s *AddCommonAreaOutboundCallingExceptionRuleReqExceptionRule) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddCommonAreaOutboundCallingExceptionRuleReqExceptionRule to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "match_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.MatchType = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"match_type\"")
			}
		case "prefix_number":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.PrefixNumber = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"prefix_number\"")
			}
		case "comment":
			if err := func() error {
				s.Comment.Reset()
				if err := s.Comment.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"comment\"")
			}
		case "status":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				v, err := d.Str()
				s.Status = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "country":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				v, err := d.Str()
				s.Country = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddCommonAreaOutboundCallingExceptionRuleReqExceptionRule")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00011011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfAddCommonAreaOutboundCallingExceptionRuleReqExceptionRule) {
					name = jsonFieldsNameOfAddCommonAreaOutboundCallingExceptionRuleReqExceptionRule[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddCommonAreaOutboundCallingExceptionRuleReqExceptionRule) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddCommonAreaOutboundCallingExceptionRuleReqExceptionRule) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddCommonAreaReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddCommonAreaReq) encodeFields(e *jx.Encoder) {
	{
		if s.CallingPlans != nil {
			e.FieldStart("calling_plans")
			e.ArrStart()
			for _, elem := range s.CallingPlans {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.CountryIsoCode.Set {
			e.FieldStart("country_iso_code")
			s.CountryIsoCode.Encode(e)
		}
	}
	{
		e.FieldStart("display_name")
		e.Str(s.DisplayName)
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.SiteID.Set {
			e.FieldStart("site_id")
			s.SiteID.Encode(e)
		}
	}
	{
		if s.Timezone.Set {
			e.FieldStart("timezone")
			s.Timezone.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddCommonAreaReq = [6]string{
	0: "calling_plans",
	1: "country_iso_code",
	2: "display_name",
	3: "extension_number",
	4: "site_id",
	5: "timezone",
}

// Decode decodes AddCommonAreaReq from json.
func (s *AddCommonAreaReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddCommonAreaReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "calling_plans":
			if err := func() error {
				s.CallingPlans = make([]AddCommonAreaReqCallingPlansItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AddCommonAreaReqCallingPlansItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CallingPlans = append(s.CallingPlans, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"calling_plans\"")
			}
		case "country_iso_code":
			if err := func() error {
				s.CountryIsoCode.Reset()
				if err := s.CountryIsoCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country_iso_code\"")
			}
		case "display_name":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.DisplayName = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "site_id":
			if err := func() error {
				s.SiteID.Reset()
				if err := s.SiteID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_id\"")
			}
		case "timezone":
			if err := func() error {
				s.Timezone.Reset()
				if err := s.Timezone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"timezone\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddCommonAreaReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000100,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfAddCommonAreaReq) {
					name = jsonFieldsNameOfAddCommonAreaReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddCommonAreaReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddCommonAreaReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddCommonAreaReqCallingPlansItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddCommonAreaReqCallingPlansItem) encodeFields(e *jx.Encoder) {
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddCommonAreaReqCallingPlansItem = [1]string{
	0: "type",
}

// Decode decodes AddCommonAreaReqCallingPlansItem from json.
func (s *AddCommonAreaReqCallingPlansItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddCommonAreaReqCallingPlansItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddCommonAreaReqCallingPlansItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddCommonAreaReqCallingPlansItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddCommonAreaReqCallingPlansItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddCommonAreaSettingCreated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddCommonAreaSettingCreated) encodeFields(e *jx.Encoder) {
	{
		if s.DeskPhones != nil {
			e.FieldStart("desk_phones")
			e.ArrStart()
			for _, elem := range s.DeskPhones {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAddCommonAreaSettingCreated = [1]string{
	0: "desk_phones",
}

// Decode decodes AddCommonAreaSettingCreated from json.
func (s *AddCommonAreaSettingCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddCommonAreaSettingCreated to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "desk_phones":
			if err := func() error {
				s.DeskPhones = make([]AddCommonAreaSettingCreatedDeskPhonesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AddCommonAreaSettingCreatedDeskPhonesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.DeskPhones = append(s.DeskPhones, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"desk_phones\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddCommonAreaSettingCreated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddCommonAreaSettingCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddCommonAreaSettingCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddCommonAreaSettingCreatedDeskPhonesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddCommonAreaSettingCreatedDeskPhonesItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddCommonAreaSettingCreatedDeskPhonesItem = [2]string{
	0: "id",
	1: "display_name",
}

// Decode decodes AddCommonAreaSettingCreatedDeskPhonesItem from json.
func (s *AddCommonAreaSettingCreatedDeskPhonesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddCommonAreaSettingCreatedDeskPhonesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddCommonAreaSettingCreatedDeskPhonesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddCommonAreaSettingCreatedDeskPhonesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddCommonAreaSettingCreatedDeskPhonesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddCommonAreaSettingReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddCommonAreaSettingReq) encodeFields(e *jx.Encoder) {
	{
		if s.DeviceID.Set {
			e.FieldStart("device_id")
			s.DeviceID.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddCommonAreaSettingReq = [1]string{
	0: "device_id",
}

// Decode decodes AddCommonAreaSettingReq from json.
func (s *AddCommonAreaSettingReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddCommonAreaSettingReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "device_id":
			if err := func() error {
				s.DeviceID.Reset()
				if err := s.DeviceID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddCommonAreaSettingReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddCommonAreaSettingReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddCommonAreaSettingReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddEmergencyAddressCreated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddEmergencyAddressCreated) encodeFields(e *jx.Encoder) {
	{
		if s.AddressLine1.Set {
			e.FieldStart("address_line1")
			s.AddressLine1.Encode(e)
		}
	}
	{
		if s.AddressLine2.Set {
			e.FieldStart("address_line2")
			s.AddressLine2.Encode(e)
		}
	}
	{
		if s.City.Set {
			e.FieldStart("city")
			s.City.Encode(e)
		}
	}
	{
		if s.Country.Set {
			e.FieldStart("country")
			s.Country.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.IsDefault.Set {
			e.FieldStart("is_default")
			s.IsDefault.Encode(e)
		}
	}
	{
		if s.Level.Set {
			e.FieldStart("level")
			s.Level.Encode(e)
		}
	}
	{
		if s.Owner.Set {
			e.FieldStart("owner")
			s.Owner.Encode(e)
		}
	}
	{
		if s.Site.Set {
			e.FieldStart("site")
			s.Site.Encode(e)
		}
	}
	{
		if s.StateCode.Set {
			e.FieldStart("state_code")
			s.StateCode.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.Zip.Set {
			e.FieldStart("zip")
			s.Zip.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddEmergencyAddressCreated = [12]string{
	0:  "address_line1",
	1:  "address_line2",
	2:  "city",
	3:  "country",
	4:  "id",
	5:  "is_default",
	6:  "level",
	7:  "owner",
	8:  "site",
	9:  "state_code",
	10: "status",
	11: "zip",
}

// Decode decodes AddEmergencyAddressCreated from json.
func (s *AddEmergencyAddressCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddEmergencyAddressCreated to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "address_line1":
			if err := func() error {
				s.AddressLine1.Reset()
				if err := s.AddressLine1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"address_line1\"")
			}
		case "address_line2":
			if err := func() error {
				s.AddressLine2.Reset()
				if err := s.AddressLine2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"address_line2\"")
			}
		case "city":
			if err := func() error {
				s.City.Reset()
				if err := s.City.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"city\"")
			}
		case "country":
			if err := func() error {
				s.Country.Reset()
				if err := s.Country.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "is_default":
			if err := func() error {
				s.IsDefault.Reset()
				if err := s.IsDefault.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"is_default\"")
			}
		case "level":
			if err := func() error {
				s.Level.Reset()
				if err := s.Level.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"level\"")
			}
		case "owner":
			if err := func() error {
				s.Owner.Reset()
				if err := s.Owner.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"owner\"")
			}
		case "site":
			if err := func() error {
				s.Site.Reset()
				if err := s.Site.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site\"")
			}
		case "state_code":
			if err := func() error {
				s.StateCode.Reset()
				if err := s.StateCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"state_code\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "zip":
			if err := func() error {
				s.Zip.Reset()
				if err := s.Zip.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zip\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddEmergencyAddressCreated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddEmergencyAddressCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddEmergencyAddressCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddEmergencyAddressCreatedOwner) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddEmergencyAddressCreatedOwner) encodeFields(e *jx.Encoder) {
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddEmergencyAddressCreatedOwner = [3]string{
	0: "extension_number",
	1: "id",
	2: "name",
}

// Decode decodes AddEmergencyAddressCreatedOwner from json.
func (s *AddEmergencyAddressCreatedOwner) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddEmergencyAddressCreatedOwner to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddEmergencyAddressCreatedOwner")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddEmergencyAddressCreatedOwner) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddEmergencyAddressCreatedOwner) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddEmergencyAddressCreatedSite) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddEmergencyAddressCreatedSite) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddEmergencyAddressCreatedSite = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes AddEmergencyAddressCreatedSite from json.
func (s *AddEmergencyAddressCreatedSite) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddEmergencyAddressCreatedSite to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddEmergencyAddressCreatedSite")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddEmergencyAddressCreatedSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddEmergencyAddressCreatedSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddEmergencyAddressReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddEmergencyAddressReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("address_line1")
		e.Str(s.AddressLine1)
	}
	{
		if s.AddressLine2.Set {
			e.FieldStart("address_line2")
			s.AddressLine2.Encode(e)
		}
	}
	{
		e.FieldStart("city")
		e.Str(s.City)
	}
	{
		e.FieldStart("country")
		e.Str(s.Country)
	}
	{
		if s.IsDefault.Set {
			e.FieldStart("is_default")
			s.IsDefault.Encode(e)
		}
	}
	{
		if s.SiteID.Set {
			e.FieldStart("site_id")
			s.SiteID.Encode(e)
		}
	}
	{
		e.FieldStart("state_code")
		e.Str(s.StateCode)
	}
	{
		if s.UserID.Set {
			e.FieldStart("user_id")
			s.UserID.Encode(e)
		}
	}
	{
		e.FieldStart("zip")
		e.Str(s.Zip)
	}
}

var jsonFieldsNameOfAddEmergencyAddressReq = [9]string{
	0: "address_line1",
	1: "address_line2",
	2: "city",
	3: "country",
	4: "is_default",
	5: "site_id",
	6: "state_code",
	7: "user_id",
	8: "zip",
}

// Decode decodes AddEmergencyAddressReq from json.
func (s *AddEmergencyAddressReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddEmergencyAddressReq to nil")
	}
	var requiredBitSet [2]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "address_line1":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.AddressLine1 = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"address_line1\"")
			}
		case "address_line2":
			if err := func() error {
				s.AddressLine2.Reset()
				if err := s.AddressLine2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"address_line2\"")
			}
		case "city":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.City = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"city\"")
			}
		case "country":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				v, err := d.Str()
				s.Country = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country\"")
			}
		case "is_default":
			if err := func() error {
				s.IsDefault.Reset()
				if err := s.IsDefault.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"is_default\"")
			}
		case "site_id":
			if err := func() error {
				s.SiteID.Reset()
				if err := s.SiteID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_id\"")
			}
		case "state_code":
			requiredBitSet[0] |= 1 << 6
			if err := func() error {
				v, err := d.Str()
				s.StateCode = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"state_code\"")
			}
		case "user_id":
			if err := func() error {
				s.UserID.Reset()
				if err := s.UserID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"user_id\"")
			}
		case "zip":
			requiredBitSet[1] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Zip = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zip\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddEmergencyAddressReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [2]uint8{
		0b01001101,
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfAddEmergencyAddressReq) {
					name = jsonFieldsNameOfAddEmergencyAddressReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddEmergencyAddressReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddEmergencyAddressReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddExtensionsToADeviceReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddExtensionsToADeviceReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("assignee_extension_ids")
		e.ArrStart()
		for _, elem := range s.AssigneeExtensionIds {
			e.Str(elem)
		}
		e.ArrEnd()
	}
}

var jsonFieldsNameOfAddExtensionsToADeviceReq = [1]string{
	0: "assignee_extension_ids",
}

// Decode decodes AddExtensionsToADeviceReq from json.
func (s *AddExtensionsToADeviceReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddExtensionsToADeviceReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "assignee_extension_ids":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				s.AssigneeExtensionIds = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.AssigneeExtensionIds = append(s.AssigneeExtensionIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"assignee_extension_ids\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddExtensionsToADeviceReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfAddExtensionsToADeviceReq) {
					name = jsonFieldsNameOfAddExtensionsToADeviceReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddExtensionsToADeviceReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddExtensionsToADeviceReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddExtensiontLevelInboundBlockRulesCreated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddExtensiontLevelInboundBlockRulesCreated) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddExtensiontLevelInboundBlockRulesCreated = [1]string{
	0: "id",
}

// Decode decodes AddExtensiontLevelInboundBlockRulesCreated from json.
func (s *AddExtensiontLevelInboundBlockRulesCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddExtensiontLevelInboundBlockRulesCreated to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddExtensiontLevelInboundBlockRulesCreated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddExtensiontLevelInboundBlockRulesCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddExtensiontLevelInboundBlockRulesCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddExtensiontLevelInboundBlockRulesReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddExtensiontLevelInboundBlockRulesReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("match_type")
		e.Str(s.MatchType)
	}
	{
		e.FieldStart("blocked_number")
		e.Str(s.BlockedNumber)
	}
	{
		e.FieldStart("type")
		e.Str(s.Type)
	}
	{
		if s.Country.Set {
			e.FieldStart("country")
			s.Country.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddExtensiontLevelInboundBlockRulesReq = [4]string{
	0: "match_type",
	1: "blocked_number",
	2: "type",
	3: "country",
}

// Decode decodes AddExtensiontLevelInboundBlockRulesReq from json.
func (s *AddExtensiontLevelInboundBlockRulesReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddExtensiontLevelInboundBlockRulesReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "match_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.MatchType = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"match_type\"")
			}
		case "blocked_number":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.BlockedNumber = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"blocked_number\"")
			}
		case "type":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.Type = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "country":
			if err := func() error {
				s.Country.Reset()
				if err := s.Country.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddExtensiontLevelInboundBlockRulesReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000111,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfAddExtensiontLevelInboundBlockRulesReq) {
					name = jsonFieldsNameOfAddExtensiontLevelInboundBlockRulesReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddExtensiontLevelInboundBlockRulesReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddExtensiontLevelInboundBlockRulesReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddExternalContactCreated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddExternalContactCreated) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.ExternalContactID.Set {
			e.FieldStart("external_contact_id")
			s.ExternalContactID.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddExternalContactCreated = [2]string{
	0: "name",
	1: "external_contact_id",
}

// Decode decodes AddExternalContactCreated from json.
func (s *AddExternalContactCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddExternalContactCreated to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "external_contact_id":
			if err := func() error {
				s.ExternalContactID.Reset()
				if err := s.ExternalContactID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"external_contact_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddExternalContactCreated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddExternalContactCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddExternalContactCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddExternalContactReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddExternalContactReq) encodeFields(e *jx.Encoder) {
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.Email.Set {
			e.FieldStart("email")
			s.Email.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		e.FieldStart("name")
		e.Str(s.Name)
	}
	{
		if s.PhoneNumbers != nil {
			e.FieldStart("phone_numbers")
			e.ArrStart()
			for _, elem := range s.PhoneNumbers {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.RoutingPath.Set {
			e.FieldStart("routing_path")
			s.RoutingPath.Encode(e)
		}
	}
	{
		if s.AutoCallRecorded.Set {
			e.FieldStart("auto_call_recorded")
			s.AutoCallRecorded.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddExternalContactReq = [8]string{
	0: "description",
	1: "email",
	2: "extension_number",
	3: "id",
	4: "name",
	5: "phone_numbers",
	6: "routing_path",
	7: "auto_call_recorded",
}

// Decode decodes AddExternalContactReq from json.
func (s *AddExternalContactReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddExternalContactReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "email":
			if err := func() error {
				s.Email.Reset()
				if err := s.Email.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				v, err := d.Str()
				s.Name = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "phone_numbers":
			if err := func() error {
				s.PhoneNumbers = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.PhoneNumbers = append(s.PhoneNumbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_numbers\"")
			}
		case "routing_path":
			if err := func() error {
				s.RoutingPath.Reset()
				if err := s.RoutingPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"routing_path\"")
			}
		case "auto_call_recorded":
			if err := func() error {
				s.AutoCallRecorded.Reset()
				if err := s.AutoCallRecorded.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_call_recorded\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddExternalContactReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00010000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfAddExternalContactReq) {
					name = jsonFieldsNameOfAddExternalContactReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddExternalContactReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddExternalContactReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddFirmwareRuleCreated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddFirmwareRuleCreated) encodeFields(e *jx.Encoder) {
	{
		if s.RuleID.Set {
			e.FieldStart("rule_Id")
			s.RuleID.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddFirmwareRuleCreated = [1]string{
	0: "rule_Id",
}

// Decode decodes AddFirmwareRuleCreated from json.
func (s *AddFirmwareRuleCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddFirmwareRuleCreated to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "rule_Id":
			if err := func() error {
				s.RuleID.Reset()
				if err := s.RuleID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rule_Id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddFirmwareRuleCreated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddFirmwareRuleCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddFirmwareRuleCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddFirmwareRuleReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddFirmwareRuleReq) encodeFields(e *jx.Encoder) {
	{
		if s.SiteID.Set {
			e.FieldStart("site_id")
			s.SiteID.Encode(e)
		}
	}
	{
		e.FieldStart("version")
		e.Str(s.Version)
	}
	{
		e.FieldStart("device_type")
		e.Str(s.DeviceType)
	}
	{
		e.FieldStart("device_model")
		e.Str(s.DeviceModel)
	}
	{
		if s.RestartType.Set {
			e.FieldStart("restart_type")
			s.RestartType.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddFirmwareRuleReq = [5]string{
	0: "site_id",
	1: "version",
	2: "device_type",
	3: "device_model",
	4: "restart_type",
}

// Decode decodes AddFirmwareRuleReq from json.
func (s *AddFirmwareRuleReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddFirmwareRuleReq to nil")
	}
	var requiredBitSet [1]uint8
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "site_id":
			if err := func() error {
				s.SiteID.Reset()
				if err := s.SiteID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_id\"")
			}
		case "version":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.Version = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"version\"")
			}
		case "device_type":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.DeviceType = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_type\"")
			}
		case "device_model":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				v, err := d.Str()
				s.DeviceModel = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_model\"")
			}
		case "restart_type":
			if err := func() error {
				s.RestartType.Reset()
				if err := s.RestartType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"restart_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddFirmwareRuleReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00001110,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfAddFirmwareRuleReq) {
					name = jsonFieldsNameOfAddFirmwareRuleReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddFirmwareRuleReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddFirmwareRuleReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddGCPCreated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddGCPCreated) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddGCPCreated = [2]string{
	0: "id",
	1: "display_name",
}

// Decode decodes AddGCPCreated from json.
func (s *AddGCPCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddGCPCreated to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddGCPCreated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddGCPCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddGCPCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddGCPMembersReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddGCPMembersReq) encodeFields(e *jx.Encoder) {
	{
		if s.MemberExtensionIds != nil {
			e.FieldStart("member_extension_ids")
			e.ArrStart()
			for _, elem := range s.MemberExtensionIds {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAddGCPMembersReq = [1]string{
	0: "member_extension_ids",
}

// Decode decodes AddGCPMembersReq from json.
func (s *AddGCPMembersReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddGCPMembersReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "member_extension_ids":
			if err := func() error {
				s.MemberExtensionIds = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.MemberExtensionIds = append(s.MemberExtensionIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"member_extension_ids\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddGCPMembersReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddGCPMembersReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddGCPMembersReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddGCPReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddGCPReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("display_name")
		e.Str(s.DisplayName)
	}
	{
		e.FieldStart("site_id")
		e.Str(s.SiteID)
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.Delay.Set {
			e.FieldStart("delay")
			s.Delay.Encode(e)
		}
	}
	{
		if s.PlayIncomingCallsSound.Set {
			e.FieldStart("play_incoming_calls_sound")
			s.PlayIncomingCallsSound.Encode(e)
		}
	}
	{
		if s.DirectedCallPickup.Set {
			e.FieldStart("directed_call_pickup")
			s.DirectedCallPickup.Encode(e)
		}
	}
	{
		if s.MemberExtensionIds != nil {
			e.FieldStart("member_extension_ids")
			e.ArrStart()
			for _, elem := range s.MemberExtensionIds {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAddGCPReq = [8]string{
	0: "display_name",
	1: "site_id",
	2: "description",
	3: "extension_number",
	4: "delay",
	5: "play_incoming_calls_sound",
	6: "directed_call_pickup",
	7: "member_extension_ids",
}

// Decode decodes AddGCPReq from json.
func (s *AddGCPReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddGCPReq to nil")
	}
	var requiredBitSet [1]uint8
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "display_name":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.DisplayName = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "site_id":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.SiteID = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_id\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "delay":
			if err := func() error {
				s.Delay.Reset()
				if err := s.Delay.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delay\"")
			}
		case "play_incoming_calls_sound":
			if err := func() error {
				s.PlayIncomingCallsSound.Reset()
				if err := s.PlayIncomingCallsSound.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_incoming_calls_sound\"")
			}
		case "directed_call_pickup":
			if err := func() error {
				s.DirectedCallPickup.Reset()
				if err := s.DirectedCallPickup.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"directed_call_pickup\"")
			}
		case "member_extension_ids":
			if err := func() error {
				s.MemberExtensionIds = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.MemberExtensionIds = append(s.MemberExtensionIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"member_extension_ids\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddGCPReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfAddGCPReq) {
					name = jsonFieldsNameOfAddGCPReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddGCPReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddGCPReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddGCPReqPlayIncomingCallsSound) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddGCPReqPlayIncomingCallsSound) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.RingTone.Set {
			e.FieldStart("ring_tone")
			s.RingTone.Encode(e)
		}
	}
	{
		if s.Duration.Set {
			e.FieldStart("duration")
			s.Duration.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddGCPReqPlayIncomingCallsSound = [3]string{
	0: "enable",
	1: "ring_tone",
	2: "duration",
}

// Decode decodes AddGCPReqPlayIncomingCallsSound from json.
func (s *AddGCPReqPlayIncomingCallsSound) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddGCPReqPlayIncomingCallsSound to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "ring_tone":
			if err := func() error {
				s.RingTone.Reset()
				if err := s.RingTone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ring_tone\"")
			}
		case "duration":
			if err := func() error {
				s.Duration.Reset()
				if err := s.Duration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"duration\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddGCPReqPlayIncomingCallsSound")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddGCPReqPlayIncomingCallsSound) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddGCPReqPlayIncomingCallsSound) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddLocationCreated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddLocationCreated) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddLocationCreated = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes AddLocationCreated from json.
func (s *AddLocationCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddLocationCreated to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddLocationCreated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddLocationCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddLocationCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddLocationReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddLocationReq) encodeFields(e *jx.Encoder) {
	{
		if s.Bssid.Set {
			e.FieldStart("bssid")
			s.Bssid.Encode(e)
		}
	}
	{
		if s.ElinPhoneNumberID.Set {
			e.FieldStart("elin_phone_number_id")
			s.ElinPhoneNumberID.Encode(e)
		}
	}
	{
		e.FieldStart("emergency_address_id")
		e.Str(s.EmergencyAddressID)
	}
	{
		e.FieldStart("name")
		e.Str(s.Name)
	}
	{
		if s.ParentLocationID.Set {
			e.FieldStart("parent_location_id")
			s.ParentLocationID.Encode(e)
		}
	}
	{
		if s.PrivateIP.Set {
			e.FieldStart("private_ip")
			s.PrivateIP.Encode(e)
		}
	}
	{
		if s.PublicIP.Set {
			e.FieldStart("public_ip")
			s.PublicIP.Encode(e)
		}
	}
	{
		if s.SipGroupID.Set {
			e.FieldStart("sip_group_id")
			s.SipGroupID.Encode(e)
		}
	}
	{
		if s.SiteID.Set {
			e.FieldStart("site_id")
			s.SiteID.Encode(e)
		}
	}
	{
		if s.MinimumMatchCriteria.Set {
			e.FieldStart("minimum_match_criteria")
			s.MinimumMatchCriteria.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddLocationReq = [10]string{
	0: "bssid",
	1: "elin_phone_number_id",
	2: "emergency_address_id",
	3: "name",
	4: "parent_location_id",
	5: "private_ip",
	6: "public_ip",
	7: "sip_group_id",
	8: "site_id",
	9: "minimum_match_criteria",
}

// Decode decodes AddLocationReq from json.
func (s *AddLocationReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddLocationReq to nil")
	}
	var requiredBitSet [2]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "bssid":
			if err := func() error {
				s.Bssid.Reset()
				if err := s.Bssid.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bssid\"")
			}
		case "elin_phone_number_id":
			if err := func() error {
				s.ElinPhoneNumberID.Reset()
				if err := s.ElinPhoneNumberID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"elin_phone_number_id\"")
			}
		case "emergency_address_id":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.EmergencyAddressID = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"emergency_address_id\"")
			}
		case "name":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				v, err := d.Str()
				s.Name = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "parent_location_id":
			if err := func() error {
				s.ParentLocationID.Reset()
				if err := s.ParentLocationID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"parent_location_id\"")
			}
		case "private_ip":
			if err := func() error {
				s.PrivateIP.Reset()
				if err := s.PrivateIP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"private_ip\"")
			}
		case "public_ip":
			if err := func() error {
				s.PublicIP.Reset()
				if err := s.PublicIP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"public_ip\"")
			}
		case "sip_group_id":
			if err := func() error {
				s.SipGroupID.Reset()
				if err := s.SipGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sip_group_id\"")
			}
		case "site_id":
			if err := func() error {
				s.SiteID.Reset()
				if err := s.SiteID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_id\"")
			}
		case "minimum_match_criteria":
			if err := func() error {
				s.MinimumMatchCriteria.Reset()
				if err := s.MinimumMatchCriteria.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"minimum_match_criteria\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddLocationReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [2]uint8{
		0b00001100,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfAddLocationReq) {
					name = jsonFieldsNameOfAddLocationReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddLocationReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddLocationReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddMembersToCallQueueCreated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddMembersToCallQueueCreated) encodeFields(e *jx.Encoder) {
}

var jsonFieldsNameOfAddMembersToCallQueueCreated = [0]string{}

// Decode decodes AddMembersToCallQueueCreated from json.
func (s *AddMembersToCallQueueCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddMembersToCallQueueCreated to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
	}); err != nil {
		return errors.Wrap(err, "decode AddMembersToCallQueueCreated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddMembersToCallQueueCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddMembersToCallQueueCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddMembersToCallQueueReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddMembersToCallQueueReq) encodeFields(e *jx.Encoder) {
	{
		if s.Members.Set {
			e.FieldStart("members")
			s.Members.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddMembersToCallQueueReq = [1]string{
	0: "members",
}

// Decode decodes AddMembersToCallQueueReq from json.
func (s *AddMembersToCallQueueReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddMembersToCallQueueReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "members":
			if err := func() error {
				s.Members.Reset()
				if err := s.Members.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"members\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddMembersToCallQueueReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddMembersToCallQueueReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddMembersToCallQueueReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddMembersToCallQueueReqMembers) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddMembersToCallQueueReqMembers) encodeFields(e *jx.Encoder) {
	{
		if s.CommonAreaIds != nil {
			e.FieldStart("common_area_ids")
			e.ArrStart()
			for _, elem := range s.CommonAreaIds {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Users != nil {
			e.FieldStart("users")
			e.ArrStart()
			for _, elem := range s.Users {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAddMembersToCallQueueReqMembers = [2]string{
	0: "common_area_ids",
	1: "users",
}

// Decode decodes AddMembersToCallQueueReqMembers from json.
func (s *AddMembersToCallQueueReqMembers) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddMembersToCallQueueReqMembers to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "common_area_ids":
			if err := func() error {
				s.CommonAreaIds = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.CommonAreaIds = append(s.CommonAreaIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"common_area_ids\"")
			}
		case "users":
			if err := func() error {
				s.Users = make([]AddMembersToCallQueueReqMembersUsersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AddMembersToCallQueueReqMembersUsersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Users = append(s.Users, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"users\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddMembersToCallQueueReqMembers")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddMembersToCallQueueReqMembers) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddMembersToCallQueueReqMembers) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddMembersToCallQueueReqMembersUsersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddMembersToCallQueueReqMembersUsersItem) encodeFields(e *jx.Encoder) {
	{
		if s.Email.Set {
			e.FieldStart("email")
			s.Email.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddMembersToCallQueueReqMembersUsersItem = [2]string{
	0: "email",
	1: "id",
}

// Decode decodes AddMembersToCallQueueReqMembersUsersItem from json.
func (s *AddMembersToCallQueueReqMembersUsersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddMembersToCallQueueReqMembersUsersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "email":
			if err := func() error {
				s.Email.Reset()
				if err := s.Email.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddMembersToCallQueueReqMembersUsersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddMembersToCallQueueReqMembersUsersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddMembersToCallQueueReqMembersUsersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddMembersToSharedLineGroupReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddMembersToSharedLineGroupReq) encodeFields(e *jx.Encoder) {
	{
		if s.Members.Set {
			e.FieldStart("members")
			s.Members.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddMembersToSharedLineGroupReq = [1]string{
	0: "members",
}

// Decode decodes AddMembersToSharedLineGroupReq from json.
func (s *AddMembersToSharedLineGroupReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddMembersToSharedLineGroupReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "members":
			if err := func() error {
				s.Members.Reset()
				if err := s.Members.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"members\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddMembersToSharedLineGroupReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddMembersToSharedLineGroupReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddMembersToSharedLineGroupReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddMembersToSharedLineGroupReqMembers) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddMembersToSharedLineGroupReqMembers) encodeFields(e *jx.Encoder) {
	{
		if s.CommonAreaIds != nil {
			e.FieldStart("common_area_ids")
			e.ArrStart()
			for _, elem := range s.CommonAreaIds {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Users != nil {
			e.FieldStart("users")
			e.ArrStart()
			for _, elem := range s.Users {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAddMembersToSharedLineGroupReqMembers = [2]string{
	0: "common_area_ids",
	1: "users",
}

// Decode decodes AddMembersToSharedLineGroupReqMembers from json.
func (s *AddMembersToSharedLineGroupReqMembers) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddMembersToSharedLineGroupReqMembers to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "common_area_ids":
			if err := func() error {
				s.CommonAreaIds = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.CommonAreaIds = append(s.CommonAreaIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"common_area_ids\"")
			}
		case "users":
			if err := func() error {
				s.Users = make([]AddMembersToSharedLineGroupReqMembersUsersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AddMembersToSharedLineGroupReqMembersUsersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Users = append(s.Users, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"users\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddMembersToSharedLineGroupReqMembers")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddMembersToSharedLineGroupReqMembers) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddMembersToSharedLineGroupReqMembers) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddMembersToSharedLineGroupReqMembersUsersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddMembersToSharedLineGroupReqMembersUsersItem) encodeFields(e *jx.Encoder) {
	{
		if s.Email.Set {
			e.FieldStart("email")
			s.Email.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddMembersToSharedLineGroupReqMembersUsersItem = [2]string{
	0: "email",
	1: "id",
}

// Decode decodes AddMembersToSharedLineGroupReqMembersUsersItem from json.
func (s *AddMembersToSharedLineGroupReqMembersUsersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddMembersToSharedLineGroupReqMembersUsersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "email":
			if err := func() error {
				s.Email.Reset()
				if err := s.Email.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddMembersToSharedLineGroupReqMembersUsersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddMembersToSharedLineGroupReqMembersUsersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddMembersToSharedLineGroupReqMembersUsersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddOutboundCallerNumbersReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddOutboundCallerNumbersReq) encodeFields(e *jx.Encoder) {
	{
		if s.PhoneNumberIds != nil {
			e.FieldStart("phone_number_ids")
			e.ArrStart()
			for _, elem := range s.PhoneNumberIds {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAddOutboundCallerNumbersReq = [1]string{
	0: "phone_number_ids",
}

// Decode decodes AddOutboundCallerNumbersReq from json.
func (s *AddOutboundCallerNumbersReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddOutboundCallerNumbersReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "phone_number_ids":
			if err := func() error {
				s.PhoneNumberIds = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.PhoneNumberIds = append(s.PhoneNumberIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number_ids\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddOutboundCallerNumbersReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddOutboundCallerNumbersReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddOutboundCallerNumbersReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddPeeringPhoneNumbersCreated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddPeeringPhoneNumbersCreated) encodeFields(e *jx.Encoder) {
	{
		if s.UnprocessedNumbers != nil {
			e.FieldStart("unprocessed_numbers")
			e.ArrStart()
			for _, elem := range s.UnprocessedNumbers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAddPeeringPhoneNumbersCreated = [1]string{
	0: "unprocessed_numbers",
}

// Decode decodes AddPeeringPhoneNumbersCreated from json.
func (s *AddPeeringPhoneNumbersCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddPeeringPhoneNumbersCreated to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "unprocessed_numbers":
			if err := func() error {
				s.UnprocessedNumbers = make([]AddPeeringPhoneNumbersCreatedUnprocessedNumbersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AddPeeringPhoneNumbersCreatedUnprocessedNumbersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.UnprocessedNumbers = append(s.UnprocessedNumbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"unprocessed_numbers\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddPeeringPhoneNumbersCreated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddPeeringPhoneNumbersCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddPeeringPhoneNumbersCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddPeeringPhoneNumbersCreatedUnprocessedNumbersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddPeeringPhoneNumbersCreatedUnprocessedNumbersItem) encodeFields(e *jx.Encoder) {
	{
		if s.FailureReason.Set {
			e.FieldStart("failure_reason")
			s.FailureReason.Encode(e)
		}
	}
	{
		if s.PhoneNumber.Set {
			e.FieldStart("phone_number")
			s.PhoneNumber.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddPeeringPhoneNumbersCreatedUnprocessedNumbersItem = [2]string{
	0: "failure_reason",
	1: "phone_number",
}

// Decode decodes AddPeeringPhoneNumbersCreatedUnprocessedNumbersItem from json.
func (s *AddPeeringPhoneNumbersCreatedUnprocessedNumbersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddPeeringPhoneNumbersCreatedUnprocessedNumbersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "failure_reason":
			if err := func() error {
				s.FailureReason.Reset()
				if err := s.FailureReason.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"failure_reason\"")
			}
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddPeeringPhoneNumbersCreatedUnprocessedNumbersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddPeeringPhoneNumbersCreatedUnprocessedNumbersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddPeeringPhoneNumbersCreatedUnprocessedNumbersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddPeeringPhoneNumbersReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddPeeringPhoneNumbersReq) encodeFields(e *jx.Encoder) {
	{
		if s.CarrierCode.Set {
			e.FieldStart("carrier_code")
			s.CarrierCode.Encode(e)
		}
	}
	{
		if s.PhoneNumbers != nil {
			e.FieldStart("phone_numbers")
			e.ArrStart()
			for _, elem := range s.PhoneNumbers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAddPeeringPhoneNumbersReq = [2]string{
	0: "carrier_code",
	1: "phone_numbers",
}

// Decode decodes AddPeeringPhoneNumbersReq from json.
func (s *AddPeeringPhoneNumbersReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddPeeringPhoneNumbersReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "carrier_code":
			if err := func() error {
				s.CarrierCode.Reset()
				if err := s.CarrierCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"carrier_code\"")
			}
		case "phone_numbers":
			if err := func() error {
				s.PhoneNumbers = make([]AddPeeringPhoneNumbersReqPhoneNumbersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AddPeeringPhoneNumbersReqPhoneNumbersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.PhoneNumbers = append(s.PhoneNumbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_numbers\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddPeeringPhoneNumbersReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddPeeringPhoneNumbersReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddPeeringPhoneNumbersReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddPeeringPhoneNumbersReqPhoneNumbersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddPeeringPhoneNumbersReqPhoneNumbersItem) encodeFields(e *jx.Encoder) {
	{
		if s.BillingReferenceID.Set {
			e.FieldStart("billing_reference_id")
			s.BillingReferenceID.Encode(e)
		}
	}
	{
		e.FieldStart("phone_number")
		e.Str(s.PhoneNumber)
	}
	{
		if s.ServiceInfo.Set {
			e.FieldStart("service_info")
			s.ServiceInfo.Encode(e)
		}
	}
	{
		e.FieldStart("sip_trunk_name")
		e.Str(s.SipTrunkName)
	}
	{
		e.FieldStart("status")
		e.Int(s.Status)
	}
}

var jsonFieldsNameOfAddPeeringPhoneNumbersReqPhoneNumbersItem = [5]string{
	0: "billing_reference_id",
	1: "phone_number",
	2: "service_info",
	3: "sip_trunk_name",
	4: "status",
}

// Decode decodes AddPeeringPhoneNumbersReqPhoneNumbersItem from json.
func (s *AddPeeringPhoneNumbersReqPhoneNumbersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddPeeringPhoneNumbersReqPhoneNumbersItem to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "billing_reference_id":
			if err := func() error {
				s.BillingReferenceID.Reset()
				if err := s.BillingReferenceID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"billing_reference_id\"")
			}
		case "phone_number":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.PhoneNumber = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		case "service_info":
			if err := func() error {
				s.ServiceInfo.Reset()
				if err := s.ServiceInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"service_info\"")
			}
		case "sip_trunk_name":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				v, err := d.Str()
				s.SipTrunkName = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sip_trunk_name\"")
			}
		case "status":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				v, err := d.Int()
				s.Status = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddPeeringPhoneNumbersReqPhoneNumbersItem")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00011010,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfAddPeeringPhoneNumbersReqPhoneNumbersItem) {
					name = jsonFieldsNameOfAddPeeringPhoneNumbersReqPhoneNumbersItem[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddPeeringPhoneNumbersReqPhoneNumbersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddPeeringPhoneNumbersReqPhoneNumbersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddPhoneDeviceCreated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddPhoneDeviceCreated) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddPhoneDeviceCreated = [2]string{
	0: "id",
	1: "display_name",
}

// Decode decodes AddPhoneDeviceCreated from json.
func (s *AddPhoneDeviceCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddPhoneDeviceCreated to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddPhoneDeviceCreated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddPhoneDeviceCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddPhoneDeviceCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddPhoneDeviceReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddPhoneDeviceReq) encodeFields(e *jx.Encoder) {
	{
		if s.AssignedTo.Set {
			e.FieldStart("assigned_to")
			s.AssignedTo.Encode(e)
		}
	}
	{
		e.FieldStart("assignee_extension_ids")
		e.ArrStart()
		for _, elem := range s.AssigneeExtensionIds {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("display_name")
		e.Str(s.DisplayName)
	}
	{
		e.FieldStart("mac_address")
		e.Str(s.MACAddress)
	}
	{
		if s.Model.Set {
			e.FieldStart("model")
			s.Model.Encode(e)
		}
	}
	{
		e.FieldStart("type")
		e.Str(s.Type)
	}
	{
		if s.ProvisionTemplateID.Set {
			e.FieldStart("provision_template_id")
			s.ProvisionTemplateID.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddPhoneDeviceReq = [7]string{
	0: "assigned_to",
	1: "assignee_extension_ids",
	2: "display_name",
	3: "mac_address",
	4: "model",
	5: "type",
	6: "provision_template_id",
}

// Decode decodes AddPhoneDeviceReq from json.
func (s *AddPhoneDeviceReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddPhoneDeviceReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "assigned_to":
			if err := func() error {
				s.AssignedTo.Reset()
				if err := s.AssignedTo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"assigned_to\"")
			}
		case "assignee_extension_ids":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				s.AssigneeExtensionIds = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.AssigneeExtensionIds = append(s.AssigneeExtensionIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"assignee_extension_ids\"")
			}
		case "display_name":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.DisplayName = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "mac_address":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				v, err := d.Str()
				s.MACAddress = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mac_address\"")
			}
		case "model":
			if err := func() error {
				s.Model.Reset()
				if err := s.Model.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"model\"")
			}
		case "type":
			requiredBitSet[0] |= 1 << 5
			if err := func() error {
				v, err := d.Str()
				s.Type = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "provision_template_id":
			if err := func() error {
				s.ProvisionTemplateID.Reset()
				if err := s.ProvisionTemplateID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provision_template_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddPhoneDeviceReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00101110,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfAddPhoneDeviceReq) {
					name = jsonFieldsNameOfAddPhoneDeviceReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddPhoneDeviceReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddPhoneDeviceReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddPolicyCreated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddPolicyCreated) encodeFields(e *jx.Encoder) {
	{
		if s.VoicemailAccessMember.Set {
			e.FieldStart("voicemail_access_member")
			s.VoicemailAccessMember.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddPolicyCreated = [1]string{
	0: "voicemail_access_member",
}

// Decode decodes AddPolicyCreated from json.
func (s *AddPolicyCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddPolicyCreated to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "voicemail_access_member":
			if err := func() error {
				s.VoicemailAccessMember.Reset()
				if err := s.VoicemailAccessMember.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voicemail_access_member\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddPolicyCreated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddPolicyCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddPolicyCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddPolicyCreatedVoicemailAccessMember) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddPolicyCreatedVoicemailAccessMember) encodeFields(e *jx.Encoder) {
	{
		if s.SharedID.Set {
			e.FieldStart("shared_id")
			s.SharedID.Encode(e)
		}
	}
	{
		if s.AccessUserID.Set {
			e.FieldStart("access_user_id")
			s.AccessUserID.Encode(e)
		}
	}
	{
		if s.Delete.Set {
			e.FieldStart("delete")
			s.Delete.Encode(e)
		}
	}
	{
		if s.Download.Set {
			e.FieldStart("download")
			s.Download.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddPolicyCreatedVoicemailAccessMember = [4]string{
	0: "shared_id",
	1: "access_user_id",
	2: "delete",
	3: "download",
}

// Decode decodes AddPolicyCreatedVoicemailAccessMember from json.
func (s *AddPolicyCreatedVoicemailAccessMember) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddPolicyCreatedVoicemailAccessMember to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shared_id":
			if err := func() error {
				s.SharedID.Reset()
				if err := s.SharedID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shared_id\"")
			}
		case "access_user_id":
			if err := func() error {
				s.AccessUserID.Reset()
				if err := s.AccessUserID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_user_id\"")
			}
		case "delete":
			if err := func() error {
				s.Delete.Reset()
				if err := s.Delete.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delete\"")
			}
		case "download":
			if err := func() error {
				s.Download.Reset()
				if err := s.Download.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"download\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddPolicyCreatedVoicemailAccessMember")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddPolicyCreatedVoicemailAccessMember) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddPolicyCreatedVoicemailAccessMember) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddPolicyReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddPolicyReq) encodeFields(e *jx.Encoder) {
	{
		if s.VoicemailAccessMember.Set {
			e.FieldStart("voicemail_access_member")
			s.VoicemailAccessMember.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddPolicyReq = [1]string{
	0: "voicemail_access_member",
}

// Decode decodes AddPolicyReq from json.
func (s *AddPolicyReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddPolicyReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "voicemail_access_member":
			if err := func() error {
				s.VoicemailAccessMember.Reset()
				if err := s.VoicemailAccessMember.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voicemail_access_member\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddPolicyReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddPolicyReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddPolicyReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddPolicyReqVoicemailAccessMember) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddPolicyReqVoicemailAccessMember) encodeFields(e *jx.Encoder) {
	{
		if s.AccessUserID.Set {
			e.FieldStart("access_user_id")
			s.AccessUserID.Encode(e)
		}
	}
	{
		if s.Delete.Set {
			e.FieldStart("delete")
			s.Delete.Encode(e)
		}
	}
	{
		if s.Download.Set {
			e.FieldStart("download")
			s.Download.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddPolicyReqVoicemailAccessMember = [3]string{
	0: "access_user_id",
	1: "delete",
	2: "download",
}

// Decode decodes AddPolicyReqVoicemailAccessMember from json.
func (s *AddPolicyReqVoicemailAccessMember) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddPolicyReqVoicemailAccessMember to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "access_user_id":
			if err := func() error {
				s.AccessUserID.Reset()
				if err := s.AccessUserID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_user_id\"")
			}
		case "delete":
			if err := func() error {
				s.Delete.Reset()
				if err := s.Delete.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delete\"")
			}
		case "download":
			if err := func() error {
				s.Download.Reset()
				if err := s.Download.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"download\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddPolicyReqVoicemailAccessMember")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddPolicyReqVoicemailAccessMember) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddPolicyReqVoicemailAccessMember) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddProvisionTemplateCreated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddProvisionTemplateCreated) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddProvisionTemplateCreated = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes AddProvisionTemplateCreated from json.
func (s *AddProvisionTemplateCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddProvisionTemplateCreated to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddProvisionTemplateCreated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddProvisionTemplateCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddProvisionTemplateCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddProvisionTemplateReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddProvisionTemplateReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("name")
		e.Str(s.Name)
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.Content.Set {
			e.FieldStart("content")
			s.Content.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddProvisionTemplateReq = [3]string{
	0: "name",
	1: "description",
	2: "content",
}

// Decode decodes AddProvisionTemplateReq from json.
func (s *AddProvisionTemplateReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddProvisionTemplateReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Name = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "content":
			if err := func() error {
				s.Content.Reset()
				if err := s.Content.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddProvisionTemplateReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfAddProvisionTemplateReq) {
					name = jsonFieldsNameOfAddProvisionTemplateReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddProvisionTemplateReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddProvisionTemplateReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddRoleMembersReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddRoleMembersReq) encodeFields(e *jx.Encoder) {
	{
		if s.RoleID.Set {
			e.FieldStart("role_id")
			s.RoleID.Encode(e)
		}
	}
	{
		if s.CopyTargets.Set {
			e.FieldStart("copy_targets")
			s.CopyTargets.Encode(e)
		}
	}
	{
		if s.CopyAllMembers.Set {
			e.FieldStart("copy_all_members")
			s.CopyAllMembers.Encode(e)
		}
	}
	{
		if s.UserIds != nil {
			e.FieldStart("user_ids")
			e.ArrStart()
			for _, elem := range s.UserIds {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAddRoleMembersReq = [4]string{
	0: "role_id",
	1: "copy_targets",
	2: "copy_all_members",
	3: "user_ids",
}

// Decode decodes AddRoleMembersReq from json.
func (s *AddRoleMembersReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddRoleMembersReq to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "role_id":
			if err := func() error {
				s.RoleID.Reset()
				if err := s.RoleID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"role_id\"")
			}
		case "copy_targets":
			if err := func() error {
				s.CopyTargets.Reset()
				if err := s.CopyTargets.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"copy_targets\"")
			}
		case "copy_all_members":
			if err := func() error {
				s.CopyAllMembers.Reset()
				if err := s.CopyAllMembers.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"copy_all_members\"")
			}
		case "user_ids":
			if err := func() error {
				s.UserIds = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.UserIds = append(s.UserIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"user_ids\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddRoleMembersReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddRoleMembersReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddRoleMembersReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddRoutingRuleCreated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddRoutingRuleCreated) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.RoutingRuleID.Set {
			e.FieldStart("routing_rule_id")
			s.RoutingRuleID.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddRoutingRuleCreated = [2]string{
	0: "name",
	1: "routing_rule_id",
}

// Decode decodes AddRoutingRuleCreated from json.
func (s *AddRoutingRuleCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddRoutingRuleCreated to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "routing_rule_id":
			if err := func() error {
				s.RoutingRuleID.Reset()
				if err := s.RoutingRuleID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"routing_rule_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddRoutingRuleCreated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddRoutingRuleCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddRoutingRuleCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddRoutingRuleReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddRoutingRuleReq) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.NumberPattern.Set {
			e.FieldStart("number_pattern")
			s.NumberPattern.Encode(e)
		}
	}
	{
		if s.SipGroupID.Set {
			e.FieldStart("sip_group_id")
			s.SipGroupID.Encode(e)
		}
	}
	{
		if s.SiteID.Set {
			e.FieldStart("site_id")
			s.SiteID.Encode(e)
		}
	}
	{
		if s.Translation.Set {
			e.FieldStart("translation")
			s.Translation.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddRoutingRuleReq = [6]string{
	0: "name",
	1: "number_pattern",
	2: "sip_group_id",
	3: "site_id",
	4: "translation",
	5: "type",
}

// Decode decodes AddRoutingRuleReq from json.
func (s *AddRoutingRuleReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddRoutingRuleReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "number_pattern":
			if err := func() error {
				s.NumberPattern.Reset()
				if err := s.NumberPattern.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number_pattern\"")
			}
		case "sip_group_id":
			if err := func() error {
				s.SipGroupID.Reset()
				if err := s.SipGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sip_group_id\"")
			}
		case "site_id":
			if err := func() error {
				s.SiteID.Reset()
				if err := s.SiteID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_id\"")
			}
		case "translation":
			if err := func() error {
				s.Translation.Reset()
				if err := s.Translation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"translation\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddRoutingRuleReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddRoutingRuleReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddRoutingRuleReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddSLGPolicySubSettingCreated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddSLGPolicySubSettingCreated) encodeFields(e *jx.Encoder) {
	{
		if s.VoicemailAccessMembers != nil {
			e.FieldStart("voicemail_access_members")
			e.ArrStart()
			for _, elem := range s.VoicemailAccessMembers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAddSLGPolicySubSettingCreated = [1]string{
	0: "voicemail_access_members",
}

// Decode decodes AddSLGPolicySubSettingCreated from json.
func (s *AddSLGPolicySubSettingCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddSLGPolicySubSettingCreated to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "voicemail_access_members":
			if err := func() error {
				s.VoicemailAccessMembers = make([]AddSLGPolicySubSettingCreatedVoicemailAccessMembersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AddSLGPolicySubSettingCreatedVoicemailAccessMembersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.VoicemailAccessMembers = append(s.VoicemailAccessMembers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voicemail_access_members\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddSLGPolicySubSettingCreated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddSLGPolicySubSettingCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddSLGPolicySubSettingCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddSLGPolicySubSettingCreatedVoicemailAccessMembersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddSLGPolicySubSettingCreatedVoicemailAccessMembersItem) encodeFields(e *jx.Encoder) {
	{
		if s.AccessUserID.Set {
			e.FieldStart("access_user_id")
			s.AccessUserID.Encode(e)
		}
	}
	{
		if s.AllowDownload.Set {
			e.FieldStart("allow_download")
			s.AllowDownload.Encode(e)
		}
	}
	{
		if s.AllowDelete.Set {
			e.FieldStart("allow_delete")
			s.AllowDelete.Encode(e)
		}
	}
	{
		if s.AllowSharing.Set {
			e.FieldStart("allow_sharing")
			s.AllowSharing.Encode(e)
		}
	}
	{
		if s.SharedID.Set {
			e.FieldStart("shared_id")
			s.SharedID.Encode(e)
		}
	}
	{
		if s.AccessUserType.Set {
			e.FieldStart("access_user_type")
			s.AccessUserType.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddSLGPolicySubSettingCreatedVoicemailAccessMembersItem = [6]string{
	0: "access_user_id",
	1: "allow_download",
	2: "allow_delete",
	3: "allow_sharing",
	4: "shared_id",
	5: "access_user_type",
}

// Decode decodes AddSLGPolicySubSettingCreatedVoicemailAccessMembersItem from json.
func (s *AddSLGPolicySubSettingCreatedVoicemailAccessMembersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddSLGPolicySubSettingCreatedVoicemailAccessMembersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "access_user_id":
			if err := func() error {
				s.AccessUserID.Reset()
				if err := s.AccessUserID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_user_id\"")
			}
		case "allow_download":
			if err := func() error {
				s.AllowDownload.Reset()
				if err := s.AllowDownload.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_download\"")
			}
		case "allow_delete":
			if err := func() error {
				s.AllowDelete.Reset()
				if err := s.AllowDelete.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_delete\"")
			}
		case "allow_sharing":
			if err := func() error {
				s.AllowSharing.Reset()
				if err := s.AllowSharing.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_sharing\"")
			}
		case "shared_id":
			if err := func() error {
				s.SharedID.Reset()
				if err := s.SharedID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shared_id\"")
			}
		case "access_user_type":
			if err := func() error {
				s.AccessUserType.Reset()
				if err := s.AccessUserType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_user_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddSLGPolicySubSettingCreatedVoicemailAccessMembersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddSLGPolicySubSettingCreatedVoicemailAccessMembersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddSLGPolicySubSettingCreatedVoicemailAccessMembersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddSLGPolicySubSettingReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddSLGPolicySubSettingReq) encodeFields(e *jx.Encoder) {
	{
		if s.VoicemailAccessMembers != nil {
			e.FieldStart("voicemail_access_members")
			e.ArrStart()
			for _, elem := range s.VoicemailAccessMembers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAddSLGPolicySubSettingReq = [1]string{
	0: "voicemail_access_members",
}

// Decode decodes AddSLGPolicySubSettingReq from json.
func (s *AddSLGPolicySubSettingReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddSLGPolicySubSettingReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "voicemail_access_members":
			if err := func() error {
				s.VoicemailAccessMembers = make([]AddSLGPolicySubSettingReqVoicemailAccessMembersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AddSLGPolicySubSettingReqVoicemailAccessMembersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.VoicemailAccessMembers = append(s.VoicemailAccessMembers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voicemail_access_members\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddSLGPolicySubSettingReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddSLGPolicySubSettingReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddSLGPolicySubSettingReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddSLGPolicySubSettingReqVoicemailAccessMembersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddSLGPolicySubSettingReqVoicemailAccessMembersItem) encodeFields(e *jx.Encoder) {
	{
		if s.AccessUserID.Set {
			e.FieldStart("access_user_id")
			s.AccessUserID.Encode(e)
		}
	}
	{
		if s.AllowDownload.Set {
			e.FieldStart("allow_download")
			s.AllowDownload.Encode(e)
		}
	}
	{
		if s.AllowDelete.Set {
			e.FieldStart("allow_delete")
			s.AllowDelete.Encode(e)
		}
	}
	{
		if s.AllowSharing.Set {
			e.FieldStart("allow_sharing")
			s.AllowSharing.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddSLGPolicySubSettingReqVoicemailAccessMembersItem = [4]string{
	0: "access_user_id",
	1: "allow_download",
	2: "allow_delete",
	3: "allow_sharing",
}

// Decode decodes AddSLGPolicySubSettingReqVoicemailAccessMembersItem from json.
func (s *AddSLGPolicySubSettingReqVoicemailAccessMembersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddSLGPolicySubSettingReqVoicemailAccessMembersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "access_user_id":
			if err := func() error {
				s.AccessUserID.Reset()
				if err := s.AccessUserID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_user_id\"")
			}
		case "allow_download":
			if err := func() error {
				s.AllowDownload.Reset()
				if err := s.AllowDownload.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_download\"")
			}
		case "allow_delete":
			if err := func() error {
				s.AllowDelete.Reset()
				if err := s.AllowDelete.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_delete\"")
			}
		case "allow_sharing":
			if err := func() error {
				s.AllowSharing.Reset()
				if err := s.AllowSharing.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_sharing\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddSLGPolicySubSettingReqVoicemailAccessMembersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddSLGPolicySubSettingReqVoicemailAccessMembersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddSLGPolicySubSettingReqVoicemailAccessMembersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddSettingTemplateCreated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddSettingTemplateCreated) encodeFields(e *jx.Encoder) {
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddSettingTemplateCreated = [4]string{
	0: "description",
	1: "id",
	2: "name",
	3: "type",
}

// Decode decodes AddSettingTemplateCreated from json.
func (s *AddSettingTemplateCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddSettingTemplateCreated to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddSettingTemplateCreated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddSettingTemplateCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddSettingTemplateCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddSettingTemplateReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddSettingTemplateReq) encodeFields(e *jx.Encoder) {
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		e.FieldStart("name")
		e.Str(s.Name)
	}
	{
		if s.SiteID.Set {
			e.FieldStart("site_id")
			s.SiteID.Encode(e)
		}
	}
	{
		e.FieldStart("type")
		e.Str(s.Type)
	}
}

var jsonFieldsNameOfAddSettingTemplateReq = [4]string{
	0: "description",
	1: "name",
	2: "site_id",
	3: "type",
}

// Decode decodes AddSettingTemplateReq from json.
func (s *AddSettingTemplateReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddSettingTemplateReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "name":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.Name = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "site_id":
			if err := func() error {
				s.SiteID.Reset()
				if err := s.SiteID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_id\"")
			}
		case "type":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				v, err := d.Str()
				s.Type = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddSettingTemplateReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00001010,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfAddSettingTemplateReq) {
					name = jsonFieldsNameOfAddSettingTemplateReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddSettingTemplateReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddSettingTemplateReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddSiteOutboundCallerNumbersReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddSiteOutboundCallerNumbersReq) encodeFields(e *jx.Encoder) {
	{
		if s.PhoneNumberIds != nil {
			e.FieldStart("phone_number_ids")
			e.ArrStart()
			for _, elem := range s.PhoneNumberIds {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAddSiteOutboundCallerNumbersReq = [1]string{
	0: "phone_number_ids",
}

// Decode decodes AddSiteOutboundCallerNumbersReq from json.
func (s *AddSiteOutboundCallerNumbersReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddSiteOutboundCallerNumbersReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "phone_number_ids":
			if err := func() error {
				s.PhoneNumberIds = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.PhoneNumberIds = append(s.PhoneNumberIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number_ids\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddSiteOutboundCallerNumbersReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddSiteOutboundCallerNumbersReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddSiteOutboundCallerNumbersReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddSiteOutboundCallingExceptionRuleCreated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddSiteOutboundCallingExceptionRuleCreated) encodeFields(e *jx.Encoder) {
	{
		if s.ExceptionRuleID.Set {
			e.FieldStart("exception_rule_id")
			s.ExceptionRuleID.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddSiteOutboundCallingExceptionRuleCreated = [1]string{
	0: "exception_rule_id",
}

// Decode decodes AddSiteOutboundCallingExceptionRuleCreated from json.
func (s *AddSiteOutboundCallingExceptionRuleCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddSiteOutboundCallingExceptionRuleCreated to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "exception_rule_id":
			if err := func() error {
				s.ExceptionRuleID.Reset()
				if err := s.ExceptionRuleID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exception_rule_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddSiteOutboundCallingExceptionRuleCreated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddSiteOutboundCallingExceptionRuleCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddSiteOutboundCallingExceptionRuleCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddSiteOutboundCallingExceptionRuleReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddSiteOutboundCallingExceptionRuleReq) encodeFields(e *jx.Encoder) {
	{
		if s.ExceptionRule.Set {
			e.FieldStart("exception_rule")
			s.ExceptionRule.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddSiteOutboundCallingExceptionRuleReq = [1]string{
	0: "exception_rule",
}

// Decode decodes AddSiteOutboundCallingExceptionRuleReq from json.
func (s *AddSiteOutboundCallingExceptionRuleReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddSiteOutboundCallingExceptionRuleReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "exception_rule":
			if err := func() error {
				s.ExceptionRule.Reset()
				if err := s.ExceptionRule.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exception_rule\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddSiteOutboundCallingExceptionRuleReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddSiteOutboundCallingExceptionRuleReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddSiteOutboundCallingExceptionRuleReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddSiteOutboundCallingExceptionRuleReqExceptionRule) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddSiteOutboundCallingExceptionRuleReqExceptionRule) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("match_type")
		e.Str(s.MatchType)
	}
	{
		e.FieldStart("prefix_number")
		e.Str(s.PrefixNumber)
	}
	{
		if s.Comment.Set {
			e.FieldStart("comment")
			s.Comment.Encode(e)
		}
	}
	{
		e.FieldStart("status")
		e.Str(s.Status)
	}
	{
		e.FieldStart("country")
		e.Str(s.Country)
	}
}

var jsonFieldsNameOfAddSiteOutboundCallingExceptionRuleReqExceptionRule = [5]string{
	0: "match_type",
	1: "prefix_number",
	2: "comment",
	3: "status",
	4: "country",
}

// Decode decodes AddSiteOutboundCallingExceptionRuleReqExceptionRule from json.
func (s *AddSiteOutboundCallingExceptionRuleReqExceptionRule) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddSiteOutboundCallingExceptionRuleReqExceptionRule to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "match_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.MatchType = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"match_type\"")
			}
		case "prefix_number":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.PrefixNumber = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"prefix_number\"")
			}
		case "comment":
			if err := func() error {
				s.Comment.Reset()
				if err := s.Comment.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"comment\"")
			}
		case "status":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				v, err := d.Str()
				s.Status = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "country":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				v, err := d.Str()
				s.Country = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddSiteOutboundCallingExceptionRuleReqExceptionRule")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00011011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfAddSiteOutboundCallingExceptionRuleReqExceptionRule) {
					name = jsonFieldsNameOfAddSiteOutboundCallingExceptionRuleReqExceptionRule[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddSiteOutboundCallingExceptionRuleReqExceptionRule) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddSiteOutboundCallingExceptionRuleReqExceptionRule) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddSiteSettingCreated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddSiteSettingCreated) encodeFields(e *jx.Encoder) {
	{
		if s.Holidays != nil {
			e.FieldStart("holidays")
			e.ArrStart()
			for _, elem := range s.Holidays {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAddSiteSettingCreated = [1]string{
	0: "holidays",
}

// Decode decodes AddSiteSettingCreated from json.
func (s *AddSiteSettingCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddSiteSettingCreated to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "holidays":
			if err := func() error {
				s.Holidays = make([]AddSiteSettingCreatedHolidaysItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AddSiteSettingCreatedHolidaysItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Holidays = append(s.Holidays, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holidays\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddSiteSettingCreated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddSiteSettingCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddSiteSettingCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddSiteSettingCreatedHolidaysItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddSiteSettingCreatedHolidaysItem) encodeFields(e *jx.Encoder) {
	{
		if s.HolidayID.Set {
			e.FieldStart("holiday_id")
			s.HolidayID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.From.Set {
			e.FieldStart("from")
			s.From.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.To.Set {
			e.FieldStart("to")
			s.To.Encode(e, json.EncodeDateTime)
		}
	}
}

var jsonFieldsNameOfAddSiteSettingCreatedHolidaysItem = [4]string{
	0: "holiday_id",
	1: "name",
	2: "from",
	3: "to",
}

// Decode decodes AddSiteSettingCreatedHolidaysItem from json.
func (s *AddSiteSettingCreatedHolidaysItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddSiteSettingCreatedHolidaysItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "holiday_id":
			if err := func() error {
				s.HolidayID.Reset()
				if err := s.HolidayID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holiday_id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "from":
			if err := func() error {
				s.From.Reset()
				if err := s.From.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"from\"")
			}
		case "to":
			if err := func() error {
				s.To.Reset()
				if err := s.To.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"to\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddSiteSettingCreatedHolidaysItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddSiteSettingCreatedHolidaysItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddSiteSettingCreatedHolidaysItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddSiteSettingReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddSiteSettingReq) encodeFields(e *jx.Encoder) {
	{
		if s.DeviceType.Set {
			e.FieldStart("device_type")
			s.DeviceType.Encode(e)
		}
	}
	{
		if s.Holidays != nil {
			e.FieldStart("holidays")
			e.ArrStart()
			for _, elem := range s.Holidays {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAddSiteSettingReq = [2]string{
	0: "device_type",
	1: "holidays",
}

// Decode decodes AddSiteSettingReq from json.
func (s *AddSiteSettingReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddSiteSettingReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "device_type":
			if err := func() error {
				s.DeviceType.Reset()
				if err := s.DeviceType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_type\"")
			}
		case "holidays":
			if err := func() error {
				s.Holidays = make([]AddSiteSettingReqHolidaysItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AddSiteSettingReqHolidaysItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Holidays = append(s.Holidays, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holidays\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddSiteSettingReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddSiteSettingReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddSiteSettingReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddSiteSettingReqHolidaysItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddSiteSettingReqHolidaysItem) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.From.Set {
			e.FieldStart("from")
			s.From.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.To.Set {
			e.FieldStart("to")
			s.To.Encode(e, json.EncodeDateTime)
		}
	}
}

var jsonFieldsNameOfAddSiteSettingReqHolidaysItem = [3]string{
	0: "name",
	1: "from",
	2: "to",
}

// Decode decodes AddSiteSettingReqHolidaysItem from json.
func (s *AddSiteSettingReqHolidaysItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddSiteSettingReqHolidaysItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "from":
			if err := func() error {
				s.From.Reset()
				if err := s.From.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"from\"")
			}
		case "to":
			if err := func() error {
				s.To.Reset()
				if err := s.To.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"to\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddSiteSettingReqHolidaysItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddSiteSettingReqHolidaysItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddSiteSettingReqHolidaysItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddUserOutboundCallerNumbersReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddUserOutboundCallerNumbersReq) encodeFields(e *jx.Encoder) {
	{
		if s.PhoneNumberIds != nil {
			e.FieldStart("phone_number_ids")
			e.ArrStart()
			for _, elem := range s.PhoneNumberIds {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAddUserOutboundCallerNumbersReq = [1]string{
	0: "phone_number_ids",
}

// Decode decodes AddUserOutboundCallerNumbersReq from json.
func (s *AddUserOutboundCallerNumbersReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddUserOutboundCallerNumbersReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "phone_number_ids":
			if err := func() error {
				s.PhoneNumberIds = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.PhoneNumberIds = append(s.PhoneNumberIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number_ids\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddUserOutboundCallerNumbersReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddUserOutboundCallerNumbersReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddUserOutboundCallerNumbersReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddUserOutboundCallingExceptionRuleCreated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddUserOutboundCallingExceptionRuleCreated) encodeFields(e *jx.Encoder) {
	{
		if s.ExceptionRuleID.Set {
			e.FieldStart("exception_rule_id")
			s.ExceptionRuleID.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddUserOutboundCallingExceptionRuleCreated = [1]string{
	0: "exception_rule_id",
}

// Decode decodes AddUserOutboundCallingExceptionRuleCreated from json.
func (s *AddUserOutboundCallingExceptionRuleCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddUserOutboundCallingExceptionRuleCreated to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "exception_rule_id":
			if err := func() error {
				s.ExceptionRuleID.Reset()
				if err := s.ExceptionRuleID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exception_rule_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddUserOutboundCallingExceptionRuleCreated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddUserOutboundCallingExceptionRuleCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddUserOutboundCallingExceptionRuleCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddUserOutboundCallingExceptionRuleReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddUserOutboundCallingExceptionRuleReq) encodeFields(e *jx.Encoder) {
	{
		if s.ExceptionRule.Set {
			e.FieldStart("exception_rule")
			s.ExceptionRule.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddUserOutboundCallingExceptionRuleReq = [1]string{
	0: "exception_rule",
}

// Decode decodes AddUserOutboundCallingExceptionRuleReq from json.
func (s *AddUserOutboundCallingExceptionRuleReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddUserOutboundCallingExceptionRuleReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "exception_rule":
			if err := func() error {
				s.ExceptionRule.Reset()
				if err := s.ExceptionRule.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exception_rule\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddUserOutboundCallingExceptionRuleReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddUserOutboundCallingExceptionRuleReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddUserOutboundCallingExceptionRuleReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddUserOutboundCallingExceptionRuleReqExceptionRule) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddUserOutboundCallingExceptionRuleReqExceptionRule) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("match_type")
		e.Str(s.MatchType)
	}
	{
		e.FieldStart("prefix_number")
		e.Str(s.PrefixNumber)
	}
	{
		if s.Comment.Set {
			e.FieldStart("comment")
			s.Comment.Encode(e)
		}
	}
	{
		e.FieldStart("status")
		e.Str(s.Status)
	}
	{
		e.FieldStart("country")
		e.Str(s.Country)
	}
}

var jsonFieldsNameOfAddUserOutboundCallingExceptionRuleReqExceptionRule = [5]string{
	0: "match_type",
	1: "prefix_number",
	2: "comment",
	3: "status",
	4: "country",
}

// Decode decodes AddUserOutboundCallingExceptionRuleReqExceptionRule from json.
func (s *AddUserOutboundCallingExceptionRuleReqExceptionRule) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddUserOutboundCallingExceptionRuleReqExceptionRule to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "match_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.MatchType = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"match_type\"")
			}
		case "prefix_number":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.PrefixNumber = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"prefix_number\"")
			}
		case "comment":
			if err := func() error {
				s.Comment.Reset()
				if err := s.Comment.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"comment\"")
			}
		case "status":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				v, err := d.Str()
				s.Status = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "country":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				v, err := d.Str()
				s.Country = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddUserOutboundCallingExceptionRuleReqExceptionRule")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00011011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfAddUserOutboundCallingExceptionRuleReqExceptionRule) {
					name = jsonFieldsNameOfAddUserOutboundCallingExceptionRuleReqExceptionRule[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddUserOutboundCallingExceptionRuleReqExceptionRule) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddUserOutboundCallingExceptionRuleReqExceptionRule) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddUserSettingCreated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddUserSettingCreated) encodeFields(e *jx.Encoder) {
	{
		if s.Delegation.Set {
			e.FieldStart("delegation")
			s.Delegation.Encode(e)
		}
	}
	{
		if s.VoiceMail.Set {
			e.FieldStart("voice_mail")
			s.VoiceMail.Encode(e)
		}
	}
	{
		if s.VoicemailAccessMembers != nil {
			e.FieldStart("voicemail_access_members")
			e.ArrStart()
			for _, elem := range s.VoicemailAccessMembers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.AutoCallRecordingAccessMembers != nil {
			e.FieldStart("auto_call_recording_access_members")
			e.ArrStart()
			for _, elem := range s.AutoCallRecordingAccessMembers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.AdHocCallRecordingAccessMembers != nil {
			e.FieldStart("ad_hoc_call_recording_access_members")
			e.ArrStart()
			for _, elem := range s.AdHocCallRecordingAccessMembers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAddUserSettingCreated = [5]string{
	0: "delegation",
	1: "voice_mail",
	2: "voicemail_access_members",
	3: "auto_call_recording_access_members",
	4: "ad_hoc_call_recording_access_members",
}

// Decode decodes AddUserSettingCreated from json.
func (s *AddUserSettingCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddUserSettingCreated to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "delegation":
			if err := func() error {
				s.Delegation.Reset()
				if err := s.Delegation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delegation\"")
			}
		case "voice_mail":
			if err := func() error {
				s.VoiceMail.Reset()
				if err := s.VoiceMail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voice_mail\"")
			}
		case "voicemail_access_members":
			if err := func() error {
				s.VoicemailAccessMembers = make([]AddUserSettingCreatedVoicemailAccessMembersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AddUserSettingCreatedVoicemailAccessMembersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.VoicemailAccessMembers = append(s.VoicemailAccessMembers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voicemail_access_members\"")
			}
		case "auto_call_recording_access_members":
			if err := func() error {
				s.AutoCallRecordingAccessMembers = make([]AddUserSettingCreatedAutoCallRecordingAccessMembersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AddUserSettingCreatedAutoCallRecordingAccessMembersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.AutoCallRecordingAccessMembers = append(s.AutoCallRecordingAccessMembers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_call_recording_access_members\"")
			}
		case "ad_hoc_call_recording_access_members":
			if err := func() error {
				s.AdHocCallRecordingAccessMembers = make([]AddUserSettingCreatedAdHocCallRecordingAccessMembersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AddUserSettingCreatedAdHocCallRecordingAccessMembersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.AdHocCallRecordingAccessMembers = append(s.AdHocCallRecordingAccessMembers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ad_hoc_call_recording_access_members\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddUserSettingCreated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddUserSettingCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddUserSettingCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddUserSettingCreatedAdHocCallRecordingAccessMembersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddUserSettingCreatedAdHocCallRecordingAccessMembersItem) encodeFields(e *jx.Encoder) {
	{
		if s.AccessUserID.Set {
			e.FieldStart("access_user_id")
			s.AccessUserID.Encode(e)
		}
	}
	{
		if s.AllowDelete.Set {
			e.FieldStart("allow_delete")
			s.AllowDelete.Encode(e)
		}
	}
	{
		if s.AllowDownload.Set {
			e.FieldStart("allow_download")
			s.AllowDownload.Encode(e)
		}
	}
	{
		if s.SharedID.Set {
			e.FieldStart("shared_id")
			s.SharedID.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddUserSettingCreatedAdHocCallRecordingAccessMembersItem = [4]string{
	0: "access_user_id",
	1: "allow_delete",
	2: "allow_download",
	3: "shared_id",
}

// Decode decodes AddUserSettingCreatedAdHocCallRecordingAccessMembersItem from json.
func (s *AddUserSettingCreatedAdHocCallRecordingAccessMembersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddUserSettingCreatedAdHocCallRecordingAccessMembersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "access_user_id":
			if err := func() error {
				s.AccessUserID.Reset()
				if err := s.AccessUserID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_user_id\"")
			}
		case "allow_delete":
			if err := func() error {
				s.AllowDelete.Reset()
				if err := s.AllowDelete.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_delete\"")
			}
		case "allow_download":
			if err := func() error {
				s.AllowDownload.Reset()
				if err := s.AllowDownload.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_download\"")
			}
		case "shared_id":
			if err := func() error {
				s.SharedID.Reset()
				if err := s.SharedID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shared_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddUserSettingCreatedAdHocCallRecordingAccessMembersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddUserSettingCreatedAdHocCallRecordingAccessMembersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddUserSettingCreatedAdHocCallRecordingAccessMembersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddUserSettingCreatedAutoCallRecordingAccessMembersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddUserSettingCreatedAutoCallRecordingAccessMembersItem) encodeFields(e *jx.Encoder) {
	{
		if s.AccessUserID.Set {
			e.FieldStart("access_user_id")
			s.AccessUserID.Encode(e)
		}
	}
	{
		if s.AllowDelete.Set {
			e.FieldStart("allow_delete")
			s.AllowDelete.Encode(e)
		}
	}
	{
		if s.AllowDownload.Set {
			e.FieldStart("allow_download")
			s.AllowDownload.Encode(e)
		}
	}
	{
		if s.SharedID.Set {
			e.FieldStart("shared_id")
			s.SharedID.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddUserSettingCreatedAutoCallRecordingAccessMembersItem = [4]string{
	0: "access_user_id",
	1: "allow_delete",
	2: "allow_download",
	3: "shared_id",
}

// Decode decodes AddUserSettingCreatedAutoCallRecordingAccessMembersItem from json.
func (s *AddUserSettingCreatedAutoCallRecordingAccessMembersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddUserSettingCreatedAutoCallRecordingAccessMembersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "access_user_id":
			if err := func() error {
				s.AccessUserID.Reset()
				if err := s.AccessUserID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_user_id\"")
			}
		case "allow_delete":
			if err := func() error {
				s.AllowDelete.Reset()
				if err := s.AllowDelete.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_delete\"")
			}
		case "allow_download":
			if err := func() error {
				s.AllowDownload.Reset()
				if err := s.AllowDownload.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_download\"")
			}
		case "shared_id":
			if err := func() error {
				s.SharedID.Reset()
				if err := s.SharedID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shared_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddUserSettingCreatedAutoCallRecordingAccessMembersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddUserSettingCreatedAutoCallRecordingAccessMembersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddUserSettingCreatedAutoCallRecordingAccessMembersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddUserSettingCreatedDelegation) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddUserSettingCreatedDelegation) encodeFields(e *jx.Encoder) {
	{
		if s.Assistants != nil {
			e.FieldStart("assistants")
			e.ArrStart()
			for _, elem := range s.Assistants {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Privacy.Set {
			e.FieldStart("privacy")
			s.Privacy.Encode(e)
		}
	}
	{
		if s.Privileges != nil {
			e.FieldStart("privileges")
			e.ArrStart()
			for _, elem := range s.Privileges {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAddUserSettingCreatedDelegation = [3]string{
	0: "assistants",
	1: "privacy",
	2: "privileges",
}

// Decode decodes AddUserSettingCreatedDelegation from json.
func (s *AddUserSettingCreatedDelegation) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddUserSettingCreatedDelegation to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "assistants":
			if err := func() error {
				s.Assistants = make([]AddUserSettingCreatedDelegationAssistantsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AddUserSettingCreatedDelegationAssistantsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Assistants = append(s.Assistants, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"assistants\"")
			}
		case "privacy":
			if err := func() error {
				s.Privacy.Reset()
				if err := s.Privacy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"privacy\"")
			}
		case "privileges":
			if err := func() error {
				s.Privileges = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.Privileges = append(s.Privileges, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"privileges\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddUserSettingCreatedDelegation")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddUserSettingCreatedDelegation) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddUserSettingCreatedDelegation) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddUserSettingCreatedDelegationAssistantsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddUserSettingCreatedDelegationAssistantsItem) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ExtensionType.Set {
			e.FieldStart("extension_type")
			s.ExtensionType.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddUserSettingCreatedDelegationAssistantsItem = [5]string{
	0: "display_name",
	1: "extension_id",
	2: "extension_number",
	3: "extension_type",
	4: "id",
}

// Decode decodes AddUserSettingCreatedDelegationAssistantsItem from json.
func (s *AddUserSettingCreatedDelegationAssistantsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddUserSettingCreatedDelegationAssistantsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "extension_type":
			if err := func() error {
				s.ExtensionType.Reset()
				if err := s.ExtensionType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_type\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddUserSettingCreatedDelegationAssistantsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddUserSettingCreatedDelegationAssistantsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddUserSettingCreatedDelegationAssistantsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddUserSettingCreatedVoiceMail) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddUserSettingCreatedVoiceMail) encodeFields(e *jx.Encoder) {
	{
		if s.AccessUserID.Set {
			e.FieldStart("access_user_id")
			s.AccessUserID.Encode(e)
		}
	}
	{
		if s.Delete.Set {
			e.FieldStart("delete")
			s.Delete.Encode(e)
		}
	}
	{
		if s.Download.Set {
			e.FieldStart("download")
			s.Download.Encode(e)
		}
	}
	{
		if s.SharedID.Set {
			e.FieldStart("shared_id")
			s.SharedID.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddUserSettingCreatedVoiceMail = [4]string{
	0: "access_user_id",
	1: "delete",
	2: "download",
	3: "shared_id",
}

// Decode decodes AddUserSettingCreatedVoiceMail from json.
func (s *AddUserSettingCreatedVoiceMail) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddUserSettingCreatedVoiceMail to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "access_user_id":
			if err := func() error {
				s.AccessUserID.Reset()
				if err := s.AccessUserID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_user_id\"")
			}
		case "delete":
			if err := func() error {
				s.Delete.Reset()
				if err := s.Delete.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delete\"")
			}
		case "download":
			if err := func() error {
				s.Download.Reset()
				if err := s.Download.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"download\"")
			}
		case "shared_id":
			if err := func() error {
				s.SharedID.Reset()
				if err := s.SharedID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shared_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddUserSettingCreatedVoiceMail")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddUserSettingCreatedVoiceMail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddUserSettingCreatedVoiceMail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddUserSettingCreatedVoicemailAccessMembersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddUserSettingCreatedVoicemailAccessMembersItem) encodeFields(e *jx.Encoder) {
	{
		if s.AccessUserID.Set {
			e.FieldStart("access_user_id")
			s.AccessUserID.Encode(e)
		}
	}
	{
		if s.AllowDelete.Set {
			e.FieldStart("allow_delete")
			s.AllowDelete.Encode(e)
		}
	}
	{
		if s.AllowDownload.Set {
			e.FieldStart("allow_download")
			s.AllowDownload.Encode(e)
		}
	}
	{
		if s.AllowSharing.Set {
			e.FieldStart("allow_sharing")
			s.AllowSharing.Encode(e)
		}
	}
	{
		if s.SharedID.Set {
			e.FieldStart("shared_id")
			s.SharedID.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddUserSettingCreatedVoicemailAccessMembersItem = [5]string{
	0: "access_user_id",
	1: "allow_delete",
	2: "allow_download",
	3: "allow_sharing",
	4: "shared_id",
}

// Decode decodes AddUserSettingCreatedVoicemailAccessMembersItem from json.
func (s *AddUserSettingCreatedVoicemailAccessMembersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddUserSettingCreatedVoicemailAccessMembersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "access_user_id":
			if err := func() error {
				s.AccessUserID.Reset()
				if err := s.AccessUserID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_user_id\"")
			}
		case "allow_delete":
			if err := func() error {
				s.AllowDelete.Reset()
				if err := s.AllowDelete.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_delete\"")
			}
		case "allow_download":
			if err := func() error {
				s.AllowDownload.Reset()
				if err := s.AllowDownload.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_download\"")
			}
		case "allow_sharing":
			if err := func() error {
				s.AllowSharing.Reset()
				if err := s.AllowSharing.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_sharing\"")
			}
		case "shared_id":
			if err := func() error {
				s.SharedID.Reset()
				if err := s.SharedID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shared_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddUserSettingCreatedVoicemailAccessMembersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddUserSettingCreatedVoicemailAccessMembersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddUserSettingCreatedVoicemailAccessMembersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddUserSettingReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddUserSettingReq) encodeFields(e *jx.Encoder) {
	{
		if s.DelegationAssistantExtensionID.Set {
			e.FieldStart("delegation_assistant_extension_id")
			s.DelegationAssistantExtensionID.Encode(e)
		}
	}
	{
		if s.DeviceID.Set {
			e.FieldStart("device_id")
			s.DeviceID.Encode(e)
		}
	}
	{
		if s.VoiceMail.Set {
			e.FieldStart("voice_mail")
			s.VoiceMail.Encode(e)
		}
	}
	{
		if s.VoicemailAccessMembers != nil {
			e.FieldStart("voicemail_access_members")
			e.ArrStart()
			for _, elem := range s.VoicemailAccessMembers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.AutoCallRecordingAccessMembers != nil {
			e.FieldStart("auto_call_recording_access_members")
			e.ArrStart()
			for _, elem := range s.AutoCallRecordingAccessMembers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.AdHocCallRecordingAccessMembers != nil {
			e.FieldStart("ad_hoc_call_recording_access_members")
			e.ArrStart()
			for _, elem := range s.AdHocCallRecordingAccessMembers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAddUserSettingReq = [6]string{
	0: "delegation_assistant_extension_id",
	1: "device_id",
	2: "voice_mail",
	3: "voicemail_access_members",
	4: "auto_call_recording_access_members",
	5: "ad_hoc_call_recording_access_members",
}

// Decode decodes AddUserSettingReq from json.
func (s *AddUserSettingReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddUserSettingReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "delegation_assistant_extension_id":
			if err := func() error {
				s.DelegationAssistantExtensionID.Reset()
				if err := s.DelegationAssistantExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delegation_assistant_extension_id\"")
			}
		case "device_id":
			if err := func() error {
				s.DeviceID.Reset()
				if err := s.DeviceID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_id\"")
			}
		case "voice_mail":
			if err := func() error {
				s.VoiceMail.Reset()
				if err := s.VoiceMail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voice_mail\"")
			}
		case "voicemail_access_members":
			if err := func() error {
				s.VoicemailAccessMembers = make([]AddUserSettingReqVoicemailAccessMembersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AddUserSettingReqVoicemailAccessMembersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.VoicemailAccessMembers = append(s.VoicemailAccessMembers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voicemail_access_members\"")
			}
		case "auto_call_recording_access_members":
			if err := func() error {
				s.AutoCallRecordingAccessMembers = make([]AddUserSettingReqAutoCallRecordingAccessMembersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AddUserSettingReqAutoCallRecordingAccessMembersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.AutoCallRecordingAccessMembers = append(s.AutoCallRecordingAccessMembers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_call_recording_access_members\"")
			}
		case "ad_hoc_call_recording_access_members":
			if err := func() error {
				s.AdHocCallRecordingAccessMembers = make([]AddUserSettingReqAdHocCallRecordingAccessMembersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AddUserSettingReqAdHocCallRecordingAccessMembersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.AdHocCallRecordingAccessMembers = append(s.AdHocCallRecordingAccessMembers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ad_hoc_call_recording_access_members\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddUserSettingReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddUserSettingReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddUserSettingReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddUserSettingReqAdHocCallRecordingAccessMembersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddUserSettingReqAdHocCallRecordingAccessMembersItem) encodeFields(e *jx.Encoder) {
	{
		if s.AccessUserID.Set {
			e.FieldStart("access_user_id")
			s.AccessUserID.Encode(e)
		}
	}
	{
		if s.AllowDelete.Set {
			e.FieldStart("allow_delete")
			s.AllowDelete.Encode(e)
		}
	}
	{
		if s.AllowDownload.Set {
			e.FieldStart("allow_download")
			s.AllowDownload.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddUserSettingReqAdHocCallRecordingAccessMembersItem = [3]string{
	0: "access_user_id",
	1: "allow_delete",
	2: "allow_download",
}

// Decode decodes AddUserSettingReqAdHocCallRecordingAccessMembersItem from json.
func (s *AddUserSettingReqAdHocCallRecordingAccessMembersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddUserSettingReqAdHocCallRecordingAccessMembersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "access_user_id":
			if err := func() error {
				s.AccessUserID.Reset()
				if err := s.AccessUserID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_user_id\"")
			}
		case "allow_delete":
			if err := func() error {
				s.AllowDelete.Reset()
				if err := s.AllowDelete.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_delete\"")
			}
		case "allow_download":
			if err := func() error {
				s.AllowDownload.Reset()
				if err := s.AllowDownload.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_download\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddUserSettingReqAdHocCallRecordingAccessMembersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddUserSettingReqAdHocCallRecordingAccessMembersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddUserSettingReqAdHocCallRecordingAccessMembersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddUserSettingReqAutoCallRecordingAccessMembersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddUserSettingReqAutoCallRecordingAccessMembersItem) encodeFields(e *jx.Encoder) {
	{
		if s.AccessUserID.Set {
			e.FieldStart("access_user_id")
			s.AccessUserID.Encode(e)
		}
	}
	{
		if s.AllowDelete.Set {
			e.FieldStart("allow_delete")
			s.AllowDelete.Encode(e)
		}
	}
	{
		if s.AllowDownload.Set {
			e.FieldStart("allow_download")
			s.AllowDownload.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddUserSettingReqAutoCallRecordingAccessMembersItem = [3]string{
	0: "access_user_id",
	1: "allow_delete",
	2: "allow_download",
}

// Decode decodes AddUserSettingReqAutoCallRecordingAccessMembersItem from json.
func (s *AddUserSettingReqAutoCallRecordingAccessMembersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddUserSettingReqAutoCallRecordingAccessMembersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "access_user_id":
			if err := func() error {
				s.AccessUserID.Reset()
				if err := s.AccessUserID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_user_id\"")
			}
		case "allow_delete":
			if err := func() error {
				s.AllowDelete.Reset()
				if err := s.AllowDelete.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_delete\"")
			}
		case "allow_download":
			if err := func() error {
				s.AllowDownload.Reset()
				if err := s.AllowDownload.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_download\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddUserSettingReqAutoCallRecordingAccessMembersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddUserSettingReqAutoCallRecordingAccessMembersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddUserSettingReqAutoCallRecordingAccessMembersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddUserSettingReqVoiceMail) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddUserSettingReqVoiceMail) encodeFields(e *jx.Encoder) {
	{
		if s.AccessUserID.Set {
			e.FieldStart("access_user_id")
			s.AccessUserID.Encode(e)
		}
	}
	{
		if s.Delete.Set {
			e.FieldStart("delete")
			s.Delete.Encode(e)
		}
	}
	{
		if s.Download.Set {
			e.FieldStart("download")
			s.Download.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddUserSettingReqVoiceMail = [3]string{
	0: "access_user_id",
	1: "delete",
	2: "download",
}

// Decode decodes AddUserSettingReqVoiceMail from json.
func (s *AddUserSettingReqVoiceMail) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddUserSettingReqVoiceMail to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "access_user_id":
			if err := func() error {
				s.AccessUserID.Reset()
				if err := s.AccessUserID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_user_id\"")
			}
		case "delete":
			if err := func() error {
				s.Delete.Reset()
				if err := s.Delete.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delete\"")
			}
		case "download":
			if err := func() error {
				s.Download.Reset()
				if err := s.Download.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"download\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddUserSettingReqVoiceMail")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddUserSettingReqVoiceMail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddUserSettingReqVoiceMail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddUserSettingReqVoicemailAccessMembersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddUserSettingReqVoicemailAccessMembersItem) encodeFields(e *jx.Encoder) {
	{
		if s.AccessUserID.Set {
			e.FieldStart("access_user_id")
			s.AccessUserID.Encode(e)
		}
	}
	{
		if s.AllowDelete.Set {
			e.FieldStart("allow_delete")
			s.AllowDelete.Encode(e)
		}
	}
	{
		if s.AllowDownload.Set {
			e.FieldStart("allow_download")
			s.AllowDownload.Encode(e)
		}
	}
	{
		if s.AllowSharing.Set {
			e.FieldStart("allow_sharing")
			s.AllowSharing.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddUserSettingReqVoicemailAccessMembersItem = [4]string{
	0: "access_user_id",
	1: "allow_delete",
	2: "allow_download",
	3: "allow_sharing",
}

// Decode decodes AddUserSettingReqVoicemailAccessMembersItem from json.
func (s *AddUserSettingReqVoicemailAccessMembersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddUserSettingReqVoicemailAccessMembersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "access_user_id":
			if err := func() error {
				s.AccessUserID.Reset()
				if err := s.AccessUserID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_user_id\"")
			}
		case "allow_delete":
			if err := func() error {
				s.AllowDelete.Reset()
				if err := s.AllowDelete.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_delete\"")
			}
		case "allow_download":
			if err := func() error {
				s.AllowDownload.Reset()
				if err := s.AllowDownload.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_download\"")
			}
		case "allow_sharing":
			if err := func() error {
				s.AllowSharing.Reset()
				if err := s.AllowSharing.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_sharing\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddUserSettingReqVoicemailAccessMembersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddUserSettingReqVoicemailAccessMembersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddUserSettingReqVoicemailAccessMembersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddUsersToDirectoryBySiteReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddUsersToDirectoryBySiteReq) encodeFields(e *jx.Encoder) {
	{
		if s.SiteID.Set {
			e.FieldStart("site_id")
			s.SiteID.Encode(e)
		}
	}
	{
		if s.ExtensionIds != nil {
			e.FieldStart("extension_ids")
			e.ArrStart()
			for _, elem := range s.ExtensionIds {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAddUsersToDirectoryBySiteReq = [2]string{
	0: "site_id",
	1: "extension_ids",
}

// Decode decodes AddUsersToDirectoryBySiteReq from json.
func (s *AddUsersToDirectoryBySiteReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddUsersToDirectoryBySiteReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "site_id":
			if err := func() error {
				s.SiteID.Reset()
				if err := s.SiteID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_id\"")
			}
		case "extension_ids":
			if err := func() error {
				s.ExtensionIds = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.ExtensionIds = append(s.ExtensionIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_ids\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddUsersToDirectoryBySiteReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddUsersToDirectoryBySiteReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddUsersToDirectoryBySiteReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddUsersToDirectoryReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddUsersToDirectoryReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("site_id")
		e.Str(s.SiteID)
	}
	{
		if s.ExtensionIds != nil {
			e.FieldStart("extension_ids")
			e.ArrStart()
			for _, elem := range s.ExtensionIds {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAddUsersToDirectoryReq = [2]string{
	0: "site_id",
	1: "extension_ids",
}

// Decode decodes AddUsersToDirectoryReq from json.
func (s *AddUsersToDirectoryReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddUsersToDirectoryReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "site_id":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.SiteID = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_id\"")
			}
		case "extension_ids":
			if err := func() error {
				s.ExtensionIds = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.ExtensionIds = append(s.ExtensionIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_ids\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddUsersToDirectoryReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfAddUsersToDirectoryReq) {
					name = jsonFieldsNameOfAddUsersToDirectoryReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddUsersToDirectoryReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddUsersToDirectoryReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddZoomRoomReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddZoomRoomReq) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.SiteID.Set {
			e.FieldStart("site_id")
			s.SiteID.Encode(e)
		}
	}
	{
		if s.CallingPlans != nil {
			e.FieldStart("calling_plans")
			e.ArrStart()
			for _, elem := range s.CallingPlans {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAddZoomRoomReq = [3]string{
	0: "id",
	1: "site_id",
	2: "calling_plans",
}

// Decode decodes AddZoomRoomReq from json.
func (s *AddZoomRoomReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddZoomRoomReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "site_id":
			if err := func() error {
				s.SiteID.Reset()
				if err := s.SiteID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_id\"")
			}
		case "calling_plans":
			if err := func() error {
				s.CallingPlans = make([]AddZoomRoomReqCallingPlansItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AddZoomRoomReqCallingPlansItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CallingPlans = append(s.CallingPlans, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"calling_plans\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddZoomRoomReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddZoomRoomReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddZoomRoomReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AddZoomRoomReqCallingPlansItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AddZoomRoomReqCallingPlansItem) encodeFields(e *jx.Encoder) {
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddZoomRoomReqCallingPlansItem = [1]string{
	0: "type",
}

// Decode decodes AddZoomRoomReqCallingPlansItem from json.
func (s *AddZoomRoomReqCallingPlansItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddZoomRoomReqCallingPlansItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AddZoomRoomReqCallingPlansItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AddZoomRoomReqCallingPlansItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddZoomRoomReqCallingPlansItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AssignCallingPlanReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AssignCallingPlanReq) encodeFields(e *jx.Encoder) {
	{
		if s.CallingPlans != nil {
			e.FieldStart("calling_plans")
			e.ArrStart()
			for _, elem := range s.CallingPlans {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAssignCallingPlanReq = [1]string{
	0: "calling_plans",
}

// Decode decodes AssignCallingPlanReq from json.
func (s *AssignCallingPlanReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AssignCallingPlanReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "calling_plans":
			if err := func() error {
				s.CallingPlans = make([]AssignCallingPlanReqCallingPlansItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AssignCallingPlanReqCallingPlansItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CallingPlans = append(s.CallingPlans, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"calling_plans\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AssignCallingPlanReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AssignCallingPlanReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AssignCallingPlanReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AssignCallingPlanReqCallingPlansItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AssignCallingPlanReqCallingPlansItem) encodeFields(e *jx.Encoder) {
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.BillingAccountID.Set {
			e.FieldStart("billing_account_id")
			s.BillingAccountID.Encode(e)
		}
	}
}

var jsonFieldsNameOfAssignCallingPlanReqCallingPlansItem = [2]string{
	0: "type",
	1: "billing_account_id",
}

// Decode decodes AssignCallingPlanReqCallingPlansItem from json.
func (s *AssignCallingPlanReqCallingPlansItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AssignCallingPlanReqCallingPlansItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "billing_account_id":
			if err := func() error {
				s.BillingAccountID.Reset()
				if err := s.BillingAccountID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"billing_account_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AssignCallingPlanReqCallingPlansItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AssignCallingPlanReqCallingPlansItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AssignCallingPlanReqCallingPlansItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AssignCallingPlanToRoomReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AssignCallingPlanToRoomReq) encodeFields(e *jx.Encoder) {
	{
		if s.CallingPlans != nil {
			e.FieldStart("calling_plans")
			e.ArrStart()
			for _, elem := range s.CallingPlans {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAssignCallingPlanToRoomReq = [1]string{
	0: "calling_plans",
}

// Decode decodes AssignCallingPlanToRoomReq from json.
func (s *AssignCallingPlanToRoomReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AssignCallingPlanToRoomReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "calling_plans":
			if err := func() error {
				s.CallingPlans = make([]AssignCallingPlanToRoomReqCallingPlansItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AssignCallingPlanToRoomReqCallingPlansItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CallingPlans = append(s.CallingPlans, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"calling_plans\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AssignCallingPlanToRoomReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AssignCallingPlanToRoomReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AssignCallingPlanToRoomReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AssignCallingPlanToRoomReqCallingPlansItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AssignCallingPlanToRoomReqCallingPlansItem) encodeFields(e *jx.Encoder) {
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.BillingAccountID.Set {
			e.FieldStart("billing_account_id")
			s.BillingAccountID.Encode(e)
		}
	}
}

var jsonFieldsNameOfAssignCallingPlanToRoomReqCallingPlansItem = [2]string{
	0: "type",
	1: "billing_account_id",
}

// Decode decodes AssignCallingPlanToRoomReqCallingPlansItem from json.
func (s *AssignCallingPlanToRoomReqCallingPlansItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AssignCallingPlanToRoomReqCallingPlansItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "billing_account_id":
			if err := func() error {
				s.BillingAccountID.Reset()
				if err := s.BillingAccountID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"billing_account_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AssignCallingPlanToRoomReqCallingPlansItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AssignCallingPlanToRoomReqCallingPlansItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AssignCallingPlanToRoomReqCallingPlansItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AssignCallingPlansToCommonAreaCreated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AssignCallingPlansToCommonAreaCreated) encodeFields(e *jx.Encoder) {
	{
		if s.CallingPlans != nil {
			e.FieldStart("calling_plans")
			e.ArrStart()
			for _, elem := range s.CallingPlans {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAssignCallingPlansToCommonAreaCreated = [1]string{
	0: "calling_plans",
}

// Decode decodes AssignCallingPlansToCommonAreaCreated from json.
func (s *AssignCallingPlansToCommonAreaCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AssignCallingPlansToCommonAreaCreated to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "calling_plans":
			if err := func() error {
				s.CallingPlans = make([]AssignCallingPlansToCommonAreaCreatedCallingPlansItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AssignCallingPlansToCommonAreaCreatedCallingPlansItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CallingPlans = append(s.CallingPlans, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"calling_plans\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AssignCallingPlansToCommonAreaCreated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AssignCallingPlansToCommonAreaCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AssignCallingPlansToCommonAreaCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AssignCallingPlansToCommonAreaCreatedCallingPlansItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AssignCallingPlansToCommonAreaCreatedCallingPlansItem) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.BillingAccountID.Set {
			e.FieldStart("billing_account_id")
			s.BillingAccountID.Encode(e)
		}
	}
	{
		if s.BillingAccountName.Set {
			e.FieldStart("billing_account_name")
			s.BillingAccountName.Encode(e)
		}
	}
}

var jsonFieldsNameOfAssignCallingPlansToCommonAreaCreatedCallingPlansItem = [4]string{
	0: "name",
	1: "type",
	2: "billing_account_id",
	3: "billing_account_name",
}

// Decode decodes AssignCallingPlansToCommonAreaCreatedCallingPlansItem from json.
func (s *AssignCallingPlansToCommonAreaCreatedCallingPlansItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AssignCallingPlansToCommonAreaCreatedCallingPlansItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "billing_account_id":
			if err := func() error {
				s.BillingAccountID.Reset()
				if err := s.BillingAccountID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"billing_account_id\"")
			}
		case "billing_account_name":
			if err := func() error {
				s.BillingAccountName.Reset()
				if err := s.BillingAccountName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"billing_account_name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AssignCallingPlansToCommonAreaCreatedCallingPlansItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AssignCallingPlansToCommonAreaCreatedCallingPlansItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AssignCallingPlansToCommonAreaCreatedCallingPlansItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AssignCallingPlansToCommonAreaReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AssignCallingPlansToCommonAreaReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("calling_plans")
		e.ArrStart()
		for _, elem := range s.CallingPlans {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
}

var jsonFieldsNameOfAssignCallingPlansToCommonAreaReq = [1]string{
	0: "calling_plans",
}

// Decode decodes AssignCallingPlansToCommonAreaReq from json.
func (s *AssignCallingPlansToCommonAreaReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AssignCallingPlansToCommonAreaReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "calling_plans":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				s.CallingPlans = make([]AssignCallingPlansToCommonAreaReqCallingPlansItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AssignCallingPlansToCommonAreaReqCallingPlansItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CallingPlans = append(s.CallingPlans, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"calling_plans\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AssignCallingPlansToCommonAreaReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfAssignCallingPlansToCommonAreaReq) {
					name = jsonFieldsNameOfAssignCallingPlansToCommonAreaReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AssignCallingPlansToCommonAreaReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AssignCallingPlansToCommonAreaReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AssignCallingPlansToCommonAreaReqCallingPlansItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AssignCallingPlansToCommonAreaReqCallingPlansItem) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("type")
		e.Int(s.Type)
	}
	{
		if s.BillingAccountID.Set {
			e.FieldStart("billing_account_id")
			s.BillingAccountID.Encode(e)
		}
	}
}

var jsonFieldsNameOfAssignCallingPlansToCommonAreaReqCallingPlansItem = [2]string{
	0: "type",
	1: "billing_account_id",
}

// Decode decodes AssignCallingPlansToCommonAreaReqCallingPlansItem from json.
func (s *AssignCallingPlansToCommonAreaReqCallingPlansItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AssignCallingPlansToCommonAreaReqCallingPlansItem to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Int()
				s.Type = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "billing_account_id":
			if err := func() error {
				s.BillingAccountID.Reset()
				if err := s.BillingAccountID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"billing_account_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AssignCallingPlansToCommonAreaReqCallingPlansItem")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfAssignCallingPlansToCommonAreaReqCallingPlansItem) {
					name = jsonFieldsNameOfAssignCallingPlansToCommonAreaReqCallingPlansItem[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AssignCallingPlansToCommonAreaReqCallingPlansItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AssignCallingPlansToCommonAreaReqCallingPlansItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AssignCampaignPhoneNumbersCreated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AssignCampaignPhoneNumbersCreated) encodeFields(e *jx.Encoder) {
	{
		if s.PhoneNumbers != nil {
			e.FieldStart("phone_numbers")
			e.ArrStart()
			for _, elem := range s.PhoneNumbers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAssignCampaignPhoneNumbersCreated = [1]string{
	0: "phone_numbers",
}

// Decode decodes AssignCampaignPhoneNumbersCreated from json.
func (s *AssignCampaignPhoneNumbersCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AssignCampaignPhoneNumbersCreated to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "phone_numbers":
			if err := func() error {
				s.PhoneNumbers = make([]AssignCampaignPhoneNumbersCreatedPhoneNumbersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AssignCampaignPhoneNumbersCreatedPhoneNumbersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.PhoneNumbers = append(s.PhoneNumbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_numbers\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AssignCampaignPhoneNumbersCreated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AssignCampaignPhoneNumbersCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AssignCampaignPhoneNumbersCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AssignCampaignPhoneNumbersCreatedPhoneNumbersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AssignCampaignPhoneNumbersCreatedPhoneNumbersItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Number.Set {
			e.FieldStart("number")
			s.Number.Encode(e)
		}
	}
}

var jsonFieldsNameOfAssignCampaignPhoneNumbersCreatedPhoneNumbersItem = [2]string{
	0: "id",
	1: "number",
}

// Decode decodes AssignCampaignPhoneNumbersCreatedPhoneNumbersItem from json.
func (s *AssignCampaignPhoneNumbersCreatedPhoneNumbersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AssignCampaignPhoneNumbersCreatedPhoneNumbersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "number":
			if err := func() error {
				s.Number.Reset()
				if err := s.Number.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AssignCampaignPhoneNumbersCreatedPhoneNumbersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AssignCampaignPhoneNumbersCreatedPhoneNumbersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AssignCampaignPhoneNumbersCreatedPhoneNumbersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AssignCampaignPhoneNumbersReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AssignCampaignPhoneNumbersReq) encodeFields(e *jx.Encoder) {
	{
		if s.PhoneNumbers != nil {
			e.FieldStart("phone_numbers")
			e.ArrStart()
			for _, elem := range s.PhoneNumbers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAssignCampaignPhoneNumbersReq = [1]string{
	0: "phone_numbers",
}

// Decode decodes AssignCampaignPhoneNumbersReq from json.
func (s *AssignCampaignPhoneNumbersReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AssignCampaignPhoneNumbersReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "phone_numbers":
			if err := func() error {
				s.PhoneNumbers = make([]AssignCampaignPhoneNumbersReqPhoneNumbersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AssignCampaignPhoneNumbersReqPhoneNumbersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.PhoneNumbers = append(s.PhoneNumbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_numbers\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AssignCampaignPhoneNumbersReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AssignCampaignPhoneNumbersReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AssignCampaignPhoneNumbersReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AssignCampaignPhoneNumbersReqPhoneNumbersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AssignCampaignPhoneNumbersReqPhoneNumbersItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Number.Set {
			e.FieldStart("number")
			s.Number.Encode(e)
		}
	}
}

var jsonFieldsNameOfAssignCampaignPhoneNumbersReqPhoneNumbersItem = [2]string{
	0: "id",
	1: "number",
}

// Decode decodes AssignCampaignPhoneNumbersReqPhoneNumbersItem from json.
func (s *AssignCampaignPhoneNumbersReqPhoneNumbersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AssignCampaignPhoneNumbersReqPhoneNumbersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "number":
			if err := func() error {
				s.Number.Reset()
				if err := s.Number.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AssignCampaignPhoneNumbersReqPhoneNumbersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AssignCampaignPhoneNumbersReqPhoneNumbersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AssignCampaignPhoneNumbersReqPhoneNumbersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AssignPhoneNumberCreated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AssignPhoneNumberCreated) encodeFields(e *jx.Encoder) {
	{
		if s.PhoneNumbers != nil {
			e.FieldStart("phone_numbers")
			e.ArrStart()
			for _, elem := range s.PhoneNumbers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAssignPhoneNumberCreated = [1]string{
	0: "phone_numbers",
}

// Decode decodes AssignPhoneNumberCreated from json.
func (s *AssignPhoneNumberCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AssignPhoneNumberCreated to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "phone_numbers":
			if err := func() error {
				s.PhoneNumbers = make([]AssignPhoneNumberCreatedPhoneNumbersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AssignPhoneNumberCreatedPhoneNumbersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.PhoneNumbers = append(s.PhoneNumbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_numbers\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AssignPhoneNumberCreated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AssignPhoneNumberCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AssignPhoneNumberCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AssignPhoneNumberCreatedPhoneNumbersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AssignPhoneNumberCreatedPhoneNumbersItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Number.Set {
			e.FieldStart("number")
			s.Number.Encode(e)
		}
	}
}

var jsonFieldsNameOfAssignPhoneNumberCreatedPhoneNumbersItem = [2]string{
	0: "id",
	1: "number",
}

// Decode decodes AssignPhoneNumberCreatedPhoneNumbersItem from json.
func (s *AssignPhoneNumberCreatedPhoneNumbersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AssignPhoneNumberCreatedPhoneNumbersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "number":
			if err := func() error {
				s.Number.Reset()
				if err := s.Number.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AssignPhoneNumberCreatedPhoneNumbersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AssignPhoneNumberCreatedPhoneNumbersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AssignPhoneNumberCreatedPhoneNumbersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AssignPhoneNumberReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AssignPhoneNumberReq) encodeFields(e *jx.Encoder) {
	{
		if s.PhoneNumbers != nil {
			e.FieldStart("phone_numbers")
			e.ArrStart()
			for _, elem := range s.PhoneNumbers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAssignPhoneNumberReq = [1]string{
	0: "phone_numbers",
}

// Decode decodes AssignPhoneNumberReq from json.
func (s *AssignPhoneNumberReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AssignPhoneNumberReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "phone_numbers":
			if err := func() error {
				s.PhoneNumbers = make([]AssignPhoneNumberReqPhoneNumbersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AssignPhoneNumberReqPhoneNumbersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.PhoneNumbers = append(s.PhoneNumbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_numbers\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AssignPhoneNumberReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AssignPhoneNumberReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AssignPhoneNumberReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AssignPhoneNumberReqPhoneNumbersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AssignPhoneNumberReqPhoneNumbersItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Number.Set {
			e.FieldStart("number")
			s.Number.Encode(e)
		}
	}
}

var jsonFieldsNameOfAssignPhoneNumberReqPhoneNumbersItem = [2]string{
	0: "id",
	1: "number",
}

// Decode decodes AssignPhoneNumberReqPhoneNumbersItem from json.
func (s *AssignPhoneNumberReqPhoneNumbersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AssignPhoneNumberReqPhoneNumbersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "number":
			if err := func() error {
				s.Number.Reset()
				if err := s.Number.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AssignPhoneNumberReqPhoneNumbersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AssignPhoneNumberReqPhoneNumbersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AssignPhoneNumberReqPhoneNumbersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AssignPhoneNumberToZoomRoomReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AssignPhoneNumberToZoomRoomReq) encodeFields(e *jx.Encoder) {
	{
		if s.PhoneNumbers != nil {
			e.FieldStart("phone_numbers")
			e.ArrStart()
			for _, elem := range s.PhoneNumbers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAssignPhoneNumberToZoomRoomReq = [1]string{
	0: "phone_numbers",
}

// Decode decodes AssignPhoneNumberToZoomRoomReq from json.
func (s *AssignPhoneNumberToZoomRoomReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AssignPhoneNumberToZoomRoomReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "phone_numbers":
			if err := func() error {
				s.PhoneNumbers = make([]AssignPhoneNumberToZoomRoomReqPhoneNumbersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AssignPhoneNumberToZoomRoomReqPhoneNumbersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.PhoneNumbers = append(s.PhoneNumbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_numbers\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AssignPhoneNumberToZoomRoomReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AssignPhoneNumberToZoomRoomReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AssignPhoneNumberToZoomRoomReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AssignPhoneNumberToZoomRoomReqPhoneNumbersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AssignPhoneNumberToZoomRoomReqPhoneNumbersItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Number.Set {
			e.FieldStart("number")
			s.Number.Encode(e)
		}
	}
}

var jsonFieldsNameOfAssignPhoneNumberToZoomRoomReqPhoneNumbersItem = [2]string{
	0: "id",
	1: "number",
}

// Decode decodes AssignPhoneNumberToZoomRoomReqPhoneNumbersItem from json.
func (s *AssignPhoneNumberToZoomRoomReqPhoneNumbersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AssignPhoneNumberToZoomRoomReqPhoneNumbersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "number":
			if err := func() error {
				s.Number.Reset()
				if err := s.Number.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AssignPhoneNumberToZoomRoomReqPhoneNumbersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AssignPhoneNumberToZoomRoomReqPhoneNumbersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AssignPhoneNumberToZoomRoomReqPhoneNumbersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AssignPhoneNumbersAutoReceptionistReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AssignPhoneNumbersAutoReceptionistReq) encodeFields(e *jx.Encoder) {
	{
		if s.PhoneNumbers != nil {
			e.FieldStart("phone_numbers")
			e.ArrStart()
			for _, elem := range s.PhoneNumbers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAssignPhoneNumbersAutoReceptionistReq = [1]string{
	0: "phone_numbers",
}

// Decode decodes AssignPhoneNumbersAutoReceptionistReq from json.
func (s *AssignPhoneNumbersAutoReceptionistReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AssignPhoneNumbersAutoReceptionistReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "phone_numbers":
			if err := func() error {
				s.PhoneNumbers = make([]AssignPhoneNumbersAutoReceptionistReqPhoneNumbersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AssignPhoneNumbersAutoReceptionistReqPhoneNumbersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.PhoneNumbers = append(s.PhoneNumbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_numbers\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AssignPhoneNumbersAutoReceptionistReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AssignPhoneNumbersAutoReceptionistReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AssignPhoneNumbersAutoReceptionistReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AssignPhoneNumbersAutoReceptionistReqPhoneNumbersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AssignPhoneNumbersAutoReceptionistReqPhoneNumbersItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Number.Set {
			e.FieldStart("number")
			s.Number.Encode(e)
		}
	}
}

var jsonFieldsNameOfAssignPhoneNumbersAutoReceptionistReqPhoneNumbersItem = [2]string{
	0: "id",
	1: "number",
}

// Decode decodes AssignPhoneNumbersAutoReceptionistReqPhoneNumbersItem from json.
func (s *AssignPhoneNumbersAutoReceptionistReqPhoneNumbersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AssignPhoneNumbersAutoReceptionistReqPhoneNumbersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "number":
			if err := func() error {
				s.Number.Reset()
				if err := s.Number.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AssignPhoneNumbersAutoReceptionistReqPhoneNumbersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AssignPhoneNumbersAutoReceptionistReqPhoneNumbersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AssignPhoneNumbersAutoReceptionistReqPhoneNumbersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AssignPhoneNumbersSLGReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AssignPhoneNumbersSLGReq) encodeFields(e *jx.Encoder) {
	{
		if s.PhoneNumbers != nil {
			e.FieldStart("phone_numbers")
			e.ArrStart()
			for _, elem := range s.PhoneNumbers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAssignPhoneNumbersSLGReq = [1]string{
	0: "phone_numbers",
}

// Decode decodes AssignPhoneNumbersSLGReq from json.
func (s *AssignPhoneNumbersSLGReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AssignPhoneNumbersSLGReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "phone_numbers":
			if err := func() error {
				s.PhoneNumbers = make([]AssignPhoneNumbersSLGReqPhoneNumbersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AssignPhoneNumbersSLGReqPhoneNumbersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.PhoneNumbers = append(s.PhoneNumbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_numbers\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AssignPhoneNumbersSLGReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AssignPhoneNumbersSLGReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AssignPhoneNumbersSLGReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AssignPhoneNumbersSLGReqPhoneNumbersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AssignPhoneNumbersSLGReqPhoneNumbersItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Number.Set {
			e.FieldStart("number")
			s.Number.Encode(e)
		}
	}
}

var jsonFieldsNameOfAssignPhoneNumbersSLGReqPhoneNumbersItem = [2]string{
	0: "id",
	1: "number",
}

// Decode decodes AssignPhoneNumbersSLGReqPhoneNumbersItem from json.
func (s *AssignPhoneNumbersSLGReqPhoneNumbersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AssignPhoneNumbersSLGReqPhoneNumbersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "number":
			if err := func() error {
				s.Number.Reset()
				if err := s.Number.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AssignPhoneNumbersSLGReqPhoneNumbersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AssignPhoneNumbersSLGReqPhoneNumbersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AssignPhoneNumbersSLGReqPhoneNumbersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AssignPhoneNumbersToCommonAreaCreated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AssignPhoneNumbersToCommonAreaCreated) encodeFields(e *jx.Encoder) {
	{
		if s.PhoneNumbers != nil {
			e.FieldStart("phone_numbers")
			e.ArrStart()
			for _, elem := range s.PhoneNumbers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAssignPhoneNumbersToCommonAreaCreated = [1]string{
	0: "phone_numbers",
}

// Decode decodes AssignPhoneNumbersToCommonAreaCreated from json.
func (s *AssignPhoneNumbersToCommonAreaCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AssignPhoneNumbersToCommonAreaCreated to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "phone_numbers":
			if err := func() error {
				s.PhoneNumbers = make([]AssignPhoneNumbersToCommonAreaCreatedPhoneNumbersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AssignPhoneNumbersToCommonAreaCreatedPhoneNumbersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.PhoneNumbers = append(s.PhoneNumbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_numbers\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AssignPhoneNumbersToCommonAreaCreated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AssignPhoneNumbersToCommonAreaCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AssignPhoneNumbersToCommonAreaCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AssignPhoneNumbersToCommonAreaCreatedPhoneNumbersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AssignPhoneNumbersToCommonAreaCreatedPhoneNumbersItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Number.Set {
			e.FieldStart("number")
			s.Number.Encode(e)
		}
	}
}

var jsonFieldsNameOfAssignPhoneNumbersToCommonAreaCreatedPhoneNumbersItem = [2]string{
	0: "id",
	1: "number",
}

// Decode decodes AssignPhoneNumbersToCommonAreaCreatedPhoneNumbersItem from json.
func (s *AssignPhoneNumbersToCommonAreaCreatedPhoneNumbersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AssignPhoneNumbersToCommonAreaCreatedPhoneNumbersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "number":
			if err := func() error {
				s.Number.Reset()
				if err := s.Number.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AssignPhoneNumbersToCommonAreaCreatedPhoneNumbersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AssignPhoneNumbersToCommonAreaCreatedPhoneNumbersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AssignPhoneNumbersToCommonAreaCreatedPhoneNumbersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AssignPhoneNumbersToCommonAreaReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AssignPhoneNumbersToCommonAreaReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("phone_numbers")
		e.ArrStart()
		for _, elem := range s.PhoneNumbers {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
}

var jsonFieldsNameOfAssignPhoneNumbersToCommonAreaReq = [1]string{
	0: "phone_numbers",
}

// Decode decodes AssignPhoneNumbersToCommonAreaReq from json.
func (s *AssignPhoneNumbersToCommonAreaReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AssignPhoneNumbersToCommonAreaReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "phone_numbers":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				s.PhoneNumbers = make([]AssignPhoneNumbersToCommonAreaReqPhoneNumbersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AssignPhoneNumbersToCommonAreaReqPhoneNumbersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.PhoneNumbers = append(s.PhoneNumbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_numbers\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AssignPhoneNumbersToCommonAreaReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfAssignPhoneNumbersToCommonAreaReq) {
					name = jsonFieldsNameOfAssignPhoneNumbersToCommonAreaReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AssignPhoneNumbersToCommonAreaReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AssignPhoneNumbersToCommonAreaReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AssignPhoneNumbersToCommonAreaReqPhoneNumbersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AssignPhoneNumbersToCommonAreaReqPhoneNumbersItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Number.Set {
			e.FieldStart("number")
			s.Number.Encode(e)
		}
	}
}

var jsonFieldsNameOfAssignPhoneNumbersToCommonAreaReqPhoneNumbersItem = [2]string{
	0: "id",
	1: "number",
}

// Decode decodes AssignPhoneNumbersToCommonAreaReqPhoneNumbersItem from json.
func (s *AssignPhoneNumbersToCommonAreaReqPhoneNumbersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AssignPhoneNumbersToCommonAreaReqPhoneNumbersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "number":
			if err := func() error {
				s.Number.Reset()
				if err := s.Number.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AssignPhoneNumbersToCommonAreaReqPhoneNumbersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AssignPhoneNumbersToCommonAreaReqPhoneNumbersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AssignPhoneNumbersToCommonAreaReqPhoneNumbersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AssignPhoneToCallQueueReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AssignPhoneToCallQueueReq) encodeFields(e *jx.Encoder) {
	{
		if s.PhoneNumbers != nil {
			e.FieldStart("phone_numbers")
			e.ArrStart()
			for _, elem := range s.PhoneNumbers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAssignPhoneToCallQueueReq = [1]string{
	0: "phone_numbers",
}

// Decode decodes AssignPhoneToCallQueueReq from json.
func (s *AssignPhoneToCallQueueReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AssignPhoneToCallQueueReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "phone_numbers":
			if err := func() error {
				s.PhoneNumbers = make([]AssignPhoneToCallQueueReqPhoneNumbersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AssignPhoneToCallQueueReqPhoneNumbersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.PhoneNumbers = append(s.PhoneNumbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_numbers\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AssignPhoneToCallQueueReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AssignPhoneToCallQueueReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AssignPhoneToCallQueueReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AssignPhoneToCallQueueReqPhoneNumbersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AssignPhoneToCallQueueReqPhoneNumbersItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Number.Set {
			e.FieldStart("number")
			s.Number.Encode(e)
		}
	}
}

var jsonFieldsNameOfAssignPhoneToCallQueueReqPhoneNumbersItem = [2]string{
	0: "id",
	1: "number",
}

// Decode decodes AssignPhoneToCallQueueReqPhoneNumbersItem from json.
func (s *AssignPhoneToCallQueueReqPhoneNumbersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AssignPhoneToCallQueueReqPhoneNumbersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "number":
			if err := func() error {
				s.Number.Reset()
				if err := s.Number.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AssignPhoneToCallQueueReqPhoneNumbersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AssignPhoneToCallQueueReqPhoneNumbersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AssignPhoneToCallQueueReqPhoneNumbersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *BatchAddLocationsCreated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *BatchAddLocationsCreated) encodeFields(e *jx.Encoder) {
	{
		if s.Locations != nil {
			e.FieldStart("locations")
			e.ArrStart()
			for _, elem := range s.Locations {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfBatchAddLocationsCreated = [1]string{
	0: "locations",
}

// Decode decodes BatchAddLocationsCreated from json.
func (s *BatchAddLocationsCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode BatchAddLocationsCreated to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "locations":
			if err := func() error {
				s.Locations = make([]BatchAddLocationsCreatedLocationsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem BatchAddLocationsCreatedLocationsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Locations = append(s.Locations, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locations\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode BatchAddLocationsCreated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *BatchAddLocationsCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *BatchAddLocationsCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *BatchAddLocationsCreatedLocationsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *BatchAddLocationsCreatedLocationsItem) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.LocationID.Set {
			e.FieldStart("location_id")
			s.LocationID.Encode(e)
		}
	}
}

var jsonFieldsNameOfBatchAddLocationsCreatedLocationsItem = [2]string{
	0: "display_name",
	1: "location_id",
}

// Decode decodes BatchAddLocationsCreatedLocationsItem from json.
func (s *BatchAddLocationsCreatedLocationsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode BatchAddLocationsCreatedLocationsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "location_id":
			if err := func() error {
				s.LocationID.Reset()
				if err := s.LocationID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"location_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode BatchAddLocationsCreatedLocationsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *BatchAddLocationsCreatedLocationsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *BatchAddLocationsCreatedLocationsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *BatchAddLocationsReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *BatchAddLocationsReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("locations")
		e.ArrStart()
		for _, elem := range s.Locations {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
	{
		if s.SiteID.Set {
			e.FieldStart("site_id")
			s.SiteID.Encode(e)
		}
	}
}

var jsonFieldsNameOfBatchAddLocationsReq = [2]string{
	0: "locations",
	1: "site_id",
}

// Decode decodes BatchAddLocationsReq from json.
func (s *BatchAddLocationsReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode BatchAddLocationsReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "locations":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				s.Locations = make([]BatchAddLocationsReqLocationsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem BatchAddLocationsReqLocationsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Locations = append(s.Locations, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locations\"")
			}
		case "site_id":
			if err := func() error {
				s.SiteID.Reset()
				if err := s.SiteID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode BatchAddLocationsReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfBatchAddLocationsReq) {
					name = jsonFieldsNameOfBatchAddLocationsReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *BatchAddLocationsReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *BatchAddLocationsReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *BatchAddLocationsReqLocationsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *BatchAddLocationsReqLocationsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Bssid.Set {
			e.FieldStart("bssid")
			s.Bssid.Encode(e)
		}
	}
	{
		e.FieldStart("company_address")
		s.CompanyAddress.Encode(e)
	}
	{
		e.FieldStart("display_name")
		e.Str(s.DisplayName)
	}
	{
		if s.Elin.Set {
			e.FieldStart("elin")
			s.Elin.Encode(e)
		}
	}
	{
		e.FieldStart("identifier")
		e.Str(s.Identifier)
	}
	{
		if s.NetworkSwitches != nil {
			e.FieldStart("network_switches")
			e.ArrStart()
			for _, elem := range s.NetworkSwitches {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ParentIdentifier.Set {
			e.FieldStart("parent_identifier")
			s.ParentIdentifier.Encode(e)
		}
	}
	{
		if s.PrivateIP.Set {
			e.FieldStart("private_ip")
			s.PrivateIP.Encode(e)
		}
	}
	{
		if s.PublicIP.Set {
			e.FieldStart("public_ip")
			s.PublicIP.Encode(e)
		}
	}
	{
		if s.SipGroupName.Set {
			e.FieldStart("sip_group_name")
			s.SipGroupName.Encode(e)
		}
	}
	{
		if s.MinimumMatchCriteria.Set {
			e.FieldStart("minimum_match_criteria")
			s.MinimumMatchCriteria.Encode(e)
		}
	}
}

var jsonFieldsNameOfBatchAddLocationsReqLocationsItem = [11]string{
	0:  "bssid",
	1:  "company_address",
	2:  "display_name",
	3:  "elin",
	4:  "identifier",
	5:  "network_switches",
	6:  "parent_identifier",
	7:  "private_ip",
	8:  "public_ip",
	9:  "sip_group_name",
	10: "minimum_match_criteria",
}

// Decode decodes BatchAddLocationsReqLocationsItem from json.
func (s *BatchAddLocationsReqLocationsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode BatchAddLocationsReqLocationsItem to nil")
	}
	var requiredBitSet [2]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "bssid":
			if err := func() error {
				s.Bssid.Reset()
				if err := s.Bssid.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bssid\"")
			}
		case "company_address":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.CompanyAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address\"")
			}
		case "display_name":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.DisplayName = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "elin":
			if err := func() error {
				s.Elin.Reset()
				if err := s.Elin.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"elin\"")
			}
		case "identifier":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				v, err := d.Str()
				s.Identifier = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"identifier\"")
			}
		case "network_switches":
			if err := func() error {
				s.NetworkSwitches = make([]BatchAddLocationsReqLocationsItemNetworkSwitchesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem BatchAddLocationsReqLocationsItemNetworkSwitchesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.NetworkSwitches = append(s.NetworkSwitches, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"network_switches\"")
			}
		case "parent_identifier":
			if err := func() error {
				s.ParentIdentifier.Reset()
				if err := s.ParentIdentifier.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"parent_identifier\"")
			}
		case "private_ip":
			if err := func() error {
				s.PrivateIP.Reset()
				if err := s.PrivateIP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"private_ip\"")
			}
		case "public_ip":
			if err := func() error {
				s.PublicIP.Reset()
				if err := s.PublicIP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"public_ip\"")
			}
		case "sip_group_name":
			if err := func() error {
				s.SipGroupName.Reset()
				if err := s.SipGroupName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sip_group_name\"")
			}
		case "minimum_match_criteria":
			if err := func() error {
				s.MinimumMatchCriteria.Reset()
				if err := s.MinimumMatchCriteria.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"minimum_match_criteria\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode BatchAddLocationsReqLocationsItem")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [2]uint8{
		0b00010110,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfBatchAddLocationsReqLocationsItem) {
					name = jsonFieldsNameOfBatchAddLocationsReqLocationsItem[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *BatchAddLocationsReqLocationsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *BatchAddLocationsReqLocationsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *BatchAddLocationsReqLocationsItemCompanyAddress) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *BatchAddLocationsReqLocationsItemCompanyAddress) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("address_line1")
		e.Str(s.AddressLine1)
	}
	{
		if s.AddressLine2.Set {
			e.FieldStart("address_line2")
			s.AddressLine2.Encode(e)
		}
	}
	{
		if s.City.Set {
			e.FieldStart("city")
			s.City.Encode(e)
		}
	}
	{
		e.FieldStart("country")
		e.Str(s.Country)
	}
	{
		if s.StateCode.Set {
			e.FieldStart("state_code")
			s.StateCode.Encode(e)
		}
	}
	{
		if s.VatNumber.Set {
			e.FieldStart("vat_number")
			s.VatNumber.Encode(e)
		}
	}
	{
		if s.Zip.Set {
			e.FieldStart("zip")
			s.Zip.Encode(e)
		}
	}
}

var jsonFieldsNameOfBatchAddLocationsReqLocationsItemCompanyAddress = [7]string{
	0: "address_line1",
	1: "address_line2",
	2: "city",
	3: "country",
	4: "state_code",
	5: "vat_number",
	6: "zip",
}

// Decode decodes BatchAddLocationsReqLocationsItemCompanyAddress from json.
func (s *BatchAddLocationsReqLocationsItemCompanyAddress) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode BatchAddLocationsReqLocationsItemCompanyAddress to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "address_line1":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.AddressLine1 = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"address_line1\"")
			}
		case "address_line2":
			if err := func() error {
				s.AddressLine2.Reset()
				if err := s.AddressLine2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"address_line2\"")
			}
		case "city":
			if err := func() error {
				s.City.Reset()
				if err := s.City.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"city\"")
			}
		case "country":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				v, err := d.Str()
				s.Country = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country\"")
			}
		case "state_code":
			if err := func() error {
				s.StateCode.Reset()
				if err := s.StateCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"state_code\"")
			}
		case "vat_number":
			if err := func() error {
				s.VatNumber.Reset()
				if err := s.VatNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vat_number\"")
			}
		case "zip":
			if err := func() error {
				s.Zip.Reset()
				if err := s.Zip.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zip\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode BatchAddLocationsReqLocationsItemCompanyAddress")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00001001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfBatchAddLocationsReqLocationsItemCompanyAddress) {
					name = jsonFieldsNameOfBatchAddLocationsReqLocationsItemCompanyAddress[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *BatchAddLocationsReqLocationsItemCompanyAddress) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *BatchAddLocationsReqLocationsItemCompanyAddress) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *BatchAddLocationsReqLocationsItemNetworkSwitchesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *BatchAddLocationsReqLocationsItemNetworkSwitchesItem) encodeFields(e *jx.Encoder) {
	{
		if s.MACAddress.Set {
			e.FieldStart("mac_address")
			s.MACAddress.Encode(e)
		}
	}
	{
		if s.Port.Set {
			e.FieldStart("port")
			s.Port.Encode(e)
		}
	}
	{
		if s.PortPrefix.Set {
			e.FieldStart("port_prefix")
			s.PortPrefix.Encode(e)
		}
	}
	{
		if s.PortRangeFrom.Set {
			e.FieldStart("port_range_from")
			s.PortRangeFrom.Encode(e)
		}
	}
	{
		if s.PortRangeTo.Set {
			e.FieldStart("port_range_to")
			s.PortRangeTo.Encode(e)
		}
	}
}

var jsonFieldsNameOfBatchAddLocationsReqLocationsItemNetworkSwitchesItem = [5]string{
	0: "mac_address",
	1: "port",
	2: "port_prefix",
	3: "port_range_from",
	4: "port_range_to",
}

// Decode decodes BatchAddLocationsReqLocationsItemNetworkSwitchesItem from json.
func (s *BatchAddLocationsReqLocationsItemNetworkSwitchesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode BatchAddLocationsReqLocationsItemNetworkSwitchesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "mac_address":
			if err := func() error {
				s.MACAddress.Reset()
				if err := s.MACAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mac_address\"")
			}
		case "port":
			if err := func() error {
				s.Port.Reset()
				if err := s.Port.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"port\"")
			}
		case "port_prefix":
			if err := func() error {
				s.PortPrefix.Reset()
				if err := s.PortPrefix.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"port_prefix\"")
			}
		case "port_range_from":
			if err := func() error {
				s.PortRangeFrom.Reset()
				if err := s.PortRangeFrom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"port_range_from\"")
			}
		case "port_range_to":
			if err := func() error {
				s.PortRangeTo.Reset()
				if err := s.PortRangeTo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"port_range_to\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode BatchAddLocationsReqLocationsItemNetworkSwitchesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *BatchAddLocationsReqLocationsItemNetworkSwitchesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *BatchAddLocationsReqLocationsItemNetworkSwitchesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *BatchAddUsersCreatedItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *BatchAddUsersCreatedItem) encodeFields(e *jx.Encoder) {
	{
		if s.Email.Set {
			e.FieldStart("email")
			s.Email.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
}

var jsonFieldsNameOfBatchAddUsersCreatedItem = [2]string{
	0: "email",
	1: "id",
}

// Decode decodes BatchAddUsersCreatedItem from json.
func (s *BatchAddUsersCreatedItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode BatchAddUsersCreatedItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "email":
			if err := func() error {
				s.Email.Reset()
				if err := s.Email.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode BatchAddUsersCreatedItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *BatchAddUsersCreatedItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *BatchAddUsersCreatedItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *BatchAddUsersReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *BatchAddUsersReq) encodeFields(e *jx.Encoder) {
	{
		if s.Users != nil {
			e.FieldStart("users")
			e.ArrStart()
			for _, elem := range s.Users {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfBatchAddUsersReq = [1]string{
	0: "users",
}

// Decode decodes BatchAddUsersReq from json.
func (s *BatchAddUsersReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode BatchAddUsersReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "users":
			if err := func() error {
				s.Users = make([]BatchAddUsersReqUsersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem BatchAddUsersReqUsersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Users = append(s.Users, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"users\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode BatchAddUsersReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *BatchAddUsersReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *BatchAddUsersReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *BatchAddUsersReqUsersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *BatchAddUsersReqUsersItem) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("email")
		e.Str(s.Email)
	}
	{
		if s.FirstName.Set {
			e.FieldStart("first_name")
			s.FirstName.Encode(e)
		}
	}
	{
		if s.LastName.Set {
			e.FieldStart("last_name")
			s.LastName.Encode(e)
		}
	}
	{
		e.FieldStart("calling_plans")
		e.ArrStart()
		for _, elem := range s.CallingPlans {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	{
		if s.SiteCode.Set {
			e.FieldStart("site_code")
			s.SiteCode.Encode(e)
		}
	}
	{
		if s.SiteName.Set {
			e.FieldStart("site_name")
			s.SiteName.Encode(e)
		}
	}
	{
		if s.TemplateName.Set {
			e.FieldStart("template_name")
			s.TemplateName.Encode(e)
		}
	}
	{
		e.FieldStart("extension_number")
		e.Str(s.ExtensionNumber)
	}
	{
		if s.PhoneNumbers != nil {
			e.FieldStart("phone_numbers")
			e.ArrStart()
			for _, elem := range s.PhoneNumbers {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OutboundCallerID.Set {
			e.FieldStart("outbound_caller_id")
			s.OutboundCallerID.Encode(e)
		}
	}
	{
		if s.SelectOutboundCallerID.Set {
			e.FieldStart("select_outbound_caller_id")
			s.SelectOutboundCallerID.Encode(e)
		}
	}
	{
		if s.SMS.Set {
			e.FieldStart("sms")
			s.SMS.Encode(e)
		}
	}
	{
		if s.DeskPhones != nil {
			e.FieldStart("desk_phones")
			e.ArrStart()
			for _, elem := range s.DeskPhones {
				if len(elem) != 0 {
					e.Raw(elem)
				}
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfBatchAddUsersReqUsersItem = [13]string{
	0:  "email",
	1:  "first_name",
	2:  "last_name",
	3:  "calling_plans",
	4:  "site_code",
	5:  "site_name",
	6:  "template_name",
	7:  "extension_number",
	8:  "phone_numbers",
	9:  "outbound_caller_id",
	10: "select_outbound_caller_id",
	11: "sms",
	12: "desk_phones",
}

// Decode decodes BatchAddUsersReqUsersItem from json.
func (s *BatchAddUsersReqUsersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode BatchAddUsersReqUsersItem to nil")
	}
	var requiredBitSet [2]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "email":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Email = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		case "first_name":
			if err := func() error {
				s.FirstName.Reset()
				if err := s.FirstName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"first_name\"")
			}
		case "last_name":
			if err := func() error {
				s.LastName.Reset()
				if err := s.LastName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"last_name\"")
			}
		case "calling_plans":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				s.CallingPlans = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.CallingPlans = append(s.CallingPlans, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"calling_plans\"")
			}
		case "site_code":
			if err := func() error {
				s.SiteCode.Reset()
				if err := s.SiteCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_code\"")
			}
		case "site_name":
			if err := func() error {
				s.SiteName.Reset()
				if err := s.SiteName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_name\"")
			}
		case "template_name":
			if err := func() error {
				s.TemplateName.Reset()
				if err := s.TemplateName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"template_name\"")
			}
		case "extension_number":
			requiredBitSet[0] |= 1 << 7
			if err := func() error {
				v, err := d.Str()
				s.ExtensionNumber = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "phone_numbers":
			if err := func() error {
				s.PhoneNumbers = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.PhoneNumbers = append(s.PhoneNumbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_numbers\"")
			}
		case "outbound_caller_id":
			if err := func() error {
				s.OutboundCallerID.Reset()
				if err := s.OutboundCallerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"outbound_caller_id\"")
			}
		case "select_outbound_caller_id":
			if err := func() error {
				s.SelectOutboundCallerID.Reset()
				if err := s.SelectOutboundCallerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"select_outbound_caller_id\"")
			}
		case "sms":
			if err := func() error {
				s.SMS.Reset()
				if err := s.SMS.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sms\"")
			}
		case "desk_phones":
			if err := func() error {
				s.DeskPhones = make([]jx.Raw, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem jx.Raw
					v, err := d.RawAppend(nil)
					elem = jx.Raw(v)
					if err != nil {
						return err
					}
					s.DeskPhones = append(s.DeskPhones, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"desk_phones\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode BatchAddUsersReqUsersItem")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [2]uint8{
		0b10001001,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfBatchAddUsersReqUsersItem) {
					name = jsonFieldsNameOfBatchAddUsersReqUsersItem[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *BatchAddUsersReqUsersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *BatchAddUsersReqUsersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *BatchUpdateDeviceLineKeySettingReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *BatchUpdateDeviceLineKeySettingReq) encodeFields(e *jx.Encoder) {
	{
		if s.Positions != nil {
			e.FieldStart("positions")
			e.ArrStart()
			for _, elem := range s.Positions {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfBatchUpdateDeviceLineKeySettingReq = [1]string{
	0: "positions",
}

// Decode decodes BatchUpdateDeviceLineKeySettingReq from json.
func (s *BatchUpdateDeviceLineKeySettingReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode BatchUpdateDeviceLineKeySettingReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "positions":
			if err := func() error {
				s.Positions = make([]BatchUpdateDeviceLineKeySettingReqPositionsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem BatchUpdateDeviceLineKeySettingReqPositionsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Positions = append(s.Positions, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"positions\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode BatchUpdateDeviceLineKeySettingReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *BatchUpdateDeviceLineKeySettingReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *BatchUpdateDeviceLineKeySettingReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *BatchUpdateDeviceLineKeySettingReqPositionsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *BatchUpdateDeviceLineKeySettingReqPositionsItem) encodeFields(e *jx.Encoder) {
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
	{
		if s.Index.Set {
			e.FieldStart("index")
			s.Index.Encode(e)
		}
	}
}

var jsonFieldsNameOfBatchUpdateDeviceLineKeySettingReqPositionsItem = [2]string{
	0: "extension_id",
	1: "index",
}

// Decode decodes BatchUpdateDeviceLineKeySettingReqPositionsItem from json.
func (s *BatchUpdateDeviceLineKeySettingReqPositionsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode BatchUpdateDeviceLineKeySettingReqPositionsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		case "index":
			if err := func() error {
				s.Index.Reset()
				if err := s.Index.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"index\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode BatchUpdateDeviceLineKeySettingReqPositionsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *BatchUpdateDeviceLineKeySettingReqPositionsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *BatchUpdateDeviceLineKeySettingReqPositionsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *BatchUpdateLineKeySettingReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *BatchUpdateLineKeySettingReq) encodeFields(e *jx.Encoder) {
	{
		if s.LineKeys != nil {
			e.FieldStart("line_keys")
			e.ArrStart()
			for _, elem := range s.LineKeys {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfBatchUpdateLineKeySettingReq = [1]string{
	0: "line_keys",
}

// Decode decodes BatchUpdateLineKeySettingReq from json.
func (s *BatchUpdateLineKeySettingReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode BatchUpdateLineKeySettingReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "line_keys":
			if err := func() error {
				s.LineKeys = make([]BatchUpdateLineKeySettingReqLineKeysItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem BatchUpdateLineKeySettingReqLineKeysItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.LineKeys = append(s.LineKeys, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"line_keys\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode BatchUpdateLineKeySettingReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *BatchUpdateLineKeySettingReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *BatchUpdateLineKeySettingReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *BatchUpdateLineKeySettingReqLineKeysItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *BatchUpdateLineKeySettingReqLineKeysItem) encodeFields(e *jx.Encoder) {
	{
		if s.LineKeyID.Set {
			e.FieldStart("line_key_id")
			s.LineKeyID.Encode(e)
		}
	}
	{
		if s.Index.Set {
			e.FieldStart("index")
			s.Index.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.KeyAssignment.Set {
			e.FieldStart("key_assignment")
			s.KeyAssignment.Encode(e)
		}
	}
	{
		if s.Alias.Set {
			e.FieldStart("alias")
			s.Alias.Encode(e)
		}
	}
	{
		if s.OutboundCallerID.Set {
			e.FieldStart("outbound_caller_id")
			s.OutboundCallerID.Encode(e)
		}
	}
}

var jsonFieldsNameOfBatchUpdateLineKeySettingReqLineKeysItem = [6]string{
	0: "line_key_id",
	1: "index",
	2: "type",
	3: "key_assignment",
	4: "alias",
	5: "outbound_caller_id",
}

// Decode decodes BatchUpdateLineKeySettingReqLineKeysItem from json.
func (s *BatchUpdateLineKeySettingReqLineKeysItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode BatchUpdateLineKeySettingReqLineKeysItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "line_key_id":
			if err := func() error {
				s.LineKeyID.Reset()
				if err := s.LineKeyID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"line_key_id\"")
			}
		case "index":
			if err := func() error {
				s.Index.Reset()
				if err := s.Index.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"index\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "key_assignment":
			if err := func() error {
				s.KeyAssignment.Reset()
				if err := s.KeyAssignment.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"key_assignment\"")
			}
		case "alias":
			if err := func() error {
				s.Alias.Reset()
				if err := s.Alias.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"alias\"")
			}
		case "outbound_caller_id":
			if err := func() error {
				s.OutboundCallerID.Reset()
				if err := s.OutboundCallerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"outbound_caller_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode BatchUpdateLineKeySettingReqLineKeysItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *BatchUpdateLineKeySettingReqLineKeysItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *BatchUpdateLineKeySettingReqLineKeysItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *BatchUpdateLineKeySettingReqLineKeysItemKeyAssignment) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *BatchUpdateLineKeySettingReqLineKeysItemKeyAssignment) encodeFields(e *jx.Encoder) {
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
	{
		if s.SpeedDialNumber.Set {
			e.FieldStart("speed_dial_number")
			s.SpeedDialNumber.Encode(e)
		}
	}
	{
		if s.RetrievalCode.Set {
			e.FieldStart("retrieval_code")
			s.RetrievalCode.Encode(e)
		}
	}
}

var jsonFieldsNameOfBatchUpdateLineKeySettingReqLineKeysItemKeyAssignment = [3]string{
	0: "extension_id",
	1: "speed_dial_number",
	2: "retrieval_code",
}

// Decode decodes BatchUpdateLineKeySettingReqLineKeysItemKeyAssignment from json.
func (s *BatchUpdateLineKeySettingReqLineKeysItemKeyAssignment) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode BatchUpdateLineKeySettingReqLineKeysItemKeyAssignment to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		case "speed_dial_number":
			if err := func() error {
				s.SpeedDialNumber.Reset()
				if err := s.SpeedDialNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"speed_dial_number\"")
			}
		case "retrieval_code":
			if err := func() error {
				s.RetrievalCode.Reset()
				if err := s.RetrievalCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"retrieval_code\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode BatchUpdateLineKeySettingReqLineKeysItemKeyAssignment")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *BatchUpdateLineKeySettingReqLineKeysItemKeyAssignment) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *BatchUpdateLineKeySettingReqLineKeysItemKeyAssignment) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CreateASharedLineGroupCreated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CreateASharedLineGroupCreated) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
}

var jsonFieldsNameOfCreateASharedLineGroupCreated = [2]string{
	0: "id",
	1: "display_name",
}

// Decode decodes CreateASharedLineGroupCreated from json.
func (s *CreateASharedLineGroupCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreateASharedLineGroupCreated to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CreateASharedLineGroupCreated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CreateASharedLineGroupCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreateASharedLineGroupCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CreateASharedLineGroupReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CreateASharedLineGroupReq) encodeFields(e *jx.Encoder) {
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		e.FieldStart("display_name")
		e.Str(s.DisplayName)
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.SiteID.Set {
			e.FieldStart("site_id")
			s.SiteID.Encode(e)
		}
	}
}

var jsonFieldsNameOfCreateASharedLineGroupReq = [4]string{
	0: "description",
	1: "display_name",
	2: "extension_number",
	3: "site_id",
}

// Decode decodes CreateASharedLineGroupReq from json.
func (s *CreateASharedLineGroupReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreateASharedLineGroupReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "display_name":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.DisplayName = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "site_id":
			if err := func() error {
				s.SiteID.Reset()
				if err := s.SiteID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CreateASharedLineGroupReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000010,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfCreateASharedLineGroupReq) {
					name = jsonFieldsNameOfCreateASharedLineGroupReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CreateASharedLineGroupReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreateASharedLineGroupReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CreateCRPhoneNumbersReqItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CreateCRPhoneNumbersReqItem) encodeFields(e *jx.Encoder) {
	{
		if s.PhoneNumber.Set {
			e.FieldStart("phone_number")
			s.PhoneNumber.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
}

var jsonFieldsNameOfCreateCRPhoneNumbersReqItem = [2]string{
	0: "phone_number",
	1: "status",
}

// Decode decodes CreateCRPhoneNumbersReqItem from json.
func (s *CreateCRPhoneNumbersReqItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreateCRPhoneNumbersReqItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CreateCRPhoneNumbersReqItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CreateCRPhoneNumbersReqItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreateCRPhoneNumbersReqItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CreateCallQueueCreated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CreateCallQueueCreated) encodeFields(e *jx.Encoder) {
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
}

var jsonFieldsNameOfCreateCallQueueCreated = [4]string{
	0: "extension_number",
	1: "id",
	2: "name",
	3: "status",
}

// Decode decodes CreateCallQueueCreated from json.
func (s *CreateCallQueueCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreateCallQueueCreated to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CreateCallQueueCreated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CreateCallQueueCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreateCallQueueCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CreateCallQueueReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CreateCallQueueReq) encodeFields(e *jx.Encoder) {
	{
		if s.CostCenter.Set {
			e.FieldStart("cost_center")
			s.CostCenter.Encode(e)
		}
	}
	{
		if s.Department.Set {
			e.FieldStart("department")
			s.Department.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.Members.Set {
			e.FieldStart("members")
			s.Members.Encode(e)
		}
	}
	{
		e.FieldStart("name")
		e.Str(s.Name)
	}
	{
		if s.SiteID.Set {
			e.FieldStart("site_id")
			s.SiteID.Encode(e)
		}
	}
}

var jsonFieldsNameOfCreateCallQueueReq = [7]string{
	0: "cost_center",
	1: "department",
	2: "description",
	3: "extension_number",
	4: "members",
	5: "name",
	6: "site_id",
}

// Decode decodes CreateCallQueueReq from json.
func (s *CreateCallQueueReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreateCallQueueReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "cost_center":
			if err := func() error {
				s.CostCenter.Reset()
				if err := s.CostCenter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cost_center\"")
			}
		case "department":
			if err := func() error {
				s.Department.Reset()
				if err := s.Department.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"department\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "members":
			if err := func() error {
				s.Members.Reset()
				if err := s.Members.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"members\"")
			}
		case "name":
			requiredBitSet[0] |= 1 << 5
			if err := func() error {
				v, err := d.Str()
				s.Name = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "site_id":
			if err := func() error {
				s.SiteID.Reset()
				if err := s.SiteID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CreateCallQueueReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00100000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfCreateCallQueueReq) {
					name = jsonFieldsNameOfCreateCallQueueReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CreateCallQueueReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreateCallQueueReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CreateCallQueueReqMembers) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CreateCallQueueReqMembers) encodeFields(e *jx.Encoder) {
	{
		if s.CommonAreaIds != nil {
			e.FieldStart("common_area_ids")
			e.ArrStart()
			for _, elem := range s.CommonAreaIds {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Users != nil {
			e.FieldStart("users")
			e.ArrStart()
			for _, elem := range s.Users {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfCreateCallQueueReqMembers = [2]string{
	0: "common_area_ids",
	1: "users",
}

// Decode decodes CreateCallQueueReqMembers from json.
func (s *CreateCallQueueReqMembers) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreateCallQueueReqMembers to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "common_area_ids":
			if err := func() error {
				s.CommonAreaIds = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.CommonAreaIds = append(s.CommonAreaIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"common_area_ids\"")
			}
		case "users":
			if err := func() error {
				s.Users = make([]CreateCallQueueReqMembersUsersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CreateCallQueueReqMembersUsersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Users = append(s.Users, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"users\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CreateCallQueueReqMembers")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CreateCallQueueReqMembers) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreateCallQueueReqMembers) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CreateCallQueueReqMembersUsersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CreateCallQueueReqMembersUsersItem) encodeFields(e *jx.Encoder) {
	{
		if s.Email.Set {
			e.FieldStart("email")
			s.Email.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
}

var jsonFieldsNameOfCreateCallQueueReqMembersUsersItem = [2]string{
	0: "email",
	1: "id",
}

// Decode decodes CreateCallQueueReqMembersUsersItem from json.
func (s *CreateCallQueueReqMembersUsersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreateCallQueueReqMembersUsersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "email":
			if err := func() error {
				s.Email.Reset()
				if err := s.Email.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CreateCallQueueReqMembersUsersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CreateCallQueueReqMembersUsersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreateCallQueueReqMembersUsersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CreateMonitoringGroupCreated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CreateMonitoringGroupCreated) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfCreateMonitoringGroupCreated = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes CreateMonitoringGroupCreated from json.
func (s *CreateMonitoringGroupCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreateMonitoringGroupCreated to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CreateMonitoringGroupCreated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CreateMonitoringGroupCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreateMonitoringGroupCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CreateMonitoringGroupReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CreateMonitoringGroupReq) encodeFields(e *jx.Encoder) {
	{
		if s.MonitoringPrivileges != nil {
			e.FieldStart("monitoring_privileges")
			e.ArrStart()
			for _, elem := range s.MonitoringPrivileges {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Prompt.Set {
			e.FieldStart("prompt")
			s.Prompt.Encode(e)
		}
	}
	{
		if s.SiteID.Set {
			e.FieldStart("site_id")
			s.SiteID.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfCreateMonitoringGroupReq = [5]string{
	0: "monitoring_privileges",
	1: "name",
	2: "prompt",
	3: "site_id",
	4: "type",
}

// Decode decodes CreateMonitoringGroupReq from json.
func (s *CreateMonitoringGroupReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreateMonitoringGroupReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "monitoring_privileges":
			if err := func() error {
				s.MonitoringPrivileges = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.MonitoringPrivileges = append(s.MonitoringPrivileges, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"monitoring_privileges\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "prompt":
			if err := func() error {
				s.Prompt.Reset()
				if err := s.Prompt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"prompt\"")
			}
		case "site_id":
			if err := func() error {
				s.SiteID.Reset()
				if err := s.SiteID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_id\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CreateMonitoringGroupReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CreateMonitoringGroupReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreateMonitoringGroupReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CreatePhoneSiteCreated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CreatePhoneSiteCreated) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfCreatePhoneSiteCreated = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes CreatePhoneSiteCreated from json.
func (s *CreatePhoneSiteCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePhoneSiteCreated to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CreatePhoneSiteCreated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CreatePhoneSiteCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePhoneSiteCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CreatePhoneSiteReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CreatePhoneSiteReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("auto_receptionist_name")
		e.Str(s.AutoReceptionistName)
	}
	{
		if s.SourceAutoReceptionistID.Set {
			e.FieldStart("source_auto_receptionist_id")
			s.SourceAutoReceptionistID.Encode(e)
		}
	}
	{
		e.FieldStart("default_emergency_address")
		s.DefaultEmergencyAddress.Encode(e)
	}
	{
		e.FieldStart("name")
		e.Str(s.Name)
	}
	{
		if s.ShortExtension.Set {
			e.FieldStart("short_extension")
			s.ShortExtension.Encode(e)
		}
	}
	{
		if s.SiteCode.Set {
			e.FieldStart("site_code")
			s.SiteCode.Encode(e)
		}
	}
	{
		if s.SipZone.Set {
			e.FieldStart("sip_zone")
			s.SipZone.Encode(e)
		}
	}
	{
		if s.ForceOffNet.Set {
			e.FieldStart("force_off_net")
			s.ForceOffNet.Encode(e)
		}
	}
}

var jsonFieldsNameOfCreatePhoneSiteReq = [8]string{
	0: "auto_receptionist_name",
	1: "source_auto_receptionist_id",
	2: "default_emergency_address",
	3: "name",
	4: "short_extension",
	5: "site_code",
	6: "sip_zone",
	7: "force_off_net",
}

// Decode decodes CreatePhoneSiteReq from json.
func (s *CreatePhoneSiteReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePhoneSiteReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "auto_receptionist_name":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.AutoReceptionistName = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_receptionist_name\"")
			}
		case "source_auto_receptionist_id":
			if err := func() error {
				s.SourceAutoReceptionistID.Reset()
				if err := s.SourceAutoReceptionistID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"source_auto_receptionist_id\"")
			}
		case "default_emergency_address":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				if err := s.DefaultEmergencyAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"default_emergency_address\"")
			}
		case "name":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				v, err := d.Str()
				s.Name = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "short_extension":
			if err := func() error {
				s.ShortExtension.Reset()
				if err := s.ShortExtension.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"short_extension\"")
			}
		case "site_code":
			if err := func() error {
				s.SiteCode.Reset()
				if err := s.SiteCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_code\"")
			}
		case "sip_zone":
			if err := func() error {
				s.SipZone.Reset()
				if err := s.SipZone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sip_zone\"")
			}
		case "force_off_net":
			if err := func() error {
				s.ForceOffNet.Reset()
				if err := s.ForceOffNet.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"force_off_net\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CreatePhoneSiteReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00001101,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfCreatePhoneSiteReq) {
					name = jsonFieldsNameOfCreatePhoneSiteReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CreatePhoneSiteReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePhoneSiteReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CreatePhoneSiteReqDefaultEmergencyAddress) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CreatePhoneSiteReqDefaultEmergencyAddress) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("address_line1")
		e.Str(s.AddressLine1)
	}
	{
		if s.AddressLine2.Set {
			e.FieldStart("address_line2")
			s.AddressLine2.Encode(e)
		}
	}
	{
		e.FieldStart("city")
		e.Str(s.City)
	}
	{
		e.FieldStart("country")
		e.Str(s.Country)
	}
	{
		e.FieldStart("state_code")
		e.Str(s.StateCode)
	}
	{
		e.FieldStart("zip")
		e.Str(s.Zip)
	}
}

var jsonFieldsNameOfCreatePhoneSiteReqDefaultEmergencyAddress = [6]string{
	0: "address_line1",
	1: "address_line2",
	2: "city",
	3: "country",
	4: "state_code",
	5: "zip",
}

// Decode decodes CreatePhoneSiteReqDefaultEmergencyAddress from json.
func (s *CreatePhoneSiteReqDefaultEmergencyAddress) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePhoneSiteReqDefaultEmergencyAddress to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "address_line1":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.AddressLine1 = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"address_line1\"")
			}
		case "address_line2":
			if err := func() error {
				s.AddressLine2.Reset()
				if err := s.AddressLine2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"address_line2\"")
			}
		case "city":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.City = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"city\"")
			}
		case "country":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				v, err := d.Str()
				s.Country = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country\"")
			}
		case "state_code":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				v, err := d.Str()
				s.StateCode = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"state_code\"")
			}
		case "zip":
			requiredBitSet[0] |= 1 << 5
			if err := func() error {
				v, err := d.Str()
				s.Zip = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zip\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CreatePhoneSiteReqDefaultEmergencyAddress")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00111101,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfCreatePhoneSiteReqDefaultEmergencyAddress) {
					name = jsonFieldsNameOfCreatePhoneSiteReqDefaultEmergencyAddress[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CreatePhoneSiteReqDefaultEmergencyAddress) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePhoneSiteReqDefaultEmergencyAddress) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CreatePhoneSiteReqForceOffNet) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CreatePhoneSiteReqForceOffNet) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.AllowExtensionOnlyUsersCallUsersOutsideSite.Set {
			e.FieldStart("allow_extension_only_users_call_users_outside_site")
			s.AllowExtensionOnlyUsersCallUsersOutsideSite.Encode(e)
		}
	}
}

var jsonFieldsNameOfCreatePhoneSiteReqForceOffNet = [2]string{
	0: "enable",
	1: "allow_extension_only_users_call_users_outside_site",
}

// Decode decodes CreatePhoneSiteReqForceOffNet from json.
func (s *CreatePhoneSiteReqForceOffNet) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePhoneSiteReqForceOffNet to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "allow_extension_only_users_call_users_outside_site":
			if err := func() error {
				s.AllowExtensionOnlyUsersCallUsersOutsideSite.Reset()
				if err := s.AllowExtensionOnlyUsersCallUsersOutsideSite.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_extension_only_users_call_users_outside_site\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CreatePhoneSiteReqForceOffNet")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CreatePhoneSiteReqForceOffNet) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePhoneSiteReqForceOffNet) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CreatePhoneSiteReqShortExtension) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CreatePhoneSiteReqShortExtension) encodeFields(e *jx.Encoder) {
	{
		if s.Length.Set {
			e.FieldStart("length")
			s.Length.Encode(e)
		}
	}
}

var jsonFieldsNameOfCreatePhoneSiteReqShortExtension = [1]string{
	0: "length",
}

// Decode decodes CreatePhoneSiteReqShortExtension from json.
func (s *CreatePhoneSiteReqShortExtension) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePhoneSiteReqShortExtension to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "length":
			if err := func() error {
				s.Length.Reset()
				if err := s.Length.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"length\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CreatePhoneSiteReqShortExtension")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CreatePhoneSiteReqShortExtension) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePhoneSiteReqShortExtension) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CreatePhoneSiteReqSipZone) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CreatePhoneSiteReqSipZone) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
}

var jsonFieldsNameOfCreatePhoneSiteReqSipZone = [1]string{
	0: "id",
}

// Decode decodes CreatePhoneSiteReqSipZone from json.
func (s *CreatePhoneSiteReqSipZone) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePhoneSiteReqSipZone to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CreatePhoneSiteReqSipZone")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CreatePhoneSiteReqSipZone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePhoneSiteReqSipZone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *DeletePeeringPhoneNumbersOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *DeletePeeringPhoneNumbersOK) encodeFields(e *jx.Encoder) {
	{
		if s.UnprocessedNumbers != nil {
			e.FieldStart("unprocessed_numbers")
			e.ArrStart()
			for _, elem := range s.UnprocessedNumbers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfDeletePeeringPhoneNumbersOK = [1]string{
	0: "unprocessed_numbers",
}

// Decode decodes DeletePeeringPhoneNumbersOK from json.
func (s *DeletePeeringPhoneNumbersOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DeletePeeringPhoneNumbersOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "unprocessed_numbers":
			if err := func() error {
				s.UnprocessedNumbers = make([]DeletePeeringPhoneNumbersOKUnprocessedNumbersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem DeletePeeringPhoneNumbersOKUnprocessedNumbersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.UnprocessedNumbers = append(s.UnprocessedNumbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"unprocessed_numbers\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode DeletePeeringPhoneNumbersOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *DeletePeeringPhoneNumbersOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DeletePeeringPhoneNumbersOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *DeletePeeringPhoneNumbersOKUnprocessedNumbersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *DeletePeeringPhoneNumbersOKUnprocessedNumbersItem) encodeFields(e *jx.Encoder) {
	{
		if s.FailureReason.Set {
			e.FieldStart("failure_reason")
			s.FailureReason.Encode(e)
		}
	}
	{
		if s.PhoneNumber.Set {
			e.FieldStart("phone_number")
			s.PhoneNumber.Encode(e)
		}
	}
}

var jsonFieldsNameOfDeletePeeringPhoneNumbersOKUnprocessedNumbersItem = [2]string{
	0: "failure_reason",
	1: "phone_number",
}

// Decode decodes DeletePeeringPhoneNumbersOKUnprocessedNumbersItem from json.
func (s *DeletePeeringPhoneNumbersOKUnprocessedNumbersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DeletePeeringPhoneNumbersOKUnprocessedNumbersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "failure_reason":
			if err := func() error {
				s.FailureReason.Reset()
				if err := s.FailureReason.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"failure_reason\"")
			}
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode DeletePeeringPhoneNumbersOKUnprocessedNumbersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *DeletePeeringPhoneNumbersOKUnprocessedNumbersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DeletePeeringPhoneNumbersOKUnprocessedNumbersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *DeletePeeringPhoneNumbersReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *DeletePeeringPhoneNumbersReq) encodeFields(e *jx.Encoder) {
	{
		if s.CarrierCode.Set {
			e.FieldStart("carrier_code")
			s.CarrierCode.Encode(e)
		}
	}
	{
		if s.PhoneNumbers != nil {
			e.FieldStart("phone_numbers")
			e.ArrStart()
			for _, elem := range s.PhoneNumbers {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfDeletePeeringPhoneNumbersReq = [2]string{
	0: "carrier_code",
	1: "phone_numbers",
}

// Decode decodes DeletePeeringPhoneNumbersReq from json.
func (s *DeletePeeringPhoneNumbersReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DeletePeeringPhoneNumbersReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "carrier_code":
			if err := func() error {
				s.CarrierCode.Reset()
				if err := s.CarrierCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"carrier_code\"")
			}
		case "phone_numbers":
			if err := func() error {
				s.PhoneNumbers = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.PhoneNumbers = append(s.PhoneNumbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_numbers\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode DeletePeeringPhoneNumbersReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *DeletePeeringPhoneNumbersReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DeletePeeringPhoneNumbersReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *DuplicatePhoneRoleCreated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *DuplicatePhoneRoleCreated) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfDuplicatePhoneRoleCreated = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes DuplicatePhoneRoleCreated from json.
func (s *DuplicatePhoneRoleCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DuplicatePhoneRoleCreated to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode DuplicatePhoneRoleCreated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *DuplicatePhoneRoleCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DuplicatePhoneRoleCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *DuplicatePhoneRoleReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *DuplicatePhoneRoleReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("role_id")
		e.Str(s.RoleID)
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
}

var jsonFieldsNameOfDuplicatePhoneRoleReq = [3]string{
	0: "role_id",
	1: "name",
	2: "description",
}

// Decode decodes DuplicatePhoneRoleReq from json.
func (s *DuplicatePhoneRoleReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DuplicatePhoneRoleReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "role_id":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.RoleID = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"role_id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode DuplicatePhoneRoleReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfDuplicatePhoneRoleReq) {
					name = jsonFieldsNameOfDuplicatePhoneRoleReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *DuplicatePhoneRoleReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DuplicatePhoneRoleReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ErrorResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ErrorResponse) encodeFields(e *jx.Encoder) {
	{
		if s.Code.Set {
			e.FieldStart("code")
			s.Code.Encode(e)
		}
	}
	{
		if s.Message.Set {
			e.FieldStart("message")
			s.Message.Encode(e)
		}
	}
	{
		if s.Errors != nil {
			e.FieldStart("errors")
			e.ArrStart()
			for _, elem := range s.Errors {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfErrorResponse = [3]string{
	0: "code",
	1: "message",
	2: "errors",
}

// Decode decodes ErrorResponse from json.
func (s *ErrorResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ErrorResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "code":
			if err := func() error {
				s.Code.Reset()
				if err := s.Code.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code\"")
			}
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		case "errors":
			if err := func() error {
				s.Errors = make([]ErrorResponseErrorsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ErrorResponseErrorsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Errors = append(s.Errors, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"errors\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ErrorResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ErrorResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ErrorResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ErrorResponseErrorsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ErrorResponseErrorsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Field.Set {
			e.FieldStart("field")
			s.Field.Encode(e)
		}
	}
	{
		if s.FieldValue.Set {
			e.FieldStart("field_value")
			s.FieldValue.Encode(e)
		}
	}
	{
		if s.Message.Set {
			e.FieldStart("message")
			s.Message.Encode(e)
		}
	}
}

var jsonFieldsNameOfErrorResponseErrorsItem = [3]string{
	0: "field",
	1: "field_value",
	2: "message",
}

// Decode decodes ErrorResponseErrorsItem from json.
func (s *ErrorResponseErrorsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ErrorResponseErrorsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "field":
			if err := func() error {
				s.Field.Reset()
				if err := s.Field.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"field\"")
			}
		case "field_value":
			if err := func() error {
				s.FieldValue.Reset()
				if err := s.FieldValue.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"field_value\"")
			}
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ErrorResponseErrorsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ErrorResponseErrorsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ErrorResponseErrorsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetABillingAccountOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetABillingAccountOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetABillingAccountOK = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes GetABillingAccountOK from json.
func (s *GetABillingAccountOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetABillingAccountOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetABillingAccountOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetABillingAccountOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetABillingAccountOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetABlockedListOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetABlockedListOK) encodeFields(e *jx.Encoder) {
	{
		if s.BlockType.Set {
			e.FieldStart("block_type")
			s.BlockType.Encode(e)
		}
	}
	{
		if s.Comment.Set {
			e.FieldStart("comment")
			s.Comment.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.MatchType.Set {
			e.FieldStart("match_type")
			s.MatchType.Encode(e)
		}
	}
	{
		if s.PhoneNumber.Set {
			e.FieldStart("phone_number")
			s.PhoneNumber.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetABlockedListOK = [6]string{
	0: "block_type",
	1: "comment",
	2: "id",
	3: "match_type",
	4: "phone_number",
	5: "status",
}

// Decode decodes GetABlockedListOK from json.
func (s *GetABlockedListOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetABlockedListOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "block_type":
			if err := func() error {
				s.BlockType.Reset()
				if err := s.BlockType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"block_type\"")
			}
		case "comment":
			if err := func() error {
				s.Comment.Reset()
				if err := s.Comment.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"comment\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "match_type":
			if err := func() error {
				s.MatchType.Reset()
				if err := s.MatchType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"match_type\"")
			}
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetABlockedListOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetABlockedListOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetABlockedListOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetACallQueueOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetACallQueueOK) encodeFields(e *jx.Encoder) {
	{
		if s.CostCenter.Set {
			e.FieldStart("cost_center")
			s.CostCenter.Encode(e)
		}
	}
	{
		if s.Department.Set {
			e.FieldStart("department")
			s.Department.Encode(e)
		}
	}
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Members.Set {
			e.FieldStart("members")
			s.Members.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.PhoneNumbers != nil {
			e.FieldStart("phone_numbers")
			e.ArrStart()
			for _, elem := range s.PhoneNumbers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Site.Set {
			e.FieldStart("site")
			s.Site.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if len(s.Policy) != 0 {
			e.FieldStart("policy")
			e.Raw(s.Policy)
		}
	}
}

var jsonFieldsNameOfGetACallQueueOK = [11]string{
	0:  "cost_center",
	1:  "department",
	2:  "extension_id",
	3:  "extension_number",
	4:  "id",
	5:  "members",
	6:  "name",
	7:  "phone_numbers",
	8:  "site",
	9:  "status",
	10: "policy",
}

// Decode decodes GetACallQueueOK from json.
func (s *GetACallQueueOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetACallQueueOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "cost_center":
			if err := func() error {
				s.CostCenter.Reset()
				if err := s.CostCenter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cost_center\"")
			}
		case "department":
			if err := func() error {
				s.Department.Reset()
				if err := s.Department.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"department\"")
			}
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "members":
			if err := func() error {
				s.Members.Reset()
				if err := s.Members.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"members\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "phone_numbers":
			if err := func() error {
				s.PhoneNumbers = make([]GetACallQueueOKPhoneNumbersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetACallQueueOKPhoneNumbersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.PhoneNumbers = append(s.PhoneNumbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_numbers\"")
			}
		case "site":
			if err := func() error {
				s.Site.Reset()
				if err := s.Site.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "policy":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.Policy = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"policy\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetACallQueueOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetACallQueueOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetACallQueueOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetACallQueueOKMembers) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetACallQueueOKMembers) encodeFields(e *jx.Encoder) {
	{
		if s.Users != nil {
			e.FieldStart("users")
			e.ArrStart()
			for _, elem := range s.Users {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.CommonAreas != nil {
			e.FieldStart("common_areas")
			e.ArrStart()
			for _, elem := range s.CommonAreas {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGetACallQueueOKMembers = [2]string{
	0: "users",
	1: "common_areas",
}

// Decode decodes GetACallQueueOKMembers from json.
func (s *GetACallQueueOKMembers) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetACallQueueOKMembers to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "users":
			if err := func() error {
				s.Users = make([]GetACallQueueOKMembersUsersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetACallQueueOKMembersUsersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Users = append(s.Users, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"users\"")
			}
		case "common_areas":
			if err := func() error {
				s.CommonAreas = make([]GetACallQueueOKMembersCommonAreasItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetACallQueueOKMembersCommonAreasItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CommonAreas = append(s.CommonAreas, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"common_areas\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetACallQueueOKMembers")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetACallQueueOKMembers) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetACallQueueOKMembers) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetACallQueueOKMembersCommonAreasItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetACallQueueOKMembersCommonAreasItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetACallQueueOKMembersCommonAreasItem = [3]string{
	0: "id",
	1: "name",
	2: "extension_id",
}

// Decode decodes GetACallQueueOKMembersCommonAreasItem from json.
func (s *GetACallQueueOKMembersCommonAreasItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetACallQueueOKMembersCommonAreasItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetACallQueueOKMembersCommonAreasItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetACallQueueOKMembersCommonAreasItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetACallQueueOKMembersCommonAreasItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetACallQueueOKMembersUsersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetACallQueueOKMembersUsersItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Level.Set {
			e.FieldStart("level")
			s.Level.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.ReceiveCall.Set {
			e.FieldStart("receive_call")
			s.ReceiveCall.Encode(e)
		}
	}
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetACallQueueOKMembersUsersItem = [5]string{
	0: "id",
	1: "level",
	2: "name",
	3: "receive_call",
	4: "extension_id",
}

// Decode decodes GetACallQueueOKMembersUsersItem from json.
func (s *GetACallQueueOKMembersUsersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetACallQueueOKMembersUsersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "level":
			if err := func() error {
				s.Level.Reset()
				if err := s.Level.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"level\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "receive_call":
			if err := func() error {
				s.ReceiveCall.Reset()
				if err := s.ReceiveCall.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"receive_call\"")
			}
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetACallQueueOKMembersUsersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetACallQueueOKMembersUsersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetACallQueueOKMembersUsersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetACallQueueOKPhoneNumbersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetACallQueueOKPhoneNumbersItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Number.Set {
			e.FieldStart("number")
			s.Number.Encode(e)
		}
	}
	{
		if s.Source.Set {
			e.FieldStart("source")
			s.Source.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetACallQueueOKPhoneNumbersItem = [3]string{
	0: "id",
	1: "number",
	2: "source",
}

// Decode decodes GetACallQueueOKPhoneNumbersItem from json.
func (s *GetACallQueueOKPhoneNumbersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetACallQueueOKPhoneNumbersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "number":
			if err := func() error {
				s.Number.Reset()
				if err := s.Number.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "source":
			if err := func() error {
				s.Source.Reset()
				if err := s.Source.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"source\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetACallQueueOKPhoneNumbersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetACallQueueOKPhoneNumbersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetACallQueueOKPhoneNumbersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetACallQueueOKSite) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetACallQueueOKSite) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetACallQueueOKSite = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes GetACallQueueOKSite from json.
func (s *GetACallQueueOKSite) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetACallQueueOKSite to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetACallQueueOKSite")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetACallQueueOKSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetACallQueueOKSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetACommonAreaOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetACommonAreaOK) encodeFields(e *jx.Encoder) {
	{
		if s.AreaCode.Set {
			e.FieldStart("area_code")
			s.AreaCode.Encode(e)
		}
	}
	{
		if s.CallingPlans != nil {
			e.FieldStart("calling_plans")
			e.ArrStart()
			for _, elem := range s.CallingPlans {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.CostCenter.Set {
			e.FieldStart("cost_center")
			s.CostCenter.Encode(e)
		}
	}
	{
		if s.Country.Set {
			e.FieldStart("country")
			s.Country.Encode(e)
		}
	}
	{
		if s.Department.Set {
			e.FieldStart("department")
			s.Department.Encode(e)
		}
	}
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.EmergencyAddress.Set {
			e.FieldStart("emergency_address")
			s.EmergencyAddress.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.OutboundCallerIds != nil {
			e.FieldStart("outbound_caller_ids")
			e.ArrStart()
			for _, elem := range s.OutboundCallerIds {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.PhoneNumbers != nil {
			e.FieldStart("phone_numbers")
			e.ArrStart()
			for _, elem := range s.PhoneNumbers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Policy.Set {
			e.FieldStart("policy")
			s.Policy.Encode(e)
		}
	}
	{
		if s.Site.Set {
			e.FieldStart("site")
			s.Site.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetACommonAreaOK = [14]string{
	0:  "area_code",
	1:  "calling_plans",
	2:  "cost_center",
	3:  "country",
	4:  "department",
	5:  "display_name",
	6:  "extension_number",
	7:  "emergency_address",
	8:  "id",
	9:  "outbound_caller_ids",
	10: "phone_numbers",
	11: "policy",
	12: "site",
	13: "status",
}

// Decode decodes GetACommonAreaOK from json.
func (s *GetACommonAreaOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetACommonAreaOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "area_code":
			if err := func() error {
				s.AreaCode.Reset()
				if err := s.AreaCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"area_code\"")
			}
		case "calling_plans":
			if err := func() error {
				s.CallingPlans = make([]GetACommonAreaOKCallingPlansItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetACommonAreaOKCallingPlansItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CallingPlans = append(s.CallingPlans, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"calling_plans\"")
			}
		case "cost_center":
			if err := func() error {
				s.CostCenter.Reset()
				if err := s.CostCenter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cost_center\"")
			}
		case "country":
			if err := func() error {
				s.Country.Reset()
				if err := s.Country.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country\"")
			}
		case "department":
			if err := func() error {
				s.Department.Reset()
				if err := s.Department.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"department\"")
			}
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "emergency_address":
			if err := func() error {
				s.EmergencyAddress.Reset()
				if err := s.EmergencyAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"emergency_address\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "outbound_caller_ids":
			if err := func() error {
				s.OutboundCallerIds = make([]GetACommonAreaOKOutboundCallerIdsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetACommonAreaOKOutboundCallerIdsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.OutboundCallerIds = append(s.OutboundCallerIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"outbound_caller_ids\"")
			}
		case "phone_numbers":
			if err := func() error {
				s.PhoneNumbers = make([]GetACommonAreaOKPhoneNumbersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetACommonAreaOKPhoneNumbersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.PhoneNumbers = append(s.PhoneNumbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_numbers\"")
			}
		case "policy":
			if err := func() error {
				s.Policy.Reset()
				if err := s.Policy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"policy\"")
			}
		case "site":
			if err := func() error {
				s.Site.Reset()
				if err := s.Site.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetACommonAreaOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetACommonAreaOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetACommonAreaOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetACommonAreaOKCallingPlansItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetACommonAreaOKCallingPlansItem) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.BillingAccountID.Set {
			e.FieldStart("billing_account_id")
			s.BillingAccountID.Encode(e)
		}
	}
	{
		if s.BillingAccountName.Set {
			e.FieldStart("billing_account_name")
			s.BillingAccountName.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetACommonAreaOKCallingPlansItem = [4]string{
	0: "name",
	1: "type",
	2: "billing_account_id",
	3: "billing_account_name",
}

// Decode decodes GetACommonAreaOKCallingPlansItem from json.
func (s *GetACommonAreaOKCallingPlansItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetACommonAreaOKCallingPlansItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "billing_account_id":
			if err := func() error {
				s.BillingAccountID.Reset()
				if err := s.BillingAccountID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"billing_account_id\"")
			}
		case "billing_account_name":
			if err := func() error {
				s.BillingAccountName.Reset()
				if err := s.BillingAccountName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"billing_account_name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetACommonAreaOKCallingPlansItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetACommonAreaOKCallingPlansItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetACommonAreaOKCallingPlansItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetACommonAreaOKCountry) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetACommonAreaOKCountry) encodeFields(e *jx.Encoder) {
	{
		if s.Code.Set {
			e.FieldStart("code")
			s.Code.Encode(e)
		}
	}
	{
		if s.CountryCode.Set {
			e.FieldStart("country_code")
			s.CountryCode.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetACommonAreaOKCountry = [3]string{
	0: "code",
	1: "country_code",
	2: "name",
}

// Decode decodes GetACommonAreaOKCountry from json.
func (s *GetACommonAreaOKCountry) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetACommonAreaOKCountry to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "code":
			if err := func() error {
				s.Code.Reset()
				if err := s.Code.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code\"")
			}
		case "country_code":
			if err := func() error {
				s.CountryCode.Reset()
				if err := s.CountryCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country_code\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetACommonAreaOKCountry")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetACommonAreaOKCountry) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetACommonAreaOKCountry) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetACommonAreaOKEmergencyAddress) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetACommonAreaOKEmergencyAddress) encodeFields(e *jx.Encoder) {
	{
		if s.AddressLine1.Set {
			e.FieldStart("address_line1")
			s.AddressLine1.Encode(e)
		}
	}
	{
		if s.AddressLine2.Set {
			e.FieldStart("address_line2")
			s.AddressLine2.Encode(e)
		}
	}
	{
		if s.City.Set {
			e.FieldStart("city")
			s.City.Encode(e)
		}
	}
	{
		if s.Country.Set {
			e.FieldStart("country")
			s.Country.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.StateCode.Set {
			e.FieldStart("state_code")
			s.StateCode.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.Zip.Set {
			e.FieldStart("zip")
			s.Zip.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetACommonAreaOKEmergencyAddress = [8]string{
	0: "address_line1",
	1: "address_line2",
	2: "city",
	3: "country",
	4: "id",
	5: "state_code",
	6: "status",
	7: "zip",
}

// Decode decodes GetACommonAreaOKEmergencyAddress from json.
func (s *GetACommonAreaOKEmergencyAddress) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetACommonAreaOKEmergencyAddress to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "address_line1":
			if err := func() error {
				s.AddressLine1.Reset()
				if err := s.AddressLine1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"address_line1\"")
			}
		case "address_line2":
			if err := func() error {
				s.AddressLine2.Reset()
				if err := s.AddressLine2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"address_line2\"")
			}
		case "city":
			if err := func() error {
				s.City.Reset()
				if err := s.City.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"city\"")
			}
		case "country":
			if err := func() error {
				s.Country.Reset()
				if err := s.Country.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "state_code":
			if err := func() error {
				s.StateCode.Reset()
				if err := s.StateCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"state_code\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "zip":
			if err := func() error {
				s.Zip.Reset()
				if err := s.Zip.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zip\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetACommonAreaOKEmergencyAddress")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetACommonAreaOKEmergencyAddress) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetACommonAreaOKEmergencyAddress) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetACommonAreaOKOutboundCallerIdsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetACommonAreaOKOutboundCallerIdsItem) encodeFields(e *jx.Encoder) {
	{
		if s.IsDefault.Set {
			e.FieldStart("is_default")
			s.IsDefault.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Number.Set {
			e.FieldStart("number")
			s.Number.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetACommonAreaOKOutboundCallerIdsItem = [3]string{
	0: "is_default",
	1: "name",
	2: "number",
}

// Decode decodes GetACommonAreaOKOutboundCallerIdsItem from json.
func (s *GetACommonAreaOKOutboundCallerIdsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetACommonAreaOKOutboundCallerIdsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "is_default":
			if err := func() error {
				s.IsDefault.Reset()
				if err := s.IsDefault.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"is_default\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "number":
			if err := func() error {
				s.Number.Reset()
				if err := s.Number.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetACommonAreaOKOutboundCallerIdsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetACommonAreaOKOutboundCallerIdsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetACommonAreaOKOutboundCallerIdsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetACommonAreaOKPhoneNumbersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetACommonAreaOKPhoneNumbersItem) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Number.Set {
			e.FieldStart("number")
			s.Number.Encode(e)
		}
	}
	{
		if s.Source.Set {
			e.FieldStart("source")
			s.Source.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetACommonAreaOKPhoneNumbersItem = [4]string{
	0: "display_name",
	1: "id",
	2: "number",
	3: "source",
}

// Decode decodes GetACommonAreaOKPhoneNumbersItem from json.
func (s *GetACommonAreaOKPhoneNumbersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetACommonAreaOKPhoneNumbersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "number":
			if err := func() error {
				s.Number.Reset()
				if err := s.Number.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "source":
			if err := func() error {
				s.Source.Reset()
				if err := s.Source.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"source\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetACommonAreaOKPhoneNumbersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetACommonAreaOKPhoneNumbersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetACommonAreaOKPhoneNumbersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetACommonAreaOKPolicy) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetACommonAreaOKPolicy) encodeFields(e *jx.Encoder) {
	{
		if s.InternationalCalling.Set {
			e.FieldStart("international_calling")
			s.InternationalCalling.Encode(e)
		}
	}
	{
		if s.OutboundCalling.Set {
			e.FieldStart("outbound_calling")
			s.OutboundCalling.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetACommonAreaOKPolicy = [2]string{
	0: "international_calling",
	1: "outbound_calling",
}

// Decode decodes GetACommonAreaOKPolicy from json.
func (s *GetACommonAreaOKPolicy) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetACommonAreaOKPolicy to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "international_calling":
			if err := func() error {
				s.InternationalCalling.Reset()
				if err := s.InternationalCalling.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"international_calling\"")
			}
		case "outbound_calling":
			if err := func() error {
				s.OutboundCalling.Reset()
				if err := s.OutboundCalling.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"outbound_calling\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetACommonAreaOKPolicy")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetACommonAreaOKPolicy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetACommonAreaOKPolicy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetACommonAreaOKPolicyInternationalCalling) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetACommonAreaOKPolicyInternationalCalling) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetACommonAreaOKPolicyInternationalCalling = [4]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
}

// Decode decodes GetACommonAreaOKPolicyInternationalCalling from json.
func (s *GetACommonAreaOKPolicyInternationalCalling) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetACommonAreaOKPolicyInternationalCalling to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetACommonAreaOKPolicyInternationalCalling")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetACommonAreaOKPolicyInternationalCalling) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetACommonAreaOKPolicyInternationalCalling) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetACommonAreaOKPolicyOutboundCalling) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetACommonAreaOKPolicyOutboundCalling) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetACommonAreaOKPolicyOutboundCalling = [3]string{
	0: "enable",
	1: "locked",
	2: "modified",
}

// Decode decodes GetACommonAreaOKPolicyOutboundCalling from json.
func (s *GetACommonAreaOKPolicyOutboundCalling) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetACommonAreaOKPolicyOutboundCalling to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetACommonAreaOKPolicyOutboundCalling")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetACommonAreaOKPolicyOutboundCalling) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetACommonAreaOKPolicyOutboundCalling) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetACommonAreaOKSite) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetACommonAreaOKSite) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetACommonAreaOKSite = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes GetACommonAreaOKSite from json.
func (s *GetACommonAreaOKSite) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetACommonAreaOKSite to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetACommonAreaOKSite")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetACommonAreaOKSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetACommonAreaOKSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetADeviceOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetADeviceOK) encodeFields(e *jx.Encoder) {
	{
		if s.Assignee.Set {
			e.FieldStart("assignee")
			s.Assignee.Encode(e)
		}
	}
	{
		if s.Assignees != nil {
			e.FieldStart("assignees")
			e.ArrStart()
			for _, elem := range s.Assignees {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.DeviceType.Set {
			e.FieldStart("device_type")
			s.DeviceType.Encode(e)
		}
	}
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.MACAddress.Set {
			e.FieldStart("mac_address")
			s.MACAddress.Encode(e)
		}
	}
	{
		if s.Provision.Set {
			e.FieldStart("provision")
			s.Provision.Encode(e)
		}
	}
	{
		if s.Site.Set {
			e.FieldStart("site")
			s.Site.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.ProvisionTemplateID.Set {
			e.FieldStart("provision_template_id")
			s.ProvisionTemplateID.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetADeviceOK = [10]string{
	0: "assignee",
	1: "assignees",
	2: "device_type",
	3: "display_name",
	4: "id",
	5: "mac_address",
	6: "provision",
	7: "site",
	8: "status",
	9: "provision_template_id",
}

// Decode decodes GetADeviceOK from json.
func (s *GetADeviceOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetADeviceOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "assignee":
			if err := func() error {
				s.Assignee.Reset()
				if err := s.Assignee.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"assignee\"")
			}
		case "assignees":
			if err := func() error {
				s.Assignees = make([]GetADeviceOKAssigneesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetADeviceOKAssigneesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Assignees = append(s.Assignees, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"assignees\"")
			}
		case "device_type":
			if err := func() error {
				s.DeviceType.Reset()
				if err := s.DeviceType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_type\"")
			}
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "mac_address":
			if err := func() error {
				s.MACAddress.Reset()
				if err := s.MACAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mac_address\"")
			}
		case "provision":
			if err := func() error {
				s.Provision.Reset()
				if err := s.Provision.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provision\"")
			}
		case "site":
			if err := func() error {
				s.Site.Reset()
				if err := s.Site.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "provision_template_id":
			if err := func() error {
				s.ProvisionTemplateID.Reset()
				if err := s.ProvisionTemplateID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provision_template_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetADeviceOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetADeviceOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetADeviceOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetADeviceOKAssignee) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetADeviceOKAssignee) encodeFields(e *jx.Encoder) {
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.ExtensionType.Set {
			e.FieldStart("extension_type")
			s.ExtensionType.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetADeviceOKAssignee = [4]string{
	0: "extension_number",
	1: "id",
	2: "name",
	3: "extension_type",
}

// Decode decodes GetADeviceOKAssignee from json.
func (s *GetADeviceOKAssignee) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetADeviceOKAssignee to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "extension_type":
			if err := func() error {
				s.ExtensionType.Reset()
				if err := s.ExtensionType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetADeviceOKAssignee")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetADeviceOKAssignee) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetADeviceOKAssignee) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetADeviceOKAssigneesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetADeviceOKAssigneesItem) encodeFields(e *jx.Encoder) {
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.ExtensionType.Set {
			e.FieldStart("extension_type")
			s.ExtensionType.Encode(e)
		}
	}
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetADeviceOKAssigneesItem = [5]string{
	0: "extension_number",
	1: "id",
	2: "name",
	3: "extension_type",
	4: "extension_id",
}

// Decode decodes GetADeviceOKAssigneesItem from json.
func (s *GetADeviceOKAssigneesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetADeviceOKAssigneesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "extension_type":
			if err := func() error {
				s.ExtensionType.Reset()
				if err := s.ExtensionType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_type\"")
			}
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetADeviceOKAssigneesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetADeviceOKAssigneesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetADeviceOKAssigneesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetADeviceOKProvision) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetADeviceOKProvision) encodeFields(e *jx.Encoder) {
	{
		if s.SipAccounts != nil {
			e.FieldStart("sip_accounts")
			e.ArrStart()
			for _, elem := range s.SipAccounts {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.URL.Set {
			e.FieldStart("url")
			s.URL.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetADeviceOKProvision = [3]string{
	0: "sip_accounts",
	1: "type",
	2: "url",
}

// Decode decodes GetADeviceOKProvision from json.
func (s *GetADeviceOKProvision) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetADeviceOKProvision to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "sip_accounts":
			if err := func() error {
				s.SipAccounts = make([]GetADeviceOKProvisionSipAccountsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetADeviceOKProvisionSipAccountsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.SipAccounts = append(s.SipAccounts, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sip_accounts\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "url":
			if err := func() error {
				s.URL.Reset()
				if err := s.URL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"url\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetADeviceOKProvision")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetADeviceOKProvision) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetADeviceOKProvision) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetADeviceOKProvisionSipAccountsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetADeviceOKProvisionSipAccountsItem) encodeFields(e *jx.Encoder) {
	{
		if s.AuthorizationID.Set {
			e.FieldStart("authorization_id")
			s.AuthorizationID.Encode(e)
		}
	}
	{
		if s.OutboundProxy.Set {
			e.FieldStart("outbound_proxy")
			s.OutboundProxy.Encode(e)
		}
	}
	{
		if s.Password.Set {
			e.FieldStart("password")
			s.Password.Encode(e)
		}
	}
	{
		if s.SecondaryOutboundProxy.Set {
			e.FieldStart("secondary_outbound_proxy")
			s.SecondaryOutboundProxy.Encode(e)
		}
	}
	{
		if s.SharedLine.Set {
			e.FieldStart("shared_line")
			s.SharedLine.Encode(e)
		}
	}
	{
		if s.SipDomain.Set {
			e.FieldStart("sip_domain")
			s.SipDomain.Encode(e)
		}
	}
	{
		if s.UserName.Set {
			e.FieldStart("user_name")
			s.UserName.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetADeviceOKProvisionSipAccountsItem = [7]string{
	0: "authorization_id",
	1: "outbound_proxy",
	2: "password",
	3: "secondary_outbound_proxy",
	4: "shared_line",
	5: "sip_domain",
	6: "user_name",
}

// Decode decodes GetADeviceOKProvisionSipAccountsItem from json.
func (s *GetADeviceOKProvisionSipAccountsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetADeviceOKProvisionSipAccountsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "authorization_id":
			if err := func() error {
				s.AuthorizationID.Reset()
				if err := s.AuthorizationID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"authorization_id\"")
			}
		case "outbound_proxy":
			if err := func() error {
				s.OutboundProxy.Reset()
				if err := s.OutboundProxy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"outbound_proxy\"")
			}
		case "password":
			if err := func() error {
				s.Password.Reset()
				if err := s.Password.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"password\"")
			}
		case "secondary_outbound_proxy":
			if err := func() error {
				s.SecondaryOutboundProxy.Reset()
				if err := s.SecondaryOutboundProxy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"secondary_outbound_proxy\"")
			}
		case "shared_line":
			if err := func() error {
				s.SharedLine.Reset()
				if err := s.SharedLine.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shared_line\"")
			}
		case "sip_domain":
			if err := func() error {
				s.SipDomain.Reset()
				if err := s.SipDomain.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sip_domain\"")
			}
		case "user_name":
			if err := func() error {
				s.UserName.Reset()
				if err := s.UserName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"user_name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetADeviceOKProvisionSipAccountsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetADeviceOKProvisionSipAccountsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetADeviceOKProvisionSipAccountsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetADeviceOKProvisionSipAccountsItemSharedLine) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetADeviceOKProvisionSipAccountsItemSharedLine) encodeFields(e *jx.Encoder) {
	{
		if s.Alias.Set {
			e.FieldStart("alias")
			s.Alias.Encode(e)
		}
	}
	{
		if s.LineSubscription.Set {
			e.FieldStart("line_subscription")
			s.LineSubscription.Encode(e)
		}
	}
	{
		if s.OutboundCallerID.Set {
			e.FieldStart("outbound_caller_id")
			s.OutboundCallerID.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetADeviceOKProvisionSipAccountsItemSharedLine = [3]string{
	0: "alias",
	1: "line_subscription",
	2: "outbound_caller_id",
}

// Decode decodes GetADeviceOKProvisionSipAccountsItemSharedLine from json.
func (s *GetADeviceOKProvisionSipAccountsItemSharedLine) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetADeviceOKProvisionSipAccountsItemSharedLine to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "alias":
			if err := func() error {
				s.Alias.Reset()
				if err := s.Alias.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"alias\"")
			}
		case "line_subscription":
			if err := func() error {
				s.LineSubscription.Reset()
				if err := s.LineSubscription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"line_subscription\"")
			}
		case "outbound_caller_id":
			if err := func() error {
				s.OutboundCallerID.Reset()
				if err := s.OutboundCallerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"outbound_caller_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetADeviceOKProvisionSipAccountsItemSharedLine")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetADeviceOKProvisionSipAccountsItemSharedLine) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetADeviceOKProvisionSipAccountsItemSharedLine) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetADeviceOKProvisionSipAccountsItemSharedLineLineSubscription) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetADeviceOKProvisionSipAccountsItemSharedLineLineSubscription) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.PhoneNumber.Set {
			e.FieldStart("phone_number")
			s.PhoneNumber.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetADeviceOKProvisionSipAccountsItemSharedLineLineSubscription = [3]string{
	0: "display_name",
	1: "extension_number",
	2: "phone_number",
}

// Decode decodes GetADeviceOKProvisionSipAccountsItemSharedLineLineSubscription from json.
func (s *GetADeviceOKProvisionSipAccountsItemSharedLineLineSubscription) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetADeviceOKProvisionSipAccountsItemSharedLineLineSubscription to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetADeviceOKProvisionSipAccountsItemSharedLineLineSubscription")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetADeviceOKProvisionSipAccountsItemSharedLineLineSubscription) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetADeviceOKProvisionSipAccountsItemSharedLineLineSubscription) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetADeviceOKSite) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetADeviceOKSite) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetADeviceOKSite = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes GetADeviceOKSite from json.
func (s *GetADeviceOKSite) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetADeviceOKSite to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetADeviceOKSite")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetADeviceOKSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetADeviceOKSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetAExternalContactOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetAExternalContactOK) encodeFields(e *jx.Encoder) {
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.Email.Set {
			e.FieldStart("email")
			s.Email.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ExternalContactID.Set {
			e.FieldStart("external_contact_id")
			s.ExternalContactID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.PhoneNumbers != nil {
			e.FieldStart("phone_numbers")
			e.ArrStart()
			for _, elem := range s.PhoneNumbers {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.AutoCallRecorded.Set {
			e.FieldStart("auto_call_recorded")
			s.AutoCallRecorded.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetAExternalContactOK = [8]string{
	0: "description",
	1: "email",
	2: "extension_number",
	3: "external_contact_id",
	4: "id",
	5: "name",
	6: "phone_numbers",
	7: "auto_call_recorded",
}

// Decode decodes GetAExternalContactOK from json.
func (s *GetAExternalContactOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetAExternalContactOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "email":
			if err := func() error {
				s.Email.Reset()
				if err := s.Email.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "external_contact_id":
			if err := func() error {
				s.ExternalContactID.Reset()
				if err := s.ExternalContactID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"external_contact_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "phone_numbers":
			if err := func() error {
				s.PhoneNumbers = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.PhoneNumbers = append(s.PhoneNumbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_numbers\"")
			}
		case "auto_call_recorded":
			if err := func() error {
				s.AutoCallRecorded.Reset()
				if err := s.AutoCallRecorded.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_call_recorded\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetAExternalContactOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetAExternalContactOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetAExternalContactOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetASharedLineGroupOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetASharedLineGroupOK) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Members.Set {
			e.FieldStart("members")
			s.Members.Encode(e)
		}
	}
	{
		if s.PhoneNumbers != nil {
			e.FieldStart("phone_numbers")
			e.ArrStart()
			for _, elem := range s.PhoneNumbers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.PrimaryNumber.Set {
			e.FieldStart("primary_number")
			s.PrimaryNumber.Encode(e)
		}
	}
	{
		if s.Site.Set {
			e.FieldStart("site")
			s.Site.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.Timezone.Set {
			e.FieldStart("timezone")
			s.Timezone.Encode(e)
		}
	}
	{
		if s.Policy.Set {
			e.FieldStart("policy")
			s.Policy.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetASharedLineGroupOK = [11]string{
	0:  "display_name",
	1:  "extension_id",
	2:  "extension_number",
	3:  "id",
	4:  "members",
	5:  "phone_numbers",
	6:  "primary_number",
	7:  "site",
	8:  "status",
	9:  "timezone",
	10: "policy",
}

// Decode decodes GetASharedLineGroupOK from json.
func (s *GetASharedLineGroupOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetASharedLineGroupOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "members":
			if err := func() error {
				s.Members.Reset()
				if err := s.Members.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"members\"")
			}
		case "phone_numbers":
			if err := func() error {
				s.PhoneNumbers = make([]GetASharedLineGroupOKPhoneNumbersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetASharedLineGroupOKPhoneNumbersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.PhoneNumbers = append(s.PhoneNumbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_numbers\"")
			}
		case "primary_number":
			if err := func() error {
				s.PrimaryNumber.Reset()
				if err := s.PrimaryNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"primary_number\"")
			}
		case "site":
			if err := func() error {
				s.Site.Reset()
				if err := s.Site.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "timezone":
			if err := func() error {
				s.Timezone.Reset()
				if err := s.Timezone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"timezone\"")
			}
		case "policy":
			if err := func() error {
				s.Policy.Reset()
				if err := s.Policy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"policy\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetASharedLineGroupOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetASharedLineGroupOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetASharedLineGroupOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetASharedLineGroupOKMembers) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetASharedLineGroupOKMembers) encodeFields(e *jx.Encoder) {
	{
		if s.Users != nil {
			e.FieldStart("users")
			e.ArrStart()
			for _, elem := range s.Users {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.CommonAreas != nil {
			e.FieldStart("common_areas")
			e.ArrStart()
			for _, elem := range s.CommonAreas {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGetASharedLineGroupOKMembers = [2]string{
	0: "users",
	1: "common_areas",
}

// Decode decodes GetASharedLineGroupOKMembers from json.
func (s *GetASharedLineGroupOKMembers) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetASharedLineGroupOKMembers to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "users":
			if err := func() error {
				s.Users = make([]GetASharedLineGroupOKMembersUsersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetASharedLineGroupOKMembersUsersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Users = append(s.Users, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"users\"")
			}
		case "common_areas":
			if err := func() error {
				s.CommonAreas = make([]GetASharedLineGroupOKMembersCommonAreasItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetASharedLineGroupOKMembersCommonAreasItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CommonAreas = append(s.CommonAreas, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"common_areas\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetASharedLineGroupOKMembers")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetASharedLineGroupOKMembers) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetASharedLineGroupOKMembers) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetASharedLineGroupOKMembersCommonAreasItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetASharedLineGroupOKMembersCommonAreasItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetASharedLineGroupOKMembersCommonAreasItem = [3]string{
	0: "id",
	1: "name",
	2: "extension_id",
}

// Decode decodes GetASharedLineGroupOKMembersCommonAreasItem from json.
func (s *GetASharedLineGroupOKMembersCommonAreasItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetASharedLineGroupOKMembersCommonAreasItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetASharedLineGroupOKMembersCommonAreasItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetASharedLineGroupOKMembersCommonAreasItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetASharedLineGroupOKMembersCommonAreasItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetASharedLineGroupOKMembersUsersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetASharedLineGroupOKMembersUsersItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetASharedLineGroupOKMembersUsersItem = [3]string{
	0: "id",
	1: "name",
	2: "extension_id",
}

// Decode decodes GetASharedLineGroupOKMembersUsersItem from json.
func (s *GetASharedLineGroupOKMembersUsersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetASharedLineGroupOKMembersUsersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetASharedLineGroupOKMembersUsersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetASharedLineGroupOKMembersUsersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetASharedLineGroupOKMembersUsersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetASharedLineGroupOKPhoneNumbersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetASharedLineGroupOKPhoneNumbersItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Number.Set {
			e.FieldStart("number")
			s.Number.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetASharedLineGroupOKPhoneNumbersItem = [2]string{
	0: "id",
	1: "number",
}

// Decode decodes GetASharedLineGroupOKPhoneNumbersItem from json.
func (s *GetASharedLineGroupOKPhoneNumbersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetASharedLineGroupOKPhoneNumbersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "number":
			if err := func() error {
				s.Number.Reset()
				if err := s.Number.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetASharedLineGroupOKPhoneNumbersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetASharedLineGroupOKPhoneNumbersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetASharedLineGroupOKPhoneNumbersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetASharedLineGroupOKPolicy) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetASharedLineGroupOKPolicy) encodeFields(e *jx.Encoder) {
	{
		if s.VoicemailAccessMembers != nil {
			e.FieldStart("voicemail_access_members")
			e.ArrStart()
			for _, elem := range s.VoicemailAccessMembers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGetASharedLineGroupOKPolicy = [1]string{
	0: "voicemail_access_members",
}

// Decode decodes GetASharedLineGroupOKPolicy from json.
func (s *GetASharedLineGroupOKPolicy) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetASharedLineGroupOKPolicy to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "voicemail_access_members":
			if err := func() error {
				s.VoicemailAccessMembers = make([]GetASharedLineGroupOKPolicyVoicemailAccessMembersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetASharedLineGroupOKPolicyVoicemailAccessMembersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.VoicemailAccessMembers = append(s.VoicemailAccessMembers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voicemail_access_members\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetASharedLineGroupOKPolicy")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetASharedLineGroupOKPolicy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetASharedLineGroupOKPolicy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetASharedLineGroupOKPolicyVoicemailAccessMembersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetASharedLineGroupOKPolicyVoicemailAccessMembersItem) encodeFields(e *jx.Encoder) {
	{
		if s.AccessUserID.Set {
			e.FieldStart("access_user_id")
			s.AccessUserID.Encode(e)
		}
	}
	{
		if s.AllowDownload.Set {
			e.FieldStart("allow_download")
			s.AllowDownload.Encode(e)
		}
	}
	{
		if s.AllowDelete.Set {
			e.FieldStart("allow_delete")
			s.AllowDelete.Encode(e)
		}
	}
	{
		if s.AllowSharing.Set {
			e.FieldStart("allow_sharing")
			s.AllowSharing.Encode(e)
		}
	}
	{
		if s.SharedID.Set {
			e.FieldStart("shared_id")
			s.SharedID.Encode(e)
		}
	}
	{
		if s.AccessUserType.Set {
			e.FieldStart("access_user_type")
			s.AccessUserType.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetASharedLineGroupOKPolicyVoicemailAccessMembersItem = [6]string{
	0: "access_user_id",
	1: "allow_download",
	2: "allow_delete",
	3: "allow_sharing",
	4: "shared_id",
	5: "access_user_type",
}

// Decode decodes GetASharedLineGroupOKPolicyVoicemailAccessMembersItem from json.
func (s *GetASharedLineGroupOKPolicyVoicemailAccessMembersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetASharedLineGroupOKPolicyVoicemailAccessMembersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "access_user_id":
			if err := func() error {
				s.AccessUserID.Reset()
				if err := s.AccessUserID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_user_id\"")
			}
		case "allow_download":
			if err := func() error {
				s.AllowDownload.Reset()
				if err := s.AllowDownload.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_download\"")
			}
		case "allow_delete":
			if err := func() error {
				s.AllowDelete.Reset()
				if err := s.AllowDelete.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_delete\"")
			}
		case "allow_sharing":
			if err := func() error {
				s.AllowSharing.Reset()
				if err := s.AllowSharing.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_sharing\"")
			}
		case "shared_id":
			if err := func() error {
				s.SharedID.Reset()
				if err := s.SharedID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shared_id\"")
			}
		case "access_user_type":
			if err := func() error {
				s.AccessUserType.Reset()
				if err := s.AccessUserType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_user_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetASharedLineGroupOKPolicyVoicemailAccessMembersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetASharedLineGroupOKPolicyVoicemailAccessMembersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetASharedLineGroupOKPolicyVoicemailAccessMembersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetASharedLineGroupOKSite) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetASharedLineGroupOKSite) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetASharedLineGroupOKSite = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes GetASharedLineGroupOKSite from json.
func (s *GetASharedLineGroupOKSite) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetASharedLineGroupOKSite to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetASharedLineGroupOKSite")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetASharedLineGroupOKSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetASharedLineGroupOKSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetASiteOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetASiteOK) encodeFields(e *jx.Encoder) {
	{
		if s.Country.Set {
			e.FieldStart("country")
			s.Country.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.MainAutoReceptionist.Set {
			e.FieldStart("main_auto_receptionist")
			s.MainAutoReceptionist.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.ShortExtension.Set {
			e.FieldStart("short_extension")
			s.ShortExtension.Encode(e)
		}
	}
	{
		if s.SiteCode.Set {
			e.FieldStart("site_code")
			s.SiteCode.Encode(e)
		}
	}
	{
		if s.Policy.Set {
			e.FieldStart("policy")
			s.Policy.Encode(e)
		}
	}
	{
		if s.SipZone.Set {
			e.FieldStart("sip_zone")
			s.SipZone.Encode(e)
		}
	}
	{
		if s.CallerIDName.Set {
			e.FieldStart("caller_id_name")
			s.CallerIDName.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetASiteOK = [9]string{
	0: "country",
	1: "id",
	2: "main_auto_receptionist",
	3: "name",
	4: "short_extension",
	5: "site_code",
	6: "policy",
	7: "sip_zone",
	8: "caller_id_name",
}

// Decode decodes GetASiteOK from json.
func (s *GetASiteOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetASiteOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "country":
			if err := func() error {
				s.Country.Reset()
				if err := s.Country.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "main_auto_receptionist":
			if err := func() error {
				s.MainAutoReceptionist.Reset()
				if err := s.MainAutoReceptionist.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"main_auto_receptionist\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "short_extension":
			if err := func() error {
				s.ShortExtension.Reset()
				if err := s.ShortExtension.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"short_extension\"")
			}
		case "site_code":
			if err := func() error {
				s.SiteCode.Reset()
				if err := s.SiteCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_code\"")
			}
		case "policy":
			if err := func() error {
				s.Policy.Reset()
				if err := s.Policy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"policy\"")
			}
		case "sip_zone":
			if err := func() error {
				s.SipZone.Reset()
				if err := s.SipZone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sip_zone\"")
			}
		case "caller_id_name":
			if err := func() error {
				s.CallerIDName.Reset()
				if err := s.CallerIDName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_id_name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetASiteOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetASiteOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetASiteOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetASiteOKCountry) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetASiteOKCountry) encodeFields(e *jx.Encoder) {
	{
		if s.Code.Set {
			e.FieldStart("code")
			s.Code.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetASiteOKCountry = [2]string{
	0: "code",
	1: "name",
}

// Decode decodes GetASiteOKCountry from json.
func (s *GetASiteOKCountry) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetASiteOKCountry to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "code":
			if err := func() error {
				s.Code.Reset()
				if err := s.Code.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetASiteOKCountry")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetASiteOKCountry) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetASiteOKCountry) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetASiteOKMainAutoReceptionist) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetASiteOKMainAutoReceptionist) encodeFields(e *jx.Encoder) {
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetASiteOKMainAutoReceptionist = [4]string{
	0: "extension_id",
	1: "extension_number",
	2: "id",
	3: "name",
}

// Decode decodes GetASiteOKMainAutoReceptionist from json.
func (s *GetASiteOKMainAutoReceptionist) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetASiteOKMainAutoReceptionist to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetASiteOKMainAutoReceptionist")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetASiteOKMainAutoReceptionist) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetASiteOKMainAutoReceptionist) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetASiteOKPolicy) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetASiteOKPolicy) encodeFields(e *jx.Encoder) {
	{
		if s.SelectOutboundCallerID.Set {
			e.FieldStart("select_outbound_caller_id")
			s.SelectOutboundCallerID.Encode(e)
		}
	}
	{
		if s.PersonalAudioLibrary.Set {
			e.FieldStart("personal_audio_library")
			s.PersonalAudioLibrary.Encode(e)
		}
	}
	{
		if s.Voicemail.Set {
			e.FieldStart("voicemail")
			s.Voicemail.Encode(e)
		}
	}
	{
		if s.VoicemailTranscription.Set {
			e.FieldStart("voicemail_transcription")
			s.VoicemailTranscription.Encode(e)
		}
	}
	{
		if s.VoicemailNotificationByEmail.Set {
			e.FieldStart("voicemail_notification_by_email")
			s.VoicemailNotificationByEmail.Encode(e)
		}
	}
	{
		if s.SharedVoicemailNotificationByEmail.Set {
			e.FieldStart("shared_voicemail_notification_by_email")
			s.SharedVoicemailNotificationByEmail.Encode(e)
		}
	}
	{
		if s.InternationalCalling.Set {
			e.FieldStart("international_calling")
			s.InternationalCalling.Encode(e)
		}
	}
	{
		if s.ZoomPhoneOnMobile.Set {
			e.FieldStart("zoom_phone_on_mobile")
			s.ZoomPhoneOnMobile.Encode(e)
		}
	}
	{
		if s.SMS.Set {
			e.FieldStart("sms")
			s.SMS.Encode(e)
		}
	}
	{
		if s.ElevateToMeeting.Set {
			e.FieldStart("elevate_to_meeting")
			s.ElevateToMeeting.Encode(e)
		}
	}
	{
		if s.HandOffToRoom.Set {
			e.FieldStart("hand_off_to_room")
			s.HandOffToRoom.Encode(e)
		}
	}
	{
		if s.MobileSwitchToCarrier.Set {
			e.FieldStart("mobile_switch_to_carrier")
			s.MobileSwitchToCarrier.Encode(e)
		}
	}
	{
		if s.Delegation.Set {
			e.FieldStart("delegation")
			s.Delegation.Encode(e)
		}
	}
	{
		if s.AdHocCallRecording.Set {
			e.FieldStart("ad_hoc_call_recording")
			s.AdHocCallRecording.Encode(e)
		}
	}
	{
		if s.AutoCallRecording.Set {
			e.FieldStart("auto_call_recording")
			s.AutoCallRecording.Encode(e)
		}
	}
	{
		if s.CallHandlingForwardingToOtherUsers.Set {
			e.FieldStart("call_handling_forwarding_to_other_users")
			s.CallHandlingForwardingToOtherUsers.Encode(e)
		}
	}
	{
		if s.CheckVoicemailsOverPhone.Set {
			e.FieldStart("check_voicemails_over_phone")
			s.CheckVoicemailsOverPhone.Encode(e)
		}
	}
	{
		if s.CallQueuePickupCode.Set {
			e.FieldStart("call_queue_pickup_code")
			s.CallQueuePickupCode.Encode(e)
		}
	}
	{
		if s.CallQueueOptOutReason.Set {
			e.FieldStart("call_queue_opt_out_reason")
			s.CallQueueOptOutReason.Encode(e)
		}
	}
	{
		if s.ShowUserLastTransferredCall.Set {
			e.FieldStart("show_user_last_transferred_call")
			s.ShowUserLastTransferredCall.Encode(e)
		}
	}
	{
		if s.AutoDeleteDataAfterRetentionDuration.Set {
			e.FieldStart("auto_delete_data_after_retention_duration")
			s.AutoDeleteDataAfterRetentionDuration.Encode(e)
		}
	}
	{
		if s.CallPark.Set {
			e.FieldStart("call_park")
			s.CallPark.Encode(e)
		}
	}
	{
		if s.CallOverflow.Set {
			e.FieldStart("call_overflow")
			s.CallOverflow.Encode(e)
		}
	}
	{
		if s.CallTransferring.Set {
			e.FieldStart("call_transferring")
			s.CallTransferring.Encode(e)
		}
	}
	{
		if s.AudioIntercom.Set {
			e.FieldStart("audio_intercom")
			s.AudioIntercom.Encode(e)
		}
	}
	{
		if s.BlockCallsWithoutCallerID.Set {
			e.FieldStart("block_calls_without_caller_id")
			s.BlockCallsWithoutCallerID.Encode(e)
		}
	}
	{
		if s.BlockExternalCalls.Set {
			e.FieldStart("block_external_calls")
			s.BlockExternalCalls.Encode(e)
		}
	}
	{
		if s.ForceOffNet.Set {
			e.FieldStart("force_off_net")
			s.ForceOffNet.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetASiteOKPolicy = [28]string{
	0:  "select_outbound_caller_id",
	1:  "personal_audio_library",
	2:  "voicemail",
	3:  "voicemail_transcription",
	4:  "voicemail_notification_by_email",
	5:  "shared_voicemail_notification_by_email",
	6:  "international_calling",
	7:  "zoom_phone_on_mobile",
	8:  "sms",
	9:  "elevate_to_meeting",
	10: "hand_off_to_room",
	11: "mobile_switch_to_carrier",
	12: "delegation",
	13: "ad_hoc_call_recording",
	14: "auto_call_recording",
	15: "call_handling_forwarding_to_other_users",
	16: "check_voicemails_over_phone",
	17: "call_queue_pickup_code",
	18: "call_queue_opt_out_reason",
	19: "show_user_last_transferred_call",
	20: "auto_delete_data_after_retention_duration",
	21: "call_park",
	22: "call_overflow",
	23: "call_transferring",
	24: "audio_intercom",
	25: "block_calls_without_caller_id",
	26: "block_external_calls",
	27: "force_off_net",
}

// Decode decodes GetASiteOKPolicy from json.
func (s *GetASiteOKPolicy) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetASiteOKPolicy to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "select_outbound_caller_id":
			if err := func() error {
				s.SelectOutboundCallerID.Reset()
				if err := s.SelectOutboundCallerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"select_outbound_caller_id\"")
			}
		case "personal_audio_library":
			if err := func() error {
				s.PersonalAudioLibrary.Reset()
				if err := s.PersonalAudioLibrary.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"personal_audio_library\"")
			}
		case "voicemail":
			if err := func() error {
				s.Voicemail.Reset()
				if err := s.Voicemail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voicemail\"")
			}
		case "voicemail_transcription":
			if err := func() error {
				s.VoicemailTranscription.Reset()
				if err := s.VoicemailTranscription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voicemail_transcription\"")
			}
		case "voicemail_notification_by_email":
			if err := func() error {
				s.VoicemailNotificationByEmail.Reset()
				if err := s.VoicemailNotificationByEmail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voicemail_notification_by_email\"")
			}
		case "shared_voicemail_notification_by_email":
			if err := func() error {
				s.SharedVoicemailNotificationByEmail.Reset()
				if err := s.SharedVoicemailNotificationByEmail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shared_voicemail_notification_by_email\"")
			}
		case "international_calling":
			if err := func() error {
				s.InternationalCalling.Reset()
				if err := s.InternationalCalling.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"international_calling\"")
			}
		case "zoom_phone_on_mobile":
			if err := func() error {
				s.ZoomPhoneOnMobile.Reset()
				if err := s.ZoomPhoneOnMobile.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_phone_on_mobile\"")
			}
		case "sms":
			if err := func() error {
				s.SMS.Reset()
				if err := s.SMS.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sms\"")
			}
		case "elevate_to_meeting":
			if err := func() error {
				s.ElevateToMeeting.Reset()
				if err := s.ElevateToMeeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"elevate_to_meeting\"")
			}
		case "hand_off_to_room":
			if err := func() error {
				s.HandOffToRoom.Reset()
				if err := s.HandOffToRoom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hand_off_to_room\"")
			}
		case "mobile_switch_to_carrier":
			if err := func() error {
				s.MobileSwitchToCarrier.Reset()
				if err := s.MobileSwitchToCarrier.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mobile_switch_to_carrier\"")
			}
		case "delegation":
			if err := func() error {
				s.Delegation.Reset()
				if err := s.Delegation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delegation\"")
			}
		case "ad_hoc_call_recording":
			if err := func() error {
				s.AdHocCallRecording.Reset()
				if err := s.AdHocCallRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ad_hoc_call_recording\"")
			}
		case "auto_call_recording":
			if err := func() error {
				s.AutoCallRecording.Reset()
				if err := s.AutoCallRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_call_recording\"")
			}
		case "call_handling_forwarding_to_other_users":
			if err := func() error {
				s.CallHandlingForwardingToOtherUsers.Reset()
				if err := s.CallHandlingForwardingToOtherUsers.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_handling_forwarding_to_other_users\"")
			}
		case "check_voicemails_over_phone":
			if err := func() error {
				s.CheckVoicemailsOverPhone.Reset()
				if err := s.CheckVoicemailsOverPhone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"check_voicemails_over_phone\"")
			}
		case "call_queue_pickup_code":
			if err := func() error {
				s.CallQueuePickupCode.Reset()
				if err := s.CallQueuePickupCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_queue_pickup_code\"")
			}
		case "call_queue_opt_out_reason":
			if err := func() error {
				s.CallQueueOptOutReason.Reset()
				if err := s.CallQueueOptOutReason.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_queue_opt_out_reason\"")
			}
		case "show_user_last_transferred_call":
			if err := func() error {
				s.ShowUserLastTransferredCall.Reset()
				if err := s.ShowUserLastTransferredCall.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"show_user_last_transferred_call\"")
			}
		case "auto_delete_data_after_retention_duration":
			if err := func() error {
				s.AutoDeleteDataAfterRetentionDuration.Reset()
				if err := s.AutoDeleteDataAfterRetentionDuration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_delete_data_after_retention_duration\"")
			}
		case "call_park":
			if err := func() error {
				s.CallPark.Reset()
				if err := s.CallPark.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_park\"")
			}
		case "call_overflow":
			if err := func() error {
				s.CallOverflow.Reset()
				if err := s.CallOverflow.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_overflow\"")
			}
		case "call_transferring":
			if err := func() error {
				s.CallTransferring.Reset()
				if err := s.CallTransferring.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_transferring\"")
			}
		case "audio_intercom":
			if err := func() error {
				s.AudioIntercom.Reset()
				if err := s.AudioIntercom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_intercom\"")
			}
		case "block_calls_without_caller_id":
			if err := func() error {
				s.BlockCallsWithoutCallerID.Reset()
				if err := s.BlockCallsWithoutCallerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"block_calls_without_caller_id\"")
			}
		case "block_external_calls":
			if err := func() error {
				s.BlockExternalCalls.Reset()
				if err := s.BlockExternalCalls.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"block_external_calls\"")
			}
		case "force_off_net":
			if err := func() error {
				s.ForceOffNet.Reset()
				if err := s.ForceOffNet.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"force_off_net\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetASiteOKPolicy")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetASiteOKPolicy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetASiteOKPolicy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetASiteOKPolicyAdHocCallRecording) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetASiteOKPolicyAdHocCallRecording) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.RecordingStartPrompt.Set {
			e.FieldStart("recording_start_prompt")
			s.RecordingStartPrompt.Encode(e)
		}
	}
	{
		if s.RecordingTranscription.Set {
			e.FieldStart("recording_transcription")
			s.RecordingTranscription.Encode(e)
		}
	}
	{
		if s.PlayRecordingBeepTone.Set {
			e.FieldStart("play_recording_beep_tone")
			s.PlayRecordingBeepTone.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetASiteOKPolicyAdHocCallRecording = [7]string{
	0: "enable",
	1: "recording_start_prompt",
	2: "recording_transcription",
	3: "play_recording_beep_tone",
	4: "locked",
	5: "locked_by",
	6: "modified",
}

// Decode decodes GetASiteOKPolicyAdHocCallRecording from json.
func (s *GetASiteOKPolicyAdHocCallRecording) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetASiteOKPolicyAdHocCallRecording to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "recording_start_prompt":
			if err := func() error {
				s.RecordingStartPrompt.Reset()
				if err := s.RecordingStartPrompt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_start_prompt\"")
			}
		case "recording_transcription":
			if err := func() error {
				s.RecordingTranscription.Reset()
				if err := s.RecordingTranscription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_transcription\"")
			}
		case "play_recording_beep_tone":
			if err := func() error {
				s.PlayRecordingBeepTone.Reset()
				if err := s.PlayRecordingBeepTone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_recording_beep_tone\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetASiteOKPolicyAdHocCallRecording")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetASiteOKPolicyAdHocCallRecording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetASiteOKPolicyAdHocCallRecording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetASiteOKPolicyAdHocCallRecordingPlayRecordingBeepTone) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetASiteOKPolicyAdHocCallRecordingPlayRecordingBeepTone) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.PlayBeepVolume.Set {
			e.FieldStart("play_beep_volume")
			s.PlayBeepVolume.Encode(e)
		}
	}
	{
		if s.PlayBeepTimeInterval.Set {
			e.FieldStart("play_beep_time_interval")
			s.PlayBeepTimeInterval.Encode(e)
		}
	}
	{
		if s.PlayBeepMember.Set {
			e.FieldStart("play_beep_member")
			s.PlayBeepMember.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetASiteOKPolicyAdHocCallRecordingPlayRecordingBeepTone = [4]string{
	0: "enable",
	1: "play_beep_volume",
	2: "play_beep_time_interval",
	3: "play_beep_member",
}

// Decode decodes GetASiteOKPolicyAdHocCallRecordingPlayRecordingBeepTone from json.
func (s *GetASiteOKPolicyAdHocCallRecordingPlayRecordingBeepTone) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetASiteOKPolicyAdHocCallRecordingPlayRecordingBeepTone to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "play_beep_volume":
			if err := func() error {
				s.PlayBeepVolume.Reset()
				if err := s.PlayBeepVolume.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_beep_volume\"")
			}
		case "play_beep_time_interval":
			if err := func() error {
				s.PlayBeepTimeInterval.Reset()
				if err := s.PlayBeepTimeInterval.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_beep_time_interval\"")
			}
		case "play_beep_member":
			if err := func() error {
				s.PlayBeepMember.Reset()
				if err := s.PlayBeepMember.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_beep_member\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetASiteOKPolicyAdHocCallRecordingPlayRecordingBeepTone")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetASiteOKPolicyAdHocCallRecordingPlayRecordingBeepTone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetASiteOKPolicyAdHocCallRecordingPlayRecordingBeepTone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetASiteOKPolicyAudioIntercom) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetASiteOKPolicyAudioIntercom) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetASiteOKPolicyAudioIntercom = [4]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
}

// Decode decodes GetASiteOKPolicyAudioIntercom from json.
func (s *GetASiteOKPolicyAudioIntercom) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetASiteOKPolicyAudioIntercom to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetASiteOKPolicyAudioIntercom")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetASiteOKPolicyAudioIntercom) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetASiteOKPolicyAudioIntercom) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetASiteOKPolicyAutoCallRecording) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetASiteOKPolicyAutoCallRecording) encodeFields(e *jx.Encoder) {
	{
		if s.AllowStopResumeRecording.Set {
			e.FieldStart("allow_stop_resume_recording")
			s.AllowStopResumeRecording.Encode(e)
		}
	}
	{
		if s.DisconnectOnRecordingFailure.Set {
			e.FieldStart("disconnect_on_recording_failure")
			s.DisconnectOnRecordingFailure.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
	{
		if s.RecordingCalls.Set {
			e.FieldStart("recording_calls")
			s.RecordingCalls.Encode(e)
		}
	}
	{
		if s.RecordingExplicitConsent.Set {
			e.FieldStart("recording_explicit_consent")
			s.RecordingExplicitConsent.Encode(e)
		}
	}
	{
		if s.RecordingStartPrompt.Set {
			e.FieldStart("recording_start_prompt")
			s.RecordingStartPrompt.Encode(e)
		}
	}
	{
		if s.RecordingTranscription.Set {
			e.FieldStart("recording_transcription")
			s.RecordingTranscription.Encode(e)
		}
	}
	{
		if s.PlayRecordingBeepTone.Set {
			e.FieldStart("play_recording_beep_tone")
			s.PlayRecordingBeepTone.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetASiteOKPolicyAutoCallRecording = [11]string{
	0:  "allow_stop_resume_recording",
	1:  "disconnect_on_recording_failure",
	2:  "enable",
	3:  "locked",
	4:  "locked_by",
	5:  "modified",
	6:  "recording_calls",
	7:  "recording_explicit_consent",
	8:  "recording_start_prompt",
	9:  "recording_transcription",
	10: "play_recording_beep_tone",
}

// Decode decodes GetASiteOKPolicyAutoCallRecording from json.
func (s *GetASiteOKPolicyAutoCallRecording) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetASiteOKPolicyAutoCallRecording to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allow_stop_resume_recording":
			if err := func() error {
				s.AllowStopResumeRecording.Reset()
				if err := s.AllowStopResumeRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_stop_resume_recording\"")
			}
		case "disconnect_on_recording_failure":
			if err := func() error {
				s.DisconnectOnRecordingFailure.Reset()
				if err := s.DisconnectOnRecordingFailure.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"disconnect_on_recording_failure\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		case "recording_calls":
			if err := func() error {
				s.RecordingCalls.Reset()
				if err := s.RecordingCalls.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_calls\"")
			}
		case "recording_explicit_consent":
			if err := func() error {
				s.RecordingExplicitConsent.Reset()
				if err := s.RecordingExplicitConsent.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_explicit_consent\"")
			}
		case "recording_start_prompt":
			if err := func() error {
				s.RecordingStartPrompt.Reset()
				if err := s.RecordingStartPrompt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_start_prompt\"")
			}
		case "recording_transcription":
			if err := func() error {
				s.RecordingTranscription.Reset()
				if err := s.RecordingTranscription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_transcription\"")
			}
		case "play_recording_beep_tone":
			if err := func() error {
				s.PlayRecordingBeepTone.Reset()
				if err := s.PlayRecordingBeepTone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_recording_beep_tone\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetASiteOKPolicyAutoCallRecording")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetASiteOKPolicyAutoCallRecording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetASiteOKPolicyAutoCallRecording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetASiteOKPolicyAutoCallRecordingPlayRecordingBeepTone) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetASiteOKPolicyAutoCallRecordingPlayRecordingBeepTone) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.PlayBeepVolume.Set {
			e.FieldStart("play_beep_volume")
			s.PlayBeepVolume.Encode(e)
		}
	}
	{
		if s.PlayBeepTimeInterval.Set {
			e.FieldStart("play_beep_time_interval")
			s.PlayBeepTimeInterval.Encode(e)
		}
	}
	{
		if s.PlayBeepMember.Set {
			e.FieldStart("play_beep_member")
			s.PlayBeepMember.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetASiteOKPolicyAutoCallRecordingPlayRecordingBeepTone = [4]string{
	0: "enable",
	1: "play_beep_volume",
	2: "play_beep_time_interval",
	3: "play_beep_member",
}

// Decode decodes GetASiteOKPolicyAutoCallRecordingPlayRecordingBeepTone from json.
func (s *GetASiteOKPolicyAutoCallRecordingPlayRecordingBeepTone) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetASiteOKPolicyAutoCallRecordingPlayRecordingBeepTone to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "play_beep_volume":
			if err := func() error {
				s.PlayBeepVolume.Reset()
				if err := s.PlayBeepVolume.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_beep_volume\"")
			}
		case "play_beep_time_interval":
			if err := func() error {
				s.PlayBeepTimeInterval.Reset()
				if err := s.PlayBeepTimeInterval.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_beep_time_interval\"")
			}
		case "play_beep_member":
			if err := func() error {
				s.PlayBeepMember.Reset()
				if err := s.PlayBeepMember.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_beep_member\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetASiteOKPolicyAutoCallRecordingPlayRecordingBeepTone")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetASiteOKPolicyAutoCallRecordingPlayRecordingBeepTone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetASiteOKPolicyAutoCallRecordingPlayRecordingBeepTone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetASiteOKPolicyAutoDeleteDataAfterRetentionDuration) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetASiteOKPolicyAutoDeleteDataAfterRetentionDuration) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Reset.Set {
			e.FieldStart("reset")
			s.Reset.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Items != nil {
			e.FieldStart("items")
			e.ArrStart()
			for _, elem := range s.Items {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.DeleteType.Set {
			e.FieldStart("delete_type")
			s.DeleteType.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetASiteOKPolicyAutoDeleteDataAfterRetentionDuration = [6]string{
	0: "enable",
	1: "reset",
	2: "locked",
	3: "locked_by",
	4: "items",
	5: "delete_type",
}

// Decode decodes GetASiteOKPolicyAutoDeleteDataAfterRetentionDuration from json.
func (s *GetASiteOKPolicyAutoDeleteDataAfterRetentionDuration) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetASiteOKPolicyAutoDeleteDataAfterRetentionDuration to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "reset":
			if err := func() error {
				s.Reset.Reset()
				if err := s.Reset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reset\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "items":
			if err := func() error {
				s.Items = make([]GetASiteOKPolicyAutoDeleteDataAfterRetentionDurationItemsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetASiteOKPolicyAutoDeleteDataAfterRetentionDurationItemsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Items = append(s.Items, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"items\"")
			}
		case "delete_type":
			if err := func() error {
				s.DeleteType.Reset()
				if err := s.DeleteType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delete_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetASiteOKPolicyAutoDeleteDataAfterRetentionDuration")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetASiteOKPolicyAutoDeleteDataAfterRetentionDuration) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetASiteOKPolicyAutoDeleteDataAfterRetentionDuration) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetASiteOKPolicyAutoDeleteDataAfterRetentionDurationItemsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetASiteOKPolicyAutoDeleteDataAfterRetentionDurationItemsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.Duration.Set {
			e.FieldStart("duration")
			s.Duration.Encode(e)
		}
	}
	{
		if s.TimeUnit.Set {
			e.FieldStart("time_unit")
			s.TimeUnit.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetASiteOKPolicyAutoDeleteDataAfterRetentionDurationItemsItem = [3]string{
	0: "type",
	1: "duration",
	2: "time_unit",
}

// Decode decodes GetASiteOKPolicyAutoDeleteDataAfterRetentionDurationItemsItem from json.
func (s *GetASiteOKPolicyAutoDeleteDataAfterRetentionDurationItemsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetASiteOKPolicyAutoDeleteDataAfterRetentionDurationItemsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "duration":
			if err := func() error {
				s.Duration.Reset()
				if err := s.Duration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"duration\"")
			}
		case "time_unit":
			if err := func() error {
				s.TimeUnit.Reset()
				if err := s.TimeUnit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"time_unit\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetASiteOKPolicyAutoDeleteDataAfterRetentionDurationItemsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetASiteOKPolicyAutoDeleteDataAfterRetentionDurationItemsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetASiteOKPolicyAutoDeleteDataAfterRetentionDurationItemsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetASiteOKPolicyBlockCallsWithoutCallerID) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetASiteOKPolicyBlockCallsWithoutCallerID) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetASiteOKPolicyBlockCallsWithoutCallerID = [4]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
}

// Decode decodes GetASiteOKPolicyBlockCallsWithoutCallerID from json.
func (s *GetASiteOKPolicyBlockCallsWithoutCallerID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetASiteOKPolicyBlockCallsWithoutCallerID to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetASiteOKPolicyBlockCallsWithoutCallerID")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetASiteOKPolicyBlockCallsWithoutCallerID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetASiteOKPolicyBlockCallsWithoutCallerID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetASiteOKPolicyBlockExternalCalls) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetASiteOKPolicyBlockExternalCalls) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
	{
		if s.BlockBusinessHours.Set {
			e.FieldStart("block_business_hours")
			s.BlockBusinessHours.Encode(e)
		}
	}
	{
		if s.BlockClosedHours.Set {
			e.FieldStart("block_closed_hours")
			s.BlockClosedHours.Encode(e)
		}
	}
	{
		if s.BlockHolidayHours.Set {
			e.FieldStart("block_holiday_hours")
			s.BlockHolidayHours.Encode(e)
		}
	}
	{
		if s.BlockCallAction.Set {
			e.FieldStart("block_call_action")
			s.BlockCallAction.Encode(e)
		}
	}
	{
		if s.BlockCallChangeType.Set {
			e.FieldStart("block_call_change_type")
			s.BlockCallChangeType.Encode(e)
		}
	}
	{
		if s.E2eEncryption.Set {
			e.FieldStart("e2e_encryption")
			s.E2eEncryption.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetASiteOKPolicyBlockExternalCalls = [10]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
	4: "block_business_hours",
	5: "block_closed_hours",
	6: "block_holiday_hours",
	7: "block_call_action",
	8: "block_call_change_type",
	9: "e2e_encryption",
}

// Decode decodes GetASiteOKPolicyBlockExternalCalls from json.
func (s *GetASiteOKPolicyBlockExternalCalls) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetASiteOKPolicyBlockExternalCalls to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		case "block_business_hours":
			if err := func() error {
				s.BlockBusinessHours.Reset()
				if err := s.BlockBusinessHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"block_business_hours\"")
			}
		case "block_closed_hours":
			if err := func() error {
				s.BlockClosedHours.Reset()
				if err := s.BlockClosedHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"block_closed_hours\"")
			}
		case "block_holiday_hours":
			if err := func() error {
				s.BlockHolidayHours.Reset()
				if err := s.BlockHolidayHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"block_holiday_hours\"")
			}
		case "block_call_action":
			if err := func() error {
				s.BlockCallAction.Reset()
				if err := s.BlockCallAction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"block_call_action\"")
			}
		case "block_call_change_type":
			if err := func() error {
				s.BlockCallChangeType.Reset()
				if err := s.BlockCallChangeType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"block_call_change_type\"")
			}
		case "e2e_encryption":
			if err := func() error {
				s.E2eEncryption.Reset()
				if err := s.E2eEncryption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"e2e_encryption\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetASiteOKPolicyBlockExternalCalls")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetASiteOKPolicyBlockExternalCalls) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetASiteOKPolicyBlockExternalCalls) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetASiteOKPolicyBlockExternalCallsE2eEncryption) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetASiteOKPolicyBlockExternalCallsE2eEncryption) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetASiteOKPolicyBlockExternalCallsE2eEncryption = [4]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
}

// Decode decodes GetASiteOKPolicyBlockExternalCallsE2eEncryption from json.
func (s *GetASiteOKPolicyBlockExternalCallsE2eEncryption) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetASiteOKPolicyBlockExternalCallsE2eEncryption to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetASiteOKPolicyBlockExternalCallsE2eEncryption")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetASiteOKPolicyBlockExternalCallsE2eEncryption) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetASiteOKPolicyBlockExternalCallsE2eEncryption) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetASiteOKPolicyCallHandlingForwardingToOtherUsers) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetASiteOKPolicyCallHandlingForwardingToOtherUsers) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.CallForwardingType.Set {
			e.FieldStart("call_forwarding_type")
			s.CallForwardingType.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetASiteOKPolicyCallHandlingForwardingToOtherUsers = [5]string{
	0: "enable",
	1: "call_forwarding_type",
	2: "locked",
	3: "locked_by",
	4: "modified",
}

// Decode decodes GetASiteOKPolicyCallHandlingForwardingToOtherUsers from json.
func (s *GetASiteOKPolicyCallHandlingForwardingToOtherUsers) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetASiteOKPolicyCallHandlingForwardingToOtherUsers to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "call_forwarding_type":
			if err := func() error {
				s.CallForwardingType.Reset()
				if err := s.CallForwardingType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_forwarding_type\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetASiteOKPolicyCallHandlingForwardingToOtherUsers")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetASiteOKPolicyCallHandlingForwardingToOtherUsers) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetASiteOKPolicyCallHandlingForwardingToOtherUsers) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetASiteOKPolicyCallOverflow) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetASiteOKPolicyCallOverflow) encodeFields(e *jx.Encoder) {
	{
		if s.CallOverflowType.Set {
			e.FieldStart("call_overflow_type")
			s.CallOverflowType.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetASiteOKPolicyCallOverflow = [5]string{
	0: "call_overflow_type",
	1: "enable",
	2: "locked",
	3: "locked_by",
	4: "modified",
}

// Decode decodes GetASiteOKPolicyCallOverflow from json.
func (s *GetASiteOKPolicyCallOverflow) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetASiteOKPolicyCallOverflow to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "call_overflow_type":
			if err := func() error {
				s.CallOverflowType.Reset()
				if err := s.CallOverflowType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_overflow_type\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetASiteOKPolicyCallOverflow")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetASiteOKPolicyCallOverflow) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetASiteOKPolicyCallOverflow) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetASiteOKPolicyCallPark) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetASiteOKPolicyCallPark) encodeFields(e *jx.Encoder) {
	{
		if s.CallNotPickedUpAction.Set {
			e.FieldStart("call_not_picked_up_action")
			s.CallNotPickedUpAction.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.ExpirationPeriod.Set {
			e.FieldStart("expiration_period")
			s.ExpirationPeriod.Encode(e)
		}
	}
	{
		if s.ForwardTo.Set {
			e.FieldStart("forward_to")
			s.ForwardTo.Encode(e)
		}
	}
	{
		if s.Sequence.Set {
			e.FieldStart("sequence")
			s.Sequence.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetASiteOKPolicyCallPark = [8]string{
	0: "call_not_picked_up_action",
	1: "enable",
	2: "expiration_period",
	3: "forward_to",
	4: "sequence",
	5: "locked",
	6: "locked_by",
	7: "modified",
}

// Decode decodes GetASiteOKPolicyCallPark from json.
func (s *GetASiteOKPolicyCallPark) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetASiteOKPolicyCallPark to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "call_not_picked_up_action":
			if err := func() error {
				s.CallNotPickedUpAction.Reset()
				if err := s.CallNotPickedUpAction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_not_picked_up_action\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "expiration_period":
			if err := func() error {
				s.ExpirationPeriod.Reset()
				if err := s.ExpirationPeriod.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expiration_period\"")
			}
		case "forward_to":
			if err := func() error {
				s.ForwardTo.Reset()
				if err := s.ForwardTo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward_to\"")
			}
		case "sequence":
			if err := func() error {
				s.Sequence.Reset()
				if err := s.Sequence.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sequence\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetASiteOKPolicyCallPark")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetASiteOKPolicyCallPark) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetASiteOKPolicyCallPark) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetASiteOKPolicyCallParkForwardTo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetASiteOKPolicyCallParkForwardTo) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ExtensionType.Set {
			e.FieldStart("extension_type")
			s.ExtensionType.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetASiteOKPolicyCallParkForwardTo = [5]string{
	0: "display_name",
	1: "extension_id",
	2: "extension_number",
	3: "extension_type",
	4: "id",
}

// Decode decodes GetASiteOKPolicyCallParkForwardTo from json.
func (s *GetASiteOKPolicyCallParkForwardTo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetASiteOKPolicyCallParkForwardTo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "extension_type":
			if err := func() error {
				s.ExtensionType.Reset()
				if err := s.ExtensionType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_type\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetASiteOKPolicyCallParkForwardTo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetASiteOKPolicyCallParkForwardTo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetASiteOKPolicyCallParkForwardTo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetASiteOKPolicyCallQueueOptOutReason) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetASiteOKPolicyCallQueueOptOutReason) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
	{
		if s.CallQueueOptOutReasonsList != nil {
			e.FieldStart("call_queue_opt_out_reasons_list")
			e.ArrStart()
			for _, elem := range s.CallQueueOptOutReasonsList {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGetASiteOKPolicyCallQueueOptOutReason = [5]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
	4: "call_queue_opt_out_reasons_list",
}

// Decode decodes GetASiteOKPolicyCallQueueOptOutReason from json.
func (s *GetASiteOKPolicyCallQueueOptOutReason) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetASiteOKPolicyCallQueueOptOutReason to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		case "call_queue_opt_out_reasons_list":
			if err := func() error {
				s.CallQueueOptOutReasonsList = make([]GetASiteOKPolicyCallQueueOptOutReasonCallQueueOptOutReasonsListItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetASiteOKPolicyCallQueueOptOutReasonCallQueueOptOutReasonsListItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CallQueueOptOutReasonsList = append(s.CallQueueOptOutReasonsList, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_queue_opt_out_reasons_list\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetASiteOKPolicyCallQueueOptOutReason")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetASiteOKPolicyCallQueueOptOutReason) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetASiteOKPolicyCallQueueOptOutReason) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetASiteOKPolicyCallQueueOptOutReasonCallQueueOptOutReasonsListItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetASiteOKPolicyCallQueueOptOutReasonCallQueueOptOutReasonsListItem) encodeFields(e *jx.Encoder) {
	{
		if s.Code.Set {
			e.FieldStart("code")
			s.Code.Encode(e)
		}
	}
	{
		if s.System.Set {
			e.FieldStart("system")
			s.System.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetASiteOKPolicyCallQueueOptOutReasonCallQueueOptOutReasonsListItem = [3]string{
	0: "code",
	1: "system",
	2: "enable",
}

// Decode decodes GetASiteOKPolicyCallQueueOptOutReasonCallQueueOptOutReasonsListItem from json.
func (s *GetASiteOKPolicyCallQueueOptOutReasonCallQueueOptOutReasonsListItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetASiteOKPolicyCallQueueOptOutReasonCallQueueOptOutReasonsListItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "code":
			if err := func() error {
				s.Code.Reset()
				if err := s.Code.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code\"")
			}
		case "system":
			if err := func() error {
				s.System.Reset()
				if err := s.System.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"system\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetASiteOKPolicyCallQueueOptOutReasonCallQueueOptOutReasonsListItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetASiteOKPolicyCallQueueOptOutReasonCallQueueOptOutReasonsListItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetASiteOKPolicyCallQueueOptOutReasonCallQueueOptOutReasonsListItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetASiteOKPolicyCallQueuePickupCode) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetASiteOKPolicyCallQueuePickupCode) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetASiteOKPolicyCallQueuePickupCode = [4]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
}

// Decode decodes GetASiteOKPolicyCallQueuePickupCode from json.
func (s *GetASiteOKPolicyCallQueuePickupCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetASiteOKPolicyCallQueuePickupCode to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetASiteOKPolicyCallQueuePickupCode")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetASiteOKPolicyCallQueuePickupCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetASiteOKPolicyCallQueuePickupCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetASiteOKPolicyCallTransferring) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetASiteOKPolicyCallTransferring) encodeFields(e *jx.Encoder) {
	{
		if s.CallTransferringType.Set {
			e.FieldStart("call_transferring_type")
			s.CallTransferringType.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetASiteOKPolicyCallTransferring = [5]string{
	0: "call_transferring_type",
	1: "enable",
	2: "locked",
	3: "locked_by",
	4: "modified",
}

// Decode decodes GetASiteOKPolicyCallTransferring from json.
func (s *GetASiteOKPolicyCallTransferring) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetASiteOKPolicyCallTransferring to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "call_transferring_type":
			if err := func() error {
				s.CallTransferringType.Reset()
				if err := s.CallTransferringType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_transferring_type\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetASiteOKPolicyCallTransferring")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetASiteOKPolicyCallTransferring) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetASiteOKPolicyCallTransferring) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetASiteOKPolicyCheckVoicemailsOverPhone) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetASiteOKPolicyCheckVoicemailsOverPhone) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetASiteOKPolicyCheckVoicemailsOverPhone = [4]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
}

// Decode decodes GetASiteOKPolicyCheckVoicemailsOverPhone from json.
func (s *GetASiteOKPolicyCheckVoicemailsOverPhone) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetASiteOKPolicyCheckVoicemailsOverPhone to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetASiteOKPolicyCheckVoicemailsOverPhone")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetASiteOKPolicyCheckVoicemailsOverPhone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetASiteOKPolicyCheckVoicemailsOverPhone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetASiteOKPolicyDelegation) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetASiteOKPolicyDelegation) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetASiteOKPolicyDelegation = [4]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
}

// Decode decodes GetASiteOKPolicyDelegation from json.
func (s *GetASiteOKPolicyDelegation) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetASiteOKPolicyDelegation to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetASiteOKPolicyDelegation")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetASiteOKPolicyDelegation) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetASiteOKPolicyDelegation) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetASiteOKPolicyElevateToMeeting) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetASiteOKPolicyElevateToMeeting) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetASiteOKPolicyElevateToMeeting = [4]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
}

// Decode decodes GetASiteOKPolicyElevateToMeeting from json.
func (s *GetASiteOKPolicyElevateToMeeting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetASiteOKPolicyElevateToMeeting to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetASiteOKPolicyElevateToMeeting")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetASiteOKPolicyElevateToMeeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetASiteOKPolicyElevateToMeeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetASiteOKPolicyForceOffNet) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetASiteOKPolicyForceOffNet) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.AllowExtensionOnlyUsersCallUsersOutsideSite.Set {
			e.FieldStart("allow_extension_only_users_call_users_outside_site")
			s.AllowExtensionOnlyUsersCallUsersOutsideSite.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetASiteOKPolicyForceOffNet = [2]string{
	0: "enable",
	1: "allow_extension_only_users_call_users_outside_site",
}

// Decode decodes GetASiteOKPolicyForceOffNet from json.
func (s *GetASiteOKPolicyForceOffNet) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetASiteOKPolicyForceOffNet to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "allow_extension_only_users_call_users_outside_site":
			if err := func() error {
				s.AllowExtensionOnlyUsersCallUsersOutsideSite.Reset()
				if err := s.AllowExtensionOnlyUsersCallUsersOutsideSite.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_extension_only_users_call_users_outside_site\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetASiteOKPolicyForceOffNet")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetASiteOKPolicyForceOffNet) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetASiteOKPolicyForceOffNet) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetASiteOKPolicyHandOffToRoom) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetASiteOKPolicyHandOffToRoom) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetASiteOKPolicyHandOffToRoom = [4]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
}

// Decode decodes GetASiteOKPolicyHandOffToRoom from json.
func (s *GetASiteOKPolicyHandOffToRoom) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetASiteOKPolicyHandOffToRoom to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetASiteOKPolicyHandOffToRoom")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetASiteOKPolicyHandOffToRoom) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetASiteOKPolicyHandOffToRoom) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetASiteOKPolicyInternationalCalling) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetASiteOKPolicyInternationalCalling) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetASiteOKPolicyInternationalCalling = [4]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
}

// Decode decodes GetASiteOKPolicyInternationalCalling from json.
func (s *GetASiteOKPolicyInternationalCalling) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetASiteOKPolicyInternationalCalling to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetASiteOKPolicyInternationalCalling")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetASiteOKPolicyInternationalCalling) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetASiteOKPolicyInternationalCalling) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetASiteOKPolicyMobileSwitchToCarrier) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetASiteOKPolicyMobileSwitchToCarrier) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetASiteOKPolicyMobileSwitchToCarrier = [4]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
}

// Decode decodes GetASiteOKPolicyMobileSwitchToCarrier from json.
func (s *GetASiteOKPolicyMobileSwitchToCarrier) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetASiteOKPolicyMobileSwitchToCarrier to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetASiteOKPolicyMobileSwitchToCarrier")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetASiteOKPolicyMobileSwitchToCarrier) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetASiteOKPolicyMobileSwitchToCarrier) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetASiteOKPolicyPersonalAudioLibrary) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetASiteOKPolicyPersonalAudioLibrary) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
	{
		if s.AllowMusicOnHoldCustomization.Set {
			e.FieldStart("allow_music_on_hold_customization")
			s.AllowMusicOnHoldCustomization.Encode(e)
		}
	}
	{
		if s.AllowVoicemailAndMessageGreetingCustomization.Set {
			e.FieldStart("allow_voicemail_and_message_greeting_customization")
			s.AllowVoicemailAndMessageGreetingCustomization.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetASiteOKPolicyPersonalAudioLibrary = [6]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
	4: "allow_music_on_hold_customization",
	5: "allow_voicemail_and_message_greeting_customization",
}

// Decode decodes GetASiteOKPolicyPersonalAudioLibrary from json.
func (s *GetASiteOKPolicyPersonalAudioLibrary) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetASiteOKPolicyPersonalAudioLibrary to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		case "allow_music_on_hold_customization":
			if err := func() error {
				s.AllowMusicOnHoldCustomization.Reset()
				if err := s.AllowMusicOnHoldCustomization.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_music_on_hold_customization\"")
			}
		case "allow_voicemail_and_message_greeting_customization":
			if err := func() error {
				s.AllowVoicemailAndMessageGreetingCustomization.Reset()
				if err := s.AllowVoicemailAndMessageGreetingCustomization.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_voicemail_and_message_greeting_customization\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetASiteOKPolicyPersonalAudioLibrary")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetASiteOKPolicyPersonalAudioLibrary) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetASiteOKPolicyPersonalAudioLibrary) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetASiteOKPolicySMS) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetASiteOKPolicySMS) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.InternationalSMS.Set {
			e.FieldStart("international_sms")
			s.InternationalSMS.Encode(e)
		}
	}
	{
		if s.InternationalSMSCountries != nil {
			e.FieldStart("international_sms_countries")
			e.ArrStart()
			for _, elem := range s.InternationalSMSCountries {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetASiteOKPolicySMS = [6]string{
	0: "enable",
	1: "international_sms",
	2: "international_sms_countries",
	3: "locked",
	4: "locked_by",
	5: "modified",
}

// Decode decodes GetASiteOKPolicySMS from json.
func (s *GetASiteOKPolicySMS) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetASiteOKPolicySMS to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "international_sms":
			if err := func() error {
				s.InternationalSMS.Reset()
				if err := s.InternationalSMS.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"international_sms\"")
			}
		case "international_sms_countries":
			if err := func() error {
				s.InternationalSMSCountries = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.InternationalSMSCountries = append(s.InternationalSMSCountries, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"international_sms_countries\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetASiteOKPolicySMS")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetASiteOKPolicySMS) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetASiteOKPolicySMS) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetASiteOKPolicySelectOutboundCallerID) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetASiteOKPolicySelectOutboundCallerID) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
	{
		if s.AllowHideOutboundCallerID.Set {
			e.FieldStart("allow_hide_outbound_caller_id")
			s.AllowHideOutboundCallerID.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetASiteOKPolicySelectOutboundCallerID = [5]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
	4: "allow_hide_outbound_caller_id",
}

// Decode decodes GetASiteOKPolicySelectOutboundCallerID from json.
func (s *GetASiteOKPolicySelectOutboundCallerID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetASiteOKPolicySelectOutboundCallerID to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		case "allow_hide_outbound_caller_id":
			if err := func() error {
				s.AllowHideOutboundCallerID.Reset()
				if err := s.AllowHideOutboundCallerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_hide_outbound_caller_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetASiteOKPolicySelectOutboundCallerID")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetASiteOKPolicySelectOutboundCallerID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetASiteOKPolicySelectOutboundCallerID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetASiteOKPolicySharedVoicemailNotificationByEmail) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetASiteOKPolicySharedVoicemailNotificationByEmail) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetASiteOKPolicySharedVoicemailNotificationByEmail = [4]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
}

// Decode decodes GetASiteOKPolicySharedVoicemailNotificationByEmail from json.
func (s *GetASiteOKPolicySharedVoicemailNotificationByEmail) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetASiteOKPolicySharedVoicemailNotificationByEmail to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetASiteOKPolicySharedVoicemailNotificationByEmail")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetASiteOKPolicySharedVoicemailNotificationByEmail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetASiteOKPolicySharedVoicemailNotificationByEmail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetASiteOKPolicyVoicemail) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetASiteOKPolicyVoicemail) encodeFields(e *jx.Encoder) {
	{
		if s.AllowDelete.Set {
			e.FieldStart("allow_delete")
			s.AllowDelete.Encode(e)
		}
	}
	{
		if s.AllowDownload.Set {
			e.FieldStart("allow_download")
			s.AllowDownload.Encode(e)
		}
	}
	{
		if s.AllowVideomail.Set {
			e.FieldStart("allow_videomail")
			s.AllowVideomail.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetASiteOKPolicyVoicemail = [7]string{
	0: "allow_delete",
	1: "allow_download",
	2: "allow_videomail",
	3: "enable",
	4: "locked",
	5: "locked_by",
	6: "modified",
}

// Decode decodes GetASiteOKPolicyVoicemail from json.
func (s *GetASiteOKPolicyVoicemail) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetASiteOKPolicyVoicemail to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allow_delete":
			if err := func() error {
				s.AllowDelete.Reset()
				if err := s.AllowDelete.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_delete\"")
			}
		case "allow_download":
			if err := func() error {
				s.AllowDownload.Reset()
				if err := s.AllowDownload.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_download\"")
			}
		case "allow_videomail":
			if err := func() error {
				s.AllowVideomail.Reset()
				if err := s.AllowVideomail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_videomail\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetASiteOKPolicyVoicemail")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetASiteOKPolicyVoicemail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetASiteOKPolicyVoicemail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetASiteOKPolicyVoicemailNotificationByEmail) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetASiteOKPolicyVoicemailNotificationByEmail) encodeFields(e *jx.Encoder) {
	{
		if s.IncludeVoicemailFile.Set {
			e.FieldStart("include_voicemail_file")
			s.IncludeVoicemailFile.Encode(e)
		}
	}
	{
		if s.IncludeVoicemailTranscription.Set {
			e.FieldStart("include_voicemail_transcription")
			s.IncludeVoicemailTranscription.Encode(e)
		}
	}
	{
		if s.ForwardVoicemailToEmail.Set {
			e.FieldStart("forward_voicemail_to_email")
			s.ForwardVoicemailToEmail.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetASiteOKPolicyVoicemailNotificationByEmail = [7]string{
	0: "include_voicemail_file",
	1: "include_voicemail_transcription",
	2: "forward_voicemail_to_email",
	3: "enable",
	4: "locked",
	5: "locked_by",
	6: "modified",
}

// Decode decodes GetASiteOKPolicyVoicemailNotificationByEmail from json.
func (s *GetASiteOKPolicyVoicemailNotificationByEmail) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetASiteOKPolicyVoicemailNotificationByEmail to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "include_voicemail_file":
			if err := func() error {
				s.IncludeVoicemailFile.Reset()
				if err := s.IncludeVoicemailFile.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"include_voicemail_file\"")
			}
		case "include_voicemail_transcription":
			if err := func() error {
				s.IncludeVoicemailTranscription.Reset()
				if err := s.IncludeVoicemailTranscription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"include_voicemail_transcription\"")
			}
		case "forward_voicemail_to_email":
			if err := func() error {
				s.ForwardVoicemailToEmail.Reset()
				if err := s.ForwardVoicemailToEmail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward_voicemail_to_email\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetASiteOKPolicyVoicemailNotificationByEmail")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetASiteOKPolicyVoicemailNotificationByEmail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetASiteOKPolicyVoicemailNotificationByEmail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetASiteOKPolicyVoicemailTranscription) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetASiteOKPolicyVoicemailTranscription) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetASiteOKPolicyVoicemailTranscription = [4]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
}

// Decode decodes GetASiteOKPolicyVoicemailTranscription from json.
func (s *GetASiteOKPolicyVoicemailTranscription) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetASiteOKPolicyVoicemailTranscription to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetASiteOKPolicyVoicemailTranscription")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetASiteOKPolicyVoicemailTranscription) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetASiteOKPolicyVoicemailTranscription) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetASiteOKPolicyZoomPhoneOnMobile) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetASiteOKPolicyZoomPhoneOnMobile) encodeFields(e *jx.Encoder) {
	{
		if s.AllowCallingSMSMms.Set {
			e.FieldStart("allow_calling_sms_mms")
			s.AllowCallingSMSMms.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetASiteOKPolicyZoomPhoneOnMobile = [5]string{
	0: "allow_calling_sms_mms",
	1: "enable",
	2: "locked",
	3: "locked_by",
	4: "modified",
}

// Decode decodes GetASiteOKPolicyZoomPhoneOnMobile from json.
func (s *GetASiteOKPolicyZoomPhoneOnMobile) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetASiteOKPolicyZoomPhoneOnMobile to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allow_calling_sms_mms":
			if err := func() error {
				s.AllowCallingSMSMms.Reset()
				if err := s.AllowCallingSMSMms.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_calling_sms_mms\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetASiteOKPolicyZoomPhoneOnMobile")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetASiteOKPolicyZoomPhoneOnMobile) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetASiteOKPolicyZoomPhoneOnMobile) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetASiteOKShortExtension) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetASiteOKShortExtension) encodeFields(e *jx.Encoder) {
	{
		if s.Length.Set {
			e.FieldStart("length")
			s.Length.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetASiteOKShortExtension = [1]string{
	0: "length",
}

// Decode decodes GetASiteOKShortExtension from json.
func (s *GetASiteOKShortExtension) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetASiteOKShortExtension to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "length":
			if err := func() error {
				s.Length.Reset()
				if err := s.Length.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"length\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetASiteOKShortExtension")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetASiteOKShortExtension) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetASiteOKShortExtension) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetASiteOKSipZone) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetASiteOKSipZone) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetASiteOKSipZone = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes GetASiteOKSipZone from json.
func (s *GetASiteOKSipZone) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetASiteOKSipZone to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetASiteOKSipZone")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetASiteOKSipZone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetASiteOKSipZone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetAccountOutboundCallingCountriesAndRegionsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetAccountOutboundCallingCountriesAndRegionsOK) encodeFields(e *jx.Encoder) {
	{
		if s.CountriesRegions != nil {
			e.FieldStart("countries_regions")
			e.ArrStart()
			for _, elem := range s.CountriesRegions {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetAccountOutboundCallingCountriesAndRegionsOK = [3]string{
	0: "countries_regions",
	1: "next_page_token",
	2: "page_size",
}

// Decode decodes GetAccountOutboundCallingCountriesAndRegionsOK from json.
func (s *GetAccountOutboundCallingCountriesAndRegionsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetAccountOutboundCallingCountriesAndRegionsOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "countries_regions":
			if err := func() error {
				s.CountriesRegions = make([]GetAccountOutboundCallingCountriesAndRegionsOKCountriesRegionsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetAccountOutboundCallingCountriesAndRegionsOKCountriesRegionsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CountriesRegions = append(s.CountriesRegions, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"countries_regions\"")
			}
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetAccountOutboundCallingCountriesAndRegionsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetAccountOutboundCallingCountriesAndRegionsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetAccountOutboundCallingCountriesAndRegionsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetAccountOutboundCallingCountriesAndRegionsOKCountriesRegionsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetAccountOutboundCallingCountriesAndRegionsOKCountriesRegionsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Code.Set {
			e.FieldStart("code")
			s.Code.Encode(e)
		}
	}
	{
		if s.IsoCode.Set {
			e.FieldStart("iso_code")
			s.IsoCode.Encode(e)
		}
	}
	{
		if s.Rule.Set {
			e.FieldStart("rule")
			s.Rule.Encode(e)
		}
	}
	{
		if s.EnabledCarrier != nil {
			e.FieldStart("enabled_carrier")
			e.ArrStart()
			for _, elem := range s.EnabledCarrier {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGetAccountOutboundCallingCountriesAndRegionsOKCountriesRegionsItem = [5]string{
	0: "name",
	1: "code",
	2: "iso_code",
	3: "rule",
	4: "enabled_carrier",
}

// Decode decodes GetAccountOutboundCallingCountriesAndRegionsOKCountriesRegionsItem from json.
func (s *GetAccountOutboundCallingCountriesAndRegionsOKCountriesRegionsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetAccountOutboundCallingCountriesAndRegionsOKCountriesRegionsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "code":
			if err := func() error {
				s.Code.Reset()
				if err := s.Code.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code\"")
			}
		case "iso_code":
			if err := func() error {
				s.IsoCode.Reset()
				if err := s.IsoCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_code\"")
			}
		case "rule":
			if err := func() error {
				s.Rule.Reset()
				if err := s.Rule.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rule\"")
			}
		case "enabled_carrier":
			if err := func() error {
				s.EnabledCarrier = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.EnabledCarrier = append(s.EnabledCarrier, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enabled_carrier\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetAccountOutboundCallingCountriesAndRegionsOKCountriesRegionsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetAccountOutboundCallingCountriesAndRegionsOKCountriesRegionsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetAccountOutboundCallingCountriesAndRegionsOKCountriesRegionsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetAlertSettingDetailsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetAlertSettingDetailsOK) encodeFields(e *jx.Encoder) {
	{
		if s.AlertSettingID.Set {
			e.FieldStart("alert_setting_id")
			s.AlertSettingID.Encode(e)
		}
	}
	{
		if s.AlertSettingName.Set {
			e.FieldStart("alert_setting_name")
			s.AlertSettingName.Encode(e)
		}
	}
	{
		if s.Module.Set {
			e.FieldStart("module")
			s.Module.Encode(e)
		}
	}
	{
		if s.Rule.Set {
			e.FieldStart("rule")
			s.Rule.Encode(e)
		}
	}
	{
		if s.RuleConditions != nil {
			e.FieldStart("rule_conditions")
			e.ArrStart()
			for _, elem := range s.RuleConditions {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Targets != nil {
			e.FieldStart("targets")
			e.ArrStart()
			for _, elem := range s.Targets {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TimeFrameType.Set {
			e.FieldStart("time_frame_type")
			s.TimeFrameType.Encode(e)
		}
	}
	{
		if s.TimeFrameFrom.Set {
			e.FieldStart("time_frame_from")
			s.TimeFrameFrom.Encode(e)
		}
	}
	{
		if s.TimeFrameTo.Set {
			e.FieldStart("time_frame_to")
			s.TimeFrameTo.Encode(e)
		}
	}
	{
		if s.Frequency.Set {
			e.FieldStart("frequency")
			s.Frequency.Encode(e)
		}
	}
	{
		if s.EmailRecipients != nil {
			e.FieldStart("email_recipients")
			e.ArrStart()
			for _, elem := range s.EmailRecipients {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ChatChannels != nil {
			e.FieldStart("chat_channels")
			e.ArrStart()
			for _, elem := range s.ChatChannels {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetAlertSettingDetailsOK = [13]string{
	0:  "alert_setting_id",
	1:  "alert_setting_name",
	2:  "module",
	3:  "rule",
	4:  "rule_conditions",
	5:  "targets",
	6:  "time_frame_type",
	7:  "time_frame_from",
	8:  "time_frame_to",
	9:  "frequency",
	10: "email_recipients",
	11: "chat_channels",
	12: "status",
}

// Decode decodes GetAlertSettingDetailsOK from json.
func (s *GetAlertSettingDetailsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetAlertSettingDetailsOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "alert_setting_id":
			if err := func() error {
				s.AlertSettingID.Reset()
				if err := s.AlertSettingID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"alert_setting_id\"")
			}
		case "alert_setting_name":
			if err := func() error {
				s.AlertSettingName.Reset()
				if err := s.AlertSettingName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"alert_setting_name\"")
			}
		case "module":
			if err := func() error {
				s.Module.Reset()
				if err := s.Module.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"module\"")
			}
		case "rule":
			if err := func() error {
				s.Rule.Reset()
				if err := s.Rule.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rule\"")
			}
		case "rule_conditions":
			if err := func() error {
				s.RuleConditions = make([]GetAlertSettingDetailsOKRuleConditionsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetAlertSettingDetailsOKRuleConditionsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.RuleConditions = append(s.RuleConditions, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rule_conditions\"")
			}
		case "targets":
			if err := func() error {
				s.Targets = make([]GetAlertSettingDetailsOKTargetsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetAlertSettingDetailsOKTargetsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Targets = append(s.Targets, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"targets\"")
			}
		case "time_frame_type":
			if err := func() error {
				s.TimeFrameType.Reset()
				if err := s.TimeFrameType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"time_frame_type\"")
			}
		case "time_frame_from":
			if err := func() error {
				s.TimeFrameFrom.Reset()
				if err := s.TimeFrameFrom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"time_frame_from\"")
			}
		case "time_frame_to":
			if err := func() error {
				s.TimeFrameTo.Reset()
				if err := s.TimeFrameTo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"time_frame_to\"")
			}
		case "frequency":
			if err := func() error {
				s.Frequency.Reset()
				if err := s.Frequency.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"frequency\"")
			}
		case "email_recipients":
			if err := func() error {
				s.EmailRecipients = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.EmailRecipients = append(s.EmailRecipients, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email_recipients\"")
			}
		case "chat_channels":
			if err := func() error {
				s.ChatChannels = make([]GetAlertSettingDetailsOKChatChannelsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetAlertSettingDetailsOKChatChannelsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.ChatChannels = append(s.ChatChannels, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"chat_channels\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetAlertSettingDetailsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetAlertSettingDetailsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetAlertSettingDetailsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetAlertSettingDetailsOKChatChannelsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetAlertSettingDetailsOKChatChannelsItem) encodeFields(e *jx.Encoder) {
	{
		if s.ChatChannelName.Set {
			e.FieldStart("chat_channel_name")
			s.ChatChannelName.Encode(e)
		}
	}
	{
		if s.Token.Set {
			e.FieldStart("token")
			s.Token.Encode(e)
		}
	}
	{
		if s.EndPoint.Set {
			e.FieldStart("end_point")
			s.EndPoint.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetAlertSettingDetailsOKChatChannelsItem = [3]string{
	0: "chat_channel_name",
	1: "token",
	2: "end_point",
}

// Decode decodes GetAlertSettingDetailsOKChatChannelsItem from json.
func (s *GetAlertSettingDetailsOKChatChannelsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetAlertSettingDetailsOKChatChannelsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "chat_channel_name":
			if err := func() error {
				s.ChatChannelName.Reset()
				if err := s.ChatChannelName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"chat_channel_name\"")
			}
		case "token":
			if err := func() error {
				s.Token.Reset()
				if err := s.Token.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"token\"")
			}
		case "end_point":
			if err := func() error {
				s.EndPoint.Reset()
				if err := s.EndPoint.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"end_point\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetAlertSettingDetailsOKChatChannelsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetAlertSettingDetailsOKChatChannelsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetAlertSettingDetailsOKChatChannelsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetAlertSettingDetailsOKRuleConditionsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetAlertSettingDetailsOKRuleConditionsItem) encodeFields(e *jx.Encoder) {
	{
		if s.RuleConditionType.Set {
			e.FieldStart("rule_condition_type")
			s.RuleConditionType.Encode(e)
		}
	}
	{
		if s.RuleConditionValue.Set {
			e.FieldStart("rule_condition_value")
			s.RuleConditionValue.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetAlertSettingDetailsOKRuleConditionsItem = [2]string{
	0: "rule_condition_type",
	1: "rule_condition_value",
}

// Decode decodes GetAlertSettingDetailsOKRuleConditionsItem from json.
func (s *GetAlertSettingDetailsOKRuleConditionsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetAlertSettingDetailsOKRuleConditionsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "rule_condition_type":
			if err := func() error {
				s.RuleConditionType.Reset()
				if err := s.RuleConditionType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rule_condition_type\"")
			}
		case "rule_condition_value":
			if err := func() error {
				s.RuleConditionValue.Reset()
				if err := s.RuleConditionValue.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rule_condition_value\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetAlertSettingDetailsOKRuleConditionsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetAlertSettingDetailsOKRuleConditionsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetAlertSettingDetailsOKRuleConditionsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetAlertSettingDetailsOKTargetsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetAlertSettingDetailsOKTargetsItem) encodeFields(e *jx.Encoder) {
	{
		if s.TargetID.Set {
			e.FieldStart("target_id")
			s.TargetID.Encode(e)
		}
	}
	{
		if s.TargetName.Set {
			e.FieldStart("target_name")
			s.TargetName.Encode(e)
		}
	}
	{
		if s.TargetType.Set {
			e.FieldStart("target_type")
			s.TargetType.Encode(e)
		}
	}
	{
		if s.TargetExtensionNumber.Set {
			e.FieldStart("target_extension_number")
			s.TargetExtensionNumber.Encode(e)
		}
	}
	{
		if s.Site.Set {
			e.FieldStart("site")
			s.Site.Encode(e)
		}
	}
	{
		if s.Assignees != nil {
			e.FieldStart("assignees")
			e.ArrStart()
			for _, elem := range s.Assignees {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGetAlertSettingDetailsOKTargetsItem = [6]string{
	0: "target_id",
	1: "target_name",
	2: "target_type",
	3: "target_extension_number",
	4: "site",
	5: "assignees",
}

// Decode decodes GetAlertSettingDetailsOKTargetsItem from json.
func (s *GetAlertSettingDetailsOKTargetsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetAlertSettingDetailsOKTargetsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "target_id":
			if err := func() error {
				s.TargetID.Reset()
				if err := s.TargetID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"target_id\"")
			}
		case "target_name":
			if err := func() error {
				s.TargetName.Reset()
				if err := s.TargetName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"target_name\"")
			}
		case "target_type":
			if err := func() error {
				s.TargetType.Reset()
				if err := s.TargetType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"target_type\"")
			}
		case "target_extension_number":
			if err := func() error {
				s.TargetExtensionNumber.Reset()
				if err := s.TargetExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"target_extension_number\"")
			}
		case "site":
			if err := func() error {
				s.Site.Reset()
				if err := s.Site.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site\"")
			}
		case "assignees":
			if err := func() error {
				s.Assignees = make([]GetAlertSettingDetailsOKTargetsItemAssigneesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetAlertSettingDetailsOKTargetsItemAssigneesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Assignees = append(s.Assignees, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"assignees\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetAlertSettingDetailsOKTargetsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetAlertSettingDetailsOKTargetsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetAlertSettingDetailsOKTargetsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetAlertSettingDetailsOKTargetsItemAssigneesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetAlertSettingDetailsOKTargetsItemAssigneesItem) encodeFields(e *jx.Encoder) {
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.ExtensionType.Set {
			e.FieldStart("extension_type")
			s.ExtensionType.Encode(e)
		}
	}
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetAlertSettingDetailsOKTargetsItemAssigneesItem = [4]string{
	0: "extension_number",
	1: "name",
	2: "extension_type",
	3: "extension_id",
}

// Decode decodes GetAlertSettingDetailsOKTargetsItemAssigneesItem from json.
func (s *GetAlertSettingDetailsOKTargetsItemAssigneesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetAlertSettingDetailsOKTargetsItemAssigneesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "extension_type":
			if err := func() error {
				s.ExtensionType.Reset()
				if err := s.ExtensionType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_type\"")
			}
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetAlertSettingDetailsOKTargetsItemAssigneesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetAlertSettingDetailsOKTargetsItemAssigneesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetAlertSettingDetailsOKTargetsItemAssigneesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetAlertSettingDetailsOKTargetsItemSite) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetAlertSettingDetailsOKTargetsItemSite) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetAlertSettingDetailsOKTargetsItemSite = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes GetAlertSettingDetailsOKTargetsItemSite from json.
func (s *GetAlertSettingDetailsOKTargetsItemSite) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetAlertSettingDetailsOKTargetsItemSite to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetAlertSettingDetailsOKTargetsItemSite")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetAlertSettingDetailsOKTargetsItemSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetAlertSettingDetailsOKTargetsItemSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetAudioItemOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetAudioItemOK) encodeFields(e *jx.Encoder) {
	{
		if s.AudioID.Set {
			e.FieldStart("audio_id")
			s.AudioID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.PlayURL.Set {
			e.FieldStart("play_url")
			s.PlayURL.Encode(e)
		}
	}
	{
		if s.Text.Set {
			e.FieldStart("text")
			s.Text.Encode(e)
		}
	}
	{
		if s.VoiceLanguage.Set {
			e.FieldStart("voice_language")
			s.VoiceLanguage.Encode(e)
		}
	}
	{
		if s.VoiceAccent.Set {
			e.FieldStart("voice_accent")
			s.VoiceAccent.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetAudioItemOK = [6]string{
	0: "audio_id",
	1: "name",
	2: "play_url",
	3: "text",
	4: "voice_language",
	5: "voice_accent",
}

// Decode decodes GetAudioItemOK from json.
func (s *GetAudioItemOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetAudioItemOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_id":
			if err := func() error {
				s.AudioID.Reset()
				if err := s.AudioID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "play_url":
			if err := func() error {
				s.PlayURL.Reset()
				if err := s.PlayURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_url\"")
			}
		case "text":
			if err := func() error {
				s.Text.Reset()
				if err := s.Text.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"text\"")
			}
		case "voice_language":
			if err := func() error {
				s.VoiceLanguage.Reset()
				if err := s.VoiceLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voice_language\"")
			}
		case "voice_accent":
			if err := func() error {
				s.VoiceAccent.Reset()
				if err := s.VoiceAccent.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voice_accent\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetAudioItemOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetAudioItemOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetAudioItemOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetAutoReceptionistDetailOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetAutoReceptionistDetailOK) encodeFields(e *jx.Encoder) {
	{
		if s.CostCenter.Set {
			e.FieldStart("cost_center")
			s.CostCenter.Encode(e)
		}
	}
	{
		if s.Department.Set {
			e.FieldStart("department")
			s.Department.Encode(e)
		}
	}
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Timezone.Set {
			e.FieldStart("timezone")
			s.Timezone.Encode(e)
		}
	}
	{
		if s.AudioPromptLanguage.Set {
			e.FieldStart("audio_prompt_language")
			s.AudioPromptLanguage.Encode(e)
		}
	}
	{
		if s.HolidayHours != nil {
			e.FieldStart("holiday_hours")
			e.ArrStart()
			for _, elem := range s.HolidayHours {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.PhoneNumbers != nil {
			e.FieldStart("phone_numbers")
			e.ArrStart()
			for _, elem := range s.PhoneNumbers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Site.Set {
			e.FieldStart("site")
			s.Site.Encode(e)
		}
	}
	{
		if s.RecordingStorageLocation.Set {
			e.FieldStart("recording_storage_location")
			s.RecordingStorageLocation.Encode(e)
		}
	}
	{
		if s.OwnStorageName.Set {
			e.FieldStart("own_storage_name")
			s.OwnStorageName.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetAutoReceptionistDetailOK = [12]string{
	0:  "cost_center",
	1:  "department",
	2:  "extension_id",
	3:  "extension_number",
	4:  "name",
	5:  "timezone",
	6:  "audio_prompt_language",
	7:  "holiday_hours",
	8:  "phone_numbers",
	9:  "site",
	10: "recording_storage_location",
	11: "own_storage_name",
}

// Decode decodes GetAutoReceptionistDetailOK from json.
func (s *GetAutoReceptionistDetailOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetAutoReceptionistDetailOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "cost_center":
			if err := func() error {
				s.CostCenter.Reset()
				if err := s.CostCenter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cost_center\"")
			}
		case "department":
			if err := func() error {
				s.Department.Reset()
				if err := s.Department.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"department\"")
			}
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "timezone":
			if err := func() error {
				s.Timezone.Reset()
				if err := s.Timezone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"timezone\"")
			}
		case "audio_prompt_language":
			if err := func() error {
				s.AudioPromptLanguage.Reset()
				if err := s.AudioPromptLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_prompt_language\"")
			}
		case "holiday_hours":
			if err := func() error {
				s.HolidayHours = make([]GetAutoReceptionistDetailOKHolidayHoursItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetAutoReceptionistDetailOKHolidayHoursItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.HolidayHours = append(s.HolidayHours, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holiday_hours\"")
			}
		case "phone_numbers":
			if err := func() error {
				s.PhoneNumbers = make([]GetAutoReceptionistDetailOKPhoneNumbersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetAutoReceptionistDetailOKPhoneNumbersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.PhoneNumbers = append(s.PhoneNumbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_numbers\"")
			}
		case "site":
			if err := func() error {
				s.Site.Reset()
				if err := s.Site.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site\"")
			}
		case "recording_storage_location":
			if err := func() error {
				s.RecordingStorageLocation.Reset()
				if err := s.RecordingStorageLocation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_storage_location\"")
			}
		case "own_storage_name":
			if err := func() error {
				s.OwnStorageName.Reset()
				if err := s.OwnStorageName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"own_storage_name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetAutoReceptionistDetailOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetAutoReceptionistDetailOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetAutoReceptionistDetailOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetAutoReceptionistDetailOKHolidayHoursItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetAutoReceptionistDetailOKHolidayHoursItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.From.Set {
			e.FieldStart("from")
			s.From.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.To.Set {
			e.FieldStart("to")
			s.To.Encode(e, json.EncodeDateTime)
		}
	}
}

var jsonFieldsNameOfGetAutoReceptionistDetailOKHolidayHoursItem = [4]string{
	0: "id",
	1: "name",
	2: "from",
	3: "to",
}

// Decode decodes GetAutoReceptionistDetailOKHolidayHoursItem from json.
func (s *GetAutoReceptionistDetailOKHolidayHoursItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetAutoReceptionistDetailOKHolidayHoursItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "from":
			if err := func() error {
				s.From.Reset()
				if err := s.From.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"from\"")
			}
		case "to":
			if err := func() error {
				s.To.Reset()
				if err := s.To.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"to\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetAutoReceptionistDetailOKHolidayHoursItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetAutoReceptionistDetailOKHolidayHoursItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetAutoReceptionistDetailOKHolidayHoursItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetAutoReceptionistDetailOKPhoneNumbersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetAutoReceptionistDetailOKPhoneNumbersItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Number.Set {
			e.FieldStart("number")
			s.Number.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetAutoReceptionistDetailOKPhoneNumbersItem = [2]string{
	0: "id",
	1: "number",
}

// Decode decodes GetAutoReceptionistDetailOKPhoneNumbersItem from json.
func (s *GetAutoReceptionistDetailOKPhoneNumbersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetAutoReceptionistDetailOKPhoneNumbersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "number":
			if err := func() error {
				s.Number.Reset()
				if err := s.Number.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetAutoReceptionistDetailOKPhoneNumbersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetAutoReceptionistDetailOKPhoneNumbersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetAutoReceptionistDetailOKPhoneNumbersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetAutoReceptionistDetailOKSite) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetAutoReceptionistDetailOKSite) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetAutoReceptionistDetailOKSite = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes GetAutoReceptionistDetailOKSite from json.
func (s *GetAutoReceptionistDetailOKSite) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetAutoReceptionistDetailOKSite to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetAutoReceptionistDetailOKSite")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetAutoReceptionistDetailOKSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetAutoReceptionistDetailOKSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetAutoReceptionistIVROK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetAutoReceptionistIVROK) encodeFields(e *jx.Encoder) {
	{
		if s.AudioPrompt.Set {
			e.FieldStart("audio_prompt")
			s.AudioPrompt.Encode(e)
		}
	}
	{
		if s.CallerEntersNoAction.Set {
			e.FieldStart("caller_enters_no_action")
			s.CallerEntersNoAction.Encode(e)
		}
	}
	{
		if s.KeyActions != nil {
			e.FieldStart("key_actions")
			e.ArrStart()
			for _, elem := range s.KeyActions {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGetAutoReceptionistIVROK = [3]string{
	0: "audio_prompt",
	1: "caller_enters_no_action",
	2: "key_actions",
}

// Decode decodes GetAutoReceptionistIVROK from json.
func (s *GetAutoReceptionistIVROK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetAutoReceptionistIVROK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_prompt":
			if err := func() error {
				s.AudioPrompt.Reset()
				if err := s.AudioPrompt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_prompt\"")
			}
		case "caller_enters_no_action":
			if err := func() error {
				s.CallerEntersNoAction.Reset()
				if err := s.CallerEntersNoAction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_enters_no_action\"")
			}
		case "key_actions":
			if err := func() error {
				s.KeyActions = make([]GetAutoReceptionistIVROKKeyActionsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetAutoReceptionistIVROKKeyActionsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.KeyActions = append(s.KeyActions, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"key_actions\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetAutoReceptionistIVROK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetAutoReceptionistIVROK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetAutoReceptionistIVROK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetAutoReceptionistIVROKAudioPrompt) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetAutoReceptionistIVROKAudioPrompt) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetAutoReceptionistIVROKAudioPrompt = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes GetAutoReceptionistIVROKAudioPrompt from json.
func (s *GetAutoReceptionistIVROKAudioPrompt) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetAutoReceptionistIVROKAudioPrompt to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetAutoReceptionistIVROKAudioPrompt")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetAutoReceptionistIVROKAudioPrompt) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetAutoReceptionistIVROKAudioPrompt) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetAutoReceptionistIVROKCallerEntersNoAction) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetAutoReceptionistIVROKCallerEntersNoAction) encodeFields(e *jx.Encoder) {
	{
		if s.Action.Set {
			e.FieldStart("action")
			s.Action.Encode(e)
		}
	}
	{
		if s.AudioPromptRepeat.Set {
			e.FieldStart("audio_prompt_repeat")
			s.AudioPromptRepeat.Encode(e)
		}
	}
	{
		if s.ForwardTo.Set {
			e.FieldStart("forward_to")
			s.ForwardTo.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetAutoReceptionistIVROKCallerEntersNoAction = [3]string{
	0: "action",
	1: "audio_prompt_repeat",
	2: "forward_to",
}

// Decode decodes GetAutoReceptionistIVROKCallerEntersNoAction from json.
func (s *GetAutoReceptionistIVROKCallerEntersNoAction) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetAutoReceptionistIVROKCallerEntersNoAction to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "action":
			if err := func() error {
				s.Action.Reset()
				if err := s.Action.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"action\"")
			}
		case "audio_prompt_repeat":
			if err := func() error {
				s.AudioPromptRepeat.Reset()
				if err := s.AudioPromptRepeat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_prompt_repeat\"")
			}
		case "forward_to":
			if err := func() error {
				s.ForwardTo.Reset()
				if err := s.ForwardTo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward_to\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetAutoReceptionistIVROKCallerEntersNoAction")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetAutoReceptionistIVROKCallerEntersNoAction) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetAutoReceptionistIVROKCallerEntersNoAction) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetAutoReceptionistIVROKCallerEntersNoActionForwardTo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetAutoReceptionistIVROKCallerEntersNoActionForwardTo) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetAutoReceptionistIVROKCallerEntersNoActionForwardTo = [4]string{
	0: "display_name",
	1: "extension_id",
	2: "extension_number",
	3: "id",
}

// Decode decodes GetAutoReceptionistIVROKCallerEntersNoActionForwardTo from json.
func (s *GetAutoReceptionistIVROKCallerEntersNoActionForwardTo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetAutoReceptionistIVROKCallerEntersNoActionForwardTo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetAutoReceptionistIVROKCallerEntersNoActionForwardTo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetAutoReceptionistIVROKCallerEntersNoActionForwardTo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetAutoReceptionistIVROKCallerEntersNoActionForwardTo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetAutoReceptionistIVROKKeyActionsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetAutoReceptionistIVROKKeyActionsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Action.Set {
			e.FieldStart("action")
			s.Action.Encode(e)
		}
	}
	{
		if s.Key.Set {
			e.FieldStart("key")
			s.Key.Encode(e)
		}
	}
	{
		if s.Target.Set {
			e.FieldStart("target")
			s.Target.Encode(e)
		}
	}
	{
		if s.VoicemailGreeting.Set {
			e.FieldStart("voicemail_greeting")
			s.VoicemailGreeting.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetAutoReceptionistIVROKKeyActionsItem = [4]string{
	0: "action",
	1: "key",
	2: "target",
	3: "voicemail_greeting",
}

// Decode decodes GetAutoReceptionistIVROKKeyActionsItem from json.
func (s *GetAutoReceptionistIVROKKeyActionsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetAutoReceptionistIVROKKeyActionsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "action":
			if err := func() error {
				s.Action.Reset()
				if err := s.Action.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"action\"")
			}
		case "key":
			if err := func() error {
				s.Key.Reset()
				if err := s.Key.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"key\"")
			}
		case "target":
			if err := func() error {
				s.Target.Reset()
				if err := s.Target.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"target\"")
			}
		case "voicemail_greeting":
			if err := func() error {
				s.VoicemailGreeting.Reset()
				if err := s.VoicemailGreeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voicemail_greeting\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetAutoReceptionistIVROKKeyActionsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetAutoReceptionistIVROKKeyActionsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetAutoReceptionistIVROKKeyActionsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetAutoReceptionistIVROKKeyActionsItemTarget) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetAutoReceptionistIVROKKeyActionsItemTarget) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.PhoneNumber.Set {
			e.FieldStart("phone_number")
			s.PhoneNumber.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetAutoReceptionistIVROKKeyActionsItemTarget = [5]string{
	0: "display_name",
	1: "extension_id",
	2: "extension_number",
	3: "id",
	4: "phone_number",
}

// Decode decodes GetAutoReceptionistIVROKKeyActionsItemTarget from json.
func (s *GetAutoReceptionistIVROKKeyActionsItemTarget) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetAutoReceptionistIVROKKeyActionsItemTarget to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetAutoReceptionistIVROKKeyActionsItemTarget")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetAutoReceptionistIVROKKeyActionsItemTarget) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetAutoReceptionistIVROKKeyActionsItemTarget) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetAutoReceptionistIVROKKeyActionsItemVoicemailGreeting) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetAutoReceptionistIVROKKeyActionsItemVoicemailGreeting) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetAutoReceptionistIVROKKeyActionsItemVoicemailGreeting = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes GetAutoReceptionistIVROKKeyActionsItemVoicemailGreeting from json.
func (s *GetAutoReceptionistIVROKKeyActionsItemVoicemailGreeting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetAutoReceptionistIVROKKeyActionsItemVoicemailGreeting to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetAutoReceptionistIVROKKeyActionsItemVoicemailGreeting")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetAutoReceptionistIVROKKeyActionsItemVoicemailGreeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetAutoReceptionistIVROKKeyActionsItemVoicemailGreeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetAutoReceptionistsPolicyOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetAutoReceptionistsPolicyOK) encodeFields(e *jx.Encoder) {
	{
		if s.VoicemailAccessMembers != nil {
			e.FieldStart("voicemail_access_members")
			e.ArrStart()
			for _, elem := range s.VoicemailAccessMembers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.VoicemailTranscription.Set {
			e.FieldStart("voicemail_transcription")
			s.VoicemailTranscription.Encode(e)
		}
	}
	{
		if s.VoicemailNotificationByEmail.Set {
			e.FieldStart("voicemail_notification_by_email")
			s.VoicemailNotificationByEmail.Encode(e)
		}
	}
	{
		if s.SMS.Set {
			e.FieldStart("sms")
			s.SMS.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetAutoReceptionistsPolicyOK = [4]string{
	0: "voicemail_access_members",
	1: "voicemail_transcription",
	2: "voicemail_notification_by_email",
	3: "sms",
}

// Decode decodes GetAutoReceptionistsPolicyOK from json.
func (s *GetAutoReceptionistsPolicyOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetAutoReceptionistsPolicyOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "voicemail_access_members":
			if err := func() error {
				s.VoicemailAccessMembers = make([]GetAutoReceptionistsPolicyOKVoicemailAccessMembersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetAutoReceptionistsPolicyOKVoicemailAccessMembersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.VoicemailAccessMembers = append(s.VoicemailAccessMembers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voicemail_access_members\"")
			}
		case "voicemail_transcription":
			if err := func() error {
				s.VoicemailTranscription.Reset()
				if err := s.VoicemailTranscription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voicemail_transcription\"")
			}
		case "voicemail_notification_by_email":
			if err := func() error {
				s.VoicemailNotificationByEmail.Reset()
				if err := s.VoicemailNotificationByEmail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voicemail_notification_by_email\"")
			}
		case "sms":
			if err := func() error {
				s.SMS.Reset()
				if err := s.SMS.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sms\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetAutoReceptionistsPolicyOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetAutoReceptionistsPolicyOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetAutoReceptionistsPolicyOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetAutoReceptionistsPolicyOKSMS) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetAutoReceptionistsPolicyOKSMS) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.InternationalSMS.Set {
			e.FieldStart("international_sms")
			s.InternationalSMS.Encode(e)
		}
	}
	{
		if s.InternationalSMSCountries != nil {
			e.FieldStart("international_sms_countries")
			e.ArrStart()
			for _, elem := range s.InternationalSMSCountries {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetAutoReceptionistsPolicyOKSMS = [6]string{
	0: "enable",
	1: "international_sms",
	2: "international_sms_countries",
	3: "locked",
	4: "locked_by",
	5: "modified",
}

// Decode decodes GetAutoReceptionistsPolicyOKSMS from json.
func (s *GetAutoReceptionistsPolicyOKSMS) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetAutoReceptionistsPolicyOKSMS to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "international_sms":
			if err := func() error {
				s.InternationalSMS.Reset()
				if err := s.InternationalSMS.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"international_sms\"")
			}
		case "international_sms_countries":
			if err := func() error {
				s.InternationalSMSCountries = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.InternationalSMSCountries = append(s.InternationalSMSCountries, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"international_sms_countries\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetAutoReceptionistsPolicyOKSMS")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetAutoReceptionistsPolicyOKSMS) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetAutoReceptionistsPolicyOKSMS) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetAutoReceptionistsPolicyOKVoicemailAccessMembersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetAutoReceptionistsPolicyOKVoicemailAccessMembersItem) encodeFields(e *jx.Encoder) {
	{
		if s.SharedID.Set {
			e.FieldStart("shared_id")
			s.SharedID.Encode(e)
		}
	}
	{
		if s.AccessUserID.Set {
			e.FieldStart("access_user_id")
			s.AccessUserID.Encode(e)
		}
	}
	{
		if s.Delete.Set {
			e.FieldStart("delete")
			s.Delete.Encode(e)
		}
	}
	{
		if s.Download.Set {
			e.FieldStart("download")
			s.Download.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetAutoReceptionistsPolicyOKVoicemailAccessMembersItem = [4]string{
	0: "shared_id",
	1: "access_user_id",
	2: "delete",
	3: "download",
}

// Decode decodes GetAutoReceptionistsPolicyOKVoicemailAccessMembersItem from json.
func (s *GetAutoReceptionistsPolicyOKVoicemailAccessMembersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetAutoReceptionistsPolicyOKVoicemailAccessMembersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shared_id":
			if err := func() error {
				s.SharedID.Reset()
				if err := s.SharedID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shared_id\"")
			}
		case "access_user_id":
			if err := func() error {
				s.AccessUserID.Reset()
				if err := s.AccessUserID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_user_id\"")
			}
		case "delete":
			if err := func() error {
				s.Delete.Reset()
				if err := s.Delete.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delete\"")
			}
		case "download":
			if err := func() error {
				s.Download.Reset()
				if err := s.Download.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"download\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetAutoReceptionistsPolicyOKVoicemailAccessMembersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetAutoReceptionistsPolicyOKVoicemailAccessMembersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetAutoReceptionistsPolicyOKVoicemailAccessMembersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetAutoReceptionistsPolicyOKVoicemailNotificationByEmail) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetAutoReceptionistsPolicyOKVoicemailNotificationByEmail) encodeFields(e *jx.Encoder) {
	{
		if s.IncludeVoicemailFile.Set {
			e.FieldStart("include_voicemail_file")
			s.IncludeVoicemailFile.Encode(e)
		}
	}
	{
		if s.IncludeVoicemailTranscription.Set {
			e.FieldStart("include_voicemail_transcription")
			s.IncludeVoicemailTranscription.Encode(e)
		}
	}
	{
		if s.ForwardVoicemailToEmail.Set {
			e.FieldStart("forward_voicemail_to_email")
			s.ForwardVoicemailToEmail.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetAutoReceptionistsPolicyOKVoicemailNotificationByEmail = [7]string{
	0: "include_voicemail_file",
	1: "include_voicemail_transcription",
	2: "forward_voicemail_to_email",
	3: "enable",
	4: "locked",
	5: "locked_by",
	6: "modified",
}

// Decode decodes GetAutoReceptionistsPolicyOKVoicemailNotificationByEmail from json.
func (s *GetAutoReceptionistsPolicyOKVoicemailNotificationByEmail) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetAutoReceptionistsPolicyOKVoicemailNotificationByEmail to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "include_voicemail_file":
			if err := func() error {
				s.IncludeVoicemailFile.Reset()
				if err := s.IncludeVoicemailFile.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"include_voicemail_file\"")
			}
		case "include_voicemail_transcription":
			if err := func() error {
				s.IncludeVoicemailTranscription.Reset()
				if err := s.IncludeVoicemailTranscription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"include_voicemail_transcription\"")
			}
		case "forward_voicemail_to_email":
			if err := func() error {
				s.ForwardVoicemailToEmail.Reset()
				if err := s.ForwardVoicemailToEmail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward_voicemail_to_email\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetAutoReceptionistsPolicyOKVoicemailNotificationByEmail")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetAutoReceptionistsPolicyOKVoicemailNotificationByEmail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetAutoReceptionistsPolicyOKVoicemailNotificationByEmail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetAutoReceptionistsPolicyOKVoicemailTranscription) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetAutoReceptionistsPolicyOKVoicemailTranscription) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetAutoReceptionistsPolicyOKVoicemailTranscription = [4]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
}

// Decode decodes GetAutoReceptionistsPolicyOKVoicemailTranscription from json.
func (s *GetAutoReceptionistsPolicyOKVoicemailTranscription) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetAutoReceptionistsPolicyOKVoicemailTranscription to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetAutoReceptionistsPolicyOKVoicemailTranscription")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetAutoReceptionistsPolicyOKVoicemailTranscription) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetAutoReceptionistsPolicyOKVoicemailTranscription) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallChargesUsageReportOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallChargesUsageReportOK) encodeFields(e *jx.Encoder) {
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
	{
		if s.TotalRecords.Set {
			e.FieldStart("total_records")
			s.TotalRecords.Encode(e)
		}
	}
	{
		if s.From.Set {
			e.FieldStart("from")
			s.From.Encode(e)
		}
	}
	{
		if s.To.Set {
			e.FieldStart("to")
			s.To.Encode(e)
		}
	}
	{
		if s.CallCharges != nil {
			e.FieldStart("call_charges")
			e.ArrStart()
			for _, elem := range s.CallCharges {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGetCallChargesUsageReportOK = [6]string{
	0: "next_page_token",
	1: "page_size",
	2: "total_records",
	3: "from",
	4: "to",
	5: "call_charges",
}

// Decode decodes GetCallChargesUsageReportOK from json.
func (s *GetCallChargesUsageReportOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallChargesUsageReportOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		case "total_records":
			if err := func() error {
				s.TotalRecords.Reset()
				if err := s.TotalRecords.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_records\"")
			}
		case "from":
			if err := func() error {
				s.From.Reset()
				if err := s.From.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"from\"")
			}
		case "to":
			if err := func() error {
				s.To.Reset()
				if err := s.To.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"to\"")
			}
		case "call_charges":
			if err := func() error {
				s.CallCharges = make([]GetCallChargesUsageReportOKCallChargesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetCallChargesUsageReportOKCallChargesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CallCharges = append(s.CallCharges, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_charges\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallChargesUsageReportOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallChargesUsageReportOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallChargesUsageReportOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallChargesUsageReportOKCallChargesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallChargesUsageReportOKCallChargesItem) encodeFields(e *jx.Encoder) {
	{
		if s.CallLogID.Set {
			e.FieldStart("call_log_id")
			s.CallLogID.Encode(e)
		}
	}
	{
		if s.CallerNumber.Set {
			e.FieldStart("caller_number")
			s.CallerNumber.Encode(e)
		}
	}
	{
		if s.CallerBillingNumber.Set {
			e.FieldStart("caller_billing_number")
			s.CallerBillingNumber.Encode(e)
		}
	}
	{
		if s.CalleeNumber.Set {
			e.FieldStart("callee_number")
			s.CalleeNumber.Encode(e)
		}
	}
	{
		if s.CalleeBillingNumber.Set {
			e.FieldStart("callee_billing_number")
			s.CalleeBillingNumber.Encode(e)
		}
	}
	{
		if s.CallType.Set {
			e.FieldStart("call_type")
			s.CallType.Encode(e)
		}
	}
	{
		if s.ServiceType.Set {
			e.FieldStart("service_type")
			s.ServiceType.Encode(e)
		}
	}
	{
		if s.CallingPartyName.Set {
			e.FieldStart("calling_party_name")
			s.CallingPartyName.Encode(e)
		}
	}
	{
		if s.CostCenter.Set {
			e.FieldStart("cost_center")
			s.CostCenter.Encode(e)
		}
	}
	{
		if s.EmployeeID.Set {
			e.FieldStart("employee_id")
			s.EmployeeID.Encode(e)
		}
	}
	{
		if s.Department.Set {
			e.FieldStart("department")
			s.Department.Encode(e)
		}
	}
	{
		if s.EndTime.Set {
			e.FieldStart("end_time")
			s.EndTime.Encode(e)
		}
	}
	{
		if s.Duration.Set {
			e.FieldStart("duration")
			s.Duration.Encode(e)
		}
	}
	{
		if s.ChargeMode.Set {
			e.FieldStart("charge_mode")
			s.ChargeMode.Encode(e)
		}
	}
	{
		if s.Rate.Set {
			e.FieldStart("rate")
			s.Rate.Encode(e)
		}
	}
	{
		if s.Currency.Set {
			e.FieldStart("currency")
			s.Currency.Encode(e)
		}
	}
	{
		if s.TotalCharge.Set {
			e.FieldStart("total_charge")
			s.TotalCharge.Encode(e)
		}
	}
	{
		if s.BillingNumber.Set {
			e.FieldStart("billing_number")
			s.BillingNumber.Encode(e)
		}
	}
	{
		if s.ForwardNumberBilling.Set {
			e.FieldStart("forward_number_billing")
			s.ForwardNumberBilling.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCallChargesUsageReportOKCallChargesItem = [19]string{
	0:  "call_log_id",
	1:  "caller_number",
	2:  "caller_billing_number",
	3:  "callee_number",
	4:  "callee_billing_number",
	5:  "call_type",
	6:  "service_type",
	7:  "calling_party_name",
	8:  "cost_center",
	9:  "employee_id",
	10: "department",
	11: "end_time",
	12: "duration",
	13: "charge_mode",
	14: "rate",
	15: "currency",
	16: "total_charge",
	17: "billing_number",
	18: "forward_number_billing",
}

// Decode decodes GetCallChargesUsageReportOKCallChargesItem from json.
func (s *GetCallChargesUsageReportOKCallChargesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallChargesUsageReportOKCallChargesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "call_log_id":
			if err := func() error {
				s.CallLogID.Reset()
				if err := s.CallLogID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_log_id\"")
			}
		case "caller_number":
			if err := func() error {
				s.CallerNumber.Reset()
				if err := s.CallerNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_number\"")
			}
		case "caller_billing_number":
			if err := func() error {
				s.CallerBillingNumber.Reset()
				if err := s.CallerBillingNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_billing_number\"")
			}
		case "callee_number":
			if err := func() error {
				s.CalleeNumber.Reset()
				if err := s.CalleeNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_number\"")
			}
		case "callee_billing_number":
			if err := func() error {
				s.CalleeBillingNumber.Reset()
				if err := s.CalleeBillingNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_billing_number\"")
			}
		case "call_type":
			if err := func() error {
				s.CallType.Reset()
				if err := s.CallType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_type\"")
			}
		case "service_type":
			if err := func() error {
				s.ServiceType.Reset()
				if err := s.ServiceType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"service_type\"")
			}
		case "calling_party_name":
			if err := func() error {
				s.CallingPartyName.Reset()
				if err := s.CallingPartyName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"calling_party_name\"")
			}
		case "cost_center":
			if err := func() error {
				s.CostCenter.Reset()
				if err := s.CostCenter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cost_center\"")
			}
		case "employee_id":
			if err := func() error {
				s.EmployeeID.Reset()
				if err := s.EmployeeID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"employee_id\"")
			}
		case "department":
			if err := func() error {
				s.Department.Reset()
				if err := s.Department.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"department\"")
			}
		case "end_time":
			if err := func() error {
				s.EndTime.Reset()
				if err := s.EndTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"end_time\"")
			}
		case "duration":
			if err := func() error {
				s.Duration.Reset()
				if err := s.Duration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"duration\"")
			}
		case "charge_mode":
			if err := func() error {
				s.ChargeMode.Reset()
				if err := s.ChargeMode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"charge_mode\"")
			}
		case "rate":
			if err := func() error {
				s.Rate.Reset()
				if err := s.Rate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rate\"")
			}
		case "currency":
			if err := func() error {
				s.Currency.Reset()
				if err := s.Currency.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"currency\"")
			}
		case "total_charge":
			if err := func() error {
				s.TotalCharge.Reset()
				if err := s.TotalCharge.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_charge\"")
			}
		case "billing_number":
			if err := func() error {
				s.BillingNumber.Reset()
				if err := s.BillingNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"billing_number\"")
			}
		case "forward_number_billing":
			if err := func() error {
				s.ForwardNumberBilling.Reset()
				if err := s.ForwardNumberBilling.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward_number_billing\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallChargesUsageReportOKCallChargesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallChargesUsageReportOKCallChargesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallChargesUsageReportOKCallChargesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallHandlingOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallHandlingOK) encodeFields(e *jx.Encoder) {
	{
		if s.BusinessHours != nil {
			e.FieldStart("business_hours")
			e.ArrStart()
			for _, elem := range s.BusinessHours {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ClosedHours != nil {
			e.FieldStart("closed_hours")
			e.ArrStart()
			for _, elem := range s.ClosedHours {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.HolidayHours != nil {
			e.FieldStart("holiday_hours")
			e.ArrStart()
			for _, elem := range s.HolidayHours {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGetCallHandlingOK = [3]string{
	0: "business_hours",
	1: "closed_hours",
	2: "holiday_hours",
}

// Decode decodes GetCallHandlingOK from json.
func (s *GetCallHandlingOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallHandlingOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "business_hours":
			if err := func() error {
				s.BusinessHours = make([]GetCallHandlingOKBusinessHoursItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetCallHandlingOKBusinessHoursItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.BusinessHours = append(s.BusinessHours, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"business_hours\"")
			}
		case "closed_hours":
			if err := func() error {
				s.ClosedHours = make([]GetCallHandlingOKClosedHoursItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetCallHandlingOKClosedHoursItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.ClosedHours = append(s.ClosedHours, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"closed_hours\"")
			}
		case "holiday_hours":
			if err := func() error {
				s.HolidayHours = make([]GetCallHandlingOKHolidayHoursItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetCallHandlingOKHolidayHoursItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.HolidayHours = append(s.HolidayHours, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holiday_hours\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallHandlingOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallHandlingOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallHandlingOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallHandlingOKBusinessHoursItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallHandlingOKBusinessHoursItem) encodeFields(e *jx.Encoder) {
	{
		if s.Settings.Set {
			e.FieldStart("settings")
			s.Settings.Encode(e)
		}
	}
	{
		if s.SubSettingType.Set {
			e.FieldStart("sub_setting_type")
			s.SubSettingType.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCallHandlingOKBusinessHoursItem = [2]string{
	0: "settings",
	1: "sub_setting_type",
}

// Decode decodes GetCallHandlingOKBusinessHoursItem from json.
func (s *GetCallHandlingOKBusinessHoursItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallHandlingOKBusinessHoursItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "settings":
			if err := func() error {
				s.Settings.Reset()
				if err := s.Settings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"settings\"")
			}
		case "sub_setting_type":
			if err := func() error {
				s.SubSettingType.Reset()
				if err := s.SubSettingType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sub_setting_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallHandlingOKBusinessHoursItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallHandlingOKBusinessHoursItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallHandlingOKBusinessHoursItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallHandlingOKBusinessHoursItemSettings) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallHandlingOKBusinessHoursItemSettings) encodeFields(e *jx.Encoder) {
	{
		if s.AllowCallersCheckVoicemail.Set {
			e.FieldStart("allow_callers_check_voicemail")
			s.AllowCallersCheckVoicemail.Encode(e)
		}
	}
	{
		if s.AllowMembersToReset.Set {
			e.FieldStart("allow_members_to_reset")
			s.AllowMembersToReset.Encode(e)
		}
	}
	{
		if s.AudioWhileConnecting.Set {
			e.FieldStart("audio_while_connecting")
			s.AudioWhileConnecting.Encode(e)
		}
	}
	{
		if s.CallDistribution.Set {
			e.FieldStart("call_distribution")
			s.CallDistribution.Encode(e)
		}
	}
	{
		if s.CallForwardingSettings != nil {
			e.FieldStart("call_forwarding_settings")
			e.ArrStart()
			for _, elem := range s.CallForwardingSettings {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.CallNotAnswerAction.Set {
			e.FieldStart("call_not_answer_action")
			s.CallNotAnswerAction.Encode(e)
		}
	}
	{
		if s.ConnectToOperator.Set {
			e.FieldStart("connect_to_operator")
			s.ConnectToOperator.Encode(e)
		}
	}
	{
		if s.CustomHoursSettings != nil {
			e.FieldStart("custom_hours_settings")
			e.ArrStart()
			for _, elem := range s.CustomHoursSettings {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.GreetingPrompt.Set {
			e.FieldStart("greeting_prompt")
			s.GreetingPrompt.Encode(e)
		}
	}
	{
		if s.MaxCallInQueue.Set {
			e.FieldStart("max_call_in_queue")
			s.MaxCallInQueue.Encode(e)
		}
	}
	{
		if s.MaxWaitTime.Set {
			e.FieldStart("max_wait_time")
			s.MaxWaitTime.Encode(e)
		}
	}
	{
		if s.MusicOnHold.Set {
			e.FieldStart("music_on_hold")
			s.MusicOnHold.Encode(e)
		}
	}
	{
		if s.ReceiveCall.Set {
			e.FieldStart("receive_call")
			s.ReceiveCall.Encode(e)
		}
	}
	{
		if s.RequirePress1BeforeConnecting.Set {
			e.FieldStart("require_press_1_before_connecting")
			s.RequirePress1BeforeConnecting.Encode(e)
		}
	}
	{
		if s.RingMode.Set {
			e.FieldStart("ring_mode")
			s.RingMode.Encode(e)
		}
	}
	{
		if s.Routing.Set {
			e.FieldStart("routing")
			s.Routing.Encode(e)
		}
	}
	{
		if s.BusyRouting.Set {
			e.FieldStart("busy_routing")
			s.BusyRouting.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.WrapUpTime.Set {
			e.FieldStart("wrap_up_time")
			s.WrapUpTime.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCallHandlingOKBusinessHoursItemSettings = [19]string{
	0:  "allow_callers_check_voicemail",
	1:  "allow_members_to_reset",
	2:  "audio_while_connecting",
	3:  "call_distribution",
	4:  "call_forwarding_settings",
	5:  "call_not_answer_action",
	6:  "connect_to_operator",
	7:  "custom_hours_settings",
	8:  "greeting_prompt",
	9:  "max_call_in_queue",
	10: "max_wait_time",
	11: "music_on_hold",
	12: "receive_call",
	13: "require_press_1_before_connecting",
	14: "ring_mode",
	15: "routing",
	16: "busy_routing",
	17: "type",
	18: "wrap_up_time",
}

// Decode decodes GetCallHandlingOKBusinessHoursItemSettings from json.
func (s *GetCallHandlingOKBusinessHoursItemSettings) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallHandlingOKBusinessHoursItemSettings to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allow_callers_check_voicemail":
			if err := func() error {
				s.AllowCallersCheckVoicemail.Reset()
				if err := s.AllowCallersCheckVoicemail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_callers_check_voicemail\"")
			}
		case "allow_members_to_reset":
			if err := func() error {
				s.AllowMembersToReset.Reset()
				if err := s.AllowMembersToReset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_members_to_reset\"")
			}
		case "audio_while_connecting":
			if err := func() error {
				s.AudioWhileConnecting.Reset()
				if err := s.AudioWhileConnecting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_while_connecting\"")
			}
		case "call_distribution":
			if err := func() error {
				s.CallDistribution.Reset()
				if err := s.CallDistribution.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_distribution\"")
			}
		case "call_forwarding_settings":
			if err := func() error {
				s.CallForwardingSettings = make([]GetCallHandlingOKBusinessHoursItemSettingsCallForwardingSettingsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetCallHandlingOKBusinessHoursItemSettingsCallForwardingSettingsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CallForwardingSettings = append(s.CallForwardingSettings, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_forwarding_settings\"")
			}
		case "call_not_answer_action":
			if err := func() error {
				s.CallNotAnswerAction.Reset()
				if err := s.CallNotAnswerAction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_not_answer_action\"")
			}
		case "connect_to_operator":
			if err := func() error {
				s.ConnectToOperator.Reset()
				if err := s.ConnectToOperator.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"connect_to_operator\"")
			}
		case "custom_hours_settings":
			if err := func() error {
				s.CustomHoursSettings = make([]GetCallHandlingOKBusinessHoursItemSettingsCustomHoursSettingsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetCallHandlingOKBusinessHoursItemSettingsCustomHoursSettingsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CustomHoursSettings = append(s.CustomHoursSettings, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"custom_hours_settings\"")
			}
		case "greeting_prompt":
			if err := func() error {
				s.GreetingPrompt.Reset()
				if err := s.GreetingPrompt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"greeting_prompt\"")
			}
		case "max_call_in_queue":
			if err := func() error {
				s.MaxCallInQueue.Reset()
				if err := s.MaxCallInQueue.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"max_call_in_queue\"")
			}
		case "max_wait_time":
			if err := func() error {
				s.MaxWaitTime.Reset()
				if err := s.MaxWaitTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"max_wait_time\"")
			}
		case "music_on_hold":
			if err := func() error {
				s.MusicOnHold.Reset()
				if err := s.MusicOnHold.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"music_on_hold\"")
			}
		case "receive_call":
			if err := func() error {
				s.ReceiveCall.Reset()
				if err := s.ReceiveCall.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"receive_call\"")
			}
		case "require_press_1_before_connecting":
			if err := func() error {
				s.RequirePress1BeforeConnecting.Reset()
				if err := s.RequirePress1BeforeConnecting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_press_1_before_connecting\"")
			}
		case "ring_mode":
			if err := func() error {
				s.RingMode.Reset()
				if err := s.RingMode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ring_mode\"")
			}
		case "routing":
			if err := func() error {
				s.Routing.Reset()
				if err := s.Routing.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"routing\"")
			}
		case "busy_routing":
			if err := func() error {
				s.BusyRouting.Reset()
				if err := s.BusyRouting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"busy_routing\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "wrap_up_time":
			if err := func() error {
				s.WrapUpTime.Reset()
				if err := s.WrapUpTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"wrap_up_time\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallHandlingOKBusinessHoursItemSettings")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallHandlingOKBusinessHoursItemSettings) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallHandlingOKBusinessHoursItemSettings) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallHandlingOKBusinessHoursItemSettingsAudioWhileConnecting) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallHandlingOKBusinessHoursItemSettingsAudioWhileConnecting) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCallHandlingOKBusinessHoursItemSettingsAudioWhileConnecting = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes GetCallHandlingOKBusinessHoursItemSettingsAudioWhileConnecting from json.
func (s *GetCallHandlingOKBusinessHoursItemSettingsAudioWhileConnecting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallHandlingOKBusinessHoursItemSettingsAudioWhileConnecting to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallHandlingOKBusinessHoursItemSettingsAudioWhileConnecting")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallHandlingOKBusinessHoursItemSettingsAudioWhileConnecting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallHandlingOKBusinessHoursItemSettingsAudioWhileConnecting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallHandlingOKBusinessHoursItemSettingsBusyRouting) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallHandlingOKBusinessHoursItemSettingsBusyRouting) encodeFields(e *jx.Encoder) {
	{
		if s.Action.Set {
			e.FieldStart("action")
			s.Action.Encode(e)
		}
	}
	{
		if s.ForwardTo.Set {
			e.FieldStart("forward_to")
			s.ForwardTo.Encode(e)
		}
	}
	{
		if s.Operator.Set {
			e.FieldStart("operator")
			s.Operator.Encode(e)
		}
	}
	{
		if s.ConnectToOperator.Set {
			e.FieldStart("connect_to_operator")
			s.ConnectToOperator.Encode(e)
		}
	}
	{
		if s.AllowCallersCheckVoicemail.Set {
			e.FieldStart("allow_callers_check_voicemail")
			s.AllowCallersCheckVoicemail.Encode(e)
		}
	}
	{
		if s.VoicemailGreeting.Set {
			e.FieldStart("voicemail_greeting")
			s.VoicemailGreeting.Encode(e)
		}
	}
	{
		if s.RequirePress1BeforeConnecting.Set {
			e.FieldStart("require_press_1_before_connecting")
			s.RequirePress1BeforeConnecting.Encode(e)
		}
	}
	{
		if s.OverflowPlayCalleeVoicemailGreeting.Set {
			e.FieldStart("overflow_play_callee_voicemail_greeting")
			s.OverflowPlayCalleeVoicemailGreeting.Encode(e)
		}
	}
	{
		if s.PlayCalleeVoicemailGreeting.Set {
			e.FieldStart("play_callee_voicemail_greeting")
			s.PlayCalleeVoicemailGreeting.Encode(e)
		}
	}
	{
		if s.BusyPlayCalleeVoicemailGreeting.Set {
			e.FieldStart("busy_play_callee_voicemail_greeting")
			s.BusyPlayCalleeVoicemailGreeting.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCallHandlingOKBusinessHoursItemSettingsBusyRouting = [10]string{
	0: "action",
	1: "forward_to",
	2: "operator",
	3: "connect_to_operator",
	4: "allow_callers_check_voicemail",
	5: "voicemail_greeting",
	6: "require_press_1_before_connecting",
	7: "overflow_play_callee_voicemail_greeting",
	8: "play_callee_voicemail_greeting",
	9: "busy_play_callee_voicemail_greeting",
}

// Decode decodes GetCallHandlingOKBusinessHoursItemSettingsBusyRouting from json.
func (s *GetCallHandlingOKBusinessHoursItemSettingsBusyRouting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallHandlingOKBusinessHoursItemSettingsBusyRouting to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "action":
			if err := func() error {
				s.Action.Reset()
				if err := s.Action.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"action\"")
			}
		case "forward_to":
			if err := func() error {
				s.ForwardTo.Reset()
				if err := s.ForwardTo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward_to\"")
			}
		case "operator":
			if err := func() error {
				s.Operator.Reset()
				if err := s.Operator.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"operator\"")
			}
		case "connect_to_operator":
			if err := func() error {
				s.ConnectToOperator.Reset()
				if err := s.ConnectToOperator.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"connect_to_operator\"")
			}
		case "allow_callers_check_voicemail":
			if err := func() error {
				s.AllowCallersCheckVoicemail.Reset()
				if err := s.AllowCallersCheckVoicemail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_callers_check_voicemail\"")
			}
		case "voicemail_greeting":
			if err := func() error {
				s.VoicemailGreeting.Reset()
				if err := s.VoicemailGreeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voicemail_greeting\"")
			}
		case "require_press_1_before_connecting":
			if err := func() error {
				s.RequirePress1BeforeConnecting.Reset()
				if err := s.RequirePress1BeforeConnecting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_press_1_before_connecting\"")
			}
		case "overflow_play_callee_voicemail_greeting":
			if err := func() error {
				s.OverflowPlayCalleeVoicemailGreeting.Reset()
				if err := s.OverflowPlayCalleeVoicemailGreeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overflow_play_callee_voicemail_greeting\"")
			}
		case "play_callee_voicemail_greeting":
			if err := func() error {
				s.PlayCalleeVoicemailGreeting.Reset()
				if err := s.PlayCalleeVoicemailGreeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_callee_voicemail_greeting\"")
			}
		case "busy_play_callee_voicemail_greeting":
			if err := func() error {
				s.BusyPlayCalleeVoicemailGreeting.Reset()
				if err := s.BusyPlayCalleeVoicemailGreeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"busy_play_callee_voicemail_greeting\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallHandlingOKBusinessHoursItemSettingsBusyRouting")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallHandlingOKBusinessHoursItemSettingsBusyRouting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallHandlingOKBusinessHoursItemSettingsBusyRouting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallHandlingOKBusinessHoursItemSettingsBusyRoutingForwardTo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallHandlingOKBusinessHoursItemSettingsBusyRoutingForwardTo) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ExtensionType.Set {
			e.FieldStart("extension_type")
			s.ExtensionType.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.PhoneNumber.Set {
			e.FieldStart("phone_number")
			s.PhoneNumber.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.VoicemailGreeting != nil {
			e.FieldStart("voicemail_greeting")
			s.VoicemailGreeting.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCallHandlingOKBusinessHoursItemSettingsBusyRoutingForwardTo = [8]string{
	0: "display_name",
	1: "extension_id",
	2: "extension_number",
	3: "extension_type",
	4: "id",
	5: "phone_number",
	6: "description",
	7: "voicemail_greeting",
}

// Decode decodes GetCallHandlingOKBusinessHoursItemSettingsBusyRoutingForwardTo from json.
func (s *GetCallHandlingOKBusinessHoursItemSettingsBusyRoutingForwardTo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallHandlingOKBusinessHoursItemSettingsBusyRoutingForwardTo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "extension_type":
			if err := func() error {
				s.ExtensionType.Reset()
				if err := s.ExtensionType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_type\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "voicemail_greeting":
			if err := func() error {
				s.VoicemailGreeting = nil
				var elem GetCallHandlingOKBusinessHoursItemSettingsBusyRoutingForwardToVoicemailGreeting
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.VoicemailGreeting = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voicemail_greeting\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallHandlingOKBusinessHoursItemSettingsBusyRoutingForwardTo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallHandlingOKBusinessHoursItemSettingsBusyRoutingForwardTo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallHandlingOKBusinessHoursItemSettingsBusyRoutingForwardTo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallHandlingOKBusinessHoursItemSettingsBusyRoutingForwardToVoicemailGreeting) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallHandlingOKBusinessHoursItemSettingsBusyRoutingForwardToVoicemailGreeting) encodeFields(e *jx.Encoder) {
}

var jsonFieldsNameOfGetCallHandlingOKBusinessHoursItemSettingsBusyRoutingForwardToVoicemailGreeting = [0]string{}

// Decode decodes GetCallHandlingOKBusinessHoursItemSettingsBusyRoutingForwardToVoicemailGreeting from json.
func (s *GetCallHandlingOKBusinessHoursItemSettingsBusyRoutingForwardToVoicemailGreeting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallHandlingOKBusinessHoursItemSettingsBusyRoutingForwardToVoicemailGreeting to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
	}); err != nil {
		return errors.Wrap(err, "decode GetCallHandlingOKBusinessHoursItemSettingsBusyRoutingForwardToVoicemailGreeting")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallHandlingOKBusinessHoursItemSettingsBusyRoutingForwardToVoicemailGreeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallHandlingOKBusinessHoursItemSettingsBusyRoutingForwardToVoicemailGreeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallHandlingOKBusinessHoursItemSettingsBusyRoutingOperator) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallHandlingOKBusinessHoursItemSettingsBusyRoutingOperator) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ExtensionType.Set {
			e.FieldStart("extension_type")
			s.ExtensionType.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCallHandlingOKBusinessHoursItemSettingsBusyRoutingOperator = [5]string{
	0: "display_name",
	1: "extension_id",
	2: "extension_number",
	3: "extension_type",
	4: "id",
}

// Decode decodes GetCallHandlingOKBusinessHoursItemSettingsBusyRoutingOperator from json.
func (s *GetCallHandlingOKBusinessHoursItemSettingsBusyRoutingOperator) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallHandlingOKBusinessHoursItemSettingsBusyRoutingOperator to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "extension_type":
			if err := func() error {
				s.ExtensionType.Reset()
				if err := s.ExtensionType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_type\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallHandlingOKBusinessHoursItemSettingsBusyRoutingOperator")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallHandlingOKBusinessHoursItemSettingsBusyRoutingOperator) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallHandlingOKBusinessHoursItemSettingsBusyRoutingOperator) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallHandlingOKBusinessHoursItemSettingsBusyRoutingVoicemailGreeting) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallHandlingOKBusinessHoursItemSettingsBusyRoutingVoicemailGreeting) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCallHandlingOKBusinessHoursItemSettingsBusyRoutingVoicemailGreeting = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes GetCallHandlingOKBusinessHoursItemSettingsBusyRoutingVoicemailGreeting from json.
func (s *GetCallHandlingOKBusinessHoursItemSettingsBusyRoutingVoicemailGreeting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallHandlingOKBusinessHoursItemSettingsBusyRoutingVoicemailGreeting to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallHandlingOKBusinessHoursItemSettingsBusyRoutingVoicemailGreeting")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallHandlingOKBusinessHoursItemSettingsBusyRoutingVoicemailGreeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallHandlingOKBusinessHoursItemSettingsBusyRoutingVoicemailGreeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallHandlingOKBusinessHoursItemSettingsCallDistribution) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallHandlingOKBusinessHoursItemSettingsCallDistribution) encodeFields(e *jx.Encoder) {
	{
		if s.HandleMultipleCalls.Set {
			e.FieldStart("handle_multiple_calls")
			s.HandleMultipleCalls.Encode(e)
		}
	}
	{
		if s.RingDuration.Set {
			e.FieldStart("ring_duration")
			s.RingDuration.Encode(e)
		}
	}
	{
		if s.RingMode.Set {
			e.FieldStart("ring_mode")
			s.RingMode.Encode(e)
		}
	}
	{
		if s.SkipOfflineDevicePhoneNumber.Set {
			e.FieldStart("skip_offline_device_phone_number")
			s.SkipOfflineDevicePhoneNumber.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCallHandlingOKBusinessHoursItemSettingsCallDistribution = [4]string{
	0: "handle_multiple_calls",
	1: "ring_duration",
	2: "ring_mode",
	3: "skip_offline_device_phone_number",
}

// Decode decodes GetCallHandlingOKBusinessHoursItemSettingsCallDistribution from json.
func (s *GetCallHandlingOKBusinessHoursItemSettingsCallDistribution) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallHandlingOKBusinessHoursItemSettingsCallDistribution to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "handle_multiple_calls":
			if err := func() error {
				s.HandleMultipleCalls.Reset()
				if err := s.HandleMultipleCalls.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"handle_multiple_calls\"")
			}
		case "ring_duration":
			if err := func() error {
				s.RingDuration.Reset()
				if err := s.RingDuration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ring_duration\"")
			}
		case "ring_mode":
			if err := func() error {
				s.RingMode.Reset()
				if err := s.RingMode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ring_mode\"")
			}
		case "skip_offline_device_phone_number":
			if err := func() error {
				s.SkipOfflineDevicePhoneNumber.Reset()
				if err := s.SkipOfflineDevicePhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"skip_offline_device_phone_number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallHandlingOKBusinessHoursItemSettingsCallDistribution")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallHandlingOKBusinessHoursItemSettingsCallDistribution) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallHandlingOKBusinessHoursItemSettingsCallDistribution) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallHandlingOKBusinessHoursItemSettingsCallForwardingSettingsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallHandlingOKBusinessHoursItemSettingsCallForwardingSettingsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.PhoneNumber.Set {
			e.FieldStart("phone_number")
			s.PhoneNumber.Encode(e)
		}
	}
	{
		if s.ExternalContact.Set {
			e.FieldStart("external_contact")
			s.ExternalContact.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCallHandlingOKBusinessHoursItemSettingsCallForwardingSettingsItem = [5]string{
	0: "description",
	1: "enable",
	2: "id",
	3: "phone_number",
	4: "external_contact",
}

// Decode decodes GetCallHandlingOKBusinessHoursItemSettingsCallForwardingSettingsItem from json.
func (s *GetCallHandlingOKBusinessHoursItemSettingsCallForwardingSettingsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallHandlingOKBusinessHoursItemSettingsCallForwardingSettingsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		case "external_contact":
			if err := func() error {
				s.ExternalContact.Reset()
				if err := s.ExternalContact.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"external_contact\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallHandlingOKBusinessHoursItemSettingsCallForwardingSettingsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallHandlingOKBusinessHoursItemSettingsCallForwardingSettingsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallHandlingOKBusinessHoursItemSettingsCallForwardingSettingsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallHandlingOKBusinessHoursItemSettingsCallForwardingSettingsItemExternalContact) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallHandlingOKBusinessHoursItemSettingsCallForwardingSettingsItemExternalContact) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Email.Set {
			e.FieldStart("email")
			s.Email.Encode(e)
		}
	}
	{
		if s.ExternalContactID.Set {
			e.FieldStart("external_contact_id")
			s.ExternalContactID.Encode(e)
		}
	}
	{
		if s.PhoneNumbers != nil {
			e.FieldStart("phone_numbers")
			e.ArrStart()
			for _, elem := range s.PhoneNumbers {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGetCallHandlingOKBusinessHoursItemSettingsCallForwardingSettingsItemExternalContact = [4]string{
	0: "name",
	1: "email",
	2: "external_contact_id",
	3: "phone_numbers",
}

// Decode decodes GetCallHandlingOKBusinessHoursItemSettingsCallForwardingSettingsItemExternalContact from json.
func (s *GetCallHandlingOKBusinessHoursItemSettingsCallForwardingSettingsItemExternalContact) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallHandlingOKBusinessHoursItemSettingsCallForwardingSettingsItemExternalContact to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "email":
			if err := func() error {
				s.Email.Reset()
				if err := s.Email.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		case "external_contact_id":
			if err := func() error {
				s.ExternalContactID.Reset()
				if err := s.ExternalContactID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"external_contact_id\"")
			}
		case "phone_numbers":
			if err := func() error {
				s.PhoneNumbers = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.PhoneNumbers = append(s.PhoneNumbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_numbers\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallHandlingOKBusinessHoursItemSettingsCallForwardingSettingsItemExternalContact")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallHandlingOKBusinessHoursItemSettingsCallForwardingSettingsItemExternalContact) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallHandlingOKBusinessHoursItemSettingsCallForwardingSettingsItemExternalContact) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallHandlingOKBusinessHoursItemSettingsCustomHoursSettingsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallHandlingOKBusinessHoursItemSettingsCustomHoursSettingsItem) encodeFields(e *jx.Encoder) {
	{
		if s.From.Set {
			e.FieldStart("from")
			s.From.Encode(e)
		}
	}
	{
		if s.To.Set {
			e.FieldStart("to")
			s.To.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.Weekday.Set {
			e.FieldStart("weekday")
			s.Weekday.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCallHandlingOKBusinessHoursItemSettingsCustomHoursSettingsItem = [4]string{
	0: "from",
	1: "to",
	2: "type",
	3: "weekday",
}

// Decode decodes GetCallHandlingOKBusinessHoursItemSettingsCustomHoursSettingsItem from json.
func (s *GetCallHandlingOKBusinessHoursItemSettingsCustomHoursSettingsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallHandlingOKBusinessHoursItemSettingsCustomHoursSettingsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "from":
			if err := func() error {
				s.From.Reset()
				if err := s.From.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"from\"")
			}
		case "to":
			if err := func() error {
				s.To.Reset()
				if err := s.To.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"to\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "weekday":
			if err := func() error {
				s.Weekday.Reset()
				if err := s.Weekday.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"weekday\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallHandlingOKBusinessHoursItemSettingsCustomHoursSettingsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallHandlingOKBusinessHoursItemSettingsCustomHoursSettingsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallHandlingOKBusinessHoursItemSettingsCustomHoursSettingsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallHandlingOKBusinessHoursItemSettingsGreetingPrompt) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallHandlingOKBusinessHoursItemSettingsGreetingPrompt) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCallHandlingOKBusinessHoursItemSettingsGreetingPrompt = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes GetCallHandlingOKBusinessHoursItemSettingsGreetingPrompt from json.
func (s *GetCallHandlingOKBusinessHoursItemSettingsGreetingPrompt) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallHandlingOKBusinessHoursItemSettingsGreetingPrompt to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallHandlingOKBusinessHoursItemSettingsGreetingPrompt")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallHandlingOKBusinessHoursItemSettingsGreetingPrompt) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallHandlingOKBusinessHoursItemSettingsGreetingPrompt) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallHandlingOKBusinessHoursItemSettingsMusicOnHold) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallHandlingOKBusinessHoursItemSettingsMusicOnHold) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCallHandlingOKBusinessHoursItemSettingsMusicOnHold = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes GetCallHandlingOKBusinessHoursItemSettingsMusicOnHold from json.
func (s *GetCallHandlingOKBusinessHoursItemSettingsMusicOnHold) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallHandlingOKBusinessHoursItemSettingsMusicOnHold to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallHandlingOKBusinessHoursItemSettingsMusicOnHold")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallHandlingOKBusinessHoursItemSettingsMusicOnHold) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallHandlingOKBusinessHoursItemSettingsMusicOnHold) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallHandlingOKBusinessHoursItemSettingsRouting) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallHandlingOKBusinessHoursItemSettingsRouting) encodeFields(e *jx.Encoder) {
	{
		if s.Action.Set {
			e.FieldStart("action")
			s.Action.Encode(e)
		}
	}
	{
		if s.ForwardTo.Set {
			e.FieldStart("forward_to")
			s.ForwardTo.Encode(e)
		}
	}
	{
		if s.Operator.Set {
			e.FieldStart("operator")
			s.Operator.Encode(e)
		}
	}
	{
		if s.ConnectToOperator.Set {
			e.FieldStart("connect_to_operator")
			s.ConnectToOperator.Encode(e)
		}
	}
	{
		if s.AllowCallersCheckVoicemail.Set {
			e.FieldStart("allow_callers_check_voicemail")
			s.AllowCallersCheckVoicemail.Encode(e)
		}
	}
	{
		if s.VoicemailGreeting.Set {
			e.FieldStart("voicemail_greeting")
			s.VoicemailGreeting.Encode(e)
		}
	}
	{
		if s.RequirePress1BeforeConnecting.Set {
			e.FieldStart("require_press_1_before_connecting")
			s.RequirePress1BeforeConnecting.Encode(e)
		}
	}
	{
		if s.OverflowPlayCalleeVoicemailGreeting.Set {
			e.FieldStart("overflow_play_callee_voicemail_greeting")
			s.OverflowPlayCalleeVoicemailGreeting.Encode(e)
		}
	}
	{
		if s.PlayCalleeVoicemailGreeting.Set {
			e.FieldStart("play_callee_voicemail_greeting")
			s.PlayCalleeVoicemailGreeting.Encode(e)
		}
	}
	{
		if s.BusyPlayCalleeVoicemailGreeting.Set {
			e.FieldStart("busy_play_callee_voicemail_greeting")
			s.BusyPlayCalleeVoicemailGreeting.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCallHandlingOKBusinessHoursItemSettingsRouting = [10]string{
	0: "action",
	1: "forward_to",
	2: "operator",
	3: "connect_to_operator",
	4: "allow_callers_check_voicemail",
	5: "voicemail_greeting",
	6: "require_press_1_before_connecting",
	7: "overflow_play_callee_voicemail_greeting",
	8: "play_callee_voicemail_greeting",
	9: "busy_play_callee_voicemail_greeting",
}

// Decode decodes GetCallHandlingOKBusinessHoursItemSettingsRouting from json.
func (s *GetCallHandlingOKBusinessHoursItemSettingsRouting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallHandlingOKBusinessHoursItemSettingsRouting to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "action":
			if err := func() error {
				s.Action.Reset()
				if err := s.Action.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"action\"")
			}
		case "forward_to":
			if err := func() error {
				s.ForwardTo.Reset()
				if err := s.ForwardTo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward_to\"")
			}
		case "operator":
			if err := func() error {
				s.Operator.Reset()
				if err := s.Operator.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"operator\"")
			}
		case "connect_to_operator":
			if err := func() error {
				s.ConnectToOperator.Reset()
				if err := s.ConnectToOperator.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"connect_to_operator\"")
			}
		case "allow_callers_check_voicemail":
			if err := func() error {
				s.AllowCallersCheckVoicemail.Reset()
				if err := s.AllowCallersCheckVoicemail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_callers_check_voicemail\"")
			}
		case "voicemail_greeting":
			if err := func() error {
				s.VoicemailGreeting.Reset()
				if err := s.VoicemailGreeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voicemail_greeting\"")
			}
		case "require_press_1_before_connecting":
			if err := func() error {
				s.RequirePress1BeforeConnecting.Reset()
				if err := s.RequirePress1BeforeConnecting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_press_1_before_connecting\"")
			}
		case "overflow_play_callee_voicemail_greeting":
			if err := func() error {
				s.OverflowPlayCalleeVoicemailGreeting.Reset()
				if err := s.OverflowPlayCalleeVoicemailGreeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overflow_play_callee_voicemail_greeting\"")
			}
		case "play_callee_voicemail_greeting":
			if err := func() error {
				s.PlayCalleeVoicemailGreeting.Reset()
				if err := s.PlayCalleeVoicemailGreeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_callee_voicemail_greeting\"")
			}
		case "busy_play_callee_voicemail_greeting":
			if err := func() error {
				s.BusyPlayCalleeVoicemailGreeting.Reset()
				if err := s.BusyPlayCalleeVoicemailGreeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"busy_play_callee_voicemail_greeting\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallHandlingOKBusinessHoursItemSettingsRouting")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallHandlingOKBusinessHoursItemSettingsRouting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallHandlingOKBusinessHoursItemSettingsRouting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallHandlingOKBusinessHoursItemSettingsRoutingForwardTo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallHandlingOKBusinessHoursItemSettingsRoutingForwardTo) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ExtensionType.Set {
			e.FieldStart("extension_type")
			s.ExtensionType.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.PhoneNumber.Set {
			e.FieldStart("phone_number")
			s.PhoneNumber.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.VoicemailGreeting != nil {
			e.FieldStart("voicemail_greeting")
			s.VoicemailGreeting.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCallHandlingOKBusinessHoursItemSettingsRoutingForwardTo = [8]string{
	0: "display_name",
	1: "extension_id",
	2: "extension_number",
	3: "extension_type",
	4: "id",
	5: "phone_number",
	6: "description",
	7: "voicemail_greeting",
}

// Decode decodes GetCallHandlingOKBusinessHoursItemSettingsRoutingForwardTo from json.
func (s *GetCallHandlingOKBusinessHoursItemSettingsRoutingForwardTo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallHandlingOKBusinessHoursItemSettingsRoutingForwardTo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "extension_type":
			if err := func() error {
				s.ExtensionType.Reset()
				if err := s.ExtensionType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_type\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "voicemail_greeting":
			if err := func() error {
				s.VoicemailGreeting = nil
				var elem GetCallHandlingOKBusinessHoursItemSettingsRoutingForwardToVoicemailGreeting
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.VoicemailGreeting = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voicemail_greeting\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallHandlingOKBusinessHoursItemSettingsRoutingForwardTo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallHandlingOKBusinessHoursItemSettingsRoutingForwardTo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallHandlingOKBusinessHoursItemSettingsRoutingForwardTo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallHandlingOKBusinessHoursItemSettingsRoutingForwardToVoicemailGreeting) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallHandlingOKBusinessHoursItemSettingsRoutingForwardToVoicemailGreeting) encodeFields(e *jx.Encoder) {
}

var jsonFieldsNameOfGetCallHandlingOKBusinessHoursItemSettingsRoutingForwardToVoicemailGreeting = [0]string{}

// Decode decodes GetCallHandlingOKBusinessHoursItemSettingsRoutingForwardToVoicemailGreeting from json.
func (s *GetCallHandlingOKBusinessHoursItemSettingsRoutingForwardToVoicemailGreeting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallHandlingOKBusinessHoursItemSettingsRoutingForwardToVoicemailGreeting to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
	}); err != nil {
		return errors.Wrap(err, "decode GetCallHandlingOKBusinessHoursItemSettingsRoutingForwardToVoicemailGreeting")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallHandlingOKBusinessHoursItemSettingsRoutingForwardToVoicemailGreeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallHandlingOKBusinessHoursItemSettingsRoutingForwardToVoicemailGreeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallHandlingOKBusinessHoursItemSettingsRoutingOperator) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallHandlingOKBusinessHoursItemSettingsRoutingOperator) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ExtensionType.Set {
			e.FieldStart("extension_type")
			s.ExtensionType.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCallHandlingOKBusinessHoursItemSettingsRoutingOperator = [5]string{
	0: "display_name",
	1: "extension_id",
	2: "extension_number",
	3: "extension_type",
	4: "id",
}

// Decode decodes GetCallHandlingOKBusinessHoursItemSettingsRoutingOperator from json.
func (s *GetCallHandlingOKBusinessHoursItemSettingsRoutingOperator) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallHandlingOKBusinessHoursItemSettingsRoutingOperator to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "extension_type":
			if err := func() error {
				s.ExtensionType.Reset()
				if err := s.ExtensionType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_type\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallHandlingOKBusinessHoursItemSettingsRoutingOperator")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallHandlingOKBusinessHoursItemSettingsRoutingOperator) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallHandlingOKBusinessHoursItemSettingsRoutingOperator) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallHandlingOKBusinessHoursItemSettingsRoutingVoicemailGreeting) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallHandlingOKBusinessHoursItemSettingsRoutingVoicemailGreeting) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCallHandlingOKBusinessHoursItemSettingsRoutingVoicemailGreeting = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes GetCallHandlingOKBusinessHoursItemSettingsRoutingVoicemailGreeting from json.
func (s *GetCallHandlingOKBusinessHoursItemSettingsRoutingVoicemailGreeting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallHandlingOKBusinessHoursItemSettingsRoutingVoicemailGreeting to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallHandlingOKBusinessHoursItemSettingsRoutingVoicemailGreeting")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallHandlingOKBusinessHoursItemSettingsRoutingVoicemailGreeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallHandlingOKBusinessHoursItemSettingsRoutingVoicemailGreeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallHandlingOKClosedHoursItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallHandlingOKClosedHoursItem) encodeFields(e *jx.Encoder) {
	{
		if s.Settings.Set {
			e.FieldStart("settings")
			s.Settings.Encode(e)
		}
	}
	{
		if s.SubSettingType.Set {
			e.FieldStart("sub_setting_type")
			s.SubSettingType.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCallHandlingOKClosedHoursItem = [2]string{
	0: "settings",
	1: "sub_setting_type",
}

// Decode decodes GetCallHandlingOKClosedHoursItem from json.
func (s *GetCallHandlingOKClosedHoursItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallHandlingOKClosedHoursItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "settings":
			if err := func() error {
				s.Settings.Reset()
				if err := s.Settings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"settings\"")
			}
		case "sub_setting_type":
			if err := func() error {
				s.SubSettingType.Reset()
				if err := s.SubSettingType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sub_setting_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallHandlingOKClosedHoursItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallHandlingOKClosedHoursItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallHandlingOKClosedHoursItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallHandlingOKClosedHoursItemSettings) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallHandlingOKClosedHoursItemSettings) encodeFields(e *jx.Encoder) {
	{
		if s.AllowCallersCheckVoicemail.Set {
			e.FieldStart("allow_callers_check_voicemail")
			s.AllowCallersCheckVoicemail.Encode(e)
		}
	}
	{
		if s.CallForwardingSettings != nil {
			e.FieldStart("call_forwarding_settings")
			e.ArrStart()
			for _, elem := range s.CallForwardingSettings {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.CallNotAnswerAction.Set {
			e.FieldStart("call_not_answer_action")
			s.CallNotAnswerAction.Encode(e)
		}
	}
	{
		if s.ConnectToOperator.Set {
			e.FieldStart("connect_to_operator")
			s.ConnectToOperator.Encode(e)
		}
	}
	{
		if s.MaxWaitTime.Set {
			e.FieldStart("max_wait_time")
			s.MaxWaitTime.Encode(e)
		}
	}
	{
		if s.RequirePress1BeforeConnecting.Set {
			e.FieldStart("require_press_1_before_connecting")
			s.RequirePress1BeforeConnecting.Encode(e)
		}
	}
	{
		if s.RingMode.Set {
			e.FieldStart("ring_mode")
			s.RingMode.Encode(e)
		}
	}
	{
		if s.Routing.Set {
			e.FieldStart("routing")
			s.Routing.Encode(e)
		}
	}
	{
		if s.BusyRouting.Set {
			e.FieldStart("busy_routing")
			s.BusyRouting.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCallHandlingOKClosedHoursItemSettings = [9]string{
	0: "allow_callers_check_voicemail",
	1: "call_forwarding_settings",
	2: "call_not_answer_action",
	3: "connect_to_operator",
	4: "max_wait_time",
	5: "require_press_1_before_connecting",
	6: "ring_mode",
	7: "routing",
	8: "busy_routing",
}

// Decode decodes GetCallHandlingOKClosedHoursItemSettings from json.
func (s *GetCallHandlingOKClosedHoursItemSettings) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallHandlingOKClosedHoursItemSettings to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allow_callers_check_voicemail":
			if err := func() error {
				s.AllowCallersCheckVoicemail.Reset()
				if err := s.AllowCallersCheckVoicemail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_callers_check_voicemail\"")
			}
		case "call_forwarding_settings":
			if err := func() error {
				s.CallForwardingSettings = make([]GetCallHandlingOKClosedHoursItemSettingsCallForwardingSettingsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetCallHandlingOKClosedHoursItemSettingsCallForwardingSettingsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CallForwardingSettings = append(s.CallForwardingSettings, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_forwarding_settings\"")
			}
		case "call_not_answer_action":
			if err := func() error {
				s.CallNotAnswerAction.Reset()
				if err := s.CallNotAnswerAction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_not_answer_action\"")
			}
		case "connect_to_operator":
			if err := func() error {
				s.ConnectToOperator.Reset()
				if err := s.ConnectToOperator.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"connect_to_operator\"")
			}
		case "max_wait_time":
			if err := func() error {
				s.MaxWaitTime.Reset()
				if err := s.MaxWaitTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"max_wait_time\"")
			}
		case "require_press_1_before_connecting":
			if err := func() error {
				s.RequirePress1BeforeConnecting.Reset()
				if err := s.RequirePress1BeforeConnecting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_press_1_before_connecting\"")
			}
		case "ring_mode":
			if err := func() error {
				s.RingMode.Reset()
				if err := s.RingMode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ring_mode\"")
			}
		case "routing":
			if err := func() error {
				s.Routing.Reset()
				if err := s.Routing.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"routing\"")
			}
		case "busy_routing":
			if err := func() error {
				s.BusyRouting.Reset()
				if err := s.BusyRouting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"busy_routing\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallHandlingOKClosedHoursItemSettings")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallHandlingOKClosedHoursItemSettings) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallHandlingOKClosedHoursItemSettings) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallHandlingOKClosedHoursItemSettingsBusyRouting) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallHandlingOKClosedHoursItemSettingsBusyRouting) encodeFields(e *jx.Encoder) {
	{
		if s.Action.Set {
			e.FieldStart("action")
			s.Action.Encode(e)
		}
	}
	{
		if s.ForwardTo.Set {
			e.FieldStart("forward_to")
			s.ForwardTo.Encode(e)
		}
	}
	{
		if s.Operator.Set {
			e.FieldStart("operator")
			s.Operator.Encode(e)
		}
	}
	{
		if s.ConnectToOperator.Set {
			e.FieldStart("connect_to_operator")
			s.ConnectToOperator.Encode(e)
		}
	}
	{
		if s.AllowCallersCheckVoicemail.Set {
			e.FieldStart("allow_callers_check_voicemail")
			s.AllowCallersCheckVoicemail.Encode(e)
		}
	}
	{
		if s.VoicemailGreeting.Set {
			e.FieldStart("voicemail_greeting")
			s.VoicemailGreeting.Encode(e)
		}
	}
	{
		if s.RequirePress1BeforeConnecting.Set {
			e.FieldStart("require_press_1_before_connecting")
			s.RequirePress1BeforeConnecting.Encode(e)
		}
	}
	{
		if s.OverflowPlayCalleeVoicemailGreeting.Set {
			e.FieldStart("overflow_play_callee_voicemail_greeting")
			s.OverflowPlayCalleeVoicemailGreeting.Encode(e)
		}
	}
	{
		if s.PlayCalleeVoicemailGreeting.Set {
			e.FieldStart("play_callee_voicemail_greeting")
			s.PlayCalleeVoicemailGreeting.Encode(e)
		}
	}
	{
		if s.BusyPlayCalleeVoicemailGreeting.Set {
			e.FieldStart("busy_play_callee_voicemail_greeting")
			s.BusyPlayCalleeVoicemailGreeting.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCallHandlingOKClosedHoursItemSettingsBusyRouting = [10]string{
	0: "action",
	1: "forward_to",
	2: "operator",
	3: "connect_to_operator",
	4: "allow_callers_check_voicemail",
	5: "voicemail_greeting",
	6: "require_press_1_before_connecting",
	7: "overflow_play_callee_voicemail_greeting",
	8: "play_callee_voicemail_greeting",
	9: "busy_play_callee_voicemail_greeting",
}

// Decode decodes GetCallHandlingOKClosedHoursItemSettingsBusyRouting from json.
func (s *GetCallHandlingOKClosedHoursItemSettingsBusyRouting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallHandlingOKClosedHoursItemSettingsBusyRouting to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "action":
			if err := func() error {
				s.Action.Reset()
				if err := s.Action.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"action\"")
			}
		case "forward_to":
			if err := func() error {
				s.ForwardTo.Reset()
				if err := s.ForwardTo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward_to\"")
			}
		case "operator":
			if err := func() error {
				s.Operator.Reset()
				if err := s.Operator.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"operator\"")
			}
		case "connect_to_operator":
			if err := func() error {
				s.ConnectToOperator.Reset()
				if err := s.ConnectToOperator.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"connect_to_operator\"")
			}
		case "allow_callers_check_voicemail":
			if err := func() error {
				s.AllowCallersCheckVoicemail.Reset()
				if err := s.AllowCallersCheckVoicemail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_callers_check_voicemail\"")
			}
		case "voicemail_greeting":
			if err := func() error {
				s.VoicemailGreeting.Reset()
				if err := s.VoicemailGreeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voicemail_greeting\"")
			}
		case "require_press_1_before_connecting":
			if err := func() error {
				s.RequirePress1BeforeConnecting.Reset()
				if err := s.RequirePress1BeforeConnecting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_press_1_before_connecting\"")
			}
		case "overflow_play_callee_voicemail_greeting":
			if err := func() error {
				s.OverflowPlayCalleeVoicemailGreeting.Reset()
				if err := s.OverflowPlayCalleeVoicemailGreeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overflow_play_callee_voicemail_greeting\"")
			}
		case "play_callee_voicemail_greeting":
			if err := func() error {
				s.PlayCalleeVoicemailGreeting.Reset()
				if err := s.PlayCalleeVoicemailGreeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_callee_voicemail_greeting\"")
			}
		case "busy_play_callee_voicemail_greeting":
			if err := func() error {
				s.BusyPlayCalleeVoicemailGreeting.Reset()
				if err := s.BusyPlayCalleeVoicemailGreeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"busy_play_callee_voicemail_greeting\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallHandlingOKClosedHoursItemSettingsBusyRouting")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallHandlingOKClosedHoursItemSettingsBusyRouting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallHandlingOKClosedHoursItemSettingsBusyRouting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallHandlingOKClosedHoursItemSettingsBusyRoutingForwardTo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallHandlingOKClosedHoursItemSettingsBusyRoutingForwardTo) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ExtensionType.Set {
			e.FieldStart("extension_type")
			s.ExtensionType.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.PhoneNumber.Set {
			e.FieldStart("phone_number")
			s.PhoneNumber.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.VoicemailGreeting != nil {
			e.FieldStart("voicemail_greeting")
			s.VoicemailGreeting.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCallHandlingOKClosedHoursItemSettingsBusyRoutingForwardTo = [8]string{
	0: "display_name",
	1: "extension_id",
	2: "extension_number",
	3: "extension_type",
	4: "id",
	5: "phone_number",
	6: "description",
	7: "voicemail_greeting",
}

// Decode decodes GetCallHandlingOKClosedHoursItemSettingsBusyRoutingForwardTo from json.
func (s *GetCallHandlingOKClosedHoursItemSettingsBusyRoutingForwardTo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallHandlingOKClosedHoursItemSettingsBusyRoutingForwardTo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "extension_type":
			if err := func() error {
				s.ExtensionType.Reset()
				if err := s.ExtensionType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_type\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "voicemail_greeting":
			if err := func() error {
				s.VoicemailGreeting = nil
				var elem GetCallHandlingOKClosedHoursItemSettingsBusyRoutingForwardToVoicemailGreeting
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.VoicemailGreeting = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voicemail_greeting\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallHandlingOKClosedHoursItemSettingsBusyRoutingForwardTo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallHandlingOKClosedHoursItemSettingsBusyRoutingForwardTo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallHandlingOKClosedHoursItemSettingsBusyRoutingForwardTo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallHandlingOKClosedHoursItemSettingsBusyRoutingForwardToVoicemailGreeting) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallHandlingOKClosedHoursItemSettingsBusyRoutingForwardToVoicemailGreeting) encodeFields(e *jx.Encoder) {
}

var jsonFieldsNameOfGetCallHandlingOKClosedHoursItemSettingsBusyRoutingForwardToVoicemailGreeting = [0]string{}

// Decode decodes GetCallHandlingOKClosedHoursItemSettingsBusyRoutingForwardToVoicemailGreeting from json.
func (s *GetCallHandlingOKClosedHoursItemSettingsBusyRoutingForwardToVoicemailGreeting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallHandlingOKClosedHoursItemSettingsBusyRoutingForwardToVoicemailGreeting to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
	}); err != nil {
		return errors.Wrap(err, "decode GetCallHandlingOKClosedHoursItemSettingsBusyRoutingForwardToVoicemailGreeting")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallHandlingOKClosedHoursItemSettingsBusyRoutingForwardToVoicemailGreeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallHandlingOKClosedHoursItemSettingsBusyRoutingForwardToVoicemailGreeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallHandlingOKClosedHoursItemSettingsBusyRoutingOperator) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallHandlingOKClosedHoursItemSettingsBusyRoutingOperator) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ExtensionType.Set {
			e.FieldStart("extension_type")
			s.ExtensionType.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCallHandlingOKClosedHoursItemSettingsBusyRoutingOperator = [5]string{
	0: "display_name",
	1: "extension_id",
	2: "extension_number",
	3: "extension_type",
	4: "id",
}

// Decode decodes GetCallHandlingOKClosedHoursItemSettingsBusyRoutingOperator from json.
func (s *GetCallHandlingOKClosedHoursItemSettingsBusyRoutingOperator) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallHandlingOKClosedHoursItemSettingsBusyRoutingOperator to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "extension_type":
			if err := func() error {
				s.ExtensionType.Reset()
				if err := s.ExtensionType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_type\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallHandlingOKClosedHoursItemSettingsBusyRoutingOperator")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallHandlingOKClosedHoursItemSettingsBusyRoutingOperator) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallHandlingOKClosedHoursItemSettingsBusyRoutingOperator) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallHandlingOKClosedHoursItemSettingsBusyRoutingVoicemailGreeting) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallHandlingOKClosedHoursItemSettingsBusyRoutingVoicemailGreeting) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCallHandlingOKClosedHoursItemSettingsBusyRoutingVoicemailGreeting = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes GetCallHandlingOKClosedHoursItemSettingsBusyRoutingVoicemailGreeting from json.
func (s *GetCallHandlingOKClosedHoursItemSettingsBusyRoutingVoicemailGreeting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallHandlingOKClosedHoursItemSettingsBusyRoutingVoicemailGreeting to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallHandlingOKClosedHoursItemSettingsBusyRoutingVoicemailGreeting")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallHandlingOKClosedHoursItemSettingsBusyRoutingVoicemailGreeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallHandlingOKClosedHoursItemSettingsBusyRoutingVoicemailGreeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallHandlingOKClosedHoursItemSettingsCallForwardingSettingsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallHandlingOKClosedHoursItemSettingsCallForwardingSettingsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.PhoneNumber.Set {
			e.FieldStart("phone_number")
			s.PhoneNumber.Encode(e)
		}
	}
	{
		if s.ExternalContact.Set {
			e.FieldStart("external_contact")
			s.ExternalContact.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCallHandlingOKClosedHoursItemSettingsCallForwardingSettingsItem = [5]string{
	0: "description",
	1: "enable",
	2: "id",
	3: "phone_number",
	4: "external_contact",
}

// Decode decodes GetCallHandlingOKClosedHoursItemSettingsCallForwardingSettingsItem from json.
func (s *GetCallHandlingOKClosedHoursItemSettingsCallForwardingSettingsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallHandlingOKClosedHoursItemSettingsCallForwardingSettingsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		case "external_contact":
			if err := func() error {
				s.ExternalContact.Reset()
				if err := s.ExternalContact.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"external_contact\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallHandlingOKClosedHoursItemSettingsCallForwardingSettingsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallHandlingOKClosedHoursItemSettingsCallForwardingSettingsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallHandlingOKClosedHoursItemSettingsCallForwardingSettingsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallHandlingOKClosedHoursItemSettingsCallForwardingSettingsItemExternalContact) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallHandlingOKClosedHoursItemSettingsCallForwardingSettingsItemExternalContact) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Email.Set {
			e.FieldStart("email")
			s.Email.Encode(e)
		}
	}
	{
		if s.ExternalContactID.Set {
			e.FieldStart("external_contact_id")
			s.ExternalContactID.Encode(e)
		}
	}
	{
		if s.PhoneNumbers != nil {
			e.FieldStart("phone_numbers")
			e.ArrStart()
			for _, elem := range s.PhoneNumbers {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGetCallHandlingOKClosedHoursItemSettingsCallForwardingSettingsItemExternalContact = [4]string{
	0: "name",
	1: "email",
	2: "external_contact_id",
	3: "phone_numbers",
}

// Decode decodes GetCallHandlingOKClosedHoursItemSettingsCallForwardingSettingsItemExternalContact from json.
func (s *GetCallHandlingOKClosedHoursItemSettingsCallForwardingSettingsItemExternalContact) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallHandlingOKClosedHoursItemSettingsCallForwardingSettingsItemExternalContact to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "email":
			if err := func() error {
				s.Email.Reset()
				if err := s.Email.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		case "external_contact_id":
			if err := func() error {
				s.ExternalContactID.Reset()
				if err := s.ExternalContactID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"external_contact_id\"")
			}
		case "phone_numbers":
			if err := func() error {
				s.PhoneNumbers = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.PhoneNumbers = append(s.PhoneNumbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_numbers\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallHandlingOKClosedHoursItemSettingsCallForwardingSettingsItemExternalContact")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallHandlingOKClosedHoursItemSettingsCallForwardingSettingsItemExternalContact) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallHandlingOKClosedHoursItemSettingsCallForwardingSettingsItemExternalContact) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallHandlingOKClosedHoursItemSettingsRouting) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallHandlingOKClosedHoursItemSettingsRouting) encodeFields(e *jx.Encoder) {
	{
		if s.Action.Set {
			e.FieldStart("action")
			s.Action.Encode(e)
		}
	}
	{
		if s.ForwardTo.Set {
			e.FieldStart("forward_to")
			s.ForwardTo.Encode(e)
		}
	}
	{
		if s.Operator.Set {
			e.FieldStart("operator")
			s.Operator.Encode(e)
		}
	}
	{
		if s.ConnectToOperator.Set {
			e.FieldStart("connect_to_operator")
			s.ConnectToOperator.Encode(e)
		}
	}
	{
		if s.AllowCallersCheckVoicemail.Set {
			e.FieldStart("allow_callers_check_voicemail")
			s.AllowCallersCheckVoicemail.Encode(e)
		}
	}
	{
		if s.VoicemailGreeting.Set {
			e.FieldStart("voicemail_greeting")
			s.VoicemailGreeting.Encode(e)
		}
	}
	{
		if s.RequirePress1BeforeConnecting.Set {
			e.FieldStart("require_press_1_before_connecting")
			s.RequirePress1BeforeConnecting.Encode(e)
		}
	}
	{
		if s.OverflowPlayCalleeVoicemailGreeting.Set {
			e.FieldStart("overflow_play_callee_voicemail_greeting")
			s.OverflowPlayCalleeVoicemailGreeting.Encode(e)
		}
	}
	{
		if s.PlayCalleeVoicemailGreeting.Set {
			e.FieldStart("play_callee_voicemail_greeting")
			s.PlayCalleeVoicemailGreeting.Encode(e)
		}
	}
	{
		if s.BusyPlayCalleeVoicemailGreeting.Set {
			e.FieldStart("busy_play_callee_voicemail_greeting")
			s.BusyPlayCalleeVoicemailGreeting.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCallHandlingOKClosedHoursItemSettingsRouting = [10]string{
	0: "action",
	1: "forward_to",
	2: "operator",
	3: "connect_to_operator",
	4: "allow_callers_check_voicemail",
	5: "voicemail_greeting",
	6: "require_press_1_before_connecting",
	7: "overflow_play_callee_voicemail_greeting",
	8: "play_callee_voicemail_greeting",
	9: "busy_play_callee_voicemail_greeting",
}

// Decode decodes GetCallHandlingOKClosedHoursItemSettingsRouting from json.
func (s *GetCallHandlingOKClosedHoursItemSettingsRouting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallHandlingOKClosedHoursItemSettingsRouting to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "action":
			if err := func() error {
				s.Action.Reset()
				if err := s.Action.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"action\"")
			}
		case "forward_to":
			if err := func() error {
				s.ForwardTo.Reset()
				if err := s.ForwardTo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward_to\"")
			}
		case "operator":
			if err := func() error {
				s.Operator.Reset()
				if err := s.Operator.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"operator\"")
			}
		case "connect_to_operator":
			if err := func() error {
				s.ConnectToOperator.Reset()
				if err := s.ConnectToOperator.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"connect_to_operator\"")
			}
		case "allow_callers_check_voicemail":
			if err := func() error {
				s.AllowCallersCheckVoicemail.Reset()
				if err := s.AllowCallersCheckVoicemail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_callers_check_voicemail\"")
			}
		case "voicemail_greeting":
			if err := func() error {
				s.VoicemailGreeting.Reset()
				if err := s.VoicemailGreeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voicemail_greeting\"")
			}
		case "require_press_1_before_connecting":
			if err := func() error {
				s.RequirePress1BeforeConnecting.Reset()
				if err := s.RequirePress1BeforeConnecting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_press_1_before_connecting\"")
			}
		case "overflow_play_callee_voicemail_greeting":
			if err := func() error {
				s.OverflowPlayCalleeVoicemailGreeting.Reset()
				if err := s.OverflowPlayCalleeVoicemailGreeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overflow_play_callee_voicemail_greeting\"")
			}
		case "play_callee_voicemail_greeting":
			if err := func() error {
				s.PlayCalleeVoicemailGreeting.Reset()
				if err := s.PlayCalleeVoicemailGreeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_callee_voicemail_greeting\"")
			}
		case "busy_play_callee_voicemail_greeting":
			if err := func() error {
				s.BusyPlayCalleeVoicemailGreeting.Reset()
				if err := s.BusyPlayCalleeVoicemailGreeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"busy_play_callee_voicemail_greeting\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallHandlingOKClosedHoursItemSettingsRouting")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallHandlingOKClosedHoursItemSettingsRouting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallHandlingOKClosedHoursItemSettingsRouting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallHandlingOKClosedHoursItemSettingsRoutingForwardTo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallHandlingOKClosedHoursItemSettingsRoutingForwardTo) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ExtensionType.Set {
			e.FieldStart("extension_type")
			s.ExtensionType.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.PhoneNumber.Set {
			e.FieldStart("phone_number")
			s.PhoneNumber.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.VoicemailGreeting != nil {
			e.FieldStart("voicemail_greeting")
			s.VoicemailGreeting.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCallHandlingOKClosedHoursItemSettingsRoutingForwardTo = [8]string{
	0: "display_name",
	1: "extension_id",
	2: "extension_number",
	3: "extension_type",
	4: "id",
	5: "phone_number",
	6: "description",
	7: "voicemail_greeting",
}

// Decode decodes GetCallHandlingOKClosedHoursItemSettingsRoutingForwardTo from json.
func (s *GetCallHandlingOKClosedHoursItemSettingsRoutingForwardTo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallHandlingOKClosedHoursItemSettingsRoutingForwardTo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "extension_type":
			if err := func() error {
				s.ExtensionType.Reset()
				if err := s.ExtensionType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_type\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "voicemail_greeting":
			if err := func() error {
				s.VoicemailGreeting = nil
				var elem GetCallHandlingOKClosedHoursItemSettingsRoutingForwardToVoicemailGreeting
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.VoicemailGreeting = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voicemail_greeting\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallHandlingOKClosedHoursItemSettingsRoutingForwardTo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallHandlingOKClosedHoursItemSettingsRoutingForwardTo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallHandlingOKClosedHoursItemSettingsRoutingForwardTo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallHandlingOKClosedHoursItemSettingsRoutingForwardToVoicemailGreeting) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallHandlingOKClosedHoursItemSettingsRoutingForwardToVoicemailGreeting) encodeFields(e *jx.Encoder) {
}

var jsonFieldsNameOfGetCallHandlingOKClosedHoursItemSettingsRoutingForwardToVoicemailGreeting = [0]string{}

// Decode decodes GetCallHandlingOKClosedHoursItemSettingsRoutingForwardToVoicemailGreeting from json.
func (s *GetCallHandlingOKClosedHoursItemSettingsRoutingForwardToVoicemailGreeting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallHandlingOKClosedHoursItemSettingsRoutingForwardToVoicemailGreeting to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
	}); err != nil {
		return errors.Wrap(err, "decode GetCallHandlingOKClosedHoursItemSettingsRoutingForwardToVoicemailGreeting")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallHandlingOKClosedHoursItemSettingsRoutingForwardToVoicemailGreeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallHandlingOKClosedHoursItemSettingsRoutingForwardToVoicemailGreeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallHandlingOKClosedHoursItemSettingsRoutingOperator) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallHandlingOKClosedHoursItemSettingsRoutingOperator) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ExtensionType.Set {
			e.FieldStart("extension_type")
			s.ExtensionType.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCallHandlingOKClosedHoursItemSettingsRoutingOperator = [5]string{
	0: "display_name",
	1: "extension_id",
	2: "extension_number",
	3: "extension_type",
	4: "id",
}

// Decode decodes GetCallHandlingOKClosedHoursItemSettingsRoutingOperator from json.
func (s *GetCallHandlingOKClosedHoursItemSettingsRoutingOperator) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallHandlingOKClosedHoursItemSettingsRoutingOperator to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "extension_type":
			if err := func() error {
				s.ExtensionType.Reset()
				if err := s.ExtensionType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_type\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallHandlingOKClosedHoursItemSettingsRoutingOperator")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallHandlingOKClosedHoursItemSettingsRoutingOperator) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallHandlingOKClosedHoursItemSettingsRoutingOperator) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallHandlingOKClosedHoursItemSettingsRoutingVoicemailGreeting) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallHandlingOKClosedHoursItemSettingsRoutingVoicemailGreeting) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCallHandlingOKClosedHoursItemSettingsRoutingVoicemailGreeting = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes GetCallHandlingOKClosedHoursItemSettingsRoutingVoicemailGreeting from json.
func (s *GetCallHandlingOKClosedHoursItemSettingsRoutingVoicemailGreeting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallHandlingOKClosedHoursItemSettingsRoutingVoicemailGreeting to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallHandlingOKClosedHoursItemSettingsRoutingVoicemailGreeting")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallHandlingOKClosedHoursItemSettingsRoutingVoicemailGreeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallHandlingOKClosedHoursItemSettingsRoutingVoicemailGreeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallHandlingOKHolidayHoursItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallHandlingOKHolidayHoursItem) encodeFields(e *jx.Encoder) {
	{
		if s.Details != nil {
			e.FieldStart("details")
			e.ArrStart()
			for _, elem := range s.Details {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.HolidayID.Set {
			e.FieldStart("holiday_id")
			s.HolidayID.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCallHandlingOKHolidayHoursItem = [2]string{
	0: "details",
	1: "holiday_id",
}

// Decode decodes GetCallHandlingOKHolidayHoursItem from json.
func (s *GetCallHandlingOKHolidayHoursItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallHandlingOKHolidayHoursItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "details":
			if err := func() error {
				s.Details = make([]GetCallHandlingOKHolidayHoursItemDetailsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetCallHandlingOKHolidayHoursItemDetailsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Details = append(s.Details, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"details\"")
			}
		case "holiday_id":
			if err := func() error {
				s.HolidayID.Reset()
				if err := s.HolidayID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holiday_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallHandlingOKHolidayHoursItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallHandlingOKHolidayHoursItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallHandlingOKHolidayHoursItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallHandlingOKHolidayHoursItemDetailsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallHandlingOKHolidayHoursItemDetailsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Settings.Set {
			e.FieldStart("settings")
			s.Settings.Encode(e)
		}
	}
	{
		if s.SubSettingType.Set {
			e.FieldStart("sub_setting_type")
			s.SubSettingType.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCallHandlingOKHolidayHoursItemDetailsItem = [2]string{
	0: "settings",
	1: "sub_setting_type",
}

// Decode decodes GetCallHandlingOKHolidayHoursItemDetailsItem from json.
func (s *GetCallHandlingOKHolidayHoursItemDetailsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallHandlingOKHolidayHoursItemDetailsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "settings":
			if err := func() error {
				s.Settings.Reset()
				if err := s.Settings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"settings\"")
			}
		case "sub_setting_type":
			if err := func() error {
				s.SubSettingType.Reset()
				if err := s.SubSettingType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sub_setting_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallHandlingOKHolidayHoursItemDetailsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallHandlingOKHolidayHoursItemDetailsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallHandlingOKHolidayHoursItemDetailsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallHandlingOKHolidayHoursItemDetailsItemSettings) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallHandlingOKHolidayHoursItemDetailsItemSettings) encodeFields(e *jx.Encoder) {
	{
		if s.AllowCallersCheckVoicemail.Set {
			e.FieldStart("allow_callers_check_voicemail")
			s.AllowCallersCheckVoicemail.Encode(e)
		}
	}
	{
		if s.CallForwardingSettings != nil {
			e.FieldStart("call_forwarding_settings")
			e.ArrStart()
			for _, elem := range s.CallForwardingSettings {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.CallNotAnswerAction.Set {
			e.FieldStart("call_not_answer_action")
			s.CallNotAnswerAction.Encode(e)
		}
	}
	{
		if s.ConnectToOperator.Set {
			e.FieldStart("connect_to_operator")
			s.ConnectToOperator.Encode(e)
		}
	}
	{
		if s.From.Set {
			e.FieldStart("from")
			s.From.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.MaxWaitTime.Set {
			e.FieldStart("max_wait_time")
			s.MaxWaitTime.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.RequirePress1BeforeConnecting.Set {
			e.FieldStart("require_press_1_before_connecting")
			s.RequirePress1BeforeConnecting.Encode(e)
		}
	}
	{
		if s.RingMode.Set {
			e.FieldStart("ring_mode")
			s.RingMode.Encode(e)
		}
	}
	{
		if s.Routing.Set {
			e.FieldStart("routing")
			s.Routing.Encode(e)
		}
	}
	{
		if s.To.Set {
			e.FieldStart("to")
			s.To.Encode(e, json.EncodeDateTime)
		}
	}
}

var jsonFieldsNameOfGetCallHandlingOKHolidayHoursItemDetailsItemSettings = [11]string{
	0:  "allow_callers_check_voicemail",
	1:  "call_forwarding_settings",
	2:  "call_not_answer_action",
	3:  "connect_to_operator",
	4:  "from",
	5:  "max_wait_time",
	6:  "name",
	7:  "require_press_1_before_connecting",
	8:  "ring_mode",
	9:  "routing",
	10: "to",
}

// Decode decodes GetCallHandlingOKHolidayHoursItemDetailsItemSettings from json.
func (s *GetCallHandlingOKHolidayHoursItemDetailsItemSettings) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallHandlingOKHolidayHoursItemDetailsItemSettings to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allow_callers_check_voicemail":
			if err := func() error {
				s.AllowCallersCheckVoicemail.Reset()
				if err := s.AllowCallersCheckVoicemail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_callers_check_voicemail\"")
			}
		case "call_forwarding_settings":
			if err := func() error {
				s.CallForwardingSettings = make([]GetCallHandlingOKHolidayHoursItemDetailsItemSettingsCallForwardingSettingsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetCallHandlingOKHolidayHoursItemDetailsItemSettingsCallForwardingSettingsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CallForwardingSettings = append(s.CallForwardingSettings, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_forwarding_settings\"")
			}
		case "call_not_answer_action":
			if err := func() error {
				s.CallNotAnswerAction.Reset()
				if err := s.CallNotAnswerAction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_not_answer_action\"")
			}
		case "connect_to_operator":
			if err := func() error {
				s.ConnectToOperator.Reset()
				if err := s.ConnectToOperator.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"connect_to_operator\"")
			}
		case "from":
			if err := func() error {
				s.From.Reset()
				if err := s.From.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"from\"")
			}
		case "max_wait_time":
			if err := func() error {
				s.MaxWaitTime.Reset()
				if err := s.MaxWaitTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"max_wait_time\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "require_press_1_before_connecting":
			if err := func() error {
				s.RequirePress1BeforeConnecting.Reset()
				if err := s.RequirePress1BeforeConnecting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_press_1_before_connecting\"")
			}
		case "ring_mode":
			if err := func() error {
				s.RingMode.Reset()
				if err := s.RingMode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ring_mode\"")
			}
		case "routing":
			if err := func() error {
				s.Routing.Reset()
				if err := s.Routing.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"routing\"")
			}
		case "to":
			if err := func() error {
				s.To.Reset()
				if err := s.To.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"to\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallHandlingOKHolidayHoursItemDetailsItemSettings")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallHandlingOKHolidayHoursItemDetailsItemSettings) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallHandlingOKHolidayHoursItemDetailsItemSettings) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallHandlingOKHolidayHoursItemDetailsItemSettingsCallForwardingSettingsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallHandlingOKHolidayHoursItemDetailsItemSettingsCallForwardingSettingsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.PhoneNumber.Set {
			e.FieldStart("phone_number")
			s.PhoneNumber.Encode(e)
		}
	}
	{
		if s.ExternalContact.Set {
			e.FieldStart("external_contact")
			s.ExternalContact.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCallHandlingOKHolidayHoursItemDetailsItemSettingsCallForwardingSettingsItem = [5]string{
	0: "description",
	1: "enable",
	2: "id",
	3: "phone_number",
	4: "external_contact",
}

// Decode decodes GetCallHandlingOKHolidayHoursItemDetailsItemSettingsCallForwardingSettingsItem from json.
func (s *GetCallHandlingOKHolidayHoursItemDetailsItemSettingsCallForwardingSettingsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallHandlingOKHolidayHoursItemDetailsItemSettingsCallForwardingSettingsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		case "external_contact":
			if err := func() error {
				s.ExternalContact.Reset()
				if err := s.ExternalContact.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"external_contact\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallHandlingOKHolidayHoursItemDetailsItemSettingsCallForwardingSettingsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallHandlingOKHolidayHoursItemDetailsItemSettingsCallForwardingSettingsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallHandlingOKHolidayHoursItemDetailsItemSettingsCallForwardingSettingsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallHandlingOKHolidayHoursItemDetailsItemSettingsCallForwardingSettingsItemExternalContact) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallHandlingOKHolidayHoursItemDetailsItemSettingsCallForwardingSettingsItemExternalContact) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Email.Set {
			e.FieldStart("email")
			s.Email.Encode(e)
		}
	}
	{
		if s.ExternalContactID.Set {
			e.FieldStart("external_contact_id")
			s.ExternalContactID.Encode(e)
		}
	}
	{
		if s.PhoneNumbers != nil {
			e.FieldStart("phone_numbers")
			e.ArrStart()
			for _, elem := range s.PhoneNumbers {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGetCallHandlingOKHolidayHoursItemDetailsItemSettingsCallForwardingSettingsItemExternalContact = [4]string{
	0: "name",
	1: "email",
	2: "external_contact_id",
	3: "phone_numbers",
}

// Decode decodes GetCallHandlingOKHolidayHoursItemDetailsItemSettingsCallForwardingSettingsItemExternalContact from json.
func (s *GetCallHandlingOKHolidayHoursItemDetailsItemSettingsCallForwardingSettingsItemExternalContact) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallHandlingOKHolidayHoursItemDetailsItemSettingsCallForwardingSettingsItemExternalContact to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "email":
			if err := func() error {
				s.Email.Reset()
				if err := s.Email.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		case "external_contact_id":
			if err := func() error {
				s.ExternalContactID.Reset()
				if err := s.ExternalContactID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"external_contact_id\"")
			}
		case "phone_numbers":
			if err := func() error {
				s.PhoneNumbers = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.PhoneNumbers = append(s.PhoneNumbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_numbers\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallHandlingOKHolidayHoursItemDetailsItemSettingsCallForwardingSettingsItemExternalContact")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallHandlingOKHolidayHoursItemDetailsItemSettingsCallForwardingSettingsItemExternalContact) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallHandlingOKHolidayHoursItemDetailsItemSettingsCallForwardingSettingsItemExternalContact) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRouting) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRouting) encodeFields(e *jx.Encoder) {
	{
		if s.Action.Set {
			e.FieldStart("action")
			s.Action.Encode(e)
		}
	}
	{
		if s.ForwardTo.Set {
			e.FieldStart("forward_to")
			s.ForwardTo.Encode(e)
		}
	}
	{
		if s.Operator.Set {
			e.FieldStart("operator")
			s.Operator.Encode(e)
		}
	}
	{
		if s.ConnectToOperator.Set {
			e.FieldStart("connect_to_operator")
			s.ConnectToOperator.Encode(e)
		}
	}
	{
		if s.AllowCallersCheckVoicemail.Set {
			e.FieldStart("allow_callers_check_voicemail")
			s.AllowCallersCheckVoicemail.Encode(e)
		}
	}
	{
		if s.VoicemailGreeting.Set {
			e.FieldStart("voicemail_greeting")
			s.VoicemailGreeting.Encode(e)
		}
	}
	{
		if s.RequirePress1BeforeConnecting.Set {
			e.FieldStart("require_press_1_before_connecting")
			s.RequirePress1BeforeConnecting.Encode(e)
		}
	}
	{
		if s.OverflowPlayCalleeVoicemailGreeting.Set {
			e.FieldStart("overflow_play_callee_voicemail_greeting")
			s.OverflowPlayCalleeVoicemailGreeting.Encode(e)
		}
	}
	{
		if s.PlayCalleeVoicemailGreeting.Set {
			e.FieldStart("play_callee_voicemail_greeting")
			s.PlayCalleeVoicemailGreeting.Encode(e)
		}
	}
	{
		if s.BusyPlayCalleeVoicemailGreeting.Set {
			e.FieldStart("busy_play_callee_voicemail_greeting")
			s.BusyPlayCalleeVoicemailGreeting.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCallHandlingOKHolidayHoursItemDetailsItemSettingsRouting = [10]string{
	0: "action",
	1: "forward_to",
	2: "operator",
	3: "connect_to_operator",
	4: "allow_callers_check_voicemail",
	5: "voicemail_greeting",
	6: "require_press_1_before_connecting",
	7: "overflow_play_callee_voicemail_greeting",
	8: "play_callee_voicemail_greeting",
	9: "busy_play_callee_voicemail_greeting",
}

// Decode decodes GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRouting from json.
func (s *GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRouting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRouting to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "action":
			if err := func() error {
				s.Action.Reset()
				if err := s.Action.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"action\"")
			}
		case "forward_to":
			if err := func() error {
				s.ForwardTo.Reset()
				if err := s.ForwardTo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward_to\"")
			}
		case "operator":
			if err := func() error {
				s.Operator.Reset()
				if err := s.Operator.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"operator\"")
			}
		case "connect_to_operator":
			if err := func() error {
				s.ConnectToOperator.Reset()
				if err := s.ConnectToOperator.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"connect_to_operator\"")
			}
		case "allow_callers_check_voicemail":
			if err := func() error {
				s.AllowCallersCheckVoicemail.Reset()
				if err := s.AllowCallersCheckVoicemail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_callers_check_voicemail\"")
			}
		case "voicemail_greeting":
			if err := func() error {
				s.VoicemailGreeting.Reset()
				if err := s.VoicemailGreeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voicemail_greeting\"")
			}
		case "require_press_1_before_connecting":
			if err := func() error {
				s.RequirePress1BeforeConnecting.Reset()
				if err := s.RequirePress1BeforeConnecting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_press_1_before_connecting\"")
			}
		case "overflow_play_callee_voicemail_greeting":
			if err := func() error {
				s.OverflowPlayCalleeVoicemailGreeting.Reset()
				if err := s.OverflowPlayCalleeVoicemailGreeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overflow_play_callee_voicemail_greeting\"")
			}
		case "play_callee_voicemail_greeting":
			if err := func() error {
				s.PlayCalleeVoicemailGreeting.Reset()
				if err := s.PlayCalleeVoicemailGreeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_callee_voicemail_greeting\"")
			}
		case "busy_play_callee_voicemail_greeting":
			if err := func() error {
				s.BusyPlayCalleeVoicemailGreeting.Reset()
				if err := s.BusyPlayCalleeVoicemailGreeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"busy_play_callee_voicemail_greeting\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRouting")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRouting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRouting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingForwardTo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingForwardTo) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ExtensionType.Set {
			e.FieldStart("extension_type")
			s.ExtensionType.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.PhoneNumber.Set {
			e.FieldStart("phone_number")
			s.PhoneNumber.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.VoicemailGreeting != nil {
			e.FieldStart("voicemail_greeting")
			s.VoicemailGreeting.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingForwardTo = [8]string{
	0: "display_name",
	1: "extension_id",
	2: "extension_number",
	3: "extension_type",
	4: "id",
	5: "phone_number",
	6: "description",
	7: "voicemail_greeting",
}

// Decode decodes GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingForwardTo from json.
func (s *GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingForwardTo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingForwardTo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "extension_type":
			if err := func() error {
				s.ExtensionType.Reset()
				if err := s.ExtensionType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_type\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "voicemail_greeting":
			if err := func() error {
				s.VoicemailGreeting = nil
				var elem GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingForwardToVoicemailGreeting
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.VoicemailGreeting = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voicemail_greeting\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingForwardTo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingForwardTo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingForwardTo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingForwardToVoicemailGreeting) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingForwardToVoicemailGreeting) encodeFields(e *jx.Encoder) {
}

var jsonFieldsNameOfGetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingForwardToVoicemailGreeting = [0]string{}

// Decode decodes GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingForwardToVoicemailGreeting from json.
func (s *GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingForwardToVoicemailGreeting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingForwardToVoicemailGreeting to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
	}); err != nil {
		return errors.Wrap(err, "decode GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingForwardToVoicemailGreeting")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingForwardToVoicemailGreeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingForwardToVoicemailGreeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingOperator) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingOperator) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ExtensionType.Set {
			e.FieldStart("extension_type")
			s.ExtensionType.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingOperator = [5]string{
	0: "display_name",
	1: "extension_id",
	2: "extension_number",
	3: "extension_type",
	4: "id",
}

// Decode decodes GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingOperator from json.
func (s *GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingOperator) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingOperator to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "extension_type":
			if err := func() error {
				s.ExtensionType.Reset()
				if err := s.ExtensionType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_type\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingOperator")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingOperator) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingOperator) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingVoicemailGreeting) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingVoicemailGreeting) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingVoicemailGreeting = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingVoicemailGreeting from json.
func (s *GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingVoicemailGreeting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingVoicemailGreeting to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingVoicemailGreeting")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingVoicemailGreeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingVoicemailGreeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallLogDetailsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallLogDetailsOK) encodeFields(e *jx.Encoder) {
	{
		if s.CallID.Set {
			e.FieldStart("call_id")
			s.CallID.Encode(e)
		}
	}
	{
		if s.CallType.Set {
			e.FieldStart("call_type")
			s.CallType.Encode(e)
		}
	}
	{
		if s.CalleeCountryCode.Set {
			e.FieldStart("callee_country_code")
			s.CalleeCountryCode.Encode(e)
		}
	}
	{
		if s.CalleeCountryIsoCode.Set {
			e.FieldStart("callee_country_iso_code")
			s.CalleeCountryIsoCode.Encode(e)
		}
	}
	{
		if s.CalleeDidNumber.Set {
			e.FieldStart("callee_did_number")
			s.CalleeDidNumber.Encode(e)
		}
	}
	{
		if s.CalleeName.Set {
			e.FieldStart("callee_name")
			s.CalleeName.Encode(e)
		}
	}
	{
		if s.CalleeNumber.Set {
			e.FieldStart("callee_number")
			s.CalleeNumber.Encode(e)
		}
	}
	{
		if s.CalleeNumberType.Set {
			e.FieldStart("callee_number_type")
			s.CalleeNumberType.Encode(e)
		}
	}
	{
		if s.CalleeNumberSource.Set {
			e.FieldStart("callee_number_source")
			s.CalleeNumberSource.Encode(e)
		}
	}
	{
		if s.CalleeStatus.Set {
			e.FieldStart("callee_status")
			s.CalleeStatus.Encode(e)
		}
	}
	{
		if s.CalleeDeletedTime.Set {
			e.FieldStart("callee_deleted_time")
			s.CalleeDeletedTime.Encode(e)
		}
	}
	{
		if s.CallerCountryCode.Set {
			e.FieldStart("caller_country_code")
			s.CallerCountryCode.Encode(e)
		}
	}
	{
		if s.CallerCountryIsoCode.Set {
			e.FieldStart("caller_country_iso_code")
			s.CallerCountryIsoCode.Encode(e)
		}
	}
	{
		if s.CallerDidNumber.Set {
			e.FieldStart("caller_did_number")
			s.CallerDidNumber.Encode(e)
		}
	}
	{
		if s.CallerName.Set {
			e.FieldStart("caller_name")
			s.CallerName.Encode(e)
		}
	}
	{
		if s.CallerNumber.Set {
			e.FieldStart("caller_number")
			s.CallerNumber.Encode(e)
		}
	}
	{
		if s.CallerNumberType.Set {
			e.FieldStart("caller_number_type")
			s.CallerNumberType.Encode(e)
		}
	}
	{
		if s.CallerNumberSource.Set {
			e.FieldStart("caller_number_source")
			s.CallerNumberSource.Encode(e)
		}
	}
	{
		if s.CallerBillingReferenceID.Set {
			e.FieldStart("caller_billing_reference_id")
			s.CallerBillingReferenceID.Encode(e)
		}
	}
	{
		if s.CallerStatus.Set {
			e.FieldStart("caller_status")
			s.CallerStatus.Encode(e)
		}
	}
	{
		if s.CallerDeletedTime.Set {
			e.FieldStart("caller_deleted_time")
			s.CallerDeletedTime.Encode(e)
		}
	}
	{
		if s.DateTime.Set {
			e.FieldStart("date_time")
			s.DateTime.Encode(e)
		}
	}
	{
		if s.DevicePrivateIP.Set {
			e.FieldStart("device_private_ip")
			s.DevicePrivateIP.Encode(e)
		}
	}
	{
		if s.DevicePublicIP.Set {
			e.FieldStart("device_public_ip")
			s.DevicePublicIP.Encode(e)
		}
	}
	{
		if s.Direction.Set {
			e.FieldStart("direction")
			s.Direction.Encode(e)
		}
	}
	{
		if s.Duration.Set {
			e.FieldStart("duration")
			s.Duration.Encode(e)
		}
	}
	{
		if s.HasRecording.Set {
			e.FieldStart("has_recording")
			s.HasRecording.Encode(e)
		}
	}
	{
		if s.HasVoicemail.Set {
			e.FieldStart("has_voicemail")
			s.HasVoicemail.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.LogDetails != nil {
			e.FieldStart("log_details")
			e.ArrStart()
			for _, elem := range s.LogDetails {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Path.Set {
			e.FieldStart("path")
			s.Path.Encode(e)
		}
	}
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Department.Set {
			e.FieldStart("department")
			s.Department.Encode(e)
		}
	}
	{
		if s.CostCenter.Set {
			e.FieldStart("cost_center")
			s.CostCenter.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCallLogDetailsOK = [34]string{
	0:  "call_id",
	1:  "call_type",
	2:  "callee_country_code",
	3:  "callee_country_iso_code",
	4:  "callee_did_number",
	5:  "callee_name",
	6:  "callee_number",
	7:  "callee_number_type",
	8:  "callee_number_source",
	9:  "callee_status",
	10: "callee_deleted_time",
	11: "caller_country_code",
	12: "caller_country_iso_code",
	13: "caller_did_number",
	14: "caller_name",
	15: "caller_number",
	16: "caller_number_type",
	17: "caller_number_source",
	18: "caller_billing_reference_id",
	19: "caller_status",
	20: "caller_deleted_time",
	21: "date_time",
	22: "device_private_ip",
	23: "device_public_ip",
	24: "direction",
	25: "duration",
	26: "has_recording",
	27: "has_voicemail",
	28: "id",
	29: "log_details",
	30: "path",
	31: "result",
	32: "department",
	33: "cost_center",
}

// Decode decodes GetCallLogDetailsOK from json.
func (s *GetCallLogDetailsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallLogDetailsOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "call_id":
			if err := func() error {
				s.CallID.Reset()
				if err := s.CallID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_id\"")
			}
		case "call_type":
			if err := func() error {
				s.CallType.Reset()
				if err := s.CallType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_type\"")
			}
		case "callee_country_code":
			if err := func() error {
				s.CalleeCountryCode.Reset()
				if err := s.CalleeCountryCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_country_code\"")
			}
		case "callee_country_iso_code":
			if err := func() error {
				s.CalleeCountryIsoCode.Reset()
				if err := s.CalleeCountryIsoCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_country_iso_code\"")
			}
		case "callee_did_number":
			if err := func() error {
				s.CalleeDidNumber.Reset()
				if err := s.CalleeDidNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_did_number\"")
			}
		case "callee_name":
			if err := func() error {
				s.CalleeName.Reset()
				if err := s.CalleeName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_name\"")
			}
		case "callee_number":
			if err := func() error {
				s.CalleeNumber.Reset()
				if err := s.CalleeNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_number\"")
			}
		case "callee_number_type":
			if err := func() error {
				s.CalleeNumberType.Reset()
				if err := s.CalleeNumberType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_number_type\"")
			}
		case "callee_number_source":
			if err := func() error {
				s.CalleeNumberSource.Reset()
				if err := s.CalleeNumberSource.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_number_source\"")
			}
		case "callee_status":
			if err := func() error {
				s.CalleeStatus.Reset()
				if err := s.CalleeStatus.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_status\"")
			}
		case "callee_deleted_time":
			if err := func() error {
				s.CalleeDeletedTime.Reset()
				if err := s.CalleeDeletedTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_deleted_time\"")
			}
		case "caller_country_code":
			if err := func() error {
				s.CallerCountryCode.Reset()
				if err := s.CallerCountryCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_country_code\"")
			}
		case "caller_country_iso_code":
			if err := func() error {
				s.CallerCountryIsoCode.Reset()
				if err := s.CallerCountryIsoCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_country_iso_code\"")
			}
		case "caller_did_number":
			if err := func() error {
				s.CallerDidNumber.Reset()
				if err := s.CallerDidNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_did_number\"")
			}
		case "caller_name":
			if err := func() error {
				s.CallerName.Reset()
				if err := s.CallerName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_name\"")
			}
		case "caller_number":
			if err := func() error {
				s.CallerNumber.Reset()
				if err := s.CallerNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_number\"")
			}
		case "caller_number_type":
			if err := func() error {
				s.CallerNumberType.Reset()
				if err := s.CallerNumberType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_number_type\"")
			}
		case "caller_number_source":
			if err := func() error {
				s.CallerNumberSource.Reset()
				if err := s.CallerNumberSource.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_number_source\"")
			}
		case "caller_billing_reference_id":
			if err := func() error {
				s.CallerBillingReferenceID.Reset()
				if err := s.CallerBillingReferenceID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_billing_reference_id\"")
			}
		case "caller_status":
			if err := func() error {
				s.CallerStatus.Reset()
				if err := s.CallerStatus.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_status\"")
			}
		case "caller_deleted_time":
			if err := func() error {
				s.CallerDeletedTime.Reset()
				if err := s.CallerDeletedTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_deleted_time\"")
			}
		case "date_time":
			if err := func() error {
				s.DateTime.Reset()
				if err := s.DateTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"date_time\"")
			}
		case "device_private_ip":
			if err := func() error {
				s.DevicePrivateIP.Reset()
				if err := s.DevicePrivateIP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_private_ip\"")
			}
		case "device_public_ip":
			if err := func() error {
				s.DevicePublicIP.Reset()
				if err := s.DevicePublicIP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_public_ip\"")
			}
		case "direction":
			if err := func() error {
				s.Direction.Reset()
				if err := s.Direction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"direction\"")
			}
		case "duration":
			if err := func() error {
				s.Duration.Reset()
				if err := s.Duration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"duration\"")
			}
		case "has_recording":
			if err := func() error {
				s.HasRecording.Reset()
				if err := s.HasRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"has_recording\"")
			}
		case "has_voicemail":
			if err := func() error {
				s.HasVoicemail.Reset()
				if err := s.HasVoicemail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"has_voicemail\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "log_details":
			if err := func() error {
				s.LogDetails = make([]GetCallLogDetailsOKLogDetailsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetCallLogDetailsOKLogDetailsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.LogDetails = append(s.LogDetails, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"log_details\"")
			}
		case "path":
			if err := func() error {
				s.Path.Reset()
				if err := s.Path.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"path\"")
			}
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "department":
			if err := func() error {
				s.Department.Reset()
				if err := s.Department.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"department\"")
			}
		case "cost_center":
			if err := func() error {
				s.CostCenter.Reset()
				if err := s.CostCenter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cost_center\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallLogDetailsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallLogDetailsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallLogDetailsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallLogDetailsOKLogDetailsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallLogDetailsOKLogDetailsItem) encodeFields(e *jx.Encoder) {
	{
		if s.DateTime.Set {
			e.FieldStart("date_time")
			s.DateTime.Encode(e)
		}
	}
	{
		if s.HoldTime.Set {
			e.FieldStart("hold_time")
			s.HoldTime.Encode(e)
		}
	}
	{
		if s.DevicePrivateIP.Set {
			e.FieldStart("device_private_ip")
			s.DevicePrivateIP.Encode(e)
		}
	}
	{
		if s.DevicePublicIP.Set {
			e.FieldStart("device_public_ip")
			s.DevicePublicIP.Encode(e)
		}
	}
	{
		if s.Duration.Set {
			e.FieldStart("duration")
			s.Duration.Encode(e)
		}
	}
	{
		if s.ForwardTo.Set {
			e.FieldStart("forward_to")
			s.ForwardTo.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Path.Set {
			e.FieldStart("path")
			s.Path.Encode(e)
		}
	}
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Site.Set {
			e.FieldStart("site")
			s.Site.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCallLogDetailsOKLogDetailsItem = [10]string{
	0: "date_time",
	1: "hold_time",
	2: "device_private_ip",
	3: "device_public_ip",
	4: "duration",
	5: "forward_to",
	6: "id",
	7: "path",
	8: "result",
	9: "site",
}

// Decode decodes GetCallLogDetailsOKLogDetailsItem from json.
func (s *GetCallLogDetailsOKLogDetailsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallLogDetailsOKLogDetailsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "date_time":
			if err := func() error {
				s.DateTime.Reset()
				if err := s.DateTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"date_time\"")
			}
		case "hold_time":
			if err := func() error {
				s.HoldTime.Reset()
				if err := s.HoldTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hold_time\"")
			}
		case "device_private_ip":
			if err := func() error {
				s.DevicePrivateIP.Reset()
				if err := s.DevicePrivateIP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_private_ip\"")
			}
		case "device_public_ip":
			if err := func() error {
				s.DevicePublicIP.Reset()
				if err := s.DevicePublicIP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_public_ip\"")
			}
		case "duration":
			if err := func() error {
				s.Duration.Reset()
				if err := s.Duration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"duration\"")
			}
		case "forward_to":
			if err := func() error {
				s.ForwardTo.Reset()
				if err := s.ForwardTo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward_to\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "path":
			if err := func() error {
				s.Path.Reset()
				if err := s.Path.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"path\"")
			}
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "site":
			if err := func() error {
				s.Site.Reset()
				if err := s.Site.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallLogDetailsOKLogDetailsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallLogDetailsOKLogDetailsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallLogDetailsOKLogDetailsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallLogDetailsOKLogDetailsItemForwardTo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallLogDetailsOKLogDetailsItemForwardTo) encodeFields(e *jx.Encoder) {
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.ExtensionStatus.Set {
			e.FieldStart("extension_status")
			s.ExtensionStatus.Encode(e)
		}
	}
	{
		if s.ExtensionDeletedTime.Set {
			e.FieldStart("extension_deleted_time")
			s.ExtensionDeletedTime.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCallLogDetailsOKLogDetailsItemForwardTo = [6]string{
	0: "extension_number",
	1: "id",
	2: "name",
	3: "type",
	4: "extension_status",
	5: "extension_deleted_time",
}

// Decode decodes GetCallLogDetailsOKLogDetailsItemForwardTo from json.
func (s *GetCallLogDetailsOKLogDetailsItemForwardTo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallLogDetailsOKLogDetailsItemForwardTo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "extension_status":
			if err := func() error {
				s.ExtensionStatus.Reset()
				if err := s.ExtensionStatus.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_status\"")
			}
		case "extension_deleted_time":
			if err := func() error {
				s.ExtensionDeletedTime.Reset()
				if err := s.ExtensionDeletedTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_deleted_time\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallLogDetailsOKLogDetailsItemForwardTo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallLogDetailsOKLogDetailsItemForwardTo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallLogDetailsOKLogDetailsItemForwardTo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallLogDetailsOKLogDetailsItemSite) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallLogDetailsOKLogDetailsItemSite) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCallLogDetailsOKLogDetailsItemSite = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes GetCallLogDetailsOKLogDetailsItemSite from json.
func (s *GetCallLogDetailsOKLogDetailsItemSite) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallLogDetailsOKLogDetailsItemSite to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallLogDetailsOKLogDetailsItemSite")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallLogDetailsOKLogDetailsItemSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallLogDetailsOKLogDetailsItemSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallLogMetricsDetailsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallLogMetricsDetailsOK) encodeFields(e *jx.Encoder) {
	{
		if s.CallID.Set {
			e.FieldStart("call_id")
			s.CallID.Encode(e)
		}
	}
	{
		if s.Callee.Set {
			e.FieldStart("callee")
			s.Callee.Encode(e)
		}
	}
	{
		if s.Caller.Set {
			e.FieldStart("caller")
			s.Caller.Encode(e)
		}
	}
	{
		if s.DateTime.Set {
			e.FieldStart("date_time")
			s.DateTime.Encode(e)
		}
	}
	{
		if s.Direction.Set {
			e.FieldStart("direction")
			s.Direction.Encode(e)
		}
	}
	{
		if s.Duration.Set {
			e.FieldStart("duration")
			s.Duration.Encode(e)
		}
	}
	{
		if s.Mos.Set {
			e.FieldStart("mos")
			s.Mos.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCallLogMetricsDetailsOK = [7]string{
	0: "call_id",
	1: "callee",
	2: "caller",
	3: "date_time",
	4: "direction",
	5: "duration",
	6: "mos",
}

// Decode decodes GetCallLogMetricsDetailsOK from json.
func (s *GetCallLogMetricsDetailsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallLogMetricsDetailsOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "call_id":
			if err := func() error {
				s.CallID.Reset()
				if err := s.CallID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_id\"")
			}
		case "callee":
			if err := func() error {
				s.Callee.Reset()
				if err := s.Callee.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee\"")
			}
		case "caller":
			if err := func() error {
				s.Caller.Reset()
				if err := s.Caller.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller\"")
			}
		case "date_time":
			if err := func() error {
				s.DateTime.Reset()
				if err := s.DateTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"date_time\"")
			}
		case "direction":
			if err := func() error {
				s.Direction.Reset()
				if err := s.Direction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"direction\"")
			}
		case "duration":
			if err := func() error {
				s.Duration.Reset()
				if err := s.Duration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"duration\"")
			}
		case "mos":
			if err := func() error {
				s.Mos.Reset()
				if err := s.Mos.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mos\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallLogMetricsDetailsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallLogMetricsDetailsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallLogMetricsDetailsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallLogMetricsDetailsOKCallee) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallLogMetricsDetailsOKCallee) encodeFields(e *jx.Encoder) {
	{
		if s.Codec.Set {
			e.FieldStart("codec")
			s.Codec.Encode(e)
		}
	}
	{
		if s.DevicePrivateIP.Set {
			e.FieldStart("device_private_ip")
			s.DevicePrivateIP.Encode(e)
		}
	}
	{
		if s.DevicePublicIP.Set {
			e.FieldStart("device_public_ip")
			s.DevicePublicIP.Encode(e)
		}
	}
	{
		if s.DeviceType.Set {
			e.FieldStart("device_type")
			s.DeviceType.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.Headset.Set {
			e.FieldStart("headset")
			s.Headset.Encode(e)
		}
	}
	{
		if s.Isp.Set {
			e.FieldStart("isp")
			s.Isp.Encode(e)
		}
	}
	{
		if s.Microphone.Set {
			e.FieldStart("microphone")
			s.Microphone.Encode(e)
		}
	}
	{
		if s.PhoneNumber.Set {
			e.FieldStart("phone_number")
			s.PhoneNumber.Encode(e)
		}
	}
	{
		if s.SiteID.Set {
			e.FieldStart("site_id")
			s.SiteID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.ExtensionType.Set {
			e.FieldStart("extension_type")
			s.ExtensionType.Encode(e)
		}
	}
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCallLogMetricsDetailsOKCallee = [13]string{
	0:  "codec",
	1:  "device_private_ip",
	2:  "device_public_ip",
	3:  "device_type",
	4:  "extension_number",
	5:  "headset",
	6:  "isp",
	7:  "microphone",
	8:  "phone_number",
	9:  "site_id",
	10: "id",
	11: "extension_type",
	12: "display_name",
}

// Decode decodes GetCallLogMetricsDetailsOKCallee from json.
func (s *GetCallLogMetricsDetailsOKCallee) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallLogMetricsDetailsOKCallee to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "codec":
			if err := func() error {
				s.Codec.Reset()
				if err := s.Codec.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"codec\"")
			}
		case "device_private_ip":
			if err := func() error {
				s.DevicePrivateIP.Reset()
				if err := s.DevicePrivateIP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_private_ip\"")
			}
		case "device_public_ip":
			if err := func() error {
				s.DevicePublicIP.Reset()
				if err := s.DevicePublicIP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_public_ip\"")
			}
		case "device_type":
			if err := func() error {
				s.DeviceType.Reset()
				if err := s.DeviceType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_type\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "headset":
			if err := func() error {
				s.Headset.Reset()
				if err := s.Headset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"headset\"")
			}
		case "isp":
			if err := func() error {
				s.Isp.Reset()
				if err := s.Isp.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"isp\"")
			}
		case "microphone":
			if err := func() error {
				s.Microphone.Reset()
				if err := s.Microphone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"microphone\"")
			}
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		case "site_id":
			if err := func() error {
				s.SiteID.Reset()
				if err := s.SiteID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "extension_type":
			if err := func() error {
				s.ExtensionType.Reset()
				if err := s.ExtensionType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_type\"")
			}
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallLogMetricsDetailsOKCallee")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallLogMetricsDetailsOKCallee) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallLogMetricsDetailsOKCallee) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallLogMetricsDetailsOKCaller) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallLogMetricsDetailsOKCaller) encodeFields(e *jx.Encoder) {
	{
		if s.Codec.Set {
			e.FieldStart("codec")
			s.Codec.Encode(e)
		}
	}
	{
		if s.DevicePrivateIP.Set {
			e.FieldStart("device_private_ip")
			s.DevicePrivateIP.Encode(e)
		}
	}
	{
		if s.DevicePublicIP.Set {
			e.FieldStart("device_public_ip")
			s.DevicePublicIP.Encode(e)
		}
	}
	{
		if s.DeviceType.Set {
			e.FieldStart("device_type")
			s.DeviceType.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.Headset.Set {
			e.FieldStart("headset")
			s.Headset.Encode(e)
		}
	}
	{
		if s.Isp.Set {
			e.FieldStart("isp")
			s.Isp.Encode(e)
		}
	}
	{
		if s.Microphone.Set {
			e.FieldStart("microphone")
			s.Microphone.Encode(e)
		}
	}
	{
		if s.PhoneNumber.Set {
			e.FieldStart("phone_number")
			s.PhoneNumber.Encode(e)
		}
	}
	{
		if s.SiteID.Set {
			e.FieldStart("site_id")
			s.SiteID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.ExtensionType.Set {
			e.FieldStart("extension_type")
			s.ExtensionType.Encode(e)
		}
	}
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCallLogMetricsDetailsOKCaller = [13]string{
	0:  "codec",
	1:  "device_private_ip",
	2:  "device_public_ip",
	3:  "device_type",
	4:  "extension_number",
	5:  "headset",
	6:  "isp",
	7:  "microphone",
	8:  "phone_number",
	9:  "site_id",
	10: "id",
	11: "extension_type",
	12: "display_name",
}

// Decode decodes GetCallLogMetricsDetailsOKCaller from json.
func (s *GetCallLogMetricsDetailsOKCaller) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallLogMetricsDetailsOKCaller to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "codec":
			if err := func() error {
				s.Codec.Reset()
				if err := s.Codec.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"codec\"")
			}
		case "device_private_ip":
			if err := func() error {
				s.DevicePrivateIP.Reset()
				if err := s.DevicePrivateIP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_private_ip\"")
			}
		case "device_public_ip":
			if err := func() error {
				s.DevicePublicIP.Reset()
				if err := s.DevicePublicIP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_public_ip\"")
			}
		case "device_type":
			if err := func() error {
				s.DeviceType.Reset()
				if err := s.DeviceType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_type\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "headset":
			if err := func() error {
				s.Headset.Reset()
				if err := s.Headset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"headset\"")
			}
		case "isp":
			if err := func() error {
				s.Isp.Reset()
				if err := s.Isp.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"isp\"")
			}
		case "microphone":
			if err := func() error {
				s.Microphone.Reset()
				if err := s.Microphone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"microphone\"")
			}
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		case "site_id":
			if err := func() error {
				s.SiteID.Reset()
				if err := s.SiteID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "extension_type":
			if err := func() error {
				s.ExtensionType.Reset()
				if err := s.ExtensionType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_type\"")
			}
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallLogMetricsDetailsOKCaller")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallLogMetricsDetailsOKCaller) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallLogMetricsDetailsOKCaller) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallPathOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallPathOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.CallID.Set {
			e.FieldStart("call_id")
			s.CallID.Encode(e)
		}
	}
	{
		if s.ConnectType.Set {
			e.FieldStart("connect_type")
			s.ConnectType.Encode(e)
		}
	}
	{
		if s.CallType.Set {
			e.FieldStart("call_type")
			s.CallType.Encode(e)
		}
	}
	{
		if s.Direction.Set {
			e.FieldStart("direction")
			s.Direction.Encode(e)
		}
	}
	{
		if s.International.Set {
			e.FieldStart("international")
			s.International.Encode(e)
		}
	}
	{
		if s.CallerExtID.Set {
			e.FieldStart("caller_ext_id")
			s.CallerExtID.Encode(e)
		}
	}
	{
		if s.CallerName.Set {
			e.FieldStart("caller_name")
			s.CallerName.Encode(e)
		}
	}
	{
		if s.CallerDidNumber.Set {
			e.FieldStart("caller_did_number")
			s.CallerDidNumber.Encode(e)
		}
	}
	{
		if s.CallerExtNumber.Set {
			e.FieldStart("caller_ext_number")
			s.CallerExtNumber.Encode(e)
		}
	}
	{
		if s.CallerEmail.Set {
			e.FieldStart("caller_email")
			s.CallerEmail.Encode(e)
		}
	}
	{
		if s.CallerExtType.Set {
			e.FieldStart("caller_ext_type")
			s.CallerExtType.Encode(e)
		}
	}
	{
		if s.CalleeExtID.Set {
			e.FieldStart("callee_ext_id")
			s.CalleeExtID.Encode(e)
		}
	}
	{
		if s.CalleeName.Set {
			e.FieldStart("callee_name")
			s.CalleeName.Encode(e)
		}
	}
	{
		if s.CalleeEmail.Set {
			e.FieldStart("callee_email")
			s.CalleeEmail.Encode(e)
		}
	}
	{
		if s.CalleeDidNumber.Set {
			e.FieldStart("callee_did_number")
			s.CalleeDidNumber.Encode(e)
		}
	}
	{
		if s.CalleeExtNumber.Set {
			e.FieldStart("callee_ext_number")
			s.CalleeExtNumber.Encode(e)
		}
	}
	{
		if s.CalleeExtType.Set {
			e.FieldStart("callee_ext_type")
			s.CalleeExtType.Encode(e)
		}
	}
	{
		if s.Department.Set {
			e.FieldStart("department")
			s.Department.Encode(e)
		}
	}
	{
		if s.CostCenter.Set {
			e.FieldStart("cost_center")
			s.CostCenter.Encode(e)
		}
	}
	{
		if s.SiteID.Set {
			e.FieldStart("site_id")
			s.SiteID.Encode(e)
		}
	}
	{
		if s.GroupID.Set {
			e.FieldStart("group_id")
			s.GroupID.Encode(e)
		}
	}
	{
		if s.SiteName.Set {
			e.FieldStart("site_name")
			s.SiteName.Encode(e)
		}
	}
	{
		if s.StartTime.Set {
			e.FieldStart("start_time")
			s.StartTime.Encode(e)
		}
	}
	{
		if s.AnswerTime.Set {
			e.FieldStart("answer_time")
			s.AnswerTime.Encode(e)
		}
	}
	{
		if s.EndTime.Set {
			e.FieldStart("end_time")
			s.EndTime.Encode(e)
		}
	}
	{
		if s.CallPath != nil {
			e.FieldStart("call_path")
			e.ArrStart()
			for _, elem := range s.CallPath {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGetCallPathOK = [27]string{
	0:  "id",
	1:  "call_id",
	2:  "connect_type",
	3:  "call_type",
	4:  "direction",
	5:  "international",
	6:  "caller_ext_id",
	7:  "caller_name",
	8:  "caller_did_number",
	9:  "caller_ext_number",
	10: "caller_email",
	11: "caller_ext_type",
	12: "callee_ext_id",
	13: "callee_name",
	14: "callee_email",
	15: "callee_did_number",
	16: "callee_ext_number",
	17: "callee_ext_type",
	18: "department",
	19: "cost_center",
	20: "site_id",
	21: "group_id",
	22: "site_name",
	23: "start_time",
	24: "answer_time",
	25: "end_time",
	26: "call_path",
}

// Decode decodes GetCallPathOK from json.
func (s *GetCallPathOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallPathOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "call_id":
			if err := func() error {
				s.CallID.Reset()
				if err := s.CallID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_id\"")
			}
		case "connect_type":
			if err := func() error {
				s.ConnectType.Reset()
				if err := s.ConnectType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"connect_type\"")
			}
		case "call_type":
			if err := func() error {
				s.CallType.Reset()
				if err := s.CallType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_type\"")
			}
		case "direction":
			if err := func() error {
				s.Direction.Reset()
				if err := s.Direction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"direction\"")
			}
		case "international":
			if err := func() error {
				s.International.Reset()
				if err := s.International.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"international\"")
			}
		case "caller_ext_id":
			if err := func() error {
				s.CallerExtID.Reset()
				if err := s.CallerExtID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_ext_id\"")
			}
		case "caller_name":
			if err := func() error {
				s.CallerName.Reset()
				if err := s.CallerName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_name\"")
			}
		case "caller_did_number":
			if err := func() error {
				s.CallerDidNumber.Reset()
				if err := s.CallerDidNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_did_number\"")
			}
		case "caller_ext_number":
			if err := func() error {
				s.CallerExtNumber.Reset()
				if err := s.CallerExtNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_ext_number\"")
			}
		case "caller_email":
			if err := func() error {
				s.CallerEmail.Reset()
				if err := s.CallerEmail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_email\"")
			}
		case "caller_ext_type":
			if err := func() error {
				s.CallerExtType.Reset()
				if err := s.CallerExtType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_ext_type\"")
			}
		case "callee_ext_id":
			if err := func() error {
				s.CalleeExtID.Reset()
				if err := s.CalleeExtID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_ext_id\"")
			}
		case "callee_name":
			if err := func() error {
				s.CalleeName.Reset()
				if err := s.CalleeName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_name\"")
			}
		case "callee_email":
			if err := func() error {
				s.CalleeEmail.Reset()
				if err := s.CalleeEmail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_email\"")
			}
		case "callee_did_number":
			if err := func() error {
				s.CalleeDidNumber.Reset()
				if err := s.CalleeDidNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_did_number\"")
			}
		case "callee_ext_number":
			if err := func() error {
				s.CalleeExtNumber.Reset()
				if err := s.CalleeExtNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_ext_number\"")
			}
		case "callee_ext_type":
			if err := func() error {
				s.CalleeExtType.Reset()
				if err := s.CalleeExtType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_ext_type\"")
			}
		case "department":
			if err := func() error {
				s.Department.Reset()
				if err := s.Department.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"department\"")
			}
		case "cost_center":
			if err := func() error {
				s.CostCenter.Reset()
				if err := s.CostCenter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cost_center\"")
			}
		case "site_id":
			if err := func() error {
				s.SiteID.Reset()
				if err := s.SiteID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_id\"")
			}
		case "group_id":
			if err := func() error {
				s.GroupID.Reset()
				if err := s.GroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"group_id\"")
			}
		case "site_name":
			if err := func() error {
				s.SiteName.Reset()
				if err := s.SiteName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_name\"")
			}
		case "start_time":
			if err := func() error {
				s.StartTime.Reset()
				if err := s.StartTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"start_time\"")
			}
		case "answer_time":
			if err := func() error {
				s.AnswerTime.Reset()
				if err := s.AnswerTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"answer_time\"")
			}
		case "end_time":
			if err := func() error {
				s.EndTime.Reset()
				if err := s.EndTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"end_time\"")
			}
		case "call_path":
			if err := func() error {
				s.CallPath = make([]GetCallPathOKCallPathItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetCallPathOKCallPathItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CallPath = append(s.CallPath, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_path\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallPathOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallPathOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallPathOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallPathOKCallPathItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallPathOKCallPathItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.CallID.Set {
			e.FieldStart("call_id")
			s.CallID.Encode(e)
		}
	}
	{
		if s.ConnectType.Set {
			e.FieldStart("connect_type")
			s.ConnectType.Encode(e)
		}
	}
	{
		if s.CallType.Set {
			e.FieldStart("call_type")
			s.CallType.Encode(e)
		}
	}
	{
		if s.Direction.Set {
			e.FieldStart("direction")
			s.Direction.Encode(e)
		}
	}
	{
		if s.CallerExtID.Set {
			e.FieldStart("caller_ext_id")
			s.CallerExtID.Encode(e)
		}
	}
	{
		if s.CallerName.Set {
			e.FieldStart("caller_name")
			s.CallerName.Encode(e)
		}
	}
	{
		if s.CallerEmail.Set {
			e.FieldStart("caller_email")
			s.CallerEmail.Encode(e)
		}
	}
	{
		if s.CallerDidNumber.Set {
			e.FieldStart("caller_did_number")
			s.CallerDidNumber.Encode(e)
		}
	}
	{
		if s.CallerExtNumber.Set {
			e.FieldStart("caller_ext_number")
			s.CallerExtNumber.Encode(e)
		}
	}
	{
		if s.CallerExtType.Set {
			e.FieldStart("caller_ext_type")
			s.CallerExtType.Encode(e)
		}
	}
	{
		if s.CallerNumberType.Set {
			e.FieldStart("caller_number_type")
			s.CallerNumberType.Encode(e)
		}
	}
	{
		if s.CallerDeviceType.Set {
			e.FieldStart("caller_device_type")
			s.CallerDeviceType.Encode(e)
		}
	}
	{
		if s.CallerCountryIsoCode.Set {
			e.FieldStart("caller_country_iso_code")
			s.CallerCountryIsoCode.Encode(e)
		}
	}
	{
		if s.CallerCountryCode.Set {
			e.FieldStart("caller_country_code")
			s.CallerCountryCode.Encode(e)
		}
	}
	{
		if s.CalleeExtID.Set {
			e.FieldStart("callee_ext_id")
			s.CalleeExtID.Encode(e)
		}
	}
	{
		if s.CalleeName.Set {
			e.FieldStart("callee_name")
			s.CalleeName.Encode(e)
		}
	}
	{
		if s.CalleeDidNumber.Set {
			e.FieldStart("callee_did_number")
			s.CalleeDidNumber.Encode(e)
		}
	}
	{
		if s.CalleeExtNumber.Set {
			e.FieldStart("callee_ext_number")
			s.CalleeExtNumber.Encode(e)
		}
	}
	{
		if s.CalleeEmail.Set {
			e.FieldStart("callee_email")
			s.CalleeEmail.Encode(e)
		}
	}
	{
		if s.CalleeExtType.Set {
			e.FieldStart("callee_ext_type")
			s.CalleeExtType.Encode(e)
		}
	}
	{
		if s.CalleeNumberType.Set {
			e.FieldStart("callee_number_type")
			s.CalleeNumberType.Encode(e)
		}
	}
	{
		if s.CalleeDeviceType.Set {
			e.FieldStart("callee_device_type")
			s.CalleeDeviceType.Encode(e)
		}
	}
	{
		if s.CalleeCountryIsoCode.Set {
			e.FieldStart("callee_country_iso_code")
			s.CalleeCountryIsoCode.Encode(e)
		}
	}
	{
		if s.CalleeCountryCode.Set {
			e.FieldStart("callee_country_code")
			s.CalleeCountryCode.Encode(e)
		}
	}
	{
		if s.ClientCode.Set {
			e.FieldStart("client_code")
			s.ClientCode.Encode(e)
		}
	}
	{
		if s.Department.Set {
			e.FieldStart("department")
			s.Department.Encode(e)
		}
	}
	{
		if s.CostCenter.Set {
			e.FieldStart("cost_center")
			s.CostCenter.Encode(e)
		}
	}
	{
		if s.SiteID.Set {
			e.FieldStart("site_id")
			s.SiteID.Encode(e)
		}
	}
	{
		if s.GroupID.Set {
			e.FieldStart("group_id")
			s.GroupID.Encode(e)
		}
	}
	{
		if s.SiteName.Set {
			e.FieldStart("site_name")
			s.SiteName.Encode(e)
		}
	}
	{
		if s.StartTime.Set {
			e.FieldStart("start_time")
			s.StartTime.Encode(e)
		}
	}
	{
		if s.AnswerTime.Set {
			e.FieldStart("answer_time")
			s.AnswerTime.Encode(e)
		}
	}
	{
		if s.EndTime.Set {
			e.FieldStart("end_time")
			s.EndTime.Encode(e)
		}
	}
	{
		if s.Event.Set {
			e.FieldStart("event")
			s.Event.Encode(e)
		}
	}
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.ResultReason.Set {
			e.FieldStart("result_reason")
			s.ResultReason.Encode(e)
		}
	}
	{
		if s.DevicePrivateIP.Set {
			e.FieldStart("device_private_ip")
			s.DevicePrivateIP.Encode(e)
		}
	}
	{
		if s.DevicePublicIP.Set {
			e.FieldStart("device_public_ip")
			s.DevicePublicIP.Encode(e)
		}
	}
	{
		if s.OperatorExtNumber.Set {
			e.FieldStart("operator_ext_number")
			s.OperatorExtNumber.Encode(e)
		}
	}
	{
		if s.OperatorExtID.Set {
			e.FieldStart("operator_ext_id")
			s.OperatorExtID.Encode(e)
		}
	}
	{
		if s.OperatorExtType.Set {
			e.FieldStart("operator_ext_type")
			s.OperatorExtType.Encode(e)
		}
	}
	{
		if s.OperatorName.Set {
			e.FieldStart("operator_name")
			s.OperatorName.Encode(e)
		}
	}
	{
		if s.PressKey.Set {
			e.FieldStart("press_key")
			s.PressKey.Encode(e)
		}
	}
	{
		if s.Segment.Set {
			e.FieldStart("segment")
			s.Segment.Encode(e)
		}
	}
	{
		if s.Node.Set {
			e.FieldStart("node")
			s.Node.Encode(e)
		}
	}
	{
		if s.IsNode.Set {
			e.FieldStart("is_node")
			s.IsNode.Encode(e)
		}
	}
	{
		if s.RecordingID.Set {
			e.FieldStart("recording_id")
			s.RecordingID.Encode(e)
		}
	}
	{
		if s.RecordingType.Set {
			e.FieldStart("recording_type")
			s.RecordingType.Encode(e)
		}
	}
	{
		if s.HoldTime.Set {
			e.FieldStart("hold_time")
			s.HoldTime.Encode(e)
		}
	}
	{
		if s.WaitingTime.Set {
			e.FieldStart("waiting_time")
			s.WaitingTime.Encode(e)
		}
	}
	{
		if s.VoicemailID.Set {
			e.FieldStart("voicemail_id")
			s.VoicemailID.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCallPathOKCallPathItem = [52]string{
	0:  "id",
	1:  "call_id",
	2:  "connect_type",
	3:  "call_type",
	4:  "direction",
	5:  "caller_ext_id",
	6:  "caller_name",
	7:  "caller_email",
	8:  "caller_did_number",
	9:  "caller_ext_number",
	10: "caller_ext_type",
	11: "caller_number_type",
	12: "caller_device_type",
	13: "caller_country_iso_code",
	14: "caller_country_code",
	15: "callee_ext_id",
	16: "callee_name",
	17: "callee_did_number",
	18: "callee_ext_number",
	19: "callee_email",
	20: "callee_ext_type",
	21: "callee_number_type",
	22: "callee_device_type",
	23: "callee_country_iso_code",
	24: "callee_country_code",
	25: "client_code",
	26: "department",
	27: "cost_center",
	28: "site_id",
	29: "group_id",
	30: "site_name",
	31: "start_time",
	32: "answer_time",
	33: "end_time",
	34: "event",
	35: "result",
	36: "result_reason",
	37: "device_private_ip",
	38: "device_public_ip",
	39: "operator_ext_number",
	40: "operator_ext_id",
	41: "operator_ext_type",
	42: "operator_name",
	43: "press_key",
	44: "segment",
	45: "node",
	46: "is_node",
	47: "recording_id",
	48: "recording_type",
	49: "hold_time",
	50: "waiting_time",
	51: "voicemail_id",
}

// Decode decodes GetCallPathOKCallPathItem from json.
func (s *GetCallPathOKCallPathItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallPathOKCallPathItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "call_id":
			if err := func() error {
				s.CallID.Reset()
				if err := s.CallID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_id\"")
			}
		case "connect_type":
			if err := func() error {
				s.ConnectType.Reset()
				if err := s.ConnectType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"connect_type\"")
			}
		case "call_type":
			if err := func() error {
				s.CallType.Reset()
				if err := s.CallType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_type\"")
			}
		case "direction":
			if err := func() error {
				s.Direction.Reset()
				if err := s.Direction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"direction\"")
			}
		case "caller_ext_id":
			if err := func() error {
				s.CallerExtID.Reset()
				if err := s.CallerExtID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_ext_id\"")
			}
		case "caller_name":
			if err := func() error {
				s.CallerName.Reset()
				if err := s.CallerName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_name\"")
			}
		case "caller_email":
			if err := func() error {
				s.CallerEmail.Reset()
				if err := s.CallerEmail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_email\"")
			}
		case "caller_did_number":
			if err := func() error {
				s.CallerDidNumber.Reset()
				if err := s.CallerDidNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_did_number\"")
			}
		case "caller_ext_number":
			if err := func() error {
				s.CallerExtNumber.Reset()
				if err := s.CallerExtNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_ext_number\"")
			}
		case "caller_ext_type":
			if err := func() error {
				s.CallerExtType.Reset()
				if err := s.CallerExtType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_ext_type\"")
			}
		case "caller_number_type":
			if err := func() error {
				s.CallerNumberType.Reset()
				if err := s.CallerNumberType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_number_type\"")
			}
		case "caller_device_type":
			if err := func() error {
				s.CallerDeviceType.Reset()
				if err := s.CallerDeviceType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_device_type\"")
			}
		case "caller_country_iso_code":
			if err := func() error {
				s.CallerCountryIsoCode.Reset()
				if err := s.CallerCountryIsoCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_country_iso_code\"")
			}
		case "caller_country_code":
			if err := func() error {
				s.CallerCountryCode.Reset()
				if err := s.CallerCountryCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_country_code\"")
			}
		case "callee_ext_id":
			if err := func() error {
				s.CalleeExtID.Reset()
				if err := s.CalleeExtID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_ext_id\"")
			}
		case "callee_name":
			if err := func() error {
				s.CalleeName.Reset()
				if err := s.CalleeName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_name\"")
			}
		case "callee_did_number":
			if err := func() error {
				s.CalleeDidNumber.Reset()
				if err := s.CalleeDidNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_did_number\"")
			}
		case "callee_ext_number":
			if err := func() error {
				s.CalleeExtNumber.Reset()
				if err := s.CalleeExtNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_ext_number\"")
			}
		case "callee_email":
			if err := func() error {
				s.CalleeEmail.Reset()
				if err := s.CalleeEmail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_email\"")
			}
		case "callee_ext_type":
			if err := func() error {
				s.CalleeExtType.Reset()
				if err := s.CalleeExtType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_ext_type\"")
			}
		case "callee_number_type":
			if err := func() error {
				s.CalleeNumberType.Reset()
				if err := s.CalleeNumberType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_number_type\"")
			}
		case "callee_device_type":
			if err := func() error {
				s.CalleeDeviceType.Reset()
				if err := s.CalleeDeviceType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_device_type\"")
			}
		case "callee_country_iso_code":
			if err := func() error {
				s.CalleeCountryIsoCode.Reset()
				if err := s.CalleeCountryIsoCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_country_iso_code\"")
			}
		case "callee_country_code":
			if err := func() error {
				s.CalleeCountryCode.Reset()
				if err := s.CalleeCountryCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_country_code\"")
			}
		case "client_code":
			if err := func() error {
				s.ClientCode.Reset()
				if err := s.ClientCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_code\"")
			}
		case "department":
			if err := func() error {
				s.Department.Reset()
				if err := s.Department.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"department\"")
			}
		case "cost_center":
			if err := func() error {
				s.CostCenter.Reset()
				if err := s.CostCenter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cost_center\"")
			}
		case "site_id":
			if err := func() error {
				s.SiteID.Reset()
				if err := s.SiteID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_id\"")
			}
		case "group_id":
			if err := func() error {
				s.GroupID.Reset()
				if err := s.GroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"group_id\"")
			}
		case "site_name":
			if err := func() error {
				s.SiteName.Reset()
				if err := s.SiteName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_name\"")
			}
		case "start_time":
			if err := func() error {
				s.StartTime.Reset()
				if err := s.StartTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"start_time\"")
			}
		case "answer_time":
			if err := func() error {
				s.AnswerTime.Reset()
				if err := s.AnswerTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"answer_time\"")
			}
		case "end_time":
			if err := func() error {
				s.EndTime.Reset()
				if err := s.EndTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"end_time\"")
			}
		case "event":
			if err := func() error {
				s.Event.Reset()
				if err := s.Event.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"event\"")
			}
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "result_reason":
			if err := func() error {
				s.ResultReason.Reset()
				if err := s.ResultReason.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result_reason\"")
			}
		case "device_private_ip":
			if err := func() error {
				s.DevicePrivateIP.Reset()
				if err := s.DevicePrivateIP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_private_ip\"")
			}
		case "device_public_ip":
			if err := func() error {
				s.DevicePublicIP.Reset()
				if err := s.DevicePublicIP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_public_ip\"")
			}
		case "operator_ext_number":
			if err := func() error {
				s.OperatorExtNumber.Reset()
				if err := s.OperatorExtNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"operator_ext_number\"")
			}
		case "operator_ext_id":
			if err := func() error {
				s.OperatorExtID.Reset()
				if err := s.OperatorExtID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"operator_ext_id\"")
			}
		case "operator_ext_type":
			if err := func() error {
				s.OperatorExtType.Reset()
				if err := s.OperatorExtType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"operator_ext_type\"")
			}
		case "operator_name":
			if err := func() error {
				s.OperatorName.Reset()
				if err := s.OperatorName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"operator_name\"")
			}
		case "press_key":
			if err := func() error {
				s.PressKey.Reset()
				if err := s.PressKey.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"press_key\"")
			}
		case "segment":
			if err := func() error {
				s.Segment.Reset()
				if err := s.Segment.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"segment\"")
			}
		case "node":
			if err := func() error {
				s.Node.Reset()
				if err := s.Node.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"node\"")
			}
		case "is_node":
			if err := func() error {
				s.IsNode.Reset()
				if err := s.IsNode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"is_node\"")
			}
		case "recording_id":
			if err := func() error {
				s.RecordingID.Reset()
				if err := s.RecordingID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_id\"")
			}
		case "recording_type":
			if err := func() error {
				s.RecordingType.Reset()
				if err := s.RecordingType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_type\"")
			}
		case "hold_time":
			if err := func() error {
				s.HoldTime.Reset()
				if err := s.HoldTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hold_time\"")
			}
		case "waiting_time":
			if err := func() error {
				s.WaitingTime.Reset()
				if err := s.WaitingTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"waiting_time\"")
			}
		case "voicemail_id":
			if err := func() error {
				s.VoicemailID.Reset()
				if err := s.VoicemailID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voicemail_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallPathOKCallPathItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallPathOKCallPathItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallPathOKCallPathItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallQoSOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallQoSOK) encodeFields(e *jx.Encoder) {
	{
		if s.CallID.Set {
			e.FieldStart("call_id")
			s.CallID.Encode(e)
		}
	}
	{
		if s.CalleeQos.Set {
			e.FieldStart("callee_qos")
			s.CalleeQos.Encode(e)
		}
	}
	{
		if s.CallerQos.Set {
			e.FieldStart("caller_qos")
			s.CallerQos.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCallQoSOK = [3]string{
	0: "call_id",
	1: "callee_qos",
	2: "caller_qos",
}

// Decode decodes GetCallQoSOK from json.
func (s *GetCallQoSOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallQoSOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "call_id":
			if err := func() error {
				s.CallID.Reset()
				if err := s.CallID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_id\"")
			}
		case "callee_qos":
			if err := func() error {
				s.CalleeQos.Reset()
				if err := s.CalleeQos.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_qos\"")
			}
		case "caller_qos":
			if err := func() error {
				s.CallerQos.Reset()
				if err := s.CallerQos.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_qos\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallQoSOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallQoSOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallQoSOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallQoSOKCalleeQos) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallQoSOKCalleeQos) encodeFields(e *jx.Encoder) {
	{
		if s.DevicePrivateIP.Set {
			e.FieldStart("device_private_ip")
			s.DevicePrivateIP.Encode(e)
		}
	}
	{
		if s.DevicePublicIP.Set {
			e.FieldStart("device_public_ip")
			s.DevicePublicIP.Encode(e)
		}
	}
	{
		if s.Receiving != nil {
			e.FieldStart("receiving")
			e.ArrStart()
			for _, elem := range s.Receiving {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Sending != nil {
			e.FieldStart("sending")
			e.ArrStart()
			for _, elem := range s.Sending {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGetCallQoSOKCalleeQos = [4]string{
	0: "device_private_ip",
	1: "device_public_ip",
	2: "receiving",
	3: "sending",
}

// Decode decodes GetCallQoSOKCalleeQos from json.
func (s *GetCallQoSOKCalleeQos) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallQoSOKCalleeQos to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "device_private_ip":
			if err := func() error {
				s.DevicePrivateIP.Reset()
				if err := s.DevicePrivateIP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_private_ip\"")
			}
		case "device_public_ip":
			if err := func() error {
				s.DevicePublicIP.Reset()
				if err := s.DevicePublicIP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_public_ip\"")
			}
		case "receiving":
			if err := func() error {
				s.Receiving = make([]GetCallQoSOKCalleeQosReceivingItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetCallQoSOKCalleeQosReceivingItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Receiving = append(s.Receiving, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"receiving\"")
			}
		case "sending":
			if err := func() error {
				s.Sending = make([]GetCallQoSOKCalleeQosSendingItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetCallQoSOKCalleeQosSendingItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Sending = append(s.Sending, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sending\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallQoSOKCalleeQos")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallQoSOKCalleeQos) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallQoSOKCalleeQos) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallQoSOKCalleeQosReceivingItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallQoSOKCalleeQosReceivingItem) encodeFields(e *jx.Encoder) {
	{
		if s.DateTime.Set {
			e.FieldStart("date_time")
			s.DateTime.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.Qos.Set {
			e.FieldStart("qos")
			s.Qos.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCallQoSOKCalleeQosReceivingItem = [2]string{
	0: "date_time",
	1: "qos",
}

// Decode decodes GetCallQoSOKCalleeQosReceivingItem from json.
func (s *GetCallQoSOKCalleeQosReceivingItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallQoSOKCalleeQosReceivingItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "date_time":
			if err := func() error {
				s.DateTime.Reset()
				if err := s.DateTime.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"date_time\"")
			}
		case "qos":
			if err := func() error {
				s.Qos.Reset()
				if err := s.Qos.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"qos\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallQoSOKCalleeQosReceivingItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallQoSOKCalleeQosReceivingItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallQoSOKCalleeQosReceivingItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallQoSOKCalleeQosReceivingItemQos) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallQoSOKCalleeQosReceivingItemQos) encodeFields(e *jx.Encoder) {
	{
		if s.AvgLoss.Set {
			e.FieldStart("avg_loss")
			s.AvgLoss.Encode(e)
		}
	}
	{
		if s.Bitrate.Set {
			e.FieldStart("bitrate")
			s.Bitrate.Encode(e)
		}
	}
	{
		if s.Jitter.Set {
			e.FieldStart("jitter")
			s.Jitter.Encode(e)
		}
	}
	{
		if s.MaxLoss.Set {
			e.FieldStart("max_loss")
			s.MaxLoss.Encode(e)
		}
	}
	{
		if s.Mos.Set {
			e.FieldStart("mos")
			s.Mos.Encode(e)
		}
	}
	{
		if s.NetworkDelay.Set {
			e.FieldStart("network_delay")
			s.NetworkDelay.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCallQoSOKCalleeQosReceivingItemQos = [6]string{
	0: "avg_loss",
	1: "bitrate",
	2: "jitter",
	3: "max_loss",
	4: "mos",
	5: "network_delay",
}

// Decode decodes GetCallQoSOKCalleeQosReceivingItemQos from json.
func (s *GetCallQoSOKCalleeQosReceivingItemQos) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallQoSOKCalleeQosReceivingItemQos to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "avg_loss":
			if err := func() error {
				s.AvgLoss.Reset()
				if err := s.AvgLoss.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"avg_loss\"")
			}
		case "bitrate":
			if err := func() error {
				s.Bitrate.Reset()
				if err := s.Bitrate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bitrate\"")
			}
		case "jitter":
			if err := func() error {
				s.Jitter.Reset()
				if err := s.Jitter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"jitter\"")
			}
		case "max_loss":
			if err := func() error {
				s.MaxLoss.Reset()
				if err := s.MaxLoss.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"max_loss\"")
			}
		case "mos":
			if err := func() error {
				s.Mos.Reset()
				if err := s.Mos.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mos\"")
			}
		case "network_delay":
			if err := func() error {
				s.NetworkDelay.Reset()
				if err := s.NetworkDelay.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"network_delay\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallQoSOKCalleeQosReceivingItemQos")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallQoSOKCalleeQosReceivingItemQos) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallQoSOKCalleeQosReceivingItemQos) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallQoSOKCalleeQosSendingItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallQoSOKCalleeQosSendingItem) encodeFields(e *jx.Encoder) {
	{
		if s.DateTime.Set {
			e.FieldStart("date_time")
			s.DateTime.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.Qos.Set {
			e.FieldStart("qos")
			s.Qos.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCallQoSOKCalleeQosSendingItem = [2]string{
	0: "date_time",
	1: "qos",
}

// Decode decodes GetCallQoSOKCalleeQosSendingItem from json.
func (s *GetCallQoSOKCalleeQosSendingItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallQoSOKCalleeQosSendingItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "date_time":
			if err := func() error {
				s.DateTime.Reset()
				if err := s.DateTime.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"date_time\"")
			}
		case "qos":
			if err := func() error {
				s.Qos.Reset()
				if err := s.Qos.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"qos\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallQoSOKCalleeQosSendingItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallQoSOKCalleeQosSendingItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallQoSOKCalleeQosSendingItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallQoSOKCalleeQosSendingItemQos) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallQoSOKCalleeQosSendingItemQos) encodeFields(e *jx.Encoder) {
	{
		if s.AvgLoss.Set {
			e.FieldStart("avg_loss")
			s.AvgLoss.Encode(e)
		}
	}
	{
		if s.Bitrate.Set {
			e.FieldStart("bitrate")
			s.Bitrate.Encode(e)
		}
	}
	{
		if s.Jitter.Set {
			e.FieldStart("jitter")
			s.Jitter.Encode(e)
		}
	}
	{
		if s.MaxLoss.Set {
			e.FieldStart("max_loss")
			s.MaxLoss.Encode(e)
		}
	}
	{
		if s.Mos.Set {
			e.FieldStart("mos")
			s.Mos.Encode(e)
		}
	}
	{
		if s.NetworkDelay.Set {
			e.FieldStart("network_delay")
			s.NetworkDelay.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCallQoSOKCalleeQosSendingItemQos = [6]string{
	0: "avg_loss",
	1: "bitrate",
	2: "jitter",
	3: "max_loss",
	4: "mos",
	5: "network_delay",
}

// Decode decodes GetCallQoSOKCalleeQosSendingItemQos from json.
func (s *GetCallQoSOKCalleeQosSendingItemQos) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallQoSOKCalleeQosSendingItemQos to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "avg_loss":
			if err := func() error {
				s.AvgLoss.Reset()
				if err := s.AvgLoss.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"avg_loss\"")
			}
		case "bitrate":
			if err := func() error {
				s.Bitrate.Reset()
				if err := s.Bitrate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bitrate\"")
			}
		case "jitter":
			if err := func() error {
				s.Jitter.Reset()
				if err := s.Jitter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"jitter\"")
			}
		case "max_loss":
			if err := func() error {
				s.MaxLoss.Reset()
				if err := s.MaxLoss.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"max_loss\"")
			}
		case "mos":
			if err := func() error {
				s.Mos.Reset()
				if err := s.Mos.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mos\"")
			}
		case "network_delay":
			if err := func() error {
				s.NetworkDelay.Reset()
				if err := s.NetworkDelay.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"network_delay\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallQoSOKCalleeQosSendingItemQos")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallQoSOKCalleeQosSendingItemQos) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallQoSOKCalleeQosSendingItemQos) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallQoSOKCallerQos) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallQoSOKCallerQos) encodeFields(e *jx.Encoder) {
	{
		if s.DevicePrivateIP.Set {
			e.FieldStart("device_private_ip")
			s.DevicePrivateIP.Encode(e)
		}
	}
	{
		if s.DevicePublicIP.Set {
			e.FieldStart("device_public_ip")
			s.DevicePublicIP.Encode(e)
		}
	}
	{
		if s.Receiving != nil {
			e.FieldStart("receiving")
			e.ArrStart()
			for _, elem := range s.Receiving {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Sending != nil {
			e.FieldStart("sending")
			e.ArrStart()
			for _, elem := range s.Sending {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGetCallQoSOKCallerQos = [4]string{
	0: "device_private_ip",
	1: "device_public_ip",
	2: "receiving",
	3: "sending",
}

// Decode decodes GetCallQoSOKCallerQos from json.
func (s *GetCallQoSOKCallerQos) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallQoSOKCallerQos to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "device_private_ip":
			if err := func() error {
				s.DevicePrivateIP.Reset()
				if err := s.DevicePrivateIP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_private_ip\"")
			}
		case "device_public_ip":
			if err := func() error {
				s.DevicePublicIP.Reset()
				if err := s.DevicePublicIP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_public_ip\"")
			}
		case "receiving":
			if err := func() error {
				s.Receiving = make([]GetCallQoSOKCallerQosReceivingItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetCallQoSOKCallerQosReceivingItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Receiving = append(s.Receiving, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"receiving\"")
			}
		case "sending":
			if err := func() error {
				s.Sending = make([]GetCallQoSOKCallerQosSendingItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetCallQoSOKCallerQosSendingItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Sending = append(s.Sending, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sending\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallQoSOKCallerQos")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallQoSOKCallerQos) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallQoSOKCallerQos) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallQoSOKCallerQosReceivingItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallQoSOKCallerQosReceivingItem) encodeFields(e *jx.Encoder) {
	{
		if s.DateTime.Set {
			e.FieldStart("date_time")
			s.DateTime.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.Qos.Set {
			e.FieldStart("qos")
			s.Qos.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCallQoSOKCallerQosReceivingItem = [2]string{
	0: "date_time",
	1: "qos",
}

// Decode decodes GetCallQoSOKCallerQosReceivingItem from json.
func (s *GetCallQoSOKCallerQosReceivingItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallQoSOKCallerQosReceivingItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "date_time":
			if err := func() error {
				s.DateTime.Reset()
				if err := s.DateTime.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"date_time\"")
			}
		case "qos":
			if err := func() error {
				s.Qos.Reset()
				if err := s.Qos.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"qos\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallQoSOKCallerQosReceivingItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallQoSOKCallerQosReceivingItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallQoSOKCallerQosReceivingItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallQoSOKCallerQosReceivingItemQos) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallQoSOKCallerQosReceivingItemQos) encodeFields(e *jx.Encoder) {
	{
		if s.AvgLoss.Set {
			e.FieldStart("avg_loss")
			s.AvgLoss.Encode(e)
		}
	}
	{
		if s.Bitrate.Set {
			e.FieldStart("bitrate")
			s.Bitrate.Encode(e)
		}
	}
	{
		if s.Jitter.Set {
			e.FieldStart("jitter")
			s.Jitter.Encode(e)
		}
	}
	{
		if s.MaxLoss.Set {
			e.FieldStart("max_loss")
			s.MaxLoss.Encode(e)
		}
	}
	{
		if s.Mos.Set {
			e.FieldStart("mos")
			s.Mos.Encode(e)
		}
	}
	{
		if s.NetworkDelay.Set {
			e.FieldStart("network_delay")
			s.NetworkDelay.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCallQoSOKCallerQosReceivingItemQos = [6]string{
	0: "avg_loss",
	1: "bitrate",
	2: "jitter",
	3: "max_loss",
	4: "mos",
	5: "network_delay",
}

// Decode decodes GetCallQoSOKCallerQosReceivingItemQos from json.
func (s *GetCallQoSOKCallerQosReceivingItemQos) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallQoSOKCallerQosReceivingItemQos to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "avg_loss":
			if err := func() error {
				s.AvgLoss.Reset()
				if err := s.AvgLoss.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"avg_loss\"")
			}
		case "bitrate":
			if err := func() error {
				s.Bitrate.Reset()
				if err := s.Bitrate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bitrate\"")
			}
		case "jitter":
			if err := func() error {
				s.Jitter.Reset()
				if err := s.Jitter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"jitter\"")
			}
		case "max_loss":
			if err := func() error {
				s.MaxLoss.Reset()
				if err := s.MaxLoss.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"max_loss\"")
			}
		case "mos":
			if err := func() error {
				s.Mos.Reset()
				if err := s.Mos.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mos\"")
			}
		case "network_delay":
			if err := func() error {
				s.NetworkDelay.Reset()
				if err := s.NetworkDelay.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"network_delay\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallQoSOKCallerQosReceivingItemQos")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallQoSOKCallerQosReceivingItemQos) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallQoSOKCallerQosReceivingItemQos) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallQoSOKCallerQosSendingItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallQoSOKCallerQosSendingItem) encodeFields(e *jx.Encoder) {
	{
		if s.DateTime.Set {
			e.FieldStart("date_time")
			s.DateTime.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.Qos.Set {
			e.FieldStart("qos")
			s.Qos.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCallQoSOKCallerQosSendingItem = [2]string{
	0: "date_time",
	1: "qos",
}

// Decode decodes GetCallQoSOKCallerQosSendingItem from json.
func (s *GetCallQoSOKCallerQosSendingItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallQoSOKCallerQosSendingItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "date_time":
			if err := func() error {
				s.DateTime.Reset()
				if err := s.DateTime.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"date_time\"")
			}
		case "qos":
			if err := func() error {
				s.Qos.Reset()
				if err := s.Qos.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"qos\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallQoSOKCallerQosSendingItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallQoSOKCallerQosSendingItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallQoSOKCallerQosSendingItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallQoSOKCallerQosSendingItemQos) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallQoSOKCallerQosSendingItemQos) encodeFields(e *jx.Encoder) {
	{
		if s.AvgLoss.Set {
			e.FieldStart("avg_loss")
			s.AvgLoss.Encode(e)
		}
	}
	{
		if s.Bitrate.Set {
			e.FieldStart("bitrate")
			s.Bitrate.Encode(e)
		}
	}
	{
		if s.Jitter.Set {
			e.FieldStart("jitter")
			s.Jitter.Encode(e)
		}
	}
	{
		if s.MaxLoss.Set {
			e.FieldStart("max_loss")
			s.MaxLoss.Encode(e)
		}
	}
	{
		if s.Mos.Set {
			e.FieldStart("mos")
			s.Mos.Encode(e)
		}
	}
	{
		if s.NetworkDelay.Set {
			e.FieldStart("network_delay")
			s.NetworkDelay.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCallQoSOKCallerQosSendingItemQos = [6]string{
	0: "avg_loss",
	1: "bitrate",
	2: "jitter",
	3: "max_loss",
	4: "mos",
	5: "network_delay",
}

// Decode decodes GetCallQoSOKCallerQosSendingItemQos from json.
func (s *GetCallQoSOKCallerQosSendingItemQos) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallQoSOKCallerQosSendingItemQos to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "avg_loss":
			if err := func() error {
				s.AvgLoss.Reset()
				if err := s.AvgLoss.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"avg_loss\"")
			}
		case "bitrate":
			if err := func() error {
				s.Bitrate.Reset()
				if err := s.Bitrate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bitrate\"")
			}
		case "jitter":
			if err := func() error {
				s.Jitter.Reset()
				if err := s.Jitter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"jitter\"")
			}
		case "max_loss":
			if err := func() error {
				s.MaxLoss.Reset()
				if err := s.MaxLoss.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"max_loss\"")
			}
		case "mos":
			if err := func() error {
				s.Mos.Reset()
				if err := s.Mos.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mos\"")
			}
		case "network_delay":
			if err := func() error {
				s.NetworkDelay.Reset()
				if err := s.NetworkDelay.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"network_delay\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallQoSOKCallerQosSendingItemQos")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallQoSOKCallerQosSendingItemQos) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallQoSOKCallerQosSendingItemQos) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallQueueRecordingsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallQueueRecordingsOK) encodeFields(e *jx.Encoder) {
	{
		if s.From.Set {
			e.FieldStart("from")
			s.From.Encode(e)
		}
	}
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
	{
		if s.Recordings != nil {
			e.FieldStart("recordings")
			e.ArrStart()
			for _, elem := range s.Recordings {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.To.Set {
			e.FieldStart("to")
			s.To.Encode(e)
		}
	}
	{
		if s.TotalRecords.Set {
			e.FieldStart("total_records")
			s.TotalRecords.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCallQueueRecordingsOK = [6]string{
	0: "from",
	1: "next_page_token",
	2: "page_size",
	3: "recordings",
	4: "to",
	5: "total_records",
}

// Decode decodes GetCallQueueRecordingsOK from json.
func (s *GetCallQueueRecordingsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallQueueRecordingsOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "from":
			if err := func() error {
				s.From.Reset()
				if err := s.From.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"from\"")
			}
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		case "recordings":
			if err := func() error {
				s.Recordings = make([]GetCallQueueRecordingsOKRecordingsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetCallQueueRecordingsOKRecordingsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Recordings = append(s.Recordings, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recordings\"")
			}
		case "to":
			if err := func() error {
				s.To.Reset()
				if err := s.To.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"to\"")
			}
		case "total_records":
			if err := func() error {
				s.TotalRecords.Reset()
				if err := s.TotalRecords.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_records\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallQueueRecordingsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallQueueRecordingsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallQueueRecordingsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCallQueueRecordingsOKRecordingsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCallQueueRecordingsOKRecordingsItem) encodeFields(e *jx.Encoder) {
	{
		if s.CalleeName.Set {
			e.FieldStart("callee_name")
			s.CalleeName.Encode(e)
		}
	}
	{
		if s.CalleeNumber.Set {
			e.FieldStart("callee_number")
			s.CalleeNumber.Encode(e)
		}
	}
	{
		if s.CalleeNumberType.Set {
			e.FieldStart("callee_number_type")
			s.CalleeNumberType.Encode(e)
		}
	}
	{
		if s.CallerName.Set {
			e.FieldStart("caller_name")
			s.CallerName.Encode(e)
		}
	}
	{
		if s.CallerNumber.Set {
			e.FieldStart("caller_number")
			s.CallerNumber.Encode(e)
		}
	}
	{
		if s.CallerNumberType.Set {
			e.FieldStart("caller_number_type")
			s.CallerNumberType.Encode(e)
		}
	}
	{
		if s.DateTime.Set {
			e.FieldStart("date_time")
			s.DateTime.Encode(e, json.EncodeDate)
		}
	}
	{
		if s.Direction.Set {
			e.FieldStart("direction")
			s.Direction.Encode(e)
		}
	}
	{
		if s.DownloadURL.Set {
			e.FieldStart("download_url")
			s.DownloadURL.Encode(e)
		}
	}
	{
		if s.Duration.Set {
			e.FieldStart("duration")
			s.Duration.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCallQueueRecordingsOKRecordingsItem = [11]string{
	0:  "callee_name",
	1:  "callee_number",
	2:  "callee_number_type",
	3:  "caller_name",
	4:  "caller_number",
	5:  "caller_number_type",
	6:  "date_time",
	7:  "direction",
	8:  "download_url",
	9:  "duration",
	10: "id",
}

// Decode decodes GetCallQueueRecordingsOKRecordingsItem from json.
func (s *GetCallQueueRecordingsOKRecordingsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCallQueueRecordingsOKRecordingsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "callee_name":
			if err := func() error {
				s.CalleeName.Reset()
				if err := s.CalleeName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_name\"")
			}
		case "callee_number":
			if err := func() error {
				s.CalleeNumber.Reset()
				if err := s.CalleeNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_number\"")
			}
		case "callee_number_type":
			if err := func() error {
				s.CalleeNumberType.Reset()
				if err := s.CalleeNumberType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_number_type\"")
			}
		case "caller_name":
			if err := func() error {
				s.CallerName.Reset()
				if err := s.CallerName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_name\"")
			}
		case "caller_number":
			if err := func() error {
				s.CallerNumber.Reset()
				if err := s.CallerNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_number\"")
			}
		case "caller_number_type":
			if err := func() error {
				s.CallerNumberType.Reset()
				if err := s.CallerNumberType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_number_type\"")
			}
		case "date_time":
			if err := func() error {
				s.DateTime.Reset()
				if err := s.DateTime.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"date_time\"")
			}
		case "direction":
			if err := func() error {
				s.Direction.Reset()
				if err := s.Direction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"direction\"")
			}
		case "download_url":
			if err := func() error {
				s.DownloadURL.Reset()
				if err := s.DownloadURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"download_url\"")
			}
		case "duration":
			if err := func() error {
				s.Duration.Reset()
				if err := s.Duration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"duration\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCallQueueRecordingsOKRecordingsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCallQueueRecordingsOKRecordingsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCallQueueRecordingsOKRecordingsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCommonAreaOutboundCallingCountriesAndRegionsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCommonAreaOutboundCallingCountriesAndRegionsOK) encodeFields(e *jx.Encoder) {
	{
		if s.CountriesRegions != nil {
			e.FieldStart("countries_regions")
			e.ArrStart()
			for _, elem := range s.CountriesRegions {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCommonAreaOutboundCallingCountriesAndRegionsOK = [3]string{
	0: "countries_regions",
	1: "next_page_token",
	2: "page_size",
}

// Decode decodes GetCommonAreaOutboundCallingCountriesAndRegionsOK from json.
func (s *GetCommonAreaOutboundCallingCountriesAndRegionsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCommonAreaOutboundCallingCountriesAndRegionsOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "countries_regions":
			if err := func() error {
				s.CountriesRegions = make([]GetCommonAreaOutboundCallingCountriesAndRegionsOKCountriesRegionsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetCommonAreaOutboundCallingCountriesAndRegionsOKCountriesRegionsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CountriesRegions = append(s.CountriesRegions, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"countries_regions\"")
			}
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCommonAreaOutboundCallingCountriesAndRegionsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCommonAreaOutboundCallingCountriesAndRegionsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCommonAreaOutboundCallingCountriesAndRegionsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCommonAreaOutboundCallingCountriesAndRegionsOKCountriesRegionsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCommonAreaOutboundCallingCountriesAndRegionsOKCountriesRegionsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Code.Set {
			e.FieldStart("code")
			s.Code.Encode(e)
		}
	}
	{
		if s.IsoCode.Set {
			e.FieldStart("iso_code")
			s.IsoCode.Encode(e)
		}
	}
	{
		if s.Rule.Set {
			e.FieldStart("rule")
			s.Rule.Encode(e)
		}
	}
	{
		if s.EnabledCarrier != nil {
			e.FieldStart("enabled_carrier")
			e.ArrStart()
			for _, elem := range s.EnabledCarrier {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGetCommonAreaOutboundCallingCountriesAndRegionsOKCountriesRegionsItem = [5]string{
	0: "name",
	1: "code",
	2: "iso_code",
	3: "rule",
	4: "enabled_carrier",
}

// Decode decodes GetCommonAreaOutboundCallingCountriesAndRegionsOKCountriesRegionsItem from json.
func (s *GetCommonAreaOutboundCallingCountriesAndRegionsOKCountriesRegionsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCommonAreaOutboundCallingCountriesAndRegionsOKCountriesRegionsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "code":
			if err := func() error {
				s.Code.Reset()
				if err := s.Code.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code\"")
			}
		case "iso_code":
			if err := func() error {
				s.IsoCode.Reset()
				if err := s.IsoCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_code\"")
			}
		case "rule":
			if err := func() error {
				s.Rule.Reset()
				if err := s.Rule.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rule\"")
			}
		case "enabled_carrier":
			if err := func() error {
				s.EnabledCarrier = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.EnabledCarrier = append(s.EnabledCarrier, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enabled_carrier\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCommonAreaOutboundCallingCountriesAndRegionsOKCountriesRegionsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCommonAreaOutboundCallingCountriesAndRegionsOKCountriesRegionsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCommonAreaOutboundCallingCountriesAndRegionsOKCountriesRegionsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCommonAreaSettingsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCommonAreaSettingsOK) encodeFields(e *jx.Encoder) {
	{
		if s.DeskPhones != nil {
			e.FieldStart("desk_phones")
			e.ArrStart()
			for _, elem := range s.DeskPhones {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGetCommonAreaSettingsOK = [1]string{
	0: "desk_phones",
}

// Decode decodes GetCommonAreaSettingsOK from json.
func (s *GetCommonAreaSettingsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCommonAreaSettingsOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "desk_phones":
			if err := func() error {
				s.DeskPhones = make([]GetCommonAreaSettingsOKDeskPhonesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetCommonAreaSettingsOKDeskPhonesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.DeskPhones = append(s.DeskPhones, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"desk_phones\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCommonAreaSettingsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCommonAreaSettingsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCommonAreaSettingsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCommonAreaSettingsOKDeskPhonesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCommonAreaSettingsOKDeskPhonesItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.DeviceType.Set {
			e.FieldStart("device_type")
			s.DeviceType.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.HotDesking.Set {
			e.FieldStart("hot_desking")
			s.HotDesking.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCommonAreaSettingsOKDeskPhonesItem = [5]string{
	0: "id",
	1: "display_name",
	2: "device_type",
	3: "status",
	4: "hot_desking",
}

// Decode decodes GetCommonAreaSettingsOKDeskPhonesItem from json.
func (s *GetCommonAreaSettingsOKDeskPhonesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCommonAreaSettingsOKDeskPhonesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "device_type":
			if err := func() error {
				s.DeviceType.Reset()
				if err := s.DeviceType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_type\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "hot_desking":
			if err := func() error {
				s.HotDesking.Reset()
				if err := s.HotDesking.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hot_desking\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCommonAreaSettingsOKDeskPhonesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCommonAreaSettingsOKDeskPhonesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCommonAreaSettingsOKDeskPhonesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCommonAreaSettingsOKDeskPhonesItemHotDesking) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCommonAreaSettingsOKDeskPhonesItemHotDesking) encodeFields(e *jx.Encoder) {
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCommonAreaSettingsOKDeskPhonesItemHotDesking = [1]string{
	0: "status",
}

// Decode decodes GetCommonAreaSettingsOKDeskPhonesItemHotDesking from json.
func (s *GetCommonAreaSettingsOKDeskPhonesItemHotDesking) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCommonAreaSettingsOKDeskPhonesItemHotDesking to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCommonAreaSettingsOKDeskPhonesItemHotDesking")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCommonAreaSettingsOKDeskPhonesItemHotDesking) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCommonAreaSettingsOKDeskPhonesItemHotDesking) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetEmergencyAddressOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetEmergencyAddressOK) encodeFields(e *jx.Encoder) {
	{
		if s.AddressLine1.Set {
			e.FieldStart("address_line1")
			s.AddressLine1.Encode(e)
		}
	}
	{
		if s.AddressLine2.Set {
			e.FieldStart("address_line2")
			s.AddressLine2.Encode(e)
		}
	}
	{
		if s.City.Set {
			e.FieldStart("city")
			s.City.Encode(e)
		}
	}
	{
		if s.Country.Set {
			e.FieldStart("country")
			s.Country.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.IsDefault.Set {
			e.FieldStart("is_default")
			s.IsDefault.Encode(e)
		}
	}
	{
		if s.Level.Set {
			e.FieldStart("level")
			s.Level.Encode(e)
		}
	}
	{
		if s.Owner.Set {
			e.FieldStart("owner")
			s.Owner.Encode(e)
		}
	}
	{
		if s.Site.Set {
			e.FieldStart("site")
			s.Site.Encode(e)
		}
	}
	{
		if s.StateCode.Set {
			e.FieldStart("state_code")
			s.StateCode.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.Zip.Set {
			e.FieldStart("zip")
			s.Zip.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetEmergencyAddressOK = [12]string{
	0:  "address_line1",
	1:  "address_line2",
	2:  "city",
	3:  "country",
	4:  "id",
	5:  "is_default",
	6:  "level",
	7:  "owner",
	8:  "site",
	9:  "state_code",
	10: "status",
	11: "zip",
}

// Decode decodes GetEmergencyAddressOK from json.
func (s *GetEmergencyAddressOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetEmergencyAddressOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "address_line1":
			if err := func() error {
				s.AddressLine1.Reset()
				if err := s.AddressLine1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"address_line1\"")
			}
		case "address_line2":
			if err := func() error {
				s.AddressLine2.Reset()
				if err := s.AddressLine2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"address_line2\"")
			}
		case "city":
			if err := func() error {
				s.City.Reset()
				if err := s.City.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"city\"")
			}
		case "country":
			if err := func() error {
				s.Country.Reset()
				if err := s.Country.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "is_default":
			if err := func() error {
				s.IsDefault.Reset()
				if err := s.IsDefault.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"is_default\"")
			}
		case "level":
			if err := func() error {
				s.Level.Reset()
				if err := s.Level.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"level\"")
			}
		case "owner":
			if err := func() error {
				s.Owner.Reset()
				if err := s.Owner.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"owner\"")
			}
		case "site":
			if err := func() error {
				s.Site.Reset()
				if err := s.Site.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site\"")
			}
		case "state_code":
			if err := func() error {
				s.StateCode.Reset()
				if err := s.StateCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"state_code\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "zip":
			if err := func() error {
				s.Zip.Reset()
				if err := s.Zip.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zip\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetEmergencyAddressOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetEmergencyAddressOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetEmergencyAddressOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetEmergencyAddressOKOwner) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetEmergencyAddressOKOwner) encodeFields(e *jx.Encoder) {
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetEmergencyAddressOKOwner = [3]string{
	0: "extension_number",
	1: "id",
	2: "name",
}

// Decode decodes GetEmergencyAddressOKOwner from json.
func (s *GetEmergencyAddressOKOwner) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetEmergencyAddressOKOwner to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetEmergencyAddressOKOwner")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetEmergencyAddressOKOwner) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetEmergencyAddressOKOwner) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetEmergencyAddressOKSite) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetEmergencyAddressOKSite) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetEmergencyAddressOKSite = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes GetEmergencyAddressOKSite from json.
func (s *GetEmergencyAddressOKSite) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetEmergencyAddressOKSite to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetEmergencyAddressOKSite")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetEmergencyAddressOKSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetEmergencyAddressOKSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetFirmwareRuleDetailOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetFirmwareRuleDetailOK) encodeFields(e *jx.Encoder) {
	{
		if s.DeviceType.Set {
			e.FieldStart("device_type")
			s.DeviceType.Encode(e)
		}
	}
	{
		if s.DeviceModel.Set {
			e.FieldStart("device_model")
			s.DeviceModel.Encode(e)
		}
	}
	{
		if s.Version.Set {
			e.FieldStart("version")
			s.Version.Encode(e)
		}
	}
	{
		if s.UpdateLog.Set {
			e.FieldStart("update_log")
			s.UpdateLog.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetFirmwareRuleDetailOK = [4]string{
	0: "device_type",
	1: "device_model",
	2: "version",
	3: "update_log",
}

// Decode decodes GetFirmwareRuleDetailOK from json.
func (s *GetFirmwareRuleDetailOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetFirmwareRuleDetailOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "device_type":
			if err := func() error {
				s.DeviceType.Reset()
				if err := s.DeviceType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_type\"")
			}
		case "device_model":
			if err := func() error {
				s.DeviceModel.Reset()
				if err := s.DeviceModel.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_model\"")
			}
		case "version":
			if err := func() error {
				s.Version.Reset()
				if err := s.Version.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"version\"")
			}
		case "update_log":
			if err := func() error {
				s.UpdateLog.Reset()
				if err := s.UpdateLog.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"update_log\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetFirmwareRuleDetailOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetFirmwareRuleDetailOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetFirmwareRuleDetailOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGCPOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGCPOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.Delay.Set {
			e.FieldStart("delay")
			s.Delay.Encode(e)
		}
	}
	{
		if s.MemberCount.Set {
			e.FieldStart("member_count")
			s.MemberCount.Encode(e)
		}
	}
	{
		if s.CostCenter.Set {
			e.FieldStart("cost_center")
			s.CostCenter.Encode(e)
		}
	}
	{
		if s.Department.Set {
			e.FieldStart("department")
			s.Department.Encode(e)
		}
	}
	{
		if s.Site.Set {
			e.FieldStart("site")
			s.Site.Encode(e)
		}
	}
	{
		if s.PlayIncomingCallsSound.Set {
			e.FieldStart("play_incoming_calls_sound")
			s.PlayIncomingCallsSound.Encode(e)
		}
	}
	{
		if s.DirectedCallPickup.Set {
			e.FieldStart("directed_call_pickup")
			s.DirectedCallPickup.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGCPOK = [12]string{
	0:  "id",
	1:  "display_name",
	2:  "extension_id",
	3:  "extension_number",
	4:  "description",
	5:  "delay",
	6:  "member_count",
	7:  "cost_center",
	8:  "department",
	9:  "site",
	10: "play_incoming_calls_sound",
	11: "directed_call_pickup",
}

// Decode decodes GetGCPOK from json.
func (s *GetGCPOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGCPOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "delay":
			if err := func() error {
				s.Delay.Reset()
				if err := s.Delay.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delay\"")
			}
		case "member_count":
			if err := func() error {
				s.MemberCount.Reset()
				if err := s.MemberCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"member_count\"")
			}
		case "cost_center":
			if err := func() error {
				s.CostCenter.Reset()
				if err := s.CostCenter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cost_center\"")
			}
		case "department":
			if err := func() error {
				s.Department.Reset()
				if err := s.Department.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"department\"")
			}
		case "site":
			if err := func() error {
				s.Site.Reset()
				if err := s.Site.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site\"")
			}
		case "play_incoming_calls_sound":
			if err := func() error {
				s.PlayIncomingCallsSound.Reset()
				if err := s.PlayIncomingCallsSound.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_incoming_calls_sound\"")
			}
		case "directed_call_pickup":
			if err := func() error {
				s.DirectedCallPickup.Reset()
				if err := s.DirectedCallPickup.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"directed_call_pickup\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGCPOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGCPOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGCPOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGCPOKPlayIncomingCallsSound) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGCPOKPlayIncomingCallsSound) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.RingTone.Set {
			e.FieldStart("ring_tone")
			s.RingTone.Encode(e)
		}
	}
	{
		if s.Duration.Set {
			e.FieldStart("duration")
			s.Duration.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGCPOKPlayIncomingCallsSound = [3]string{
	0: "enable",
	1: "ring_tone",
	2: "duration",
}

// Decode decodes GetGCPOKPlayIncomingCallsSound from json.
func (s *GetGCPOKPlayIncomingCallsSound) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGCPOKPlayIncomingCallsSound to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "ring_tone":
			if err := func() error {
				s.RingTone.Reset()
				if err := s.RingTone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ring_tone\"")
			}
		case "duration":
			if err := func() error {
				s.Duration.Reset()
				if err := s.Duration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"duration\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGCPOKPlayIncomingCallsSound")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGCPOKPlayIncomingCallsSound) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGCPOKPlayIncomingCallsSound) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGCPOKSite) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGCPOKSite) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGCPOKSite = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes GetGCPOKSite from json.
func (s *GetGCPOKSite) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGCPOKSite to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGCPOKSite")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGCPOKSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGCPOKSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupPhoneSettingsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupPhoneSettingsOK) encodeFields(e *jx.Encoder) {
	{
		if s.CallLiveTranscription.Set {
			e.FieldStart("call_live_transcription")
			s.CallLiveTranscription.Encode(e)
		}
	}
	{
		if s.LocalSurvivabilityMode.Set {
			e.FieldStart("local_survivability_mode")
			s.LocalSurvivabilityMode.Encode(e)
		}
	}
	{
		if s.SelectOutboundCallerID.Set {
			e.FieldStart("select_outbound_caller_id")
			s.SelectOutboundCallerID.Encode(e)
		}
	}
	{
		if s.PersonalAudioLibrary.Set {
			e.FieldStart("personal_audio_library")
			s.PersonalAudioLibrary.Encode(e)
		}
	}
	{
		if s.Voicemail.Set {
			e.FieldStart("voicemail")
			s.Voicemail.Encode(e)
		}
	}
	{
		if s.VoicemailTranscription.Set {
			e.FieldStart("voicemail_transcription")
			s.VoicemailTranscription.Encode(e)
		}
	}
	{
		if s.VoicemailNotificationByEmail.Set {
			e.FieldStart("voicemail_notification_by_email")
			s.VoicemailNotificationByEmail.Encode(e)
		}
	}
	{
		if s.SharedVoicemailNotificationByEmail.Set {
			e.FieldStart("shared_voicemail_notification_by_email")
			s.SharedVoicemailNotificationByEmail.Encode(e)
		}
	}
	{
		if s.RestrictedCallHours.Set {
			e.FieldStart("restricted_call_hours")
			s.RestrictedCallHours.Encode(e)
		}
	}
	{
		if s.AllowedCallLocations.Set {
			e.FieldStart("allowed_call_locations")
			s.AllowedCallLocations.Encode(e)
		}
	}
	{
		if s.CheckVoicemailsOverPhone.Set {
			e.FieldStart("check_voicemails_over_phone")
			s.CheckVoicemailsOverPhone.Encode(e)
		}
	}
	{
		if s.AutoCallRecording.Set {
			e.FieldStart("auto_call_recording")
			s.AutoCallRecording.Encode(e)
		}
	}
	{
		if s.AdHocCallRecording.Set {
			e.FieldStart("ad_hoc_call_recording")
			s.AdHocCallRecording.Encode(e)
		}
	}
	{
		if s.ZoomPhoneOnMobile.Set {
			e.FieldStart("zoom_phone_on_mobile")
			s.ZoomPhoneOnMobile.Encode(e)
		}
	}
	{
		if s.ZoomPhoneOnPwa.Set {
			e.FieldStart("zoom_phone_on_pwa")
			s.ZoomPhoneOnPwa.Encode(e)
		}
	}
	{
		if s.SMSEtiquetteTool.Set {
			e.FieldStart("sms_etiquette_tool")
			s.SMSEtiquetteTool.Encode(e)
		}
	}
	{
		if s.OutboundCalling.Set {
			e.FieldStart("outbound_calling")
			s.OutboundCalling.Encode(e)
		}
	}
	{
		if s.OutboundSMS.Set {
			e.FieldStart("outbound_sms")
			s.OutboundSMS.Encode(e)
		}
	}
	{
		if s.InternationalCalling.Set {
			e.FieldStart("international_calling")
			s.InternationalCalling.Encode(e)
		}
	}
	{
		if s.SMS.Set {
			e.FieldStart("sms")
			s.SMS.Encode(e)
		}
	}
	{
		if s.E2eEncryption.Set {
			e.FieldStart("e2e_encryption")
			s.E2eEncryption.Encode(e)
		}
	}
	{
		if s.CallHandlingForwarding.Set {
			e.FieldStart("call_handling_forwarding")
			s.CallHandlingForwarding.Encode(e)
		}
	}
	{
		if s.CallOverflow.Set {
			e.FieldStart("call_overflow")
			s.CallOverflow.Encode(e)
		}
	}
	{
		if s.CallTransferring.Set {
			e.FieldStart("call_transferring")
			s.CallTransferring.Encode(e)
		}
	}
	{
		if s.ElevateToMeeting.Set {
			e.FieldStart("elevate_to_meeting")
			s.ElevateToMeeting.Encode(e)
		}
	}
	{
		if s.CallPark.Set {
			e.FieldStart("call_park")
			s.CallPark.Encode(e)
		}
	}
	{
		if s.HandOffToRoom.Set {
			e.FieldStart("hand_off_to_room")
			s.HandOffToRoom.Encode(e)
		}
	}
	{
		if s.MobileSwitchToCarrier.Set {
			e.FieldStart("mobile_switch_to_carrier")
			s.MobileSwitchToCarrier.Encode(e)
		}
	}
	{
		if s.Delegation.Set {
			e.FieldStart("delegation")
			s.Delegation.Encode(e)
		}
	}
	{
		if s.AudioIntercom.Set {
			e.FieldStart("audio_intercom")
			s.AudioIntercom.Encode(e)
		}
	}
	{
		if s.BlockListForInboundCallsAndMessaging.Set {
			e.FieldStart("block_list_for_inbound_calls_and_messaging")
			s.BlockListForInboundCallsAndMessaging.Encode(e)
		}
	}
	{
		if s.BlockCallsWithoutCallerID.Set {
			e.FieldStart("block_calls_without_caller_id")
			s.BlockCallsWithoutCallerID.Encode(e)
		}
	}
	{
		if s.BlockExternalCalls.Set {
			e.FieldStart("block_external_calls")
			s.BlockExternalCalls.Encode(e)
		}
	}
	{
		if s.PeerToPeerMedia.Set {
			e.FieldStart("peer_to_peer_media")
			s.PeerToPeerMedia.Encode(e)
		}
	}
	{
		if s.AdvancedEncryption.Set {
			e.FieldStart("advanced_encryption")
			s.AdvancedEncryption.Encode(e)
		}
	}
	{
		if s.DisplayCallFeedbackSurvey.Set {
			e.FieldStart("display_call_feedback_survey")
			s.DisplayCallFeedbackSurvey.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupPhoneSettingsOK = [36]string{
	0:  "call_live_transcription",
	1:  "local_survivability_mode",
	2:  "select_outbound_caller_id",
	3:  "personal_audio_library",
	4:  "voicemail",
	5:  "voicemail_transcription",
	6:  "voicemail_notification_by_email",
	7:  "shared_voicemail_notification_by_email",
	8:  "restricted_call_hours",
	9:  "allowed_call_locations",
	10: "check_voicemails_over_phone",
	11: "auto_call_recording",
	12: "ad_hoc_call_recording",
	13: "zoom_phone_on_mobile",
	14: "zoom_phone_on_pwa",
	15: "sms_etiquette_tool",
	16: "outbound_calling",
	17: "outbound_sms",
	18: "international_calling",
	19: "sms",
	20: "e2e_encryption",
	21: "call_handling_forwarding",
	22: "call_overflow",
	23: "call_transferring",
	24: "elevate_to_meeting",
	25: "call_park",
	26: "hand_off_to_room",
	27: "mobile_switch_to_carrier",
	28: "delegation",
	29: "audio_intercom",
	30: "block_list_for_inbound_calls_and_messaging",
	31: "block_calls_without_caller_id",
	32: "block_external_calls",
	33: "peer_to_peer_media",
	34: "advanced_encryption",
	35: "display_call_feedback_survey",
}

// Decode decodes GetGroupPhoneSettingsOK from json.
func (s *GetGroupPhoneSettingsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupPhoneSettingsOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "call_live_transcription":
			if err := func() error {
				s.CallLiveTranscription.Reset()
				if err := s.CallLiveTranscription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_live_transcription\"")
			}
		case "local_survivability_mode":
			if err := func() error {
				s.LocalSurvivabilityMode.Reset()
				if err := s.LocalSurvivabilityMode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"local_survivability_mode\"")
			}
		case "select_outbound_caller_id":
			if err := func() error {
				s.SelectOutboundCallerID.Reset()
				if err := s.SelectOutboundCallerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"select_outbound_caller_id\"")
			}
		case "personal_audio_library":
			if err := func() error {
				s.PersonalAudioLibrary.Reset()
				if err := s.PersonalAudioLibrary.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"personal_audio_library\"")
			}
		case "voicemail":
			if err := func() error {
				s.Voicemail.Reset()
				if err := s.Voicemail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voicemail\"")
			}
		case "voicemail_transcription":
			if err := func() error {
				s.VoicemailTranscription.Reset()
				if err := s.VoicemailTranscription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voicemail_transcription\"")
			}
		case "voicemail_notification_by_email":
			if err := func() error {
				s.VoicemailNotificationByEmail.Reset()
				if err := s.VoicemailNotificationByEmail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voicemail_notification_by_email\"")
			}
		case "shared_voicemail_notification_by_email":
			if err := func() error {
				s.SharedVoicemailNotificationByEmail.Reset()
				if err := s.SharedVoicemailNotificationByEmail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shared_voicemail_notification_by_email\"")
			}
		case "restricted_call_hours":
			if err := func() error {
				s.RestrictedCallHours.Reset()
				if err := s.RestrictedCallHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"restricted_call_hours\"")
			}
		case "allowed_call_locations":
			if err := func() error {
				s.AllowedCallLocations.Reset()
				if err := s.AllowedCallLocations.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allowed_call_locations\"")
			}
		case "check_voicemails_over_phone":
			if err := func() error {
				s.CheckVoicemailsOverPhone.Reset()
				if err := s.CheckVoicemailsOverPhone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"check_voicemails_over_phone\"")
			}
		case "auto_call_recording":
			if err := func() error {
				s.AutoCallRecording.Reset()
				if err := s.AutoCallRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_call_recording\"")
			}
		case "ad_hoc_call_recording":
			if err := func() error {
				s.AdHocCallRecording.Reset()
				if err := s.AdHocCallRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ad_hoc_call_recording\"")
			}
		case "zoom_phone_on_mobile":
			if err := func() error {
				s.ZoomPhoneOnMobile.Reset()
				if err := s.ZoomPhoneOnMobile.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_phone_on_mobile\"")
			}
		case "zoom_phone_on_pwa":
			if err := func() error {
				s.ZoomPhoneOnPwa.Reset()
				if err := s.ZoomPhoneOnPwa.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_phone_on_pwa\"")
			}
		case "sms_etiquette_tool":
			if err := func() error {
				s.SMSEtiquetteTool.Reset()
				if err := s.SMSEtiquetteTool.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sms_etiquette_tool\"")
			}
		case "outbound_calling":
			if err := func() error {
				s.OutboundCalling.Reset()
				if err := s.OutboundCalling.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"outbound_calling\"")
			}
		case "outbound_sms":
			if err := func() error {
				s.OutboundSMS.Reset()
				if err := s.OutboundSMS.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"outbound_sms\"")
			}
		case "international_calling":
			if err := func() error {
				s.InternationalCalling.Reset()
				if err := s.InternationalCalling.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"international_calling\"")
			}
		case "sms":
			if err := func() error {
				s.SMS.Reset()
				if err := s.SMS.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sms\"")
			}
		case "e2e_encryption":
			if err := func() error {
				s.E2eEncryption.Reset()
				if err := s.E2eEncryption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"e2e_encryption\"")
			}
		case "call_handling_forwarding":
			if err := func() error {
				s.CallHandlingForwarding.Reset()
				if err := s.CallHandlingForwarding.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_handling_forwarding\"")
			}
		case "call_overflow":
			if err := func() error {
				s.CallOverflow.Reset()
				if err := s.CallOverflow.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_overflow\"")
			}
		case "call_transferring":
			if err := func() error {
				s.CallTransferring.Reset()
				if err := s.CallTransferring.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_transferring\"")
			}
		case "elevate_to_meeting":
			if err := func() error {
				s.ElevateToMeeting.Reset()
				if err := s.ElevateToMeeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"elevate_to_meeting\"")
			}
		case "call_park":
			if err := func() error {
				s.CallPark.Reset()
				if err := s.CallPark.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_park\"")
			}
		case "hand_off_to_room":
			if err := func() error {
				s.HandOffToRoom.Reset()
				if err := s.HandOffToRoom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hand_off_to_room\"")
			}
		case "mobile_switch_to_carrier":
			if err := func() error {
				s.MobileSwitchToCarrier.Reset()
				if err := s.MobileSwitchToCarrier.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mobile_switch_to_carrier\"")
			}
		case "delegation":
			if err := func() error {
				s.Delegation.Reset()
				if err := s.Delegation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delegation\"")
			}
		case "audio_intercom":
			if err := func() error {
				s.AudioIntercom.Reset()
				if err := s.AudioIntercom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_intercom\"")
			}
		case "block_list_for_inbound_calls_and_messaging":
			if err := func() error {
				s.BlockListForInboundCallsAndMessaging.Reset()
				if err := s.BlockListForInboundCallsAndMessaging.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"block_list_for_inbound_calls_and_messaging\"")
			}
		case "block_calls_without_caller_id":
			if err := func() error {
				s.BlockCallsWithoutCallerID.Reset()
				if err := s.BlockCallsWithoutCallerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"block_calls_without_caller_id\"")
			}
		case "block_external_calls":
			if err := func() error {
				s.BlockExternalCalls.Reset()
				if err := s.BlockExternalCalls.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"block_external_calls\"")
			}
		case "peer_to_peer_media":
			if err := func() error {
				s.PeerToPeerMedia.Reset()
				if err := s.PeerToPeerMedia.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"peer_to_peer_media\"")
			}
		case "advanced_encryption":
			if err := func() error {
				s.AdvancedEncryption.Reset()
				if err := s.AdvancedEncryption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"advanced_encryption\"")
			}
		case "display_call_feedback_survey":
			if err := func() error {
				s.DisplayCallFeedbackSurvey.Reset()
				if err := s.DisplayCallFeedbackSurvey.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_call_feedback_survey\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupPhoneSettingsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupPhoneSettingsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupPhoneSettingsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupPhoneSettingsOKAdHocCallRecording) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupPhoneSettingsOKAdHocCallRecording) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
	{
		if s.RecordingTranscription.Set {
			e.FieldStart("recording_transcription")
			s.RecordingTranscription.Encode(e)
		}
	}
	{
		if s.AllowDownload.Set {
			e.FieldStart("allow_download")
			s.AllowDownload.Encode(e)
		}
	}
	{
		if s.AllowDelete.Set {
			e.FieldStart("allow_delete")
			s.AllowDelete.Encode(e)
		}
	}
	{
		if s.RecordingStartPrompt.Set {
			e.FieldStart("recording_start_prompt")
			s.RecordingStartPrompt.Encode(e)
		}
	}
	{
		if s.RecordingExplicitConsent.Set {
			e.FieldStart("recording_explicit_consent")
			s.RecordingExplicitConsent.Encode(e)
		}
	}
	{
		if s.PlayRecordingBeepTone.Set {
			e.FieldStart("play_recording_beep_tone")
			s.PlayRecordingBeepTone.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupPhoneSettingsOKAdHocCallRecording = [10]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
	4: "recording_transcription",
	5: "allow_download",
	6: "allow_delete",
	7: "recording_start_prompt",
	8: "recording_explicit_consent",
	9: "play_recording_beep_tone",
}

// Decode decodes GetGroupPhoneSettingsOKAdHocCallRecording from json.
func (s *GetGroupPhoneSettingsOKAdHocCallRecording) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupPhoneSettingsOKAdHocCallRecording to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		case "recording_transcription":
			if err := func() error {
				s.RecordingTranscription.Reset()
				if err := s.RecordingTranscription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_transcription\"")
			}
		case "allow_download":
			if err := func() error {
				s.AllowDownload.Reset()
				if err := s.AllowDownload.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_download\"")
			}
		case "allow_delete":
			if err := func() error {
				s.AllowDelete.Reset()
				if err := s.AllowDelete.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_delete\"")
			}
		case "recording_start_prompt":
			if err := func() error {
				s.RecordingStartPrompt.Reset()
				if err := s.RecordingStartPrompt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_start_prompt\"")
			}
		case "recording_explicit_consent":
			if err := func() error {
				s.RecordingExplicitConsent.Reset()
				if err := s.RecordingExplicitConsent.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_explicit_consent\"")
			}
		case "play_recording_beep_tone":
			if err := func() error {
				s.PlayRecordingBeepTone.Reset()
				if err := s.PlayRecordingBeepTone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_recording_beep_tone\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupPhoneSettingsOKAdHocCallRecording")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupPhoneSettingsOKAdHocCallRecording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupPhoneSettingsOKAdHocCallRecording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupPhoneSettingsOKAdHocCallRecordingPlayRecordingBeepTone) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupPhoneSettingsOKAdHocCallRecordingPlayRecordingBeepTone) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.PlayBeepVolume.Set {
			e.FieldStart("play_beep_volume")
			s.PlayBeepVolume.Encode(e)
		}
	}
	{
		if s.PlayBeepTimeInterval.Set {
			e.FieldStart("play_beep_time_interval")
			s.PlayBeepTimeInterval.Encode(e)
		}
	}
	{
		if s.PlayBeepMember.Set {
			e.FieldStart("play_beep_member")
			s.PlayBeepMember.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupPhoneSettingsOKAdHocCallRecordingPlayRecordingBeepTone = [4]string{
	0: "enable",
	1: "play_beep_volume",
	2: "play_beep_time_interval",
	3: "play_beep_member",
}

// Decode decodes GetGroupPhoneSettingsOKAdHocCallRecordingPlayRecordingBeepTone from json.
func (s *GetGroupPhoneSettingsOKAdHocCallRecordingPlayRecordingBeepTone) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupPhoneSettingsOKAdHocCallRecordingPlayRecordingBeepTone to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "play_beep_volume":
			if err := func() error {
				s.PlayBeepVolume.Reset()
				if err := s.PlayBeepVolume.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_beep_volume\"")
			}
		case "play_beep_time_interval":
			if err := func() error {
				s.PlayBeepTimeInterval.Reset()
				if err := s.PlayBeepTimeInterval.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_beep_time_interval\"")
			}
		case "play_beep_member":
			if err := func() error {
				s.PlayBeepMember.Reset()
				if err := s.PlayBeepMember.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_beep_member\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupPhoneSettingsOKAdHocCallRecordingPlayRecordingBeepTone")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupPhoneSettingsOKAdHocCallRecordingPlayRecordingBeepTone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupPhoneSettingsOKAdHocCallRecordingPlayRecordingBeepTone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupPhoneSettingsOKAdvancedEncryption) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupPhoneSettingsOKAdvancedEncryption) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
	{
		if s.DisableIncomingUnencryptedVoicemail.Set {
			e.FieldStart("disable_incoming_unencrypted_voicemail")
			s.DisableIncomingUnencryptedVoicemail.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupPhoneSettingsOKAdvancedEncryption = [5]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
	4: "disable_incoming_unencrypted_voicemail",
}

// Decode decodes GetGroupPhoneSettingsOKAdvancedEncryption from json.
func (s *GetGroupPhoneSettingsOKAdvancedEncryption) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupPhoneSettingsOKAdvancedEncryption to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		case "disable_incoming_unencrypted_voicemail":
			if err := func() error {
				s.DisableIncomingUnencryptedVoicemail.Reset()
				if err := s.DisableIncomingUnencryptedVoicemail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"disable_incoming_unencrypted_voicemail\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupPhoneSettingsOKAdvancedEncryption")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupPhoneSettingsOKAdvancedEncryption) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupPhoneSettingsOKAdvancedEncryption) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupPhoneSettingsOKAllowedCallLocations) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupPhoneSettingsOKAllowedCallLocations) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
	{
		if s.LocationsApplied.Set {
			e.FieldStart("locations_applied")
			s.LocationsApplied.Encode(e)
		}
	}
	{
		if s.AllowInternalCalls.Set {
			e.FieldStart("allow_internal_calls")
			s.AllowInternalCalls.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupPhoneSettingsOKAllowedCallLocations = [6]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
	4: "locations_applied",
	5: "allow_internal_calls",
}

// Decode decodes GetGroupPhoneSettingsOKAllowedCallLocations from json.
func (s *GetGroupPhoneSettingsOKAllowedCallLocations) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupPhoneSettingsOKAllowedCallLocations to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		case "locations_applied":
			if err := func() error {
				s.LocationsApplied.Reset()
				if err := s.LocationsApplied.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locations_applied\"")
			}
		case "allow_internal_calls":
			if err := func() error {
				s.AllowInternalCalls.Reset()
				if err := s.AllowInternalCalls.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_internal_calls\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupPhoneSettingsOKAllowedCallLocations")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupPhoneSettingsOKAllowedCallLocations) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupPhoneSettingsOKAllowedCallLocations) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupPhoneSettingsOKAudioIntercom) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupPhoneSettingsOKAudioIntercom) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupPhoneSettingsOKAudioIntercom = [4]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
}

// Decode decodes GetGroupPhoneSettingsOKAudioIntercom from json.
func (s *GetGroupPhoneSettingsOKAudioIntercom) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupPhoneSettingsOKAudioIntercom to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupPhoneSettingsOKAudioIntercom")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupPhoneSettingsOKAudioIntercom) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupPhoneSettingsOKAudioIntercom) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupPhoneSettingsOKAutoCallRecording) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupPhoneSettingsOKAutoCallRecording) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.RecordingCalls.Set {
			e.FieldStart("recording_calls")
			s.RecordingCalls.Encode(e)
		}
	}
	{
		if s.RecordingTranscription.Set {
			e.FieldStart("recording_transcription")
			s.RecordingTranscription.Encode(e)
		}
	}
	{
		if s.RecordingStartPrompt.Set {
			e.FieldStart("recording_start_prompt")
			s.RecordingStartPrompt.Encode(e)
		}
	}
	{
		if s.RecordingStartPromptAudioID.Set {
			e.FieldStart("recording_start_prompt_audio_id")
			s.RecordingStartPromptAudioID.Encode(e)
		}
	}
	{
		if s.RecordingExplicitConsent.Set {
			e.FieldStart("recording_explicit_consent")
			s.RecordingExplicitConsent.Encode(e)
		}
	}
	{
		if s.AllowStopResumeRecording.Set {
			e.FieldStart("allow_stop_resume_recording")
			s.AllowStopResumeRecording.Encode(e)
		}
	}
	{
		if s.DisconnectOnRecordingFailure.Set {
			e.FieldStart("disconnect_on_recording_failure")
			s.DisconnectOnRecordingFailure.Encode(e)
		}
	}
	{
		if s.PlayRecordingBeepTone.Set {
			e.FieldStart("play_recording_beep_tone")
			s.PlayRecordingBeepTone.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupPhoneSettingsOKAutoCallRecording = [11]string{
	0:  "enable",
	1:  "locked",
	2:  "locked_by",
	3:  "recording_calls",
	4:  "recording_transcription",
	5:  "recording_start_prompt",
	6:  "recording_start_prompt_audio_id",
	7:  "recording_explicit_consent",
	8:  "allow_stop_resume_recording",
	9:  "disconnect_on_recording_failure",
	10: "play_recording_beep_tone",
}

// Decode decodes GetGroupPhoneSettingsOKAutoCallRecording from json.
func (s *GetGroupPhoneSettingsOKAutoCallRecording) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupPhoneSettingsOKAutoCallRecording to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "recording_calls":
			if err := func() error {
				s.RecordingCalls.Reset()
				if err := s.RecordingCalls.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_calls\"")
			}
		case "recording_transcription":
			if err := func() error {
				s.RecordingTranscription.Reset()
				if err := s.RecordingTranscription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_transcription\"")
			}
		case "recording_start_prompt":
			if err := func() error {
				s.RecordingStartPrompt.Reset()
				if err := s.RecordingStartPrompt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_start_prompt\"")
			}
		case "recording_start_prompt_audio_id":
			if err := func() error {
				s.RecordingStartPromptAudioID.Reset()
				if err := s.RecordingStartPromptAudioID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_start_prompt_audio_id\"")
			}
		case "recording_explicit_consent":
			if err := func() error {
				s.RecordingExplicitConsent.Reset()
				if err := s.RecordingExplicitConsent.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_explicit_consent\"")
			}
		case "allow_stop_resume_recording":
			if err := func() error {
				s.AllowStopResumeRecording.Reset()
				if err := s.AllowStopResumeRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_stop_resume_recording\"")
			}
		case "disconnect_on_recording_failure":
			if err := func() error {
				s.DisconnectOnRecordingFailure.Reset()
				if err := s.DisconnectOnRecordingFailure.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"disconnect_on_recording_failure\"")
			}
		case "play_recording_beep_tone":
			if err := func() error {
				s.PlayRecordingBeepTone.Reset()
				if err := s.PlayRecordingBeepTone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_recording_beep_tone\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupPhoneSettingsOKAutoCallRecording")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupPhoneSettingsOKAutoCallRecording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupPhoneSettingsOKAutoCallRecording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupPhoneSettingsOKAutoCallRecordingPlayRecordingBeepTone) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupPhoneSettingsOKAutoCallRecordingPlayRecordingBeepTone) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.PlayBeepVolume.Set {
			e.FieldStart("play_beep_volume")
			s.PlayBeepVolume.Encode(e)
		}
	}
	{
		if s.PlayBeepTimeInterval.Set {
			e.FieldStart("play_beep_time_interval")
			s.PlayBeepTimeInterval.Encode(e)
		}
	}
	{
		if s.PlayBeepMember.Set {
			e.FieldStart("play_beep_member")
			s.PlayBeepMember.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupPhoneSettingsOKAutoCallRecordingPlayRecordingBeepTone = [4]string{
	0: "enable",
	1: "play_beep_volume",
	2: "play_beep_time_interval",
	3: "play_beep_member",
}

// Decode decodes GetGroupPhoneSettingsOKAutoCallRecordingPlayRecordingBeepTone from json.
func (s *GetGroupPhoneSettingsOKAutoCallRecordingPlayRecordingBeepTone) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupPhoneSettingsOKAutoCallRecordingPlayRecordingBeepTone to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "play_beep_volume":
			if err := func() error {
				s.PlayBeepVolume.Reset()
				if err := s.PlayBeepVolume.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_beep_volume\"")
			}
		case "play_beep_time_interval":
			if err := func() error {
				s.PlayBeepTimeInterval.Reset()
				if err := s.PlayBeepTimeInterval.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_beep_time_interval\"")
			}
		case "play_beep_member":
			if err := func() error {
				s.PlayBeepMember.Reset()
				if err := s.PlayBeepMember.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_beep_member\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupPhoneSettingsOKAutoCallRecordingPlayRecordingBeepTone")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupPhoneSettingsOKAutoCallRecordingPlayRecordingBeepTone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupPhoneSettingsOKAutoCallRecordingPlayRecordingBeepTone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupPhoneSettingsOKBlockCallsWithoutCallerID) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupPhoneSettingsOKBlockCallsWithoutCallerID) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupPhoneSettingsOKBlockCallsWithoutCallerID = [4]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
}

// Decode decodes GetGroupPhoneSettingsOKBlockCallsWithoutCallerID from json.
func (s *GetGroupPhoneSettingsOKBlockCallsWithoutCallerID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupPhoneSettingsOKBlockCallsWithoutCallerID to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupPhoneSettingsOKBlockCallsWithoutCallerID")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupPhoneSettingsOKBlockCallsWithoutCallerID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupPhoneSettingsOKBlockCallsWithoutCallerID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupPhoneSettingsOKBlockExternalCalls) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupPhoneSettingsOKBlockExternalCalls) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
	{
		if s.BlockBusinessHours.Set {
			e.FieldStart("block_business_hours")
			s.BlockBusinessHours.Encode(e)
		}
	}
	{
		if s.BlockClosedHours.Set {
			e.FieldStart("block_closed_hours")
			s.BlockClosedHours.Encode(e)
		}
	}
	{
		if s.BlockHolidayHours.Set {
			e.FieldStart("block_holiday_hours")
			s.BlockHolidayHours.Encode(e)
		}
	}
	{
		if s.BlockCallAction.Set {
			e.FieldStart("block_call_action")
			s.BlockCallAction.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupPhoneSettingsOKBlockExternalCalls = [8]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
	4: "block_business_hours",
	5: "block_closed_hours",
	6: "block_holiday_hours",
	7: "block_call_action",
}

// Decode decodes GetGroupPhoneSettingsOKBlockExternalCalls from json.
func (s *GetGroupPhoneSettingsOKBlockExternalCalls) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupPhoneSettingsOKBlockExternalCalls to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		case "block_business_hours":
			if err := func() error {
				s.BlockBusinessHours.Reset()
				if err := s.BlockBusinessHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"block_business_hours\"")
			}
		case "block_closed_hours":
			if err := func() error {
				s.BlockClosedHours.Reset()
				if err := s.BlockClosedHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"block_closed_hours\"")
			}
		case "block_holiday_hours":
			if err := func() error {
				s.BlockHolidayHours.Reset()
				if err := s.BlockHolidayHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"block_holiday_hours\"")
			}
		case "block_call_action":
			if err := func() error {
				s.BlockCallAction.Reset()
				if err := s.BlockCallAction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"block_call_action\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupPhoneSettingsOKBlockExternalCalls")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupPhoneSettingsOKBlockExternalCalls) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupPhoneSettingsOKBlockExternalCalls) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupPhoneSettingsOKBlockListForInboundCallsAndMessaging) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupPhoneSettingsOKBlockListForInboundCallsAndMessaging) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupPhoneSettingsOKBlockListForInboundCallsAndMessaging = [4]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
}

// Decode decodes GetGroupPhoneSettingsOKBlockListForInboundCallsAndMessaging from json.
func (s *GetGroupPhoneSettingsOKBlockListForInboundCallsAndMessaging) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupPhoneSettingsOKBlockListForInboundCallsAndMessaging to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupPhoneSettingsOKBlockListForInboundCallsAndMessaging")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupPhoneSettingsOKBlockListForInboundCallsAndMessaging) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupPhoneSettingsOKBlockListForInboundCallsAndMessaging) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupPhoneSettingsOKCallHandlingForwarding) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupPhoneSettingsOKCallHandlingForwarding) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
	{
		if s.CallForwardingType.Set {
			e.FieldStart("call_forwarding_type")
			s.CallForwardingType.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupPhoneSettingsOKCallHandlingForwarding = [5]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
	4: "call_forwarding_type",
}

// Decode decodes GetGroupPhoneSettingsOKCallHandlingForwarding from json.
func (s *GetGroupPhoneSettingsOKCallHandlingForwarding) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupPhoneSettingsOKCallHandlingForwarding to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		case "call_forwarding_type":
			if err := func() error {
				s.CallForwardingType.Reset()
				if err := s.CallForwardingType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_forwarding_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupPhoneSettingsOKCallHandlingForwarding")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupPhoneSettingsOKCallHandlingForwarding) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupPhoneSettingsOKCallHandlingForwarding) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupPhoneSettingsOKCallLiveTranscription) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupPhoneSettingsOKCallLiveTranscription) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
	{
		if s.TranscriptionStartPrompt.Set {
			e.FieldStart("transcription_start_prompt")
			s.TranscriptionStartPrompt.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupPhoneSettingsOKCallLiveTranscription = [5]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
	4: "transcription_start_prompt",
}

// Decode decodes GetGroupPhoneSettingsOKCallLiveTranscription from json.
func (s *GetGroupPhoneSettingsOKCallLiveTranscription) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupPhoneSettingsOKCallLiveTranscription to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		case "transcription_start_prompt":
			if err := func() error {
				s.TranscriptionStartPrompt.Reset()
				if err := s.TranscriptionStartPrompt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transcription_start_prompt\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupPhoneSettingsOKCallLiveTranscription")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupPhoneSettingsOKCallLiveTranscription) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupPhoneSettingsOKCallLiveTranscription) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupPhoneSettingsOKCallLiveTranscriptionTranscriptionStartPrompt) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupPhoneSettingsOKCallLiveTranscriptionTranscriptionStartPrompt) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.AudioID.Set {
			e.FieldStart("audio_id")
			s.AudioID.Encode(e)
		}
	}
	{
		if s.AudioName.Set {
			e.FieldStart("audio_name")
			s.AudioName.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupPhoneSettingsOKCallLiveTranscriptionTranscriptionStartPrompt = [3]string{
	0: "enable",
	1: "audio_id",
	2: "audio_name",
}

// Decode decodes GetGroupPhoneSettingsOKCallLiveTranscriptionTranscriptionStartPrompt from json.
func (s *GetGroupPhoneSettingsOKCallLiveTranscriptionTranscriptionStartPrompt) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupPhoneSettingsOKCallLiveTranscriptionTranscriptionStartPrompt to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "audio_id":
			if err := func() error {
				s.AudioID.Reset()
				if err := s.AudioID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_id\"")
			}
		case "audio_name":
			if err := func() error {
				s.AudioName.Reset()
				if err := s.AudioName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupPhoneSettingsOKCallLiveTranscriptionTranscriptionStartPrompt")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupPhoneSettingsOKCallLiveTranscriptionTranscriptionStartPrompt) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupPhoneSettingsOKCallLiveTranscriptionTranscriptionStartPrompt) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupPhoneSettingsOKCallOverflow) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupPhoneSettingsOKCallOverflow) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
	{
		if s.CallOverflowType.Set {
			e.FieldStart("call_overflow_type")
			s.CallOverflowType.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupPhoneSettingsOKCallOverflow = [5]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
	4: "call_overflow_type",
}

// Decode decodes GetGroupPhoneSettingsOKCallOverflow from json.
func (s *GetGroupPhoneSettingsOKCallOverflow) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupPhoneSettingsOKCallOverflow to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		case "call_overflow_type":
			if err := func() error {
				s.CallOverflowType.Reset()
				if err := s.CallOverflowType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_overflow_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupPhoneSettingsOKCallOverflow")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupPhoneSettingsOKCallOverflow) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupPhoneSettingsOKCallOverflow) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupPhoneSettingsOKCallPark) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupPhoneSettingsOKCallPark) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.ExpirationPeriod.Set {
			e.FieldStart("expiration_period")
			s.ExpirationPeriod.Encode(e)
		}
	}
	{
		if s.CallNotPickedUpAction.Set {
			e.FieldStart("call_not_picked_up_action")
			s.CallNotPickedUpAction.Encode(e)
		}
	}
	{
		if s.ForwardTo.Set {
			e.FieldStart("forward_to")
			s.ForwardTo.Encode(e)
		}
	}
	{
		if s.Sequence.Set {
			e.FieldStart("sequence")
			s.Sequence.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupPhoneSettingsOKCallPark = [8]string{
	0: "enable",
	1: "expiration_period",
	2: "call_not_picked_up_action",
	3: "forward_to",
	4: "sequence",
	5: "locked",
	6: "locked_by",
	7: "modified",
}

// Decode decodes GetGroupPhoneSettingsOKCallPark from json.
func (s *GetGroupPhoneSettingsOKCallPark) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupPhoneSettingsOKCallPark to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "expiration_period":
			if err := func() error {
				s.ExpirationPeriod.Reset()
				if err := s.ExpirationPeriod.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expiration_period\"")
			}
		case "call_not_picked_up_action":
			if err := func() error {
				s.CallNotPickedUpAction.Reset()
				if err := s.CallNotPickedUpAction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_not_picked_up_action\"")
			}
		case "forward_to":
			if err := func() error {
				s.ForwardTo.Reset()
				if err := s.ForwardTo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward_to\"")
			}
		case "sequence":
			if err := func() error {
				s.Sequence.Reset()
				if err := s.Sequence.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sequence\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupPhoneSettingsOKCallPark")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupPhoneSettingsOKCallPark) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupPhoneSettingsOKCallPark) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupPhoneSettingsOKCallParkForwardTo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupPhoneSettingsOKCallParkForwardTo) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ExtensionType.Set {
			e.FieldStart("extension_type")
			s.ExtensionType.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupPhoneSettingsOKCallParkForwardTo = [5]string{
	0: "display_name",
	1: "extension_id",
	2: "extension_number",
	3: "extension_type",
	4: "id",
}

// Decode decodes GetGroupPhoneSettingsOKCallParkForwardTo from json.
func (s *GetGroupPhoneSettingsOKCallParkForwardTo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupPhoneSettingsOKCallParkForwardTo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "extension_type":
			if err := func() error {
				s.ExtensionType.Reset()
				if err := s.ExtensionType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_type\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupPhoneSettingsOKCallParkForwardTo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupPhoneSettingsOKCallParkForwardTo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupPhoneSettingsOKCallParkForwardTo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupPhoneSettingsOKCallTransferring) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupPhoneSettingsOKCallTransferring) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
	{
		if s.CallTransferringType.Set {
			e.FieldStart("call_transferring_type")
			s.CallTransferringType.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupPhoneSettingsOKCallTransferring = [5]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
	4: "call_transferring_type",
}

// Decode decodes GetGroupPhoneSettingsOKCallTransferring from json.
func (s *GetGroupPhoneSettingsOKCallTransferring) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupPhoneSettingsOKCallTransferring to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		case "call_transferring_type":
			if err := func() error {
				s.CallTransferringType.Reset()
				if err := s.CallTransferringType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_transferring_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupPhoneSettingsOKCallTransferring")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupPhoneSettingsOKCallTransferring) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupPhoneSettingsOKCallTransferring) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupPhoneSettingsOKCheckVoicemailsOverPhone) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupPhoneSettingsOKCheckVoicemailsOverPhone) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupPhoneSettingsOKCheckVoicemailsOverPhone = [4]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
}

// Decode decodes GetGroupPhoneSettingsOKCheckVoicemailsOverPhone from json.
func (s *GetGroupPhoneSettingsOKCheckVoicemailsOverPhone) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupPhoneSettingsOKCheckVoicemailsOverPhone to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupPhoneSettingsOKCheckVoicemailsOverPhone")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupPhoneSettingsOKCheckVoicemailsOverPhone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupPhoneSettingsOKCheckVoicemailsOverPhone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupPhoneSettingsOKDelegation) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupPhoneSettingsOKDelegation) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupPhoneSettingsOKDelegation = [4]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
}

// Decode decodes GetGroupPhoneSettingsOKDelegation from json.
func (s *GetGroupPhoneSettingsOKDelegation) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupPhoneSettingsOKDelegation to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupPhoneSettingsOKDelegation")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupPhoneSettingsOKDelegation) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupPhoneSettingsOKDelegation) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupPhoneSettingsOKDisplayCallFeedbackSurvey) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupPhoneSettingsOKDisplayCallFeedbackSurvey) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
	{
		if s.FeedbackType.Set {
			e.FieldStart("feedback_type")
			s.FeedbackType.Encode(e)
		}
	}
	{
		if s.FeedbackMos.Set {
			e.FieldStart("feedback_mos")
			s.FeedbackMos.Encode(e)
		}
	}
	{
		if s.FeedbackDuration.Set {
			e.FieldStart("feedback_duration")
			s.FeedbackDuration.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupPhoneSettingsOKDisplayCallFeedbackSurvey = [7]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
	4: "feedback_type",
	5: "feedback_mos",
	6: "feedback_duration",
}

// Decode decodes GetGroupPhoneSettingsOKDisplayCallFeedbackSurvey from json.
func (s *GetGroupPhoneSettingsOKDisplayCallFeedbackSurvey) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupPhoneSettingsOKDisplayCallFeedbackSurvey to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		case "feedback_type":
			if err := func() error {
				s.FeedbackType.Reset()
				if err := s.FeedbackType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"feedback_type\"")
			}
		case "feedback_mos":
			if err := func() error {
				s.FeedbackMos.Reset()
				if err := s.FeedbackMos.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"feedback_mos\"")
			}
		case "feedback_duration":
			if err := func() error {
				s.FeedbackDuration.Reset()
				if err := s.FeedbackDuration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"feedback_duration\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupPhoneSettingsOKDisplayCallFeedbackSurvey")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupPhoneSettingsOKDisplayCallFeedbackSurvey) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupPhoneSettingsOKDisplayCallFeedbackSurvey) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupPhoneSettingsOKDisplayCallFeedbackSurveyFeedbackDuration) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupPhoneSettingsOKDisplayCallFeedbackSurveyFeedbackDuration) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Min.Set {
			e.FieldStart("min")
			s.Min.Encode(e)
		}
	}
	{
		if s.Max.Set {
			e.FieldStart("max")
			s.Max.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupPhoneSettingsOKDisplayCallFeedbackSurveyFeedbackDuration = [3]string{
	0: "enable",
	1: "min",
	2: "max",
}

// Decode decodes GetGroupPhoneSettingsOKDisplayCallFeedbackSurveyFeedbackDuration from json.
func (s *GetGroupPhoneSettingsOKDisplayCallFeedbackSurveyFeedbackDuration) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupPhoneSettingsOKDisplayCallFeedbackSurveyFeedbackDuration to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "min":
			if err := func() error {
				s.Min.Reset()
				if err := s.Min.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"min\"")
			}
		case "max":
			if err := func() error {
				s.Max.Reset()
				if err := s.Max.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"max\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupPhoneSettingsOKDisplayCallFeedbackSurveyFeedbackDuration")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupPhoneSettingsOKDisplayCallFeedbackSurveyFeedbackDuration) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupPhoneSettingsOKDisplayCallFeedbackSurveyFeedbackDuration) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupPhoneSettingsOKDisplayCallFeedbackSurveyFeedbackMos) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupPhoneSettingsOKDisplayCallFeedbackSurveyFeedbackMos) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Min.Set {
			e.FieldStart("min")
			s.Min.Encode(e)
		}
	}
	{
		if s.Max.Set {
			e.FieldStart("max")
			s.Max.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupPhoneSettingsOKDisplayCallFeedbackSurveyFeedbackMos = [3]string{
	0: "enable",
	1: "min",
	2: "max",
}

// Decode decodes GetGroupPhoneSettingsOKDisplayCallFeedbackSurveyFeedbackMos from json.
func (s *GetGroupPhoneSettingsOKDisplayCallFeedbackSurveyFeedbackMos) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupPhoneSettingsOKDisplayCallFeedbackSurveyFeedbackMos to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "min":
			if err := func() error {
				s.Min.Reset()
				if err := s.Min.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"min\"")
			}
		case "max":
			if err := func() error {
				s.Max.Reset()
				if err := s.Max.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"max\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupPhoneSettingsOKDisplayCallFeedbackSurveyFeedbackMos")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupPhoneSettingsOKDisplayCallFeedbackSurveyFeedbackMos) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupPhoneSettingsOKDisplayCallFeedbackSurveyFeedbackMos) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupPhoneSettingsOKE2eEncryption) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupPhoneSettingsOKE2eEncryption) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupPhoneSettingsOKE2eEncryption = [4]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
}

// Decode decodes GetGroupPhoneSettingsOKE2eEncryption from json.
func (s *GetGroupPhoneSettingsOKE2eEncryption) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupPhoneSettingsOKE2eEncryption to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupPhoneSettingsOKE2eEncryption")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupPhoneSettingsOKE2eEncryption) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupPhoneSettingsOKE2eEncryption) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupPhoneSettingsOKElevateToMeeting) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupPhoneSettingsOKElevateToMeeting) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupPhoneSettingsOKElevateToMeeting = [4]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
}

// Decode decodes GetGroupPhoneSettingsOKElevateToMeeting from json.
func (s *GetGroupPhoneSettingsOKElevateToMeeting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupPhoneSettingsOKElevateToMeeting to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupPhoneSettingsOKElevateToMeeting")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupPhoneSettingsOKElevateToMeeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupPhoneSettingsOKElevateToMeeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupPhoneSettingsOKHandOffToRoom) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupPhoneSettingsOKHandOffToRoom) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupPhoneSettingsOKHandOffToRoom = [4]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
}

// Decode decodes GetGroupPhoneSettingsOKHandOffToRoom from json.
func (s *GetGroupPhoneSettingsOKHandOffToRoom) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupPhoneSettingsOKHandOffToRoom to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupPhoneSettingsOKHandOffToRoom")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupPhoneSettingsOKHandOffToRoom) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupPhoneSettingsOKHandOffToRoom) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupPhoneSettingsOKInternationalCalling) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupPhoneSettingsOKInternationalCalling) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupPhoneSettingsOKInternationalCalling = [4]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
}

// Decode decodes GetGroupPhoneSettingsOKInternationalCalling from json.
func (s *GetGroupPhoneSettingsOKInternationalCalling) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupPhoneSettingsOKInternationalCalling to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupPhoneSettingsOKInternationalCalling")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupPhoneSettingsOKInternationalCalling) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupPhoneSettingsOKInternationalCalling) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupPhoneSettingsOKLocalSurvivabilityMode) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupPhoneSettingsOKLocalSurvivabilityMode) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupPhoneSettingsOKLocalSurvivabilityMode = [4]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
}

// Decode decodes GetGroupPhoneSettingsOKLocalSurvivabilityMode from json.
func (s *GetGroupPhoneSettingsOKLocalSurvivabilityMode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupPhoneSettingsOKLocalSurvivabilityMode to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupPhoneSettingsOKLocalSurvivabilityMode")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupPhoneSettingsOKLocalSurvivabilityMode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupPhoneSettingsOKLocalSurvivabilityMode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupPhoneSettingsOKMobileSwitchToCarrier) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupPhoneSettingsOKMobileSwitchToCarrier) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupPhoneSettingsOKMobileSwitchToCarrier = [4]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
}

// Decode decodes GetGroupPhoneSettingsOKMobileSwitchToCarrier from json.
func (s *GetGroupPhoneSettingsOKMobileSwitchToCarrier) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupPhoneSettingsOKMobileSwitchToCarrier to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupPhoneSettingsOKMobileSwitchToCarrier")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupPhoneSettingsOKMobileSwitchToCarrier) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupPhoneSettingsOKMobileSwitchToCarrier) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupPhoneSettingsOKOutboundCalling) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupPhoneSettingsOKOutboundCalling) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupPhoneSettingsOKOutboundCalling = [4]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
}

// Decode decodes GetGroupPhoneSettingsOKOutboundCalling from json.
func (s *GetGroupPhoneSettingsOKOutboundCalling) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupPhoneSettingsOKOutboundCalling to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupPhoneSettingsOKOutboundCalling")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupPhoneSettingsOKOutboundCalling) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupPhoneSettingsOKOutboundCalling) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupPhoneSettingsOKOutboundSMS) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupPhoneSettingsOKOutboundSMS) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupPhoneSettingsOKOutboundSMS = [4]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
}

// Decode decodes GetGroupPhoneSettingsOKOutboundSMS from json.
func (s *GetGroupPhoneSettingsOKOutboundSMS) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupPhoneSettingsOKOutboundSMS to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupPhoneSettingsOKOutboundSMS")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupPhoneSettingsOKOutboundSMS) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupPhoneSettingsOKOutboundSMS) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupPhoneSettingsOKPeerToPeerMedia) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupPhoneSettingsOKPeerToPeerMedia) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupPhoneSettingsOKPeerToPeerMedia = [4]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
}

// Decode decodes GetGroupPhoneSettingsOKPeerToPeerMedia from json.
func (s *GetGroupPhoneSettingsOKPeerToPeerMedia) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupPhoneSettingsOKPeerToPeerMedia to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupPhoneSettingsOKPeerToPeerMedia")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupPhoneSettingsOKPeerToPeerMedia) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupPhoneSettingsOKPeerToPeerMedia) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupPhoneSettingsOKPersonalAudioLibrary) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupPhoneSettingsOKPersonalAudioLibrary) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
	{
		if s.AllowMusicOnHoldCustomization.Set {
			e.FieldStart("allow_music_on_hold_customization")
			s.AllowMusicOnHoldCustomization.Encode(e)
		}
	}
	{
		if s.AllowVoicemailAndMessageGreetingCustomization.Set {
			e.FieldStart("allow_voicemail_and_message_greeting_customization")
			s.AllowVoicemailAndMessageGreetingCustomization.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupPhoneSettingsOKPersonalAudioLibrary = [6]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
	4: "allow_music_on_hold_customization",
	5: "allow_voicemail_and_message_greeting_customization",
}

// Decode decodes GetGroupPhoneSettingsOKPersonalAudioLibrary from json.
func (s *GetGroupPhoneSettingsOKPersonalAudioLibrary) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupPhoneSettingsOKPersonalAudioLibrary to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		case "allow_music_on_hold_customization":
			if err := func() error {
				s.AllowMusicOnHoldCustomization.Reset()
				if err := s.AllowMusicOnHoldCustomization.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_music_on_hold_customization\"")
			}
		case "allow_voicemail_and_message_greeting_customization":
			if err := func() error {
				s.AllowVoicemailAndMessageGreetingCustomization.Reset()
				if err := s.AllowVoicemailAndMessageGreetingCustomization.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_voicemail_and_message_greeting_customization\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupPhoneSettingsOKPersonalAudioLibrary")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupPhoneSettingsOKPersonalAudioLibrary) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupPhoneSettingsOKPersonalAudioLibrary) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupPhoneSettingsOKRestrictedCallHours) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupPhoneSettingsOKRestrictedCallHours) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
	{
		if s.TimeZone.Set {
			e.FieldStart("time_zone")
			s.TimeZone.Encode(e)
		}
	}
	{
		if s.RestrictedHoursApplied.Set {
			e.FieldStart("restricted_hours_applied")
			s.RestrictedHoursApplied.Encode(e)
		}
	}
	{
		if s.RestrictedHolidayHoursApplied.Set {
			e.FieldStart("restricted_holiday_hours_applied")
			s.RestrictedHolidayHoursApplied.Encode(e)
		}
	}
	{
		if s.AllowInternalCalls.Set {
			e.FieldStart("allow_internal_calls")
			s.AllowInternalCalls.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupPhoneSettingsOKRestrictedCallHours = [8]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
	4: "time_zone",
	5: "restricted_hours_applied",
	6: "restricted_holiday_hours_applied",
	7: "allow_internal_calls",
}

// Decode decodes GetGroupPhoneSettingsOKRestrictedCallHours from json.
func (s *GetGroupPhoneSettingsOKRestrictedCallHours) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupPhoneSettingsOKRestrictedCallHours to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		case "time_zone":
			if err := func() error {
				s.TimeZone.Reset()
				if err := s.TimeZone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"time_zone\"")
			}
		case "restricted_hours_applied":
			if err := func() error {
				s.RestrictedHoursApplied.Reset()
				if err := s.RestrictedHoursApplied.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"restricted_hours_applied\"")
			}
		case "restricted_holiday_hours_applied":
			if err := func() error {
				s.RestrictedHolidayHoursApplied.Reset()
				if err := s.RestrictedHolidayHoursApplied.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"restricted_holiday_hours_applied\"")
			}
		case "allow_internal_calls":
			if err := func() error {
				s.AllowInternalCalls.Reset()
				if err := s.AllowInternalCalls.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_internal_calls\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupPhoneSettingsOKRestrictedCallHours")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupPhoneSettingsOKRestrictedCallHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupPhoneSettingsOKRestrictedCallHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupPhoneSettingsOKRestrictedCallHoursTimeZone) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupPhoneSettingsOKRestrictedCallHoursTimeZone) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupPhoneSettingsOKRestrictedCallHoursTimeZone = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes GetGroupPhoneSettingsOKRestrictedCallHoursTimeZone from json.
func (s *GetGroupPhoneSettingsOKRestrictedCallHoursTimeZone) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupPhoneSettingsOKRestrictedCallHoursTimeZone to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupPhoneSettingsOKRestrictedCallHoursTimeZone")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupPhoneSettingsOKRestrictedCallHoursTimeZone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupPhoneSettingsOKRestrictedCallHoursTimeZone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupPhoneSettingsOKSMS) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupPhoneSettingsOKSMS) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.InternationalSMS.Set {
			e.FieldStart("international_sms")
			s.InternationalSMS.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupPhoneSettingsOKSMS = [5]string{
	0: "enable",
	1: "international_sms",
	2: "locked",
	3: "locked_by",
	4: "modified",
}

// Decode decodes GetGroupPhoneSettingsOKSMS from json.
func (s *GetGroupPhoneSettingsOKSMS) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupPhoneSettingsOKSMS to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "international_sms":
			if err := func() error {
				s.InternationalSMS.Reset()
				if err := s.InternationalSMS.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"international_sms\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupPhoneSettingsOKSMS")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupPhoneSettingsOKSMS) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupPhoneSettingsOKSMS) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupPhoneSettingsOKSMSEtiquetteTool) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupPhoneSettingsOKSMSEtiquetteTool) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
	{
		if s.SMSEtiquettePolicy != nil {
			e.FieldStart("sms_etiquette_policy")
			e.ArrStart()
			for _, elem := range s.SMSEtiquettePolicy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGetGroupPhoneSettingsOKSMSEtiquetteTool = [3]string{
	0: "enable",
	1: "modified",
	2: "sms_etiquette_policy",
}

// Decode decodes GetGroupPhoneSettingsOKSMSEtiquetteTool from json.
func (s *GetGroupPhoneSettingsOKSMSEtiquetteTool) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupPhoneSettingsOKSMSEtiquetteTool to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		case "sms_etiquette_policy":
			if err := func() error {
				s.SMSEtiquettePolicy = make([]GetGroupPhoneSettingsOKSMSEtiquetteToolSMSEtiquettePolicyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetGroupPhoneSettingsOKSMSEtiquetteToolSMSEtiquettePolicyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.SMSEtiquettePolicy = append(s.SMSEtiquettePolicy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sms_etiquette_policy\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupPhoneSettingsOKSMSEtiquetteTool")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupPhoneSettingsOKSMSEtiquetteTool) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupPhoneSettingsOKSMSEtiquetteTool) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupPhoneSettingsOKSMSEtiquetteToolSMSEtiquettePolicyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupPhoneSettingsOKSMSEtiquetteToolSMSEtiquettePolicyItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.Rule.Set {
			e.FieldStart("rule")
			s.Rule.Encode(e)
		}
	}
	{
		if s.Content.Set {
			e.FieldStart("content")
			s.Content.Encode(e)
		}
	}
	{
		if s.Action.Set {
			e.FieldStart("action")
			s.Action.Encode(e)
		}
	}
	{
		if s.Active.Set {
			e.FieldStart("active")
			s.Active.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupPhoneSettingsOKSMSEtiquetteToolSMSEtiquettePolicyItem = [7]string{
	0: "id",
	1: "name",
	2: "description",
	3: "rule",
	4: "content",
	5: "action",
	6: "active",
}

// Decode decodes GetGroupPhoneSettingsOKSMSEtiquetteToolSMSEtiquettePolicyItem from json.
func (s *GetGroupPhoneSettingsOKSMSEtiquetteToolSMSEtiquettePolicyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupPhoneSettingsOKSMSEtiquetteToolSMSEtiquettePolicyItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "rule":
			if err := func() error {
				s.Rule.Reset()
				if err := s.Rule.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rule\"")
			}
		case "content":
			if err := func() error {
				s.Content.Reset()
				if err := s.Content.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content\"")
			}
		case "action":
			if err := func() error {
				s.Action.Reset()
				if err := s.Action.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"action\"")
			}
		case "active":
			if err := func() error {
				s.Active.Reset()
				if err := s.Active.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"active\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupPhoneSettingsOKSMSEtiquetteToolSMSEtiquettePolicyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupPhoneSettingsOKSMSEtiquetteToolSMSEtiquettePolicyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupPhoneSettingsOKSMSEtiquetteToolSMSEtiquettePolicyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupPhoneSettingsOKSelectOutboundCallerID) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupPhoneSettingsOKSelectOutboundCallerID) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
	{
		if s.AllowHideOutboundCallerID.Set {
			e.FieldStart("allow_hide_outbound_caller_id")
			s.AllowHideOutboundCallerID.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupPhoneSettingsOKSelectOutboundCallerID = [5]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
	4: "allow_hide_outbound_caller_id",
}

// Decode decodes GetGroupPhoneSettingsOKSelectOutboundCallerID from json.
func (s *GetGroupPhoneSettingsOKSelectOutboundCallerID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupPhoneSettingsOKSelectOutboundCallerID to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		case "allow_hide_outbound_caller_id":
			if err := func() error {
				s.AllowHideOutboundCallerID.Reset()
				if err := s.AllowHideOutboundCallerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_hide_outbound_caller_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupPhoneSettingsOKSelectOutboundCallerID")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupPhoneSettingsOKSelectOutboundCallerID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupPhoneSettingsOKSelectOutboundCallerID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupPhoneSettingsOKSharedVoicemailNotificationByEmail) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupPhoneSettingsOKSharedVoicemailNotificationByEmail) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupPhoneSettingsOKSharedVoicemailNotificationByEmail = [4]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
}

// Decode decodes GetGroupPhoneSettingsOKSharedVoicemailNotificationByEmail from json.
func (s *GetGroupPhoneSettingsOKSharedVoicemailNotificationByEmail) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupPhoneSettingsOKSharedVoicemailNotificationByEmail to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupPhoneSettingsOKSharedVoicemailNotificationByEmail")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupPhoneSettingsOKSharedVoicemailNotificationByEmail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupPhoneSettingsOKSharedVoicemailNotificationByEmail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupPhoneSettingsOKVoicemail) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupPhoneSettingsOKVoicemail) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
	{
		if s.AllowDelete.Set {
			e.FieldStart("allow_delete")
			s.AllowDelete.Encode(e)
		}
	}
	{
		if s.AllowDownload.Set {
			e.FieldStart("allow_download")
			s.AllowDownload.Encode(e)
		}
	}
	{
		if s.AllowVideomail.Set {
			e.FieldStart("allow_videomail")
			s.AllowVideomail.Encode(e)
		}
	}
	{
		if s.AllowShare.Set {
			e.FieldStart("allow_share")
			s.AllowShare.Encode(e)
		}
	}
	{
		if s.AllowVirtualBackground.Set {
			e.FieldStart("allow_virtual_background")
			s.AllowVirtualBackground.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupPhoneSettingsOKVoicemail = [9]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
	4: "allow_delete",
	5: "allow_download",
	6: "allow_videomail",
	7: "allow_share",
	8: "allow_virtual_background",
}

// Decode decodes GetGroupPhoneSettingsOKVoicemail from json.
func (s *GetGroupPhoneSettingsOKVoicemail) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupPhoneSettingsOKVoicemail to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		case "allow_delete":
			if err := func() error {
				s.AllowDelete.Reset()
				if err := s.AllowDelete.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_delete\"")
			}
		case "allow_download":
			if err := func() error {
				s.AllowDownload.Reset()
				if err := s.AllowDownload.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_download\"")
			}
		case "allow_videomail":
			if err := func() error {
				s.AllowVideomail.Reset()
				if err := s.AllowVideomail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_videomail\"")
			}
		case "allow_share":
			if err := func() error {
				s.AllowShare.Reset()
				if err := s.AllowShare.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_share\"")
			}
		case "allow_virtual_background":
			if err := func() error {
				s.AllowVirtualBackground.Reset()
				if err := s.AllowVirtualBackground.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_virtual_background\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupPhoneSettingsOKVoicemail")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupPhoneSettingsOKVoicemail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupPhoneSettingsOKVoicemail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupPhoneSettingsOKVoicemailNotificationByEmail) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupPhoneSettingsOKVoicemailNotificationByEmail) encodeFields(e *jx.Encoder) {
	{
		if s.IncludeVoicemailFile.Set {
			e.FieldStart("include_voicemail_file")
			s.IncludeVoicemailFile.Encode(e)
		}
	}
	{
		if s.IncludeVoicemailTranscription.Set {
			e.FieldStart("include_voicemail_transcription")
			s.IncludeVoicemailTranscription.Encode(e)
		}
	}
	{
		if s.ForwardVoicemailToEmail.Set {
			e.FieldStart("forward_voicemail_to_email")
			s.ForwardVoicemailToEmail.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupPhoneSettingsOKVoicemailNotificationByEmail = [7]string{
	0: "include_voicemail_file",
	1: "include_voicemail_transcription",
	2: "forward_voicemail_to_email",
	3: "enable",
	4: "locked",
	5: "locked_by",
	6: "modified",
}

// Decode decodes GetGroupPhoneSettingsOKVoicemailNotificationByEmail from json.
func (s *GetGroupPhoneSettingsOKVoicemailNotificationByEmail) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupPhoneSettingsOKVoicemailNotificationByEmail to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "include_voicemail_file":
			if err := func() error {
				s.IncludeVoicemailFile.Reset()
				if err := s.IncludeVoicemailFile.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"include_voicemail_file\"")
			}
		case "include_voicemail_transcription":
			if err := func() error {
				s.IncludeVoicemailTranscription.Reset()
				if err := s.IncludeVoicemailTranscription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"include_voicemail_transcription\"")
			}
		case "forward_voicemail_to_email":
			if err := func() error {
				s.ForwardVoicemailToEmail.Reset()
				if err := s.ForwardVoicemailToEmail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward_voicemail_to_email\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupPhoneSettingsOKVoicemailNotificationByEmail")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupPhoneSettingsOKVoicemailNotificationByEmail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupPhoneSettingsOKVoicemailNotificationByEmail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupPhoneSettingsOKVoicemailTranscription) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupPhoneSettingsOKVoicemailTranscription) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupPhoneSettingsOKVoicemailTranscription = [4]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
}

// Decode decodes GetGroupPhoneSettingsOKVoicemailTranscription from json.
func (s *GetGroupPhoneSettingsOKVoicemailTranscription) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupPhoneSettingsOKVoicemailTranscription to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupPhoneSettingsOKVoicemailTranscription")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupPhoneSettingsOKVoicemailTranscription) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupPhoneSettingsOKVoicemailTranscription) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupPhoneSettingsOKZoomPhoneOnMobile) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupPhoneSettingsOKZoomPhoneOnMobile) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
	{
		if s.AllowCallingSMSMms.Set {
			e.FieldStart("allow_calling_sms_mms")
			s.AllowCallingSMSMms.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupPhoneSettingsOKZoomPhoneOnMobile = [5]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
	4: "allow_calling_sms_mms",
}

// Decode decodes GetGroupPhoneSettingsOKZoomPhoneOnMobile from json.
func (s *GetGroupPhoneSettingsOKZoomPhoneOnMobile) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupPhoneSettingsOKZoomPhoneOnMobile to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		case "allow_calling_sms_mms":
			if err := func() error {
				s.AllowCallingSMSMms.Reset()
				if err := s.AllowCallingSMSMms.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_calling_sms_mms\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupPhoneSettingsOKZoomPhoneOnMobile")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupPhoneSettingsOKZoomPhoneOnMobile) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupPhoneSettingsOKZoomPhoneOnMobile) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupPhoneSettingsOKZoomPhoneOnPwa) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupPhoneSettingsOKZoomPhoneOnPwa) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupPhoneSettingsOKZoomPhoneOnPwa = [4]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
}

// Decode decodes GetGroupPhoneSettingsOKZoomPhoneOnPwa from json.
func (s *GetGroupPhoneSettingsOKZoomPhoneOnPwa) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupPhoneSettingsOKZoomPhoneOnPwa to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupPhoneSettingsOKZoomPhoneOnPwa")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupPhoneSettingsOKZoomPhoneOnPwa) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupPhoneSettingsOKZoomPhoneOnPwa) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetLocationOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetLocationOK) encodeFields(e *jx.Encoder) {
	{
		if s.Bssid.Set {
			e.FieldStart("bssid")
			s.Bssid.Encode(e)
		}
	}
	{
		if s.Elin.Set {
			e.FieldStart("elin")
			s.Elin.Encode(e)
		}
	}
	{
		if s.EmergencyAddress.Set {
			e.FieldStart("emergency_address")
			s.EmergencyAddress.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.NetworkSwitches != nil {
			e.FieldStart("network_switches")
			e.ArrStart()
			for _, elem := range s.NetworkSwitches {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ParentLocationID.Set {
			e.FieldStart("parent_location_id")
			s.ParentLocationID.Encode(e)
		}
	}
	{
		if s.PrivateIP.Set {
			e.FieldStart("private_ip")
			s.PrivateIP.Encode(e)
		}
	}
	{
		if s.PublicIP.Set {
			e.FieldStart("public_ip")
			s.PublicIP.Encode(e)
		}
	}
	{
		if s.SipGroup.Set {
			e.FieldStart("sip_group")
			s.SipGroup.Encode(e)
		}
	}
	{
		if s.Site.Set {
			e.FieldStart("site")
			s.Site.Encode(e)
		}
	}
	{
		if s.MinimumMatchCriteria.Set {
			e.FieldStart("minimum_match_criteria")
			s.MinimumMatchCriteria.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetLocationOK = [12]string{
	0:  "bssid",
	1:  "elin",
	2:  "emergency_address",
	3:  "id",
	4:  "name",
	5:  "network_switches",
	6:  "parent_location_id",
	7:  "private_ip",
	8:  "public_ip",
	9:  "sip_group",
	10: "site",
	11: "minimum_match_criteria",
}

// Decode decodes GetLocationOK from json.
func (s *GetLocationOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetLocationOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "bssid":
			if err := func() error {
				s.Bssid.Reset()
				if err := s.Bssid.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bssid\"")
			}
		case "elin":
			if err := func() error {
				s.Elin.Reset()
				if err := s.Elin.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"elin\"")
			}
		case "emergency_address":
			if err := func() error {
				s.EmergencyAddress.Reset()
				if err := s.EmergencyAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"emergency_address\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "network_switches":
			if err := func() error {
				s.NetworkSwitches = make([]GetLocationOKNetworkSwitchesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetLocationOKNetworkSwitchesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.NetworkSwitches = append(s.NetworkSwitches, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"network_switches\"")
			}
		case "parent_location_id":
			if err := func() error {
				s.ParentLocationID.Reset()
				if err := s.ParentLocationID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"parent_location_id\"")
			}
		case "private_ip":
			if err := func() error {
				s.PrivateIP.Reset()
				if err := s.PrivateIP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"private_ip\"")
			}
		case "public_ip":
			if err := func() error {
				s.PublicIP.Reset()
				if err := s.PublicIP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"public_ip\"")
			}
		case "sip_group":
			if err := func() error {
				s.SipGroup.Reset()
				if err := s.SipGroup.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sip_group\"")
			}
		case "site":
			if err := func() error {
				s.Site.Reset()
				if err := s.Site.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site\"")
			}
		case "minimum_match_criteria":
			if err := func() error {
				s.MinimumMatchCriteria.Reset()
				if err := s.MinimumMatchCriteria.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"minimum_match_criteria\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetLocationOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetLocationOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetLocationOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetLocationOKElin) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetLocationOKElin) encodeFields(e *jx.Encoder) {
	{
		if s.PhoneNumber.Set {
			e.FieldStart("phone_number")
			s.PhoneNumber.Encode(e)
		}
	}
	{
		if s.PhoneNumberID.Set {
			e.FieldStart("phone_number_id")
			s.PhoneNumberID.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetLocationOKElin = [2]string{
	0: "phone_number",
	1: "phone_number_id",
}

// Decode decodes GetLocationOKElin from json.
func (s *GetLocationOKElin) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetLocationOKElin to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		case "phone_number_id":
			if err := func() error {
				s.PhoneNumberID.Reset()
				if err := s.PhoneNumberID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetLocationOKElin")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetLocationOKElin) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetLocationOKElin) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetLocationOKEmergencyAddress) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetLocationOKEmergencyAddress) encodeFields(e *jx.Encoder) {
	{
		if s.AddressLine1.Set {
			e.FieldStart("address_line1")
			s.AddressLine1.Encode(e)
		}
	}
	{
		if s.AddressLine2.Set {
			e.FieldStart("address_line2")
			s.AddressLine2.Encode(e)
		}
	}
	{
		if s.City.Set {
			e.FieldStart("city")
			s.City.Encode(e)
		}
	}
	{
		if s.Country.Set {
			e.FieldStart("country")
			s.Country.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.StateCode.Set {
			e.FieldStart("state_code")
			s.StateCode.Encode(e)
		}
	}
	{
		if s.Zip.Set {
			e.FieldStart("zip")
			s.Zip.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetLocationOKEmergencyAddress = [7]string{
	0: "address_line1",
	1: "address_line2",
	2: "city",
	3: "country",
	4: "id",
	5: "state_code",
	6: "zip",
}

// Decode decodes GetLocationOKEmergencyAddress from json.
func (s *GetLocationOKEmergencyAddress) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetLocationOKEmergencyAddress to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "address_line1":
			if err := func() error {
				s.AddressLine1.Reset()
				if err := s.AddressLine1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"address_line1\"")
			}
		case "address_line2":
			if err := func() error {
				s.AddressLine2.Reset()
				if err := s.AddressLine2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"address_line2\"")
			}
		case "city":
			if err := func() error {
				s.City.Reset()
				if err := s.City.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"city\"")
			}
		case "country":
			if err := func() error {
				s.Country.Reset()
				if err := s.Country.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "state_code":
			if err := func() error {
				s.StateCode.Reset()
				if err := s.StateCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"state_code\"")
			}
		case "zip":
			if err := func() error {
				s.Zip.Reset()
				if err := s.Zip.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zip\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetLocationOKEmergencyAddress")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetLocationOKEmergencyAddress) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetLocationOKEmergencyAddress) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetLocationOKNetworkSwitchesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetLocationOKNetworkSwitchesItem) encodeFields(e *jx.Encoder) {
	{
		if s.MACAddress.Set {
			e.FieldStart("mac_address")
			s.MACAddress.Encode(e)
		}
	}
	{
		if s.Port.Set {
			e.FieldStart("port")
			s.Port.Encode(e)
		}
	}
	{
		if s.PortPrefix.Set {
			e.FieldStart("port_prefix")
			s.PortPrefix.Encode(e)
		}
	}
	{
		if s.PortRangeFrom.Set {
			e.FieldStart("port_range_from")
			s.PortRangeFrom.Encode(e)
		}
	}
	{
		if s.PortRangeTo.Set {
			e.FieldStart("port_range_to")
			s.PortRangeTo.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetLocationOKNetworkSwitchesItem = [5]string{
	0: "mac_address",
	1: "port",
	2: "port_prefix",
	3: "port_range_from",
	4: "port_range_to",
}

// Decode decodes GetLocationOKNetworkSwitchesItem from json.
func (s *GetLocationOKNetworkSwitchesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetLocationOKNetworkSwitchesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "mac_address":
			if err := func() error {
				s.MACAddress.Reset()
				if err := s.MACAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mac_address\"")
			}
		case "port":
			if err := func() error {
				s.Port.Reset()
				if err := s.Port.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"port\"")
			}
		case "port_prefix":
			if err := func() error {
				s.PortPrefix.Reset()
				if err := s.PortPrefix.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"port_prefix\"")
			}
		case "port_range_from":
			if err := func() error {
				s.PortRangeFrom.Reset()
				if err := s.PortRangeFrom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"port_range_from\"")
			}
		case "port_range_to":
			if err := func() error {
				s.PortRangeTo.Reset()
				if err := s.PortRangeTo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"port_range_to\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetLocationOKNetworkSwitchesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetLocationOKNetworkSwitchesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetLocationOKNetworkSwitchesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetLocationOKSipGroup) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetLocationOKSipGroup) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetLocationOKSipGroup = [2]string{
	0: "display_name",
	1: "id",
}

// Decode decodes GetLocationOKSipGroup from json.
func (s *GetLocationOKSipGroup) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetLocationOKSipGroup to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetLocationOKSipGroup")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetLocationOKSipGroup) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetLocationOKSipGroup) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetLocationOKSite) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetLocationOKSite) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetLocationOKSite = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes GetLocationOKSite from json.
func (s *GetLocationOKSite) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetLocationOKSite to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetLocationOKSite")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetLocationOKSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetLocationOKSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetMonitoringGroupByIdOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetMonitoringGroupByIdOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.MonitorMembersCount.Set {
			e.FieldStart("monitor_members_count")
			s.MonitorMembersCount.Encode(e)
		}
	}
	{
		if s.MonitoredMembersCount.Set {
			e.FieldStart("monitored_members_count")
			s.MonitoredMembersCount.Encode(e)
		}
	}
	{
		if s.MonitoringPrivileges != nil {
			e.FieldStart("monitoring_privileges")
			e.ArrStart()
			for _, elem := range s.MonitoringPrivileges {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Prompt.Set {
			e.FieldStart("prompt")
			s.Prompt.Encode(e)
		}
	}
	{
		if s.Site.Set {
			e.FieldStart("site")
			s.Site.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetMonitoringGroupByIdOK = [8]string{
	0: "id",
	1: "monitor_members_count",
	2: "monitored_members_count",
	3: "monitoring_privileges",
	4: "name",
	5: "prompt",
	6: "site",
	7: "type",
}

// Decode decodes GetMonitoringGroupByIdOK from json.
func (s *GetMonitoringGroupByIdOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetMonitoringGroupByIdOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "monitor_members_count":
			if err := func() error {
				s.MonitorMembersCount.Reset()
				if err := s.MonitorMembersCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"monitor_members_count\"")
			}
		case "monitored_members_count":
			if err := func() error {
				s.MonitoredMembersCount.Reset()
				if err := s.MonitoredMembersCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"monitored_members_count\"")
			}
		case "monitoring_privileges":
			if err := func() error {
				s.MonitoringPrivileges = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.MonitoringPrivileges = append(s.MonitoringPrivileges, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"monitoring_privileges\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "prompt":
			if err := func() error {
				s.Prompt.Reset()
				if err := s.Prompt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"prompt\"")
			}
		case "site":
			if err := func() error {
				s.Site.Reset()
				if err := s.Site.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetMonitoringGroupByIdOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetMonitoringGroupByIdOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetMonitoringGroupByIdOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetMonitoringGroupByIdOKSite) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetMonitoringGroupByIdOKSite) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetMonitoringGroupByIdOKSite = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes GetMonitoringGroupByIdOKSite from json.
func (s *GetMonitoringGroupByIdOKSite) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetMonitoringGroupByIdOKSite to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetMonitoringGroupByIdOKSite")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetMonitoringGroupByIdOKSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetMonitoringGroupByIdOKSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetPSOperationLogsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetPSOperationLogsOK) encodeFields(e *jx.Encoder) {
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
	{
		if s.TotalRecords.Set {
			e.FieldStart("total_records")
			s.TotalRecords.Encode(e)
		}
	}
	{
		if s.From.Set {
			e.FieldStart("from")
			s.From.Encode(e)
		}
	}
	{
		if s.To.Set {
			e.FieldStart("to")
			s.To.Encode(e)
		}
	}
	{
		if s.OperationLogs != nil {
			e.FieldStart("operation_logs")
			e.ArrStart()
			for _, elem := range s.OperationLogs {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGetPSOperationLogsOK = [6]string{
	0: "next_page_token",
	1: "page_size",
	2: "total_records",
	3: "from",
	4: "to",
	5: "operation_logs",
}

// Decode decodes GetPSOperationLogsOK from json.
func (s *GetPSOperationLogsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetPSOperationLogsOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		case "total_records":
			if err := func() error {
				s.TotalRecords.Reset()
				if err := s.TotalRecords.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_records\"")
			}
		case "from":
			if err := func() error {
				s.From.Reset()
				if err := s.From.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"from\"")
			}
		case "to":
			if err := func() error {
				s.To.Reset()
				if err := s.To.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"to\"")
			}
		case "operation_logs":
			if err := func() error {
				s.OperationLogs = make([]GetPSOperationLogsOKOperationLogsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetPSOperationLogsOKOperationLogsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.OperationLogs = append(s.OperationLogs, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"operation_logs\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetPSOperationLogsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetPSOperationLogsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetPSOperationLogsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetPSOperationLogsOKOperationLogsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetPSOperationLogsOKOperationLogsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Action.Set {
			e.FieldStart("action")
			s.Action.Encode(e)
		}
	}
	{
		if s.CategoryType.Set {
			e.FieldStart("category_type")
			s.CategoryType.Encode(e)
		}
	}
	{
		if s.OperationDetail.Set {
			e.FieldStart("operation_detail")
			s.OperationDetail.Encode(e)
		}
	}
	{
		if s.Operator.Set {
			e.FieldStart("operator")
			s.Operator.Encode(e)
		}
	}
	{
		if s.Time.Set {
			e.FieldStart("time")
			s.Time.Encode(e, json.EncodeDateTime)
		}
	}
}

var jsonFieldsNameOfGetPSOperationLogsOKOperationLogsItem = [5]string{
	0: "action",
	1: "category_type",
	2: "operation_detail",
	3: "operator",
	4: "time",
}

// Decode decodes GetPSOperationLogsOKOperationLogsItem from json.
func (s *GetPSOperationLogsOKOperationLogsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetPSOperationLogsOKOperationLogsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "action":
			if err := func() error {
				s.Action.Reset()
				if err := s.Action.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"action\"")
			}
		case "category_type":
			if err := func() error {
				s.CategoryType.Reset()
				if err := s.CategoryType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"category_type\"")
			}
		case "operation_detail":
			if err := func() error {
				s.OperationDetail.Reset()
				if err := s.OperationDetail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"operation_detail\"")
			}
		case "operator":
			if err := func() error {
				s.Operator.Reset()
				if err := s.Operator.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"operator\"")
			}
		case "time":
			if err := func() error {
				s.Time.Reset()
				if err := s.Time.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"time\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetPSOperationLogsOKOperationLogsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetPSOperationLogsOKOperationLogsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetPSOperationLogsOKOperationLogsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetPhoneNumberDetailsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetPhoneNumberDetailsOK) encodeFields(e *jx.Encoder) {
	{
		if s.Assignee.Set {
			e.FieldStart("assignee")
			s.Assignee.Encode(e)
		}
	}
	{
		if s.Capability != nil {
			e.FieldStart("capability")
			e.ArrStart()
			for _, elem := range s.Capability {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Carrier.Set {
			e.FieldStart("carrier")
			s.Carrier.Encode(e)
		}
	}
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.EmergencyAddress.Set {
			e.FieldStart("emergency_address")
			s.EmergencyAddress.Encode(e)
		}
	}
	{
		if s.EmergencyAddressStatus.Set {
			e.FieldStart("emergency_address_status")
			s.EmergencyAddressStatus.Encode(e)
		}
	}
	{
		if s.EmergencyAddressUpdateTime.Set {
			e.FieldStart("emergency_address_update_time")
			s.EmergencyAddressUpdateTime.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Location.Set {
			e.FieldStart("location")
			s.Location.Encode(e)
		}
	}
	{
		if s.Number.Set {
			e.FieldStart("number")
			s.Number.Encode(e)
		}
	}
	{
		if s.NumberType.Set {
			e.FieldStart("number_type")
			s.NumberType.Encode(e)
		}
	}
	{
		if s.SipGroup.Set {
			e.FieldStart("sip_group")
			s.SipGroup.Encode(e)
		}
	}
	{
		if s.Site.Set {
			e.FieldStart("site")
			s.Site.Encode(e)
		}
	}
	{
		if s.Source.Set {
			e.FieldStart("source")
			s.Source.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetPhoneNumberDetailsOK = [15]string{
	0:  "assignee",
	1:  "capability",
	2:  "carrier",
	3:  "display_name",
	4:  "emergency_address",
	5:  "emergency_address_status",
	6:  "emergency_address_update_time",
	7:  "id",
	8:  "location",
	9:  "number",
	10: "number_type",
	11: "sip_group",
	12: "site",
	13: "source",
	14: "status",
}

// Decode decodes GetPhoneNumberDetailsOK from json.
func (s *GetPhoneNumberDetailsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetPhoneNumberDetailsOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "assignee":
			if err := func() error {
				s.Assignee.Reset()
				if err := s.Assignee.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"assignee\"")
			}
		case "capability":
			if err := func() error {
				s.Capability = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Capability = append(s.Capability, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"capability\"")
			}
		case "carrier":
			if err := func() error {
				s.Carrier.Reset()
				if err := s.Carrier.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"carrier\"")
			}
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "emergency_address":
			if err := func() error {
				s.EmergencyAddress.Reset()
				if err := s.EmergencyAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"emergency_address\"")
			}
		case "emergency_address_status":
			if err := func() error {
				s.EmergencyAddressStatus.Reset()
				if err := s.EmergencyAddressStatus.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"emergency_address_status\"")
			}
		case "emergency_address_update_time":
			if err := func() error {
				s.EmergencyAddressUpdateTime.Reset()
				if err := s.EmergencyAddressUpdateTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"emergency_address_update_time\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "location":
			if err := func() error {
				s.Location.Reset()
				if err := s.Location.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"location\"")
			}
		case "number":
			if err := func() error {
				s.Number.Reset()
				if err := s.Number.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "number_type":
			if err := func() error {
				s.NumberType.Reset()
				if err := s.NumberType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number_type\"")
			}
		case "sip_group":
			if err := func() error {
				s.SipGroup.Reset()
				if err := s.SipGroup.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sip_group\"")
			}
		case "site":
			if err := func() error {
				s.Site.Reset()
				if err := s.Site.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site\"")
			}
		case "source":
			if err := func() error {
				s.Source.Reset()
				if err := s.Source.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"source\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetPhoneNumberDetailsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetPhoneNumberDetailsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetPhoneNumberDetailsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetPhoneNumberDetailsOKAssignee) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetPhoneNumberDetailsOKAssignee) encodeFields(e *jx.Encoder) {
	{
		if s.AudioPromptLanguage.Set {
			e.FieldStart("audio_prompt_language")
			s.AudioPromptLanguage.Encode(e)
		}
	}
	{
		if s.DisplayNumber.Set {
			e.FieldStart("display_number")
			s.DisplayNumber.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.Greeting.Set {
			e.FieldStart("greeting")
			s.Greeting.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Label.Set {
			e.FieldStart("label")
			s.Label.Encode(e)
		}
	}
	{
		if s.MeetingID.Set {
			e.FieldStart("meeting_id")
			s.MeetingID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.OnHoldMusic.Set {
			e.FieldStart("on_hold_music")
			s.OnHoldMusic.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetPhoneNumberDetailsOKAssignee = [10]string{
	0: "audio_prompt_language",
	1: "display_number",
	2: "extension_number",
	3: "greeting",
	4: "id",
	5: "label",
	6: "meeting_id",
	7: "name",
	8: "on_hold_music",
	9: "type",
}

// Decode decodes GetPhoneNumberDetailsOKAssignee from json.
func (s *GetPhoneNumberDetailsOKAssignee) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetPhoneNumberDetailsOKAssignee to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_prompt_language":
			if err := func() error {
				s.AudioPromptLanguage.Reset()
				if err := s.AudioPromptLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_prompt_language\"")
			}
		case "display_number":
			if err := func() error {
				s.DisplayNumber.Reset()
				if err := s.DisplayNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_number\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "greeting":
			if err := func() error {
				s.Greeting.Reset()
				if err := s.Greeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"greeting\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "label":
			if err := func() error {
				s.Label.Reset()
				if err := s.Label.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"label\"")
			}
		case "meeting_id":
			if err := func() error {
				s.MeetingID.Reset()
				if err := s.MeetingID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "on_hold_music":
			if err := func() error {
				s.OnHoldMusic.Reset()
				if err := s.OnHoldMusic.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"on_hold_music\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetPhoneNumberDetailsOKAssignee")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetPhoneNumberDetailsOKAssignee) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetPhoneNumberDetailsOKAssignee) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetPhoneNumberDetailsOKAssigneeGreeting) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetPhoneNumberDetailsOKAssigneeGreeting) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetPhoneNumberDetailsOKAssigneeGreeting = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes GetPhoneNumberDetailsOKAssigneeGreeting from json.
func (s *GetPhoneNumberDetailsOKAssigneeGreeting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetPhoneNumberDetailsOKAssigneeGreeting to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetPhoneNumberDetailsOKAssigneeGreeting")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetPhoneNumberDetailsOKAssigneeGreeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetPhoneNumberDetailsOKAssigneeGreeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetPhoneNumberDetailsOKAssigneeOnHoldMusic) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetPhoneNumberDetailsOKAssigneeOnHoldMusic) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetPhoneNumberDetailsOKAssigneeOnHoldMusic = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes GetPhoneNumberDetailsOKAssigneeOnHoldMusic from json.
func (s *GetPhoneNumberDetailsOKAssigneeOnHoldMusic) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetPhoneNumberDetailsOKAssigneeOnHoldMusic to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetPhoneNumberDetailsOKAssigneeOnHoldMusic")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetPhoneNumberDetailsOKAssigneeOnHoldMusic) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetPhoneNumberDetailsOKAssigneeOnHoldMusic) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetPhoneNumberDetailsOKCarrier) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetPhoneNumberDetailsOKCarrier) encodeFields(e *jx.Encoder) {
	{
		if s.Code.Set {
			e.FieldStart("code")
			s.Code.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetPhoneNumberDetailsOKCarrier = [2]string{
	0: "code",
	1: "name",
}

// Decode decodes GetPhoneNumberDetailsOKCarrier from json.
func (s *GetPhoneNumberDetailsOKCarrier) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetPhoneNumberDetailsOKCarrier to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "code":
			if err := func() error {
				s.Code.Reset()
				if err := s.Code.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetPhoneNumberDetailsOKCarrier")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetPhoneNumberDetailsOKCarrier) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetPhoneNumberDetailsOKCarrier) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetPhoneNumberDetailsOKEmergencyAddress) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetPhoneNumberDetailsOKEmergencyAddress) encodeFields(e *jx.Encoder) {
	{
		if s.AddressLine1.Set {
			e.FieldStart("address_line1")
			s.AddressLine1.Encode(e)
		}
	}
	{
		if s.AddressLine2.Set {
			e.FieldStart("address_line2")
			s.AddressLine2.Encode(e)
		}
	}
	{
		if s.City.Set {
			e.FieldStart("city")
			s.City.Encode(e)
		}
	}
	{
		if s.Country.Set {
			e.FieldStart("country")
			s.Country.Encode(e)
		}
	}
	{
		if s.StateCode.Set {
			e.FieldStart("state_code")
			s.StateCode.Encode(e)
		}
	}
	{
		if s.Zip.Set {
			e.FieldStart("zip")
			s.Zip.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetPhoneNumberDetailsOKEmergencyAddress = [6]string{
	0: "address_line1",
	1: "address_line2",
	2: "city",
	3: "country",
	4: "state_code",
	5: "zip",
}

// Decode decodes GetPhoneNumberDetailsOKEmergencyAddress from json.
func (s *GetPhoneNumberDetailsOKEmergencyAddress) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetPhoneNumberDetailsOKEmergencyAddress to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "address_line1":
			if err := func() error {
				s.AddressLine1.Reset()
				if err := s.AddressLine1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"address_line1\"")
			}
		case "address_line2":
			if err := func() error {
				s.AddressLine2.Reset()
				if err := s.AddressLine2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"address_line2\"")
			}
		case "city":
			if err := func() error {
				s.City.Reset()
				if err := s.City.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"city\"")
			}
		case "country":
			if err := func() error {
				s.Country.Reset()
				if err := s.Country.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country\"")
			}
		case "state_code":
			if err := func() error {
				s.StateCode.Reset()
				if err := s.StateCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"state_code\"")
			}
		case "zip":
			if err := func() error {
				s.Zip.Reset()
				if err := s.Zip.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zip\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetPhoneNumberDetailsOKEmergencyAddress")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetPhoneNumberDetailsOKEmergencyAddress) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetPhoneNumberDetailsOKEmergencyAddress) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetPhoneNumberDetailsOKSipGroup) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetPhoneNumberDetailsOKSipGroup) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetPhoneNumberDetailsOKSipGroup = [2]string{
	0: "display_name",
	1: "id",
}

// Decode decodes GetPhoneNumberDetailsOKSipGroup from json.
func (s *GetPhoneNumberDetailsOKSipGroup) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetPhoneNumberDetailsOKSipGroup to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetPhoneNumberDetailsOKSipGroup")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetPhoneNumberDetailsOKSipGroup) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetPhoneNumberDetailsOKSipGroup) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetPhoneNumberDetailsOKSite) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetPhoneNumberDetailsOKSite) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetPhoneNumberDetailsOKSite = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes GetPhoneNumberDetailsOKSite from json.
func (s *GetPhoneNumberDetailsOKSite) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetPhoneNumberDetailsOKSite to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetPhoneNumberDetailsOKSite")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetPhoneNumberDetailsOKSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetPhoneNumberDetailsOKSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetPhoneRecordingsByCallIdOrCallLogIdOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetPhoneRecordingsByCallIdOrCallLogIdOK) encodeFields(e *jx.Encoder) {
	{
		if s.CallID.Set {
			e.FieldStart("call_id")
			s.CallID.Encode(e)
		}
	}
	{
		if s.CallLogID.Set {
			e.FieldStart("call_log_id")
			s.CallLogID.Encode(e)
		}
	}
	{
		if s.CalleeName.Set {
			e.FieldStart("callee_name")
			s.CalleeName.Encode(e)
		}
	}
	{
		if s.CalleeNumber.Set {
			e.FieldStart("callee_number")
			s.CalleeNumber.Encode(e)
		}
	}
	{
		if s.CalleeNumberType.Set {
			e.FieldStart("callee_number_type")
			s.CalleeNumberType.Encode(e)
		}
	}
	{
		if s.CallerName.Set {
			e.FieldStart("caller_name")
			s.CallerName.Encode(e)
		}
	}
	{
		if s.CallerNumber.Set {
			e.FieldStart("caller_number")
			s.CallerNumber.Encode(e)
		}
	}
	{
		if s.CallerNumberType.Set {
			e.FieldStart("caller_number_type")
			s.CallerNumberType.Encode(e)
		}
	}
	{
		if s.OutgoingBy.Set {
			e.FieldStart("outgoing_by")
			s.OutgoingBy.Encode(e)
		}
	}
	{
		if s.AcceptedBy.Set {
			e.FieldStart("accepted_by")
			s.AcceptedBy.Encode(e)
		}
	}
	{
		if s.DateTime.Set {
			e.FieldStart("date_time")
			s.DateTime.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.Direction.Set {
			e.FieldStart("direction")
			s.Direction.Encode(e)
		}
	}
	{
		if s.DownloadURL.Set {
			e.FieldStart("download_url")
			s.DownloadURL.Encode(e)
		}
	}
	{
		if s.Duration.Set {
			e.FieldStart("duration")
			s.Duration.Encode(e)
		}
	}
	{
		if s.EndTime.Set {
			e.FieldStart("end_time")
			s.EndTime.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.MeetingUUID.Set {
			e.FieldStart("meeting_uuid")
			s.MeetingUUID.Encode(e)
		}
	}
	{
		if s.Owner.Set {
			e.FieldStart("owner")
			s.Owner.Encode(e)
		}
	}
	{
		if s.DeletedTime.Set {
			e.FieldStart("deleted_time")
			s.DeletedTime.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.DaysLeftAutoPermantelyDelete.Set {
			e.FieldStart("days_left_auto_permantely_delete")
			s.DaysLeftAutoPermantelyDelete.Encode(e)
		}
	}
	{
		if s.SoftDeletedType.Set {
			e.FieldStart("soft_deleted_type")
			s.SoftDeletedType.Encode(e)
		}
	}
	{
		if s.RecordingType.Set {
			e.FieldStart("recording_type")
			s.RecordingType.Encode(e)
		}
	}
	{
		if s.FileURL.Set {
			e.FieldStart("file_url")
			s.FileURL.Encode(e)
		}
	}
	{
		if s.DisclaimerStatus.Set {
			e.FieldStart("disclaimer_status")
			s.DisclaimerStatus.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetPhoneRecordingsByCallIdOrCallLogIdOK = [24]string{
	0:  "call_id",
	1:  "call_log_id",
	2:  "callee_name",
	3:  "callee_number",
	4:  "callee_number_type",
	5:  "caller_name",
	6:  "caller_number",
	7:  "caller_number_type",
	8:  "outgoing_by",
	9:  "accepted_by",
	10: "date_time",
	11: "direction",
	12: "download_url",
	13: "duration",
	14: "end_time",
	15: "id",
	16: "meeting_uuid",
	17: "owner",
	18: "deleted_time",
	19: "days_left_auto_permantely_delete",
	20: "soft_deleted_type",
	21: "recording_type",
	22: "file_url",
	23: "disclaimer_status",
}

// Decode decodes GetPhoneRecordingsByCallIdOrCallLogIdOK from json.
func (s *GetPhoneRecordingsByCallIdOrCallLogIdOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetPhoneRecordingsByCallIdOrCallLogIdOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "call_id":
			if err := func() error {
				s.CallID.Reset()
				if err := s.CallID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_id\"")
			}
		case "call_log_id":
			if err := func() error {
				s.CallLogID.Reset()
				if err := s.CallLogID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_log_id\"")
			}
		case "callee_name":
			if err := func() error {
				s.CalleeName.Reset()
				if err := s.CalleeName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_name\"")
			}
		case "callee_number":
			if err := func() error {
				s.CalleeNumber.Reset()
				if err := s.CalleeNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_number\"")
			}
		case "callee_number_type":
			if err := func() error {
				s.CalleeNumberType.Reset()
				if err := s.CalleeNumberType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_number_type\"")
			}
		case "caller_name":
			if err := func() error {
				s.CallerName.Reset()
				if err := s.CallerName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_name\"")
			}
		case "caller_number":
			if err := func() error {
				s.CallerNumber.Reset()
				if err := s.CallerNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_number\"")
			}
		case "caller_number_type":
			if err := func() error {
				s.CallerNumberType.Reset()
				if err := s.CallerNumberType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_number_type\"")
			}
		case "outgoing_by":
			if err := func() error {
				s.OutgoingBy.Reset()
				if err := s.OutgoingBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"outgoing_by\"")
			}
		case "accepted_by":
			if err := func() error {
				s.AcceptedBy.Reset()
				if err := s.AcceptedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"accepted_by\"")
			}
		case "date_time":
			if err := func() error {
				s.DateTime.Reset()
				if err := s.DateTime.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"date_time\"")
			}
		case "direction":
			if err := func() error {
				s.Direction.Reset()
				if err := s.Direction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"direction\"")
			}
		case "download_url":
			if err := func() error {
				s.DownloadURL.Reset()
				if err := s.DownloadURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"download_url\"")
			}
		case "duration":
			if err := func() error {
				s.Duration.Reset()
				if err := s.Duration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"duration\"")
			}
		case "end_time":
			if err := func() error {
				s.EndTime.Reset()
				if err := s.EndTime.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"end_time\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "meeting_uuid":
			if err := func() error {
				s.MeetingUUID.Reset()
				if err := s.MeetingUUID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_uuid\"")
			}
		case "owner":
			if err := func() error {
				s.Owner.Reset()
				if err := s.Owner.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"owner\"")
			}
		case "deleted_time":
			if err := func() error {
				s.DeletedTime.Reset()
				if err := s.DeletedTime.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deleted_time\"")
			}
		case "days_left_auto_permantely_delete":
			if err := func() error {
				s.DaysLeftAutoPermantelyDelete.Reset()
				if err := s.DaysLeftAutoPermantelyDelete.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"days_left_auto_permantely_delete\"")
			}
		case "soft_deleted_type":
			if err := func() error {
				s.SoftDeletedType.Reset()
				if err := s.SoftDeletedType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"soft_deleted_type\"")
			}
		case "recording_type":
			if err := func() error {
				s.RecordingType.Reset()
				if err := s.RecordingType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_type\"")
			}
		case "file_url":
			if err := func() error {
				s.FileURL.Reset()
				if err := s.FileURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"file_url\"")
			}
		case "disclaimer_status":
			if err := func() error {
				s.DisclaimerStatus.Reset()
				if err := s.DisclaimerStatus.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"disclaimer_status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetPhoneRecordingsByCallIdOrCallLogIdOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetPhoneRecordingsByCallIdOrCallLogIdOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetPhoneRecordingsByCallIdOrCallLogIdOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetPhoneRecordingsByCallIdOrCallLogIdOKAcceptedBy) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetPhoneRecordingsByCallIdOrCallLogIdOKAcceptedBy) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetPhoneRecordingsByCallIdOrCallLogIdOKAcceptedBy = [2]string{
	0: "name",
	1: "extension_number",
}

// Decode decodes GetPhoneRecordingsByCallIdOrCallLogIdOKAcceptedBy from json.
func (s *GetPhoneRecordingsByCallIdOrCallLogIdOKAcceptedBy) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetPhoneRecordingsByCallIdOrCallLogIdOKAcceptedBy to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetPhoneRecordingsByCallIdOrCallLogIdOKAcceptedBy")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetPhoneRecordingsByCallIdOrCallLogIdOKAcceptedBy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetPhoneRecordingsByCallIdOrCallLogIdOKAcceptedBy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetPhoneRecordingsByCallIdOrCallLogIdOKOutgoingBy) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetPhoneRecordingsByCallIdOrCallLogIdOKOutgoingBy) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetPhoneRecordingsByCallIdOrCallLogIdOKOutgoingBy = [2]string{
	0: "name",
	1: "extension_number",
}

// Decode decodes GetPhoneRecordingsByCallIdOrCallLogIdOKOutgoingBy from json.
func (s *GetPhoneRecordingsByCallIdOrCallLogIdOKOutgoingBy) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetPhoneRecordingsByCallIdOrCallLogIdOKOutgoingBy to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetPhoneRecordingsByCallIdOrCallLogIdOKOutgoingBy")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetPhoneRecordingsByCallIdOrCallLogIdOKOutgoingBy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetPhoneRecordingsByCallIdOrCallLogIdOKOutgoingBy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetPhoneRecordingsByCallIdOrCallLogIdOKOwner) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetPhoneRecordingsByCallIdOrCallLogIdOKOwner) encodeFields(e *jx.Encoder) {
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.ExtensionStatus.Set {
			e.FieldStart("extension_status")
			s.ExtensionStatus.Encode(e)
		}
	}
	{
		if s.ExtensionDeletedTime.Set {
			e.FieldStart("extension_deleted_time")
			s.ExtensionDeletedTime.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetPhoneRecordingsByCallIdOrCallLogIdOKOwner = [6]string{
	0: "extension_number",
	1: "id",
	2: "name",
	3: "type",
	4: "extension_status",
	5: "extension_deleted_time",
}

// Decode decodes GetPhoneRecordingsByCallIdOrCallLogIdOKOwner from json.
func (s *GetPhoneRecordingsByCallIdOrCallLogIdOKOwner) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetPhoneRecordingsByCallIdOrCallLogIdOKOwner to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "extension_status":
			if err := func() error {
				s.ExtensionStatus.Reset()
				if err := s.ExtensionStatus.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_status\"")
			}
		case "extension_deleted_time":
			if err := func() error {
				s.ExtensionDeletedTime.Reset()
				if err := s.ExtensionDeletedTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_deleted_time\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetPhoneRecordingsByCallIdOrCallLogIdOKOwner")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetPhoneRecordingsByCallIdOrCallLogIdOKOwner) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetPhoneRecordingsByCallIdOrCallLogIdOKOwner) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetPhoneRecordingsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetPhoneRecordingsOK) encodeFields(e *jx.Encoder) {
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
	{
		if s.Recordings != nil {
			e.FieldStart("recordings")
			e.ArrStart()
			for _, elem := range s.Recordings {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalRecords.Set {
			e.FieldStart("total_records")
			s.TotalRecords.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetPhoneRecordingsOK = [4]string{
	0: "next_page_token",
	1: "page_size",
	2: "recordings",
	3: "total_records",
}

// Decode decodes GetPhoneRecordingsOK from json.
func (s *GetPhoneRecordingsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetPhoneRecordingsOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		case "recordings":
			if err := func() error {
				s.Recordings = make([]GetPhoneRecordingsOKRecordingsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetPhoneRecordingsOKRecordingsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Recordings = append(s.Recordings, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recordings\"")
			}
		case "total_records":
			if err := func() error {
				s.TotalRecords.Reset()
				if err := s.TotalRecords.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_records\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetPhoneRecordingsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetPhoneRecordingsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetPhoneRecordingsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetPhoneRecordingsOKRecordingsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetPhoneRecordingsOKRecordingsItem) encodeFields(e *jx.Encoder) {
	{
		if s.AutoDeletePolicy.Set {
			e.FieldStart("auto_delete_policy")
			s.AutoDeletePolicy.Encode(e)
		}
	}
	{
		if s.CallID.Set {
			e.FieldStart("call_id")
			s.CallID.Encode(e)
		}
	}
	{
		if s.CallLogID.Set {
			e.FieldStart("call_log_id")
			s.CallLogID.Encode(e)
		}
	}
	{
		if s.CalleeName.Set {
			e.FieldStart("callee_name")
			s.CalleeName.Encode(e)
		}
	}
	{
		if s.CalleeNumber.Set {
			e.FieldStart("callee_number")
			s.CalleeNumber.Encode(e)
		}
	}
	{
		if s.CalleeNumberType.Set {
			e.FieldStart("callee_number_type")
			s.CalleeNumberType.Encode(e)
		}
	}
	{
		if s.CallerName.Set {
			e.FieldStart("caller_name")
			s.CallerName.Encode(e)
		}
	}
	{
		if s.CallerNumber.Set {
			e.FieldStart("caller_number")
			s.CallerNumber.Encode(e)
		}
	}
	{
		if s.CallerNumberType.Set {
			e.FieldStart("caller_number_type")
			s.CallerNumberType.Encode(e)
		}
	}
	{
		if s.OutgoingBy.Set {
			e.FieldStart("outgoing_by")
			s.OutgoingBy.Encode(e)
		}
	}
	{
		if s.AcceptedBy.Set {
			e.FieldStart("accepted_by")
			s.AcceptedBy.Encode(e)
		}
	}
	{
		if s.DateTime.Set {
			e.FieldStart("date_time")
			s.DateTime.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.DisclaimerStatus.Set {
			e.FieldStart("disclaimer_status")
			s.DisclaimerStatus.Encode(e)
		}
	}
	{
		if s.Direction.Set {
			e.FieldStart("direction")
			s.Direction.Encode(e)
		}
	}
	{
		if s.DownloadURL.Set {
			e.FieldStart("download_url")
			s.DownloadURL.Encode(e)
		}
	}
	{
		if s.Duration.Set {
			e.FieldStart("duration")
			s.Duration.Encode(e)
		}
	}
	{
		if s.EndTime.Set {
			e.FieldStart("end_time")
			s.EndTime.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.MeetingUUID.Set {
			e.FieldStart("meeting_uuid")
			s.MeetingUUID.Encode(e)
		}
	}
	{
		if s.Owner.Set {
			e.FieldStart("owner")
			s.Owner.Encode(e)
		}
	}
	{
		if s.RecordingType.Set {
			e.FieldStart("recording_type")
			s.RecordingType.Encode(e)
		}
	}
	{
		if s.Site.Set {
			e.FieldStart("site")
			s.Site.Encode(e)
		}
	}
	{
		if s.TranscriptDownloadURL.Set {
			e.FieldStart("transcript_download_url")
			s.TranscriptDownloadURL.Encode(e)
		}
	}
	{
		if s.AutoDeleteEnable.Set {
			e.FieldStart("auto_delete_enable")
			s.AutoDeleteEnable.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetPhoneRecordingsOKRecordingsItem = [24]string{
	0:  "auto_delete_policy",
	1:  "call_id",
	2:  "call_log_id",
	3:  "callee_name",
	4:  "callee_number",
	5:  "callee_number_type",
	6:  "caller_name",
	7:  "caller_number",
	8:  "caller_number_type",
	9:  "outgoing_by",
	10: "accepted_by",
	11: "date_time",
	12: "disclaimer_status",
	13: "direction",
	14: "download_url",
	15: "duration",
	16: "end_time",
	17: "id",
	18: "meeting_uuid",
	19: "owner",
	20: "recording_type",
	21: "site",
	22: "transcript_download_url",
	23: "auto_delete_enable",
}

// Decode decodes GetPhoneRecordingsOKRecordingsItem from json.
func (s *GetPhoneRecordingsOKRecordingsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetPhoneRecordingsOKRecordingsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "auto_delete_policy":
			if err := func() error {
				s.AutoDeletePolicy.Reset()
				if err := s.AutoDeletePolicy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_delete_policy\"")
			}
		case "call_id":
			if err := func() error {
				s.CallID.Reset()
				if err := s.CallID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_id\"")
			}
		case "call_log_id":
			if err := func() error {
				s.CallLogID.Reset()
				if err := s.CallLogID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_log_id\"")
			}
		case "callee_name":
			if err := func() error {
				s.CalleeName.Reset()
				if err := s.CalleeName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_name\"")
			}
		case "callee_number":
			if err := func() error {
				s.CalleeNumber.Reset()
				if err := s.CalleeNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_number\"")
			}
		case "callee_number_type":
			if err := func() error {
				s.CalleeNumberType.Reset()
				if err := s.CalleeNumberType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_number_type\"")
			}
		case "caller_name":
			if err := func() error {
				s.CallerName.Reset()
				if err := s.CallerName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_name\"")
			}
		case "caller_number":
			if err := func() error {
				s.CallerNumber.Reset()
				if err := s.CallerNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_number\"")
			}
		case "caller_number_type":
			if err := func() error {
				s.CallerNumberType.Reset()
				if err := s.CallerNumberType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_number_type\"")
			}
		case "outgoing_by":
			if err := func() error {
				s.OutgoingBy.Reset()
				if err := s.OutgoingBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"outgoing_by\"")
			}
		case "accepted_by":
			if err := func() error {
				s.AcceptedBy.Reset()
				if err := s.AcceptedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"accepted_by\"")
			}
		case "date_time":
			if err := func() error {
				s.DateTime.Reset()
				if err := s.DateTime.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"date_time\"")
			}
		case "disclaimer_status":
			if err := func() error {
				s.DisclaimerStatus.Reset()
				if err := s.DisclaimerStatus.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"disclaimer_status\"")
			}
		case "direction":
			if err := func() error {
				s.Direction.Reset()
				if err := s.Direction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"direction\"")
			}
		case "download_url":
			if err := func() error {
				s.DownloadURL.Reset()
				if err := s.DownloadURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"download_url\"")
			}
		case "duration":
			if err := func() error {
				s.Duration.Reset()
				if err := s.Duration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"duration\"")
			}
		case "end_time":
			if err := func() error {
				s.EndTime.Reset()
				if err := s.EndTime.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"end_time\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "meeting_uuid":
			if err := func() error {
				s.MeetingUUID.Reset()
				if err := s.MeetingUUID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_uuid\"")
			}
		case "owner":
			if err := func() error {
				s.Owner.Reset()
				if err := s.Owner.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"owner\"")
			}
		case "recording_type":
			if err := func() error {
				s.RecordingType.Reset()
				if err := s.RecordingType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_type\"")
			}
		case "site":
			if err := func() error {
				s.Site.Reset()
				if err := s.Site.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site\"")
			}
		case "transcript_download_url":
			if err := func() error {
				s.TranscriptDownloadURL.Reset()
				if err := s.TranscriptDownloadURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transcript_download_url\"")
			}
		case "auto_delete_enable":
			if err := func() error {
				s.AutoDeleteEnable.Reset()
				if err := s.AutoDeleteEnable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_delete_enable\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetPhoneRecordingsOKRecordingsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetPhoneRecordingsOKRecordingsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetPhoneRecordingsOKRecordingsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetPhoneRecordingsOKRecordingsItemAcceptedBy) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetPhoneRecordingsOKRecordingsItemAcceptedBy) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetPhoneRecordingsOKRecordingsItemAcceptedBy = [2]string{
	0: "name",
	1: "extension_number",
}

// Decode decodes GetPhoneRecordingsOKRecordingsItemAcceptedBy from json.
func (s *GetPhoneRecordingsOKRecordingsItemAcceptedBy) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetPhoneRecordingsOKRecordingsItemAcceptedBy to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetPhoneRecordingsOKRecordingsItemAcceptedBy")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetPhoneRecordingsOKRecordingsItemAcceptedBy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetPhoneRecordingsOKRecordingsItemAcceptedBy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetPhoneRecordingsOKRecordingsItemOutgoingBy) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetPhoneRecordingsOKRecordingsItemOutgoingBy) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetPhoneRecordingsOKRecordingsItemOutgoingBy = [2]string{
	0: "name",
	1: "extension_number",
}

// Decode decodes GetPhoneRecordingsOKRecordingsItemOutgoingBy from json.
func (s *GetPhoneRecordingsOKRecordingsItemOutgoingBy) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetPhoneRecordingsOKRecordingsItemOutgoingBy to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetPhoneRecordingsOKRecordingsItemOutgoingBy")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetPhoneRecordingsOKRecordingsItemOutgoingBy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetPhoneRecordingsOKRecordingsItemOutgoingBy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetPhoneRecordingsOKRecordingsItemOwner) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetPhoneRecordingsOKRecordingsItemOwner) encodeFields(e *jx.Encoder) {
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.ExtensionStatus.Set {
			e.FieldStart("extension_status")
			s.ExtensionStatus.Encode(e)
		}
	}
	{
		if s.ExtensionDeletedTime.Set {
			e.FieldStart("extension_deleted_time")
			s.ExtensionDeletedTime.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetPhoneRecordingsOKRecordingsItemOwner = [6]string{
	0: "extension_number",
	1: "id",
	2: "name",
	3: "type",
	4: "extension_status",
	5: "extension_deleted_time",
}

// Decode decodes GetPhoneRecordingsOKRecordingsItemOwner from json.
func (s *GetPhoneRecordingsOKRecordingsItemOwner) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetPhoneRecordingsOKRecordingsItemOwner to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "extension_status":
			if err := func() error {
				s.ExtensionStatus.Reset()
				if err := s.ExtensionStatus.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_status\"")
			}
		case "extension_deleted_time":
			if err := func() error {
				s.ExtensionDeletedTime.Reset()
				if err := s.ExtensionDeletedTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_deleted_time\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetPhoneRecordingsOKRecordingsItemOwner")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetPhoneRecordingsOKRecordingsItemOwner) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetPhoneRecordingsOKRecordingsItemOwner) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetPhoneRecordingsOKRecordingsItemSite) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetPhoneRecordingsOKRecordingsItemSite) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetPhoneRecordingsOKRecordingsItemSite = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes GetPhoneRecordingsOKRecordingsItemSite from json.
func (s *GetPhoneRecordingsOKRecordingsItemSite) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetPhoneRecordingsOKRecordingsItemSite to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetPhoneRecordingsOKRecordingsItemSite")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetPhoneRecordingsOKRecordingsItemSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetPhoneRecordingsOKRecordingsItemSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetPhoneUserVoiceMailsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetPhoneUserVoiceMailsOK) encodeFields(e *jx.Encoder) {
	{
		if s.SyncToken.Set {
			e.FieldStart("sync_token")
			s.SyncToken.Encode(e)
		}
	}
	{
		if s.VoiceMails != nil {
			e.FieldStart("voice_mails")
			e.ArrStart()
			for _, elem := range s.VoiceMails {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGetPhoneUserVoiceMailsOK = [2]string{
	0: "sync_token",
	1: "voice_mails",
}

// Decode decodes GetPhoneUserVoiceMailsOK from json.
func (s *GetPhoneUserVoiceMailsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetPhoneUserVoiceMailsOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "sync_token":
			if err := func() error {
				s.SyncToken.Reset()
				if err := s.SyncToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sync_token\"")
			}
		case "voice_mails":
			if err := func() error {
				s.VoiceMails = make([]GetPhoneUserVoiceMailsOKVoiceMailsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetPhoneUserVoiceMailsOKVoiceMailsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.VoiceMails = append(s.VoiceMails, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voice_mails\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetPhoneUserVoiceMailsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetPhoneUserVoiceMailsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetPhoneUserVoiceMailsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetPhoneUserVoiceMailsOKVoiceMailsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetPhoneUserVoiceMailsOKVoiceMailsItem) encodeFields(e *jx.Encoder) {
	{
		if s.CallID.Set {
			e.FieldStart("call_id")
			s.CallID.Encode(e)
		}
	}
	{
		if s.CallLogID.Set {
			e.FieldStart("call_log_id")
			s.CallLogID.Encode(e)
		}
	}
	{
		if s.CalleeUserID.Set {
			e.FieldStart("callee_user_id")
			s.CalleeUserID.Encode(e)
		}
	}
	{
		if s.CalleeName.Set {
			e.FieldStart("callee_name")
			s.CalleeName.Encode(e)
		}
	}
	{
		if s.CalleeNumber.Set {
			e.FieldStart("callee_number")
			s.CalleeNumber.Encode(e)
		}
	}
	{
		if s.CalleeNumberType.Set {
			e.FieldStart("callee_number_type")
			s.CalleeNumberType.Encode(e)
		}
	}
	{
		if s.CallerUserID.Set {
			e.FieldStart("caller_user_id")
			s.CallerUserID.Encode(e)
		}
	}
	{
		if s.CallerName.Set {
			e.FieldStart("caller_name")
			s.CallerName.Encode(e)
		}
	}
	{
		if s.CallerNumber.Set {
			e.FieldStart("caller_number")
			s.CallerNumber.Encode(e)
		}
	}
	{
		if s.CallerNumberType.Set {
			e.FieldStart("caller_number_type")
			s.CallerNumberType.Encode(e)
		}
	}
	{
		if s.DateTime.Set {
			e.FieldStart("date_time")
			s.DateTime.Encode(e)
		}
	}
	{
		if s.DownloadURL.Set {
			e.FieldStart("download_url")
			s.DownloadURL.Encode(e)
		}
	}
	{
		if s.Duration.Set {
			e.FieldStart("duration")
			s.Duration.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetPhoneUserVoiceMailsOKVoiceMailsItem = [15]string{
	0:  "call_id",
	1:  "call_log_id",
	2:  "callee_user_id",
	3:  "callee_name",
	4:  "callee_number",
	5:  "callee_number_type",
	6:  "caller_user_id",
	7:  "caller_name",
	8:  "caller_number",
	9:  "caller_number_type",
	10: "date_time",
	11: "download_url",
	12: "duration",
	13: "id",
	14: "status",
}

// Decode decodes GetPhoneUserVoiceMailsOKVoiceMailsItem from json.
func (s *GetPhoneUserVoiceMailsOKVoiceMailsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetPhoneUserVoiceMailsOKVoiceMailsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "call_id":
			if err := func() error {
				s.CallID.Reset()
				if err := s.CallID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_id\"")
			}
		case "call_log_id":
			if err := func() error {
				s.CallLogID.Reset()
				if err := s.CallLogID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_log_id\"")
			}
		case "callee_user_id":
			if err := func() error {
				s.CalleeUserID.Reset()
				if err := s.CalleeUserID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_user_id\"")
			}
		case "callee_name":
			if err := func() error {
				s.CalleeName.Reset()
				if err := s.CalleeName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_name\"")
			}
		case "callee_number":
			if err := func() error {
				s.CalleeNumber.Reset()
				if err := s.CalleeNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_number\"")
			}
		case "callee_number_type":
			if err := func() error {
				s.CalleeNumberType.Reset()
				if err := s.CalleeNumberType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_number_type\"")
			}
		case "caller_user_id":
			if err := func() error {
				s.CallerUserID.Reset()
				if err := s.CallerUserID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_user_id\"")
			}
		case "caller_name":
			if err := func() error {
				s.CallerName.Reset()
				if err := s.CallerName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_name\"")
			}
		case "caller_number":
			if err := func() error {
				s.CallerNumber.Reset()
				if err := s.CallerNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_number\"")
			}
		case "caller_number_type":
			if err := func() error {
				s.CallerNumberType.Reset()
				if err := s.CallerNumberType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_number_type\"")
			}
		case "date_time":
			if err := func() error {
				s.DateTime.Reset()
				if err := s.DateTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"date_time\"")
			}
		case "download_url":
			if err := func() error {
				s.DownloadURL.Reset()
				if err := s.DownloadURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"download_url\"")
			}
		case "duration":
			if err := func() error {
				s.Duration.Reset()
				if err := s.Duration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"duration\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetPhoneUserVoiceMailsOKVoiceMailsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetPhoneUserVoiceMailsOKVoiceMailsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetPhoneUserVoiceMailsOKVoiceMailsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetPortedNumbersDetailsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetPortedNumbersDetailsOK) encodeFields(e *jx.Encoder) {
	{
		if s.ContactEmails.Set {
			e.FieldStart("contact_emails")
			s.ContactEmails.Encode(e)
		}
	}
	{
		if s.ContactNumber.Set {
			e.FieldStart("contact_number")
			s.ContactNumber.Encode(e)
		}
	}
	{
		if s.Isp.Set {
			e.FieldStart("isp")
			s.Isp.Encode(e)
		}
	}
	{
		if s.Numbers != nil {
			e.FieldStart("numbers")
			e.ArrStart()
			for _, elem := range s.Numbers {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OrderID.Set {
			e.FieldStart("order_id")
			s.OrderID.Encode(e)
		}
	}
	{
		if s.OriginalBillingInfo.Set {
			e.FieldStart("original_billing_info")
			s.OriginalBillingInfo.Encode(e)
		}
	}
	{
		if s.PrintedName.Set {
			e.FieldStart("printed_name")
			s.PrintedName.Encode(e)
		}
	}
	{
		if s.ReplacingNumbers != nil {
			e.FieldStart("replacing_numbers")
			e.ArrStart()
			for _, elem := range s.ReplacingNumbers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.SubmissionDateTime.Set {
			e.FieldStart("submission_date_time")
			s.SubmissionDateTime.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetPortedNumbersDetailsOK = [10]string{
	0: "contact_emails",
	1: "contact_number",
	2: "isp",
	3: "numbers",
	4: "order_id",
	5: "original_billing_info",
	6: "printed_name",
	7: "replacing_numbers",
	8: "status",
	9: "submission_date_time",
}

// Decode decodes GetPortedNumbersDetailsOK from json.
func (s *GetPortedNumbersDetailsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetPortedNumbersDetailsOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "contact_emails":
			if err := func() error {
				s.ContactEmails.Reset()
				if err := s.ContactEmails.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"contact_emails\"")
			}
		case "contact_number":
			if err := func() error {
				s.ContactNumber.Reset()
				if err := s.ContactNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"contact_number\"")
			}
		case "isp":
			if err := func() error {
				s.Isp.Reset()
				if err := s.Isp.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"isp\"")
			}
		case "numbers":
			if err := func() error {
				s.Numbers = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Numbers = append(s.Numbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"numbers\"")
			}
		case "order_id":
			if err := func() error {
				s.OrderID.Reset()
				if err := s.OrderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_id\"")
			}
		case "original_billing_info":
			if err := func() error {
				s.OriginalBillingInfo.Reset()
				if err := s.OriginalBillingInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_billing_info\"")
			}
		case "printed_name":
			if err := func() error {
				s.PrintedName.Reset()
				if err := s.PrintedName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"printed_name\"")
			}
		case "replacing_numbers":
			if err := func() error {
				s.ReplacingNumbers = make([]GetPortedNumbersDetailsOKReplacingNumbersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetPortedNumbersDetailsOKReplacingNumbersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.ReplacingNumbers = append(s.ReplacingNumbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"replacing_numbers\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "submission_date_time":
			if err := func() error {
				s.SubmissionDateTime.Reset()
				if err := s.SubmissionDateTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"submission_date_time\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetPortedNumbersDetailsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetPortedNumbersDetailsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetPortedNumbersDetailsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetPortedNumbersDetailsOKOriginalBillingInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetPortedNumbersDetailsOKOriginalBillingInfo) encodeFields(e *jx.Encoder) {
	{
		if s.AccountNumber.Set {
			e.FieldStart("account_number")
			s.AccountNumber.Encode(e)
		}
	}
	{
		if s.Address.Set {
			e.FieldStart("address")
			s.Address.Encode(e)
		}
	}
	{
		if s.AuthorizingPerson.Set {
			e.FieldStart("authorizing_person")
			s.AuthorizingPerson.Encode(e)
		}
	}
	{
		if s.BillingTelephoneNumber.Set {
			e.FieldStart("billing_telephone_number")
			s.BillingTelephoneNumber.Encode(e)
		}
	}
	{
		if s.Company.Set {
			e.FieldStart("company")
			s.Company.Encode(e)
		}
	}
	{
		if s.CustomerRequestedDate.Set {
			e.FieldStart("customer_requested_date")
			s.CustomerRequestedDate.Encode(e)
		}
	}
	{
		if s.Pin.Set {
			e.FieldStart("pin")
			s.Pin.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetPortedNumbersDetailsOKOriginalBillingInfo = [7]string{
	0: "account_number",
	1: "address",
	2: "authorizing_person",
	3: "billing_telephone_number",
	4: "company",
	5: "customer_requested_date",
	6: "pin",
}

// Decode decodes GetPortedNumbersDetailsOKOriginalBillingInfo from json.
func (s *GetPortedNumbersDetailsOKOriginalBillingInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetPortedNumbersDetailsOKOriginalBillingInfo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "account_number":
			if err := func() error {
				s.AccountNumber.Reset()
				if err := s.AccountNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_number\"")
			}
		case "address":
			if err := func() error {
				s.Address.Reset()
				if err := s.Address.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"address\"")
			}
		case "authorizing_person":
			if err := func() error {
				s.AuthorizingPerson.Reset()
				if err := s.AuthorizingPerson.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"authorizing_person\"")
			}
		case "billing_telephone_number":
			if err := func() error {
				s.BillingTelephoneNumber.Reset()
				if err := s.BillingTelephoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"billing_telephone_number\"")
			}
		case "company":
			if err := func() error {
				s.Company.Reset()
				if err := s.Company.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company\"")
			}
		case "customer_requested_date":
			if err := func() error {
				s.CustomerRequestedDate.Reset()
				if err := s.CustomerRequestedDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_requested_date\"")
			}
		case "pin":
			if err := func() error {
				s.Pin.Reset()
				if err := s.Pin.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pin\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetPortedNumbersDetailsOKOriginalBillingInfo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetPortedNumbersDetailsOKOriginalBillingInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetPortedNumbersDetailsOKOriginalBillingInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetPortedNumbersDetailsOKOriginalBillingInfoAddress) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetPortedNumbersDetailsOKOriginalBillingInfoAddress) encodeFields(e *jx.Encoder) {
	{
		if s.City.Set {
			e.FieldStart("city")
			s.City.Encode(e)
		}
	}
	{
		if s.Country.Set {
			e.FieldStart("country")
			s.Country.Encode(e)
		}
	}
	{
		if s.HouseNumber.Set {
			e.FieldStart("house_number")
			s.HouseNumber.Encode(e)
		}
	}
	{
		if s.StateCode.Set {
			e.FieldStart("state_code")
			s.StateCode.Encode(e)
		}
	}
	{
		if s.StreetName.Set {
			e.FieldStart("street_name")
			s.StreetName.Encode(e)
		}
	}
	{
		if s.Zip.Set {
			e.FieldStart("zip")
			s.Zip.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetPortedNumbersDetailsOKOriginalBillingInfoAddress = [6]string{
	0: "city",
	1: "country",
	2: "house_number",
	3: "state_code",
	4: "street_name",
	5: "zip",
}

// Decode decodes GetPortedNumbersDetailsOKOriginalBillingInfoAddress from json.
func (s *GetPortedNumbersDetailsOKOriginalBillingInfoAddress) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetPortedNumbersDetailsOKOriginalBillingInfoAddress to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "city":
			if err := func() error {
				s.City.Reset()
				if err := s.City.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"city\"")
			}
		case "country":
			if err := func() error {
				s.Country.Reset()
				if err := s.Country.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country\"")
			}
		case "house_number":
			if err := func() error {
				s.HouseNumber.Reset()
				if err := s.HouseNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"house_number\"")
			}
		case "state_code":
			if err := func() error {
				s.StateCode.Reset()
				if err := s.StateCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"state_code\"")
			}
		case "street_name":
			if err := func() error {
				s.StreetName.Reset()
				if err := s.StreetName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"street_name\"")
			}
		case "zip":
			if err := func() error {
				s.Zip.Reset()
				if err := s.Zip.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zip\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetPortedNumbersDetailsOKOriginalBillingInfoAddress")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetPortedNumbersDetailsOKOriginalBillingInfoAddress) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetPortedNumbersDetailsOKOriginalBillingInfoAddress) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetPortedNumbersDetailsOKReplacingNumbersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetPortedNumbersDetailsOKReplacingNumbersItem) encodeFields(e *jx.Encoder) {
	{
		if s.SourceNumber.Set {
			e.FieldStart("source_number")
			s.SourceNumber.Encode(e)
		}
	}
	{
		if s.TargetNumber.Set {
			e.FieldStart("target_number")
			s.TargetNumber.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetPortedNumbersDetailsOKReplacingNumbersItem = [2]string{
	0: "source_number",
	1: "target_number",
}

// Decode decodes GetPortedNumbersDetailsOKReplacingNumbersItem from json.
func (s *GetPortedNumbersDetailsOKReplacingNumbersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetPortedNumbersDetailsOKReplacingNumbersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "source_number":
			if err := func() error {
				s.SourceNumber.Reset()
				if err := s.SourceNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"source_number\"")
			}
		case "target_number":
			if err := func() error {
				s.TargetNumber.Reset()
				if err := s.TargetNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"target_number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetPortedNumbersDetailsOKReplacingNumbersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetPortedNumbersDetailsOKReplacingNumbersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetPortedNumbersDetailsOKReplacingNumbersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetProvisionTemplateOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetProvisionTemplateOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.Content.Set {
			e.FieldStart("content")
			s.Content.Encode(e)
		}
	}
	{
		if s.BoundDeviceCount.Set {
			e.FieldStart("bound_device_count")
			s.BoundDeviceCount.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetProvisionTemplateOK = [5]string{
	0: "id",
	1: "name",
	2: "description",
	3: "content",
	4: "bound_device_count",
}

// Decode decodes GetProvisionTemplateOK from json.
func (s *GetProvisionTemplateOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetProvisionTemplateOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "content":
			if err := func() error {
				s.Content.Reset()
				if err := s.Content.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content\"")
			}
		case "bound_device_count":
			if err := func() error {
				s.BoundDeviceCount.Reset()
				if err := s.BoundDeviceCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bound_device_count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetProvisionTemplateOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetProvisionTemplateOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetProvisionTemplateOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetRoleInformationOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetRoleInformationOK) encodeFields(e *jx.Encoder) {
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.TotalMembers.Set {
			e.FieldStart("total_members")
			s.TotalMembers.Encode(e)
		}
	}
	{
		if s.IsDefault.Set {
			e.FieldStart("is_default")
			s.IsDefault.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetRoleInformationOK = [5]string{
	0: "description",
	1: "id",
	2: "name",
	3: "total_members",
	4: "is_default",
}

// Decode decodes GetRoleInformationOK from json.
func (s *GetRoleInformationOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetRoleInformationOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "total_members":
			if err := func() error {
				s.TotalMembers.Reset()
				if err := s.TotalMembers.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_members\"")
			}
		case "is_default":
			if err := func() error {
				s.IsDefault.Reset()
				if err := s.IsDefault.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"is_default\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetRoleInformationOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetRoleInformationOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetRoleInformationOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetRoutingRuleOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetRoutingRuleOK) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.NumberPattern.Set {
			e.FieldStart("number_pattern")
			s.NumberPattern.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
	{
		if s.RoutingPath.Set {
			e.FieldStart("routing_path")
			s.RoutingPath.Encode(e)
		}
	}
	{
		if s.RoutingRuleID.Set {
			e.FieldStart("routing_rule_id")
			s.RoutingRuleID.Encode(e)
		}
	}
	{
		if s.SiteID.Set {
			e.FieldStart("site_id")
			s.SiteID.Encode(e)
		}
	}
	{
		if s.Translation.Set {
			e.FieldStart("translation")
			s.Translation.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetRoutingRuleOK = [7]string{
	0: "name",
	1: "number_pattern",
	2: "order",
	3: "routing_path",
	4: "routing_rule_id",
	5: "site_id",
	6: "translation",
}

// Decode decodes GetRoutingRuleOK from json.
func (s *GetRoutingRuleOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetRoutingRuleOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "number_pattern":
			if err := func() error {
				s.NumberPattern.Reset()
				if err := s.NumberPattern.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number_pattern\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		case "routing_path":
			if err := func() error {
				s.RoutingPath.Reset()
				if err := s.RoutingPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"routing_path\"")
			}
		case "routing_rule_id":
			if err := func() error {
				s.RoutingRuleID.Reset()
				if err := s.RoutingRuleID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"routing_rule_id\"")
			}
		case "site_id":
			if err := func() error {
				s.SiteID.Reset()
				if err := s.SiteID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_id\"")
			}
		case "translation":
			if err := func() error {
				s.Translation.Reset()
				if err := s.Translation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"translation\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetRoutingRuleOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetRoutingRuleOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetRoutingRuleOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetRoutingRuleOKRoutingPath) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetRoutingRuleOKRoutingPath) encodeFields(e *jx.Encoder) {
	{
		if s.SipGroup.Set {
			e.FieldStart("sip_group")
			s.SipGroup.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetRoutingRuleOKRoutingPath = [2]string{
	0: "sip_group",
	1: "type",
}

// Decode decodes GetRoutingRuleOKRoutingPath from json.
func (s *GetRoutingRuleOKRoutingPath) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetRoutingRuleOKRoutingPath to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "sip_group":
			if err := func() error {
				s.SipGroup.Reset()
				if err := s.SipGroup.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sip_group\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetRoutingRuleOKRoutingPath")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetRoutingRuleOKRoutingPath) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetRoutingRuleOKRoutingPath) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetRoutingRuleOKRoutingPathSipGroup) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetRoutingRuleOKRoutingPathSipGroup) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetRoutingRuleOKRoutingPathSipGroup = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes GetRoutingRuleOKRoutingPathSipGroup from json.
func (s *GetRoutingRuleOKRoutingPathSipGroup) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetRoutingRuleOKRoutingPathSipGroup to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetRoutingRuleOKRoutingPathSipGroup")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetRoutingRuleOKRoutingPathSipGroup) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetRoutingRuleOKRoutingPathSipGroup) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSMSCampaignOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSMSCampaignOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.ServiceType.Set {
			e.FieldStart("service_type")
			s.ServiceType.Encode(e)
		}
	}
	{
		if s.Brand.Set {
			e.FieldStart("brand")
			s.Brand.Encode(e)
		}
	}
	{
		if s.PhoneNumbers != nil {
			e.FieldStart("phone_numbers")
			e.ArrStart()
			for _, elem := range s.PhoneNumbers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.AutoRenew.Set {
			e.FieldStart("auto_renew")
			s.AutoRenew.Encode(e)
		}
	}
	{
		if s.CreateTime.Set {
			e.FieldStart("create_time")
			s.CreateTime.Encode(e)
		}
	}
	{
		if s.UseCase.Set {
			e.FieldStart("use_case")
			s.UseCase.Encode(e)
		}
	}
	{
		if s.CategoriesFit.Set {
			e.FieldStart("categories_fit")
			s.CategoriesFit.Encode(e)
		}
	}
	{
		if s.ContentType != nil {
			e.FieldStart("content_type")
			e.ArrStart()
			for _, elem := range s.ContentType {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.SampleMessage1.Set {
			e.FieldStart("sample_message_1")
			s.SampleMessage1.Encode(e)
		}
	}
	{
		if s.SampleMessage2.Set {
			e.FieldStart("sample_message_2")
			s.SampleMessage2.Encode(e)
		}
	}
	{
		if s.SampleMessage3.Set {
			e.FieldStart("sample_message_3")
			s.SampleMessage3.Encode(e)
		}
	}
	{
		if s.SampleMessage4.Set {
			e.FieldStart("sample_message_4")
			s.SampleMessage4.Encode(e)
		}
	}
	{
		if s.SampleMessage5.Set {
			e.FieldStart("sample_message_5")
			s.SampleMessage5.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSMSCampaignOK = [16]string{
	0:  "id",
	1:  "display_name",
	2:  "status",
	3:  "service_type",
	4:  "brand",
	5:  "phone_numbers",
	6:  "auto_renew",
	7:  "create_time",
	8:  "use_case",
	9:  "categories_fit",
	10: "content_type",
	11: "sample_message_1",
	12: "sample_message_2",
	13: "sample_message_3",
	14: "sample_message_4",
	15: "sample_message_5",
}

// Decode decodes GetSMSCampaignOK from json.
func (s *GetSMSCampaignOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSMSCampaignOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "service_type":
			if err := func() error {
				s.ServiceType.Reset()
				if err := s.ServiceType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"service_type\"")
			}
		case "brand":
			if err := func() error {
				s.Brand.Reset()
				if err := s.Brand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"brand\"")
			}
		case "phone_numbers":
			if err := func() error {
				s.PhoneNumbers = make([]GetSMSCampaignOKPhoneNumbersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetSMSCampaignOKPhoneNumbersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.PhoneNumbers = append(s.PhoneNumbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_numbers\"")
			}
		case "auto_renew":
			if err := func() error {
				s.AutoRenew.Reset()
				if err := s.AutoRenew.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_renew\"")
			}
		case "create_time":
			if err := func() error {
				s.CreateTime.Reset()
				if err := s.CreateTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"create_time\"")
			}
		case "use_case":
			if err := func() error {
				s.UseCase.Reset()
				if err := s.UseCase.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"use_case\"")
			}
		case "categories_fit":
			if err := func() error {
				s.CategoriesFit.Reset()
				if err := s.CategoriesFit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"categories_fit\"")
			}
		case "content_type":
			if err := func() error {
				s.ContentType = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.ContentType = append(s.ContentType, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content_type\"")
			}
		case "sample_message_1":
			if err := func() error {
				s.SampleMessage1.Reset()
				if err := s.SampleMessage1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sample_message_1\"")
			}
		case "sample_message_2":
			if err := func() error {
				s.SampleMessage2.Reset()
				if err := s.SampleMessage2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sample_message_2\"")
			}
		case "sample_message_3":
			if err := func() error {
				s.SampleMessage3.Reset()
				if err := s.SampleMessage3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sample_message_3\"")
			}
		case "sample_message_4":
			if err := func() error {
				s.SampleMessage4.Reset()
				if err := s.SampleMessage4.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sample_message_4\"")
			}
		case "sample_message_5":
			if err := func() error {
				s.SampleMessage5.Reset()
				if err := s.SampleMessage5.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sample_message_5\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSMSCampaignOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSMSCampaignOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSMSCampaignOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSMSCampaignOKBrand) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSMSCampaignOKBrand) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSMSCampaignOKBrand = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes GetSMSCampaignOKBrand from json.
func (s *GetSMSCampaignOKBrand) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSMSCampaignOKBrand to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSMSCampaignOKBrand")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSMSCampaignOKBrand) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSMSCampaignOKBrand) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSMSCampaignOKPhoneNumbersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSMSCampaignOKPhoneNumbersItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Number.Set {
			e.FieldStart("number")
			s.Number.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSMSCampaignOKPhoneNumbersItem = [2]string{
	0: "id",
	1: "number",
}

// Decode decodes GetSMSCampaignOKPhoneNumbersItem from json.
func (s *GetSMSCampaignOKPhoneNumbersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSMSCampaignOKPhoneNumbersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "number":
			if err := func() error {
				s.Number.Reset()
				if err := s.Number.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSMSCampaignOKPhoneNumbersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSMSCampaignOKPhoneNumbersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSMSCampaignOKPhoneNumbersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSMSChargesUsageReportOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSMSChargesUsageReportOK) encodeFields(e *jx.Encoder) {
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
	{
		if s.TotalRecords.Set {
			e.FieldStart("total_records")
			s.TotalRecords.Encode(e)
		}
	}
	{
		if s.From.Set {
			e.FieldStart("from")
			s.From.Encode(e)
		}
	}
	{
		if s.To.Set {
			e.FieldStart("to")
			s.To.Encode(e)
		}
	}
	{
		if s.SMSCharges != nil {
			e.FieldStart("sms_charges")
			e.ArrStart()
			for _, elem := range s.SMSCharges {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGetSMSChargesUsageReportOK = [6]string{
	0: "next_page_token",
	1: "page_size",
	2: "total_records",
	3: "from",
	4: "to",
	5: "sms_charges",
}

// Decode decodes GetSMSChargesUsageReportOK from json.
func (s *GetSMSChargesUsageReportOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSMSChargesUsageReportOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		case "total_records":
			if err := func() error {
				s.TotalRecords.Reset()
				if err := s.TotalRecords.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_records\"")
			}
		case "from":
			if err := func() error {
				s.From.Reset()
				if err := s.From.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"from\"")
			}
		case "to":
			if err := func() error {
				s.To.Reset()
				if err := s.To.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"to\"")
			}
		case "sms_charges":
			if err := func() error {
				s.SMSCharges = make([]GetSMSChargesUsageReportOKSMSChargesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetSMSChargesUsageReportOKSMSChargesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.SMSCharges = append(s.SMSCharges, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sms_charges\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSMSChargesUsageReportOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSMSChargesUsageReportOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSMSChargesUsageReportOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSMSChargesUsageReportOKSMSChargesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSMSChargesUsageReportOKSMSChargesItem) encodeFields(e *jx.Encoder) {
	{
		if s.SessionID.Set {
			e.FieldStart("session_id")
			s.SessionID.Encode(e)
		}
	}
	{
		if s.MessageID.Set {
			e.FieldStart("message_id")
			s.MessageID.Encode(e)
		}
	}
	{
		if s.MessageType.Set {
			e.FieldStart("message_type")
			s.MessageType.Encode(e)
		}
	}
	{
		if s.FromNumber.Set {
			e.FieldStart("from_number")
			s.FromNumber.Encode(e)
		}
	}
	{
		if s.FromExtensionNumber.Set {
			e.FieldStart("from_extension_number")
			s.FromExtensionNumber.Encode(e)
		}
	}
	{
		if s.FromDisplayName.Set {
			e.FieldStart("from_display_name")
			s.FromDisplayName.Encode(e)
		}
	}
	{
		if s.ToNumber.Set {
			e.FieldStart("to_number")
			s.ToNumber.Encode(e)
		}
	}
	{
		if s.ToExtensionNumber.Set {
			e.FieldStart("to_extension_number")
			s.ToExtensionNumber.Encode(e)
		}
	}
	{
		if s.ToDisplayName.Set {
			e.FieldStart("to_display_name")
			s.ToDisplayName.Encode(e)
		}
	}
	{
		if s.SentTime.Set {
			e.FieldStart("sent_time")
			s.SentTime.Encode(e)
		}
	}
	{
		if s.BillingNumber.Set {
			e.FieldStart("billing_number")
			s.BillingNumber.Encode(e)
		}
	}
	{
		if s.CostCenter.Set {
			e.FieldStart("cost_center")
			s.CostCenter.Encode(e)
		}
	}
	{
		if s.Department.Set {
			e.FieldStart("department")
			s.Department.Encode(e)
		}
	}
	{
		if s.Rate.Set {
			e.FieldStart("rate")
			s.Rate.Encode(e)
		}
	}
	{
		if s.Currency.Set {
			e.FieldStart("currency")
			s.Currency.Encode(e)
		}
	}
	{
		if s.TotalCharge.Set {
			e.FieldStart("total_charge")
			s.TotalCharge.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSMSChargesUsageReportOKSMSChargesItem = [16]string{
	0:  "session_id",
	1:  "message_id",
	2:  "message_type",
	3:  "from_number",
	4:  "from_extension_number",
	5:  "from_display_name",
	6:  "to_number",
	7:  "to_extension_number",
	8:  "to_display_name",
	9:  "sent_time",
	10: "billing_number",
	11: "cost_center",
	12: "department",
	13: "rate",
	14: "currency",
	15: "total_charge",
}

// Decode decodes GetSMSChargesUsageReportOKSMSChargesItem from json.
func (s *GetSMSChargesUsageReportOKSMSChargesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSMSChargesUsageReportOKSMSChargesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "session_id":
			if err := func() error {
				s.SessionID.Reset()
				if err := s.SessionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"session_id\"")
			}
		case "message_id":
			if err := func() error {
				s.MessageID.Reset()
				if err := s.MessageID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message_id\"")
			}
		case "message_type":
			if err := func() error {
				s.MessageType.Reset()
				if err := s.MessageType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message_type\"")
			}
		case "from_number":
			if err := func() error {
				s.FromNumber.Reset()
				if err := s.FromNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"from_number\"")
			}
		case "from_extension_number":
			if err := func() error {
				s.FromExtensionNumber.Reset()
				if err := s.FromExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"from_extension_number\"")
			}
		case "from_display_name":
			if err := func() error {
				s.FromDisplayName.Reset()
				if err := s.FromDisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"from_display_name\"")
			}
		case "to_number":
			if err := func() error {
				s.ToNumber.Reset()
				if err := s.ToNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"to_number\"")
			}
		case "to_extension_number":
			if err := func() error {
				s.ToExtensionNumber.Reset()
				if err := s.ToExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"to_extension_number\"")
			}
		case "to_display_name":
			if err := func() error {
				s.ToDisplayName.Reset()
				if err := s.ToDisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"to_display_name\"")
			}
		case "sent_time":
			if err := func() error {
				s.SentTime.Reset()
				if err := s.SentTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sent_time\"")
			}
		case "billing_number":
			if err := func() error {
				s.BillingNumber.Reset()
				if err := s.BillingNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"billing_number\"")
			}
		case "cost_center":
			if err := func() error {
				s.CostCenter.Reset()
				if err := s.CostCenter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cost_center\"")
			}
		case "department":
			if err := func() error {
				s.Department.Reset()
				if err := s.Department.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"department\"")
			}
		case "rate":
			if err := func() error {
				s.Rate.Reset()
				if err := s.Rate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rate\"")
			}
		case "currency":
			if err := func() error {
				s.Currency.Reset()
				if err := s.Currency.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"currency\"")
			}
		case "total_charge":
			if err := func() error {
				s.TotalCharge.Reset()
				if err := s.TotalCharge.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_charge\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSMSChargesUsageReportOKSMSChargesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSMSChargesUsageReportOKSMSChargesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSMSChargesUsageReportOKSMSChargesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSettingTemplateOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSettingTemplateOK) encodeFields(e *jx.Encoder) {
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Policy.Set {
			e.FieldStart("policy")
			s.Policy.Encode(e)
		}
	}
	{
		if s.Profile.Set {
			e.FieldStart("profile")
			s.Profile.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.UserSettings.Set {
			e.FieldStart("user_settings")
			s.UserSettings.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSettingTemplateOK = [7]string{
	0: "description",
	1: "id",
	2: "name",
	3: "policy",
	4: "profile",
	5: "type",
	6: "user_settings",
}

// Decode decodes GetSettingTemplateOK from json.
func (s *GetSettingTemplateOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSettingTemplateOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "policy":
			if err := func() error {
				s.Policy.Reset()
				if err := s.Policy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"policy\"")
			}
		case "profile":
			if err := func() error {
				s.Profile.Reset()
				if err := s.Profile.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"profile\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "user_settings":
			if err := func() error {
				s.UserSettings.Reset()
				if err := s.UserSettings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"user_settings\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSettingTemplateOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSettingTemplateOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSettingTemplateOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSettingTemplateOKPolicy) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSettingTemplateOKPolicy) encodeFields(e *jx.Encoder) {
	{
		if s.AdHocCallRecording.Set {
			e.FieldStart("ad_hoc_call_recording")
			s.AdHocCallRecording.Encode(e)
		}
	}
	{
		if s.AutoCallRecording.Set {
			e.FieldStart("auto_call_recording")
			s.AutoCallRecording.Encode(e)
		}
	}
	{
		if s.SMS.Set {
			e.FieldStart("sms")
			s.SMS.Encode(e)
		}
	}
	{
		if s.Voicemail.Set {
			e.FieldStart("voicemail")
			s.Voicemail.Encode(e)
		}
	}
	{
		if s.CallForwarding.Set {
			e.FieldStart("call_forwarding")
			s.CallForwarding.Encode(e)
		}
	}
	{
		if s.CallOverflow.Set {
			e.FieldStart("call_overflow")
			s.CallOverflow.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSettingTemplateOKPolicy = [6]string{
	0: "ad_hoc_call_recording",
	1: "auto_call_recording",
	2: "sms",
	3: "voicemail",
	4: "call_forwarding",
	5: "call_overflow",
}

// Decode decodes GetSettingTemplateOKPolicy from json.
func (s *GetSettingTemplateOKPolicy) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSettingTemplateOKPolicy to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "ad_hoc_call_recording":
			if err := func() error {
				s.AdHocCallRecording.Reset()
				if err := s.AdHocCallRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ad_hoc_call_recording\"")
			}
		case "auto_call_recording":
			if err := func() error {
				s.AutoCallRecording.Reset()
				if err := s.AutoCallRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_call_recording\"")
			}
		case "sms":
			if err := func() error {
				s.SMS.Reset()
				if err := s.SMS.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sms\"")
			}
		case "voicemail":
			if err := func() error {
				s.Voicemail.Reset()
				if err := s.Voicemail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voicemail\"")
			}
		case "call_forwarding":
			if err := func() error {
				s.CallForwarding.Reset()
				if err := s.CallForwarding.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_forwarding\"")
			}
		case "call_overflow":
			if err := func() error {
				s.CallOverflow.Reset()
				if err := s.CallOverflow.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_overflow\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSettingTemplateOKPolicy")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSettingTemplateOKPolicy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSettingTemplateOKPolicy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSettingTemplateOKPolicyAdHocCallRecording) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSettingTemplateOKPolicyAdHocCallRecording) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.RecordingStartPrompt.Set {
			e.FieldStart("recording_start_prompt")
			s.RecordingStartPrompt.Encode(e)
		}
	}
	{
		if s.RecordingTranscription.Set {
			e.FieldStart("recording_transcription")
			s.RecordingTranscription.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSettingTemplateOKPolicyAdHocCallRecording = [3]string{
	0: "enable",
	1: "recording_start_prompt",
	2: "recording_transcription",
}

// Decode decodes GetSettingTemplateOKPolicyAdHocCallRecording from json.
func (s *GetSettingTemplateOKPolicyAdHocCallRecording) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSettingTemplateOKPolicyAdHocCallRecording to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "recording_start_prompt":
			if err := func() error {
				s.RecordingStartPrompt.Reset()
				if err := s.RecordingStartPrompt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_start_prompt\"")
			}
		case "recording_transcription":
			if err := func() error {
				s.RecordingTranscription.Reset()
				if err := s.RecordingTranscription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_transcription\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSettingTemplateOKPolicyAdHocCallRecording")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSettingTemplateOKPolicyAdHocCallRecording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSettingTemplateOKPolicyAdHocCallRecording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSettingTemplateOKPolicyAutoCallRecording) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSettingTemplateOKPolicyAutoCallRecording) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.RecordingCalls.Set {
			e.FieldStart("recording_calls")
			s.RecordingCalls.Encode(e)
		}
	}
	{
		if s.RecordingStartPrompt.Set {
			e.FieldStart("recording_start_prompt")
			s.RecordingStartPrompt.Encode(e)
		}
	}
	{
		if s.RecordingTranscription.Set {
			e.FieldStart("recording_transcription")
			s.RecordingTranscription.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSettingTemplateOKPolicyAutoCallRecording = [4]string{
	0: "enable",
	1: "recording_calls",
	2: "recording_start_prompt",
	3: "recording_transcription",
}

// Decode decodes GetSettingTemplateOKPolicyAutoCallRecording from json.
func (s *GetSettingTemplateOKPolicyAutoCallRecording) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSettingTemplateOKPolicyAutoCallRecording to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "recording_calls":
			if err := func() error {
				s.RecordingCalls.Reset()
				if err := s.RecordingCalls.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_calls\"")
			}
		case "recording_start_prompt":
			if err := func() error {
				s.RecordingStartPrompt.Reset()
				if err := s.RecordingStartPrompt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_start_prompt\"")
			}
		case "recording_transcription":
			if err := func() error {
				s.RecordingTranscription.Reset()
				if err := s.RecordingTranscription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_transcription\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSettingTemplateOKPolicyAutoCallRecording")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSettingTemplateOKPolicyAutoCallRecording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSettingTemplateOKPolicyAutoCallRecording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSettingTemplateOKPolicyCallForwarding) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSettingTemplateOKPolicyCallForwarding) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.CallForwardingType.Set {
			e.FieldStart("call_forwarding_type")
			s.CallForwardingType.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSettingTemplateOKPolicyCallForwarding = [2]string{
	0: "enable",
	1: "call_forwarding_type",
}

// Decode decodes GetSettingTemplateOKPolicyCallForwarding from json.
func (s *GetSettingTemplateOKPolicyCallForwarding) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSettingTemplateOKPolicyCallForwarding to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "call_forwarding_type":
			if err := func() error {
				s.CallForwardingType.Reset()
				if err := s.CallForwardingType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_forwarding_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSettingTemplateOKPolicyCallForwarding")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSettingTemplateOKPolicyCallForwarding) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSettingTemplateOKPolicyCallForwarding) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSettingTemplateOKPolicyCallOverflow) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSettingTemplateOKPolicyCallOverflow) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.CallOverflowType.Set {
			e.FieldStart("call_overflow_type")
			s.CallOverflowType.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSettingTemplateOKPolicyCallOverflow = [2]string{
	0: "enable",
	1: "call_overflow_type",
}

// Decode decodes GetSettingTemplateOKPolicyCallOverflow from json.
func (s *GetSettingTemplateOKPolicyCallOverflow) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSettingTemplateOKPolicyCallOverflow to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "call_overflow_type":
			if err := func() error {
				s.CallOverflowType.Reset()
				if err := s.CallOverflowType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_overflow_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSettingTemplateOKPolicyCallOverflow")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSettingTemplateOKPolicyCallOverflow) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSettingTemplateOKPolicyCallOverflow) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSettingTemplateOKPolicySMS) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSettingTemplateOKPolicySMS) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.InternationalSMS.Set {
			e.FieldStart("international_sms")
			s.InternationalSMS.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSettingTemplateOKPolicySMS = [2]string{
	0: "enable",
	1: "international_sms",
}

// Decode decodes GetSettingTemplateOKPolicySMS from json.
func (s *GetSettingTemplateOKPolicySMS) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSettingTemplateOKPolicySMS to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "international_sms":
			if err := func() error {
				s.InternationalSMS.Reset()
				if err := s.InternationalSMS.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"international_sms\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSettingTemplateOKPolicySMS")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSettingTemplateOKPolicySMS) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSettingTemplateOKPolicySMS) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSettingTemplateOKPolicyVoicemail) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSettingTemplateOKPolicyVoicemail) encodeFields(e *jx.Encoder) {
	{
		if s.AllowTranscription.Set {
			e.FieldStart("allow_transcription")
			s.AllowTranscription.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSettingTemplateOKPolicyVoicemail = [2]string{
	0: "allow_transcription",
	1: "enable",
}

// Decode decodes GetSettingTemplateOKPolicyVoicemail from json.
func (s *GetSettingTemplateOKPolicyVoicemail) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSettingTemplateOKPolicyVoicemail to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allow_transcription":
			if err := func() error {
				s.AllowTranscription.Reset()
				if err := s.AllowTranscription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_transcription\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSettingTemplateOKPolicyVoicemail")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSettingTemplateOKPolicyVoicemail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSettingTemplateOKPolicyVoicemail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSettingTemplateOKProfile) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSettingTemplateOKProfile) encodeFields(e *jx.Encoder) {
	{
		if s.AreaCode.Set {
			e.FieldStart("area_code")
			s.AreaCode.Encode(e)
		}
	}
	{
		if s.Country.Set {
			e.FieldStart("country")
			s.Country.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSettingTemplateOKProfile = [2]string{
	0: "area_code",
	1: "country",
}

// Decode decodes GetSettingTemplateOKProfile from json.
func (s *GetSettingTemplateOKProfile) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSettingTemplateOKProfile to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "area_code":
			if err := func() error {
				s.AreaCode.Reset()
				if err := s.AreaCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"area_code\"")
			}
		case "country":
			if err := func() error {
				s.Country.Reset()
				if err := s.Country.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSettingTemplateOKProfile")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSettingTemplateOKProfile) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSettingTemplateOKProfile) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSettingTemplateOKUserSettings) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSettingTemplateOKUserSettings) encodeFields(e *jx.Encoder) {
	{
		if s.AudioPromptLanguage.Set {
			e.FieldStart("audio_prompt_language")
			s.AudioPromptLanguage.Encode(e)
		}
	}
	{
		if s.BlockCallsWithoutCallerID.Set {
			e.FieldStart("block_calls_without_caller_id")
			s.BlockCallsWithoutCallerID.Encode(e)
		}
	}
	{
		if s.CallHandling.Set {
			e.FieldStart("call_handling")
			s.CallHandling.Encode(e)
		}
	}
	{
		if s.DeskPhone.Set {
			e.FieldStart("desk_phone")
			s.DeskPhone.Encode(e)
		}
	}
	{
		if s.HoldMusic.Set {
			e.FieldStart("hold_music")
			s.HoldMusic.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSettingTemplateOKUserSettings = [5]string{
	0: "audio_prompt_language",
	1: "block_calls_without_caller_id",
	2: "call_handling",
	3: "desk_phone",
	4: "hold_music",
}

// Decode decodes GetSettingTemplateOKUserSettings from json.
func (s *GetSettingTemplateOKUserSettings) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSettingTemplateOKUserSettings to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_prompt_language":
			if err := func() error {
				s.AudioPromptLanguage.Reset()
				if err := s.AudioPromptLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_prompt_language\"")
			}
		case "block_calls_without_caller_id":
			if err := func() error {
				s.BlockCallsWithoutCallerID.Reset()
				if err := s.BlockCallsWithoutCallerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"block_calls_without_caller_id\"")
			}
		case "call_handling":
			if err := func() error {
				s.CallHandling.Reset()
				if err := s.CallHandling.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_handling\"")
			}
		case "desk_phone":
			if err := func() error {
				s.DeskPhone.Reset()
				if err := s.DeskPhone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"desk_phone\"")
			}
		case "hold_music":
			if err := func() error {
				s.HoldMusic.Reset()
				if err := s.HoldMusic.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hold_music\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSettingTemplateOKUserSettings")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSettingTemplateOKUserSettings) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSettingTemplateOKUserSettings) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSettingTemplateOKUserSettingsCallHandling) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSettingTemplateOKUserSettingsCallHandling) encodeFields(e *jx.Encoder) {
	{
		if s.BusinessHours.Set {
			e.FieldStart("business_hours")
			s.BusinessHours.Encode(e)
		}
	}
	{
		if s.CloseHours.Set {
			e.FieldStart("close_hours")
			s.CloseHours.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSettingTemplateOKUserSettingsCallHandling = [2]string{
	0: "business_hours",
	1: "close_hours",
}

// Decode decodes GetSettingTemplateOKUserSettingsCallHandling from json.
func (s *GetSettingTemplateOKUserSettingsCallHandling) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSettingTemplateOKUserSettingsCallHandling to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "business_hours":
			if err := func() error {
				s.BusinessHours.Reset()
				if err := s.BusinessHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"business_hours\"")
			}
		case "close_hours":
			if err := func() error {
				s.CloseHours.Reset()
				if err := s.CloseHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"close_hours\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSettingTemplateOKUserSettingsCallHandling")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSettingTemplateOKUserSettingsCallHandling) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSettingTemplateOKUserSettingsCallHandling) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSettingTemplateOKUserSettingsCallHandlingBusinessHours) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSettingTemplateOKUserSettingsCallHandlingBusinessHours) encodeFields(e *jx.Encoder) {
	{
		if s.BusinessHourAction.Set {
			e.FieldStart("business_hour_action")
			s.BusinessHourAction.Encode(e)
		}
	}
	{
		if s.ConnectToOperator.Set {
			e.FieldStart("connect_to_operator")
			s.ConnectToOperator.Encode(e)
		}
	}
	{
		if s.BusyAction.Set {
			e.FieldStart("busy_action")
			s.BusyAction.Encode(e)
		}
	}
	{
		if s.BusyConnectOperator.Set {
			e.FieldStart("busy_connect_operator")
			s.BusyConnectOperator.Encode(e)
		}
	}
	{
		if s.CustomHours != nil {
			e.FieldStart("custom_hours")
			e.ArrStart()
			for _, elem := range s.CustomHours {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.RingType.Set {
			e.FieldStart("ring_type")
			s.RingType.Encode(e)
		}
	}
	{
		if s.RingingDuration.Set {
			e.FieldStart("ringing_duration")
			s.RingingDuration.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSettingTemplateOKUserSettingsCallHandlingBusinessHours = [8]string{
	0: "business_hour_action",
	1: "connect_to_operator",
	2: "busy_action",
	3: "busy_connect_operator",
	4: "custom_hours",
	5: "ring_type",
	6: "ringing_duration",
	7: "type",
}

// Decode decodes GetSettingTemplateOKUserSettingsCallHandlingBusinessHours from json.
func (s *GetSettingTemplateOKUserSettingsCallHandlingBusinessHours) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSettingTemplateOKUserSettingsCallHandlingBusinessHours to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "business_hour_action":
			if err := func() error {
				s.BusinessHourAction.Reset()
				if err := s.BusinessHourAction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"business_hour_action\"")
			}
		case "connect_to_operator":
			if err := func() error {
				s.ConnectToOperator.Reset()
				if err := s.ConnectToOperator.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"connect_to_operator\"")
			}
		case "busy_action":
			if err := func() error {
				s.BusyAction.Reset()
				if err := s.BusyAction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"busy_action\"")
			}
		case "busy_connect_operator":
			if err := func() error {
				s.BusyConnectOperator.Reset()
				if err := s.BusyConnectOperator.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"busy_connect_operator\"")
			}
		case "custom_hours":
			if err := func() error {
				s.CustomHours = make([]GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursCustomHoursItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursCustomHoursItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CustomHours = append(s.CustomHours, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"custom_hours\"")
			}
		case "ring_type":
			if err := func() error {
				s.RingType.Reset()
				if err := s.RingType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ring_type\"")
			}
		case "ringing_duration":
			if err := func() error {
				s.RingingDuration.Reset()
				if err := s.RingingDuration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ringing_duration\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSettingTemplateOKUserSettingsCallHandlingBusinessHours")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSettingTemplateOKUserSettingsCallHandlingBusinessHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSettingTemplateOKUserSettingsCallHandlingBusinessHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursBusyConnectOperator) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursBusyConnectOperator) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.ExternalNumber.Set {
			e.FieldStart("external_number")
			s.ExternalNumber.Encode(e)
		}
	}
	{
		if s.PlayCalleeVoicemailGreeting.Set {
			e.FieldStart("play_callee_voicemail_greeting")
			s.PlayCalleeVoicemailGreeting.Encode(e)
		}
	}
	{
		if s.RequirePress1BeforeConnecting.Set {
			e.FieldStart("require_press_1_before_connecting")
			s.RequirePress1BeforeConnecting.Encode(e)
		}
	}
	{
		if s.AllowCallerCheckVoicemail.Set {
			e.FieldStart("allow_caller_check_voicemail")
			s.AllowCallerCheckVoicemail.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSettingTemplateOKUserSettingsCallHandlingBusinessHoursBusyConnectOperator = [7]string{
	0: "enable",
	1: "id",
	2: "type",
	3: "external_number",
	4: "play_callee_voicemail_greeting",
	5: "require_press_1_before_connecting",
	6: "allow_caller_check_voicemail",
}

// Decode decodes GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursBusyConnectOperator from json.
func (s *GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursBusyConnectOperator) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursBusyConnectOperator to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "external_number":
			if err := func() error {
				s.ExternalNumber.Reset()
				if err := s.ExternalNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"external_number\"")
			}
		case "play_callee_voicemail_greeting":
			if err := func() error {
				s.PlayCalleeVoicemailGreeting.Reset()
				if err := s.PlayCalleeVoicemailGreeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_callee_voicemail_greeting\"")
			}
		case "require_press_1_before_connecting":
			if err := func() error {
				s.RequirePress1BeforeConnecting.Reset()
				if err := s.RequirePress1BeforeConnecting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_press_1_before_connecting\"")
			}
		case "allow_caller_check_voicemail":
			if err := func() error {
				s.AllowCallerCheckVoicemail.Reset()
				if err := s.AllowCallerCheckVoicemail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_caller_check_voicemail\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursBusyConnectOperator")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursBusyConnectOperator) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursBusyConnectOperator) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursBusyConnectOperatorExternalNumber) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursBusyConnectOperatorExternalNumber) encodeFields(e *jx.Encoder) {
	{
		if s.Number.Set {
			e.FieldStart("number")
			s.Number.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSettingTemplateOKUserSettingsCallHandlingBusinessHoursBusyConnectOperatorExternalNumber = [2]string{
	0: "number",
	1: "description",
}

// Decode decodes GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursBusyConnectOperatorExternalNumber from json.
func (s *GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursBusyConnectOperatorExternalNumber) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursBusyConnectOperatorExternalNumber to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "number":
			if err := func() error {
				s.Number.Reset()
				if err := s.Number.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursBusyConnectOperatorExternalNumber")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursBusyConnectOperatorExternalNumber) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursBusyConnectOperatorExternalNumber) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursConnectToOperator) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursConnectToOperator) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.ExternalNumber.Set {
			e.FieldStart("external_number")
			s.ExternalNumber.Encode(e)
		}
	}
	{
		if s.PlayCalleeVoicemailGreeting.Set {
			e.FieldStart("play_callee_voicemail_greeting")
			s.PlayCalleeVoicemailGreeting.Encode(e)
		}
	}
	{
		if s.RequirePress1BeforeConnecting.Set {
			e.FieldStart("require_press_1_before_connecting")
			s.RequirePress1BeforeConnecting.Encode(e)
		}
	}
	{
		if s.AllowCallerCheckVoicemail.Set {
			e.FieldStart("allow_caller_check_voicemail")
			s.AllowCallerCheckVoicemail.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSettingTemplateOKUserSettingsCallHandlingBusinessHoursConnectToOperator = [7]string{
	0: "enable",
	1: "id",
	2: "type",
	3: "external_number",
	4: "play_callee_voicemail_greeting",
	5: "require_press_1_before_connecting",
	6: "allow_caller_check_voicemail",
}

// Decode decodes GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursConnectToOperator from json.
func (s *GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursConnectToOperator) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursConnectToOperator to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "external_number":
			if err := func() error {
				s.ExternalNumber.Reset()
				if err := s.ExternalNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"external_number\"")
			}
		case "play_callee_voicemail_greeting":
			if err := func() error {
				s.PlayCalleeVoicemailGreeting.Reset()
				if err := s.PlayCalleeVoicemailGreeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_callee_voicemail_greeting\"")
			}
		case "require_press_1_before_connecting":
			if err := func() error {
				s.RequirePress1BeforeConnecting.Reset()
				if err := s.RequirePress1BeforeConnecting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_press_1_before_connecting\"")
			}
		case "allow_caller_check_voicemail":
			if err := func() error {
				s.AllowCallerCheckVoicemail.Reset()
				if err := s.AllowCallerCheckVoicemail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_caller_check_voicemail\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursConnectToOperator")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursConnectToOperator) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursConnectToOperator) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursConnectToOperatorExternalNumber) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursConnectToOperatorExternalNumber) encodeFields(e *jx.Encoder) {
	{
		if s.Number.Set {
			e.FieldStart("number")
			s.Number.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSettingTemplateOKUserSettingsCallHandlingBusinessHoursConnectToOperatorExternalNumber = [2]string{
	0: "number",
	1: "description",
}

// Decode decodes GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursConnectToOperatorExternalNumber from json.
func (s *GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursConnectToOperatorExternalNumber) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursConnectToOperatorExternalNumber to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "number":
			if err := func() error {
				s.Number.Reset()
				if err := s.Number.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursConnectToOperatorExternalNumber")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursConnectToOperatorExternalNumber) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursConnectToOperatorExternalNumber) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursCustomHoursItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursCustomHoursItem) encodeFields(e *jx.Encoder) {
	{
		if s.From.Set {
			e.FieldStart("from")
			s.From.Encode(e, json.EncodeTime)
		}
	}
	{
		if s.To.Set {
			e.FieldStart("to")
			s.To.Encode(e, json.EncodeTime)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.Weekday.Set {
			e.FieldStart("weekday")
			s.Weekday.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSettingTemplateOKUserSettingsCallHandlingBusinessHoursCustomHoursItem = [4]string{
	0: "from",
	1: "to",
	2: "type",
	3: "weekday",
}

// Decode decodes GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursCustomHoursItem from json.
func (s *GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursCustomHoursItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursCustomHoursItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "from":
			if err := func() error {
				s.From.Reset()
				if err := s.From.Decode(d, json.DecodeTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"from\"")
			}
		case "to":
			if err := func() error {
				s.To.Reset()
				if err := s.To.Decode(d, json.DecodeTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"to\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "weekday":
			if err := func() error {
				s.Weekday.Reset()
				if err := s.Weekday.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"weekday\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursCustomHoursItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursCustomHoursItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursCustomHoursItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSettingTemplateOKUserSettingsCallHandlingCloseHours) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSettingTemplateOKUserSettingsCallHandlingCloseHours) encodeFields(e *jx.Encoder) {
	{
		if s.CloseHourAction.Set {
			e.FieldStart("close_hour_action")
			s.CloseHourAction.Encode(e)
		}
	}
	{
		if s.ConnectToOperator.Set {
			e.FieldStart("connect_to_operator")
			s.ConnectToOperator.Encode(e)
		}
	}
	{
		if s.BusyAction.Set {
			e.FieldStart("busy_action")
			s.BusyAction.Encode(e)
		}
	}
	{
		if s.BusyConnectOperator.Set {
			e.FieldStart("busy_connect_operator")
			s.BusyConnectOperator.Encode(e)
		}
	}
	{
		if s.MaxWaitTime.Set {
			e.FieldStart("max_wait_time")
			s.MaxWaitTime.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSettingTemplateOKUserSettingsCallHandlingCloseHours = [5]string{
	0: "close_hour_action",
	1: "connect_to_operator",
	2: "busy_action",
	3: "busy_connect_operator",
	4: "max_wait_time",
}

// Decode decodes GetSettingTemplateOKUserSettingsCallHandlingCloseHours from json.
func (s *GetSettingTemplateOKUserSettingsCallHandlingCloseHours) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSettingTemplateOKUserSettingsCallHandlingCloseHours to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "close_hour_action":
			if err := func() error {
				s.CloseHourAction.Reset()
				if err := s.CloseHourAction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"close_hour_action\"")
			}
		case "connect_to_operator":
			if err := func() error {
				s.ConnectToOperator.Reset()
				if err := s.ConnectToOperator.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"connect_to_operator\"")
			}
		case "busy_action":
			if err := func() error {
				s.BusyAction.Reset()
				if err := s.BusyAction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"busy_action\"")
			}
		case "busy_connect_operator":
			if err := func() error {
				s.BusyConnectOperator.Reset()
				if err := s.BusyConnectOperator.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"busy_connect_operator\"")
			}
		case "max_wait_time":
			if err := func() error {
				s.MaxWaitTime.Reset()
				if err := s.MaxWaitTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"max_wait_time\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSettingTemplateOKUserSettingsCallHandlingCloseHours")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSettingTemplateOKUserSettingsCallHandlingCloseHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSettingTemplateOKUserSettingsCallHandlingCloseHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSettingTemplateOKUserSettingsCallHandlingCloseHoursBusyConnectOperator) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSettingTemplateOKUserSettingsCallHandlingCloseHoursBusyConnectOperator) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.ExternalNumber.Set {
			e.FieldStart("external_number")
			s.ExternalNumber.Encode(e)
		}
	}
	{
		if s.PlayCalleeVoicemailGreeting.Set {
			e.FieldStart("play_callee_voicemail_greeting")
			s.PlayCalleeVoicemailGreeting.Encode(e)
		}
	}
	{
		if s.RequirePress1BeforeConnecting.Set {
			e.FieldStart("require_press_1_before_connecting")
			s.RequirePress1BeforeConnecting.Encode(e)
		}
	}
	{
		if s.AllowCallerCheckVoicemail.Set {
			e.FieldStart("allow_caller_check_voicemail")
			s.AllowCallerCheckVoicemail.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSettingTemplateOKUserSettingsCallHandlingCloseHoursBusyConnectOperator = [7]string{
	0: "enable",
	1: "id",
	2: "type",
	3: "external_number",
	4: "play_callee_voicemail_greeting",
	5: "require_press_1_before_connecting",
	6: "allow_caller_check_voicemail",
}

// Decode decodes GetSettingTemplateOKUserSettingsCallHandlingCloseHoursBusyConnectOperator from json.
func (s *GetSettingTemplateOKUserSettingsCallHandlingCloseHoursBusyConnectOperator) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSettingTemplateOKUserSettingsCallHandlingCloseHoursBusyConnectOperator to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "external_number":
			if err := func() error {
				s.ExternalNumber.Reset()
				if err := s.ExternalNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"external_number\"")
			}
		case "play_callee_voicemail_greeting":
			if err := func() error {
				s.PlayCalleeVoicemailGreeting.Reset()
				if err := s.PlayCalleeVoicemailGreeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_callee_voicemail_greeting\"")
			}
		case "require_press_1_before_connecting":
			if err := func() error {
				s.RequirePress1BeforeConnecting.Reset()
				if err := s.RequirePress1BeforeConnecting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_press_1_before_connecting\"")
			}
		case "allow_caller_check_voicemail":
			if err := func() error {
				s.AllowCallerCheckVoicemail.Reset()
				if err := s.AllowCallerCheckVoicemail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_caller_check_voicemail\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSettingTemplateOKUserSettingsCallHandlingCloseHoursBusyConnectOperator")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSettingTemplateOKUserSettingsCallHandlingCloseHoursBusyConnectOperator) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSettingTemplateOKUserSettingsCallHandlingCloseHoursBusyConnectOperator) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSettingTemplateOKUserSettingsCallHandlingCloseHoursBusyConnectOperatorExternalNumber) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSettingTemplateOKUserSettingsCallHandlingCloseHoursBusyConnectOperatorExternalNumber) encodeFields(e *jx.Encoder) {
	{
		if s.Number.Set {
			e.FieldStart("number")
			s.Number.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSettingTemplateOKUserSettingsCallHandlingCloseHoursBusyConnectOperatorExternalNumber = [2]string{
	0: "number",
	1: "description",
}

// Decode decodes GetSettingTemplateOKUserSettingsCallHandlingCloseHoursBusyConnectOperatorExternalNumber from json.
func (s *GetSettingTemplateOKUserSettingsCallHandlingCloseHoursBusyConnectOperatorExternalNumber) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSettingTemplateOKUserSettingsCallHandlingCloseHoursBusyConnectOperatorExternalNumber to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "number":
			if err := func() error {
				s.Number.Reset()
				if err := s.Number.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSettingTemplateOKUserSettingsCallHandlingCloseHoursBusyConnectOperatorExternalNumber")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSettingTemplateOKUserSettingsCallHandlingCloseHoursBusyConnectOperatorExternalNumber) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSettingTemplateOKUserSettingsCallHandlingCloseHoursBusyConnectOperatorExternalNumber) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSettingTemplateOKUserSettingsCallHandlingCloseHoursConnectToOperator) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSettingTemplateOKUserSettingsCallHandlingCloseHoursConnectToOperator) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.ExternalNumber.Set {
			e.FieldStart("external_number")
			s.ExternalNumber.Encode(e)
		}
	}
	{
		if s.PlayCalleeVoicemailGreeting.Set {
			e.FieldStart("play_callee_voicemail_greeting")
			s.PlayCalleeVoicemailGreeting.Encode(e)
		}
	}
	{
		if s.RequirePress1BeforeConnecting.Set {
			e.FieldStart("require_press_1_before_connecting")
			s.RequirePress1BeforeConnecting.Encode(e)
		}
	}
	{
		if s.AllowCallerCheckVoicemail.Set {
			e.FieldStart("allow_caller_check_voicemail")
			s.AllowCallerCheckVoicemail.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSettingTemplateOKUserSettingsCallHandlingCloseHoursConnectToOperator = [7]string{
	0: "enable",
	1: "id",
	2: "type",
	3: "external_number",
	4: "play_callee_voicemail_greeting",
	5: "require_press_1_before_connecting",
	6: "allow_caller_check_voicemail",
}

// Decode decodes GetSettingTemplateOKUserSettingsCallHandlingCloseHoursConnectToOperator from json.
func (s *GetSettingTemplateOKUserSettingsCallHandlingCloseHoursConnectToOperator) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSettingTemplateOKUserSettingsCallHandlingCloseHoursConnectToOperator to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "external_number":
			if err := func() error {
				s.ExternalNumber.Reset()
				if err := s.ExternalNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"external_number\"")
			}
		case "play_callee_voicemail_greeting":
			if err := func() error {
				s.PlayCalleeVoicemailGreeting.Reset()
				if err := s.PlayCalleeVoicemailGreeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_callee_voicemail_greeting\"")
			}
		case "require_press_1_before_connecting":
			if err := func() error {
				s.RequirePress1BeforeConnecting.Reset()
				if err := s.RequirePress1BeforeConnecting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_press_1_before_connecting\"")
			}
		case "allow_caller_check_voicemail":
			if err := func() error {
				s.AllowCallerCheckVoicemail.Reset()
				if err := s.AllowCallerCheckVoicemail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_caller_check_voicemail\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSettingTemplateOKUserSettingsCallHandlingCloseHoursConnectToOperator")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSettingTemplateOKUserSettingsCallHandlingCloseHoursConnectToOperator) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSettingTemplateOKUserSettingsCallHandlingCloseHoursConnectToOperator) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSettingTemplateOKUserSettingsCallHandlingCloseHoursConnectToOperatorExternalNumber) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSettingTemplateOKUserSettingsCallHandlingCloseHoursConnectToOperatorExternalNumber) encodeFields(e *jx.Encoder) {
	{
		if s.Number.Set {
			e.FieldStart("number")
			s.Number.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSettingTemplateOKUserSettingsCallHandlingCloseHoursConnectToOperatorExternalNumber = [2]string{
	0: "number",
	1: "description",
}

// Decode decodes GetSettingTemplateOKUserSettingsCallHandlingCloseHoursConnectToOperatorExternalNumber from json.
func (s *GetSettingTemplateOKUserSettingsCallHandlingCloseHoursConnectToOperatorExternalNumber) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSettingTemplateOKUserSettingsCallHandlingCloseHoursConnectToOperatorExternalNumber to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "number":
			if err := func() error {
				s.Number.Reset()
				if err := s.Number.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSettingTemplateOKUserSettingsCallHandlingCloseHoursConnectToOperatorExternalNumber")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSettingTemplateOKUserSettingsCallHandlingCloseHoursConnectToOperatorExternalNumber) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSettingTemplateOKUserSettingsCallHandlingCloseHoursConnectToOperatorExternalNumber) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSettingTemplateOKUserSettingsDeskPhone) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSettingTemplateOKUserSettingsDeskPhone) encodeFields(e *jx.Encoder) {
	{
		if s.PinCode.Set {
			e.FieldStart("pin_code")
			s.PinCode.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSettingTemplateOKUserSettingsDeskPhone = [1]string{
	0: "pin_code",
}

// Decode decodes GetSettingTemplateOKUserSettingsDeskPhone from json.
func (s *GetSettingTemplateOKUserSettingsDeskPhone) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSettingTemplateOKUserSettingsDeskPhone to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pin_code":
			if err := func() error {
				s.PinCode.Reset()
				if err := s.PinCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pin_code\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSettingTemplateOKUserSettingsDeskPhone")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSettingTemplateOKUserSettingsDeskPhone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSettingTemplateOKUserSettingsDeskPhone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSharedLineGroupPolicyOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSharedLineGroupPolicyOK) encodeFields(e *jx.Encoder) {
	{
		if s.CheckVoicemailsOverPhone.Set {
			e.FieldStart("check_voicemails_over_phone")
			s.CheckVoicemailsOverPhone.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSharedLineGroupPolicyOK = [1]string{
	0: "check_voicemails_over_phone",
}

// Decode decodes GetSharedLineGroupPolicyOK from json.
func (s *GetSharedLineGroupPolicyOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSharedLineGroupPolicyOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "check_voicemails_over_phone":
			if err := func() error {
				s.CheckVoicemailsOverPhone.Reset()
				if err := s.CheckVoicemailsOverPhone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"check_voicemails_over_phone\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSharedLineGroupPolicyOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSharedLineGroupPolicyOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSharedLineGroupPolicyOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSharedLineGroupPolicyOKCheckVoicemailsOverPhone) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSharedLineGroupPolicyOKCheckVoicemailsOverPhone) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("enable")
		e.Bool(s.Enable)
	}
	{
		e.FieldStart("locked")
		e.Bool(s.Locked)
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSharedLineGroupPolicyOKCheckVoicemailsOverPhone = [4]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
}

// Decode decodes GetSharedLineGroupPolicyOKCheckVoicemailsOverPhone from json.
func (s *GetSharedLineGroupPolicyOKCheckVoicemailsOverPhone) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSharedLineGroupPolicyOKCheckVoicemailsOverPhone to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Bool()
				s.Enable = bool(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Bool()
				s.Locked = bool(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSharedLineGroupPolicyOKCheckVoicemailsOverPhone")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGetSharedLineGroupPolicyOKCheckVoicemailsOverPhone) {
					name = jsonFieldsNameOfGetSharedLineGroupPolicyOKCheckVoicemailsOverPhone[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSharedLineGroupPolicyOKCheckVoicemailsOverPhone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSharedLineGroupPolicyOKCheckVoicemailsOverPhone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSiteOutboundCallingCountriesAndRegionsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSiteOutboundCallingCountriesAndRegionsOK) encodeFields(e *jx.Encoder) {
	{
		if s.CountriesRegions != nil {
			e.FieldStart("countries_regions")
			e.ArrStart()
			for _, elem := range s.CountriesRegions {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSiteOutboundCallingCountriesAndRegionsOK = [3]string{
	0: "countries_regions",
	1: "next_page_token",
	2: "page_size",
}

// Decode decodes GetSiteOutboundCallingCountriesAndRegionsOK from json.
func (s *GetSiteOutboundCallingCountriesAndRegionsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSiteOutboundCallingCountriesAndRegionsOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "countries_regions":
			if err := func() error {
				s.CountriesRegions = make([]GetSiteOutboundCallingCountriesAndRegionsOKCountriesRegionsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetSiteOutboundCallingCountriesAndRegionsOKCountriesRegionsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CountriesRegions = append(s.CountriesRegions, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"countries_regions\"")
			}
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSiteOutboundCallingCountriesAndRegionsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSiteOutboundCallingCountriesAndRegionsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSiteOutboundCallingCountriesAndRegionsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSiteOutboundCallingCountriesAndRegionsOKCountriesRegionsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSiteOutboundCallingCountriesAndRegionsOKCountriesRegionsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Code.Set {
			e.FieldStart("code")
			s.Code.Encode(e)
		}
	}
	{
		if s.IsoCode.Set {
			e.FieldStart("iso_code")
			s.IsoCode.Encode(e)
		}
	}
	{
		if s.Rule.Set {
			e.FieldStart("rule")
			s.Rule.Encode(e)
		}
	}
	{
		if s.EnabledCarrier != nil {
			e.FieldStart("enabled_carrier")
			e.ArrStart()
			for _, elem := range s.EnabledCarrier {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGetSiteOutboundCallingCountriesAndRegionsOKCountriesRegionsItem = [5]string{
	0: "name",
	1: "code",
	2: "iso_code",
	3: "rule",
	4: "enabled_carrier",
}

// Decode decodes GetSiteOutboundCallingCountriesAndRegionsOKCountriesRegionsItem from json.
func (s *GetSiteOutboundCallingCountriesAndRegionsOKCountriesRegionsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSiteOutboundCallingCountriesAndRegionsOKCountriesRegionsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "code":
			if err := func() error {
				s.Code.Reset()
				if err := s.Code.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code\"")
			}
		case "iso_code":
			if err := func() error {
				s.IsoCode.Reset()
				if err := s.IsoCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_code\"")
			}
		case "rule":
			if err := func() error {
				s.Rule.Reset()
				if err := s.Rule.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rule\"")
			}
		case "enabled_carrier":
			if err := func() error {
				s.EnabledCarrier = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.EnabledCarrier = append(s.EnabledCarrier, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enabled_carrier\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSiteOutboundCallingCountriesAndRegionsOKCountriesRegionsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSiteOutboundCallingCountriesAndRegionsOKCountriesRegionsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSiteOutboundCallingCountriesAndRegionsOKCountriesRegionsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSiteSettingForTypeOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSiteSettingForTypeOK) encodeFields(e *jx.Encoder) {
	{
		if s.LocationBasedRouting.Set {
			e.FieldStart("location_based_routing")
			s.LocationBasedRouting.Encode(e)
		}
	}
	{
		if s.BusinessHours.Set {
			e.FieldStart("business_hours")
			s.BusinessHours.Encode(e)
		}
	}
	{
		if s.ClosedHours.Set {
			e.FieldStart("closed_hours")
			s.ClosedHours.Encode(e)
		}
	}
	{
		if s.HolidayHours.Set {
			e.FieldStart("holiday_hours")
			s.HolidayHours.Encode(e)
		}
	}
	{
		if s.Security.Set {
			e.FieldStart("security")
			s.Security.Encode(e)
		}
	}
	{
		if s.OutboundCallerID.Set {
			e.FieldStart("outbound_caller_id")
			s.OutboundCallerID.Encode(e)
		}
	}
	{
		if s.AudioPrompt.Set {
			e.FieldStart("audio_prompt")
			s.AudioPrompt.Encode(e)
		}
	}
	{
		if len(s.DeskPhone) != 0 {
			e.FieldStart("desk_phone")
			e.Raw(s.DeskPhone)
		}
	}
	{
		if s.DialByName.Set {
			e.FieldStart("dial_by_name")
			s.DialByName.Encode(e)
		}
	}
	{
		if s.BillingAccount.Set {
			e.FieldStart("billing_account")
			s.BillingAccount.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSiteSettingForTypeOK = [10]string{
	0: "location_based_routing",
	1: "business_hours",
	2: "closed_hours",
	3: "holiday_hours",
	4: "security",
	5: "outbound_caller_id",
	6: "audio_prompt",
	7: "desk_phone",
	8: "dial_by_name",
	9: "billing_account",
}

// Decode decodes GetSiteSettingForTypeOK from json.
func (s *GetSiteSettingForTypeOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSiteSettingForTypeOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "location_based_routing":
			if err := func() error {
				s.LocationBasedRouting.Reset()
				if err := s.LocationBasedRouting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"location_based_routing\"")
			}
		case "business_hours":
			if err := func() error {
				s.BusinessHours.Reset()
				if err := s.BusinessHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"business_hours\"")
			}
		case "closed_hours":
			if err := func() error {
				s.ClosedHours.Reset()
				if err := s.ClosedHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"closed_hours\"")
			}
		case "holiday_hours":
			if err := func() error {
				s.HolidayHours.Reset()
				if err := s.HolidayHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holiday_hours\"")
			}
		case "security":
			if err := func() error {
				s.Security.Reset()
				if err := s.Security.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"security\"")
			}
		case "outbound_caller_id":
			if err := func() error {
				s.OutboundCallerID.Reset()
				if err := s.OutboundCallerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"outbound_caller_id\"")
			}
		case "audio_prompt":
			if err := func() error {
				s.AudioPrompt.Reset()
				if err := s.AudioPrompt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_prompt\"")
			}
		case "desk_phone":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.DeskPhone = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"desk_phone\"")
			}
		case "dial_by_name":
			if err := func() error {
				s.DialByName.Reset()
				if err := s.DialByName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"dial_by_name\"")
			}
		case "billing_account":
			if err := func() error {
				s.BillingAccount.Reset()
				if err := s.BillingAccount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"billing_account\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSiteSettingForTypeOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSiteSettingForTypeOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSiteSettingForTypeOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSiteSettingForTypeOKAudioPrompt) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSiteSettingForTypeOKAudioPrompt) encodeFields(e *jx.Encoder) {
	{
		if s.Language.Set {
			e.FieldStart("language")
			s.Language.Encode(e)
		}
	}
	{
		if s.GreetingLeaveVoicemailInstruction.Set {
			e.FieldStart("greeting_leave_voicemail_instruction")
			s.GreetingLeaveVoicemailInstruction.Encode(e)
		}
	}
	{
		if s.GreetingMenuLeaveOrCheckVoicemail.Set {
			e.FieldStart("greeting_menu_leave_or_check_voicemail")
			s.GreetingMenuLeaveOrCheckVoicemail.Encode(e)
		}
	}
	{
		if s.GreetingMenuConnectToOperatorOrLeaveVoicemail.Set {
			e.FieldStart("greeting_menu_connect_to_operator_or_leave_voicemail")
			s.GreetingMenuConnectToOperatorOrLeaveVoicemail.Encode(e)
		}
	}
	{
		if s.GreetingMenuConnectToOperatorLeaveOrCheckVoicemail.Set {
			e.FieldStart("greeting_menu_connect_to_operator_leave_or_check_voicemail")
			s.GreetingMenuConnectToOperatorLeaveOrCheckVoicemail.Encode(e)
		}
	}
	{
		if s.LeaveVoicemailIntroduction.Set {
			e.FieldStart("leave_voicemail_introduction")
			s.LeaveVoicemailIntroduction.Encode(e)
		}
	}
	{
		if s.MessageGreeting.Set {
			e.FieldStart("message_greeting")
			s.MessageGreeting.Encode(e)
		}
	}
	{
		if s.AudioWhileConnecting.Set {
			e.FieldStart("audio_while_connecting")
			s.AudioWhileConnecting.Encode(e)
		}
	}
	{
		if s.HoldMusic.Set {
			e.FieldStart("hold_music")
			s.HoldMusic.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSiteSettingForTypeOKAudioPrompt = [9]string{
	0: "language",
	1: "greeting_leave_voicemail_instruction",
	2: "greeting_menu_leave_or_check_voicemail",
	3: "greeting_menu_connect_to_operator_or_leave_voicemail",
	4: "greeting_menu_connect_to_operator_leave_or_check_voicemail",
	5: "leave_voicemail_introduction",
	6: "message_greeting",
	7: "audio_while_connecting",
	8: "hold_music",
}

// Decode decodes GetSiteSettingForTypeOKAudioPrompt from json.
func (s *GetSiteSettingForTypeOKAudioPrompt) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSiteSettingForTypeOKAudioPrompt to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "language":
			if err := func() error {
				s.Language.Reset()
				if err := s.Language.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"language\"")
			}
		case "greeting_leave_voicemail_instruction":
			if err := func() error {
				s.GreetingLeaveVoicemailInstruction.Reset()
				if err := s.GreetingLeaveVoicemailInstruction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"greeting_leave_voicemail_instruction\"")
			}
		case "greeting_menu_leave_or_check_voicemail":
			if err := func() error {
				s.GreetingMenuLeaveOrCheckVoicemail.Reset()
				if err := s.GreetingMenuLeaveOrCheckVoicemail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"greeting_menu_leave_or_check_voicemail\"")
			}
		case "greeting_menu_connect_to_operator_or_leave_voicemail":
			if err := func() error {
				s.GreetingMenuConnectToOperatorOrLeaveVoicemail.Reset()
				if err := s.GreetingMenuConnectToOperatorOrLeaveVoicemail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"greeting_menu_connect_to_operator_or_leave_voicemail\"")
			}
		case "greeting_menu_connect_to_operator_leave_or_check_voicemail":
			if err := func() error {
				s.GreetingMenuConnectToOperatorLeaveOrCheckVoicemail.Reset()
				if err := s.GreetingMenuConnectToOperatorLeaveOrCheckVoicemail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"greeting_menu_connect_to_operator_leave_or_check_voicemail\"")
			}
		case "leave_voicemail_introduction":
			if err := func() error {
				s.LeaveVoicemailIntroduction.Reset()
				if err := s.LeaveVoicemailIntroduction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"leave_voicemail_introduction\"")
			}
		case "message_greeting":
			if err := func() error {
				s.MessageGreeting.Reset()
				if err := s.MessageGreeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message_greeting\"")
			}
		case "audio_while_connecting":
			if err := func() error {
				s.AudioWhileConnecting.Reset()
				if err := s.AudioWhileConnecting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_while_connecting\"")
			}
		case "hold_music":
			if err := func() error {
				s.HoldMusic.Reset()
				if err := s.HoldMusic.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hold_music\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSiteSettingForTypeOKAudioPrompt")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSiteSettingForTypeOKAudioPrompt) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSiteSettingForTypeOKAudioPrompt) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSiteSettingForTypeOKAudioPromptAudioWhileConnecting) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSiteSettingForTypeOKAudioPromptAudioWhileConnecting) encodeFields(e *jx.Encoder) {
	{
		if s.AudioID.Set {
			e.FieldStart("audio_id")
			s.AudioID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSiteSettingForTypeOKAudioPromptAudioWhileConnecting = [2]string{
	0: "audio_id",
	1: "name",
}

// Decode decodes GetSiteSettingForTypeOKAudioPromptAudioWhileConnecting from json.
func (s *GetSiteSettingForTypeOKAudioPromptAudioWhileConnecting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSiteSettingForTypeOKAudioPromptAudioWhileConnecting to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_id":
			if err := func() error {
				s.AudioID.Reset()
				if err := s.AudioID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSiteSettingForTypeOKAudioPromptAudioWhileConnecting")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSiteSettingForTypeOKAudioPromptAudioWhileConnecting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSiteSettingForTypeOKAudioPromptAudioWhileConnecting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstruction) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstruction) encodeFields(e *jx.Encoder) {
	{
		if s.BusinessHours.Set {
			e.FieldStart("business_hours")
			s.BusinessHours.Encode(e)
		}
	}
	{
		if s.ClosedHours.Set {
			e.FieldStart("closed_hours")
			s.ClosedHours.Encode(e)
		}
	}
	{
		if s.HolidayHours.Set {
			e.FieldStart("holiday_hours")
			s.HolidayHours.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstruction = [3]string{
	0: "business_hours",
	1: "closed_hours",
	2: "holiday_hours",
}

// Decode decodes GetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstruction from json.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstruction) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstruction to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "business_hours":
			if err := func() error {
				s.BusinessHours.Reset()
				if err := s.BusinessHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"business_hours\"")
			}
		case "closed_hours":
			if err := func() error {
				s.ClosedHours.Reset()
				if err := s.ClosedHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"closed_hours\"")
			}
		case "holiday_hours":
			if err := func() error {
				s.HolidayHours.Reset()
				if err := s.HolidayHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holiday_hours\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstruction")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstruction) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstruction) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstructionBusinessHours) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstructionBusinessHours) encodeFields(e *jx.Encoder) {
	{
		if s.AudioID.Set {
			e.FieldStart("audio_id")
			s.AudioID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstructionBusinessHours = [2]string{
	0: "audio_id",
	1: "name",
}

// Decode decodes GetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstructionBusinessHours from json.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstructionBusinessHours) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstructionBusinessHours to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_id":
			if err := func() error {
				s.AudioID.Reset()
				if err := s.AudioID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstructionBusinessHours")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstructionBusinessHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstructionBusinessHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstructionClosedHours) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstructionClosedHours) encodeFields(e *jx.Encoder) {
	{
		if s.AudioID.Set {
			e.FieldStart("audio_id")
			s.AudioID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstructionClosedHours = [2]string{
	0: "audio_id",
	1: "name",
}

// Decode decodes GetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstructionClosedHours from json.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstructionClosedHours) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstructionClosedHours to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_id":
			if err := func() error {
				s.AudioID.Reset()
				if err := s.AudioID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstructionClosedHours")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstructionClosedHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstructionClosedHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstructionHolidayHours) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstructionHolidayHours) encodeFields(e *jx.Encoder) {
	{
		if s.AudioID.Set {
			e.FieldStart("audio_id")
			s.AudioID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstructionHolidayHours = [2]string{
	0: "audio_id",
	1: "name",
}

// Decode decodes GetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstructionHolidayHours from json.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstructionHolidayHours) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstructionHolidayHours to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_id":
			if err := func() error {
				s.AudioID.Reset()
				if err := s.AudioID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstructionHolidayHours")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstructionHolidayHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstructionHolidayHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemail) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemail) encodeFields(e *jx.Encoder) {
	{
		if s.BusinessHours.Set {
			e.FieldStart("business_hours")
			s.BusinessHours.Encode(e)
		}
	}
	{
		if s.ClosedHours.Set {
			e.FieldStart("closed_hours")
			s.ClosedHours.Encode(e)
		}
	}
	{
		if s.HolidayHours.Set {
			e.FieldStart("holiday_hours")
			s.HolidayHours.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemail = [3]string{
	0: "business_hours",
	1: "closed_hours",
	2: "holiday_hours",
}

// Decode decodes GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemail from json.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemail) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemail to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "business_hours":
			if err := func() error {
				s.BusinessHours.Reset()
				if err := s.BusinessHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"business_hours\"")
			}
		case "closed_hours":
			if err := func() error {
				s.ClosedHours.Reset()
				if err := s.ClosedHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"closed_hours\"")
			}
		case "holiday_hours":
			if err := func() error {
				s.HolidayHours.Reset()
				if err := s.HolidayHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holiday_hours\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemail")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailBusinessHours) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailBusinessHours) encodeFields(e *jx.Encoder) {
	{
		if s.AudioID.Set {
			e.FieldStart("audio_id")
			s.AudioID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailBusinessHours = [2]string{
	0: "audio_id",
	1: "name",
}

// Decode decodes GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailBusinessHours from json.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailBusinessHours) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailBusinessHours to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_id":
			if err := func() error {
				s.AudioID.Reset()
				if err := s.AudioID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailBusinessHours")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailBusinessHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailBusinessHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailClosedHours) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailClosedHours) encodeFields(e *jx.Encoder) {
	{
		if s.AudioID.Set {
			e.FieldStart("audio_id")
			s.AudioID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailClosedHours = [2]string{
	0: "audio_id",
	1: "name",
}

// Decode decodes GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailClosedHours from json.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailClosedHours) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailClosedHours to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_id":
			if err := func() error {
				s.AudioID.Reset()
				if err := s.AudioID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailClosedHours")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailClosedHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailClosedHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailHolidayHours) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailHolidayHours) encodeFields(e *jx.Encoder) {
	{
		if s.AudioID.Set {
			e.FieldStart("audio_id")
			s.AudioID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailHolidayHours = [2]string{
	0: "audio_id",
	1: "name",
}

// Decode decodes GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailHolidayHours from json.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailHolidayHours) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailHolidayHours to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_id":
			if err := func() error {
				s.AudioID.Reset()
				if err := s.AudioID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailHolidayHours")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailHolidayHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailHolidayHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemail) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemail) encodeFields(e *jx.Encoder) {
	{
		if s.BusinessHours.Set {
			e.FieldStart("business_hours")
			s.BusinessHours.Encode(e)
		}
	}
	{
		if s.ClosedHours.Set {
			e.FieldStart("closed_hours")
			s.ClosedHours.Encode(e)
		}
	}
	{
		if s.HolidayHours.Set {
			e.FieldStart("holiday_hours")
			s.HolidayHours.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemail = [3]string{
	0: "business_hours",
	1: "closed_hours",
	2: "holiday_hours",
}

// Decode decodes GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemail from json.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemail) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemail to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "business_hours":
			if err := func() error {
				s.BusinessHours.Reset()
				if err := s.BusinessHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"business_hours\"")
			}
		case "closed_hours":
			if err := func() error {
				s.ClosedHours.Reset()
				if err := s.ClosedHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"closed_hours\"")
			}
		case "holiday_hours":
			if err := func() error {
				s.HolidayHours.Reset()
				if err := s.HolidayHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holiday_hours\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemail")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailBusinessHours) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailBusinessHours) encodeFields(e *jx.Encoder) {
	{
		if s.AudioID.Set {
			e.FieldStart("audio_id")
			s.AudioID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailBusinessHours = [2]string{
	0: "audio_id",
	1: "name",
}

// Decode decodes GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailBusinessHours from json.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailBusinessHours) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailBusinessHours to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_id":
			if err := func() error {
				s.AudioID.Reset()
				if err := s.AudioID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailBusinessHours")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailBusinessHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailBusinessHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailClosedHours) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailClosedHours) encodeFields(e *jx.Encoder) {
	{
		if s.AudioID.Set {
			e.FieldStart("audio_id")
			s.AudioID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailClosedHours = [2]string{
	0: "audio_id",
	1: "name",
}

// Decode decodes GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailClosedHours from json.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailClosedHours) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailClosedHours to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_id":
			if err := func() error {
				s.AudioID.Reset()
				if err := s.AudioID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailClosedHours")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailClosedHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailClosedHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailHolidayHours) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailHolidayHours) encodeFields(e *jx.Encoder) {
	{
		if s.AudioID.Set {
			e.FieldStart("audio_id")
			s.AudioID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailHolidayHours = [2]string{
	0: "audio_id",
	1: "name",
}

// Decode decodes GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailHolidayHours from json.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailHolidayHours) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailHolidayHours to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_id":
			if err := func() error {
				s.AudioID.Reset()
				if err := s.AudioID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailHolidayHours")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailHolidayHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailHolidayHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemail) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemail) encodeFields(e *jx.Encoder) {
	{
		if s.BusinessHours.Set {
			e.FieldStart("business_hours")
			s.BusinessHours.Encode(e)
		}
	}
	{
		if s.ClosedHours.Set {
			e.FieldStart("closed_hours")
			s.ClosedHours.Encode(e)
		}
	}
	{
		if s.HolidayHours.Set {
			e.FieldStart("holiday_hours")
			s.HolidayHours.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemail = [3]string{
	0: "business_hours",
	1: "closed_hours",
	2: "holiday_hours",
}

// Decode decodes GetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemail from json.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemail) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemail to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "business_hours":
			if err := func() error {
				s.BusinessHours.Reset()
				if err := s.BusinessHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"business_hours\"")
			}
		case "closed_hours":
			if err := func() error {
				s.ClosedHours.Reset()
				if err := s.ClosedHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"closed_hours\"")
			}
		case "holiday_hours":
			if err := func() error {
				s.HolidayHours.Reset()
				if err := s.HolidayHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holiday_hours\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemail")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemailBusinessHours) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemailBusinessHours) encodeFields(e *jx.Encoder) {
	{
		if s.AudioID.Set {
			e.FieldStart("audio_id")
			s.AudioID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemailBusinessHours = [2]string{
	0: "audio_id",
	1: "name",
}

// Decode decodes GetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemailBusinessHours from json.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemailBusinessHours) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemailBusinessHours to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_id":
			if err := func() error {
				s.AudioID.Reset()
				if err := s.AudioID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemailBusinessHours")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemailBusinessHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemailBusinessHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemailClosedHours) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemailClosedHours) encodeFields(e *jx.Encoder) {
	{
		if s.AudioID.Set {
			e.FieldStart("audio_id")
			s.AudioID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemailClosedHours = [2]string{
	0: "audio_id",
	1: "name",
}

// Decode decodes GetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemailClosedHours from json.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemailClosedHours) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemailClosedHours to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_id":
			if err := func() error {
				s.AudioID.Reset()
				if err := s.AudioID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemailClosedHours")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemailClosedHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemailClosedHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemailHolidayHours) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemailHolidayHours) encodeFields(e *jx.Encoder) {
	{
		if s.AudioID.Set {
			e.FieldStart("audio_id")
			s.AudioID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemailHolidayHours = [2]string{
	0: "audio_id",
	1: "name",
}

// Decode decodes GetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemailHolidayHours from json.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemailHolidayHours) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemailHolidayHours to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_id":
			if err := func() error {
				s.AudioID.Reset()
				if err := s.AudioID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemailHolidayHours")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemailHolidayHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemailHolidayHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSiteSettingForTypeOKAudioPromptHoldMusic) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSiteSettingForTypeOKAudioPromptHoldMusic) encodeFields(e *jx.Encoder) {
	{
		if s.AudioID.Set {
			e.FieldStart("audio_id")
			s.AudioID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSiteSettingForTypeOKAudioPromptHoldMusic = [2]string{
	0: "audio_id",
	1: "name",
}

// Decode decodes GetSiteSettingForTypeOKAudioPromptHoldMusic from json.
func (s *GetSiteSettingForTypeOKAudioPromptHoldMusic) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSiteSettingForTypeOKAudioPromptHoldMusic to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_id":
			if err := func() error {
				s.AudioID.Reset()
				if err := s.AudioID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSiteSettingForTypeOKAudioPromptHoldMusic")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSiteSettingForTypeOKAudioPromptHoldMusic) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSiteSettingForTypeOKAudioPromptHoldMusic) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroduction) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroduction) encodeFields(e *jx.Encoder) {
	{
		if s.BusinessHours.Set {
			e.FieldStart("business_hours")
			s.BusinessHours.Encode(e)
		}
	}
	{
		if s.ClosedHours.Set {
			e.FieldStart("closed_hours")
			s.ClosedHours.Encode(e)
		}
	}
	{
		if s.HolidayHours.Set {
			e.FieldStart("holiday_hours")
			s.HolidayHours.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroduction = [3]string{
	0: "business_hours",
	1: "closed_hours",
	2: "holiday_hours",
}

// Decode decodes GetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroduction from json.
func (s *GetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroduction) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroduction to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "business_hours":
			if err := func() error {
				s.BusinessHours.Reset()
				if err := s.BusinessHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"business_hours\"")
			}
		case "closed_hours":
			if err := func() error {
				s.ClosedHours.Reset()
				if err := s.ClosedHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"closed_hours\"")
			}
		case "holiday_hours":
			if err := func() error {
				s.HolidayHours.Reset()
				if err := s.HolidayHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holiday_hours\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroduction")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroduction) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroduction) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroductionBusinessHours) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroductionBusinessHours) encodeFields(e *jx.Encoder) {
	{
		if s.AudioID.Set {
			e.FieldStart("audio_id")
			s.AudioID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroductionBusinessHours = [2]string{
	0: "audio_id",
	1: "name",
}

// Decode decodes GetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroductionBusinessHours from json.
func (s *GetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroductionBusinessHours) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroductionBusinessHours to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_id":
			if err := func() error {
				s.AudioID.Reset()
				if err := s.AudioID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroductionBusinessHours")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroductionBusinessHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroductionBusinessHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroductionClosedHours) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroductionClosedHours) encodeFields(e *jx.Encoder) {
	{
		if s.AudioID.Set {
			e.FieldStart("audio_id")
			s.AudioID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroductionClosedHours = [2]string{
	0: "audio_id",
	1: "name",
}

// Decode decodes GetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroductionClosedHours from json.
func (s *GetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroductionClosedHours) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroductionClosedHours to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_id":
			if err := func() error {
				s.AudioID.Reset()
				if err := s.AudioID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroductionClosedHours")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroductionClosedHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroductionClosedHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroductionHolidayHours) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroductionHolidayHours) encodeFields(e *jx.Encoder) {
	{
		if s.AudioID.Set {
			e.FieldStart("audio_id")
			s.AudioID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroductionHolidayHours = [2]string{
	0: "audio_id",
	1: "name",
}

// Decode decodes GetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroductionHolidayHours from json.
func (s *GetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroductionHolidayHours) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroductionHolidayHours to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_id":
			if err := func() error {
				s.AudioID.Reset()
				if err := s.AudioID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroductionHolidayHours")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroductionHolidayHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroductionHolidayHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSiteSettingForTypeOKAudioPromptMessageGreeting) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSiteSettingForTypeOKAudioPromptMessageGreeting) encodeFields(e *jx.Encoder) {
	{
		if s.BusinessHours.Set {
			e.FieldStart("business_hours")
			s.BusinessHours.Encode(e)
		}
	}
	{
		if s.ClosedHours.Set {
			e.FieldStart("closed_hours")
			s.ClosedHours.Encode(e)
		}
	}
	{
		if s.HolidayHours.Set {
			e.FieldStart("holiday_hours")
			s.HolidayHours.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSiteSettingForTypeOKAudioPromptMessageGreeting = [3]string{
	0: "business_hours",
	1: "closed_hours",
	2: "holiday_hours",
}

// Decode decodes GetSiteSettingForTypeOKAudioPromptMessageGreeting from json.
func (s *GetSiteSettingForTypeOKAudioPromptMessageGreeting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSiteSettingForTypeOKAudioPromptMessageGreeting to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "business_hours":
			if err := func() error {
				s.BusinessHours.Reset()
				if err := s.BusinessHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"business_hours\"")
			}
		case "closed_hours":
			if err := func() error {
				s.ClosedHours.Reset()
				if err := s.ClosedHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"closed_hours\"")
			}
		case "holiday_hours":
			if err := func() error {
				s.HolidayHours.Reset()
				if err := s.HolidayHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holiday_hours\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSiteSettingForTypeOKAudioPromptMessageGreeting")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSiteSettingForTypeOKAudioPromptMessageGreeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSiteSettingForTypeOKAudioPromptMessageGreeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSiteSettingForTypeOKAudioPromptMessageGreetingBusinessHours) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSiteSettingForTypeOKAudioPromptMessageGreetingBusinessHours) encodeFields(e *jx.Encoder) {
	{
		if s.AudioID.Set {
			e.FieldStart("audio_id")
			s.AudioID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSiteSettingForTypeOKAudioPromptMessageGreetingBusinessHours = [2]string{
	0: "audio_id",
	1: "name",
}

// Decode decodes GetSiteSettingForTypeOKAudioPromptMessageGreetingBusinessHours from json.
func (s *GetSiteSettingForTypeOKAudioPromptMessageGreetingBusinessHours) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSiteSettingForTypeOKAudioPromptMessageGreetingBusinessHours to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_id":
			if err := func() error {
				s.AudioID.Reset()
				if err := s.AudioID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSiteSettingForTypeOKAudioPromptMessageGreetingBusinessHours")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSiteSettingForTypeOKAudioPromptMessageGreetingBusinessHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSiteSettingForTypeOKAudioPromptMessageGreetingBusinessHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSiteSettingForTypeOKAudioPromptMessageGreetingClosedHours) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSiteSettingForTypeOKAudioPromptMessageGreetingClosedHours) encodeFields(e *jx.Encoder) {
	{
		if s.AudioID.Set {
			e.FieldStart("audio_id")
			s.AudioID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSiteSettingForTypeOKAudioPromptMessageGreetingClosedHours = [2]string{
	0: "audio_id",
	1: "name",
}

// Decode decodes GetSiteSettingForTypeOKAudioPromptMessageGreetingClosedHours from json.
func (s *GetSiteSettingForTypeOKAudioPromptMessageGreetingClosedHours) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSiteSettingForTypeOKAudioPromptMessageGreetingClosedHours to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_id":
			if err := func() error {
				s.AudioID.Reset()
				if err := s.AudioID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSiteSettingForTypeOKAudioPromptMessageGreetingClosedHours")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSiteSettingForTypeOKAudioPromptMessageGreetingClosedHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSiteSettingForTypeOKAudioPromptMessageGreetingClosedHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSiteSettingForTypeOKAudioPromptMessageGreetingHolidayHours) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSiteSettingForTypeOKAudioPromptMessageGreetingHolidayHours) encodeFields(e *jx.Encoder) {
	{
		if s.AudioID.Set {
			e.FieldStart("audio_id")
			s.AudioID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSiteSettingForTypeOKAudioPromptMessageGreetingHolidayHours = [2]string{
	0: "audio_id",
	1: "name",
}

// Decode decodes GetSiteSettingForTypeOKAudioPromptMessageGreetingHolidayHours from json.
func (s *GetSiteSettingForTypeOKAudioPromptMessageGreetingHolidayHours) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSiteSettingForTypeOKAudioPromptMessageGreetingHolidayHours to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_id":
			if err := func() error {
				s.AudioID.Reset()
				if err := s.AudioID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSiteSettingForTypeOKAudioPromptMessageGreetingHolidayHours")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSiteSettingForTypeOKAudioPromptMessageGreetingHolidayHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSiteSettingForTypeOKAudioPromptMessageGreetingHolidayHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSiteSettingForTypeOKBillingAccount) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSiteSettingForTypeOKBillingAccount) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSiteSettingForTypeOKBillingAccount = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes GetSiteSettingForTypeOKBillingAccount from json.
func (s *GetSiteSettingForTypeOKBillingAccount) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSiteSettingForTypeOKBillingAccount to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSiteSettingForTypeOKBillingAccount")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSiteSettingForTypeOKBillingAccount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSiteSettingForTypeOKBillingAccount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSiteSettingForTypeOKBusinessHours) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSiteSettingForTypeOKBusinessHours) encodeFields(e *jx.Encoder) {
	{
		if s.CustomHourType.Set {
			e.FieldStart("custom_hour_type")
			s.CustomHourType.Encode(e)
		}
	}
	{
		if s.CustomHours != nil {
			e.FieldStart("custom_hours")
			e.ArrStart()
			for _, elem := range s.CustomHours {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Overflow.Set {
			e.FieldStart("overflow")
			s.Overflow.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSiteSettingForTypeOKBusinessHours = [3]string{
	0: "custom_hour_type",
	1: "custom_hours",
	2: "overflow",
}

// Decode decodes GetSiteSettingForTypeOKBusinessHours from json.
func (s *GetSiteSettingForTypeOKBusinessHours) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSiteSettingForTypeOKBusinessHours to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "custom_hour_type":
			if err := func() error {
				s.CustomHourType.Reset()
				if err := s.CustomHourType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"custom_hour_type\"")
			}
		case "custom_hours":
			if err := func() error {
				s.CustomHours = make([]GetSiteSettingForTypeOKBusinessHoursCustomHoursItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetSiteSettingForTypeOKBusinessHoursCustomHoursItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CustomHours = append(s.CustomHours, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"custom_hours\"")
			}
		case "overflow":
			if err := func() error {
				s.Overflow.Reset()
				if err := s.Overflow.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overflow\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSiteSettingForTypeOKBusinessHours")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSiteSettingForTypeOKBusinessHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSiteSettingForTypeOKBusinessHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSiteSettingForTypeOKBusinessHoursCustomHoursItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSiteSettingForTypeOKBusinessHoursCustomHoursItem) encodeFields(e *jx.Encoder) {
	{
		if s.From.Set {
			e.FieldStart("from")
			s.From.Encode(e)
		}
	}
	{
		if s.To.Set {
			e.FieldStart("to")
			s.To.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.Weekday.Set {
			e.FieldStart("weekday")
			s.Weekday.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSiteSettingForTypeOKBusinessHoursCustomHoursItem = [4]string{
	0: "from",
	1: "to",
	2: "type",
	3: "weekday",
}

// Decode decodes GetSiteSettingForTypeOKBusinessHoursCustomHoursItem from json.
func (s *GetSiteSettingForTypeOKBusinessHoursCustomHoursItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSiteSettingForTypeOKBusinessHoursCustomHoursItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "from":
			if err := func() error {
				s.From.Reset()
				if err := s.From.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"from\"")
			}
		case "to":
			if err := func() error {
				s.To.Reset()
				if err := s.To.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"to\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "weekday":
			if err := func() error {
				s.Weekday.Reset()
				if err := s.Weekday.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"weekday\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSiteSettingForTypeOKBusinessHoursCustomHoursItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSiteSettingForTypeOKBusinessHoursCustomHoursItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSiteSettingForTypeOKBusinessHoursCustomHoursItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSiteSettingForTypeOKBusinessHoursOverflow) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSiteSettingForTypeOKBusinessHoursOverflow) encodeFields(e *jx.Encoder) {
	{
		if s.AllowCallerToReachOperator.Set {
			e.FieldStart("allow_caller_to_reach_operator")
			s.AllowCallerToReachOperator.Encode(e)
		}
	}
	{
		if s.Operator.Set {
			e.FieldStart("operator")
			s.Operator.Encode(e)
		}
	}
	{
		if s.AllowCallerToCheckVoicemail.Set {
			e.FieldStart("allow_caller_to_check_voicemail")
			s.AllowCallerToCheckVoicemail.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSiteSettingForTypeOKBusinessHoursOverflow = [3]string{
	0: "allow_caller_to_reach_operator",
	1: "operator",
	2: "allow_caller_to_check_voicemail",
}

// Decode decodes GetSiteSettingForTypeOKBusinessHoursOverflow from json.
func (s *GetSiteSettingForTypeOKBusinessHoursOverflow) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSiteSettingForTypeOKBusinessHoursOverflow to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allow_caller_to_reach_operator":
			if err := func() error {
				s.AllowCallerToReachOperator.Reset()
				if err := s.AllowCallerToReachOperator.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_caller_to_reach_operator\"")
			}
		case "operator":
			if err := func() error {
				s.Operator.Reset()
				if err := s.Operator.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"operator\"")
			}
		case "allow_caller_to_check_voicemail":
			if err := func() error {
				s.AllowCallerToCheckVoicemail.Reset()
				if err := s.AllowCallerToCheckVoicemail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_caller_to_check_voicemail\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSiteSettingForTypeOKBusinessHoursOverflow")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSiteSettingForTypeOKBusinessHoursOverflow) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSiteSettingForTypeOKBusinessHoursOverflow) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSiteSettingForTypeOKBusinessHoursOverflowOperator) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSiteSettingForTypeOKBusinessHoursOverflowOperator) encodeFields(e *jx.Encoder) {
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ExtensionType.Set {
			e.FieldStart("extension_type")
			s.ExtensionType.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSiteSettingForTypeOKBusinessHoursOverflowOperator = [4]string{
	0: "extension_id",
	1: "extension_number",
	2: "display_name",
	3: "extension_type",
}

// Decode decodes GetSiteSettingForTypeOKBusinessHoursOverflowOperator from json.
func (s *GetSiteSettingForTypeOKBusinessHoursOverflowOperator) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSiteSettingForTypeOKBusinessHoursOverflowOperator to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "extension_type":
			if err := func() error {
				s.ExtensionType.Reset()
				if err := s.ExtensionType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSiteSettingForTypeOKBusinessHoursOverflowOperator")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSiteSettingForTypeOKBusinessHoursOverflowOperator) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSiteSettingForTypeOKBusinessHoursOverflowOperator) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSiteSettingForTypeOKClosedHours) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSiteSettingForTypeOKClosedHours) encodeFields(e *jx.Encoder) {
	{
		if s.Overflow.Set {
			e.FieldStart("overflow")
			s.Overflow.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSiteSettingForTypeOKClosedHours = [1]string{
	0: "overflow",
}

// Decode decodes GetSiteSettingForTypeOKClosedHours from json.
func (s *GetSiteSettingForTypeOKClosedHours) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSiteSettingForTypeOKClosedHours to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "overflow":
			if err := func() error {
				s.Overflow.Reset()
				if err := s.Overflow.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overflow\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSiteSettingForTypeOKClosedHours")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSiteSettingForTypeOKClosedHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSiteSettingForTypeOKClosedHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSiteSettingForTypeOKClosedHoursOverflow) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSiteSettingForTypeOKClosedHoursOverflow) encodeFields(e *jx.Encoder) {
	{
		if s.AllowCallerToReachOperator.Set {
			e.FieldStart("allow_caller_to_reach_operator")
			s.AllowCallerToReachOperator.Encode(e)
		}
	}
	{
		if s.Operator.Set {
			e.FieldStart("operator")
			s.Operator.Encode(e)
		}
	}
	{
		if s.AllowCallerToCheckVoicemail.Set {
			e.FieldStart("allow_caller_to_check_voicemail")
			s.AllowCallerToCheckVoicemail.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSiteSettingForTypeOKClosedHoursOverflow = [3]string{
	0: "allow_caller_to_reach_operator",
	1: "operator",
	2: "allow_caller_to_check_voicemail",
}

// Decode decodes GetSiteSettingForTypeOKClosedHoursOverflow from json.
func (s *GetSiteSettingForTypeOKClosedHoursOverflow) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSiteSettingForTypeOKClosedHoursOverflow to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allow_caller_to_reach_operator":
			if err := func() error {
				s.AllowCallerToReachOperator.Reset()
				if err := s.AllowCallerToReachOperator.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_caller_to_reach_operator\"")
			}
		case "operator":
			if err := func() error {
				s.Operator.Reset()
				if err := s.Operator.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"operator\"")
			}
		case "allow_caller_to_check_voicemail":
			if err := func() error {
				s.AllowCallerToCheckVoicemail.Reset()
				if err := s.AllowCallerToCheckVoicemail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_caller_to_check_voicemail\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSiteSettingForTypeOKClosedHoursOverflow")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSiteSettingForTypeOKClosedHoursOverflow) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSiteSettingForTypeOKClosedHoursOverflow) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSiteSettingForTypeOKClosedHoursOverflowOperator) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSiteSettingForTypeOKClosedHoursOverflowOperator) encodeFields(e *jx.Encoder) {
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ExtensionType.Set {
			e.FieldStart("extension_type")
			s.ExtensionType.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSiteSettingForTypeOKClosedHoursOverflowOperator = [4]string{
	0: "extension_id",
	1: "extension_number",
	2: "display_name",
	3: "extension_type",
}

// Decode decodes GetSiteSettingForTypeOKClosedHoursOverflowOperator from json.
func (s *GetSiteSettingForTypeOKClosedHoursOverflowOperator) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSiteSettingForTypeOKClosedHoursOverflowOperator to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "extension_type":
			if err := func() error {
				s.ExtensionType.Reset()
				if err := s.ExtensionType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSiteSettingForTypeOKClosedHoursOverflowOperator")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSiteSettingForTypeOKClosedHoursOverflowOperator) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSiteSettingForTypeOKClosedHoursOverflowOperator) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSiteSettingForTypeOKDialByName) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSiteSettingForTypeOKDialByName) encodeFields(e *jx.Encoder) {
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.Inherit.Set {
			e.FieldStart("inherit")
			s.Inherit.Encode(e)
		}
	}
	{
		if s.Rule.Set {
			e.FieldStart("rule")
			s.Rule.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSiteSettingForTypeOKDialByName = [3]string{
	0: "status",
	1: "inherit",
	2: "rule",
}

// Decode decodes GetSiteSettingForTypeOKDialByName from json.
func (s *GetSiteSettingForTypeOKDialByName) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSiteSettingForTypeOKDialByName to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "inherit":
			if err := func() error {
				s.Inherit.Reset()
				if err := s.Inherit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"inherit\"")
			}
		case "rule":
			if err := func() error {
				s.Rule.Reset()
				if err := s.Rule.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rule\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSiteSettingForTypeOKDialByName")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSiteSettingForTypeOKDialByName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSiteSettingForTypeOKDialByName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSiteSettingForTypeOKHolidayHours) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSiteSettingForTypeOKHolidayHours) encodeFields(e *jx.Encoder) {
	{
		if s.Holidays != nil {
			e.FieldStart("holidays")
			e.ArrStart()
			for _, elem := range s.Holidays {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Overflow.Set {
			e.FieldStart("overflow")
			s.Overflow.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSiteSettingForTypeOKHolidayHours = [2]string{
	0: "holidays",
	1: "overflow",
}

// Decode decodes GetSiteSettingForTypeOKHolidayHours from json.
func (s *GetSiteSettingForTypeOKHolidayHours) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSiteSettingForTypeOKHolidayHours to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "holidays":
			if err := func() error {
				s.Holidays = make([]GetSiteSettingForTypeOKHolidayHoursHolidaysItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetSiteSettingForTypeOKHolidayHoursHolidaysItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Holidays = append(s.Holidays, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holidays\"")
			}
		case "overflow":
			if err := func() error {
				s.Overflow.Reset()
				if err := s.Overflow.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overflow\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSiteSettingForTypeOKHolidayHours")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSiteSettingForTypeOKHolidayHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSiteSettingForTypeOKHolidayHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSiteSettingForTypeOKHolidayHoursHolidaysItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSiteSettingForTypeOKHolidayHoursHolidaysItem) encodeFields(e *jx.Encoder) {
	{
		if s.HolidayID.Set {
			e.FieldStart("holiday_id")
			s.HolidayID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.From.Set {
			e.FieldStart("from")
			s.From.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.To.Set {
			e.FieldStart("to")
			s.To.Encode(e, json.EncodeDateTime)
		}
	}
}

var jsonFieldsNameOfGetSiteSettingForTypeOKHolidayHoursHolidaysItem = [4]string{
	0: "holiday_id",
	1: "name",
	2: "from",
	3: "to",
}

// Decode decodes GetSiteSettingForTypeOKHolidayHoursHolidaysItem from json.
func (s *GetSiteSettingForTypeOKHolidayHoursHolidaysItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSiteSettingForTypeOKHolidayHoursHolidaysItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "holiday_id":
			if err := func() error {
				s.HolidayID.Reset()
				if err := s.HolidayID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holiday_id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "from":
			if err := func() error {
				s.From.Reset()
				if err := s.From.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"from\"")
			}
		case "to":
			if err := func() error {
				s.To.Reset()
				if err := s.To.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"to\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSiteSettingForTypeOKHolidayHoursHolidaysItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSiteSettingForTypeOKHolidayHoursHolidaysItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSiteSettingForTypeOKHolidayHoursHolidaysItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSiteSettingForTypeOKHolidayHoursOverflow) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSiteSettingForTypeOKHolidayHoursOverflow) encodeFields(e *jx.Encoder) {
	{
		if s.AllowCallerToReachOperator.Set {
			e.FieldStart("allow_caller_to_reach_operator")
			s.AllowCallerToReachOperator.Encode(e)
		}
	}
	{
		if s.Operator.Set {
			e.FieldStart("operator")
			s.Operator.Encode(e)
		}
	}
	{
		if s.AllowCallerToCheckVoicemail.Set {
			e.FieldStart("allow_caller_to_check_voicemail")
			s.AllowCallerToCheckVoicemail.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSiteSettingForTypeOKHolidayHoursOverflow = [3]string{
	0: "allow_caller_to_reach_operator",
	1: "operator",
	2: "allow_caller_to_check_voicemail",
}

// Decode decodes GetSiteSettingForTypeOKHolidayHoursOverflow from json.
func (s *GetSiteSettingForTypeOKHolidayHoursOverflow) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSiteSettingForTypeOKHolidayHoursOverflow to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allow_caller_to_reach_operator":
			if err := func() error {
				s.AllowCallerToReachOperator.Reset()
				if err := s.AllowCallerToReachOperator.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_caller_to_reach_operator\"")
			}
		case "operator":
			if err := func() error {
				s.Operator.Reset()
				if err := s.Operator.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"operator\"")
			}
		case "allow_caller_to_check_voicemail":
			if err := func() error {
				s.AllowCallerToCheckVoicemail.Reset()
				if err := s.AllowCallerToCheckVoicemail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_caller_to_check_voicemail\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSiteSettingForTypeOKHolidayHoursOverflow")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSiteSettingForTypeOKHolidayHoursOverflow) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSiteSettingForTypeOKHolidayHoursOverflow) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSiteSettingForTypeOKHolidayHoursOverflowOperator) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSiteSettingForTypeOKHolidayHoursOverflowOperator) encodeFields(e *jx.Encoder) {
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ExtensionType.Set {
			e.FieldStart("extension_type")
			s.ExtensionType.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSiteSettingForTypeOKHolidayHoursOverflowOperator = [4]string{
	0: "extension_id",
	1: "extension_number",
	2: "display_name",
	3: "extension_type",
}

// Decode decodes GetSiteSettingForTypeOKHolidayHoursOverflowOperator from json.
func (s *GetSiteSettingForTypeOKHolidayHoursOverflowOperator) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSiteSettingForTypeOKHolidayHoursOverflowOperator to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "extension_type":
			if err := func() error {
				s.ExtensionType.Reset()
				if err := s.ExtensionType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSiteSettingForTypeOKHolidayHoursOverflowOperator")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSiteSettingForTypeOKHolidayHoursOverflowOperator) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSiteSettingForTypeOKHolidayHoursOverflowOperator) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSiteSettingForTypeOKLocationBasedRouting) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSiteSettingForTypeOKLocationBasedRouting) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.PlaceReceivePstnCalls.Set {
			e.FieldStart("place_receive_pstn_calls")
			s.PlaceReceivePstnCalls.Encode(e)
		}
	}
	{
		if s.EnableMediaOffLoadPstnCalls.Set {
			e.FieldStart("enable_media_off_load_pstn_calls")
			s.EnableMediaOffLoadPstnCalls.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSiteSettingForTypeOKLocationBasedRouting = [3]string{
	0: "enable",
	1: "place_receive_pstn_calls",
	2: "enable_media_off_load_pstn_calls",
}

// Decode decodes GetSiteSettingForTypeOKLocationBasedRouting from json.
func (s *GetSiteSettingForTypeOKLocationBasedRouting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSiteSettingForTypeOKLocationBasedRouting to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "place_receive_pstn_calls":
			if err := func() error {
				s.PlaceReceivePstnCalls.Reset()
				if err := s.PlaceReceivePstnCalls.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"place_receive_pstn_calls\"")
			}
		case "enable_media_off_load_pstn_calls":
			if err := func() error {
				s.EnableMediaOffLoadPstnCalls.Reset()
				if err := s.EnableMediaOffLoadPstnCalls.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable_media_off_load_pstn_calls\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSiteSettingForTypeOKLocationBasedRouting")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSiteSettingForTypeOKLocationBasedRouting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSiteSettingForTypeOKLocationBasedRouting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSiteSettingForTypeOKOutboundCallerID) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSiteSettingForTypeOKOutboundCallerID) encodeFields(e *jx.Encoder) {
	{
		if s.AutoReceptionistsNumbers.Set {
			e.FieldStart("auto_receptionists_numbers")
			s.AutoReceptionistsNumbers.Encode(e)
		}
	}
	{
		if s.CallQueueNumbers.Set {
			e.FieldStart("call_queue_numbers")
			s.CallQueueNumbers.Encode(e)
		}
	}
	{
		if s.ShareLineGroupNumbers.Set {
			e.FieldStart("share_line_group_numbers")
			s.ShareLineGroupNumbers.Encode(e)
		}
	}
	{
		if s.ShowOutboundCallerIDForInternalCall.Set {
			e.FieldStart("show_outbound_caller_id_for_internal_call")
			s.ShowOutboundCallerIDForInternalCall.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSiteSettingForTypeOKOutboundCallerID = [4]string{
	0: "auto_receptionists_numbers",
	1: "call_queue_numbers",
	2: "share_line_group_numbers",
	3: "show_outbound_caller_id_for_internal_call",
}

// Decode decodes GetSiteSettingForTypeOKOutboundCallerID from json.
func (s *GetSiteSettingForTypeOKOutboundCallerID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSiteSettingForTypeOKOutboundCallerID to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "auto_receptionists_numbers":
			if err := func() error {
				s.AutoReceptionistsNumbers.Reset()
				if err := s.AutoReceptionistsNumbers.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_receptionists_numbers\"")
			}
		case "call_queue_numbers":
			if err := func() error {
				s.CallQueueNumbers.Reset()
				if err := s.CallQueueNumbers.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_queue_numbers\"")
			}
		case "share_line_group_numbers":
			if err := func() error {
				s.ShareLineGroupNumbers.Reset()
				if err := s.ShareLineGroupNumbers.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"share_line_group_numbers\"")
			}
		case "show_outbound_caller_id_for_internal_call":
			if err := func() error {
				s.ShowOutboundCallerIDForInternalCall.Reset()
				if err := s.ShowOutboundCallerIDForInternalCall.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"show_outbound_caller_id_for_internal_call\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSiteSettingForTypeOKOutboundCallerID")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSiteSettingForTypeOKOutboundCallerID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSiteSettingForTypeOKOutboundCallerID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSiteSettingForTypeOKSecurity) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSiteSettingForTypeOKSecurity) encodeFields(e *jx.Encoder) {
	{
		if s.DeviceTypes != nil {
			e.FieldStart("device_types")
			e.ArrStart()
			for _, elem := range s.DeviceTypes {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGetSiteSettingForTypeOKSecurity = [1]string{
	0: "device_types",
}

// Decode decodes GetSiteSettingForTypeOKSecurity from json.
func (s *GetSiteSettingForTypeOKSecurity) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSiteSettingForTypeOKSecurity to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "device_types":
			if err := func() error {
				s.DeviceTypes = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.DeviceTypes = append(s.DeviceTypes, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_types\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSiteSettingForTypeOKSecurity")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSiteSettingForTypeOKSecurity) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSiteSettingForTypeOKSecurity) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSmsSessionsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSmsSessionsOK) encodeFields(e *jx.Encoder) {
	{
		if s.SMSSessions != nil {
			e.FieldStart("sms_sessions")
			e.ArrStart()
			for _, elem := range s.SMSSessions {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.SyncToken.Set {
			e.FieldStart("sync_token")
			s.SyncToken.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSmsSessionsOK = [2]string{
	0: "sms_sessions",
	1: "sync_token",
}

// Decode decodes GetSmsSessionsOK from json.
func (s *GetSmsSessionsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSmsSessionsOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "sms_sessions":
			if err := func() error {
				s.SMSSessions = make([]GetSmsSessionsOKSMSSessionsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetSmsSessionsOKSMSSessionsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.SMSSessions = append(s.SMSSessions, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sms_sessions\"")
			}
		case "sync_token":
			if err := func() error {
				s.SyncToken.Reset()
				if err := s.SyncToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sync_token\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSmsSessionsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSmsSessionsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSmsSessionsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSmsSessionsOKSMSSessionsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSmsSessionsOKSMSSessionsItem) encodeFields(e *jx.Encoder) {
	{
		if s.LastAccessTime.Set {
			e.FieldStart("last_access_time")
			s.LastAccessTime.Encode(e)
		}
	}
	{
		if s.LatestMessage.Set {
			e.FieldStart("latest_message")
			s.LatestMessage.Encode(e)
		}
	}
	{
		if s.Participants != nil {
			e.FieldStart("participants")
			e.ArrStart()
			for _, elem := range s.Participants {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.SessionID.Set {
			e.FieldStart("session_id")
			s.SessionID.Encode(e)
		}
	}
	{
		if s.SessionType.Set {
			e.FieldStart("session_type")
			s.SessionType.Encode(e)
		}
	}
	{
		if s.UnreadMessageCount.Set {
			e.FieldStart("unread_message_count")
			s.UnreadMessageCount.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSmsSessionsOKSMSSessionsItem = [6]string{
	0: "last_access_time",
	1: "latest_message",
	2: "participants",
	3: "session_id",
	4: "session_type",
	5: "unread_message_count",
}

// Decode decodes GetSmsSessionsOKSMSSessionsItem from json.
func (s *GetSmsSessionsOKSMSSessionsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSmsSessionsOKSMSSessionsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "last_access_time":
			if err := func() error {
				s.LastAccessTime.Reset()
				if err := s.LastAccessTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"last_access_time\"")
			}
		case "latest_message":
			if err := func() error {
				s.LatestMessage.Reset()
				if err := s.LatestMessage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"latest_message\"")
			}
		case "participants":
			if err := func() error {
				s.Participants = make([]GetSmsSessionsOKSMSSessionsItemParticipantsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetSmsSessionsOKSMSSessionsItemParticipantsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Participants = append(s.Participants, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"participants\"")
			}
		case "session_id":
			if err := func() error {
				s.SessionID.Reset()
				if err := s.SessionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"session_id\"")
			}
		case "session_type":
			if err := func() error {
				s.SessionType.Reset()
				if err := s.SessionType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"session_type\"")
			}
		case "unread_message_count":
			if err := func() error {
				s.UnreadMessageCount.Reset()
				if err := s.UnreadMessageCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"unread_message_count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSmsSessionsOKSMSSessionsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSmsSessionsOKSMSSessionsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSmsSessionsOKSMSSessionsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSmsSessionsOKSMSSessionsItemLatestMessage) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSmsSessionsOKSMSSessionsItemLatestMessage) encodeFields(e *jx.Encoder) {
	{
		if s.Attachments != nil {
			e.FieldStart("attachments")
			e.ArrStart()
			for _, elem := range s.Attachments {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.DateTime.Set {
			e.FieldStart("date_time")
			s.DateTime.Encode(e)
		}
	}
	{
		if s.Direction.Set {
			e.FieldStart("direction")
			s.Direction.Encode(e)
		}
	}
	{
		if s.Message.Set {
			e.FieldStart("message")
			s.Message.Encode(e)
		}
	}
	{
		if s.MessageID.Set {
			e.FieldStart("message_id")
			s.MessageID.Encode(e)
		}
	}
	{
		if s.MessageType.Set {
			e.FieldStart("message_type")
			s.MessageType.Encode(e)
		}
	}
	{
		if s.Sender.Set {
			e.FieldStart("sender")
			s.Sender.Encode(e)
		}
	}
	{
		if s.ToMembers != nil {
			e.FieldStart("to_members")
			e.ArrStart()
			for _, elem := range s.ToMembers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGetSmsSessionsOKSMSSessionsItemLatestMessage = [8]string{
	0: "attachments",
	1: "date_time",
	2: "direction",
	3: "message",
	4: "message_id",
	5: "message_type",
	6: "sender",
	7: "to_members",
}

// Decode decodes GetSmsSessionsOKSMSSessionsItemLatestMessage from json.
func (s *GetSmsSessionsOKSMSSessionsItemLatestMessage) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSmsSessionsOKSMSSessionsItemLatestMessage to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "attachments":
			if err := func() error {
				s.Attachments = make([]GetSmsSessionsOKSMSSessionsItemLatestMessageAttachmentsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetSmsSessionsOKSMSSessionsItemLatestMessageAttachmentsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Attachments = append(s.Attachments, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"attachments\"")
			}
		case "date_time":
			if err := func() error {
				s.DateTime.Reset()
				if err := s.DateTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"date_time\"")
			}
		case "direction":
			if err := func() error {
				s.Direction.Reset()
				if err := s.Direction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"direction\"")
			}
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		case "message_id":
			if err := func() error {
				s.MessageID.Reset()
				if err := s.MessageID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message_id\"")
			}
		case "message_type":
			if err := func() error {
				s.MessageType.Reset()
				if err := s.MessageType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message_type\"")
			}
		case "sender":
			if err := func() error {
				s.Sender.Reset()
				if err := s.Sender.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sender\"")
			}
		case "to_members":
			if err := func() error {
				s.ToMembers = make([]GetSmsSessionsOKSMSSessionsItemLatestMessageToMembersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetSmsSessionsOKSMSSessionsItemLatestMessageToMembersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.ToMembers = append(s.ToMembers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"to_members\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSmsSessionsOKSMSSessionsItemLatestMessage")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSmsSessionsOKSMSSessionsItemLatestMessage) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSmsSessionsOKSMSSessionsItemLatestMessage) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSmsSessionsOKSMSSessionsItemLatestMessageAttachmentsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSmsSessionsOKSMSSessionsItemLatestMessageAttachmentsItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSmsSessionsOKSMSSessionsItemLatestMessageAttachmentsItem = [2]string{
	0: "id",
	1: "type",
}

// Decode decodes GetSmsSessionsOKSMSSessionsItemLatestMessageAttachmentsItem from json.
func (s *GetSmsSessionsOKSMSSessionsItemLatestMessageAttachmentsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSmsSessionsOKSMSSessionsItemLatestMessageAttachmentsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSmsSessionsOKSMSSessionsItemLatestMessageAttachmentsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSmsSessionsOKSMSSessionsItemLatestMessageAttachmentsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSmsSessionsOKSMSSessionsItemLatestMessageAttachmentsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSmsSessionsOKSMSSessionsItemLatestMessageSender) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSmsSessionsOKSMSSessionsItemLatestMessageSender) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.Owner.Set {
			e.FieldStart("owner")
			s.Owner.Encode(e)
		}
	}
	{
		e.FieldStart("phone_number")
		e.Str(s.PhoneNumber)
	}
}

var jsonFieldsNameOfGetSmsSessionsOKSMSSessionsItemLatestMessageSender = [3]string{
	0: "display_name",
	1: "owner",
	2: "phone_number",
}

// Decode decodes GetSmsSessionsOKSMSSessionsItemLatestMessageSender from json.
func (s *GetSmsSessionsOKSMSSessionsItemLatestMessageSender) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSmsSessionsOKSMSSessionsItemLatestMessageSender to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "owner":
			if err := func() error {
				s.Owner.Reset()
				if err := s.Owner.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"owner\"")
			}
		case "phone_number":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.PhoneNumber = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSmsSessionsOKSMSSessionsItemLatestMessageSender")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000100,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGetSmsSessionsOKSMSSessionsItemLatestMessageSender) {
					name = jsonFieldsNameOfGetSmsSessionsOKSMSSessionsItemLatestMessageSender[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSmsSessionsOKSMSSessionsItemLatestMessageSender) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSmsSessionsOKSMSSessionsItemLatestMessageSender) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSmsSessionsOKSMSSessionsItemLatestMessageSenderOwner) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSmsSessionsOKSMSSessionsItemLatestMessageSenderOwner) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSmsSessionsOKSMSSessionsItemLatestMessageSenderOwner = [2]string{
	0: "id",
	1: "type",
}

// Decode decodes GetSmsSessionsOKSMSSessionsItemLatestMessageSenderOwner from json.
func (s *GetSmsSessionsOKSMSSessionsItemLatestMessageSenderOwner) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSmsSessionsOKSMSSessionsItemLatestMessageSenderOwner to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSmsSessionsOKSMSSessionsItemLatestMessageSenderOwner")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSmsSessionsOKSMSSessionsItemLatestMessageSenderOwner) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSmsSessionsOKSMSSessionsItemLatestMessageSenderOwner) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSmsSessionsOKSMSSessionsItemLatestMessageToMembersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSmsSessionsOKSMSSessionsItemLatestMessageToMembersItem) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.Owner.Set {
			e.FieldStart("owner")
			s.Owner.Encode(e)
		}
	}
	{
		e.FieldStart("phone_number")
		e.Str(s.PhoneNumber)
	}
}

var jsonFieldsNameOfGetSmsSessionsOKSMSSessionsItemLatestMessageToMembersItem = [3]string{
	0: "display_name",
	1: "owner",
	2: "phone_number",
}

// Decode decodes GetSmsSessionsOKSMSSessionsItemLatestMessageToMembersItem from json.
func (s *GetSmsSessionsOKSMSSessionsItemLatestMessageToMembersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSmsSessionsOKSMSSessionsItemLatestMessageToMembersItem to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "owner":
			if err := func() error {
				s.Owner.Reset()
				if err := s.Owner.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"owner\"")
			}
		case "phone_number":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.PhoneNumber = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSmsSessionsOKSMSSessionsItemLatestMessageToMembersItem")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000100,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGetSmsSessionsOKSMSSessionsItemLatestMessageToMembersItem) {
					name = jsonFieldsNameOfGetSmsSessionsOKSMSSessionsItemLatestMessageToMembersItem[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSmsSessionsOKSMSSessionsItemLatestMessageToMembersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSmsSessionsOKSMSSessionsItemLatestMessageToMembersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSmsSessionsOKSMSSessionsItemLatestMessageToMembersItemOwner) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSmsSessionsOKSMSSessionsItemLatestMessageToMembersItemOwner) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSmsSessionsOKSMSSessionsItemLatestMessageToMembersItemOwner = [2]string{
	0: "id",
	1: "type",
}

// Decode decodes GetSmsSessionsOKSMSSessionsItemLatestMessageToMembersItemOwner from json.
func (s *GetSmsSessionsOKSMSSessionsItemLatestMessageToMembersItemOwner) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSmsSessionsOKSMSSessionsItemLatestMessageToMembersItemOwner to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSmsSessionsOKSMSSessionsItemLatestMessageToMembersItemOwner")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSmsSessionsOKSMSSessionsItemLatestMessageToMembersItemOwner) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSmsSessionsOKSMSSessionsItemLatestMessageToMembersItemOwner) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSmsSessionsOKSMSSessionsItemParticipantsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSmsSessionsOKSMSSessionsItemParticipantsItem) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.Owner.Set {
			e.FieldStart("owner")
			s.Owner.Encode(e)
		}
	}
	{
		if s.PhoneNumber.Set {
			e.FieldStart("phone_number")
			s.PhoneNumber.Encode(e)
		}
	}
	{
		if s.IsSessionOwner.Set {
			e.FieldStart("is_session_owner")
			s.IsSessionOwner.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSmsSessionsOKSMSSessionsItemParticipantsItem = [4]string{
	0: "display_name",
	1: "owner",
	2: "phone_number",
	3: "is_session_owner",
}

// Decode decodes GetSmsSessionsOKSMSSessionsItemParticipantsItem from json.
func (s *GetSmsSessionsOKSMSSessionsItemParticipantsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSmsSessionsOKSMSSessionsItemParticipantsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "owner":
			if err := func() error {
				s.Owner.Reset()
				if err := s.Owner.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"owner\"")
			}
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		case "is_session_owner":
			if err := func() error {
				s.IsSessionOwner.Reset()
				if err := s.IsSessionOwner.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"is_session_owner\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSmsSessionsOKSMSSessionsItemParticipantsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSmsSessionsOKSMSSessionsItemParticipantsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSmsSessionsOKSMSSessionsItemParticipantsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetSmsSessionsOKSMSSessionsItemParticipantsItemOwner) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetSmsSessionsOKSMSSessionsItemParticipantsItemOwner) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetSmsSessionsOKSMSSessionsItemParticipantsItemOwner = [2]string{
	0: "id",
	1: "type",
}

// Decode decodes GetSmsSessionsOKSMSSessionsItemParticipantsItemOwner from json.
func (s *GetSmsSessionsOKSMSSessionsItemParticipantsItemOwner) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSmsSessionsOKSMSSessionsItemParticipantsItemOwner to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSmsSessionsOKSMSSessionsItemParticipantsItemOwner")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetSmsSessionsOKSMSSessionsItemParticipantsItemOwner) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetSmsSessionsOKSMSSessionsItemParticipantsItemOwner) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetUserOutboundCallingCountriesAndRegionsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetUserOutboundCallingCountriesAndRegionsOK) encodeFields(e *jx.Encoder) {
	{
		if s.CountriesRegions != nil {
			e.FieldStart("countries_regions")
			e.ArrStart()
			for _, elem := range s.CountriesRegions {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetUserOutboundCallingCountriesAndRegionsOK = [3]string{
	0: "countries_regions",
	1: "next_page_token",
	2: "page_size",
}

// Decode decodes GetUserOutboundCallingCountriesAndRegionsOK from json.
func (s *GetUserOutboundCallingCountriesAndRegionsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetUserOutboundCallingCountriesAndRegionsOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "countries_regions":
			if err := func() error {
				s.CountriesRegions = make([]GetUserOutboundCallingCountriesAndRegionsOKCountriesRegionsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetUserOutboundCallingCountriesAndRegionsOKCountriesRegionsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CountriesRegions = append(s.CountriesRegions, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"countries_regions\"")
			}
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetUserOutboundCallingCountriesAndRegionsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetUserOutboundCallingCountriesAndRegionsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetUserOutboundCallingCountriesAndRegionsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetUserOutboundCallingCountriesAndRegionsOKCountriesRegionsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetUserOutboundCallingCountriesAndRegionsOKCountriesRegionsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Code.Set {
			e.FieldStart("code")
			s.Code.Encode(e)
		}
	}
	{
		if s.IsoCode.Set {
			e.FieldStart("iso_code")
			s.IsoCode.Encode(e)
		}
	}
	{
		if s.Rule.Set {
			e.FieldStart("rule")
			s.Rule.Encode(e)
		}
	}
	{
		if s.EnabledCarrier != nil {
			e.FieldStart("enabled_carrier")
			e.ArrStart()
			for _, elem := range s.EnabledCarrier {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGetUserOutboundCallingCountriesAndRegionsOKCountriesRegionsItem = [5]string{
	0: "name",
	1: "code",
	2: "iso_code",
	3: "rule",
	4: "enabled_carrier",
}

// Decode decodes GetUserOutboundCallingCountriesAndRegionsOKCountriesRegionsItem from json.
func (s *GetUserOutboundCallingCountriesAndRegionsOKCountriesRegionsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetUserOutboundCallingCountriesAndRegionsOKCountriesRegionsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "code":
			if err := func() error {
				s.Code.Reset()
				if err := s.Code.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code\"")
			}
		case "iso_code":
			if err := func() error {
				s.IsoCode.Reset()
				if err := s.IsoCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_code\"")
			}
		case "rule":
			if err := func() error {
				s.Rule.Reset()
				if err := s.Rule.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rule\"")
			}
		case "enabled_carrier":
			if err := func() error {
				s.EnabledCarrier = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.EnabledCarrier = append(s.EnabledCarrier, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enabled_carrier\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetUserOutboundCallingCountriesAndRegionsOKCountriesRegionsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetUserOutboundCallingCountriesAndRegionsOKCountriesRegionsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetUserOutboundCallingCountriesAndRegionsOKCountriesRegionsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetVoicemailDetailsByCallIdOrCallLogIdOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetVoicemailDetailsByCallIdOrCallLogIdOK) encodeFields(e *jx.Encoder) {
	{
		if s.CallID.Set {
			e.FieldStart("call_id")
			s.CallID.Encode(e)
		}
	}
	{
		if s.CallLogID.Set {
			e.FieldStart("call_log_id")
			s.CallLogID.Encode(e)
		}
	}
	{
		if s.CalleeName.Set {
			e.FieldStart("callee_name")
			s.CalleeName.Encode(e)
		}
	}
	{
		if s.CalleeNumber.Set {
			e.FieldStart("callee_number")
			s.CalleeNumber.Encode(e)
		}
	}
	{
		if s.CalleeNumberType.Set {
			e.FieldStart("callee_number_type")
			s.CalleeNumberType.Encode(e)
		}
	}
	{
		if s.CallerName.Set {
			e.FieldStart("caller_name")
			s.CallerName.Encode(e)
		}
	}
	{
		if s.CallerNumber.Set {
			e.FieldStart("caller_number")
			s.CallerNumber.Encode(e)
		}
	}
	{
		if s.CallerNumberType.Set {
			e.FieldStart("caller_number_type")
			s.CallerNumberType.Encode(e)
		}
	}
	{
		if s.DateTime.Set {
			e.FieldStart("date_time")
			s.DateTime.Encode(e)
		}
	}
	{
		if s.DownloadURL.Set {
			e.FieldStart("download_url")
			s.DownloadURL.Encode(e)
		}
	}
	{
		if s.Duration.Set {
			e.FieldStart("duration")
			s.Duration.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.Transcription.Set {
			e.FieldStart("transcription")
			s.Transcription.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetVoicemailDetailsByCallIdOrCallLogIdOK = [14]string{
	0:  "call_id",
	1:  "call_log_id",
	2:  "callee_name",
	3:  "callee_number",
	4:  "callee_number_type",
	5:  "caller_name",
	6:  "caller_number",
	7:  "caller_number_type",
	8:  "date_time",
	9:  "download_url",
	10: "duration",
	11: "id",
	12: "status",
	13: "transcription",
}

// Decode decodes GetVoicemailDetailsByCallIdOrCallLogIdOK from json.
func (s *GetVoicemailDetailsByCallIdOrCallLogIdOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetVoicemailDetailsByCallIdOrCallLogIdOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "call_id":
			if err := func() error {
				s.CallID.Reset()
				if err := s.CallID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_id\"")
			}
		case "call_log_id":
			if err := func() error {
				s.CallLogID.Reset()
				if err := s.CallLogID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_log_id\"")
			}
		case "callee_name":
			if err := func() error {
				s.CalleeName.Reset()
				if err := s.CalleeName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_name\"")
			}
		case "callee_number":
			if err := func() error {
				s.CalleeNumber.Reset()
				if err := s.CalleeNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_number\"")
			}
		case "callee_number_type":
			if err := func() error {
				s.CalleeNumberType.Reset()
				if err := s.CalleeNumberType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_number_type\"")
			}
		case "caller_name":
			if err := func() error {
				s.CallerName.Reset()
				if err := s.CallerName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_name\"")
			}
		case "caller_number":
			if err := func() error {
				s.CallerNumber.Reset()
				if err := s.CallerNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_number\"")
			}
		case "caller_number_type":
			if err := func() error {
				s.CallerNumberType.Reset()
				if err := s.CallerNumberType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_number_type\"")
			}
		case "date_time":
			if err := func() error {
				s.DateTime.Reset()
				if err := s.DateTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"date_time\"")
			}
		case "download_url":
			if err := func() error {
				s.DownloadURL.Reset()
				if err := s.DownloadURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"download_url\"")
			}
		case "duration":
			if err := func() error {
				s.Duration.Reset()
				if err := s.Duration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"duration\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "transcription":
			if err := func() error {
				s.Transcription.Reset()
				if err := s.Transcription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transcription\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetVoicemailDetailsByCallIdOrCallLogIdOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetVoicemailDetailsByCallIdOrCallLogIdOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetVoicemailDetailsByCallIdOrCallLogIdOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetVoicemailDetailsByCallIdOrCallLogIdOKTranscription) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetVoicemailDetailsByCallIdOrCallLogIdOKTranscription) encodeFields(e *jx.Encoder) {
	{
		if s.Content.Set {
			e.FieldStart("content")
			s.Content.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.Engine.Set {
			e.FieldStart("engine")
			s.Engine.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetVoicemailDetailsByCallIdOrCallLogIdOKTranscription = [3]string{
	0: "content",
	1: "status",
	2: "engine",
}

// Decode decodes GetVoicemailDetailsByCallIdOrCallLogIdOKTranscription from json.
func (s *GetVoicemailDetailsByCallIdOrCallLogIdOKTranscription) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetVoicemailDetailsByCallIdOrCallLogIdOKTranscription to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "content":
			if err := func() error {
				s.Content.Reset()
				if err := s.Content.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "engine":
			if err := func() error {
				s.Engine.Reset()
				if err := s.Engine.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"engine\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetVoicemailDetailsByCallIdOrCallLogIdOKTranscription")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetVoicemailDetailsByCallIdOrCallLogIdOKTranscription) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetVoicemailDetailsByCallIdOrCallLogIdOKTranscription) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetVoicemailDetailsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetVoicemailDetailsOK) encodeFields(e *jx.Encoder) {
	{
		if s.CallID.Set {
			e.FieldStart("call_id")
			s.CallID.Encode(e)
		}
	}
	{
		if s.CallLogID.Set {
			e.FieldStart("call_log_id")
			s.CallLogID.Encode(e)
		}
	}
	{
		if s.CalleeName.Set {
			e.FieldStart("callee_name")
			s.CalleeName.Encode(e)
		}
	}
	{
		if s.CalleeNumber.Set {
			e.FieldStart("callee_number")
			s.CalleeNumber.Encode(e)
		}
	}
	{
		if s.CalleeNumberType.Set {
			e.FieldStart("callee_number_type")
			s.CalleeNumberType.Encode(e)
		}
	}
	{
		if s.CallerName.Set {
			e.FieldStart("caller_name")
			s.CallerName.Encode(e)
		}
	}
	{
		if s.CallerNumber.Set {
			e.FieldStart("caller_number")
			s.CallerNumber.Encode(e)
		}
	}
	{
		if s.CallerNumberType.Set {
			e.FieldStart("caller_number_type")
			s.CallerNumberType.Encode(e)
		}
	}
	{
		if s.DateTime.Set {
			e.FieldStart("date_time")
			s.DateTime.Encode(e)
		}
	}
	{
		if s.DownloadURL.Set {
			e.FieldStart("download_url")
			s.DownloadURL.Encode(e)
		}
	}
	{
		if s.Duration.Set {
			e.FieldStart("duration")
			s.Duration.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.Transcription.Set {
			e.FieldStart("transcription")
			s.Transcription.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetVoicemailDetailsOK = [14]string{
	0:  "call_id",
	1:  "call_log_id",
	2:  "callee_name",
	3:  "callee_number",
	4:  "callee_number_type",
	5:  "caller_name",
	6:  "caller_number",
	7:  "caller_number_type",
	8:  "date_time",
	9:  "download_url",
	10: "duration",
	11: "id",
	12: "status",
	13: "transcription",
}

// Decode decodes GetVoicemailDetailsOK from json.
func (s *GetVoicemailDetailsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetVoicemailDetailsOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "call_id":
			if err := func() error {
				s.CallID.Reset()
				if err := s.CallID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_id\"")
			}
		case "call_log_id":
			if err := func() error {
				s.CallLogID.Reset()
				if err := s.CallLogID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_log_id\"")
			}
		case "callee_name":
			if err := func() error {
				s.CalleeName.Reset()
				if err := s.CalleeName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_name\"")
			}
		case "callee_number":
			if err := func() error {
				s.CalleeNumber.Reset()
				if err := s.CalleeNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_number\"")
			}
		case "callee_number_type":
			if err := func() error {
				s.CalleeNumberType.Reset()
				if err := s.CalleeNumberType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_number_type\"")
			}
		case "caller_name":
			if err := func() error {
				s.CallerName.Reset()
				if err := s.CallerName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_name\"")
			}
		case "caller_number":
			if err := func() error {
				s.CallerNumber.Reset()
				if err := s.CallerNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_number\"")
			}
		case "caller_number_type":
			if err := func() error {
				s.CallerNumberType.Reset()
				if err := s.CallerNumberType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_number_type\"")
			}
		case "date_time":
			if err := func() error {
				s.DateTime.Reset()
				if err := s.DateTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"date_time\"")
			}
		case "download_url":
			if err := func() error {
				s.DownloadURL.Reset()
				if err := s.DownloadURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"download_url\"")
			}
		case "duration":
			if err := func() error {
				s.Duration.Reset()
				if err := s.Duration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"duration\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "transcription":
			if err := func() error {
				s.Transcription.Reset()
				if err := s.Transcription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transcription\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetVoicemailDetailsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetVoicemailDetailsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetVoicemailDetailsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetVoicemailDetailsOKTranscription) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetVoicemailDetailsOKTranscription) encodeFields(e *jx.Encoder) {
	{
		if s.Content.Set {
			e.FieldStart("content")
			s.Content.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.Engine.Set {
			e.FieldStart("engine")
			s.Engine.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetVoicemailDetailsOKTranscription = [3]string{
	0: "content",
	1: "status",
	2: "engine",
}

// Decode decodes GetVoicemailDetailsOKTranscription from json.
func (s *GetVoicemailDetailsOKTranscription) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetVoicemailDetailsOKTranscription to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "content":
			if err := func() error {
				s.Content.Reset()
				if err := s.Content.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "engine":
			if err := func() error {
				s.Engine.Reset()
				if err := s.Engine.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"engine\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetVoicemailDetailsOKTranscription")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetVoicemailDetailsOKTranscription) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetVoicemailDetailsOKTranscription) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetZoomRoomOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetZoomRoomOK) encodeFields(e *jx.Encoder) {
	{
		if s.CallingPlans != nil {
			e.FieldStart("calling_plans")
			e.ArrStart()
			for _, elem := range s.CallingPlans {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.EmergencyAddress.Set {
			e.FieldStart("emergency_address")
			s.EmergencyAddress.Encode(e)
		}
	}
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.PhoneNumbers != nil {
			e.FieldStart("phone_numbers")
			e.ArrStart()
			for _, elem := range s.PhoneNumbers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Policy.Set {
			e.FieldStart("policy")
			s.Policy.Encode(e)
		}
	}
	{
		if s.Site.Set {
			e.FieldStart("site")
			s.Site.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetZoomRoomOK = [9]string{
	0: "calling_plans",
	1: "emergency_address",
	2: "extension_id",
	3: "extension_number",
	4: "id",
	5: "name",
	6: "phone_numbers",
	7: "policy",
	8: "site",
}

// Decode decodes GetZoomRoomOK from json.
func (s *GetZoomRoomOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetZoomRoomOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "calling_plans":
			if err := func() error {
				s.CallingPlans = make([]GetZoomRoomOKCallingPlansItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetZoomRoomOKCallingPlansItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CallingPlans = append(s.CallingPlans, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"calling_plans\"")
			}
		case "emergency_address":
			if err := func() error {
				s.EmergencyAddress.Reset()
				if err := s.EmergencyAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"emergency_address\"")
			}
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "phone_numbers":
			if err := func() error {
				s.PhoneNumbers = make([]GetZoomRoomOKPhoneNumbersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetZoomRoomOKPhoneNumbersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.PhoneNumbers = append(s.PhoneNumbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_numbers\"")
			}
		case "policy":
			if err := func() error {
				s.Policy.Reset()
				if err := s.Policy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"policy\"")
			}
		case "site":
			if err := func() error {
				s.Site.Reset()
				if err := s.Site.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetZoomRoomOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetZoomRoomOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetZoomRoomOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetZoomRoomOKCallingPlansItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetZoomRoomOKCallingPlansItem) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.BillingAccountID.Set {
			e.FieldStart("billing_account_id")
			s.BillingAccountID.Encode(e)
		}
	}
	{
		if s.BillingAccountName.Set {
			e.FieldStart("billing_account_name")
			s.BillingAccountName.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetZoomRoomOKCallingPlansItem = [4]string{
	0: "name",
	1: "type",
	2: "billing_account_id",
	3: "billing_account_name",
}

// Decode decodes GetZoomRoomOKCallingPlansItem from json.
func (s *GetZoomRoomOKCallingPlansItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetZoomRoomOKCallingPlansItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "billing_account_id":
			if err := func() error {
				s.BillingAccountID.Reset()
				if err := s.BillingAccountID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"billing_account_id\"")
			}
		case "billing_account_name":
			if err := func() error {
				s.BillingAccountName.Reset()
				if err := s.BillingAccountName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"billing_account_name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetZoomRoomOKCallingPlansItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetZoomRoomOKCallingPlansItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetZoomRoomOKCallingPlansItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetZoomRoomOKEmergencyAddress) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetZoomRoomOKEmergencyAddress) encodeFields(e *jx.Encoder) {
	{
		if s.AddressLine1.Set {
			e.FieldStart("address_line1")
			s.AddressLine1.Encode(e)
		}
	}
	{
		if s.AddressLine2.Set {
			e.FieldStart("address_line2")
			s.AddressLine2.Encode(e)
		}
	}
	{
		if s.City.Set {
			e.FieldStart("city")
			s.City.Encode(e)
		}
	}
	{
		if s.Country.Set {
			e.FieldStart("country")
			s.Country.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.StateCode.Set {
			e.FieldStart("state_code")
			s.StateCode.Encode(e)
		}
	}
	{
		if s.Zip.Set {
			e.FieldStart("zip")
			s.Zip.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetZoomRoomOKEmergencyAddress = [7]string{
	0: "address_line1",
	1: "address_line2",
	2: "city",
	3: "country",
	4: "id",
	5: "state_code",
	6: "zip",
}

// Decode decodes GetZoomRoomOKEmergencyAddress from json.
func (s *GetZoomRoomOKEmergencyAddress) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetZoomRoomOKEmergencyAddress to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "address_line1":
			if err := func() error {
				s.AddressLine1.Reset()
				if err := s.AddressLine1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"address_line1\"")
			}
		case "address_line2":
			if err := func() error {
				s.AddressLine2.Reset()
				if err := s.AddressLine2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"address_line2\"")
			}
		case "city":
			if err := func() error {
				s.City.Reset()
				if err := s.City.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"city\"")
			}
		case "country":
			if err := func() error {
				s.Country.Reset()
				if err := s.Country.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "state_code":
			if err := func() error {
				s.StateCode.Reset()
				if err := s.StateCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"state_code\"")
			}
		case "zip":
			if err := func() error {
				s.Zip.Reset()
				if err := s.Zip.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zip\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetZoomRoomOKEmergencyAddress")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetZoomRoomOKEmergencyAddress) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetZoomRoomOKEmergencyAddress) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetZoomRoomOKPhoneNumbersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetZoomRoomOKPhoneNumbersItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Number.Set {
			e.FieldStart("number")
			s.Number.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetZoomRoomOKPhoneNumbersItem = [2]string{
	0: "id",
	1: "number",
}

// Decode decodes GetZoomRoomOKPhoneNumbersItem from json.
func (s *GetZoomRoomOKPhoneNumbersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetZoomRoomOKPhoneNumbersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "number":
			if err := func() error {
				s.Number.Reset()
				if err := s.Number.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetZoomRoomOKPhoneNumbersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetZoomRoomOKPhoneNumbersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetZoomRoomOKPhoneNumbersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetZoomRoomOKPolicy) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetZoomRoomOKPolicy) encodeFields(e *jx.Encoder) {
	{
		if s.InternationalCalling.Set {
			e.FieldStart("international_calling")
			s.InternationalCalling.Encode(e)
		}
	}
	{
		if s.SelectOutboundCallerID.Set {
			e.FieldStart("select_outbound_caller_id")
			s.SelectOutboundCallerID.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetZoomRoomOKPolicy = [2]string{
	0: "international_calling",
	1: "select_outbound_caller_id",
}

// Decode decodes GetZoomRoomOKPolicy from json.
func (s *GetZoomRoomOKPolicy) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetZoomRoomOKPolicy to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "international_calling":
			if err := func() error {
				s.InternationalCalling.Reset()
				if err := s.InternationalCalling.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"international_calling\"")
			}
		case "select_outbound_caller_id":
			if err := func() error {
				s.SelectOutboundCallerID.Reset()
				if err := s.SelectOutboundCallerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"select_outbound_caller_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetZoomRoomOKPolicy")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetZoomRoomOKPolicy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetZoomRoomOKPolicy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetZoomRoomOKPolicyInternationalCalling) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetZoomRoomOKPolicyInternationalCalling) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetZoomRoomOKPolicyInternationalCalling = [2]string{
	0: "enable",
	1: "locked_by",
}

// Decode decodes GetZoomRoomOKPolicyInternationalCalling from json.
func (s *GetZoomRoomOKPolicyInternationalCalling) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetZoomRoomOKPolicyInternationalCalling to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetZoomRoomOKPolicyInternationalCalling")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetZoomRoomOKPolicyInternationalCalling) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetZoomRoomOKPolicyInternationalCalling) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetZoomRoomOKPolicySelectOutboundCallerID) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetZoomRoomOKPolicySelectOutboundCallerID) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetZoomRoomOKPolicySelectOutboundCallerID = [2]string{
	0: "enable",
	1: "locked_by",
}

// Decode decodes GetZoomRoomOKPolicySelectOutboundCallerID from json.
func (s *GetZoomRoomOKPolicySelectOutboundCallerID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetZoomRoomOKPolicySelectOutboundCallerID to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetZoomRoomOKPolicySelectOutboundCallerID")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetZoomRoomOKPolicySelectOutboundCallerID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetZoomRoomOKPolicySelectOutboundCallerID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetZoomRoomOKSite) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetZoomRoomOKSite) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetZoomRoomOKSite = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes GetZoomRoomOKSite from json.
func (s *GetZoomRoomOKSite) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetZoomRoomOKSite to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetZoomRoomOKSite")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetZoomRoomOKSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetZoomRoomOKSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListAccountLevelInboundBlockRulesOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListAccountLevelInboundBlockRulesOK) encodeFields(e *jx.Encoder) {
	{
		if s.AccountBlockedRules != nil {
			e.FieldStart("account_blocked_rules")
			e.ArrStart()
			for _, elem := range s.AccountBlockedRules {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
}

var jsonFieldsNameOfListAccountLevelInboundBlockRulesOK = [3]string{
	0: "account_blocked_rules",
	1: "next_page_token",
	2: "page_size",
}

// Decode decodes ListAccountLevelInboundBlockRulesOK from json.
func (s *ListAccountLevelInboundBlockRulesOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListAccountLevelInboundBlockRulesOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "account_blocked_rules":
			if err := func() error {
				s.AccountBlockedRules = make([]ListAccountLevelInboundBlockRulesOKAccountBlockedRulesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListAccountLevelInboundBlockRulesOKAccountBlockedRulesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.AccountBlockedRules = append(s.AccountBlockedRules, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_blocked_rules\"")
			}
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListAccountLevelInboundBlockRulesOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListAccountLevelInboundBlockRulesOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListAccountLevelInboundBlockRulesOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListAccountLevelInboundBlockRulesOKAccountBlockedRulesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListAccountLevelInboundBlockRulesOKAccountBlockedRulesItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.MatchType.Set {
			e.FieldStart("match_type")
			s.MatchType.Encode(e)
		}
	}
	{
		if s.PhoneNumber.Set {
			e.FieldStart("phone_number")
			s.PhoneNumber.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.Comment.Set {
			e.FieldStart("comment")
			s.Comment.Encode(e)
		}
	}
	{
		if s.BlockedNumber.Set {
			e.FieldStart("blocked_number")
			s.BlockedNumber.Encode(e)
		}
	}
	{
		if s.Country.Set {
			e.FieldStart("country")
			s.Country.Encode(e)
		}
	}
}

var jsonFieldsNameOfListAccountLevelInboundBlockRulesOKAccountBlockedRulesItem = [8]string{
	0: "id",
	1: "match_type",
	2: "phone_number",
	3: "type",
	4: "status",
	5: "comment",
	6: "blocked_number",
	7: "country",
}

// Decode decodes ListAccountLevelInboundBlockRulesOKAccountBlockedRulesItem from json.
func (s *ListAccountLevelInboundBlockRulesOKAccountBlockedRulesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListAccountLevelInboundBlockRulesOKAccountBlockedRulesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "match_type":
			if err := func() error {
				s.MatchType.Reset()
				if err := s.MatchType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"match_type\"")
			}
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "comment":
			if err := func() error {
				s.Comment.Reset()
				if err := s.Comment.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"comment\"")
			}
		case "blocked_number":
			if err := func() error {
				s.BlockedNumber.Reset()
				if err := s.BlockedNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"blocked_number\"")
			}
		case "country":
			if err := func() error {
				s.Country.Reset()
				if err := s.Country.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListAccountLevelInboundBlockRulesOKAccountBlockedRulesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListAccountLevelInboundBlockRulesOKAccountBlockedRulesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListAccountLevelInboundBlockRulesOKAccountBlockedRulesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListAccountLevelInboundBlockedStatisticsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListAccountLevelInboundBlockedStatisticsOK) encodeFields(e *jx.Encoder) {
	{
		if s.BlockedStatistic != nil {
			e.FieldStart("blocked_statistic")
			e.ArrStart()
			for _, elem := range s.BlockedStatistic {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
}

var jsonFieldsNameOfListAccountLevelInboundBlockedStatisticsOK = [3]string{
	0: "blocked_statistic",
	1: "next_page_token",
	2: "page_size",
}

// Decode decodes ListAccountLevelInboundBlockedStatisticsOK from json.
func (s *ListAccountLevelInboundBlockedStatisticsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListAccountLevelInboundBlockedStatisticsOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "blocked_statistic":
			if err := func() error {
				s.BlockedStatistic = make([]ListAccountLevelInboundBlockedStatisticsOKBlockedStatisticItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListAccountLevelInboundBlockedStatisticsOKBlockedStatisticItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.BlockedStatistic = append(s.BlockedStatistic, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"blocked_statistic\"")
			}
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListAccountLevelInboundBlockedStatisticsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListAccountLevelInboundBlockedStatisticsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListAccountLevelInboundBlockedStatisticsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListAccountLevelInboundBlockedStatisticsOKBlockedStatisticItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListAccountLevelInboundBlockedStatisticsOKBlockedStatisticItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.MatchType.Set {
			e.FieldStart("match_type")
			s.MatchType.Encode(e)
		}
	}
	{
		if s.PhoneNumber.Set {
			e.FieldStart("phone_number")
			s.PhoneNumber.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.BlockCount.Set {
			e.FieldStart("block_count")
			s.BlockCount.Encode(e)
		}
	}
	{
		if s.ThreatCount.Set {
			e.FieldStart("threat_count")
			s.ThreatCount.Encode(e)
		}
	}
	{
		if s.BlockedNumber.Set {
			e.FieldStart("blocked_number")
			s.BlockedNumber.Encode(e)
		}
	}
	{
		if s.Country.Set {
			e.FieldStart("country")
			s.Country.Encode(e)
		}
	}
}

var jsonFieldsNameOfListAccountLevelInboundBlockedStatisticsOKBlockedStatisticItem = [8]string{
	0: "id",
	1: "match_type",
	2: "phone_number",
	3: "type",
	4: "block_count",
	5: "threat_count",
	6: "blocked_number",
	7: "country",
}

// Decode decodes ListAccountLevelInboundBlockedStatisticsOKBlockedStatisticItem from json.
func (s *ListAccountLevelInboundBlockedStatisticsOKBlockedStatisticItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListAccountLevelInboundBlockedStatisticsOKBlockedStatisticItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "match_type":
			if err := func() error {
				s.MatchType.Reset()
				if err := s.MatchType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"match_type\"")
			}
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "block_count":
			if err := func() error {
				s.BlockCount.Reset()
				if err := s.BlockCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"block_count\"")
			}
		case "threat_count":
			if err := func() error {
				s.ThreatCount.Reset()
				if err := s.ThreatCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"threat_count\"")
			}
		case "blocked_number":
			if err := func() error {
				s.BlockedNumber.Reset()
				if err := s.BlockedNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"blocked_number\"")
			}
		case "country":
			if err := func() error {
				s.Country.Reset()
				if err := s.Country.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListAccountLevelInboundBlockedStatisticsOKBlockedStatisticItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListAccountLevelInboundBlockedStatisticsOKBlockedStatisticItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListAccountLevelInboundBlockedStatisticsOKBlockedStatisticItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListAccountOutboundCallingExceptionRuleOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListAccountOutboundCallingExceptionRuleOK) encodeFields(e *jx.Encoder) {
	{
		if s.ExceptionRules != nil {
			e.FieldStart("exception_rules")
			e.ArrStart()
			for _, elem := range s.ExceptionRules {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
}

var jsonFieldsNameOfListAccountOutboundCallingExceptionRuleOK = [3]string{
	0: "exception_rules",
	1: "next_page_token",
	2: "page_size",
}

// Decode decodes ListAccountOutboundCallingExceptionRuleOK from json.
func (s *ListAccountOutboundCallingExceptionRuleOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListAccountOutboundCallingExceptionRuleOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "exception_rules":
			if err := func() error {
				s.ExceptionRules = make([]ListAccountOutboundCallingExceptionRuleOKExceptionRulesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListAccountOutboundCallingExceptionRuleOKExceptionRulesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.ExceptionRules = append(s.ExceptionRules, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exception_rules\"")
			}
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListAccountOutboundCallingExceptionRuleOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListAccountOutboundCallingExceptionRuleOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListAccountOutboundCallingExceptionRuleOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListAccountOutboundCallingExceptionRuleOKExceptionRulesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListAccountOutboundCallingExceptionRuleOKExceptionRulesItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.MatchType.Set {
			e.FieldStart("match_type")
			s.MatchType.Encode(e)
		}
	}
	{
		if s.PrefixNumber.Set {
			e.FieldStart("prefix_number")
			s.PrefixNumber.Encode(e)
		}
	}
	{
		if s.Rule.Set {
			e.FieldStart("rule")
			s.Rule.Encode(e)
		}
	}
	{
		if s.Comment.Set {
			e.FieldStart("comment")
			s.Comment.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
}

var jsonFieldsNameOfListAccountOutboundCallingExceptionRuleOKExceptionRulesItem = [6]string{
	0: "id",
	1: "match_type",
	2: "prefix_number",
	3: "rule",
	4: "comment",
	5: "status",
}

// Decode decodes ListAccountOutboundCallingExceptionRuleOKExceptionRulesItem from json.
func (s *ListAccountOutboundCallingExceptionRuleOKExceptionRulesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListAccountOutboundCallingExceptionRuleOKExceptionRulesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "match_type":
			if err := func() error {
				s.MatchType.Reset()
				if err := s.MatchType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"match_type\"")
			}
		case "prefix_number":
			if err := func() error {
				s.PrefixNumber.Reset()
				if err := s.PrefixNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"prefix_number\"")
			}
		case "rule":
			if err := func() error {
				s.Rule.Reset()
				if err := s.Rule.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rule\"")
			}
		case "comment":
			if err := func() error {
				s.Comment.Reset()
				if err := s.Comment.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"comment\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListAccountOutboundCallingExceptionRuleOKExceptionRulesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListAccountOutboundCallingExceptionRuleOKExceptionRulesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListAccountOutboundCallingExceptionRuleOKExceptionRulesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListAccountPhoneNumbersOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListAccountPhoneNumbersOK) encodeFields(e *jx.Encoder) {
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
	{
		if s.PhoneNumbers != nil {
			e.FieldStart("phone_numbers")
			e.ArrStart()
			for _, elem := range s.PhoneNumbers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalRecords.Set {
			e.FieldStart("total_records")
			s.TotalRecords.Encode(e)
		}
	}
}

var jsonFieldsNameOfListAccountPhoneNumbersOK = [4]string{
	0: "next_page_token",
	1: "page_size",
	2: "phone_numbers",
	3: "total_records",
}

// Decode decodes ListAccountPhoneNumbersOK from json.
func (s *ListAccountPhoneNumbersOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListAccountPhoneNumbersOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		case "phone_numbers":
			if err := func() error {
				s.PhoneNumbers = make([]ListAccountPhoneNumbersOKPhoneNumbersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListAccountPhoneNumbersOKPhoneNumbersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.PhoneNumbers = append(s.PhoneNumbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_numbers\"")
			}
		case "total_records":
			if err := func() error {
				s.TotalRecords.Reset()
				if err := s.TotalRecords.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_records\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListAccountPhoneNumbersOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListAccountPhoneNumbersOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListAccountPhoneNumbersOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListAccountPhoneNumbersOKPhoneNumbersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListAccountPhoneNumbersOKPhoneNumbersItem) encodeFields(e *jx.Encoder) {
	{
		if s.Assignee.Set {
			e.FieldStart("assignee")
			s.Assignee.Encode(e)
		}
	}
	{
		if s.Capability != nil {
			e.FieldStart("capability")
			e.ArrStart()
			for _, elem := range s.Capability {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Carrier.Set {
			e.FieldStart("carrier")
			s.Carrier.Encode(e)
		}
	}
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.EmergencyAddress.Set {
			e.FieldStart("emergency_address")
			s.EmergencyAddress.Encode(e)
		}
	}
	{
		if s.EmergencyAddressStatus.Set {
			e.FieldStart("emergency_address_status")
			s.EmergencyAddressStatus.Encode(e)
		}
	}
	{
		if s.EmergencyAddressUpdateTime.Set {
			e.FieldStart("emergency_address_update_time")
			s.EmergencyAddressUpdateTime.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Location.Set {
			e.FieldStart("location")
			s.Location.Encode(e)
		}
	}
	{
		if s.Number.Set {
			e.FieldStart("number")
			s.Number.Encode(e)
		}
	}
	{
		if s.NumberType.Set {
			e.FieldStart("number_type")
			s.NumberType.Encode(e)
		}
	}
	{
		if s.SipGroup.Set {
			e.FieldStart("sip_group")
			s.SipGroup.Encode(e)
		}
	}
	{
		if s.Site.Set {
			e.FieldStart("site")
			s.Site.Encode(e)
		}
	}
	{
		if s.Source.Set {
			e.FieldStart("source")
			s.Source.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
}

var jsonFieldsNameOfListAccountPhoneNumbersOKPhoneNumbersItem = [15]string{
	0:  "assignee",
	1:  "capability",
	2:  "carrier",
	3:  "display_name",
	4:  "emergency_address",
	5:  "emergency_address_status",
	6:  "emergency_address_update_time",
	7:  "id",
	8:  "location",
	9:  "number",
	10: "number_type",
	11: "sip_group",
	12: "site",
	13: "source",
	14: "status",
}

// Decode decodes ListAccountPhoneNumbersOKPhoneNumbersItem from json.
func (s *ListAccountPhoneNumbersOKPhoneNumbersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListAccountPhoneNumbersOKPhoneNumbersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "assignee":
			if err := func() error {
				s.Assignee.Reset()
				if err := s.Assignee.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"assignee\"")
			}
		case "capability":
			if err := func() error {
				s.Capability = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Capability = append(s.Capability, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"capability\"")
			}
		case "carrier":
			if err := func() error {
				s.Carrier.Reset()
				if err := s.Carrier.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"carrier\"")
			}
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "emergency_address":
			if err := func() error {
				s.EmergencyAddress.Reset()
				if err := s.EmergencyAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"emergency_address\"")
			}
		case "emergency_address_status":
			if err := func() error {
				s.EmergencyAddressStatus.Reset()
				if err := s.EmergencyAddressStatus.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"emergency_address_status\"")
			}
		case "emergency_address_update_time":
			if err := func() error {
				s.EmergencyAddressUpdateTime.Reset()
				if err := s.EmergencyAddressUpdateTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"emergency_address_update_time\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "location":
			if err := func() error {
				s.Location.Reset()
				if err := s.Location.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"location\"")
			}
		case "number":
			if err := func() error {
				s.Number.Reset()
				if err := s.Number.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "number_type":
			if err := func() error {
				s.NumberType.Reset()
				if err := s.NumberType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number_type\"")
			}
		case "sip_group":
			if err := func() error {
				s.SipGroup.Reset()
				if err := s.SipGroup.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sip_group\"")
			}
		case "site":
			if err := func() error {
				s.Site.Reset()
				if err := s.Site.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site\"")
			}
		case "source":
			if err := func() error {
				s.Source.Reset()
				if err := s.Source.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"source\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListAccountPhoneNumbersOKPhoneNumbersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListAccountPhoneNumbersOKPhoneNumbersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListAccountPhoneNumbersOKPhoneNumbersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListAccountPhoneNumbersOKPhoneNumbersItemAssignee) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListAccountPhoneNumbersOKPhoneNumbersItemAssignee) encodeFields(e *jx.Encoder) {
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfListAccountPhoneNumbersOKPhoneNumbersItemAssignee = [4]string{
	0: "extension_number",
	1: "id",
	2: "name",
	3: "type",
}

// Decode decodes ListAccountPhoneNumbersOKPhoneNumbersItemAssignee from json.
func (s *ListAccountPhoneNumbersOKPhoneNumbersItemAssignee) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListAccountPhoneNumbersOKPhoneNumbersItemAssignee to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListAccountPhoneNumbersOKPhoneNumbersItemAssignee")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListAccountPhoneNumbersOKPhoneNumbersItemAssignee) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListAccountPhoneNumbersOKPhoneNumbersItemAssignee) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListAccountPhoneNumbersOKPhoneNumbersItemCarrier) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListAccountPhoneNumbersOKPhoneNumbersItemCarrier) encodeFields(e *jx.Encoder) {
	{
		if s.Code.Set {
			e.FieldStart("code")
			s.Code.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfListAccountPhoneNumbersOKPhoneNumbersItemCarrier = [2]string{
	0: "code",
	1: "name",
}

// Decode decodes ListAccountPhoneNumbersOKPhoneNumbersItemCarrier from json.
func (s *ListAccountPhoneNumbersOKPhoneNumbersItemCarrier) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListAccountPhoneNumbersOKPhoneNumbersItemCarrier to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "code":
			if err := func() error {
				s.Code.Reset()
				if err := s.Code.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListAccountPhoneNumbersOKPhoneNumbersItemCarrier")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListAccountPhoneNumbersOKPhoneNumbersItemCarrier) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListAccountPhoneNumbersOKPhoneNumbersItemCarrier) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListAccountPhoneNumbersOKPhoneNumbersItemEmergencyAddress) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListAccountPhoneNumbersOKPhoneNumbersItemEmergencyAddress) encodeFields(e *jx.Encoder) {
	{
		if s.AddressLine1.Set {
			e.FieldStart("address_line1")
			s.AddressLine1.Encode(e)
		}
	}
	{
		if s.AddressLine2.Set {
			e.FieldStart("address_line2")
			s.AddressLine2.Encode(e)
		}
	}
	{
		if s.City.Set {
			e.FieldStart("city")
			s.City.Encode(e)
		}
	}
	{
		if s.Country.Set {
			e.FieldStart("country")
			s.Country.Encode(e)
		}
	}
	{
		if s.StateCode.Set {
			e.FieldStart("state_code")
			s.StateCode.Encode(e)
		}
	}
	{
		if s.Zip.Set {
			e.FieldStart("zip")
			s.Zip.Encode(e)
		}
	}
}

var jsonFieldsNameOfListAccountPhoneNumbersOKPhoneNumbersItemEmergencyAddress = [6]string{
	0: "address_line1",
	1: "address_line2",
	2: "city",
	3: "country",
	4: "state_code",
	5: "zip",
}

// Decode decodes ListAccountPhoneNumbersOKPhoneNumbersItemEmergencyAddress from json.
func (s *ListAccountPhoneNumbersOKPhoneNumbersItemEmergencyAddress) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListAccountPhoneNumbersOKPhoneNumbersItemEmergencyAddress to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "address_line1":
			if err := func() error {
				s.AddressLine1.Reset()
				if err := s.AddressLine1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"address_line1\"")
			}
		case "address_line2":
			if err := func() error {
				s.AddressLine2.Reset()
				if err := s.AddressLine2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"address_line2\"")
			}
		case "city":
			if err := func() error {
				s.City.Reset()
				if err := s.City.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"city\"")
			}
		case "country":
			if err := func() error {
				s.Country.Reset()
				if err := s.Country.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country\"")
			}
		case "state_code":
			if err := func() error {
				s.StateCode.Reset()
				if err := s.StateCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"state_code\"")
			}
		case "zip":
			if err := func() error {
				s.Zip.Reset()
				if err := s.Zip.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zip\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListAccountPhoneNumbersOKPhoneNumbersItemEmergencyAddress")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListAccountPhoneNumbersOKPhoneNumbersItemEmergencyAddress) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListAccountPhoneNumbersOKPhoneNumbersItemEmergencyAddress) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListAccountPhoneNumbersOKPhoneNumbersItemSipGroup) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListAccountPhoneNumbersOKPhoneNumbersItemSipGroup) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
}

var jsonFieldsNameOfListAccountPhoneNumbersOKPhoneNumbersItemSipGroup = [2]string{
	0: "display_name",
	1: "id",
}

// Decode decodes ListAccountPhoneNumbersOKPhoneNumbersItemSipGroup from json.
func (s *ListAccountPhoneNumbersOKPhoneNumbersItemSipGroup) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListAccountPhoneNumbersOKPhoneNumbersItemSipGroup to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListAccountPhoneNumbersOKPhoneNumbersItemSipGroup")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListAccountPhoneNumbersOKPhoneNumbersItemSipGroup) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListAccountPhoneNumbersOKPhoneNumbersItemSipGroup) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListAccountPhoneNumbersOKPhoneNumbersItemSite) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListAccountPhoneNumbersOKPhoneNumbersItemSite) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfListAccountPhoneNumbersOKPhoneNumbersItemSite = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes ListAccountPhoneNumbersOKPhoneNumbersItemSite from json.
func (s *ListAccountPhoneNumbersOKPhoneNumbersItemSite) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListAccountPhoneNumbersOKPhoneNumbersItemSite to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListAccountPhoneNumbersOKPhoneNumbersItemSite")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListAccountPhoneNumbersOKPhoneNumbersItemSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListAccountPhoneNumbersOKPhoneNumbersItemSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListAccountProvisionTemplateOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListAccountProvisionTemplateOK) encodeFields(e *jx.Encoder) {
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
	{
		if s.ProvisionTemplates != nil {
			e.FieldStart("provision_templates")
			e.ArrStart()
			for _, elem := range s.ProvisionTemplates {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalRecords.Set {
			e.FieldStart("total_records")
			s.TotalRecords.Encode(e)
		}
	}
}

var jsonFieldsNameOfListAccountProvisionTemplateOK = [4]string{
	0: "next_page_token",
	1: "page_size",
	2: "provision_templates",
	3: "total_records",
}

// Decode decodes ListAccountProvisionTemplateOK from json.
func (s *ListAccountProvisionTemplateOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListAccountProvisionTemplateOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		case "provision_templates":
			if err := func() error {
				s.ProvisionTemplates = make([]ListAccountProvisionTemplateOKProvisionTemplatesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListAccountProvisionTemplateOKProvisionTemplatesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.ProvisionTemplates = append(s.ProvisionTemplates, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provision_templates\"")
			}
		case "total_records":
			if err := func() error {
				s.TotalRecords.Reset()
				if err := s.TotalRecords.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_records\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListAccountProvisionTemplateOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListAccountProvisionTemplateOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListAccountProvisionTemplateOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListAccountProvisionTemplateOKProvisionTemplatesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListAccountProvisionTemplateOKProvisionTemplatesItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.BoundDeviceCount.Set {
			e.FieldStart("bound_device_count")
			s.BoundDeviceCount.Encode(e)
		}
	}
}

var jsonFieldsNameOfListAccountProvisionTemplateOKProvisionTemplatesItem = [4]string{
	0: "id",
	1: "name",
	2: "description",
	3: "bound_device_count",
}

// Decode decodes ListAccountProvisionTemplateOKProvisionTemplatesItem from json.
func (s *ListAccountProvisionTemplateOKProvisionTemplatesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListAccountProvisionTemplateOKProvisionTemplatesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "bound_device_count":
			if err := func() error {
				s.BoundDeviceCount.Reset()
				if err := s.BoundDeviceCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bound_device_count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListAccountProvisionTemplateOKProvisionTemplatesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListAccountProvisionTemplateOKProvisionTemplatesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListAccountProvisionTemplateOKProvisionTemplatesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListAccountSMSCampaignsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListAccountSMSCampaignsOK) encodeFields(e *jx.Encoder) {
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
	{
		if s.SMSCampaigns != nil {
			e.FieldStart("sms_campaigns")
			e.ArrStart()
			for _, elem := range s.SMSCampaigns {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalRecords.Set {
			e.FieldStart("total_records")
			s.TotalRecords.Encode(e)
		}
	}
}

var jsonFieldsNameOfListAccountSMSCampaignsOK = [4]string{
	0: "next_page_token",
	1: "page_size",
	2: "sms_campaigns",
	3: "total_records",
}

// Decode decodes ListAccountSMSCampaignsOK from json.
func (s *ListAccountSMSCampaignsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListAccountSMSCampaignsOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		case "sms_campaigns":
			if err := func() error {
				s.SMSCampaigns = make([]ListAccountSMSCampaignsOKSMSCampaignsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListAccountSMSCampaignsOKSMSCampaignsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.SMSCampaigns = append(s.SMSCampaigns, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sms_campaigns\"")
			}
		case "total_records":
			if err := func() error {
				s.TotalRecords.Reset()
				if err := s.TotalRecords.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_records\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListAccountSMSCampaignsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListAccountSMSCampaignsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListAccountSMSCampaignsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListAccountSMSCampaignsOKSMSCampaignsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListAccountSMSCampaignsOKSMSCampaignsItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.Brand.Set {
			e.FieldStart("brand")
			s.Brand.Encode(e)
		}
	}
}

var jsonFieldsNameOfListAccountSMSCampaignsOKSMSCampaignsItem = [4]string{
	0: "id",
	1: "display_name",
	2: "status",
	3: "brand",
}

// Decode decodes ListAccountSMSCampaignsOKSMSCampaignsItem from json.
func (s *ListAccountSMSCampaignsOKSMSCampaignsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListAccountSMSCampaignsOKSMSCampaignsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "brand":
			if err := func() error {
				s.Brand.Reset()
				if err := s.Brand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"brand\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListAccountSMSCampaignsOKSMSCampaignsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListAccountSMSCampaignsOKSMSCampaignsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListAccountSMSCampaignsOKSMSCampaignsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListAccountSMSCampaignsOKSMSCampaignsItemBrand) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListAccountSMSCampaignsOKSMSCampaignsItemBrand) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfListAccountSMSCampaignsOKSMSCampaignsItemBrand = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes ListAccountSMSCampaignsOKSMSCampaignsItemBrand from json.
func (s *ListAccountSMSCampaignsOKSMSCampaignsItemBrand) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListAccountSMSCampaignsOKSMSCampaignsItemBrand to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListAccountSMSCampaignsOKSMSCampaignsItemBrand")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListAccountSMSCampaignsOKSMSCampaignsItemBrand) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListAccountSMSCampaignsOKSMSCampaignsItemBrand) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListActivationCodesOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListActivationCodesOK) encodeFields(e *jx.Encoder) {
	{
		if s.CommonAreasActivationCodes != nil {
			e.FieldStart("common_areas_activation_codes")
			e.ArrStart()
			for _, elem := range s.CommonAreasActivationCodes {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
}

var jsonFieldsNameOfListActivationCodesOK = [3]string{
	0: "common_areas_activation_codes",
	1: "next_page_token",
	2: "page_size",
}

// Decode decodes ListActivationCodesOK from json.
func (s *ListActivationCodesOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListActivationCodesOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "common_areas_activation_codes":
			if err := func() error {
				s.CommonAreasActivationCodes = make([]ListActivationCodesOKCommonAreasActivationCodesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListActivationCodesOKCommonAreasActivationCodesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CommonAreasActivationCodes = append(s.CommonAreasActivationCodes, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"common_areas_activation_codes\"")
			}
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListActivationCodesOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListActivationCodesOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListActivationCodesOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListActivationCodesOKCommonAreasActivationCodesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListActivationCodesOKCommonAreasActivationCodesItem) encodeFields(e *jx.Encoder) {
	{
		if s.CommonAreaID.Set {
			e.FieldStart("common_area_id")
			s.CommonAreaID.Encode(e)
		}
	}
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ActivationCode.Set {
			e.FieldStart("activation_code")
			s.ActivationCode.Encode(e)
		}
	}
	{
		if s.ActivationCodeExpiration.Set {
			e.FieldStart("activation_code_expiration")
			s.ActivationCodeExpiration.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.Site.Set {
			e.FieldStart("site")
			s.Site.Encode(e)
		}
	}
}

var jsonFieldsNameOfListActivationCodesOKCommonAreasActivationCodesItem = [7]string{
	0: "common_area_id",
	1: "display_name",
	2: "extension_number",
	3: "activation_code",
	4: "activation_code_expiration",
	5: "status",
	6: "site",
}

// Decode decodes ListActivationCodesOKCommonAreasActivationCodesItem from json.
func (s *ListActivationCodesOKCommonAreasActivationCodesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListActivationCodesOKCommonAreasActivationCodesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "common_area_id":
			if err := func() error {
				s.CommonAreaID.Reset()
				if err := s.CommonAreaID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"common_area_id\"")
			}
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "activation_code":
			if err := func() error {
				s.ActivationCode.Reset()
				if err := s.ActivationCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"activation_code\"")
			}
		case "activation_code_expiration":
			if err := func() error {
				s.ActivationCodeExpiration.Reset()
				if err := s.ActivationCodeExpiration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"activation_code_expiration\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "site":
			if err := func() error {
				s.Site.Reset()
				if err := s.Site.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListActivationCodesOKCommonAreasActivationCodesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListActivationCodesOKCommonAreasActivationCodesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListActivationCodesOKCommonAreasActivationCodesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListActivationCodesOKCommonAreasActivationCodesItemSite) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListActivationCodesOKCommonAreasActivationCodesItemSite) encodeFields(e *jx.Encoder) {
	{
		if s.SiteID.Set {
			e.FieldStart("site_id")
			s.SiteID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfListActivationCodesOKCommonAreasActivationCodesItemSite = [2]string{
	0: "site_id",
	1: "name",
}

// Decode decodes ListActivationCodesOKCommonAreasActivationCodesItemSite from json.
func (s *ListActivationCodesOKCommonAreasActivationCodesItemSite) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListActivationCodesOKCommonAreasActivationCodesItemSite to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "site_id":
			if err := func() error {
				s.SiteID.Reset()
				if err := s.SiteID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListActivationCodesOKCommonAreasActivationCodesItemSite")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListActivationCodesOKCommonAreasActivationCodesItemSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListActivationCodesOKCommonAreasActivationCodesItemSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListAlertSettingsWithPagingQueryOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListAlertSettingsWithPagingQueryOK) encodeFields(e *jx.Encoder) {
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
	{
		if s.AlertSettings != nil {
			e.FieldStart("alert_settings")
			e.ArrStart()
			for _, elem := range s.AlertSettings {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfListAlertSettingsWithPagingQueryOK = [3]string{
	0: "next_page_token",
	1: "page_size",
	2: "alert_settings",
}

// Decode decodes ListAlertSettingsWithPagingQueryOK from json.
func (s *ListAlertSettingsWithPagingQueryOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListAlertSettingsWithPagingQueryOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		case "alert_settings":
			if err := func() error {
				s.AlertSettings = make([]ListAlertSettingsWithPagingQueryOKAlertSettingsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListAlertSettingsWithPagingQueryOKAlertSettingsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.AlertSettings = append(s.AlertSettings, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"alert_settings\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListAlertSettingsWithPagingQueryOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListAlertSettingsWithPagingQueryOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListAlertSettingsWithPagingQueryOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListAlertSettingsWithPagingQueryOKAlertSettingsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListAlertSettingsWithPagingQueryOKAlertSettingsItem) encodeFields(e *jx.Encoder) {
	{
		if s.AlertSettingID.Set {
			e.FieldStart("alert_setting_id")
			s.AlertSettingID.Encode(e)
		}
	}
	{
		if s.AlertSettingName.Set {
			e.FieldStart("alert_setting_name")
			s.AlertSettingName.Encode(e)
		}
	}
	{
		if s.Module.Set {
			e.FieldStart("module")
			s.Module.Encode(e)
		}
	}
	{
		if s.Rule.Set {
			e.FieldStart("rule")
			s.Rule.Encode(e)
		}
	}
	{
		if s.RuleConditions != nil {
			e.FieldStart("rule_conditions")
			e.ArrStart()
			for _, elem := range s.RuleConditions {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Targets != nil {
			e.FieldStart("targets")
			e.ArrStart()
			for _, elem := range s.Targets {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TimeFrameType.Set {
			e.FieldStart("time_frame_type")
			s.TimeFrameType.Encode(e)
		}
	}
	{
		if s.TimeFrameFrom.Set {
			e.FieldStart("time_frame_from")
			s.TimeFrameFrom.Encode(e)
		}
	}
	{
		if s.TimeFrameTo.Set {
			e.FieldStart("time_frame_to")
			s.TimeFrameTo.Encode(e)
		}
	}
	{
		if s.Frequency.Set {
			e.FieldStart("frequency")
			s.Frequency.Encode(e)
		}
	}
	{
		if s.EmailRecipients != nil {
			e.FieldStart("email_recipients")
			e.ArrStart()
			for _, elem := range s.EmailRecipients {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ChatChannels != nil {
			e.FieldStart("chat_channels")
			e.ArrStart()
			for _, elem := range s.ChatChannels {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
}

var jsonFieldsNameOfListAlertSettingsWithPagingQueryOKAlertSettingsItem = [13]string{
	0:  "alert_setting_id",
	1:  "alert_setting_name",
	2:  "module",
	3:  "rule",
	4:  "rule_conditions",
	5:  "targets",
	6:  "time_frame_type",
	7:  "time_frame_from",
	8:  "time_frame_to",
	9:  "frequency",
	10: "email_recipients",
	11: "chat_channels",
	12: "status",
}

// Decode decodes ListAlertSettingsWithPagingQueryOKAlertSettingsItem from json.
func (s *ListAlertSettingsWithPagingQueryOKAlertSettingsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListAlertSettingsWithPagingQueryOKAlertSettingsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "alert_setting_id":
			if err := func() error {
				s.AlertSettingID.Reset()
				if err := s.AlertSettingID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"alert_setting_id\"")
			}
		case "alert_setting_name":
			if err := func() error {
				s.AlertSettingName.Reset()
				if err := s.AlertSettingName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"alert_setting_name\"")
			}
		case "module":
			if err := func() error {
				s.Module.Reset()
				if err := s.Module.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"module\"")
			}
		case "rule":
			if err := func() error {
				s.Rule.Reset()
				if err := s.Rule.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rule\"")
			}
		case "rule_conditions":
			if err := func() error {
				s.RuleConditions = make([]ListAlertSettingsWithPagingQueryOKAlertSettingsItemRuleConditionsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListAlertSettingsWithPagingQueryOKAlertSettingsItemRuleConditionsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.RuleConditions = append(s.RuleConditions, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rule_conditions\"")
			}
		case "targets":
			if err := func() error {
				s.Targets = make([]ListAlertSettingsWithPagingQueryOKAlertSettingsItemTargetsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListAlertSettingsWithPagingQueryOKAlertSettingsItemTargetsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Targets = append(s.Targets, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"targets\"")
			}
		case "time_frame_type":
			if err := func() error {
				s.TimeFrameType.Reset()
				if err := s.TimeFrameType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"time_frame_type\"")
			}
		case "time_frame_from":
			if err := func() error {
				s.TimeFrameFrom.Reset()
				if err := s.TimeFrameFrom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"time_frame_from\"")
			}
		case "time_frame_to":
			if err := func() error {
				s.TimeFrameTo.Reset()
				if err := s.TimeFrameTo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"time_frame_to\"")
			}
		case "frequency":
			if err := func() error {
				s.Frequency.Reset()
				if err := s.Frequency.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"frequency\"")
			}
		case "email_recipients":
			if err := func() error {
				s.EmailRecipients = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.EmailRecipients = append(s.EmailRecipients, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email_recipients\"")
			}
		case "chat_channels":
			if err := func() error {
				s.ChatChannels = make([]ListAlertSettingsWithPagingQueryOKAlertSettingsItemChatChannelsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListAlertSettingsWithPagingQueryOKAlertSettingsItemChatChannelsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.ChatChannels = append(s.ChatChannels, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"chat_channels\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListAlertSettingsWithPagingQueryOKAlertSettingsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListAlertSettingsWithPagingQueryOKAlertSettingsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListAlertSettingsWithPagingQueryOKAlertSettingsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListAlertSettingsWithPagingQueryOKAlertSettingsItemChatChannelsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListAlertSettingsWithPagingQueryOKAlertSettingsItemChatChannelsItem) encodeFields(e *jx.Encoder) {
	{
		if s.ChatChannelName.Set {
			e.FieldStart("chat_channel_name")
			s.ChatChannelName.Encode(e)
		}
	}
	{
		if s.Token.Set {
			e.FieldStart("token")
			s.Token.Encode(e)
		}
	}
	{
		if s.EndPoint.Set {
			e.FieldStart("end_point")
			s.EndPoint.Encode(e)
		}
	}
}

var jsonFieldsNameOfListAlertSettingsWithPagingQueryOKAlertSettingsItemChatChannelsItem = [3]string{
	0: "chat_channel_name",
	1: "token",
	2: "end_point",
}

// Decode decodes ListAlertSettingsWithPagingQueryOKAlertSettingsItemChatChannelsItem from json.
func (s *ListAlertSettingsWithPagingQueryOKAlertSettingsItemChatChannelsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListAlertSettingsWithPagingQueryOKAlertSettingsItemChatChannelsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "chat_channel_name":
			if err := func() error {
				s.ChatChannelName.Reset()
				if err := s.ChatChannelName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"chat_channel_name\"")
			}
		case "token":
			if err := func() error {
				s.Token.Reset()
				if err := s.Token.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"token\"")
			}
		case "end_point":
			if err := func() error {
				s.EndPoint.Reset()
				if err := s.EndPoint.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"end_point\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListAlertSettingsWithPagingQueryOKAlertSettingsItemChatChannelsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListAlertSettingsWithPagingQueryOKAlertSettingsItemChatChannelsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListAlertSettingsWithPagingQueryOKAlertSettingsItemChatChannelsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListAlertSettingsWithPagingQueryOKAlertSettingsItemRuleConditionsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListAlertSettingsWithPagingQueryOKAlertSettingsItemRuleConditionsItem) encodeFields(e *jx.Encoder) {
	{
		if s.RuleConditionType.Set {
			e.FieldStart("rule_condition_type")
			s.RuleConditionType.Encode(e)
		}
	}
	{
		if s.RuleConditionValue.Set {
			e.FieldStart("rule_condition_value")
			s.RuleConditionValue.Encode(e)
		}
	}
}

var jsonFieldsNameOfListAlertSettingsWithPagingQueryOKAlertSettingsItemRuleConditionsItem = [2]string{
	0: "rule_condition_type",
	1: "rule_condition_value",
}

// Decode decodes ListAlertSettingsWithPagingQueryOKAlertSettingsItemRuleConditionsItem from json.
func (s *ListAlertSettingsWithPagingQueryOKAlertSettingsItemRuleConditionsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListAlertSettingsWithPagingQueryOKAlertSettingsItemRuleConditionsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "rule_condition_type":
			if err := func() error {
				s.RuleConditionType.Reset()
				if err := s.RuleConditionType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rule_condition_type\"")
			}
		case "rule_condition_value":
			if err := func() error {
				s.RuleConditionValue.Reset()
				if err := s.RuleConditionValue.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rule_condition_value\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListAlertSettingsWithPagingQueryOKAlertSettingsItemRuleConditionsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListAlertSettingsWithPagingQueryOKAlertSettingsItemRuleConditionsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListAlertSettingsWithPagingQueryOKAlertSettingsItemRuleConditionsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListAlertSettingsWithPagingQueryOKAlertSettingsItemTargetsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListAlertSettingsWithPagingQueryOKAlertSettingsItemTargetsItem) encodeFields(e *jx.Encoder) {
	{
		if s.TargetName.Set {
			e.FieldStart("target_name")
			s.TargetName.Encode(e)
		}
	}
}

var jsonFieldsNameOfListAlertSettingsWithPagingQueryOKAlertSettingsItemTargetsItem = [1]string{
	0: "target_name",
}

// Decode decodes ListAlertSettingsWithPagingQueryOKAlertSettingsItemTargetsItem from json.
func (s *ListAlertSettingsWithPagingQueryOKAlertSettingsItemTargetsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListAlertSettingsWithPagingQueryOKAlertSettingsItemTargetsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "target_name":
			if err := func() error {
				s.TargetName.Reset()
				if err := s.TargetName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"target_name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListAlertSettingsWithPagingQueryOKAlertSettingsItemTargetsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListAlertSettingsWithPagingQueryOKAlertSettingsItemTargetsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListAlertSettingsWithPagingQueryOKAlertSettingsItemTargetsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListAudioItemsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListAudioItemsOK) encodeFields(e *jx.Encoder) {
	{
		if s.Audios != nil {
			e.FieldStart("audios")
			e.ArrStart()
			for _, elem := range s.Audios {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfListAudioItemsOK = [1]string{
	0: "audios",
}

// Decode decodes ListAudioItemsOK from json.
func (s *ListAudioItemsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListAudioItemsOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audios":
			if err := func() error {
				s.Audios = make([]ListAudioItemsOKAudiosItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListAudioItemsOKAudiosItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Audios = append(s.Audios, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audios\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListAudioItemsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListAudioItemsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListAudioItemsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListAudioItemsOKAudiosItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListAudioItemsOKAudiosItem) encodeFields(e *jx.Encoder) {
	{
		if s.AudioID.Set {
			e.FieldStart("audio_id")
			s.AudioID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfListAudioItemsOKAudiosItem = [2]string{
	0: "audio_id",
	1: "name",
}

// Decode decodes ListAudioItemsOKAudiosItem from json.
func (s *ListAudioItemsOKAudiosItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListAudioItemsOKAudiosItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_id":
			if err := func() error {
				s.AudioID.Reset()
				if err := s.AudioID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListAudioItemsOKAudiosItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListAudioItemsOKAudiosItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListAudioItemsOKAudiosItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListAutoReceptionistsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListAutoReceptionistsOK) encodeFields(e *jx.Encoder) {
	{
		if s.AutoReceptionists != nil {
			e.FieldStart("auto_receptionists")
			e.ArrStart()
			for _, elem := range s.AutoReceptionists {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
	{
		if s.TotalRecords.Set {
			e.FieldStart("total_records")
			s.TotalRecords.Encode(e)
		}
	}
}

var jsonFieldsNameOfListAutoReceptionistsOK = [4]string{
	0: "auto_receptionists",
	1: "next_page_token",
	2: "page_size",
	3: "total_records",
}

// Decode decodes ListAutoReceptionistsOK from json.
func (s *ListAutoReceptionistsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListAutoReceptionistsOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "auto_receptionists":
			if err := func() error {
				s.AutoReceptionists = make([]ListAutoReceptionistsOKAutoReceptionistsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListAutoReceptionistsOKAutoReceptionistsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.AutoReceptionists = append(s.AutoReceptionists, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_receptionists\"")
			}
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		case "total_records":
			if err := func() error {
				s.TotalRecords.Reset()
				if err := s.TotalRecords.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_records\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListAutoReceptionistsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListAutoReceptionistsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListAutoReceptionistsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListAutoReceptionistsOKAutoReceptionistsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListAutoReceptionistsOKAutoReceptionistsItem) encodeFields(e *jx.Encoder) {
	{
		if s.CostCenter.Set {
			e.FieldStart("cost_center")
			s.CostCenter.Encode(e)
		}
	}
	{
		if s.Department.Set {
			e.FieldStart("department")
			s.Department.Encode(e)
		}
	}
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Timezone.Set {
			e.FieldStart("timezone")
			s.Timezone.Encode(e)
		}
	}
	{
		if s.AudioPromptLanguage.Set {
			e.FieldStart("audio_prompt_language")
			s.AudioPromptLanguage.Encode(e)
		}
	}
	{
		if s.HolidayHours != nil {
			e.FieldStart("holiday_hours")
			e.ArrStart()
			for _, elem := range s.HolidayHours {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.PhoneNumbers != nil {
			e.FieldStart("phone_numbers")
			e.ArrStart()
			for _, elem := range s.PhoneNumbers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Site.Set {
			e.FieldStart("site")
			s.Site.Encode(e)
		}
	}
}

var jsonFieldsNameOfListAutoReceptionistsOKAutoReceptionistsItem = [11]string{
	0:  "cost_center",
	1:  "department",
	2:  "extension_id",
	3:  "extension_number",
	4:  "id",
	5:  "name",
	6:  "timezone",
	7:  "audio_prompt_language",
	8:  "holiday_hours",
	9:  "phone_numbers",
	10: "site",
}

// Decode decodes ListAutoReceptionistsOKAutoReceptionistsItem from json.
func (s *ListAutoReceptionistsOKAutoReceptionistsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListAutoReceptionistsOKAutoReceptionistsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "cost_center":
			if err := func() error {
				s.CostCenter.Reset()
				if err := s.CostCenter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cost_center\"")
			}
		case "department":
			if err := func() error {
				s.Department.Reset()
				if err := s.Department.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"department\"")
			}
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "timezone":
			if err := func() error {
				s.Timezone.Reset()
				if err := s.Timezone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"timezone\"")
			}
		case "audio_prompt_language":
			if err := func() error {
				s.AudioPromptLanguage.Reset()
				if err := s.AudioPromptLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_prompt_language\"")
			}
		case "holiday_hours":
			if err := func() error {
				s.HolidayHours = make([]ListAutoReceptionistsOKAutoReceptionistsItemHolidayHoursItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListAutoReceptionistsOKAutoReceptionistsItemHolidayHoursItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.HolidayHours = append(s.HolidayHours, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holiday_hours\"")
			}
		case "phone_numbers":
			if err := func() error {
				s.PhoneNumbers = make([]ListAutoReceptionistsOKAutoReceptionistsItemPhoneNumbersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListAutoReceptionistsOKAutoReceptionistsItemPhoneNumbersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.PhoneNumbers = append(s.PhoneNumbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_numbers\"")
			}
		case "site":
			if err := func() error {
				s.Site.Reset()
				if err := s.Site.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListAutoReceptionistsOKAutoReceptionistsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListAutoReceptionistsOKAutoReceptionistsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListAutoReceptionistsOKAutoReceptionistsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListAutoReceptionistsOKAutoReceptionistsItemHolidayHoursItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListAutoReceptionistsOKAutoReceptionistsItemHolidayHoursItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.From.Set {
			e.FieldStart("from")
			s.From.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.To.Set {
			e.FieldStart("to")
			s.To.Encode(e, json.EncodeDateTime)
		}
	}
}

var jsonFieldsNameOfListAutoReceptionistsOKAutoReceptionistsItemHolidayHoursItem = [4]string{
	0: "id",
	1: "name",
	2: "from",
	3: "to",
}

// Decode decodes ListAutoReceptionistsOKAutoReceptionistsItemHolidayHoursItem from json.
func (s *ListAutoReceptionistsOKAutoReceptionistsItemHolidayHoursItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListAutoReceptionistsOKAutoReceptionistsItemHolidayHoursItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "from":
			if err := func() error {
				s.From.Reset()
				if err := s.From.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"from\"")
			}
		case "to":
			if err := func() error {
				s.To.Reset()
				if err := s.To.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"to\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListAutoReceptionistsOKAutoReceptionistsItemHolidayHoursItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListAutoReceptionistsOKAutoReceptionistsItemHolidayHoursItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListAutoReceptionistsOKAutoReceptionistsItemHolidayHoursItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListAutoReceptionistsOKAutoReceptionistsItemPhoneNumbersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListAutoReceptionistsOKAutoReceptionistsItemPhoneNumbersItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Number.Set {
			e.FieldStart("number")
			s.Number.Encode(e)
		}
	}
}

var jsonFieldsNameOfListAutoReceptionistsOKAutoReceptionistsItemPhoneNumbersItem = [2]string{
	0: "id",
	1: "number",
}

// Decode decodes ListAutoReceptionistsOKAutoReceptionistsItemPhoneNumbersItem from json.
func (s *ListAutoReceptionistsOKAutoReceptionistsItemPhoneNumbersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListAutoReceptionistsOKAutoReceptionistsItemPhoneNumbersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "number":
			if err := func() error {
				s.Number.Reset()
				if err := s.Number.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListAutoReceptionistsOKAutoReceptionistsItemPhoneNumbersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListAutoReceptionistsOKAutoReceptionistsItemPhoneNumbersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListAutoReceptionistsOKAutoReceptionistsItemPhoneNumbersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListAutoReceptionistsOKAutoReceptionistsItemSite) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListAutoReceptionistsOKAutoReceptionistsItemSite) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfListAutoReceptionistsOKAutoReceptionistsItemSite = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes ListAutoReceptionistsOKAutoReceptionistsItemSite from json.
func (s *ListAutoReceptionistsOKAutoReceptionistsItemSite) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListAutoReceptionistsOKAutoReceptionistsItemSite to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListAutoReceptionistsOKAutoReceptionistsItemSite")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListAutoReceptionistsOKAutoReceptionistsItemSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListAutoReceptionistsOKAutoReceptionistsItemSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListBYOCSIPTrunkOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListBYOCSIPTrunkOK) encodeFields(e *jx.Encoder) {
	{
		if s.ByocSipTrunk != nil {
			e.FieldStart("byoc_sip_trunk")
			e.ArrStart()
			for _, elem := range s.ByocSipTrunk {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
}

var jsonFieldsNameOfListBYOCSIPTrunkOK = [3]string{
	0: "byoc_sip_trunk",
	1: "next_page_token",
	2: "page_size",
}

// Decode decodes ListBYOCSIPTrunkOK from json.
func (s *ListBYOCSIPTrunkOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListBYOCSIPTrunkOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "byoc_sip_trunk":
			if err := func() error {
				s.ByocSipTrunk = make([]ListBYOCSIPTrunkOKByocSipTrunkItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListBYOCSIPTrunkOKByocSipTrunkItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.ByocSipTrunk = append(s.ByocSipTrunk, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"byoc_sip_trunk\"")
			}
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListBYOCSIPTrunkOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListBYOCSIPTrunkOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListBYOCSIPTrunkOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListBYOCSIPTrunkOKByocSipTrunkItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListBYOCSIPTrunkOKByocSipTrunkItem) encodeFields(e *jx.Encoder) {
	{
		if s.Carrier.Set {
			e.FieldStart("carrier")
			s.Carrier.Encode(e)
		}
	}
	{
		if s.CarrierAccount.Set {
			e.FieldStart("carrier_account")
			s.CarrierAccount.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Region.Set {
			e.FieldStart("region")
			s.Region.Encode(e)
		}
	}
	{
		if s.SbcLabel.Set {
			e.FieldStart("sbc_label")
			s.SbcLabel.Encode(e)
		}
	}
}

var jsonFieldsNameOfListBYOCSIPTrunkOKByocSipTrunkItem = [6]string{
	0: "carrier",
	1: "carrier_account",
	2: "id",
	3: "name",
	4: "region",
	5: "sbc_label",
}

// Decode decodes ListBYOCSIPTrunkOKByocSipTrunkItem from json.
func (s *ListBYOCSIPTrunkOKByocSipTrunkItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListBYOCSIPTrunkOKByocSipTrunkItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "carrier":
			if err := func() error {
				s.Carrier.Reset()
				if err := s.Carrier.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"carrier\"")
			}
		case "carrier_account":
			if err := func() error {
				s.CarrierAccount.Reset()
				if err := s.CarrierAccount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"carrier_account\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "region":
			if err := func() error {
				s.Region.Reset()
				if err := s.Region.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"region\"")
			}
		case "sbc_label":
			if err := func() error {
				s.SbcLabel.Reset()
				if err := s.SbcLabel.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sbc_label\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListBYOCSIPTrunkOKByocSipTrunkItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListBYOCSIPTrunkOKByocSipTrunkItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListBYOCSIPTrunkOKByocSipTrunkItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListBillingAccountOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListBillingAccountOK) encodeFields(e *jx.Encoder) {
	{
		if s.BillingAccounts != nil {
			e.FieldStart("billing_accounts")
			e.ArrStart()
			for _, elem := range s.BillingAccounts {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfListBillingAccountOK = [1]string{
	0: "billing_accounts",
}

// Decode decodes ListBillingAccountOK from json.
func (s *ListBillingAccountOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListBillingAccountOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "billing_accounts":
			if err := func() error {
				s.BillingAccounts = make([]ListBillingAccountOKBillingAccountsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListBillingAccountOKBillingAccountsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.BillingAccounts = append(s.BillingAccounts, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"billing_accounts\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListBillingAccountOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListBillingAccountOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListBillingAccountOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListBillingAccountOKBillingAccountsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListBillingAccountOKBillingAccountsItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfListBillingAccountOKBillingAccountsItem = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes ListBillingAccountOKBillingAccountsItem from json.
func (s *ListBillingAccountOKBillingAccountsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListBillingAccountOKBillingAccountsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListBillingAccountOKBillingAccountsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListBillingAccountOKBillingAccountsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListBillingAccountOKBillingAccountsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListBlockedListOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListBlockedListOK) encodeFields(e *jx.Encoder) {
	{
		if s.BlockedList != nil {
			e.FieldStart("blocked_list")
			e.ArrStart()
			for _, elem := range s.BlockedList {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
	{
		if s.TotalRecords.Set {
			e.FieldStart("total_records")
			s.TotalRecords.Encode(e)
		}
	}
}

var jsonFieldsNameOfListBlockedListOK = [4]string{
	0: "blocked_list",
	1: "next_page_token",
	2: "page_size",
	3: "total_records",
}

// Decode decodes ListBlockedListOK from json.
func (s *ListBlockedListOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListBlockedListOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "blocked_list":
			if err := func() error {
				s.BlockedList = make([]ListBlockedListOKBlockedListItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListBlockedListOKBlockedListItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.BlockedList = append(s.BlockedList, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"blocked_list\"")
			}
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		case "total_records":
			if err := func() error {
				s.TotalRecords.Reset()
				if err := s.TotalRecords.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_records\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListBlockedListOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListBlockedListOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListBlockedListOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListBlockedListOKBlockedListItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListBlockedListOKBlockedListItem) encodeFields(e *jx.Encoder) {
	{
		if s.BlockType.Set {
			e.FieldStart("block_type")
			s.BlockType.Encode(e)
		}
	}
	{
		if s.Comment.Set {
			e.FieldStart("comment")
			s.Comment.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.MatchType.Set {
			e.FieldStart("match_type")
			s.MatchType.Encode(e)
		}
	}
	{
		if s.PhoneNumber.Set {
			e.FieldStart("phone_number")
			s.PhoneNumber.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
}

var jsonFieldsNameOfListBlockedListOKBlockedListItem = [6]string{
	0: "block_type",
	1: "comment",
	2: "id",
	3: "match_type",
	4: "phone_number",
	5: "status",
}

// Decode decodes ListBlockedListOKBlockedListItem from json.
func (s *ListBlockedListOKBlockedListItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListBlockedListOKBlockedListItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "block_type":
			if err := func() error {
				s.BlockType.Reset()
				if err := s.BlockType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"block_type\"")
			}
		case "comment":
			if err := func() error {
				s.Comment.Reset()
				if err := s.Comment.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"comment\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "match_type":
			if err := func() error {
				s.MatchType.Reset()
				if err := s.MatchType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"match_type\"")
			}
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListBlockedListOKBlockedListItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListBlockedListOKBlockedListItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListBlockedListOKBlockedListItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListCRPhoneNumbersOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListCRPhoneNumbersOK) encodeFields(e *jx.Encoder) {
	{
		if s.CarrierResellerNumbers != nil {
			e.FieldStart("carrier_reseller_numbers")
			e.ArrStart()
			for _, elem := range s.CarrierResellerNumbers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
	{
		if s.TotalRecords.Set {
			e.FieldStart("total_records")
			s.TotalRecords.Encode(e)
		}
	}
}

var jsonFieldsNameOfListCRPhoneNumbersOK = [4]string{
	0: "carrier_reseller_numbers",
	1: "next_page_token",
	2: "page_size",
	3: "total_records",
}

// Decode decodes ListCRPhoneNumbersOK from json.
func (s *ListCRPhoneNumbersOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListCRPhoneNumbersOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "carrier_reseller_numbers":
			if err := func() error {
				s.CarrierResellerNumbers = make([]ListCRPhoneNumbersOKCarrierResellerNumbersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListCRPhoneNumbersOKCarrierResellerNumbersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CarrierResellerNumbers = append(s.CarrierResellerNumbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"carrier_reseller_numbers\"")
			}
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		case "total_records":
			if err := func() error {
				s.TotalRecords.Reset()
				if err := s.TotalRecords.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_records\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListCRPhoneNumbersOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListCRPhoneNumbersOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListCRPhoneNumbersOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListCRPhoneNumbersOKCarrierResellerNumbersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListCRPhoneNumbersOKCarrierResellerNumbersItem) encodeFields(e *jx.Encoder) {
	{
		if s.AssignedStatus.Set {
			e.FieldStart("assigned_status")
			s.AssignedStatus.Encode(e)
		}
	}
	{
		if s.CarrierCode.Set {
			e.FieldStart("carrier_code")
			s.CarrierCode.Encode(e)
		}
	}
	{
		if s.CountryIsoCode.Set {
			e.FieldStart("country_iso_code")
			s.CountryIsoCode.Encode(e)
		}
	}
	{
		if s.PhoneNumber.Set {
			e.FieldStart("phone_number")
			s.PhoneNumber.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.SubAccountID.Set {
			e.FieldStart("sub_account_id")
			s.SubAccountID.Encode(e)
		}
	}
	{
		if s.SubAccountName.Set {
			e.FieldStart("sub_account_name")
			s.SubAccountName.Encode(e)
		}
	}
}

var jsonFieldsNameOfListCRPhoneNumbersOKCarrierResellerNumbersItem = [7]string{
	0: "assigned_status",
	1: "carrier_code",
	2: "country_iso_code",
	3: "phone_number",
	4: "status",
	5: "sub_account_id",
	6: "sub_account_name",
}

// Decode decodes ListCRPhoneNumbersOKCarrierResellerNumbersItem from json.
func (s *ListCRPhoneNumbersOKCarrierResellerNumbersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListCRPhoneNumbersOKCarrierResellerNumbersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "assigned_status":
			if err := func() error {
				s.AssignedStatus.Reset()
				if err := s.AssignedStatus.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"assigned_status\"")
			}
		case "carrier_code":
			if err := func() error {
				s.CarrierCode.Reset()
				if err := s.CarrierCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"carrier_code\"")
			}
		case "country_iso_code":
			if err := func() error {
				s.CountryIsoCode.Reset()
				if err := s.CountryIsoCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country_iso_code\"")
			}
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "sub_account_id":
			if err := func() error {
				s.SubAccountID.Reset()
				if err := s.SubAccountID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sub_account_id\"")
			}
		case "sub_account_name":
			if err := func() error {
				s.SubAccountName.Reset()
				if err := s.SubAccountName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sub_account_name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListCRPhoneNumbersOKCarrierResellerNumbersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListCRPhoneNumbersOKCarrierResellerNumbersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListCRPhoneNumbersOKCarrierResellerNumbersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListCallLogsMetricsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListCallLogsMetricsOK) encodeFields(e *jx.Encoder) {
	{
		if s.CallLogs != nil {
			e.FieldStart("call_logs")
			e.ArrStart()
			for _, elem := range s.CallLogs {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.From.Set {
			e.FieldStart("from")
			s.From.Encode(e)
		}
	}
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
	{
		if s.To.Set {
			e.FieldStart("to")
			s.To.Encode(e)
		}
	}
	{
		if s.TotalRecords.Set {
			e.FieldStart("total_records")
			s.TotalRecords.Encode(e)
		}
	}
}

var jsonFieldsNameOfListCallLogsMetricsOK = [6]string{
	0: "call_logs",
	1: "from",
	2: "next_page_token",
	3: "page_size",
	4: "to",
	5: "total_records",
}

// Decode decodes ListCallLogsMetricsOK from json.
func (s *ListCallLogsMetricsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListCallLogsMetricsOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "call_logs":
			if err := func() error {
				s.CallLogs = make([]ListCallLogsMetricsOKCallLogsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListCallLogsMetricsOKCallLogsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CallLogs = append(s.CallLogs, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_logs\"")
			}
		case "from":
			if err := func() error {
				s.From.Reset()
				if err := s.From.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"from\"")
			}
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		case "to":
			if err := func() error {
				s.To.Reset()
				if err := s.To.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"to\"")
			}
		case "total_records":
			if err := func() error {
				s.TotalRecords.Reset()
				if err := s.TotalRecords.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_records\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListCallLogsMetricsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListCallLogsMetricsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListCallLogsMetricsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListCallLogsMetricsOKCallLogsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListCallLogsMetricsOKCallLogsItem) encodeFields(e *jx.Encoder) {
	{
		if s.CallID.Set {
			e.FieldStart("call_id")
			s.CallID.Encode(e)
		}
	}
	{
		if s.Callee.Set {
			e.FieldStart("callee")
			s.Callee.Encode(e)
		}
	}
	{
		if s.Caller.Set {
			e.FieldStart("caller")
			s.Caller.Encode(e)
		}
	}
	{
		if s.DateTime.Set {
			e.FieldStart("date_time")
			s.DateTime.Encode(e)
		}
	}
	{
		if s.Direction.Set {
			e.FieldStart("direction")
			s.Direction.Encode(e)
		}
	}
	{
		if s.Duration.Set {
			e.FieldStart("duration")
			s.Duration.Encode(e)
		}
	}
	{
		if s.Mos.Set {
			e.FieldStart("mos")
			s.Mos.Encode(e)
		}
	}
}

var jsonFieldsNameOfListCallLogsMetricsOKCallLogsItem = [7]string{
	0: "call_id",
	1: "callee",
	2: "caller",
	3: "date_time",
	4: "direction",
	5: "duration",
	6: "mos",
}

// Decode decodes ListCallLogsMetricsOKCallLogsItem from json.
func (s *ListCallLogsMetricsOKCallLogsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListCallLogsMetricsOKCallLogsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "call_id":
			if err := func() error {
				s.CallID.Reset()
				if err := s.CallID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_id\"")
			}
		case "callee":
			if err := func() error {
				s.Callee.Reset()
				if err := s.Callee.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee\"")
			}
		case "caller":
			if err := func() error {
				s.Caller.Reset()
				if err := s.Caller.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller\"")
			}
		case "date_time":
			if err := func() error {
				s.DateTime.Reset()
				if err := s.DateTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"date_time\"")
			}
		case "direction":
			if err := func() error {
				s.Direction.Reset()
				if err := s.Direction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"direction\"")
			}
		case "duration":
			if err := func() error {
				s.Duration.Reset()
				if err := s.Duration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"duration\"")
			}
		case "mos":
			if err := func() error {
				s.Mos.Reset()
				if err := s.Mos.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mos\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListCallLogsMetricsOKCallLogsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListCallLogsMetricsOKCallLogsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListCallLogsMetricsOKCallLogsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListCallLogsMetricsOKCallLogsItemCallee) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListCallLogsMetricsOKCallLogsItemCallee) encodeFields(e *jx.Encoder) {
	{
		if s.Codec.Set {
			e.FieldStart("codec")
			s.Codec.Encode(e)
		}
	}
	{
		if s.DevicePrivateIP.Set {
			e.FieldStart("device_private_ip")
			s.DevicePrivateIP.Encode(e)
		}
	}
	{
		if s.DevicePublicIP.Set {
			e.FieldStart("device_public_ip")
			s.DevicePublicIP.Encode(e)
		}
	}
	{
		if s.DeviceType.Set {
			e.FieldStart("device_type")
			s.DeviceType.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.Headset.Set {
			e.FieldStart("headset")
			s.Headset.Encode(e)
		}
	}
	{
		if s.Isp.Set {
			e.FieldStart("isp")
			s.Isp.Encode(e)
		}
	}
	{
		if s.Microphone.Set {
			e.FieldStart("microphone")
			s.Microphone.Encode(e)
		}
	}
	{
		if s.PhoneNumber.Set {
			e.FieldStart("phone_number")
			s.PhoneNumber.Encode(e)
		}
	}
	{
		if s.SiteID.Set {
			e.FieldStart("site_id")
			s.SiteID.Encode(e)
		}
	}
}

var jsonFieldsNameOfListCallLogsMetricsOKCallLogsItemCallee = [10]string{
	0: "codec",
	1: "device_private_ip",
	2: "device_public_ip",
	3: "device_type",
	4: "extension_number",
	5: "headset",
	6: "isp",
	7: "microphone",
	8: "phone_number",
	9: "site_id",
}

// Decode decodes ListCallLogsMetricsOKCallLogsItemCallee from json.
func (s *ListCallLogsMetricsOKCallLogsItemCallee) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListCallLogsMetricsOKCallLogsItemCallee to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "codec":
			if err := func() error {
				s.Codec.Reset()
				if err := s.Codec.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"codec\"")
			}
		case "device_private_ip":
			if err := func() error {
				s.DevicePrivateIP.Reset()
				if err := s.DevicePrivateIP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_private_ip\"")
			}
		case "device_public_ip":
			if err := func() error {
				s.DevicePublicIP.Reset()
				if err := s.DevicePublicIP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_public_ip\"")
			}
		case "device_type":
			if err := func() error {
				s.DeviceType.Reset()
				if err := s.DeviceType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_type\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "headset":
			if err := func() error {
				s.Headset.Reset()
				if err := s.Headset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"headset\"")
			}
		case "isp":
			if err := func() error {
				s.Isp.Reset()
				if err := s.Isp.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"isp\"")
			}
		case "microphone":
			if err := func() error {
				s.Microphone.Reset()
				if err := s.Microphone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"microphone\"")
			}
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		case "site_id":
			if err := func() error {
				s.SiteID.Reset()
				if err := s.SiteID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListCallLogsMetricsOKCallLogsItemCallee")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListCallLogsMetricsOKCallLogsItemCallee) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListCallLogsMetricsOKCallLogsItemCallee) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListCallLogsMetricsOKCallLogsItemCaller) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListCallLogsMetricsOKCallLogsItemCaller) encodeFields(e *jx.Encoder) {
	{
		if s.Codec.Set {
			e.FieldStart("codec")
			s.Codec.Encode(e)
		}
	}
	{
		if s.DevicePrivateIP.Set {
			e.FieldStart("device_private_ip")
			s.DevicePrivateIP.Encode(e)
		}
	}
	{
		if s.DevicePublicIP.Set {
			e.FieldStart("device_public_ip")
			s.DevicePublicIP.Encode(e)
		}
	}
	{
		if s.DeviceType.Set {
			e.FieldStart("device_type")
			s.DeviceType.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.Headset.Set {
			e.FieldStart("headset")
			s.Headset.Encode(e)
		}
	}
	{
		if s.Isp.Set {
			e.FieldStart("isp")
			s.Isp.Encode(e)
		}
	}
	{
		if s.Microphone.Set {
			e.FieldStart("microphone")
			s.Microphone.Encode(e)
		}
	}
	{
		if s.PhoneNumber.Set {
			e.FieldStart("phone_number")
			s.PhoneNumber.Encode(e)
		}
	}
	{
		if s.SiteID.Set {
			e.FieldStart("site_id")
			s.SiteID.Encode(e)
		}
	}
}

var jsonFieldsNameOfListCallLogsMetricsOKCallLogsItemCaller = [10]string{
	0: "codec",
	1: "device_private_ip",
	2: "device_public_ip",
	3: "device_type",
	4: "extension_number",
	5: "headset",
	6: "isp",
	7: "microphone",
	8: "phone_number",
	9: "site_id",
}

// Decode decodes ListCallLogsMetricsOKCallLogsItemCaller from json.
func (s *ListCallLogsMetricsOKCallLogsItemCaller) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListCallLogsMetricsOKCallLogsItemCaller to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "codec":
			if err := func() error {
				s.Codec.Reset()
				if err := s.Codec.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"codec\"")
			}
		case "device_private_ip":
			if err := func() error {
				s.DevicePrivateIP.Reset()
				if err := s.DevicePrivateIP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_private_ip\"")
			}
		case "device_public_ip":
			if err := func() error {
				s.DevicePublicIP.Reset()
				if err := s.DevicePublicIP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_public_ip\"")
			}
		case "device_type":
			if err := func() error {
				s.DeviceType.Reset()
				if err := s.DeviceType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_type\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "headset":
			if err := func() error {
				s.Headset.Reset()
				if err := s.Headset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"headset\"")
			}
		case "isp":
			if err := func() error {
				s.Isp.Reset()
				if err := s.Isp.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"isp\"")
			}
		case "microphone":
			if err := func() error {
				s.Microphone.Reset()
				if err := s.Microphone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"microphone\"")
			}
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		case "site_id":
			if err := func() error {
				s.SiteID.Reset()
				if err := s.SiteID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListCallLogsMetricsOKCallLogsItemCaller")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListCallLogsMetricsOKCallLogsItemCaller) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListCallLogsMetricsOKCallLogsItemCaller) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListCallQueueMembersOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListCallQueueMembersOK) encodeFields(e *jx.Encoder) {
	{
		if s.CallQueueMembers != nil {
			e.FieldStart("call_queue_members")
			e.ArrStart()
			for _, elem := range s.CallQueueMembers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
	{
		if s.TotalRecords.Set {
			e.FieldStart("total_records")
			s.TotalRecords.Encode(e)
		}
	}
}

var jsonFieldsNameOfListCallQueueMembersOK = [4]string{
	0: "call_queue_members",
	1: "next_page_token",
	2: "page_size",
	3: "total_records",
}

// Decode decodes ListCallQueueMembersOK from json.
func (s *ListCallQueueMembersOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListCallQueueMembersOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "call_queue_members":
			if err := func() error {
				s.CallQueueMembers = make([]ListCallQueueMembersOKCallQueueMembersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListCallQueueMembersOKCallQueueMembersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CallQueueMembers = append(s.CallQueueMembers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_queue_members\"")
			}
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		case "total_records":
			if err := func() error {
				s.TotalRecords.Reset()
				if err := s.TotalRecords.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_records\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListCallQueueMembersOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListCallQueueMembersOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListCallQueueMembersOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListCallQueueMembersOKCallQueueMembersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListCallQueueMembersOKCallQueueMembersItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Level.Set {
			e.FieldStart("level")
			s.Level.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.ReceiveCall.Set {
			e.FieldStart("receive_call")
			s.ReceiveCall.Encode(e)
		}
	}
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
}

var jsonFieldsNameOfListCallQueueMembersOKCallQueueMembersItem = [5]string{
	0: "id",
	1: "level",
	2: "name",
	3: "receive_call",
	4: "extension_id",
}

// Decode decodes ListCallQueueMembersOKCallQueueMembersItem from json.
func (s *ListCallQueueMembersOKCallQueueMembersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListCallQueueMembersOKCallQueueMembersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "level":
			if err := func() error {
				s.Level.Reset()
				if err := s.Level.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"level\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "receive_call":
			if err := func() error {
				s.ReceiveCall.Reset()
				if err := s.ReceiveCall.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"receive_call\"")
			}
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListCallQueueMembersOKCallQueueMembersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListCallQueueMembersOKCallQueueMembersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListCallQueueMembersOKCallQueueMembersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListCallQueuesOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListCallQueuesOK) encodeFields(e *jx.Encoder) {
	{
		if s.CallQueues != nil {
			e.FieldStart("call_queues")
			e.ArrStart()
			for _, elem := range s.CallQueues {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
	{
		if s.TotalRecords.Set {
			e.FieldStart("total_records")
			s.TotalRecords.Encode(e)
		}
	}
}

var jsonFieldsNameOfListCallQueuesOK = [4]string{
	0: "call_queues",
	1: "next_page_token",
	2: "page_size",
	3: "total_records",
}

// Decode decodes ListCallQueuesOK from json.
func (s *ListCallQueuesOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListCallQueuesOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "call_queues":
			if err := func() error {
				s.CallQueues = make([]ListCallQueuesOKCallQueuesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListCallQueuesOKCallQueuesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CallQueues = append(s.CallQueues, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_queues\"")
			}
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		case "total_records":
			if err := func() error {
				s.TotalRecords.Reset()
				if err := s.TotalRecords.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_records\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListCallQueuesOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListCallQueuesOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListCallQueuesOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListCallQueuesOKCallQueuesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListCallQueuesOKCallQueuesItem) encodeFields(e *jx.Encoder) {
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.PhoneNumbers != nil {
			e.FieldStart("phone_numbers")
			e.ArrStart()
			for _, elem := range s.PhoneNumbers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Site.Set {
			e.FieldStart("site")
			s.Site.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
}

var jsonFieldsNameOfListCallQueuesOKCallQueuesItem = [7]string{
	0: "extension_id",
	1: "extension_number",
	2: "id",
	3: "name",
	4: "phone_numbers",
	5: "site",
	6: "status",
}

// Decode decodes ListCallQueuesOKCallQueuesItem from json.
func (s *ListCallQueuesOKCallQueuesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListCallQueuesOKCallQueuesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "phone_numbers":
			if err := func() error {
				s.PhoneNumbers = make([]ListCallQueuesOKCallQueuesItemPhoneNumbersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListCallQueuesOKCallQueuesItemPhoneNumbersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.PhoneNumbers = append(s.PhoneNumbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_numbers\"")
			}
		case "site":
			if err := func() error {
				s.Site.Reset()
				if err := s.Site.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListCallQueuesOKCallQueuesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListCallQueuesOKCallQueuesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListCallQueuesOKCallQueuesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListCallQueuesOKCallQueuesItemPhoneNumbersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListCallQueuesOKCallQueuesItemPhoneNumbersItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Number.Set {
			e.FieldStart("number")
			s.Number.Encode(e)
		}
	}
	{
		if s.Source.Set {
			e.FieldStart("source")
			s.Source.Encode(e)
		}
	}
}

var jsonFieldsNameOfListCallQueuesOKCallQueuesItemPhoneNumbersItem = [3]string{
	0: "id",
	1: "number",
	2: "source",
}

// Decode decodes ListCallQueuesOKCallQueuesItemPhoneNumbersItem from json.
func (s *ListCallQueuesOKCallQueuesItemPhoneNumbersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListCallQueuesOKCallQueuesItemPhoneNumbersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "number":
			if err := func() error {
				s.Number.Reset()
				if err := s.Number.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "source":
			if err := func() error {
				s.Source.Reset()
				if err := s.Source.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"source\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListCallQueuesOKCallQueuesItemPhoneNumbersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListCallQueuesOKCallQueuesItemPhoneNumbersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListCallQueuesOKCallQueuesItemPhoneNumbersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListCallQueuesOKCallQueuesItemSite) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListCallQueuesOKCallQueuesItemSite) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfListCallQueuesOKCallQueuesItemSite = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes ListCallQueuesOKCallQueuesItemSite from json.
func (s *ListCallQueuesOKCallQueuesItemSite) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListCallQueuesOKCallQueuesItemSite to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListCallQueuesOKCallQueuesItemSite")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListCallQueuesOKCallQueuesItemSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListCallQueuesOKCallQueuesItemSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListCallingPlansOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListCallingPlansOK) encodeFields(e *jx.Encoder) {
	{
		if s.CallingPlans != nil {
			e.FieldStart("calling_plans")
			e.ArrStart()
			for _, elem := range s.CallingPlans {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfListCallingPlansOK = [1]string{
	0: "calling_plans",
}

// Decode decodes ListCallingPlansOK from json.
func (s *ListCallingPlansOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListCallingPlansOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "calling_plans":
			if err := func() error {
				s.CallingPlans = make([]ListCallingPlansOKCallingPlansItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListCallingPlansOKCallingPlansItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CallingPlans = append(s.CallingPlans, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"calling_plans\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListCallingPlansOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListCallingPlansOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListCallingPlansOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListCallingPlansOKCallingPlansItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListCallingPlansOKCallingPlansItem) encodeFields(e *jx.Encoder) {
	{
		if s.Assigned.Set {
			e.FieldStart("assigned")
			s.Assigned.Encode(e)
		}
	}
	{
		if s.Available.Set {
			e.FieldStart("available")
			s.Available.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Subscribed.Set {
			e.FieldStart("subscribed")
			s.Subscribed.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.BillingAccountID.Set {
			e.FieldStart("billing_account_id")
			s.BillingAccountID.Encode(e)
		}
	}
	{
		if s.BillingAccountName.Set {
			e.FieldStart("billing_account_name")
			s.BillingAccountName.Encode(e)
		}
	}
}

var jsonFieldsNameOfListCallingPlansOKCallingPlansItem = [7]string{
	0: "assigned",
	1: "available",
	2: "name",
	3: "subscribed",
	4: "type",
	5: "billing_account_id",
	6: "billing_account_name",
}

// Decode decodes ListCallingPlansOKCallingPlansItem from json.
func (s *ListCallingPlansOKCallingPlansItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListCallingPlansOKCallingPlansItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "assigned":
			if err := func() error {
				s.Assigned.Reset()
				if err := s.Assigned.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"assigned\"")
			}
		case "available":
			if err := func() error {
				s.Available.Reset()
				if err := s.Available.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"available\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "subscribed":
			if err := func() error {
				s.Subscribed.Reset()
				if err := s.Subscribed.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"subscribed\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "billing_account_id":
			if err := func() error {
				s.BillingAccountID.Reset()
				if err := s.BillingAccountID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"billing_account_id\"")
			}
		case "billing_account_name":
			if err := func() error {
				s.BillingAccountName.Reset()
				if err := s.BillingAccountName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"billing_account_name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListCallingPlansOKCallingPlansItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListCallingPlansOKCallingPlansItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListCallingPlansOKCallingPlansItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListCarrierPeeringPhoneNumbersOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListCarrierPeeringPhoneNumbersOK) encodeFields(e *jx.Encoder) {
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.Numbers != nil {
			e.FieldStart("numbers")
			e.ArrStart()
			for _, elem := range s.Numbers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalRecords.Set {
			e.FieldStart("total_records")
			s.TotalRecords.Encode(e)
		}
	}
}

var jsonFieldsNameOfListCarrierPeeringPhoneNumbersOK = [3]string{
	0: "next_page_token",
	1: "numbers",
	2: "total_records",
}

// Decode decodes ListCarrierPeeringPhoneNumbersOK from json.
func (s *ListCarrierPeeringPhoneNumbersOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListCarrierPeeringPhoneNumbersOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "numbers":
			if err := func() error {
				s.Numbers = make([]ListCarrierPeeringPhoneNumbersOKNumbersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListCarrierPeeringPhoneNumbersOKNumbersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Numbers = append(s.Numbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"numbers\"")
			}
		case "total_records":
			if err := func() error {
				s.TotalRecords.Reset()
				if err := s.TotalRecords.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_records\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListCarrierPeeringPhoneNumbersOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListCarrierPeeringPhoneNumbersOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListCarrierPeeringPhoneNumbersOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListCarrierPeeringPhoneNumbersOKNumbersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListCarrierPeeringPhoneNumbersOKNumbersItem) encodeFields(e *jx.Encoder) {
	{
		if s.CustomerAccountName.Set {
			e.FieldStart("customer_account_name")
			s.CustomerAccountName.Encode(e)
		}
	}
	{
		if s.CustomerAccountNumber.Set {
			e.FieldStart("customer_account_number")
			s.CustomerAccountNumber.Encode(e)
		}
	}
	{
		e.FieldStart("assigned")
		e.Int(s.Assigned)
	}
	{
		if s.BillingReferenceID.Set {
			e.FieldStart("billing_reference_id")
			s.BillingReferenceID.Encode(e)
		}
	}
	{
		e.FieldStart("phone_number")
		e.Str(s.PhoneNumber)
	}
	{
		if s.ServiceInfo.Set {
			e.FieldStart("service_info")
			s.ServiceInfo.Encode(e)
		}
	}
	{
		e.FieldStart("sip_trunk_name")
		e.Str(s.SipTrunkName)
	}
	{
		e.FieldStart("status")
		e.Int(s.Status)
	}
}

var jsonFieldsNameOfListCarrierPeeringPhoneNumbersOKNumbersItem = [8]string{
	0: "customer_account_name",
	1: "customer_account_number",
	2: "assigned",
	3: "billing_reference_id",
	4: "phone_number",
	5: "service_info",
	6: "sip_trunk_name",
	7: "status",
}

// Decode decodes ListCarrierPeeringPhoneNumbersOKNumbersItem from json.
func (s *ListCarrierPeeringPhoneNumbersOKNumbersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListCarrierPeeringPhoneNumbersOKNumbersItem to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "customer_account_name":
			if err := func() error {
				s.CustomerAccountName.Reset()
				if err := s.CustomerAccountName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_account_name\"")
			}
		case "customer_account_number":
			if err := func() error {
				s.CustomerAccountNumber.Reset()
				if err := s.CustomerAccountNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_account_number\"")
			}
		case "assigned":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Int()
				s.Assigned = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"assigned\"")
			}
		case "billing_reference_id":
			if err := func() error {
				s.BillingReferenceID.Reset()
				if err := s.BillingReferenceID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"billing_reference_id\"")
			}
		case "phone_number":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				v, err := d.Str()
				s.PhoneNumber = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		case "service_info":
			if err := func() error {
				s.ServiceInfo.Reset()
				if err := s.ServiceInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"service_info\"")
			}
		case "sip_trunk_name":
			requiredBitSet[0] |= 1 << 6
			if err := func() error {
				v, err := d.Str()
				s.SipTrunkName = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sip_trunk_name\"")
			}
		case "status":
			requiredBitSet[0] |= 1 << 7
			if err := func() error {
				v, err := d.Int()
				s.Status = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListCarrierPeeringPhoneNumbersOKNumbersItem")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b11010100,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfListCarrierPeeringPhoneNumbersOKNumbersItem) {
					name = jsonFieldsNameOfListCarrierPeeringPhoneNumbersOKNumbersItem[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListCarrierPeeringPhoneNumbersOKNumbersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListCarrierPeeringPhoneNumbersOKNumbersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListCommonAreaOutboundCallingExceptionRuleOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListCommonAreaOutboundCallingExceptionRuleOK) encodeFields(e *jx.Encoder) {
	{
		if s.ExceptionRules != nil {
			e.FieldStart("exception_rules")
			e.ArrStart()
			for _, elem := range s.ExceptionRules {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
}

var jsonFieldsNameOfListCommonAreaOutboundCallingExceptionRuleOK = [3]string{
	0: "exception_rules",
	1: "next_page_token",
	2: "page_size",
}

// Decode decodes ListCommonAreaOutboundCallingExceptionRuleOK from json.
func (s *ListCommonAreaOutboundCallingExceptionRuleOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListCommonAreaOutboundCallingExceptionRuleOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "exception_rules":
			if err := func() error {
				s.ExceptionRules = make([]ListCommonAreaOutboundCallingExceptionRuleOKExceptionRulesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListCommonAreaOutboundCallingExceptionRuleOKExceptionRulesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.ExceptionRules = append(s.ExceptionRules, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exception_rules\"")
			}
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListCommonAreaOutboundCallingExceptionRuleOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListCommonAreaOutboundCallingExceptionRuleOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListCommonAreaOutboundCallingExceptionRuleOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListCommonAreaOutboundCallingExceptionRuleOKExceptionRulesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListCommonAreaOutboundCallingExceptionRuleOKExceptionRulesItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.MatchType.Set {
			e.FieldStart("match_type")
			s.MatchType.Encode(e)
		}
	}
	{
		if s.PrefixNumber.Set {
			e.FieldStart("prefix_number")
			s.PrefixNumber.Encode(e)
		}
	}
	{
		if s.Rule.Set {
			e.FieldStart("rule")
			s.Rule.Encode(e)
		}
	}
	{
		if s.Comment.Set {
			e.FieldStart("comment")
			s.Comment.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
}

var jsonFieldsNameOfListCommonAreaOutboundCallingExceptionRuleOKExceptionRulesItem = [6]string{
	0: "id",
	1: "match_type",
	2: "prefix_number",
	3: "rule",
	4: "comment",
	5: "status",
}

// Decode decodes ListCommonAreaOutboundCallingExceptionRuleOKExceptionRulesItem from json.
func (s *ListCommonAreaOutboundCallingExceptionRuleOKExceptionRulesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListCommonAreaOutboundCallingExceptionRuleOKExceptionRulesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "match_type":
			if err := func() error {
				s.MatchType.Reset()
				if err := s.MatchType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"match_type\"")
			}
		case "prefix_number":
			if err := func() error {
				s.PrefixNumber.Reset()
				if err := s.PrefixNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"prefix_number\"")
			}
		case "rule":
			if err := func() error {
				s.Rule.Reset()
				if err := s.Rule.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rule\"")
			}
		case "comment":
			if err := func() error {
				s.Comment.Reset()
				if err := s.Comment.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"comment\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListCommonAreaOutboundCallingExceptionRuleOKExceptionRulesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListCommonAreaOutboundCallingExceptionRuleOKExceptionRulesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListCommonAreaOutboundCallingExceptionRuleOKExceptionRulesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListCommonAreasOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListCommonAreasOK) encodeFields(e *jx.Encoder) {
	{
		if s.CommonAreas != nil {
			e.FieldStart("common_areas")
			e.ArrStart()
			for _, elem := range s.CommonAreas {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
}

var jsonFieldsNameOfListCommonAreasOK = [3]string{
	0: "common_areas",
	1: "next_page_token",
	2: "page_size",
}

// Decode decodes ListCommonAreasOK from json.
func (s *ListCommonAreasOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListCommonAreasOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "common_areas":
			if err := func() error {
				s.CommonAreas = make([]ListCommonAreasOKCommonAreasItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListCommonAreasOKCommonAreasItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CommonAreas = append(s.CommonAreas, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"common_areas\"")
			}
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListCommonAreasOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListCommonAreasOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListCommonAreasOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListCommonAreasOKCommonAreasItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListCommonAreasOKCommonAreasItem) encodeFields(e *jx.Encoder) {
	{
		if s.CallingPlans != nil {
			e.FieldStart("calling_plans")
			e.ArrStart()
			for _, elem := range s.CallingPlans {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.PhoneNumbers != nil {
			e.FieldStart("phone_numbers")
			e.ArrStart()
			for _, elem := range s.PhoneNumbers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Site.Set {
			e.FieldStart("site")
			s.Site.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.DeskPhones != nil {
			e.FieldStart("desk_phones")
			e.ArrStart()
			for _, elem := range s.DeskPhones {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfListCommonAreasOKCommonAreasItem = [8]string{
	0: "calling_plans",
	1: "display_name",
	2: "extension_number",
	3: "id",
	4: "phone_numbers",
	5: "site",
	6: "status",
	7: "desk_phones",
}

// Decode decodes ListCommonAreasOKCommonAreasItem from json.
func (s *ListCommonAreasOKCommonAreasItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListCommonAreasOKCommonAreasItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "calling_plans":
			if err := func() error {
				s.CallingPlans = make([]ListCommonAreasOKCommonAreasItemCallingPlansItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListCommonAreasOKCommonAreasItemCallingPlansItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CallingPlans = append(s.CallingPlans, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"calling_plans\"")
			}
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "phone_numbers":
			if err := func() error {
				s.PhoneNumbers = make([]ListCommonAreasOKCommonAreasItemPhoneNumbersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListCommonAreasOKCommonAreasItemPhoneNumbersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.PhoneNumbers = append(s.PhoneNumbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_numbers\"")
			}
		case "site":
			if err := func() error {
				s.Site.Reset()
				if err := s.Site.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "desk_phones":
			if err := func() error {
				s.DeskPhones = make([]ListCommonAreasOKCommonAreasItemDeskPhonesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListCommonAreasOKCommonAreasItemDeskPhonesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.DeskPhones = append(s.DeskPhones, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"desk_phones\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListCommonAreasOKCommonAreasItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListCommonAreasOKCommonAreasItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListCommonAreasOKCommonAreasItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListCommonAreasOKCommonAreasItemCallingPlansItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListCommonAreasOKCommonAreasItemCallingPlansItem) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.BillingAccountID.Set {
			e.FieldStart("billing_account_id")
			s.BillingAccountID.Encode(e)
		}
	}
	{
		if s.BillingAccountName.Set {
			e.FieldStart("billing_account_name")
			s.BillingAccountName.Encode(e)
		}
	}
}

var jsonFieldsNameOfListCommonAreasOKCommonAreasItemCallingPlansItem = [4]string{
	0: "name",
	1: "type",
	2: "billing_account_id",
	3: "billing_account_name",
}

// Decode decodes ListCommonAreasOKCommonAreasItemCallingPlansItem from json.
func (s *ListCommonAreasOKCommonAreasItemCallingPlansItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListCommonAreasOKCommonAreasItemCallingPlansItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "billing_account_id":
			if err := func() error {
				s.BillingAccountID.Reset()
				if err := s.BillingAccountID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"billing_account_id\"")
			}
		case "billing_account_name":
			if err := func() error {
				s.BillingAccountName.Reset()
				if err := s.BillingAccountName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"billing_account_name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListCommonAreasOKCommonAreasItemCallingPlansItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListCommonAreasOKCommonAreasItemCallingPlansItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListCommonAreasOKCommonAreasItemCallingPlansItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListCommonAreasOKCommonAreasItemDeskPhonesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListCommonAreasOKCommonAreasItemDeskPhonesItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.DeviceType.Set {
			e.FieldStart("device_type")
			s.DeviceType.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
}

var jsonFieldsNameOfListCommonAreasOKCommonAreasItemDeskPhonesItem = [4]string{
	0: "id",
	1: "display_name",
	2: "device_type",
	3: "status",
}

// Decode decodes ListCommonAreasOKCommonAreasItemDeskPhonesItem from json.
func (s *ListCommonAreasOKCommonAreasItemDeskPhonesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListCommonAreasOKCommonAreasItemDeskPhonesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "device_type":
			if err := func() error {
				s.DeviceType.Reset()
				if err := s.DeviceType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_type\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListCommonAreasOKCommonAreasItemDeskPhonesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListCommonAreasOKCommonAreasItemDeskPhonesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListCommonAreasOKCommonAreasItemDeskPhonesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListCommonAreasOKCommonAreasItemPhoneNumbersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListCommonAreasOKCommonAreasItemPhoneNumbersItem) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Number.Set {
			e.FieldStart("number")
			s.Number.Encode(e)
		}
	}
	{
		if s.Source.Set {
			e.FieldStart("source")
			s.Source.Encode(e)
		}
	}
}

var jsonFieldsNameOfListCommonAreasOKCommonAreasItemPhoneNumbersItem = [4]string{
	0: "display_name",
	1: "id",
	2: "number",
	3: "source",
}

// Decode decodes ListCommonAreasOKCommonAreasItemPhoneNumbersItem from json.
func (s *ListCommonAreasOKCommonAreasItemPhoneNumbersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListCommonAreasOKCommonAreasItemPhoneNumbersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "number":
			if err := func() error {
				s.Number.Reset()
				if err := s.Number.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "source":
			if err := func() error {
				s.Source.Reset()
				if err := s.Source.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"source\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListCommonAreasOKCommonAreasItemPhoneNumbersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListCommonAreasOKCommonAreasItemPhoneNumbersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListCommonAreasOKCommonAreasItemPhoneNumbersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListCommonAreasOKCommonAreasItemSite) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListCommonAreasOKCommonAreasItemSite) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfListCommonAreasOKCommonAreasItemSite = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes ListCommonAreasOKCommonAreasItemSite from json.
func (s *ListCommonAreasOKCommonAreasItemSite) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListCommonAreasOKCommonAreasItemSite to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListCommonAreasOKCommonAreasItemSite")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListCommonAreasOKCommonAreasItemSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListCommonAreasOKCommonAreasItemSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListCustomizeOutboundCallerNumbersOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListCustomizeOutboundCallerNumbersOK) encodeFields(e *jx.Encoder) {
	{
		if s.CustomizeNumbers != nil {
			e.FieldStart("customize_numbers")
			e.ArrStart()
			for _, elem := range s.CustomizeNumbers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
	{
		if s.TotalRecords.Set {
			e.FieldStart("total_records")
			s.TotalRecords.Encode(e)
		}
	}
}

var jsonFieldsNameOfListCustomizeOutboundCallerNumbersOK = [4]string{
	0: "customize_numbers",
	1: "next_page_token",
	2: "page_size",
	3: "total_records",
}

// Decode decodes ListCustomizeOutboundCallerNumbersOK from json.
func (s *ListCustomizeOutboundCallerNumbersOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListCustomizeOutboundCallerNumbersOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "customize_numbers":
			if err := func() error {
				s.CustomizeNumbers = make([]ListCustomizeOutboundCallerNumbersOKCustomizeNumbersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListCustomizeOutboundCallerNumbersOKCustomizeNumbersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CustomizeNumbers = append(s.CustomizeNumbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customize_numbers\"")
			}
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		case "total_records":
			if err := func() error {
				s.TotalRecords.Reset()
				if err := s.TotalRecords.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_records\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListCustomizeOutboundCallerNumbersOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListCustomizeOutboundCallerNumbersOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListCustomizeOutboundCallerNumbersOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListCustomizeOutboundCallerNumbersOKCustomizeNumbersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListCustomizeOutboundCallerNumbersOKCustomizeNumbersItem) encodeFields(e *jx.Encoder) {
	{
		if s.CustomizeID.Set {
			e.FieldStart("customize_id")
			s.CustomizeID.Encode(e)
		}
	}
	{
		if s.PhoneNumberID.Set {
			e.FieldStart("phone_number_id")
			s.PhoneNumberID.Encode(e)
		}
	}
	{
		if s.PhoneNumber.Set {
			e.FieldStart("phone_number")
			s.PhoneNumber.Encode(e)
		}
	}
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.Incoming.Set {
			e.FieldStart("incoming")
			s.Incoming.Encode(e)
		}
	}
	{
		if s.Outgoing.Set {
			e.FieldStart("outgoing")
			s.Outgoing.Encode(e)
		}
	}
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
	{
		if s.ExtensionType.Set {
			e.FieldStart("extension_type")
			s.ExtensionType.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ExtensionName.Set {
			e.FieldStart("extension_name")
			s.ExtensionName.Encode(e)
		}
	}
	{
		if s.Site.Set {
			e.FieldStart("site")
			s.Site.Encode(e)
		}
	}
}

var jsonFieldsNameOfListCustomizeOutboundCallerNumbersOKCustomizeNumbersItem = [11]string{
	0:  "customize_id",
	1:  "phone_number_id",
	2:  "phone_number",
	3:  "display_name",
	4:  "incoming",
	5:  "outgoing",
	6:  "extension_id",
	7:  "extension_type",
	8:  "extension_number",
	9:  "extension_name",
	10: "site",
}

// Decode decodes ListCustomizeOutboundCallerNumbersOKCustomizeNumbersItem from json.
func (s *ListCustomizeOutboundCallerNumbersOKCustomizeNumbersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListCustomizeOutboundCallerNumbersOKCustomizeNumbersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "customize_id":
			if err := func() error {
				s.CustomizeID.Reset()
				if err := s.CustomizeID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customize_id\"")
			}
		case "phone_number_id":
			if err := func() error {
				s.PhoneNumberID.Reset()
				if err := s.PhoneNumberID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number_id\"")
			}
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "incoming":
			if err := func() error {
				s.Incoming.Reset()
				if err := s.Incoming.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"incoming\"")
			}
		case "outgoing":
			if err := func() error {
				s.Outgoing.Reset()
				if err := s.Outgoing.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"outgoing\"")
			}
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		case "extension_type":
			if err := func() error {
				s.ExtensionType.Reset()
				if err := s.ExtensionType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_type\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "extension_name":
			if err := func() error {
				s.ExtensionName.Reset()
				if err := s.ExtensionName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_name\"")
			}
		case "site":
			if err := func() error {
				s.Site.Reset()
				if err := s.Site.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListCustomizeOutboundCallerNumbersOKCustomizeNumbersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListCustomizeOutboundCallerNumbersOKCustomizeNumbersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListCustomizeOutboundCallerNumbersOKCustomizeNumbersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListCustomizeOutboundCallerNumbersOKCustomizeNumbersItemSite) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListCustomizeOutboundCallerNumbersOKCustomizeNumbersItemSite) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfListCustomizeOutboundCallerNumbersOKCustomizeNumbersItemSite = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes ListCustomizeOutboundCallerNumbersOKCustomizeNumbersItemSite from json.
func (s *ListCustomizeOutboundCallerNumbersOKCustomizeNumbersItemSite) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListCustomizeOutboundCallerNumbersOKCustomizeNumbersItemSite to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListCustomizeOutboundCallerNumbersOKCustomizeNumbersItemSite")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListCustomizeOutboundCallerNumbersOKCustomizeNumbersItemSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListCustomizeOutboundCallerNumbersOKCustomizeNumbersItemSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListDeviceLineKeySettingOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListDeviceLineKeySettingOK) encodeFields(e *jx.Encoder) {
	{
		if s.DeviceID.Set {
			e.FieldStart("device_id")
			s.DeviceID.Encode(e)
		}
	}
	{
		if s.DeviceName.Set {
			e.FieldStart("device_name")
			s.DeviceName.Encode(e)
		}
	}
	{
		if s.Positions != nil {
			e.FieldStart("positions")
			e.ArrStart()
			for _, elem := range s.Positions {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfListDeviceLineKeySettingOK = [3]string{
	0: "device_id",
	1: "device_name",
	2: "positions",
}

// Decode decodes ListDeviceLineKeySettingOK from json.
func (s *ListDeviceLineKeySettingOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListDeviceLineKeySettingOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "device_id":
			if err := func() error {
				s.DeviceID.Reset()
				if err := s.DeviceID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_id\"")
			}
		case "device_name":
			if err := func() error {
				s.DeviceName.Reset()
				if err := s.DeviceName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_name\"")
			}
		case "positions":
			if err := func() error {
				s.Positions = make([]ListDeviceLineKeySettingOKPositionsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListDeviceLineKeySettingOKPositionsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Positions = append(s.Positions, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"positions\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListDeviceLineKeySettingOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListDeviceLineKeySettingOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListDeviceLineKeySettingOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListDeviceLineKeySettingOKPositionsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListDeviceLineKeySettingOKPositionsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Index.Set {
			e.FieldStart("index")
			s.Index.Encode(e)
		}
	}
	{
		if s.OwnerExtensionName.Set {
			e.FieldStart("owner_extension_name")
			s.OwnerExtensionName.Encode(e)
		}
	}
	{
		if s.OwnerExtensionNumber.Set {
			e.FieldStart("owner_extension_number")
			s.OwnerExtensionNumber.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ExtensionType.Set {
			e.FieldStart("extension_type")
			s.ExtensionType.Encode(e)
		}
	}
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.PhoneNumber.Set {
			e.FieldStart("phone_number")
			s.PhoneNumber.Encode(e)
		}
	}
	{
		if s.OutboundCallerIds != nil {
			e.FieldStart("outbound_caller_ids")
			e.ArrStart()
			for _, elem := range s.OutboundCallerIds {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfListDeviceLineKeySettingOKPositionsItem = [9]string{
	0: "index",
	1: "owner_extension_name",
	2: "owner_extension_number",
	3: "extension_number",
	4: "extension_type",
	5: "extension_id",
	6: "display_name",
	7: "phone_number",
	8: "outbound_caller_ids",
}

// Decode decodes ListDeviceLineKeySettingOKPositionsItem from json.
func (s *ListDeviceLineKeySettingOKPositionsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListDeviceLineKeySettingOKPositionsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "index":
			if err := func() error {
				s.Index.Reset()
				if err := s.Index.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"index\"")
			}
		case "owner_extension_name":
			if err := func() error {
				s.OwnerExtensionName.Reset()
				if err := s.OwnerExtensionName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"owner_extension_name\"")
			}
		case "owner_extension_number":
			if err := func() error {
				s.OwnerExtensionNumber.Reset()
				if err := s.OwnerExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"owner_extension_number\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "extension_type":
			if err := func() error {
				s.ExtensionType.Reset()
				if err := s.ExtensionType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_type\"")
			}
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		case "outbound_caller_ids":
			if err := func() error {
				s.OutboundCallerIds = make([]ListDeviceLineKeySettingOKPositionsItemOutboundCallerIdsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListDeviceLineKeySettingOKPositionsItemOutboundCallerIdsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.OutboundCallerIds = append(s.OutboundCallerIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"outbound_caller_ids\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListDeviceLineKeySettingOKPositionsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListDeviceLineKeySettingOKPositionsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListDeviceLineKeySettingOKPositionsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListDeviceLineKeySettingOKPositionsItemOutboundCallerIdsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListDeviceLineKeySettingOKPositionsItemOutboundCallerIdsItem) encodeFields(e *jx.Encoder) {
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
	{
		if s.PhoneNumber.Set {
			e.FieldStart("phone_number")
			s.PhoneNumber.Encode(e)
		}
	}
	{
		if s.UsageType.Set {
			e.FieldStart("usage_type")
			s.UsageType.Encode(e)
		}
	}
}

var jsonFieldsNameOfListDeviceLineKeySettingOKPositionsItemOutboundCallerIdsItem = [3]string{
	0: "extension_id",
	1: "phone_number",
	2: "usage_type",
}

// Decode decodes ListDeviceLineKeySettingOKPositionsItemOutboundCallerIdsItem from json.
func (s *ListDeviceLineKeySettingOKPositionsItemOutboundCallerIdsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListDeviceLineKeySettingOKPositionsItemOutboundCallerIdsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		case "usage_type":
			if err := func() error {
				s.UsageType.Reset()
				if err := s.UsageType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"usage_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListDeviceLineKeySettingOKPositionsItemOutboundCallerIdsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListDeviceLineKeySettingOKPositionsItemOutboundCallerIdsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListDeviceLineKeySettingOKPositionsItemOutboundCallerIdsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListEmergencyAddressesOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListEmergencyAddressesOK) encodeFields(e *jx.Encoder) {
	{
		if s.EmergencyAddresses != nil {
			e.FieldStart("emergency_addresses")
			e.ArrStart()
			for _, elem := range s.EmergencyAddresses {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
	{
		if s.TotalRecords.Set {
			e.FieldStart("total_records")
			s.TotalRecords.Encode(e)
		}
	}
}

var jsonFieldsNameOfListEmergencyAddressesOK = [4]string{
	0: "emergency_addresses",
	1: "next_page_token",
	2: "page_size",
	3: "total_records",
}

// Decode decodes ListEmergencyAddressesOK from json.
func (s *ListEmergencyAddressesOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListEmergencyAddressesOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "emergency_addresses":
			if err := func() error {
				s.EmergencyAddresses = make([]ListEmergencyAddressesOKEmergencyAddressesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListEmergencyAddressesOKEmergencyAddressesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.EmergencyAddresses = append(s.EmergencyAddresses, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"emergency_addresses\"")
			}
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		case "total_records":
			if err := func() error {
				s.TotalRecords.Reset()
				if err := s.TotalRecords.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_records\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListEmergencyAddressesOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListEmergencyAddressesOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListEmergencyAddressesOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListEmergencyAddressesOKEmergencyAddressesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListEmergencyAddressesOKEmergencyAddressesItem) encodeFields(e *jx.Encoder) {
	{
		if s.AddressLine1.Set {
			e.FieldStart("address_line1")
			s.AddressLine1.Encode(e)
		}
	}
	{
		if s.AddressLine2.Set {
			e.FieldStart("address_line2")
			s.AddressLine2.Encode(e)
		}
	}
	{
		if s.City.Set {
			e.FieldStart("city")
			s.City.Encode(e)
		}
	}
	{
		if s.Country.Set {
			e.FieldStart("country")
			s.Country.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.IsDefault.Set {
			e.FieldStart("is_default")
			s.IsDefault.Encode(e)
		}
	}
	{
		if s.Level.Set {
			e.FieldStart("level")
			s.Level.Encode(e)
		}
	}
	{
		if s.Owner.Set {
			e.FieldStart("owner")
			s.Owner.Encode(e)
		}
	}
	{
		if s.Site.Set {
			e.FieldStart("site")
			s.Site.Encode(e)
		}
	}
	{
		if s.StateCode.Set {
			e.FieldStart("state_code")
			s.StateCode.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.Zip.Set {
			e.FieldStart("zip")
			s.Zip.Encode(e)
		}
	}
}

var jsonFieldsNameOfListEmergencyAddressesOKEmergencyAddressesItem = [12]string{
	0:  "address_line1",
	1:  "address_line2",
	2:  "city",
	3:  "country",
	4:  "id",
	5:  "is_default",
	6:  "level",
	7:  "owner",
	8:  "site",
	9:  "state_code",
	10: "status",
	11: "zip",
}

// Decode decodes ListEmergencyAddressesOKEmergencyAddressesItem from json.
func (s *ListEmergencyAddressesOKEmergencyAddressesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListEmergencyAddressesOKEmergencyAddressesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "address_line1":
			if err := func() error {
				s.AddressLine1.Reset()
				if err := s.AddressLine1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"address_line1\"")
			}
		case "address_line2":
			if err := func() error {
				s.AddressLine2.Reset()
				if err := s.AddressLine2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"address_line2\"")
			}
		case "city":
			if err := func() error {
				s.City.Reset()
				if err := s.City.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"city\"")
			}
		case "country":
			if err := func() error {
				s.Country.Reset()
				if err := s.Country.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "is_default":
			if err := func() error {
				s.IsDefault.Reset()
				if err := s.IsDefault.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"is_default\"")
			}
		case "level":
			if err := func() error {
				s.Level.Reset()
				if err := s.Level.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"level\"")
			}
		case "owner":
			if err := func() error {
				s.Owner.Reset()
				if err := s.Owner.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"owner\"")
			}
		case "site":
			if err := func() error {
				s.Site.Reset()
				if err := s.Site.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site\"")
			}
		case "state_code":
			if err := func() error {
				s.StateCode.Reset()
				if err := s.StateCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"state_code\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "zip":
			if err := func() error {
				s.Zip.Reset()
				if err := s.Zip.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zip\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListEmergencyAddressesOKEmergencyAddressesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListEmergencyAddressesOKEmergencyAddressesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListEmergencyAddressesOKEmergencyAddressesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListEmergencyAddressesOKEmergencyAddressesItemOwner) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListEmergencyAddressesOKEmergencyAddressesItemOwner) encodeFields(e *jx.Encoder) {
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfListEmergencyAddressesOKEmergencyAddressesItemOwner = [3]string{
	0: "extension_number",
	1: "id",
	2: "name",
}

// Decode decodes ListEmergencyAddressesOKEmergencyAddressesItemOwner from json.
func (s *ListEmergencyAddressesOKEmergencyAddressesItemOwner) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListEmergencyAddressesOKEmergencyAddressesItemOwner to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListEmergencyAddressesOKEmergencyAddressesItemOwner")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListEmergencyAddressesOKEmergencyAddressesItemOwner) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListEmergencyAddressesOKEmergencyAddressesItemOwner) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListEmergencyAddressesOKEmergencyAddressesItemSite) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListEmergencyAddressesOKEmergencyAddressesItemSite) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfListEmergencyAddressesOKEmergencyAddressesItemSite = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes ListEmergencyAddressesOKEmergencyAddressesItemSite from json.
func (s *ListEmergencyAddressesOKEmergencyAddressesItemSite) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListEmergencyAddressesOKEmergencyAddressesItemSite to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListEmergencyAddressesOKEmergencyAddressesItemSite")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListEmergencyAddressesOKEmergencyAddressesItemSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListEmergencyAddressesOKEmergencyAddressesItemSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListExtensionLevelInboundBlockRulesOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListExtensionLevelInboundBlockRulesOK) encodeFields(e *jx.Encoder) {
	{
		if s.ExtensionBlockedRules != nil {
			e.FieldStart("extension_blocked_rules")
			e.ArrStart()
			for _, elem := range s.ExtensionBlockedRules {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
}

var jsonFieldsNameOfListExtensionLevelInboundBlockRulesOK = [3]string{
	0: "extension_blocked_rules",
	1: "next_page_token",
	2: "page_size",
}

// Decode decodes ListExtensionLevelInboundBlockRulesOK from json.
func (s *ListExtensionLevelInboundBlockRulesOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListExtensionLevelInboundBlockRulesOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "extension_blocked_rules":
			if err := func() error {
				s.ExtensionBlockedRules = make([]ListExtensionLevelInboundBlockRulesOKExtensionBlockedRulesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListExtensionLevelInboundBlockRulesOKExtensionBlockedRulesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.ExtensionBlockedRules = append(s.ExtensionBlockedRules, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_blocked_rules\"")
			}
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListExtensionLevelInboundBlockRulesOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListExtensionLevelInboundBlockRulesOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListExtensionLevelInboundBlockRulesOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListExtensionLevelInboundBlockRulesOKExtensionBlockedRulesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListExtensionLevelInboundBlockRulesOKExtensionBlockedRulesItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.MatchType.Set {
			e.FieldStart("match_type")
			s.MatchType.Encode(e)
		}
	}
	{
		if s.PhoneNumber.Set {
			e.FieldStart("phone_number")
			s.PhoneNumber.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.BlockedNumber.Set {
			e.FieldStart("blocked_number")
			s.BlockedNumber.Encode(e)
		}
	}
	{
		if s.Country.Set {
			e.FieldStart("country")
			s.Country.Encode(e)
		}
	}
}

var jsonFieldsNameOfListExtensionLevelInboundBlockRulesOKExtensionBlockedRulesItem = [6]string{
	0: "id",
	1: "match_type",
	2: "phone_number",
	3: "type",
	4: "blocked_number",
	5: "country",
}

// Decode decodes ListExtensionLevelInboundBlockRulesOKExtensionBlockedRulesItem from json.
func (s *ListExtensionLevelInboundBlockRulesOKExtensionBlockedRulesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListExtensionLevelInboundBlockRulesOKExtensionBlockedRulesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "match_type":
			if err := func() error {
				s.MatchType.Reset()
				if err := s.MatchType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"match_type\"")
			}
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "blocked_number":
			if err := func() error {
				s.BlockedNumber.Reset()
				if err := s.BlockedNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"blocked_number\"")
			}
		case "country":
			if err := func() error {
				s.Country.Reset()
				if err := s.Country.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListExtensionLevelInboundBlockRulesOKExtensionBlockedRulesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListExtensionLevelInboundBlockRulesOKExtensionBlockedRulesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListExtensionLevelInboundBlockRulesOKExtensionBlockedRulesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListExternalContactsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListExternalContactsOK) encodeFields(e *jx.Encoder) {
	{
		if s.ExternalContacts != nil {
			e.FieldStart("external_contacts")
			e.ArrStart()
			for _, elem := range s.ExternalContacts {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
}

var jsonFieldsNameOfListExternalContactsOK = [3]string{
	0: "external_contacts",
	1: "next_page_token",
	2: "page_size",
}

// Decode decodes ListExternalContactsOK from json.
func (s *ListExternalContactsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListExternalContactsOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "external_contacts":
			if err := func() error {
				s.ExternalContacts = make([]ListExternalContactsOKExternalContactsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListExternalContactsOKExternalContactsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.ExternalContacts = append(s.ExternalContacts, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"external_contacts\"")
			}
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListExternalContactsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListExternalContactsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListExternalContactsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListExternalContactsOKExternalContactsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListExternalContactsOKExternalContactsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.Email.Set {
			e.FieldStart("email")
			s.Email.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ExternalContactID.Set {
			e.FieldStart("external_contact_id")
			s.ExternalContactID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.PhoneNumbers != nil {
			e.FieldStart("phone_numbers")
			e.ArrStart()
			for _, elem := range s.PhoneNumbers {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.AutoCallRecorded.Set {
			e.FieldStart("auto_call_recorded")
			s.AutoCallRecorded.Encode(e)
		}
	}
}

var jsonFieldsNameOfListExternalContactsOKExternalContactsItem = [8]string{
	0: "description",
	1: "email",
	2: "extension_number",
	3: "external_contact_id",
	4: "id",
	5: "name",
	6: "phone_numbers",
	7: "auto_call_recorded",
}

// Decode decodes ListExternalContactsOKExternalContactsItem from json.
func (s *ListExternalContactsOKExternalContactsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListExternalContactsOKExternalContactsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "email":
			if err := func() error {
				s.Email.Reset()
				if err := s.Email.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "external_contact_id":
			if err := func() error {
				s.ExternalContactID.Reset()
				if err := s.ExternalContactID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"external_contact_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "phone_numbers":
			if err := func() error {
				s.PhoneNumbers = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.PhoneNumbers = append(s.PhoneNumbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_numbers\"")
			}
		case "auto_call_recorded":
			if err := func() error {
				s.AutoCallRecorded.Reset()
				if err := s.AutoCallRecorded.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_call_recorded\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListExternalContactsOKExternalContactsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListExternalContactsOKExternalContactsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListExternalContactsOKExternalContactsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListFirmwareRulesOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListFirmwareRulesOK) encodeFields(e *jx.Encoder) {
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
	{
		if s.Rules != nil {
			e.FieldStart("rules")
			e.ArrStart()
			for _, elem := range s.Rules {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfListFirmwareRulesOK = [3]string{
	0: "next_page_token",
	1: "page_size",
	2: "rules",
}

// Decode decodes ListFirmwareRulesOK from json.
func (s *ListFirmwareRulesOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListFirmwareRulesOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		case "rules":
			if err := func() error {
				s.Rules = make([]ListFirmwareRulesOKRulesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListFirmwareRulesOKRulesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Rules = append(s.Rules, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rules\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListFirmwareRulesOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListFirmwareRulesOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListFirmwareRulesOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListFirmwareRulesOKRulesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListFirmwareRulesOKRulesItem) encodeFields(e *jx.Encoder) {
	{
		if s.RuleID.Set {
			e.FieldStart("rule_id")
			s.RuleID.Encode(e)
		}
	}
	{
		if s.Version.Set {
			e.FieldStart("version")
			s.Version.Encode(e)
		}
	}
	{
		if s.DeviceType.Set {
			e.FieldStart("device_type")
			s.DeviceType.Encode(e)
		}
	}
	{
		if s.DeviceModel.Set {
			e.FieldStart("device_model")
			s.DeviceModel.Encode(e)
		}
	}
}

var jsonFieldsNameOfListFirmwareRulesOKRulesItem = [4]string{
	0: "rule_id",
	1: "version",
	2: "device_type",
	3: "device_model",
}

// Decode decodes ListFirmwareRulesOKRulesItem from json.
func (s *ListFirmwareRulesOKRulesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListFirmwareRulesOKRulesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "rule_id":
			if err := func() error {
				s.RuleID.Reset()
				if err := s.RuleID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rule_id\"")
			}
		case "version":
			if err := func() error {
				s.Version.Reset()
				if err := s.Version.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"version\"")
			}
		case "device_type":
			if err := func() error {
				s.DeviceType.Reset()
				if err := s.DeviceType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_type\"")
			}
		case "device_model":
			if err := func() error {
				s.DeviceModel.Reset()
				if err := s.DeviceModel.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_model\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListFirmwareRulesOKRulesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListFirmwareRulesOKRulesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListFirmwareRulesOKRulesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListFirmwaresOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListFirmwaresOK) encodeFields(e *jx.Encoder) {
	{
		if s.Firmwares != nil {
			e.FieldStart("firmwares")
			e.ArrStart()
			for _, elem := range s.Firmwares {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfListFirmwaresOK = [1]string{
	0: "firmwares",
}

// Decode decodes ListFirmwaresOK from json.
func (s *ListFirmwaresOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListFirmwaresOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "firmwares":
			if err := func() error {
				s.Firmwares = make([]ListFirmwaresOKFirmwaresItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListFirmwaresOKFirmwaresItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Firmwares = append(s.Firmwares, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"firmwares\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListFirmwaresOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListFirmwaresOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListFirmwaresOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListFirmwaresOKFirmwaresItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListFirmwaresOKFirmwaresItem) encodeFields(e *jx.Encoder) {
	{
		if s.DeviceType.Set {
			e.FieldStart("device_type")
			s.DeviceType.Encode(e)
		}
	}
	{
		if s.DeviceModel.Set {
			e.FieldStart("device_model")
			s.DeviceModel.Encode(e)
		}
	}
	{
		if s.Versions != nil {
			e.FieldStart("versions")
			e.ArrStart()
			for _, elem := range s.Versions {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfListFirmwaresOKFirmwaresItem = [3]string{
	0: "device_type",
	1: "device_model",
	2: "versions",
}

// Decode decodes ListFirmwaresOKFirmwaresItem from json.
func (s *ListFirmwaresOKFirmwaresItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListFirmwaresOKFirmwaresItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "device_type":
			if err := func() error {
				s.DeviceType.Reset()
				if err := s.DeviceType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_type\"")
			}
		case "device_model":
			if err := func() error {
				s.DeviceModel.Reset()
				if err := s.DeviceModel.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_model\"")
			}
		case "versions":
			if err := func() error {
				s.Versions = make([]ListFirmwaresOKFirmwaresItemVersionsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListFirmwaresOKFirmwaresItemVersionsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Versions = append(s.Versions, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"versions\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListFirmwaresOKFirmwaresItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListFirmwaresOKFirmwaresItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListFirmwaresOKFirmwaresItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListFirmwaresOKFirmwaresItemVersionsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListFirmwaresOKFirmwaresItemVersionsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Version.Set {
			e.FieldStart("version")
			s.Version.Encode(e)
		}
	}
	{
		if s.UpdateLog.Set {
			e.FieldStart("update_log")
			s.UpdateLog.Encode(e)
		}
	}
	{
		if s.ExpireTime.Set {
			e.FieldStart("expire_time")
			s.ExpireTime.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
}

var jsonFieldsNameOfListFirmwaresOKFirmwaresItemVersionsItem = [4]string{
	0: "version",
	1: "update_log",
	2: "expire_time",
	3: "status",
}

// Decode decodes ListFirmwaresOKFirmwaresItemVersionsItem from json.
func (s *ListFirmwaresOKFirmwaresItemVersionsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListFirmwaresOKFirmwaresItemVersionsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "version":
			if err := func() error {
				s.Version.Reset()
				if err := s.Version.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"version\"")
			}
		case "update_log":
			if err := func() error {
				s.UpdateLog.Reset()
				if err := s.UpdateLog.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"update_log\"")
			}
		case "expire_time":
			if err := func() error {
				s.ExpireTime.Reset()
				if err := s.ExpireTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expire_time\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListFirmwaresOKFirmwaresItemVersionsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListFirmwaresOKFirmwaresItemVersionsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListFirmwaresOKFirmwaresItemVersionsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListGCPMembersOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListGCPMembersOK) encodeFields(e *jx.Encoder) {
	{
		if s.GroupCallPickupMember != nil {
			e.FieldStart("group_call_pickup_member")
			e.ArrStart()
			for _, elem := range s.GroupCallPickupMember {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
	{
		if s.TotalRecords.Set {
			e.FieldStart("total_records")
			s.TotalRecords.Encode(e)
		}
	}
}

var jsonFieldsNameOfListGCPMembersOK = [4]string{
	0: "group_call_pickup_member",
	1: "next_page_token",
	2: "page_size",
	3: "total_records",
}

// Decode decodes ListGCPMembersOK from json.
func (s *ListGCPMembersOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListGCPMembersOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "group_call_pickup_member":
			if err := func() error {
				s.GroupCallPickupMember = make([]ListGCPMembersOKGroupCallPickupMemberItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListGCPMembersOKGroupCallPickupMemberItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.GroupCallPickupMember = append(s.GroupCallPickupMember, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"group_call_pickup_member\"")
			}
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		case "total_records":
			if err := func() error {
				s.TotalRecords.Reset()
				if err := s.TotalRecords.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_records\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListGCPMembersOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListGCPMembersOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListGCPMembersOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListGCPMembersOKGroupCallPickupMemberItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListGCPMembersOKGroupCallPickupMemberItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
	{
		if s.ExtensionType.Set {
			e.FieldStart("extension_type")
			s.ExtensionType.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
}

var jsonFieldsNameOfListGCPMembersOKGroupCallPickupMemberItem = [5]string{
	0: "id",
	1: "display_name",
	2: "extension_id",
	3: "extension_type",
	4: "extension_number",
}

// Decode decodes ListGCPMembersOKGroupCallPickupMemberItem from json.
func (s *ListGCPMembersOKGroupCallPickupMemberItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListGCPMembersOKGroupCallPickupMemberItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		case "extension_type":
			if err := func() error {
				s.ExtensionType.Reset()
				if err := s.ExtensionType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_type\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListGCPMembersOKGroupCallPickupMemberItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListGCPMembersOKGroupCallPickupMemberItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListGCPMembersOKGroupCallPickupMemberItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListGCPOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListGCPOK) encodeFields(e *jx.Encoder) {
	{
		if s.GroupCallPickup != nil {
			e.FieldStart("group_call_pickup")
			e.ArrStart()
			for _, elem := range s.GroupCallPickup {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
	{
		if s.TotalRecords.Set {
			e.FieldStart("total_records")
			s.TotalRecords.Encode(e)
		}
	}
}

var jsonFieldsNameOfListGCPOK = [4]string{
	0: "group_call_pickup",
	1: "next_page_token",
	2: "page_size",
	3: "total_records",
}

// Decode decodes ListGCPOK from json.
func (s *ListGCPOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListGCPOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "group_call_pickup":
			if err := func() error {
				s.GroupCallPickup = make([]ListGCPOKGroupCallPickupItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListGCPOKGroupCallPickupItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.GroupCallPickup = append(s.GroupCallPickup, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"group_call_pickup\"")
			}
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		case "total_records":
			if err := func() error {
				s.TotalRecords.Reset()
				if err := s.TotalRecords.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_records\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListGCPOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListGCPOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListGCPOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListGCPOKGroupCallPickupItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListGCPOKGroupCallPickupItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.MemberCount.Set {
			e.FieldStart("member_count")
			s.MemberCount.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.Delay.Set {
			e.FieldStart("delay")
			s.Delay.Encode(e)
		}
	}
	{
		if s.CostCenter.Set {
			e.FieldStart("cost_center")
			s.CostCenter.Encode(e)
		}
	}
	{
		if s.Department.Set {
			e.FieldStart("department")
			s.Department.Encode(e)
		}
	}
	{
		if s.Site.Set {
			e.FieldStart("site")
			s.Site.Encode(e)
		}
	}
	{
		if s.DirectedCallPickup.Set {
			e.FieldStart("directed_call_pickup")
			s.DirectedCallPickup.Encode(e)
		}
	}
}

var jsonFieldsNameOfListGCPOKGroupCallPickupItem = [11]string{
	0:  "id",
	1:  "display_name",
	2:  "extension_id",
	3:  "extension_number",
	4:  "member_count",
	5:  "description",
	6:  "delay",
	7:  "cost_center",
	8:  "department",
	9:  "site",
	10: "directed_call_pickup",
}

// Decode decodes ListGCPOKGroupCallPickupItem from json.
func (s *ListGCPOKGroupCallPickupItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListGCPOKGroupCallPickupItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "member_count":
			if err := func() error {
				s.MemberCount.Reset()
				if err := s.MemberCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"member_count\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "delay":
			if err := func() error {
				s.Delay.Reset()
				if err := s.Delay.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delay\"")
			}
		case "cost_center":
			if err := func() error {
				s.CostCenter.Reset()
				if err := s.CostCenter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cost_center\"")
			}
		case "department":
			if err := func() error {
				s.Department.Reset()
				if err := s.Department.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"department\"")
			}
		case "site":
			if err := func() error {
				s.Site.Reset()
				if err := s.Site.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site\"")
			}
		case "directed_call_pickup":
			if err := func() error {
				s.DirectedCallPickup.Reset()
				if err := s.DirectedCallPickup.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"directed_call_pickup\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListGCPOKGroupCallPickupItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListGCPOKGroupCallPickupItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListGCPOKGroupCallPickupItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListGCPOKGroupCallPickupItemSite) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListGCPOKGroupCallPickupItemSite) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfListGCPOKGroupCallPickupItemSite = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes ListGCPOKGroupCallPickupItemSite from json.
func (s *ListGCPOKGroupCallPickupItemSite) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListGCPOKGroupCallPickupItemSite to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListGCPOKGroupCallPickupItemSite")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListGCPOKGroupCallPickupItemSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListGCPOKGroupCallPickupItemSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListLineKeySettingOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListLineKeySettingOK) encodeFields(e *jx.Encoder) {
	{
		if s.LineKeys != nil {
			e.FieldStart("line_keys")
			e.ArrStart()
			for _, elem := range s.LineKeys {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfListLineKeySettingOK = [1]string{
	0: "line_keys",
}

// Decode decodes ListLineKeySettingOK from json.
func (s *ListLineKeySettingOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListLineKeySettingOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "line_keys":
			if err := func() error {
				s.LineKeys = make([]ListLineKeySettingOKLineKeysItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListLineKeySettingOKLineKeysItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.LineKeys = append(s.LineKeys, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"line_keys\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListLineKeySettingOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListLineKeySettingOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListLineKeySettingOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListLineKeySettingOKLineKeysItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListLineKeySettingOKLineKeysItem) encodeFields(e *jx.Encoder) {
	{
		if s.Alias.Set {
			e.FieldStart("alias")
			s.Alias.Encode(e)
		}
	}
	{
		if s.Index.Set {
			e.FieldStart("index")
			s.Index.Encode(e)
		}
	}
	{
		if s.KeyAssignment.Set {
			e.FieldStart("key_assignment")
			s.KeyAssignment.Encode(e)
		}
	}
	{
		if s.LineKeyID.Set {
			e.FieldStart("line_key_id")
			s.LineKeyID.Encode(e)
		}
	}
	{
		if s.OutboundCallerID.Set {
			e.FieldStart("outbound_caller_id")
			s.OutboundCallerID.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfListLineKeySettingOKLineKeysItem = [6]string{
	0: "alias",
	1: "index",
	2: "key_assignment",
	3: "line_key_id",
	4: "outbound_caller_id",
	5: "type",
}

// Decode decodes ListLineKeySettingOKLineKeysItem from json.
func (s *ListLineKeySettingOKLineKeysItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListLineKeySettingOKLineKeysItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "alias":
			if err := func() error {
				s.Alias.Reset()
				if err := s.Alias.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"alias\"")
			}
		case "index":
			if err := func() error {
				s.Index.Reset()
				if err := s.Index.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"index\"")
			}
		case "key_assignment":
			if err := func() error {
				s.KeyAssignment.Reset()
				if err := s.KeyAssignment.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"key_assignment\"")
			}
		case "line_key_id":
			if err := func() error {
				s.LineKeyID.Reset()
				if err := s.LineKeyID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"line_key_id\"")
			}
		case "outbound_caller_id":
			if err := func() error {
				s.OutboundCallerID.Reset()
				if err := s.OutboundCallerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"outbound_caller_id\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListLineKeySettingOKLineKeysItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListLineKeySettingOKLineKeysItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListLineKeySettingOKLineKeysItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListLineKeySettingOKLineKeysItemKeyAssignment) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListLineKeySettingOKLineKeysItemKeyAssignment) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.PhoneNumber.Set {
			e.FieldStart("phone_number")
			s.PhoneNumber.Encode(e)
		}
	}
	{
		if s.RetrievalCode.Set {
			e.FieldStart("retrieval_code")
			s.RetrievalCode.Encode(e)
		}
	}
	{
		if s.SpeedDialNumber.Set {
			e.FieldStart("speed_dial_number")
			s.SpeedDialNumber.Encode(e)
		}
	}
}

var jsonFieldsNameOfListLineKeySettingOKLineKeysItemKeyAssignment = [6]string{
	0: "display_name",
	1: "extension_id",
	2: "extension_number",
	3: "phone_number",
	4: "retrieval_code",
	5: "speed_dial_number",
}

// Decode decodes ListLineKeySettingOKLineKeysItemKeyAssignment from json.
func (s *ListLineKeySettingOKLineKeysItemKeyAssignment) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListLineKeySettingOKLineKeysItemKeyAssignment to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		case "retrieval_code":
			if err := func() error {
				s.RetrievalCode.Reset()
				if err := s.RetrievalCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"retrieval_code\"")
			}
		case "speed_dial_number":
			if err := func() error {
				s.SpeedDialNumber.Reset()
				if err := s.SpeedDialNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"speed_dial_number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListLineKeySettingOKLineKeysItemKeyAssignment")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListLineKeySettingOKLineKeysItemKeyAssignment) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListLineKeySettingOKLineKeysItemKeyAssignment) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListLocationsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListLocationsOK) encodeFields(e *jx.Encoder) {
	{
		if s.Locations != nil {
			e.FieldStart("locations")
			e.ArrStart()
			for _, elem := range s.Locations {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
}

var jsonFieldsNameOfListLocationsOK = [3]string{
	0: "locations",
	1: "next_page_token",
	2: "page_size",
}

// Decode decodes ListLocationsOK from json.
func (s *ListLocationsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListLocationsOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "locations":
			if err := func() error {
				s.Locations = make([]ListLocationsOKLocationsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListLocationsOKLocationsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Locations = append(s.Locations, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locations\"")
			}
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListLocationsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListLocationsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListLocationsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListLocationsOKLocationsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListLocationsOKLocationsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Bssid.Set {
			e.FieldStart("bssid")
			s.Bssid.Encode(e)
		}
	}
	{
		if s.Elin.Set {
			e.FieldStart("elin")
			s.Elin.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Identifier.Set {
			e.FieldStart("identifier")
			s.Identifier.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.NetworkSwitches != nil {
			e.FieldStart("network_switches")
			e.ArrStart()
			for _, elem := range s.NetworkSwitches {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ParentLocationID.Set {
			e.FieldStart("parent_location_id")
			s.ParentLocationID.Encode(e)
		}
	}
	{
		if s.PrivateIP.Set {
			e.FieldStart("private_ip")
			s.PrivateIP.Encode(e)
		}
	}
	{
		if s.PublicIP.Set {
			e.FieldStart("public_ip")
			s.PublicIP.Encode(e)
		}
	}
	{
		if s.SipGroup.Set {
			e.FieldStart("sip_group")
			s.SipGroup.Encode(e)
		}
	}
	{
		if s.Site.Set {
			e.FieldStart("site")
			s.Site.Encode(e)
		}
	}
	{
		if s.EmergencyAddress.Set {
			e.FieldStart("emergency_address")
			s.EmergencyAddress.Encode(e)
		}
	}
	{
		if s.MinimumMatchCriteria.Set {
			e.FieldStart("minimum_match_criteria")
			s.MinimumMatchCriteria.Encode(e)
		}
	}
}

var jsonFieldsNameOfListLocationsOKLocationsItem = [13]string{
	0:  "bssid",
	1:  "elin",
	2:  "id",
	3:  "identifier",
	4:  "name",
	5:  "network_switches",
	6:  "parent_location_id",
	7:  "private_ip",
	8:  "public_ip",
	9:  "sip_group",
	10: "site",
	11: "emergency_address",
	12: "minimum_match_criteria",
}

// Decode decodes ListLocationsOKLocationsItem from json.
func (s *ListLocationsOKLocationsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListLocationsOKLocationsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "bssid":
			if err := func() error {
				s.Bssid.Reset()
				if err := s.Bssid.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bssid\"")
			}
		case "elin":
			if err := func() error {
				s.Elin.Reset()
				if err := s.Elin.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"elin\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "identifier":
			if err := func() error {
				s.Identifier.Reset()
				if err := s.Identifier.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"identifier\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "network_switches":
			if err := func() error {
				s.NetworkSwitches = make([]ListLocationsOKLocationsItemNetworkSwitchesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListLocationsOKLocationsItemNetworkSwitchesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.NetworkSwitches = append(s.NetworkSwitches, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"network_switches\"")
			}
		case "parent_location_id":
			if err := func() error {
				s.ParentLocationID.Reset()
				if err := s.ParentLocationID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"parent_location_id\"")
			}
		case "private_ip":
			if err := func() error {
				s.PrivateIP.Reset()
				if err := s.PrivateIP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"private_ip\"")
			}
		case "public_ip":
			if err := func() error {
				s.PublicIP.Reset()
				if err := s.PublicIP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"public_ip\"")
			}
		case "sip_group":
			if err := func() error {
				s.SipGroup.Reset()
				if err := s.SipGroup.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sip_group\"")
			}
		case "site":
			if err := func() error {
				s.Site.Reset()
				if err := s.Site.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site\"")
			}
		case "emergency_address":
			if err := func() error {
				s.EmergencyAddress.Reset()
				if err := s.EmergencyAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"emergency_address\"")
			}
		case "minimum_match_criteria":
			if err := func() error {
				s.MinimumMatchCriteria.Reset()
				if err := s.MinimumMatchCriteria.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"minimum_match_criteria\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListLocationsOKLocationsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListLocationsOKLocationsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListLocationsOKLocationsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListLocationsOKLocationsItemElin) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListLocationsOKLocationsItemElin) encodeFields(e *jx.Encoder) {
	{
		if s.PhoneNumber.Set {
			e.FieldStart("phone_number")
			s.PhoneNumber.Encode(e)
		}
	}
	{
		if s.PhoneNumberID.Set {
			e.FieldStart("phone_number_id")
			s.PhoneNumberID.Encode(e)
		}
	}
}

var jsonFieldsNameOfListLocationsOKLocationsItemElin = [2]string{
	0: "phone_number",
	1: "phone_number_id",
}

// Decode decodes ListLocationsOKLocationsItemElin from json.
func (s *ListLocationsOKLocationsItemElin) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListLocationsOKLocationsItemElin to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		case "phone_number_id":
			if err := func() error {
				s.PhoneNumberID.Reset()
				if err := s.PhoneNumberID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListLocationsOKLocationsItemElin")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListLocationsOKLocationsItemElin) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListLocationsOKLocationsItemElin) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListLocationsOKLocationsItemEmergencyAddress) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListLocationsOKLocationsItemEmergencyAddress) encodeFields(e *jx.Encoder) {
	{
		if s.AddressLine1.Set {
			e.FieldStart("address_line1")
			s.AddressLine1.Encode(e)
		}
	}
	{
		if s.AddressLine2.Set {
			e.FieldStart("address_line2")
			s.AddressLine2.Encode(e)
		}
	}
	{
		if s.City.Set {
			e.FieldStart("city")
			s.City.Encode(e)
		}
	}
	{
		if s.StateCode.Set {
			e.FieldStart("state_code")
			s.StateCode.Encode(e)
		}
	}
	{
		if s.Country.Set {
			e.FieldStart("country")
			s.Country.Encode(e)
		}
	}
	{
		if s.Zip.Set {
			e.FieldStart("zip")
			s.Zip.Encode(e)
		}
	}
	{
		if s.VatNumber.Set {
			e.FieldStart("vat_number")
			s.VatNumber.Encode(e)
		}
	}
}

var jsonFieldsNameOfListLocationsOKLocationsItemEmergencyAddress = [7]string{
	0: "address_line1",
	1: "address_line2",
	2: "city",
	3: "state_code",
	4: "country",
	5: "zip",
	6: "vat_number",
}

// Decode decodes ListLocationsOKLocationsItemEmergencyAddress from json.
func (s *ListLocationsOKLocationsItemEmergencyAddress) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListLocationsOKLocationsItemEmergencyAddress to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "address_line1":
			if err := func() error {
				s.AddressLine1.Reset()
				if err := s.AddressLine1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"address_line1\"")
			}
		case "address_line2":
			if err := func() error {
				s.AddressLine2.Reset()
				if err := s.AddressLine2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"address_line2\"")
			}
		case "city":
			if err := func() error {
				s.City.Reset()
				if err := s.City.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"city\"")
			}
		case "state_code":
			if err := func() error {
				s.StateCode.Reset()
				if err := s.StateCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"state_code\"")
			}
		case "country":
			if err := func() error {
				s.Country.Reset()
				if err := s.Country.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country\"")
			}
		case "zip":
			if err := func() error {
				s.Zip.Reset()
				if err := s.Zip.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zip\"")
			}
		case "vat_number":
			if err := func() error {
				s.VatNumber.Reset()
				if err := s.VatNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vat_number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListLocationsOKLocationsItemEmergencyAddress")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListLocationsOKLocationsItemEmergencyAddress) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListLocationsOKLocationsItemEmergencyAddress) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListLocationsOKLocationsItemNetworkSwitchesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListLocationsOKLocationsItemNetworkSwitchesItem) encodeFields(e *jx.Encoder) {
	{
		if s.MACAddress.Set {
			e.FieldStart("mac_address")
			s.MACAddress.Encode(e)
		}
	}
	{
		if s.Port.Set {
			e.FieldStart("port")
			s.Port.Encode(e)
		}
	}
	{
		if s.PortPrefix.Set {
			e.FieldStart("port_prefix")
			s.PortPrefix.Encode(e)
		}
	}
	{
		if s.PortRangeFrom.Set {
			e.FieldStart("port_range_from")
			s.PortRangeFrom.Encode(e)
		}
	}
	{
		if s.PortRangeTo.Set {
			e.FieldStart("port_range_to")
			s.PortRangeTo.Encode(e)
		}
	}
}

var jsonFieldsNameOfListLocationsOKLocationsItemNetworkSwitchesItem = [5]string{
	0: "mac_address",
	1: "port",
	2: "port_prefix",
	3: "port_range_from",
	4: "port_range_to",
}

// Decode decodes ListLocationsOKLocationsItemNetworkSwitchesItem from json.
func (s *ListLocationsOKLocationsItemNetworkSwitchesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListLocationsOKLocationsItemNetworkSwitchesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "mac_address":
			if err := func() error {
				s.MACAddress.Reset()
				if err := s.MACAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mac_address\"")
			}
		case "port":
			if err := func() error {
				s.Port.Reset()
				if err := s.Port.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"port\"")
			}
		case "port_prefix":
			if err := func() error {
				s.PortPrefix.Reset()
				if err := s.PortPrefix.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"port_prefix\"")
			}
		case "port_range_from":
			if err := func() error {
				s.PortRangeFrom.Reset()
				if err := s.PortRangeFrom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"port_range_from\"")
			}
		case "port_range_to":
			if err := func() error {
				s.PortRangeTo.Reset()
				if err := s.PortRangeTo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"port_range_to\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListLocationsOKLocationsItemNetworkSwitchesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListLocationsOKLocationsItemNetworkSwitchesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListLocationsOKLocationsItemNetworkSwitchesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListLocationsOKLocationsItemSipGroup) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListLocationsOKLocationsItemSipGroup) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
}

var jsonFieldsNameOfListLocationsOKLocationsItemSipGroup = [2]string{
	0: "display_name",
	1: "id",
}

// Decode decodes ListLocationsOKLocationsItemSipGroup from json.
func (s *ListLocationsOKLocationsItemSipGroup) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListLocationsOKLocationsItemSipGroup to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListLocationsOKLocationsItemSipGroup")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListLocationsOKLocationsItemSipGroup) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListLocationsOKLocationsItemSipGroup) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListLocationsOKLocationsItemSite) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListLocationsOKLocationsItemSite) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfListLocationsOKLocationsItemSite = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes ListLocationsOKLocationsItemSite from json.
func (s *ListLocationsOKLocationsItemSite) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListLocationsOKLocationsItemSite to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListLocationsOKLocationsItemSite")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListLocationsOKLocationsItemSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListLocationsOKLocationsItemSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListMembersOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListMembersOK) encodeFields(e *jx.Encoder) {
	{
		if s.Members != nil {
			e.FieldStart("members")
			e.ArrStart()
			for _, elem := range s.Members {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
	{
		if s.TotalRecords.Set {
			e.FieldStart("total_records")
			s.TotalRecords.Encode(e)
		}
	}
}

var jsonFieldsNameOfListMembersOK = [4]string{
	0: "members",
	1: "next_page_token",
	2: "page_size",
	3: "total_records",
}

// Decode decodes ListMembersOK from json.
func (s *ListMembersOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListMembersOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "members":
			if err := func() error {
				s.Members = make([]ListMembersOKMembersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListMembersOKMembersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Members = append(s.Members, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"members\"")
			}
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		case "total_records":
			if err := func() error {
				s.TotalRecords.Reset()
				if err := s.TotalRecords.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_records\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListMembersOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListMembersOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListMembersOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListMembersOKMembersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListMembersOKMembersItem) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ExtensionType.Set {
			e.FieldStart("extension_type")
			s.ExtensionType.Encode(e)
		}
	}
}

var jsonFieldsNameOfListMembersOKMembersItem = [4]string{
	0: "display_name",
	1: "extension_id",
	2: "extension_number",
	3: "extension_type",
}

// Decode decodes ListMembersOKMembersItem from json.
func (s *ListMembersOKMembersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListMembersOKMembersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "extension_type":
			if err := func() error {
				s.ExtensionType.Reset()
				if err := s.ExtensionType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListMembersOKMembersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListMembersOKMembersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListMembersOKMembersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListMonitoringGroupOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListMonitoringGroupOK) encodeFields(e *jx.Encoder) {
	{
		if s.MonitoringGroups != nil {
			e.FieldStart("monitoring_groups")
			e.ArrStart()
			for _, elem := range s.MonitoringGroups {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
	{
		if s.TotalRecords.Set {
			e.FieldStart("total_records")
			s.TotalRecords.Encode(e)
		}
	}
}

var jsonFieldsNameOfListMonitoringGroupOK = [4]string{
	0: "monitoring_groups",
	1: "next_page_token",
	2: "page_size",
	3: "total_records",
}

// Decode decodes ListMonitoringGroupOK from json.
func (s *ListMonitoringGroupOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListMonitoringGroupOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "monitoring_groups":
			if err := func() error {
				s.MonitoringGroups = make([]ListMonitoringGroupOKMonitoringGroupsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListMonitoringGroupOKMonitoringGroupsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.MonitoringGroups = append(s.MonitoringGroups, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"monitoring_groups\"")
			}
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		case "total_records":
			if err := func() error {
				s.TotalRecords.Reset()
				if err := s.TotalRecords.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_records\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListMonitoringGroupOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListMonitoringGroupOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListMonitoringGroupOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListMonitoringGroupOKMonitoringGroupsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListMonitoringGroupOKMonitoringGroupsItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.MonitorMembersCount.Set {
			e.FieldStart("monitor_members_count")
			s.MonitorMembersCount.Encode(e)
		}
	}
	{
		if s.MonitoredMembersCount.Set {
			e.FieldStart("monitored_members_count")
			s.MonitoredMembersCount.Encode(e)
		}
	}
	{
		if s.MonitoringPrivileges != nil {
			e.FieldStart("monitoring_privileges")
			e.ArrStart()
			for _, elem := range s.MonitoringPrivileges {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Prompt.Set {
			e.FieldStart("prompt")
			s.Prompt.Encode(e)
		}
	}
	{
		if s.Site.Set {
			e.FieldStart("site")
			s.Site.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfListMonitoringGroupOKMonitoringGroupsItem = [8]string{
	0: "id",
	1: "monitor_members_count",
	2: "monitored_members_count",
	3: "monitoring_privileges",
	4: "name",
	5: "prompt",
	6: "site",
	7: "type",
}

// Decode decodes ListMonitoringGroupOKMonitoringGroupsItem from json.
func (s *ListMonitoringGroupOKMonitoringGroupsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListMonitoringGroupOKMonitoringGroupsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "monitor_members_count":
			if err := func() error {
				s.MonitorMembersCount.Reset()
				if err := s.MonitorMembersCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"monitor_members_count\"")
			}
		case "monitored_members_count":
			if err := func() error {
				s.MonitoredMembersCount.Reset()
				if err := s.MonitoredMembersCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"monitored_members_count\"")
			}
		case "monitoring_privileges":
			if err := func() error {
				s.MonitoringPrivileges = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.MonitoringPrivileges = append(s.MonitoringPrivileges, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"monitoring_privileges\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "prompt":
			if err := func() error {
				s.Prompt.Reset()
				if err := s.Prompt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"prompt\"")
			}
		case "site":
			if err := func() error {
				s.Site.Reset()
				if err := s.Site.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListMonitoringGroupOKMonitoringGroupsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListMonitoringGroupOKMonitoringGroupsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListMonitoringGroupOKMonitoringGroupsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListMonitoringGroupOKMonitoringGroupsItemSite) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListMonitoringGroupOKMonitoringGroupsItemSite) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfListMonitoringGroupOKMonitoringGroupsItemSite = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes ListMonitoringGroupOKMonitoringGroupsItemSite from json.
func (s *ListMonitoringGroupOKMonitoringGroupsItemSite) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListMonitoringGroupOKMonitoringGroupsItemSite to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListMonitoringGroupOKMonitoringGroupsItemSite")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListMonitoringGroupOKMonitoringGroupsItemSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListMonitoringGroupOKMonitoringGroupsItemSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListPastCallMetricsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListPastCallMetricsOK) encodeFields(e *jx.Encoder) {
	{
		if s.CallLogs != nil {
			e.FieldStart("call_logs")
			e.ArrStart()
			for _, elem := range s.CallLogs {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.From.Set {
			e.FieldStart("from")
			s.From.Encode(e)
		}
	}
	{
		if s.To.Set {
			e.FieldStart("to")
			s.To.Encode(e)
		}
	}
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
	{
		if s.TotalRecords.Set {
			e.FieldStart("total_records")
			s.TotalRecords.Encode(e)
		}
	}
}

var jsonFieldsNameOfListPastCallMetricsOK = [6]string{
	0: "call_logs",
	1: "from",
	2: "to",
	3: "next_page_token",
	4: "page_size",
	5: "total_records",
}

// Decode decodes ListPastCallMetricsOK from json.
func (s *ListPastCallMetricsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListPastCallMetricsOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "call_logs":
			if err := func() error {
				s.CallLogs = make([]ListPastCallMetricsOKCallLogsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListPastCallMetricsOKCallLogsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CallLogs = append(s.CallLogs, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_logs\"")
			}
		case "from":
			if err := func() error {
				s.From.Reset()
				if err := s.From.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"from\"")
			}
		case "to":
			if err := func() error {
				s.To.Reset()
				if err := s.To.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"to\"")
			}
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		case "total_records":
			if err := func() error {
				s.TotalRecords.Reset()
				if err := s.TotalRecords.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_records\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListPastCallMetricsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListPastCallMetricsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListPastCallMetricsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListPastCallMetricsOKCallLogsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListPastCallMetricsOKCallLogsItem) encodeFields(e *jx.Encoder) {
	{
		if s.CallID.Set {
			e.FieldStart("call_id")
			s.CallID.Encode(e)
		}
	}
	{
		if s.Callee.Set {
			e.FieldStart("callee")
			s.Callee.Encode(e)
		}
	}
	{
		if s.Caller.Set {
			e.FieldStart("caller")
			s.Caller.Encode(e)
		}
	}
	{
		if s.DateTime.Set {
			e.FieldStart("date_time")
			s.DateTime.Encode(e)
		}
	}
	{
		if s.Direction.Set {
			e.FieldStart("direction")
			s.Direction.Encode(e)
		}
	}
	{
		if s.Duration.Set {
			e.FieldStart("duration")
			s.Duration.Encode(e)
		}
	}
	{
		if s.Mos.Set {
			e.FieldStart("mos")
			s.Mos.Encode(e)
		}
	}
}

var jsonFieldsNameOfListPastCallMetricsOKCallLogsItem = [7]string{
	0: "call_id",
	1: "callee",
	2: "caller",
	3: "date_time",
	4: "direction",
	5: "duration",
	6: "mos",
}

// Decode decodes ListPastCallMetricsOKCallLogsItem from json.
func (s *ListPastCallMetricsOKCallLogsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListPastCallMetricsOKCallLogsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "call_id":
			if err := func() error {
				s.CallID.Reset()
				if err := s.CallID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_id\"")
			}
		case "callee":
			if err := func() error {
				s.Callee.Reset()
				if err := s.Callee.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee\"")
			}
		case "caller":
			if err := func() error {
				s.Caller.Reset()
				if err := s.Caller.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller\"")
			}
		case "date_time":
			if err := func() error {
				s.DateTime.Reset()
				if err := s.DateTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"date_time\"")
			}
		case "direction":
			if err := func() error {
				s.Direction.Reset()
				if err := s.Direction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"direction\"")
			}
		case "duration":
			if err := func() error {
				s.Duration.Reset()
				if err := s.Duration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"duration\"")
			}
		case "mos":
			if err := func() error {
				s.Mos.Reset()
				if err := s.Mos.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mos\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListPastCallMetricsOKCallLogsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListPastCallMetricsOKCallLogsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListPastCallMetricsOKCallLogsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListPastCallMetricsOKCallLogsItemCallee) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListPastCallMetricsOKCallLogsItemCallee) encodeFields(e *jx.Encoder) {
	{
		if s.Codec.Set {
			e.FieldStart("codec")
			s.Codec.Encode(e)
		}
	}
	{
		if s.DevicePrivateIP.Set {
			e.FieldStart("device_private_ip")
			s.DevicePrivateIP.Encode(e)
		}
	}
	{
		if s.DevicePublicIP.Set {
			e.FieldStart("device_public_ip")
			s.DevicePublicIP.Encode(e)
		}
	}
	{
		if s.DeviceType.Set {
			e.FieldStart("device_type")
			s.DeviceType.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.Headset.Set {
			e.FieldStart("headset")
			s.Headset.Encode(e)
		}
	}
	{
		if s.Isp.Set {
			e.FieldStart("isp")
			s.Isp.Encode(e)
		}
	}
	{
		if s.Microphone.Set {
			e.FieldStart("microphone")
			s.Microphone.Encode(e)
		}
	}
	{
		if s.PhoneNumber.Set {
			e.FieldStart("phone_number")
			s.PhoneNumber.Encode(e)
		}
	}
	{
		if s.SiteID.Set {
			e.FieldStart("site_id")
			s.SiteID.Encode(e)
		}
	}
}

var jsonFieldsNameOfListPastCallMetricsOKCallLogsItemCallee = [10]string{
	0: "codec",
	1: "device_private_ip",
	2: "device_public_ip",
	3: "device_type",
	4: "extension_number",
	5: "headset",
	6: "isp",
	7: "microphone",
	8: "phone_number",
	9: "site_id",
}

// Decode decodes ListPastCallMetricsOKCallLogsItemCallee from json.
func (s *ListPastCallMetricsOKCallLogsItemCallee) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListPastCallMetricsOKCallLogsItemCallee to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "codec":
			if err := func() error {
				s.Codec.Reset()
				if err := s.Codec.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"codec\"")
			}
		case "device_private_ip":
			if err := func() error {
				s.DevicePrivateIP.Reset()
				if err := s.DevicePrivateIP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_private_ip\"")
			}
		case "device_public_ip":
			if err := func() error {
				s.DevicePublicIP.Reset()
				if err := s.DevicePublicIP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_public_ip\"")
			}
		case "device_type":
			if err := func() error {
				s.DeviceType.Reset()
				if err := s.DeviceType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_type\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "headset":
			if err := func() error {
				s.Headset.Reset()
				if err := s.Headset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"headset\"")
			}
		case "isp":
			if err := func() error {
				s.Isp.Reset()
				if err := s.Isp.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"isp\"")
			}
		case "microphone":
			if err := func() error {
				s.Microphone.Reset()
				if err := s.Microphone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"microphone\"")
			}
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		case "site_id":
			if err := func() error {
				s.SiteID.Reset()
				if err := s.SiteID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListPastCallMetricsOKCallLogsItemCallee")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListPastCallMetricsOKCallLogsItemCallee) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListPastCallMetricsOKCallLogsItemCallee) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListPastCallMetricsOKCallLogsItemCaller) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListPastCallMetricsOKCallLogsItemCaller) encodeFields(e *jx.Encoder) {
	{
		if s.Codec.Set {
			e.FieldStart("codec")
			s.Codec.Encode(e)
		}
	}
	{
		if s.DevicePrivateIP.Set {
			e.FieldStart("device_private_ip")
			s.DevicePrivateIP.Encode(e)
		}
	}
	{
		if s.DevicePublicIP.Set {
			e.FieldStart("device_public_ip")
			s.DevicePublicIP.Encode(e)
		}
	}
	{
		if s.DeviceType.Set {
			e.FieldStart("device_type")
			s.DeviceType.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.Headset.Set {
			e.FieldStart("headset")
			s.Headset.Encode(e)
		}
	}
	{
		if s.Isp.Set {
			e.FieldStart("isp")
			s.Isp.Encode(e)
		}
	}
	{
		if s.Microphone.Set {
			e.FieldStart("microphone")
			s.Microphone.Encode(e)
		}
	}
	{
		if s.PhoneNumber.Set {
			e.FieldStart("phone_number")
			s.PhoneNumber.Encode(e)
		}
	}
	{
		if s.SiteID.Set {
			e.FieldStart("site_id")
			s.SiteID.Encode(e)
		}
	}
}

var jsonFieldsNameOfListPastCallMetricsOKCallLogsItemCaller = [10]string{
	0: "codec",
	1: "device_private_ip",
	2: "device_public_ip",
	3: "device_type",
	4: "extension_number",
	5: "headset",
	6: "isp",
	7: "microphone",
	8: "phone_number",
	9: "site_id",
}

// Decode decodes ListPastCallMetricsOKCallLogsItemCaller from json.
func (s *ListPastCallMetricsOKCallLogsItemCaller) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListPastCallMetricsOKCallLogsItemCaller to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "codec":
			if err := func() error {
				s.Codec.Reset()
				if err := s.Codec.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"codec\"")
			}
		case "device_private_ip":
			if err := func() error {
				s.DevicePrivateIP.Reset()
				if err := s.DevicePrivateIP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_private_ip\"")
			}
		case "device_public_ip":
			if err := func() error {
				s.DevicePublicIP.Reset()
				if err := s.DevicePublicIP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_public_ip\"")
			}
		case "device_type":
			if err := func() error {
				s.DeviceType.Reset()
				if err := s.DeviceType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_type\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "headset":
			if err := func() error {
				s.Headset.Reset()
				if err := s.Headset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"headset\"")
			}
		case "isp":
			if err := func() error {
				s.Isp.Reset()
				if err := s.Isp.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"isp\"")
			}
		case "microphone":
			if err := func() error {
				s.Microphone.Reset()
				if err := s.Microphone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"microphone\"")
			}
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		case "site_id":
			if err := func() error {
				s.SiteID.Reset()
				if err := s.SiteID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListPastCallMetricsOKCallLogsItemCaller")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListPastCallMetricsOKCallLogsItemCaller) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListPastCallMetricsOKCallLogsItemCaller) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListPeeringPhoneNumbersOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListPeeringPhoneNumbersOK) encodeFields(e *jx.Encoder) {
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.Numbers != nil {
			e.FieldStart("numbers")
			e.ArrStart()
			for _, elem := range s.Numbers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalRecords.Set {
			e.FieldStart("total_records")
			s.TotalRecords.Encode(e)
		}
	}
}

var jsonFieldsNameOfListPeeringPhoneNumbersOK = [3]string{
	0: "next_page_token",
	1: "numbers",
	2: "total_records",
}

// Decode decodes ListPeeringPhoneNumbersOK from json.
func (s *ListPeeringPhoneNumbersOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListPeeringPhoneNumbersOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "numbers":
			if err := func() error {
				s.Numbers = make([]ListPeeringPhoneNumbersOKNumbersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListPeeringPhoneNumbersOKNumbersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Numbers = append(s.Numbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"numbers\"")
			}
		case "total_records":
			if err := func() error {
				s.TotalRecords.Reset()
				if err := s.TotalRecords.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_records\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListPeeringPhoneNumbersOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListPeeringPhoneNumbersOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListPeeringPhoneNumbersOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListPeeringPhoneNumbersOKNumbersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListPeeringPhoneNumbersOKNumbersItem) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("assigned")
		e.Int(s.Assigned)
	}
	{
		if s.BillingReferenceID.Set {
			e.FieldStart("billing_reference_id")
			s.BillingReferenceID.Encode(e)
		}
	}
	{
		e.FieldStart("phone_number")
		e.Str(s.PhoneNumber)
	}
	{
		if s.ServiceInfo.Set {
			e.FieldStart("service_info")
			s.ServiceInfo.Encode(e)
		}
	}
	{
		e.FieldStart("sip_trunk_name")
		e.Str(s.SipTrunkName)
	}
	{
		e.FieldStart("status")
		e.Int(s.Status)
	}
}

var jsonFieldsNameOfListPeeringPhoneNumbersOKNumbersItem = [6]string{
	0: "assigned",
	1: "billing_reference_id",
	2: "phone_number",
	3: "service_info",
	4: "sip_trunk_name",
	5: "status",
}

// Decode decodes ListPeeringPhoneNumbersOKNumbersItem from json.
func (s *ListPeeringPhoneNumbersOKNumbersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListPeeringPhoneNumbersOKNumbersItem to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "assigned":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Int()
				s.Assigned = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"assigned\"")
			}
		case "billing_reference_id":
			if err := func() error {
				s.BillingReferenceID.Reset()
				if err := s.BillingReferenceID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"billing_reference_id\"")
			}
		case "phone_number":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.PhoneNumber = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		case "service_info":
			if err := func() error {
				s.ServiceInfo.Reset()
				if err := s.ServiceInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"service_info\"")
			}
		case "sip_trunk_name":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				v, err := d.Str()
				s.SipTrunkName = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sip_trunk_name\"")
			}
		case "status":
			requiredBitSet[0] |= 1 << 5
			if err := func() error {
				v, err := d.Int()
				s.Status = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListPeeringPhoneNumbersOKNumbersItem")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00110101,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfListPeeringPhoneNumbersOKNumbersItem) {
					name = jsonFieldsNameOfListPeeringPhoneNumbersOKNumbersItem[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListPeeringPhoneNumbersOKNumbersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListPeeringPhoneNumbersOKNumbersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListPhoneDevicesOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListPhoneDevicesOK) encodeFields(e *jx.Encoder) {
	{
		if s.Devices != nil {
			e.FieldStart("devices")
			e.ArrStart()
			for _, elem := range s.Devices {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
	{
		if s.TotalRecords.Set {
			e.FieldStart("total_records")
			s.TotalRecords.Encode(e)
		}
	}
}

var jsonFieldsNameOfListPhoneDevicesOK = [4]string{
	0: "devices",
	1: "next_page_token",
	2: "page_size",
	3: "total_records",
}

// Decode decodes ListPhoneDevicesOK from json.
func (s *ListPhoneDevicesOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListPhoneDevicesOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "devices":
			if err := func() error {
				s.Devices = make([]ListPhoneDevicesOKDevicesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListPhoneDevicesOKDevicesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Devices = append(s.Devices, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"devices\"")
			}
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		case "total_records":
			if err := func() error {
				s.TotalRecords.Reset()
				if err := s.TotalRecords.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_records\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListPhoneDevicesOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListPhoneDevicesOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListPhoneDevicesOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListPhoneDevicesOKDevicesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListPhoneDevicesOKDevicesItem) encodeFields(e *jx.Encoder) {
	{
		if s.Assignee.Set {
			e.FieldStart("assignee")
			s.Assignee.Encode(e)
		}
	}
	{
		if s.Assignees != nil {
			e.FieldStart("assignees")
			e.ArrStart()
			for _, elem := range s.Assignees {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.DeviceType.Set {
			e.FieldStart("device_type")
			s.DeviceType.Encode(e)
		}
	}
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.MACAddress.Set {
			e.FieldStart("mac_address")
			s.MACAddress.Encode(e)
		}
	}
	{
		if s.Site.Set {
			e.FieldStart("site")
			s.Site.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.ProvisionTemplateID.Set {
			e.FieldStart("provision_template_id")
			s.ProvisionTemplateID.Encode(e)
		}
	}
}

var jsonFieldsNameOfListPhoneDevicesOKDevicesItem = [9]string{
	0: "assignee",
	1: "assignees",
	2: "device_type",
	3: "display_name",
	4: "id",
	5: "mac_address",
	6: "site",
	7: "status",
	8: "provision_template_id",
}

// Decode decodes ListPhoneDevicesOKDevicesItem from json.
func (s *ListPhoneDevicesOKDevicesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListPhoneDevicesOKDevicesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "assignee":
			if err := func() error {
				s.Assignee.Reset()
				if err := s.Assignee.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"assignee\"")
			}
		case "assignees":
			if err := func() error {
				s.Assignees = make([]ListPhoneDevicesOKDevicesItemAssigneesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListPhoneDevicesOKDevicesItemAssigneesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Assignees = append(s.Assignees, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"assignees\"")
			}
		case "device_type":
			if err := func() error {
				s.DeviceType.Reset()
				if err := s.DeviceType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_type\"")
			}
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "mac_address":
			if err := func() error {
				s.MACAddress.Reset()
				if err := s.MACAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mac_address\"")
			}
		case "site":
			if err := func() error {
				s.Site.Reset()
				if err := s.Site.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "provision_template_id":
			if err := func() error {
				s.ProvisionTemplateID.Reset()
				if err := s.ProvisionTemplateID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provision_template_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListPhoneDevicesOKDevicesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListPhoneDevicesOKDevicesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListPhoneDevicesOKDevicesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListPhoneDevicesOKDevicesItemAssignee) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListPhoneDevicesOKDevicesItemAssignee) encodeFields(e *jx.Encoder) {
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.ExtensionType.Set {
			e.FieldStart("extension_type")
			s.ExtensionType.Encode(e)
		}
	}
}

var jsonFieldsNameOfListPhoneDevicesOKDevicesItemAssignee = [4]string{
	0: "extension_number",
	1: "id",
	2: "name",
	3: "extension_type",
}

// Decode decodes ListPhoneDevicesOKDevicesItemAssignee from json.
func (s *ListPhoneDevicesOKDevicesItemAssignee) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListPhoneDevicesOKDevicesItemAssignee to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "extension_type":
			if err := func() error {
				s.ExtensionType.Reset()
				if err := s.ExtensionType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListPhoneDevicesOKDevicesItemAssignee")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListPhoneDevicesOKDevicesItemAssignee) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListPhoneDevicesOKDevicesItemAssignee) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListPhoneDevicesOKDevicesItemAssigneesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListPhoneDevicesOKDevicesItemAssigneesItem) encodeFields(e *jx.Encoder) {
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.ExtensionType.Set {
			e.FieldStart("extension_type")
			s.ExtensionType.Encode(e)
		}
	}
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
}

var jsonFieldsNameOfListPhoneDevicesOKDevicesItemAssigneesItem = [5]string{
	0: "extension_number",
	1: "id",
	2: "name",
	3: "extension_type",
	4: "extension_id",
}

// Decode decodes ListPhoneDevicesOKDevicesItemAssigneesItem from json.
func (s *ListPhoneDevicesOKDevicesItemAssigneesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListPhoneDevicesOKDevicesItemAssigneesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "extension_type":
			if err := func() error {
				s.ExtensionType.Reset()
				if err := s.ExtensionType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_type\"")
			}
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListPhoneDevicesOKDevicesItemAssigneesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListPhoneDevicesOKDevicesItemAssigneesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListPhoneDevicesOKDevicesItemAssigneesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListPhoneDevicesOKDevicesItemSite) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListPhoneDevicesOKDevicesItemSite) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfListPhoneDevicesOKDevicesItemSite = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes ListPhoneDevicesOKDevicesItemSite from json.
func (s *ListPhoneDevicesOKDevicesItemSite) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListPhoneDevicesOKDevicesItemSite to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListPhoneDevicesOKDevicesItemSite")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListPhoneDevicesOKDevicesItemSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListPhoneDevicesOKDevicesItemSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListPhonePlansOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListPhonePlansOK) encodeFields(e *jx.Encoder) {
	{
		if s.CallingPlans != nil {
			e.FieldStart("calling_plans")
			e.ArrStart()
			for _, elem := range s.CallingPlans {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.PhoneNumbers != nil {
			e.FieldStart("phone_numbers")
			e.ArrStart()
			for _, elem := range s.PhoneNumbers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfListPhonePlansOK = [2]string{
	0: "calling_plans",
	1: "phone_numbers",
}

// Decode decodes ListPhonePlansOK from json.
func (s *ListPhonePlansOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListPhonePlansOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "calling_plans":
			if err := func() error {
				s.CallingPlans = make([]ListPhonePlansOKCallingPlansItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListPhonePlansOKCallingPlansItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CallingPlans = append(s.CallingPlans, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"calling_plans\"")
			}
		case "phone_numbers":
			if err := func() error {
				s.PhoneNumbers = make([]ListPhonePlansOKPhoneNumbersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListPhonePlansOKPhoneNumbersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.PhoneNumbers = append(s.PhoneNumbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_numbers\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListPhonePlansOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListPhonePlansOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListPhonePlansOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListPhonePlansOKCallingPlansItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListPhonePlansOKCallingPlansItem) encodeFields(e *jx.Encoder) {
	{
		if s.Assigned.Set {
			e.FieldStart("assigned")
			s.Assigned.Encode(e)
		}
	}
	{
		if s.Available.Set {
			e.FieldStart("available")
			s.Available.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Subscribed.Set {
			e.FieldStart("subscribed")
			s.Subscribed.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfListPhonePlansOKCallingPlansItem = [5]string{
	0: "assigned",
	1: "available",
	2: "name",
	3: "subscribed",
	4: "type",
}

// Decode decodes ListPhonePlansOKCallingPlansItem from json.
func (s *ListPhonePlansOKCallingPlansItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListPhonePlansOKCallingPlansItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "assigned":
			if err := func() error {
				s.Assigned.Reset()
				if err := s.Assigned.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"assigned\"")
			}
		case "available":
			if err := func() error {
				s.Available.Reset()
				if err := s.Available.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"available\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "subscribed":
			if err := func() error {
				s.Subscribed.Reset()
				if err := s.Subscribed.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"subscribed\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListPhonePlansOKCallingPlansItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListPhonePlansOKCallingPlansItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListPhonePlansOKCallingPlansItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListPhonePlansOKPhoneNumbersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListPhonePlansOKPhoneNumbersItem) encodeFields(e *jx.Encoder) {
	{
		if s.Assigned.Set {
			e.FieldStart("assigned")
			s.Assigned.Encode(e)
		}
	}
	{
		if s.Available.Set {
			e.FieldStart("available")
			s.Available.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Subscribed.Set {
			e.FieldStart("subscribed")
			s.Subscribed.Encode(e)
		}
	}
}

var jsonFieldsNameOfListPhonePlansOKPhoneNumbersItem = [4]string{
	0: "assigned",
	1: "available",
	2: "name",
	3: "subscribed",
}

// Decode decodes ListPhonePlansOKPhoneNumbersItem from json.
func (s *ListPhonePlansOKPhoneNumbersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListPhonePlansOKPhoneNumbersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "assigned":
			if err := func() error {
				s.Assigned.Reset()
				if err := s.Assigned.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"assigned\"")
			}
		case "available":
			if err := func() error {
				s.Available.Reset()
				if err := s.Available.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"available\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "subscribed":
			if err := func() error {
				s.Subscribed.Reset()
				if err := s.Subscribed.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"subscribed\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListPhonePlansOKPhoneNumbersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListPhonePlansOKPhoneNumbersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListPhonePlansOKPhoneNumbersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListPhoneRolesOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListPhoneRolesOK) encodeFields(e *jx.Encoder) {
	{
		if s.Roles != nil {
			e.FieldStart("roles")
			e.ArrStart()
			for _, elem := range s.Roles {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfListPhoneRolesOK = [1]string{
	0: "roles",
}

// Decode decodes ListPhoneRolesOK from json.
func (s *ListPhoneRolesOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListPhoneRolesOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "roles":
			if err := func() error {
				s.Roles = make([]ListPhoneRolesOKRolesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListPhoneRolesOKRolesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Roles = append(s.Roles, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"roles\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListPhoneRolesOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListPhoneRolesOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListPhoneRolesOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListPhoneRolesOKRolesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListPhoneRolesOKRolesItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.TotalMembers.Set {
			e.FieldStart("total_members")
			s.TotalMembers.Encode(e)
		}
	}
	{
		if s.IsDefault.Set {
			e.FieldStart("is_default")
			s.IsDefault.Encode(e)
		}
	}
}

var jsonFieldsNameOfListPhoneRolesOKRolesItem = [5]string{
	0: "id",
	1: "name",
	2: "description",
	3: "total_members",
	4: "is_default",
}

// Decode decodes ListPhoneRolesOKRolesItem from json.
func (s *ListPhoneRolesOKRolesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListPhoneRolesOKRolesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "total_members":
			if err := func() error {
				s.TotalMembers.Reset()
				if err := s.TotalMembers.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_members\"")
			}
		case "is_default":
			if err := func() error {
				s.IsDefault.Reset()
				if err := s.IsDefault.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"is_default\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListPhoneRolesOKRolesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListPhoneRolesOKRolesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListPhoneRolesOKRolesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListPhoneSitesOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListPhoneSitesOK) encodeFields(e *jx.Encoder) {
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
	{
		if s.Sites != nil {
			e.FieldStart("sites")
			e.ArrStart()
			for _, elem := range s.Sites {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalRecords.Set {
			e.FieldStart("total_records")
			s.TotalRecords.Encode(e)
		}
	}
}

var jsonFieldsNameOfListPhoneSitesOK = [4]string{
	0: "next_page_token",
	1: "page_size",
	2: "sites",
	3: "total_records",
}

// Decode decodes ListPhoneSitesOK from json.
func (s *ListPhoneSitesOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListPhoneSitesOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		case "sites":
			if err := func() error {
				s.Sites = make([]ListPhoneSitesOKSitesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListPhoneSitesOKSitesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Sites = append(s.Sites, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sites\"")
			}
		case "total_records":
			if err := func() error {
				s.TotalRecords.Reset()
				if err := s.TotalRecords.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_records\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListPhoneSitesOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListPhoneSitesOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListPhoneSitesOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListPhoneSitesOKSitesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListPhoneSitesOKSitesItem) encodeFields(e *jx.Encoder) {
	{
		if s.Country.Set {
			e.FieldStart("country")
			s.Country.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.MainAutoReceptionist.Set {
			e.FieldStart("main_auto_receptionist")
			s.MainAutoReceptionist.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.SiteCode.Set {
			e.FieldStart("site_code")
			s.SiteCode.Encode(e)
		}
	}
}

var jsonFieldsNameOfListPhoneSitesOKSitesItem = [5]string{
	0: "country",
	1: "id",
	2: "main_auto_receptionist",
	3: "name",
	4: "site_code",
}

// Decode decodes ListPhoneSitesOKSitesItem from json.
func (s *ListPhoneSitesOKSitesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListPhoneSitesOKSitesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "country":
			if err := func() error {
				s.Country.Reset()
				if err := s.Country.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "main_auto_receptionist":
			if err := func() error {
				s.MainAutoReceptionist.Reset()
				if err := s.MainAutoReceptionist.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"main_auto_receptionist\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "site_code":
			if err := func() error {
				s.SiteCode.Reset()
				if err := s.SiteCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_code\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListPhoneSitesOKSitesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListPhoneSitesOKSitesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListPhoneSitesOKSitesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListPhoneSitesOKSitesItemCountry) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListPhoneSitesOKSitesItemCountry) encodeFields(e *jx.Encoder) {
	{
		if s.Code.Set {
			e.FieldStart("code")
			s.Code.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfListPhoneSitesOKSitesItemCountry = [2]string{
	0: "code",
	1: "name",
}

// Decode decodes ListPhoneSitesOKSitesItemCountry from json.
func (s *ListPhoneSitesOKSitesItemCountry) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListPhoneSitesOKSitesItemCountry to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "code":
			if err := func() error {
				s.Code.Reset()
				if err := s.Code.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListPhoneSitesOKSitesItemCountry")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListPhoneSitesOKSitesItemCountry) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListPhoneSitesOKSitesItemCountry) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListPhoneSitesOKSitesItemMainAutoReceptionist) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListPhoneSitesOKSitesItemMainAutoReceptionist) encodeFields(e *jx.Encoder) {
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfListPhoneSitesOKSitesItemMainAutoReceptionist = [4]string{
	0: "extension_id",
	1: "extension_number",
	2: "id",
	3: "name",
}

// Decode decodes ListPhoneSitesOKSitesItemMainAutoReceptionist from json.
func (s *ListPhoneSitesOKSitesItemMainAutoReceptionist) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListPhoneSitesOKSitesItemMainAutoReceptionist to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListPhoneSitesOKSitesItemMainAutoReceptionist")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListPhoneSitesOKSitesItemMainAutoReceptionist) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListPhoneSitesOKSitesItemMainAutoReceptionist) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListPhoneUsersOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListPhoneUsersOK) encodeFields(e *jx.Encoder) {
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
	{
		if s.TotalRecords.Set {
			e.FieldStart("total_records")
			s.TotalRecords.Encode(e)
		}
	}
	{
		if s.Users != nil {
			e.FieldStart("users")
			e.ArrStart()
			for _, elem := range s.Users {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfListPhoneUsersOK = [4]string{
	0: "next_page_token",
	1: "page_size",
	2: "total_records",
	3: "users",
}

// Decode decodes ListPhoneUsersOK from json.
func (s *ListPhoneUsersOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListPhoneUsersOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		case "total_records":
			if err := func() error {
				s.TotalRecords.Reset()
				if err := s.TotalRecords.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_records\"")
			}
		case "users":
			if err := func() error {
				s.Users = make([]ListPhoneUsersOKUsersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListPhoneUsersOKUsersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Users = append(s.Users, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"users\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListPhoneUsersOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListPhoneUsersOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListPhoneUsersOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListPhoneUsersOKUsersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListPhoneUsersOKUsersItem) encodeFields(e *jx.Encoder) {
	{
		if s.CallingPlans != nil {
			e.FieldStart("calling_plans")
			e.ArrStart()
			for _, elem := range s.CallingPlans {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Email.Set {
			e.FieldStart("email")
			s.Email.Encode(e)
		}
	}
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.PhoneUserID.Set {
			e.FieldStart("phone_user_id")
			s.PhoneUserID.Encode(e)
		}
	}
	{
		if s.Site.Set {
			e.FieldStart("site")
			s.Site.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.PhoneNumbers != nil {
			e.FieldStart("phone_numbers")
			e.ArrStart()
			for _, elem := range s.PhoneNumbers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Department.Set {
			e.FieldStart("department")
			s.Department.Encode(e)
		}
	}
	{
		if s.CostCenter.Set {
			e.FieldStart("cost_center")
			s.CostCenter.Encode(e)
		}
	}
}

var jsonFieldsNameOfListPhoneUsersOKUsersItem = [12]string{
	0:  "calling_plans",
	1:  "email",
	2:  "extension_id",
	3:  "extension_number",
	4:  "id",
	5:  "name",
	6:  "phone_user_id",
	7:  "site",
	8:  "status",
	9:  "phone_numbers",
	10: "department",
	11: "cost_center",
}

// Decode decodes ListPhoneUsersOKUsersItem from json.
func (s *ListPhoneUsersOKUsersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListPhoneUsersOKUsersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "calling_plans":
			if err := func() error {
				s.CallingPlans = make([]ListPhoneUsersOKUsersItemCallingPlansItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListPhoneUsersOKUsersItemCallingPlansItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CallingPlans = append(s.CallingPlans, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"calling_plans\"")
			}
		case "email":
			if err := func() error {
				s.Email.Reset()
				if err := s.Email.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "phone_user_id":
			if err := func() error {
				s.PhoneUserID.Reset()
				if err := s.PhoneUserID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_user_id\"")
			}
		case "site":
			if err := func() error {
				s.Site.Reset()
				if err := s.Site.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "phone_numbers":
			if err := func() error {
				s.PhoneNumbers = make([]ListPhoneUsersOKUsersItemPhoneNumbersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListPhoneUsersOKUsersItemPhoneNumbersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.PhoneNumbers = append(s.PhoneNumbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_numbers\"")
			}
		case "department":
			if err := func() error {
				s.Department.Reset()
				if err := s.Department.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"department\"")
			}
		case "cost_center":
			if err := func() error {
				s.CostCenter.Reset()
				if err := s.CostCenter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cost_center\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListPhoneUsersOKUsersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListPhoneUsersOKUsersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListPhoneUsersOKUsersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListPhoneUsersOKUsersItemCallingPlansItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListPhoneUsersOKUsersItemCallingPlansItem) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.BillingAccountID.Set {
			e.FieldStart("billing_account_id")
			s.BillingAccountID.Encode(e)
		}
	}
	{
		if s.BillingAccountName.Set {
			e.FieldStart("billing_account_name")
			s.BillingAccountName.Encode(e)
		}
	}
}

var jsonFieldsNameOfListPhoneUsersOKUsersItemCallingPlansItem = [4]string{
	0: "name",
	1: "type",
	2: "billing_account_id",
	3: "billing_account_name",
}

// Decode decodes ListPhoneUsersOKUsersItemCallingPlansItem from json.
func (s *ListPhoneUsersOKUsersItemCallingPlansItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListPhoneUsersOKUsersItemCallingPlansItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "billing_account_id":
			if err := func() error {
				s.BillingAccountID.Reset()
				if err := s.BillingAccountID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"billing_account_id\"")
			}
		case "billing_account_name":
			if err := func() error {
				s.BillingAccountName.Reset()
				if err := s.BillingAccountName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"billing_account_name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListPhoneUsersOKUsersItemCallingPlansItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListPhoneUsersOKUsersItemCallingPlansItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListPhoneUsersOKUsersItemCallingPlansItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListPhoneUsersOKUsersItemPhoneNumbersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListPhoneUsersOKUsersItemPhoneNumbersItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Number.Set {
			e.FieldStart("number")
			s.Number.Encode(e)
		}
	}
}

var jsonFieldsNameOfListPhoneUsersOKUsersItemPhoneNumbersItem = [2]string{
	0: "id",
	1: "number",
}

// Decode decodes ListPhoneUsersOKUsersItemPhoneNumbersItem from json.
func (s *ListPhoneUsersOKUsersItemPhoneNumbersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListPhoneUsersOKUsersItemPhoneNumbersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "number":
			if err := func() error {
				s.Number.Reset()
				if err := s.Number.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListPhoneUsersOKUsersItemPhoneNumbersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListPhoneUsersOKUsersItemPhoneNumbersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListPhoneUsersOKUsersItemPhoneNumbersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListPhoneUsersOKUsersItemSite) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListPhoneUsersOKUsersItemSite) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfListPhoneUsersOKUsersItemSite = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes ListPhoneUsersOKUsersItemSite from json.
func (s *ListPhoneUsersOKUsersItemSite) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListPhoneUsersOKUsersItemSite to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListPhoneUsersOKUsersItemSite")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListPhoneUsersOKUsersItemSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListPhoneUsersOKUsersItemSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListPortedNumbersOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListPortedNumbersOK) encodeFields(e *jx.Encoder) {
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
	{
		if s.PortedNumbers != nil {
			e.FieldStart("ported_numbers")
			e.ArrStart()
			for _, elem := range s.PortedNumbers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalRecords.Set {
			e.FieldStart("total_records")
			s.TotalRecords.Encode(e)
		}
	}
}

var jsonFieldsNameOfListPortedNumbersOK = [4]string{
	0: "next_page_token",
	1: "page_size",
	2: "ported_numbers",
	3: "total_records",
}

// Decode decodes ListPortedNumbersOK from json.
func (s *ListPortedNumbersOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListPortedNumbersOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		case "ported_numbers":
			if err := func() error {
				s.PortedNumbers = make([]ListPortedNumbersOKPortedNumbersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListPortedNumbersOKPortedNumbersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.PortedNumbers = append(s.PortedNumbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ported_numbers\"")
			}
		case "total_records":
			if err := func() error {
				s.TotalRecords.Reset()
				if err := s.TotalRecords.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_records\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListPortedNumbersOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListPortedNumbersOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListPortedNumbersOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListPortedNumbersOKPortedNumbersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListPortedNumbersOKPortedNumbersItem) encodeFields(e *jx.Encoder) {
	{
		if s.Numbers != nil {
			e.FieldStart("numbers")
			e.ArrStart()
			for _, elem := range s.Numbers {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OrderID.Set {
			e.FieldStart("order_id")
			s.OrderID.Encode(e)
		}
	}
	{
		if s.ReplacingNumbers != nil {
			e.FieldStart("replacing_numbers")
			e.ArrStart()
			for _, elem := range s.ReplacingNumbers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.SubmissionDateTime.Set {
			e.FieldStart("submission_date_time")
			s.SubmissionDateTime.Encode(e)
		}
	}
}

var jsonFieldsNameOfListPortedNumbersOKPortedNumbersItem = [5]string{
	0: "numbers",
	1: "order_id",
	2: "replacing_numbers",
	3: "status",
	4: "submission_date_time",
}

// Decode decodes ListPortedNumbersOKPortedNumbersItem from json.
func (s *ListPortedNumbersOKPortedNumbersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListPortedNumbersOKPortedNumbersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "numbers":
			if err := func() error {
				s.Numbers = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Numbers = append(s.Numbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"numbers\"")
			}
		case "order_id":
			if err := func() error {
				s.OrderID.Reset()
				if err := s.OrderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_id\"")
			}
		case "replacing_numbers":
			if err := func() error {
				s.ReplacingNumbers = make([]ListPortedNumbersOKPortedNumbersItemReplacingNumbersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListPortedNumbersOKPortedNumbersItemReplacingNumbersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.ReplacingNumbers = append(s.ReplacingNumbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"replacing_numbers\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "submission_date_time":
			if err := func() error {
				s.SubmissionDateTime.Reset()
				if err := s.SubmissionDateTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"submission_date_time\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListPortedNumbersOKPortedNumbersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListPortedNumbersOKPortedNumbersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListPortedNumbersOKPortedNumbersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListPortedNumbersOKPortedNumbersItemReplacingNumbersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListPortedNumbersOKPortedNumbersItemReplacingNumbersItem) encodeFields(e *jx.Encoder) {
	{
		if s.SourceNumber.Set {
			e.FieldStart("source_number")
			s.SourceNumber.Encode(e)
		}
	}
	{
		if s.TargetNumber.Set {
			e.FieldStart("target_number")
			s.TargetNumber.Encode(e)
		}
	}
}

var jsonFieldsNameOfListPortedNumbersOKPortedNumbersItemReplacingNumbersItem = [2]string{
	0: "source_number",
	1: "target_number",
}

// Decode decodes ListPortedNumbersOKPortedNumbersItemReplacingNumbersItem from json.
func (s *ListPortedNumbersOKPortedNumbersItemReplacingNumbersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListPortedNumbersOKPortedNumbersItemReplacingNumbersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "source_number":
			if err := func() error {
				s.SourceNumber.Reset()
				if err := s.SourceNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"source_number\"")
			}
		case "target_number":
			if err := func() error {
				s.TargetNumber.Reset()
				if err := s.TargetNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"target_number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListPortedNumbersOKPortedNumbersItemReplacingNumbersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListPortedNumbersOKPortedNumbersItemReplacingNumbersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListPortedNumbersOKPortedNumbersItemReplacingNumbersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListRoleMembersOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListRoleMembersOK) encodeFields(e *jx.Encoder) {
	{
		if s.Members != nil {
			e.FieldStart("members")
			e.ArrStart()
			for _, elem := range s.Members {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfListRoleMembersOK = [1]string{
	0: "members",
}

// Decode decodes ListRoleMembersOK from json.
func (s *ListRoleMembersOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListRoleMembersOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "members":
			if err := func() error {
				s.Members = make([]ListRoleMembersOKMembersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListRoleMembersOKMembersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Members = append(s.Members, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"members\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListRoleMembersOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListRoleMembersOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListRoleMembersOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListRoleMembersOKMembersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListRoleMembersOKMembersItem) encodeFields(e *jx.Encoder) {
	{
		if s.UserID.Set {
			e.FieldStart("user_id")
			s.UserID.Encode(e)
		}
	}
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.Email.Set {
			e.FieldStart("email")
			s.Email.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.Site.Set {
			e.FieldStart("site")
			s.Site.Encode(e)
		}
	}
}

var jsonFieldsNameOfListRoleMembersOKMembersItem = [5]string{
	0: "user_id",
	1: "display_name",
	2: "email",
	3: "extension_number",
	4: "site",
}

// Decode decodes ListRoleMembersOKMembersItem from json.
func (s *ListRoleMembersOKMembersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListRoleMembersOKMembersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "user_id":
			if err := func() error {
				s.UserID.Reset()
				if err := s.UserID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"user_id\"")
			}
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "email":
			if err := func() error {
				s.Email.Reset()
				if err := s.Email.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "site":
			if err := func() error {
				s.Site.Reset()
				if err := s.Site.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListRoleMembersOKMembersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListRoleMembersOKMembersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListRoleMembersOKMembersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListRoleMembersOKMembersItemSite) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListRoleMembersOKMembersItemSite) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfListRoleMembersOKMembersItemSite = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes ListRoleMembersOKMembersItemSite from json.
func (s *ListRoleMembersOKMembersItemSite) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListRoleMembersOKMembersItemSite to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListRoleMembersOKMembersItemSite")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListRoleMembersOKMembersItemSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListRoleMembersOKMembersItemSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListRoutingRuleOKItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListRoutingRuleOKItem) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.NumberPattern.Set {
			e.FieldStart("number_pattern")
			s.NumberPattern.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
	{
		if s.RoutingPath.Set {
			e.FieldStart("routing_path")
			s.RoutingPath.Encode(e)
		}
	}
	{
		if s.RoutingRuleID.Set {
			e.FieldStart("routing_rule_id")
			s.RoutingRuleID.Encode(e)
		}
	}
	{
		if s.SiteID.Set {
			e.FieldStart("site_id")
			s.SiteID.Encode(e)
		}
	}
	{
		if s.Translation.Set {
			e.FieldStart("translation")
			s.Translation.Encode(e)
		}
	}
}

var jsonFieldsNameOfListRoutingRuleOKItem = [7]string{
	0: "name",
	1: "number_pattern",
	2: "order",
	3: "routing_path",
	4: "routing_rule_id",
	5: "site_id",
	6: "translation",
}

// Decode decodes ListRoutingRuleOKItem from json.
func (s *ListRoutingRuleOKItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListRoutingRuleOKItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "number_pattern":
			if err := func() error {
				s.NumberPattern.Reset()
				if err := s.NumberPattern.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number_pattern\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		case "routing_path":
			if err := func() error {
				s.RoutingPath.Reset()
				if err := s.RoutingPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"routing_path\"")
			}
		case "routing_rule_id":
			if err := func() error {
				s.RoutingRuleID.Reset()
				if err := s.RoutingRuleID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"routing_rule_id\"")
			}
		case "site_id":
			if err := func() error {
				s.SiteID.Reset()
				if err := s.SiteID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_id\"")
			}
		case "translation":
			if err := func() error {
				s.Translation.Reset()
				if err := s.Translation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"translation\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListRoutingRuleOKItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListRoutingRuleOKItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListRoutingRuleOKItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListRoutingRuleOKItemRoutingPath) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListRoutingRuleOKItemRoutingPath) encodeFields(e *jx.Encoder) {
	{
		if s.SipGroup.Set {
			e.FieldStart("sip_group")
			s.SipGroup.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfListRoutingRuleOKItemRoutingPath = [2]string{
	0: "sip_group",
	1: "type",
}

// Decode decodes ListRoutingRuleOKItemRoutingPath from json.
func (s *ListRoutingRuleOKItemRoutingPath) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListRoutingRuleOKItemRoutingPath to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "sip_group":
			if err := func() error {
				s.SipGroup.Reset()
				if err := s.SipGroup.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sip_group\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListRoutingRuleOKItemRoutingPath")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListRoutingRuleOKItemRoutingPath) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListRoutingRuleOKItemRoutingPath) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListRoutingRuleOKItemRoutingPathSipGroup) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListRoutingRuleOKItemRoutingPathSipGroup) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfListRoutingRuleOKItemRoutingPathSipGroup = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes ListRoutingRuleOKItemRoutingPathSipGroup from json.
func (s *ListRoutingRuleOKItemRoutingPathSipGroup) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListRoutingRuleOKItemRoutingPathSipGroup to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListRoutingRuleOKItemRoutingPathSipGroup")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListRoutingRuleOKItemRoutingPathSipGroup) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListRoutingRuleOKItemRoutingPathSipGroup) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListSettingTemplatesOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListSettingTemplatesOK) encodeFields(e *jx.Encoder) {
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
	{
		if s.Templates != nil {
			e.FieldStart("templates")
			e.ArrStart()
			for _, elem := range s.Templates {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalRecords.Set {
			e.FieldStart("total_records")
			s.TotalRecords.Encode(e)
		}
	}
}

var jsonFieldsNameOfListSettingTemplatesOK = [4]string{
	0: "next_page_token",
	1: "page_size",
	2: "templates",
	3: "total_records",
}

// Decode decodes ListSettingTemplatesOK from json.
func (s *ListSettingTemplatesOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListSettingTemplatesOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		case "templates":
			if err := func() error {
				s.Templates = make([]ListSettingTemplatesOKTemplatesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListSettingTemplatesOKTemplatesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Templates = append(s.Templates, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"templates\"")
			}
		case "total_records":
			if err := func() error {
				s.TotalRecords.Reset()
				if err := s.TotalRecords.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_records\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListSettingTemplatesOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListSettingTemplatesOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListSettingTemplatesOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListSettingTemplatesOKTemplatesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListSettingTemplatesOKTemplatesItem) encodeFields(e *jx.Encoder) {
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfListSettingTemplatesOKTemplatesItem = [4]string{
	0: "description",
	1: "id",
	2: "name",
	3: "type",
}

// Decode decodes ListSettingTemplatesOKTemplatesItem from json.
func (s *ListSettingTemplatesOKTemplatesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListSettingTemplatesOKTemplatesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListSettingTemplatesOKTemplatesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListSettingTemplatesOKTemplatesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListSettingTemplatesOKTemplatesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListSharedLineAppearancesOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListSharedLineAppearancesOK) encodeFields(e *jx.Encoder) {
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
	{
		if s.SharedLineAppearances != nil {
			e.FieldStart("shared_line_appearances")
			e.ArrStart()
			for _, elem := range s.SharedLineAppearances {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalRecords.Set {
			e.FieldStart("total_records")
			s.TotalRecords.Encode(e)
		}
	}
}

var jsonFieldsNameOfListSharedLineAppearancesOK = [4]string{
	0: "next_page_token",
	1: "page_size",
	2: "shared_line_appearances",
	3: "total_records",
}

// Decode decodes ListSharedLineAppearancesOK from json.
func (s *ListSharedLineAppearancesOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListSharedLineAppearancesOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		case "shared_line_appearances":
			if err := func() error {
				s.SharedLineAppearances = make([]ListSharedLineAppearancesOKSharedLineAppearancesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListSharedLineAppearancesOKSharedLineAppearancesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.SharedLineAppearances = append(s.SharedLineAppearances, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shared_line_appearances\"")
			}
		case "total_records":
			if err := func() error {
				s.TotalRecords.Reset()
				if err := s.TotalRecords.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_records\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListSharedLineAppearancesOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListSharedLineAppearancesOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListSharedLineAppearancesOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListSharedLineAppearancesOKSharedLineAppearancesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListSharedLineAppearancesOKSharedLineAppearancesItem) encodeFields(e *jx.Encoder) {
	{
		if s.Executive.Set {
			e.FieldStart("executive")
			s.Executive.Encode(e)
		}
	}
	{
		if s.Assistants != nil {
			e.FieldStart("assistants")
			e.ArrStart()
			for _, elem := range s.Assistants {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Privileges != nil {
			e.FieldStart("privileges")
			e.ArrStart()
			for _, elem := range s.Privileges {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfListSharedLineAppearancesOKSharedLineAppearancesItem = [3]string{
	0: "executive",
	1: "assistants",
	2: "privileges",
}

// Decode decodes ListSharedLineAppearancesOKSharedLineAppearancesItem from json.
func (s *ListSharedLineAppearancesOKSharedLineAppearancesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListSharedLineAppearancesOKSharedLineAppearancesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "executive":
			if err := func() error {
				s.Executive.Reset()
				if err := s.Executive.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"executive\"")
			}
		case "assistants":
			if err := func() error {
				s.Assistants = make([]ListSharedLineAppearancesOKSharedLineAppearancesItemAssistantsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListSharedLineAppearancesOKSharedLineAppearancesItemAssistantsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Assistants = append(s.Assistants, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"assistants\"")
			}
		case "privileges":
			if err := func() error {
				s.Privileges = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Privileges = append(s.Privileges, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"privileges\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListSharedLineAppearancesOKSharedLineAppearancesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListSharedLineAppearancesOKSharedLineAppearancesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListSharedLineAppearancesOKSharedLineAppearancesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListSharedLineAppearancesOKSharedLineAppearancesItemAssistantsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListSharedLineAppearancesOKSharedLineAppearancesItemAssistantsItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ExtensionType.Set {
			e.FieldStart("extension_type")
			s.ExtensionType.Encode(e)
		}
	}
}

var jsonFieldsNameOfListSharedLineAppearancesOKSharedLineAppearancesItemAssistantsItem = [4]string{
	0: "id",
	1: "name",
	2: "extension_number",
	3: "extension_type",
}

// Decode decodes ListSharedLineAppearancesOKSharedLineAppearancesItemAssistantsItem from json.
func (s *ListSharedLineAppearancesOKSharedLineAppearancesItemAssistantsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListSharedLineAppearancesOKSharedLineAppearancesItemAssistantsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "extension_type":
			if err := func() error {
				s.ExtensionType.Reset()
				if err := s.ExtensionType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListSharedLineAppearancesOKSharedLineAppearancesItemAssistantsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListSharedLineAppearancesOKSharedLineAppearancesItemAssistantsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListSharedLineAppearancesOKSharedLineAppearancesItemAssistantsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListSharedLineAppearancesOKSharedLineAppearancesItemExecutive) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListSharedLineAppearancesOKSharedLineAppearancesItemExecutive) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ExtensionType.Set {
			e.FieldStart("extension_type")
			s.ExtensionType.Encode(e)
		}
	}
}

var jsonFieldsNameOfListSharedLineAppearancesOKSharedLineAppearancesItemExecutive = [3]string{
	0: "name",
	1: "extension_number",
	2: "extension_type",
}

// Decode decodes ListSharedLineAppearancesOKSharedLineAppearancesItemExecutive from json.
func (s *ListSharedLineAppearancesOKSharedLineAppearancesItemExecutive) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListSharedLineAppearancesOKSharedLineAppearancesItemExecutive to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "extension_type":
			if err := func() error {
				s.ExtensionType.Reset()
				if err := s.ExtensionType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListSharedLineAppearancesOKSharedLineAppearancesItemExecutive")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListSharedLineAppearancesOKSharedLineAppearancesItemExecutive) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListSharedLineAppearancesOKSharedLineAppearancesItemExecutive) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListSharedLineGroupsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListSharedLineGroupsOK) encodeFields(e *jx.Encoder) {
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
	{
		if s.SharedLineGroups != nil {
			e.FieldStart("shared_line_groups")
			e.ArrStart()
			for _, elem := range s.SharedLineGroups {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalRecords.Set {
			e.FieldStart("total_records")
			s.TotalRecords.Encode(e)
		}
	}
}

var jsonFieldsNameOfListSharedLineGroupsOK = [4]string{
	0: "next_page_token",
	1: "page_size",
	2: "shared_line_groups",
	3: "total_records",
}

// Decode decodes ListSharedLineGroupsOK from json.
func (s *ListSharedLineGroupsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListSharedLineGroupsOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		case "shared_line_groups":
			if err := func() error {
				s.SharedLineGroups = make([]ListSharedLineGroupsOKSharedLineGroupsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListSharedLineGroupsOKSharedLineGroupsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.SharedLineGroups = append(s.SharedLineGroups, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shared_line_groups\"")
			}
		case "total_records":
			if err := func() error {
				s.TotalRecords.Reset()
				if err := s.TotalRecords.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_records\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListSharedLineGroupsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListSharedLineGroupsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListSharedLineGroupsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListSharedLineGroupsOKSharedLineGroupsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListSharedLineGroupsOKSharedLineGroupsItem) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.PhoneNumbers != nil {
			e.FieldStart("phone_numbers")
			e.ArrStart()
			for _, elem := range s.PhoneNumbers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Site.Set {
			e.FieldStart("site")
			s.Site.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
}

var jsonFieldsNameOfListSharedLineGroupsOKSharedLineGroupsItem = [7]string{
	0: "display_name",
	1: "extension_id",
	2: "extension_number",
	3: "id",
	4: "phone_numbers",
	5: "site",
	6: "status",
}

// Decode decodes ListSharedLineGroupsOKSharedLineGroupsItem from json.
func (s *ListSharedLineGroupsOKSharedLineGroupsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListSharedLineGroupsOKSharedLineGroupsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "phone_numbers":
			if err := func() error {
				s.PhoneNumbers = make([]ListSharedLineGroupsOKSharedLineGroupsItemPhoneNumbersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListSharedLineGroupsOKSharedLineGroupsItemPhoneNumbersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.PhoneNumbers = append(s.PhoneNumbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_numbers\"")
			}
		case "site":
			if err := func() error {
				s.Site.Reset()
				if err := s.Site.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListSharedLineGroupsOKSharedLineGroupsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListSharedLineGroupsOKSharedLineGroupsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListSharedLineGroupsOKSharedLineGroupsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListSharedLineGroupsOKSharedLineGroupsItemPhoneNumbersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListSharedLineGroupsOKSharedLineGroupsItemPhoneNumbersItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Number.Set {
			e.FieldStart("number")
			s.Number.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
}

var jsonFieldsNameOfListSharedLineGroupsOKSharedLineGroupsItemPhoneNumbersItem = [3]string{
	0: "id",
	1: "number",
	2: "status",
}

// Decode decodes ListSharedLineGroupsOKSharedLineGroupsItemPhoneNumbersItem from json.
func (s *ListSharedLineGroupsOKSharedLineGroupsItemPhoneNumbersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListSharedLineGroupsOKSharedLineGroupsItemPhoneNumbersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "number":
			if err := func() error {
				s.Number.Reset()
				if err := s.Number.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListSharedLineGroupsOKSharedLineGroupsItemPhoneNumbersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListSharedLineGroupsOKSharedLineGroupsItemPhoneNumbersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListSharedLineGroupsOKSharedLineGroupsItemPhoneNumbersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListSharedLineGroupsOKSharedLineGroupsItemSite) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListSharedLineGroupsOKSharedLineGroupsItemSite) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfListSharedLineGroupsOKSharedLineGroupsItemSite = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes ListSharedLineGroupsOKSharedLineGroupsItemSite from json.
func (s *ListSharedLineGroupsOKSharedLineGroupsItemSite) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListSharedLineGroupsOKSharedLineGroupsItemSite to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListSharedLineGroupsOKSharedLineGroupsItemSite")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListSharedLineGroupsOKSharedLineGroupsItemSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListSharedLineGroupsOKSharedLineGroupsItemSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListSipGroupsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListSipGroupsOK) encodeFields(e *jx.Encoder) {
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
	{
		if s.SipGroups != nil {
			e.FieldStart("sip_groups")
			e.ArrStart()
			for _, elem := range s.SipGroups {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfListSipGroupsOK = [3]string{
	0: "next_page_token",
	1: "page_size",
	2: "sip_groups",
}

// Decode decodes ListSipGroupsOK from json.
func (s *ListSipGroupsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListSipGroupsOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		case "sip_groups":
			if err := func() error {
				s.SipGroups = make([]ListSipGroupsOKSipGroupsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListSipGroupsOKSipGroupsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.SipGroups = append(s.SipGroups, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sip_groups\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListSipGroupsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListSipGroupsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListSipGroupsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListSipGroupsOKSipGroupsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListSipGroupsOKSipGroupsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.SendSipGroupName.Set {
			e.FieldStart("send_sip_group_name")
			s.SendSipGroupName.Encode(e)
		}
	}
	{
		if s.SipTrunk.Set {
			e.FieldStart("sip_trunk")
			s.SipTrunk.Encode(e)
		}
	}
}

var jsonFieldsNameOfListSipGroupsOKSipGroupsItem = [5]string{
	0: "description",
	1: "display_name",
	2: "id",
	3: "send_sip_group_name",
	4: "sip_trunk",
}

// Decode decodes ListSipGroupsOKSipGroupsItem from json.
func (s *ListSipGroupsOKSipGroupsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListSipGroupsOKSipGroupsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "send_sip_group_name":
			if err := func() error {
				s.SendSipGroupName.Reset()
				if err := s.SendSipGroupName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"send_sip_group_name\"")
			}
		case "sip_trunk":
			if err := func() error {
				s.SipTrunk.Reset()
				if err := s.SipTrunk.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sip_trunk\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListSipGroupsOKSipGroupsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListSipGroupsOKSipGroupsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListSipGroupsOKSipGroupsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListSipGroupsOKSipGroupsItemSipTrunk) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListSipGroupsOKSipGroupsItemSipTrunk) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfListSipGroupsOKSipGroupsItemSipTrunk = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes ListSipGroupsOKSipGroupsItemSipTrunk from json.
func (s *ListSipGroupsOKSipGroupsItemSipTrunk) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListSipGroupsOKSipGroupsItemSipTrunk to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListSipGroupsOKSipGroupsItemSipTrunk")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListSipGroupsOKSipGroupsItemSipTrunk) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListSipGroupsOKSipGroupsItemSipTrunk) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListSiteCustomizeOutboundCallerNumbersOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListSiteCustomizeOutboundCallerNumbersOK) encodeFields(e *jx.Encoder) {
	{
		if s.CustomizeNumbers != nil {
			e.FieldStart("customize_numbers")
			e.ArrStart()
			for _, elem := range s.CustomizeNumbers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
	{
		if s.TotalRecords.Set {
			e.FieldStart("total_records")
			s.TotalRecords.Encode(e)
		}
	}
}

var jsonFieldsNameOfListSiteCustomizeOutboundCallerNumbersOK = [4]string{
	0: "customize_numbers",
	1: "next_page_token",
	2: "page_size",
	3: "total_records",
}

// Decode decodes ListSiteCustomizeOutboundCallerNumbersOK from json.
func (s *ListSiteCustomizeOutboundCallerNumbersOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListSiteCustomizeOutboundCallerNumbersOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "customize_numbers":
			if err := func() error {
				s.CustomizeNumbers = make([]ListSiteCustomizeOutboundCallerNumbersOKCustomizeNumbersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListSiteCustomizeOutboundCallerNumbersOKCustomizeNumbersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CustomizeNumbers = append(s.CustomizeNumbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customize_numbers\"")
			}
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		case "total_records":
			if err := func() error {
				s.TotalRecords.Reset()
				if err := s.TotalRecords.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_records\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListSiteCustomizeOutboundCallerNumbersOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListSiteCustomizeOutboundCallerNumbersOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListSiteCustomizeOutboundCallerNumbersOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListSiteCustomizeOutboundCallerNumbersOKCustomizeNumbersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListSiteCustomizeOutboundCallerNumbersOKCustomizeNumbersItem) encodeFields(e *jx.Encoder) {
	{
		if s.CustomizeID.Set {
			e.FieldStart("customize_id")
			s.CustomizeID.Encode(e)
		}
	}
	{
		if s.PhoneNumberID.Set {
			e.FieldStart("phone_number_id")
			s.PhoneNumberID.Encode(e)
		}
	}
	{
		if s.PhoneNumber.Set {
			e.FieldStart("phone_number")
			s.PhoneNumber.Encode(e)
		}
	}
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.Incoming.Set {
			e.FieldStart("incoming")
			s.Incoming.Encode(e)
		}
	}
	{
		if s.Outgoing.Set {
			e.FieldStart("outgoing")
			s.Outgoing.Encode(e)
		}
	}
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
	{
		if s.ExtensionType.Set {
			e.FieldStart("extension_type")
			s.ExtensionType.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ExtensionName.Set {
			e.FieldStart("extension_name")
			s.ExtensionName.Encode(e)
		}
	}
	{
		if s.Site.Set {
			e.FieldStart("site")
			s.Site.Encode(e)
		}
	}
}

var jsonFieldsNameOfListSiteCustomizeOutboundCallerNumbersOKCustomizeNumbersItem = [11]string{
	0:  "customize_id",
	1:  "phone_number_id",
	2:  "phone_number",
	3:  "display_name",
	4:  "incoming",
	5:  "outgoing",
	6:  "extension_id",
	7:  "extension_type",
	8:  "extension_number",
	9:  "extension_name",
	10: "site",
}

// Decode decodes ListSiteCustomizeOutboundCallerNumbersOKCustomizeNumbersItem from json.
func (s *ListSiteCustomizeOutboundCallerNumbersOKCustomizeNumbersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListSiteCustomizeOutboundCallerNumbersOKCustomizeNumbersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "customize_id":
			if err := func() error {
				s.CustomizeID.Reset()
				if err := s.CustomizeID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customize_id\"")
			}
		case "phone_number_id":
			if err := func() error {
				s.PhoneNumberID.Reset()
				if err := s.PhoneNumberID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number_id\"")
			}
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "incoming":
			if err := func() error {
				s.Incoming.Reset()
				if err := s.Incoming.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"incoming\"")
			}
		case "outgoing":
			if err := func() error {
				s.Outgoing.Reset()
				if err := s.Outgoing.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"outgoing\"")
			}
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		case "extension_type":
			if err := func() error {
				s.ExtensionType.Reset()
				if err := s.ExtensionType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_type\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "extension_name":
			if err := func() error {
				s.ExtensionName.Reset()
				if err := s.ExtensionName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_name\"")
			}
		case "site":
			if err := func() error {
				s.Site.Reset()
				if err := s.Site.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListSiteCustomizeOutboundCallerNumbersOKCustomizeNumbersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListSiteCustomizeOutboundCallerNumbersOKCustomizeNumbersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListSiteCustomizeOutboundCallerNumbersOKCustomizeNumbersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListSiteCustomizeOutboundCallerNumbersOKCustomizeNumbersItemSite) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListSiteCustomizeOutboundCallerNumbersOKCustomizeNumbersItemSite) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfListSiteCustomizeOutboundCallerNumbersOKCustomizeNumbersItemSite = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes ListSiteCustomizeOutboundCallerNumbersOKCustomizeNumbersItemSite from json.
func (s *ListSiteCustomizeOutboundCallerNumbersOKCustomizeNumbersItemSite) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListSiteCustomizeOutboundCallerNumbersOKCustomizeNumbersItemSite to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListSiteCustomizeOutboundCallerNumbersOKCustomizeNumbersItemSite")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListSiteCustomizeOutboundCallerNumbersOKCustomizeNumbersItemSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListSiteCustomizeOutboundCallerNumbersOKCustomizeNumbersItemSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListSiteOutboundCallingExceptionRuleOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListSiteOutboundCallingExceptionRuleOK) encodeFields(e *jx.Encoder) {
	{
		if s.ExceptionRules != nil {
			e.FieldStart("exception_rules")
			e.ArrStart()
			for _, elem := range s.ExceptionRules {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
}

var jsonFieldsNameOfListSiteOutboundCallingExceptionRuleOK = [3]string{
	0: "exception_rules",
	1: "next_page_token",
	2: "page_size",
}

// Decode decodes ListSiteOutboundCallingExceptionRuleOK from json.
func (s *ListSiteOutboundCallingExceptionRuleOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListSiteOutboundCallingExceptionRuleOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "exception_rules":
			if err := func() error {
				s.ExceptionRules = make([]ListSiteOutboundCallingExceptionRuleOKExceptionRulesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListSiteOutboundCallingExceptionRuleOKExceptionRulesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.ExceptionRules = append(s.ExceptionRules, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exception_rules\"")
			}
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListSiteOutboundCallingExceptionRuleOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListSiteOutboundCallingExceptionRuleOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListSiteOutboundCallingExceptionRuleOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListSiteOutboundCallingExceptionRuleOKExceptionRulesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListSiteOutboundCallingExceptionRuleOKExceptionRulesItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.MatchType.Set {
			e.FieldStart("match_type")
			s.MatchType.Encode(e)
		}
	}
	{
		if s.PrefixNumber.Set {
			e.FieldStart("prefix_number")
			s.PrefixNumber.Encode(e)
		}
	}
	{
		if s.Rule.Set {
			e.FieldStart("rule")
			s.Rule.Encode(e)
		}
	}
	{
		if s.Comment.Set {
			e.FieldStart("comment")
			s.Comment.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
}

var jsonFieldsNameOfListSiteOutboundCallingExceptionRuleOKExceptionRulesItem = [6]string{
	0: "id",
	1: "match_type",
	2: "prefix_number",
	3: "rule",
	4: "comment",
	5: "status",
}

// Decode decodes ListSiteOutboundCallingExceptionRuleOKExceptionRulesItem from json.
func (s *ListSiteOutboundCallingExceptionRuleOKExceptionRulesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListSiteOutboundCallingExceptionRuleOKExceptionRulesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "match_type":
			if err := func() error {
				s.MatchType.Reset()
				if err := s.MatchType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"match_type\"")
			}
		case "prefix_number":
			if err := func() error {
				s.PrefixNumber.Reset()
				if err := s.PrefixNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"prefix_number\"")
			}
		case "rule":
			if err := func() error {
				s.Rule.Reset()
				if err := s.Rule.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rule\"")
			}
		case "comment":
			if err := func() error {
				s.Comment.Reset()
				if err := s.Comment.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"comment\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListSiteOutboundCallingExceptionRuleOKExceptionRulesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListSiteOutboundCallingExceptionRuleOKExceptionRulesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListSiteOutboundCallingExceptionRuleOKExceptionRulesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListTrackedLocationsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListTrackedLocationsOK) encodeFields(e *jx.Encoder) {
	{
		if s.LocationTracking != nil {
			e.FieldStart("location_tracking")
			e.ArrStart()
			for _, elem := range s.LocationTracking {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
	{
		if s.TotalRecords.Set {
			e.FieldStart("total_records")
			s.TotalRecords.Encode(e)
		}
	}
}

var jsonFieldsNameOfListTrackedLocationsOK = [4]string{
	0: "location_tracking",
	1: "next_page_token",
	2: "page_size",
	3: "total_records",
}

// Decode decodes ListTrackedLocationsOK from json.
func (s *ListTrackedLocationsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListTrackedLocationsOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "location_tracking":
			if err := func() error {
				s.LocationTracking = make([]ListTrackedLocationsOKLocationTrackingItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListTrackedLocationsOKLocationTrackingItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.LocationTracking = append(s.LocationTracking, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"location_tracking\"")
			}
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		case "total_records":
			if err := func() error {
				s.TotalRecords.Reset()
				if err := s.TotalRecords.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_records\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListTrackedLocationsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListTrackedLocationsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListTrackedLocationsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListTrackedLocationsOKLocationTrackingItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListTrackedLocationsOKLocationTrackingItem) encodeFields(e *jx.Encoder) {
	{
		if s.Assignees != nil {
			e.FieldStart("assignees")
			e.ArrStart()
			for _, elem := range s.Assignees {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.City.Set {
			e.FieldStart("city")
			s.City.Encode(e)
		}
	}
	{
		if s.Country.Set {
			e.FieldStart("country")
			s.Country.Encode(e)
		}
	}
	{
		if s.Device.Set {
			e.FieldStart("device")
			s.Device.Encode(e)
		}
	}
	{
		if s.EmergencyAddress.Set {
			e.FieldStart("emergency_address")
			s.EmergencyAddress.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.NetworkSwitch.Set {
			e.FieldStart("network_switch")
			s.NetworkSwitch.Encode(e)
		}
	}
	{
		if s.Site.Set {
			e.FieldStart("site")
			s.Site.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.Zip.Set {
			e.FieldStart("zip")
			s.Zip.Encode(e)
		}
	}
}

var jsonFieldsNameOfListTrackedLocationsOKLocationTrackingItem = [10]string{
	0: "assignees",
	1: "city",
	2: "country",
	3: "device",
	4: "emergency_address",
	5: "name",
	6: "network_switch",
	7: "site",
	8: "type",
	9: "zip",
}

// Decode decodes ListTrackedLocationsOKLocationTrackingItem from json.
func (s *ListTrackedLocationsOKLocationTrackingItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListTrackedLocationsOKLocationTrackingItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "assignees":
			if err := func() error {
				s.Assignees = make([]ListTrackedLocationsOKLocationTrackingItemAssigneesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListTrackedLocationsOKLocationTrackingItemAssigneesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Assignees = append(s.Assignees, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"assignees\"")
			}
		case "city":
			if err := func() error {
				s.City.Reset()
				if err := s.City.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"city\"")
			}
		case "country":
			if err := func() error {
				s.Country.Reset()
				if err := s.Country.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country\"")
			}
		case "device":
			if err := func() error {
				s.Device.Reset()
				if err := s.Device.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device\"")
			}
		case "emergency_address":
			if err := func() error {
				s.EmergencyAddress.Reset()
				if err := s.EmergencyAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"emergency_address\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "network_switch":
			if err := func() error {
				s.NetworkSwitch.Reset()
				if err := s.NetworkSwitch.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"network_switch\"")
			}
		case "site":
			if err := func() error {
				s.Site.Reset()
				if err := s.Site.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "zip":
			if err := func() error {
				s.Zip.Reset()
				if err := s.Zip.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zip\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListTrackedLocationsOKLocationTrackingItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListTrackedLocationsOKLocationTrackingItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListTrackedLocationsOKLocationTrackingItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListTrackedLocationsOKLocationTrackingItemAssigneesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListTrackedLocationsOKLocationTrackingItemAssigneesItem) encodeFields(e *jx.Encoder) {
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfListTrackedLocationsOKLocationTrackingItemAssigneesItem = [3]string{
	0: "extension_number",
	1: "id",
	2: "name",
}

// Decode decodes ListTrackedLocationsOKLocationTrackingItemAssigneesItem from json.
func (s *ListTrackedLocationsOKLocationTrackingItemAssigneesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListTrackedLocationsOKLocationTrackingItemAssigneesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListTrackedLocationsOKLocationTrackingItemAssigneesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListTrackedLocationsOKLocationTrackingItemAssigneesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListTrackedLocationsOKLocationTrackingItemAssigneesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListTrackedLocationsOKLocationTrackingItemDevice) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListTrackedLocationsOKLocationTrackingItemDevice) encodeFields(e *jx.Encoder) {
	{
		if s.Bssid.Set {
			e.FieldStart("bssid")
			s.Bssid.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.MACAddress.Set {
			e.FieldStart("mac_address")
			s.MACAddress.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.PrivateIP.Set {
			e.FieldStart("private_ip")
			s.PrivateIP.Encode(e)
		}
	}
	{
		if s.PublicIP.Set {
			e.FieldStart("public_ip")
			s.PublicIP.Encode(e)
		}
	}
}

var jsonFieldsNameOfListTrackedLocationsOKLocationTrackingItemDevice = [6]string{
	0: "bssid",
	1: "id",
	2: "mac_address",
	3: "name",
	4: "private_ip",
	5: "public_ip",
}

// Decode decodes ListTrackedLocationsOKLocationTrackingItemDevice from json.
func (s *ListTrackedLocationsOKLocationTrackingItemDevice) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListTrackedLocationsOKLocationTrackingItemDevice to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "bssid":
			if err := func() error {
				s.Bssid.Reset()
				if err := s.Bssid.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bssid\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "mac_address":
			if err := func() error {
				s.MACAddress.Reset()
				if err := s.MACAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mac_address\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "private_ip":
			if err := func() error {
				s.PrivateIP.Reset()
				if err := s.PrivateIP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"private_ip\"")
			}
		case "public_ip":
			if err := func() error {
				s.PublicIP.Reset()
				if err := s.PublicIP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"public_ip\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListTrackedLocationsOKLocationTrackingItemDevice")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListTrackedLocationsOKLocationTrackingItemDevice) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListTrackedLocationsOKLocationTrackingItemDevice) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListTrackedLocationsOKLocationTrackingItemNetworkSwitch) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListTrackedLocationsOKLocationTrackingItemNetworkSwitch) encodeFields(e *jx.Encoder) {
	{
		if s.MACAddress.Set {
			e.FieldStart("mac_address")
			s.MACAddress.Encode(e)
		}
	}
	{
		if s.Port.Set {
			e.FieldStart("port")
			s.Port.Encode(e)
		}
	}
}

var jsonFieldsNameOfListTrackedLocationsOKLocationTrackingItemNetworkSwitch = [2]string{
	0: "mac_address",
	1: "port",
}

// Decode decodes ListTrackedLocationsOKLocationTrackingItemNetworkSwitch from json.
func (s *ListTrackedLocationsOKLocationTrackingItemNetworkSwitch) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListTrackedLocationsOKLocationTrackingItemNetworkSwitch to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "mac_address":
			if err := func() error {
				s.MACAddress.Reset()
				if err := s.MACAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mac_address\"")
			}
		case "port":
			if err := func() error {
				s.Port.Reset()
				if err := s.Port.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"port\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListTrackedLocationsOKLocationTrackingItemNetworkSwitch")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListTrackedLocationsOKLocationTrackingItemNetworkSwitch) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListTrackedLocationsOKLocationTrackingItemNetworkSwitch) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListTrackedLocationsOKLocationTrackingItemSite) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListTrackedLocationsOKLocationTrackingItemSite) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfListTrackedLocationsOKLocationTrackingItemSite = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes ListTrackedLocationsOKLocationTrackingItemSite from json.
func (s *ListTrackedLocationsOKLocationTrackingItemSite) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListTrackedLocationsOKLocationTrackingItemSite to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListTrackedLocationsOKLocationTrackingItemSite")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListTrackedLocationsOKLocationTrackingItemSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListTrackedLocationsOKLocationTrackingItemSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListUnassignedZoomRoomsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListUnassignedZoomRoomsOK) encodeFields(e *jx.Encoder) {
	{
		if s.Rooms != nil {
			e.FieldStart("rooms")
			e.ArrStart()
			for _, elem := range s.Rooms {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfListUnassignedZoomRoomsOK = [1]string{
	0: "rooms",
}

// Decode decodes ListUnassignedZoomRoomsOK from json.
func (s *ListUnassignedZoomRoomsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListUnassignedZoomRoomsOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "rooms":
			if err := func() error {
				s.Rooms = make([]ListUnassignedZoomRoomsOKRoomsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListUnassignedZoomRoomsOKRoomsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Rooms = append(s.Rooms, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rooms\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListUnassignedZoomRoomsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListUnassignedZoomRoomsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListUnassignedZoomRoomsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListUnassignedZoomRoomsOKRoomsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListUnassignedZoomRoomsOKRoomsItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.LocationID.Set {
			e.FieldStart("location_id")
			s.LocationID.Encode(e)
		}
	}
	{
		if s.LocationInfo.Set {
			e.FieldStart("location_info")
			s.LocationInfo.Encode(e)
		}
	}
	{
		if s.Department.Set {
			e.FieldStart("department")
			s.Department.Encode(e)
		}
	}
	{
		if s.CostCenter.Set {
			e.FieldStart("cost_center")
			s.CostCenter.Encode(e)
		}
	}
}

var jsonFieldsNameOfListUnassignedZoomRoomsOKRoomsItem = [6]string{
	0: "id",
	1: "display_name",
	2: "location_id",
	3: "location_info",
	4: "department",
	5: "cost_center",
}

// Decode decodes ListUnassignedZoomRoomsOKRoomsItem from json.
func (s *ListUnassignedZoomRoomsOKRoomsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListUnassignedZoomRoomsOKRoomsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "location_id":
			if err := func() error {
				s.LocationID.Reset()
				if err := s.LocationID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"location_id\"")
			}
		case "location_info":
			if err := func() error {
				s.LocationInfo.Reset()
				if err := s.LocationInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"location_info\"")
			}
		case "department":
			if err := func() error {
				s.Department.Reset()
				if err := s.Department.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"department\"")
			}
		case "cost_center":
			if err := func() error {
				s.CostCenter.Reset()
				if err := s.CostCenter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cost_center\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListUnassignedZoomRoomsOKRoomsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListUnassignedZoomRoomsOKRoomsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListUnassignedZoomRoomsOKRoomsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListUserCustomizeOutboundCallerNumbersOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListUserCustomizeOutboundCallerNumbersOK) encodeFields(e *jx.Encoder) {
	{
		if s.CustomizeNumbers != nil {
			e.FieldStart("customize_numbers")
			e.ArrStart()
			for _, elem := range s.CustomizeNumbers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
	{
		if s.TotalRecords.Set {
			e.FieldStart("total_records")
			s.TotalRecords.Encode(e)
		}
	}
}

var jsonFieldsNameOfListUserCustomizeOutboundCallerNumbersOK = [4]string{
	0: "customize_numbers",
	1: "next_page_token",
	2: "page_size",
	3: "total_records",
}

// Decode decodes ListUserCustomizeOutboundCallerNumbersOK from json.
func (s *ListUserCustomizeOutboundCallerNumbersOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListUserCustomizeOutboundCallerNumbersOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "customize_numbers":
			if err := func() error {
				s.CustomizeNumbers = make([]ListUserCustomizeOutboundCallerNumbersOKCustomizeNumbersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListUserCustomizeOutboundCallerNumbersOKCustomizeNumbersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CustomizeNumbers = append(s.CustomizeNumbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customize_numbers\"")
			}
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		case "total_records":
			if err := func() error {
				s.TotalRecords.Reset()
				if err := s.TotalRecords.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_records\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListUserCustomizeOutboundCallerNumbersOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListUserCustomizeOutboundCallerNumbersOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListUserCustomizeOutboundCallerNumbersOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListUserCustomizeOutboundCallerNumbersOKCustomizeNumbersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListUserCustomizeOutboundCallerNumbersOKCustomizeNumbersItem) encodeFields(e *jx.Encoder) {
	{
		if s.CustomizeID.Set {
			e.FieldStart("customize_id")
			s.CustomizeID.Encode(e)
		}
	}
	{
		if s.PhoneNumberID.Set {
			e.FieldStart("phone_number_id")
			s.PhoneNumberID.Encode(e)
		}
	}
	{
		if s.PhoneNumber.Set {
			e.FieldStart("phone_number")
			s.PhoneNumber.Encode(e)
		}
	}
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.Incoming.Set {
			e.FieldStart("incoming")
			s.Incoming.Encode(e)
		}
	}
	{
		if s.Outgoing.Set {
			e.FieldStart("outgoing")
			s.Outgoing.Encode(e)
		}
	}
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
	{
		if s.ExtensionType.Set {
			e.FieldStart("extension_type")
			s.ExtensionType.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ExtensionName.Set {
			e.FieldStart("extension_name")
			s.ExtensionName.Encode(e)
		}
	}
	{
		if s.Site.Set {
			e.FieldStart("site")
			s.Site.Encode(e)
		}
	}
}

var jsonFieldsNameOfListUserCustomizeOutboundCallerNumbersOKCustomizeNumbersItem = [11]string{
	0:  "customize_id",
	1:  "phone_number_id",
	2:  "phone_number",
	3:  "display_name",
	4:  "incoming",
	5:  "outgoing",
	6:  "extension_id",
	7:  "extension_type",
	8:  "extension_number",
	9:  "extension_name",
	10: "site",
}

// Decode decodes ListUserCustomizeOutboundCallerNumbersOKCustomizeNumbersItem from json.
func (s *ListUserCustomizeOutboundCallerNumbersOKCustomizeNumbersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListUserCustomizeOutboundCallerNumbersOKCustomizeNumbersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "customize_id":
			if err := func() error {
				s.CustomizeID.Reset()
				if err := s.CustomizeID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customize_id\"")
			}
		case "phone_number_id":
			if err := func() error {
				s.PhoneNumberID.Reset()
				if err := s.PhoneNumberID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number_id\"")
			}
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "incoming":
			if err := func() error {
				s.Incoming.Reset()
				if err := s.Incoming.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"incoming\"")
			}
		case "outgoing":
			if err := func() error {
				s.Outgoing.Reset()
				if err := s.Outgoing.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"outgoing\"")
			}
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		case "extension_type":
			if err := func() error {
				s.ExtensionType.Reset()
				if err := s.ExtensionType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_type\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "extension_name":
			if err := func() error {
				s.ExtensionName.Reset()
				if err := s.ExtensionName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_name\"")
			}
		case "site":
			if err := func() error {
				s.Site.Reset()
				if err := s.Site.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListUserCustomizeOutboundCallerNumbersOKCustomizeNumbersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListUserCustomizeOutboundCallerNumbersOKCustomizeNumbersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListUserCustomizeOutboundCallerNumbersOKCustomizeNumbersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListUserCustomizeOutboundCallerNumbersOKCustomizeNumbersItemSite) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListUserCustomizeOutboundCallerNumbersOKCustomizeNumbersItemSite) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfListUserCustomizeOutboundCallerNumbersOKCustomizeNumbersItemSite = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes ListUserCustomizeOutboundCallerNumbersOKCustomizeNumbersItemSite from json.
func (s *ListUserCustomizeOutboundCallerNumbersOKCustomizeNumbersItemSite) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListUserCustomizeOutboundCallerNumbersOKCustomizeNumbersItemSite to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListUserCustomizeOutboundCallerNumbersOKCustomizeNumbersItemSite")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListUserCustomizeOutboundCallerNumbersOKCustomizeNumbersItemSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListUserCustomizeOutboundCallerNumbersOKCustomizeNumbersItemSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListUserOutboundCallingExceptionRuleOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListUserOutboundCallingExceptionRuleOK) encodeFields(e *jx.Encoder) {
	{
		if s.ExceptionRules != nil {
			e.FieldStart("exception_rules")
			e.ArrStart()
			for _, elem := range s.ExceptionRules {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
}

var jsonFieldsNameOfListUserOutboundCallingExceptionRuleOK = [3]string{
	0: "exception_rules",
	1: "next_page_token",
	2: "page_size",
}

// Decode decodes ListUserOutboundCallingExceptionRuleOK from json.
func (s *ListUserOutboundCallingExceptionRuleOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListUserOutboundCallingExceptionRuleOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "exception_rules":
			if err := func() error {
				s.ExceptionRules = make([]ListUserOutboundCallingExceptionRuleOKExceptionRulesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListUserOutboundCallingExceptionRuleOKExceptionRulesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.ExceptionRules = append(s.ExceptionRules, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exception_rules\"")
			}
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListUserOutboundCallingExceptionRuleOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListUserOutboundCallingExceptionRuleOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListUserOutboundCallingExceptionRuleOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListUserOutboundCallingExceptionRuleOKExceptionRulesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListUserOutboundCallingExceptionRuleOKExceptionRulesItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.MatchType.Set {
			e.FieldStart("match_type")
			s.MatchType.Encode(e)
		}
	}
	{
		if s.PrefixNumber.Set {
			e.FieldStart("prefix_number")
			s.PrefixNumber.Encode(e)
		}
	}
	{
		if s.Rule.Set {
			e.FieldStart("rule")
			s.Rule.Encode(e)
		}
	}
	{
		if s.Comment.Set {
			e.FieldStart("comment")
			s.Comment.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
}

var jsonFieldsNameOfListUserOutboundCallingExceptionRuleOKExceptionRulesItem = [6]string{
	0: "id",
	1: "match_type",
	2: "prefix_number",
	3: "rule",
	4: "comment",
	5: "status",
}

// Decode decodes ListUserOutboundCallingExceptionRuleOKExceptionRulesItem from json.
func (s *ListUserOutboundCallingExceptionRuleOKExceptionRulesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListUserOutboundCallingExceptionRuleOKExceptionRulesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "match_type":
			if err := func() error {
				s.MatchType.Reset()
				if err := s.MatchType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"match_type\"")
			}
		case "prefix_number":
			if err := func() error {
				s.PrefixNumber.Reset()
				if err := s.PrefixNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"prefix_number\"")
			}
		case "rule":
			if err := func() error {
				s.Rule.Reset()
				if err := s.Rule.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rule\"")
			}
		case "comment":
			if err := func() error {
				s.Comment.Reset()
				if err := s.Comment.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"comment\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListUserOutboundCallingExceptionRuleOKExceptionRulesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListUserOutboundCallingExceptionRuleOKExceptionRulesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListUserOutboundCallingExceptionRuleOKExceptionRulesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListUsersFromDirectoryBySiteOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListUsersFromDirectoryBySiteOK) encodeFields(e *jx.Encoder) {
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
	{
		if s.Result != nil {
			e.FieldStart("result")
			e.ArrStart()
			for _, elem := range s.Result {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfListUsersFromDirectoryBySiteOK = [3]string{
	0: "next_page_token",
	1: "page_size",
	2: "result",
}

// Decode decodes ListUsersFromDirectoryBySiteOK from json.
func (s *ListUsersFromDirectoryBySiteOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListUsersFromDirectoryBySiteOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		case "result":
			if err := func() error {
				s.Result = make([]ListUsersFromDirectoryBySiteOKResultItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListUsersFromDirectoryBySiteOKResultItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Result = append(s.Result, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListUsersFromDirectoryBySiteOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListUsersFromDirectoryBySiteOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListUsersFromDirectoryBySiteOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListUsersFromDirectoryBySiteOKResultItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListUsersFromDirectoryBySiteOKResultItem) encodeFields(e *jx.Encoder) {
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.Email.Set {
			e.FieldStart("email")
			s.Email.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.Site.Set {
			e.FieldStart("site")
			s.Site.Encode(e)
		}
	}
}

var jsonFieldsNameOfListUsersFromDirectoryBySiteOKResultItem = [5]string{
	0: "extension_id",
	1: "display_name",
	2: "email",
	3: "extension_number",
	4: "site",
}

// Decode decodes ListUsersFromDirectoryBySiteOKResultItem from json.
func (s *ListUsersFromDirectoryBySiteOKResultItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListUsersFromDirectoryBySiteOKResultItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "email":
			if err := func() error {
				s.Email.Reset()
				if err := s.Email.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "site":
			if err := func() error {
				s.Site.Reset()
				if err := s.Site.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListUsersFromDirectoryBySiteOKResultItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListUsersFromDirectoryBySiteOKResultItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListUsersFromDirectoryBySiteOKResultItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListUsersFromDirectoryBySiteOKResultItemSite) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListUsersFromDirectoryBySiteOKResultItemSite) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfListUsersFromDirectoryBySiteOKResultItemSite = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes ListUsersFromDirectoryBySiteOKResultItemSite from json.
func (s *ListUsersFromDirectoryBySiteOKResultItemSite) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListUsersFromDirectoryBySiteOKResultItemSite to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListUsersFromDirectoryBySiteOKResultItemSite")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListUsersFromDirectoryBySiteOKResultItemSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListUsersFromDirectoryBySiteOKResultItemSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListUsersFromDirectoryOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListUsersFromDirectoryOK) encodeFields(e *jx.Encoder) {
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
	{
		if s.Result != nil {
			e.FieldStart("result")
			e.ArrStart()
			for _, elem := range s.Result {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfListUsersFromDirectoryOK = [3]string{
	0: "next_page_token",
	1: "page_size",
	2: "result",
}

// Decode decodes ListUsersFromDirectoryOK from json.
func (s *ListUsersFromDirectoryOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListUsersFromDirectoryOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		case "result":
			if err := func() error {
				s.Result = make([]ListUsersFromDirectoryOKResultItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListUsersFromDirectoryOKResultItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Result = append(s.Result, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListUsersFromDirectoryOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListUsersFromDirectoryOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListUsersFromDirectoryOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListUsersFromDirectoryOKResultItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListUsersFromDirectoryOKResultItem) encodeFields(e *jx.Encoder) {
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.Email.Set {
			e.FieldStart("email")
			s.Email.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.Site.Set {
			e.FieldStart("site")
			s.Site.Encode(e)
		}
	}
}

var jsonFieldsNameOfListUsersFromDirectoryOKResultItem = [5]string{
	0: "extension_id",
	1: "display_name",
	2: "email",
	3: "extension_number",
	4: "site",
}

// Decode decodes ListUsersFromDirectoryOKResultItem from json.
func (s *ListUsersFromDirectoryOKResultItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListUsersFromDirectoryOKResultItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "email":
			if err := func() error {
				s.Email.Reset()
				if err := s.Email.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "site":
			if err := func() error {
				s.Site.Reset()
				if err := s.Site.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListUsersFromDirectoryOKResultItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListUsersFromDirectoryOKResultItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListUsersFromDirectoryOKResultItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListUsersFromDirectoryOKResultItemSite) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListUsersFromDirectoryOKResultItemSite) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfListUsersFromDirectoryOKResultItemSite = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes ListUsersFromDirectoryOKResultItemSite from json.
func (s *ListUsersFromDirectoryOKResultItemSite) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListUsersFromDirectoryOKResultItemSite to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListUsersFromDirectoryOKResultItemSite")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListUsersFromDirectoryOKResultItemSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListUsersFromDirectoryOKResultItemSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListZoomPhoneAccountSettingsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListZoomPhoneAccountSettingsOK) encodeFields(e *jx.Encoder) {
	{
		if s.CallLiveTranscription.Set {
			e.FieldStart("call_live_transcription")
			s.CallLiveTranscription.Encode(e)
		}
	}
	{
		if s.LocalSurvivabilityMode.Set {
			e.FieldStart("local_survivability_mode")
			s.LocalSurvivabilityMode.Encode(e)
		}
	}
	{
		if s.ExternalCallingOnZoomRoomCommonArea.Set {
			e.FieldStart("external_calling_on_zoom_room_common_area")
			s.ExternalCallingOnZoomRoomCommonArea.Encode(e)
		}
	}
	{
		if s.SelectOutboundCallerID.Set {
			e.FieldStart("select_outbound_caller_id")
			s.SelectOutboundCallerID.Encode(e)
		}
	}
	{
		if s.PersonalAudioLibrary.Set {
			e.FieldStart("personal_audio_library")
			s.PersonalAudioLibrary.Encode(e)
		}
	}
	{
		if s.Voicemail.Set {
			e.FieldStart("voicemail")
			s.Voicemail.Encode(e)
		}
	}
	{
		if s.VoicemailTranscription.Set {
			e.FieldStart("voicemail_transcription")
			s.VoicemailTranscription.Encode(e)
		}
	}
	{
		if s.VoicemailNotificationByEmail.Set {
			e.FieldStart("voicemail_notification_by_email")
			s.VoicemailNotificationByEmail.Encode(e)
		}
	}
	{
		if s.SharedVoicemailNotificationByEmail.Set {
			e.FieldStart("shared_voicemail_notification_by_email")
			s.SharedVoicemailNotificationByEmail.Encode(e)
		}
	}
	{
		if s.RestrictedCallHours.Set {
			e.FieldStart("restricted_call_hours")
			s.RestrictedCallHours.Encode(e)
		}
	}
	{
		if s.AllowedCallLocations.Set {
			e.FieldStart("allowed_call_locations")
			s.AllowedCallLocations.Encode(e)
		}
	}
	{
		if s.CheckVoicemailsOverPhone.Set {
			e.FieldStart("check_voicemails_over_phone")
			s.CheckVoicemailsOverPhone.Encode(e)
		}
	}
	{
		if s.AutoCallRecording.Set {
			e.FieldStart("auto_call_recording")
			s.AutoCallRecording.Encode(e)
		}
	}
	{
		if s.AdHocCallRecording.Set {
			e.FieldStart("ad_hoc_call_recording")
			s.AdHocCallRecording.Encode(e)
		}
	}
	{
		if s.InternationalCalling.Set {
			e.FieldStart("international_calling")
			s.InternationalCalling.Encode(e)
		}
	}
	{
		if s.OutboundCalling.Set {
			e.FieldStart("outbound_calling")
			s.OutboundCalling.Encode(e)
		}
	}
	{
		if s.OutboundSMS.Set {
			e.FieldStart("outbound_sms")
			s.OutboundSMS.Encode(e)
		}
	}
	{
		if s.SMS.Set {
			e.FieldStart("sms")
			s.SMS.Encode(e)
		}
	}
	{
		if s.SMSEtiquetteTool.Set {
			e.FieldStart("sms_etiquette_tool")
			s.SMSEtiquetteTool.Encode(e)
		}
	}
	{
		if s.ZoomPhoneOnMobile.Set {
			e.FieldStart("zoom_phone_on_mobile")
			s.ZoomPhoneOnMobile.Encode(e)
		}
	}
	{
		if s.ZoomPhoneOnPwa.Set {
			e.FieldStart("zoom_phone_on_pwa")
			s.ZoomPhoneOnPwa.Encode(e)
		}
	}
	{
		if s.E2eEncryption.Set {
			e.FieldStart("e2e_encryption")
			s.E2eEncryption.Encode(e)
		}
	}
	{
		if s.CallHandlingForwardingToOtherUsers.Set {
			e.FieldStart("call_handling_forwarding_to_other_users")
			s.CallHandlingForwardingToOtherUsers.Encode(e)
		}
	}
	{
		if s.CallOverflow.Set {
			e.FieldStart("call_overflow")
			s.CallOverflow.Encode(e)
		}
	}
	{
		if s.CallTransferring.Set {
			e.FieldStart("call_transferring")
			s.CallTransferring.Encode(e)
		}
	}
	{
		if s.ElevateToMeeting.Set {
			e.FieldStart("elevate_to_meeting")
			s.ElevateToMeeting.Encode(e)
		}
	}
	{
		if s.CallPark.Set {
			e.FieldStart("call_park")
			s.CallPark.Encode(e)
		}
	}
	{
		if s.HandOffToRoom.Set {
			e.FieldStart("hand_off_to_room")
			s.HandOffToRoom.Encode(e)
		}
	}
	{
		if s.MobileSwitchToCarrier.Set {
			e.FieldStart("mobile_switch_to_carrier")
			s.MobileSwitchToCarrier.Encode(e)
		}
	}
	{
		if s.Delegation.Set {
			e.FieldStart("delegation")
			s.Delegation.Encode(e)
		}
	}
	{
		if s.AudioIntercom.Set {
			e.FieldStart("audio_intercom")
			s.AudioIntercom.Encode(e)
		}
	}
	{
		if s.BlockCallsWithoutCallerID.Set {
			e.FieldStart("block_calls_without_caller_id")
			s.BlockCallsWithoutCallerID.Encode(e)
		}
	}
	{
		if s.BlockExternalCalls.Set {
			e.FieldStart("block_external_calls")
			s.BlockExternalCalls.Encode(e)
		}
	}
	{
		if s.CallQueueOptOutReason.Set {
			e.FieldStart("call_queue_opt_out_reason")
			s.CallQueueOptOutReason.Encode(e)
		}
	}
	{
		if s.AutoDeleteDataAfterRetentionDuration.Set {
			e.FieldStart("auto_delete_data_after_retention_duration")
			s.AutoDeleteDataAfterRetentionDuration.Encode(e)
		}
	}
	{
		if s.AutoCallFromThirdPartyApps.Set {
			e.FieldStart("auto_call_from_third_party_apps")
			s.AutoCallFromThirdPartyApps.Encode(e)
		}
	}
	{
		if s.OverrideDefaultPort.Set {
			e.FieldStart("override_default_port")
			s.OverrideDefaultPort.Encode(e)
		}
	}
	{
		if s.PeerToPeerMedia.Set {
			e.FieldStart("peer_to_peer_media")
			s.PeerToPeerMedia.Encode(e)
		}
	}
	{
		if s.AdvancedEncryption.Set {
			e.FieldStart("advanced_encryption")
			s.AdvancedEncryption.Encode(e)
		}
	}
	{
		if s.DisplayCallFeedbackSurvey.Set {
			e.FieldStart("display_call_feedback_survey")
			s.DisplayCallFeedbackSurvey.Encode(e)
		}
	}
	{
		if s.BlockListForInboundCallsAndMessaging.Set {
			e.FieldStart("block_list_for_inbound_calls_and_messaging")
			s.BlockListForInboundCallsAndMessaging.Encode(e)
		}
	}
	{
		if s.BlockCallsAsThreat.Set {
			e.FieldStart("block_calls_as_threat")
			s.BlockCallsAsThreat.Encode(e)
		}
	}
}

var jsonFieldsNameOfListZoomPhoneAccountSettingsOK = [42]string{
	0:  "call_live_transcription",
	1:  "local_survivability_mode",
	2:  "external_calling_on_zoom_room_common_area",
	3:  "select_outbound_caller_id",
	4:  "personal_audio_library",
	5:  "voicemail",
	6:  "voicemail_transcription",
	7:  "voicemail_notification_by_email",
	8:  "shared_voicemail_notification_by_email",
	9:  "restricted_call_hours",
	10: "allowed_call_locations",
	11: "check_voicemails_over_phone",
	12: "auto_call_recording",
	13: "ad_hoc_call_recording",
	14: "international_calling",
	15: "outbound_calling",
	16: "outbound_sms",
	17: "sms",
	18: "sms_etiquette_tool",
	19: "zoom_phone_on_mobile",
	20: "zoom_phone_on_pwa",
	21: "e2e_encryption",
	22: "call_handling_forwarding_to_other_users",
	23: "call_overflow",
	24: "call_transferring",
	25: "elevate_to_meeting",
	26: "call_park",
	27: "hand_off_to_room",
	28: "mobile_switch_to_carrier",
	29: "delegation",
	30: "audio_intercom",
	31: "block_calls_without_caller_id",
	32: "block_external_calls",
	33: "call_queue_opt_out_reason",
	34: "auto_delete_data_after_retention_duration",
	35: "auto_call_from_third_party_apps",
	36: "override_default_port",
	37: "peer_to_peer_media",
	38: "advanced_encryption",
	39: "display_call_feedback_survey",
	40: "block_list_for_inbound_calls_and_messaging",
	41: "block_calls_as_threat",
}

// Decode decodes ListZoomPhoneAccountSettingsOK from json.
func (s *ListZoomPhoneAccountSettingsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListZoomPhoneAccountSettingsOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "call_live_transcription":
			if err := func() error {
				s.CallLiveTranscription.Reset()
				if err := s.CallLiveTranscription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_live_transcription\"")
			}
		case "local_survivability_mode":
			if err := func() error {
				s.LocalSurvivabilityMode.Reset()
				if err := s.LocalSurvivabilityMode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"local_survivability_mode\"")
			}
		case "external_calling_on_zoom_room_common_area":
			if err := func() error {
				s.ExternalCallingOnZoomRoomCommonArea.Reset()
				if err := s.ExternalCallingOnZoomRoomCommonArea.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"external_calling_on_zoom_room_common_area\"")
			}
		case "select_outbound_caller_id":
			if err := func() error {
				s.SelectOutboundCallerID.Reset()
				if err := s.SelectOutboundCallerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"select_outbound_caller_id\"")
			}
		case "personal_audio_library":
			if err := func() error {
				s.PersonalAudioLibrary.Reset()
				if err := s.PersonalAudioLibrary.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"personal_audio_library\"")
			}
		case "voicemail":
			if err := func() error {
				s.Voicemail.Reset()
				if err := s.Voicemail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voicemail\"")
			}
		case "voicemail_transcription":
			if err := func() error {
				s.VoicemailTranscription.Reset()
				if err := s.VoicemailTranscription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voicemail_transcription\"")
			}
		case "voicemail_notification_by_email":
			if err := func() error {
				s.VoicemailNotificationByEmail.Reset()
				if err := s.VoicemailNotificationByEmail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voicemail_notification_by_email\"")
			}
		case "shared_voicemail_notification_by_email":
			if err := func() error {
				s.SharedVoicemailNotificationByEmail.Reset()
				if err := s.SharedVoicemailNotificationByEmail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shared_voicemail_notification_by_email\"")
			}
		case "restricted_call_hours":
			if err := func() error {
				s.RestrictedCallHours.Reset()
				if err := s.RestrictedCallHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"restricted_call_hours\"")
			}
		case "allowed_call_locations":
			if err := func() error {
				s.AllowedCallLocations.Reset()
				if err := s.AllowedCallLocations.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allowed_call_locations\"")
			}
		case "check_voicemails_over_phone":
			if err := func() error {
				s.CheckVoicemailsOverPhone.Reset()
				if err := s.CheckVoicemailsOverPhone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"check_voicemails_over_phone\"")
			}
		case "auto_call_recording":
			if err := func() error {
				s.AutoCallRecording.Reset()
				if err := s.AutoCallRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_call_recording\"")
			}
		case "ad_hoc_call_recording":
			if err := func() error {
				s.AdHocCallRecording.Reset()
				if err := s.AdHocCallRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ad_hoc_call_recording\"")
			}
		case "international_calling":
			if err := func() error {
				s.InternationalCalling.Reset()
				if err := s.InternationalCalling.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"international_calling\"")
			}
		case "outbound_calling":
			if err := func() error {
				s.OutboundCalling.Reset()
				if err := s.OutboundCalling.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"outbound_calling\"")
			}
		case "outbound_sms":
			if err := func() error {
				s.OutboundSMS.Reset()
				if err := s.OutboundSMS.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"outbound_sms\"")
			}
		case "sms":
			if err := func() error {
				s.SMS.Reset()
				if err := s.SMS.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sms\"")
			}
		case "sms_etiquette_tool":
			if err := func() error {
				s.SMSEtiquetteTool.Reset()
				if err := s.SMSEtiquetteTool.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sms_etiquette_tool\"")
			}
		case "zoom_phone_on_mobile":
			if err := func() error {
				s.ZoomPhoneOnMobile.Reset()
				if err := s.ZoomPhoneOnMobile.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_phone_on_mobile\"")
			}
		case "zoom_phone_on_pwa":
			if err := func() error {
				s.ZoomPhoneOnPwa.Reset()
				if err := s.ZoomPhoneOnPwa.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_phone_on_pwa\"")
			}
		case "e2e_encryption":
			if err := func() error {
				s.E2eEncryption.Reset()
				if err := s.E2eEncryption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"e2e_encryption\"")
			}
		case "call_handling_forwarding_to_other_users":
			if err := func() error {
				s.CallHandlingForwardingToOtherUsers.Reset()
				if err := s.CallHandlingForwardingToOtherUsers.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_handling_forwarding_to_other_users\"")
			}
		case "call_overflow":
			if err := func() error {
				s.CallOverflow.Reset()
				if err := s.CallOverflow.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_overflow\"")
			}
		case "call_transferring":
			if err := func() error {
				s.CallTransferring.Reset()
				if err := s.CallTransferring.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_transferring\"")
			}
		case "elevate_to_meeting":
			if err := func() error {
				s.ElevateToMeeting.Reset()
				if err := s.ElevateToMeeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"elevate_to_meeting\"")
			}
		case "call_park":
			if err := func() error {
				s.CallPark.Reset()
				if err := s.CallPark.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_park\"")
			}
		case "hand_off_to_room":
			if err := func() error {
				s.HandOffToRoom.Reset()
				if err := s.HandOffToRoom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hand_off_to_room\"")
			}
		case "mobile_switch_to_carrier":
			if err := func() error {
				s.MobileSwitchToCarrier.Reset()
				if err := s.MobileSwitchToCarrier.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mobile_switch_to_carrier\"")
			}
		case "delegation":
			if err := func() error {
				s.Delegation.Reset()
				if err := s.Delegation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delegation\"")
			}
		case "audio_intercom":
			if err := func() error {
				s.AudioIntercom.Reset()
				if err := s.AudioIntercom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_intercom\"")
			}
		case "block_calls_without_caller_id":
			if err := func() error {
				s.BlockCallsWithoutCallerID.Reset()
				if err := s.BlockCallsWithoutCallerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"block_calls_without_caller_id\"")
			}
		case "block_external_calls":
			if err := func() error {
				s.BlockExternalCalls.Reset()
				if err := s.BlockExternalCalls.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"block_external_calls\"")
			}
		case "call_queue_opt_out_reason":
			if err := func() error {
				s.CallQueueOptOutReason.Reset()
				if err := s.CallQueueOptOutReason.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_queue_opt_out_reason\"")
			}
		case "auto_delete_data_after_retention_duration":
			if err := func() error {
				s.AutoDeleteDataAfterRetentionDuration.Reset()
				if err := s.AutoDeleteDataAfterRetentionDuration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_delete_data_after_retention_duration\"")
			}
		case "auto_call_from_third_party_apps":
			if err := func() error {
				s.AutoCallFromThirdPartyApps.Reset()
				if err := s.AutoCallFromThirdPartyApps.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_call_from_third_party_apps\"")
			}
		case "override_default_port":
			if err := func() error {
				s.OverrideDefaultPort.Reset()
				if err := s.OverrideDefaultPort.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"override_default_port\"")
			}
		case "peer_to_peer_media":
			if err := func() error {
				s.PeerToPeerMedia.Reset()
				if err := s.PeerToPeerMedia.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"peer_to_peer_media\"")
			}
		case "advanced_encryption":
			if err := func() error {
				s.AdvancedEncryption.Reset()
				if err := s.AdvancedEncryption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"advanced_encryption\"")
			}
		case "display_call_feedback_survey":
			if err := func() error {
				s.DisplayCallFeedbackSurvey.Reset()
				if err := s.DisplayCallFeedbackSurvey.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_call_feedback_survey\"")
			}
		case "block_list_for_inbound_calls_and_messaging":
			if err := func() error {
				s.BlockListForInboundCallsAndMessaging.Reset()
				if err := s.BlockListForInboundCallsAndMessaging.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"block_list_for_inbound_calls_and_messaging\"")
			}
		case "block_calls_as_threat":
			if err := func() error {
				s.BlockCallsAsThreat.Reset()
				if err := s.BlockCallsAsThreat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"block_calls_as_threat\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListZoomPhoneAccountSettingsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListZoomPhoneAccountSettingsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListZoomPhoneAccountSettingsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKAdHocCallRecording) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListZoomPhoneAccountSettingsOKAdHocCallRecording) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
}

var jsonFieldsNameOfListZoomPhoneAccountSettingsOKAdHocCallRecording = [3]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
}

// Decode decodes ListZoomPhoneAccountSettingsOKAdHocCallRecording from json.
func (s *ListZoomPhoneAccountSettingsOKAdHocCallRecording) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListZoomPhoneAccountSettingsOKAdHocCallRecording to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListZoomPhoneAccountSettingsOKAdHocCallRecording")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKAdHocCallRecording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListZoomPhoneAccountSettingsOKAdHocCallRecording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKAdvancedEncryption) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListZoomPhoneAccountSettingsOKAdvancedEncryption) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
}

var jsonFieldsNameOfListZoomPhoneAccountSettingsOKAdvancedEncryption = [3]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
}

// Decode decodes ListZoomPhoneAccountSettingsOKAdvancedEncryption from json.
func (s *ListZoomPhoneAccountSettingsOKAdvancedEncryption) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListZoomPhoneAccountSettingsOKAdvancedEncryption to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListZoomPhoneAccountSettingsOKAdvancedEncryption")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKAdvancedEncryption) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListZoomPhoneAccountSettingsOKAdvancedEncryption) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKAllowedCallLocations) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListZoomPhoneAccountSettingsOKAllowedCallLocations) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.LocationsApplied.Set {
			e.FieldStart("locations_applied")
			s.LocationsApplied.Encode(e)
		}
	}
	{
		if s.AllowInternalCalls.Set {
			e.FieldStart("allow_internal_calls")
			s.AllowInternalCalls.Encode(e)
		}
	}
}

var jsonFieldsNameOfListZoomPhoneAccountSettingsOKAllowedCallLocations = [5]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "locations_applied",
	4: "allow_internal_calls",
}

// Decode decodes ListZoomPhoneAccountSettingsOKAllowedCallLocations from json.
func (s *ListZoomPhoneAccountSettingsOKAllowedCallLocations) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListZoomPhoneAccountSettingsOKAllowedCallLocations to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "locations_applied":
			if err := func() error {
				s.LocationsApplied.Reset()
				if err := s.LocationsApplied.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locations_applied\"")
			}
		case "allow_internal_calls":
			if err := func() error {
				s.AllowInternalCalls.Reset()
				if err := s.AllowInternalCalls.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_internal_calls\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListZoomPhoneAccountSettingsOKAllowedCallLocations")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKAllowedCallLocations) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListZoomPhoneAccountSettingsOKAllowedCallLocations) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKAudioIntercom) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListZoomPhoneAccountSettingsOKAudioIntercom) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
}

var jsonFieldsNameOfListZoomPhoneAccountSettingsOKAudioIntercom = [3]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
}

// Decode decodes ListZoomPhoneAccountSettingsOKAudioIntercom from json.
func (s *ListZoomPhoneAccountSettingsOKAudioIntercom) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListZoomPhoneAccountSettingsOKAudioIntercom to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListZoomPhoneAccountSettingsOKAudioIntercom")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKAudioIntercom) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListZoomPhoneAccountSettingsOKAudioIntercom) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKAutoCallFromThirdPartyApps) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListZoomPhoneAccountSettingsOKAutoCallFromThirdPartyApps) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
}

var jsonFieldsNameOfListZoomPhoneAccountSettingsOKAutoCallFromThirdPartyApps = [3]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
}

// Decode decodes ListZoomPhoneAccountSettingsOKAutoCallFromThirdPartyApps from json.
func (s *ListZoomPhoneAccountSettingsOKAutoCallFromThirdPartyApps) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListZoomPhoneAccountSettingsOKAutoCallFromThirdPartyApps to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListZoomPhoneAccountSettingsOKAutoCallFromThirdPartyApps")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKAutoCallFromThirdPartyApps) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListZoomPhoneAccountSettingsOKAutoCallFromThirdPartyApps) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKAutoCallRecording) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListZoomPhoneAccountSettingsOKAutoCallRecording) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.RecordingCalls.Set {
			e.FieldStart("recording_calls")
			s.RecordingCalls.Encode(e)
		}
	}
	{
		if s.RecordingTranscription.Set {
			e.FieldStart("recording_transcription")
			s.RecordingTranscription.Encode(e)
		}
	}
	{
		if s.RecordingStartPrompt.Set {
			e.FieldStart("recording_start_prompt")
			s.RecordingStartPrompt.Encode(e)
		}
	}
	{
		if s.RecordingStartPromptAudioID.Set {
			e.FieldStart("recording_start_prompt_audio_id")
			s.RecordingStartPromptAudioID.Encode(e)
		}
	}
	{
		if s.RecordingExplicitConsent.Set {
			e.FieldStart("recording_explicit_consent")
			s.RecordingExplicitConsent.Encode(e)
		}
	}
	{
		if s.AllowStopResumeRecording.Set {
			e.FieldStart("allow_stop_resume_recording")
			s.AllowStopResumeRecording.Encode(e)
		}
	}
	{
		if s.DisconnectOnRecordingFailure.Set {
			e.FieldStart("disconnect_on_recording_failure")
			s.DisconnectOnRecordingFailure.Encode(e)
		}
	}
	{
		if s.PlayRecordingBeepTone.Set {
			e.FieldStart("play_recording_beep_tone")
			s.PlayRecordingBeepTone.Encode(e)
		}
	}
}

var jsonFieldsNameOfListZoomPhoneAccountSettingsOKAutoCallRecording = [11]string{
	0:  "enable",
	1:  "locked",
	2:  "locked_by",
	3:  "recording_calls",
	4:  "recording_transcription",
	5:  "recording_start_prompt",
	6:  "recording_start_prompt_audio_id",
	7:  "recording_explicit_consent",
	8:  "allow_stop_resume_recording",
	9:  "disconnect_on_recording_failure",
	10: "play_recording_beep_tone",
}

// Decode decodes ListZoomPhoneAccountSettingsOKAutoCallRecording from json.
func (s *ListZoomPhoneAccountSettingsOKAutoCallRecording) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListZoomPhoneAccountSettingsOKAutoCallRecording to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "recording_calls":
			if err := func() error {
				s.RecordingCalls.Reset()
				if err := s.RecordingCalls.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_calls\"")
			}
		case "recording_transcription":
			if err := func() error {
				s.RecordingTranscription.Reset()
				if err := s.RecordingTranscription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_transcription\"")
			}
		case "recording_start_prompt":
			if err := func() error {
				s.RecordingStartPrompt.Reset()
				if err := s.RecordingStartPrompt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_start_prompt\"")
			}
		case "recording_start_prompt_audio_id":
			if err := func() error {
				s.RecordingStartPromptAudioID.Reset()
				if err := s.RecordingStartPromptAudioID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_start_prompt_audio_id\"")
			}
		case "recording_explicit_consent":
			if err := func() error {
				s.RecordingExplicitConsent.Reset()
				if err := s.RecordingExplicitConsent.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_explicit_consent\"")
			}
		case "allow_stop_resume_recording":
			if err := func() error {
				s.AllowStopResumeRecording.Reset()
				if err := s.AllowStopResumeRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_stop_resume_recording\"")
			}
		case "disconnect_on_recording_failure":
			if err := func() error {
				s.DisconnectOnRecordingFailure.Reset()
				if err := s.DisconnectOnRecordingFailure.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"disconnect_on_recording_failure\"")
			}
		case "play_recording_beep_tone":
			if err := func() error {
				s.PlayRecordingBeepTone.Reset()
				if err := s.PlayRecordingBeepTone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_recording_beep_tone\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListZoomPhoneAccountSettingsOKAutoCallRecording")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKAutoCallRecording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListZoomPhoneAccountSettingsOKAutoCallRecording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKAutoCallRecordingPlayRecordingBeepTone) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListZoomPhoneAccountSettingsOKAutoCallRecordingPlayRecordingBeepTone) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.PlayBeepMember.Set {
			e.FieldStart("play_beep_member")
			s.PlayBeepMember.Encode(e)
		}
	}
	{
		if s.PlayBeepVolume.Set {
			e.FieldStart("play_beep_volume")
			s.PlayBeepVolume.Encode(e)
		}
	}
	{
		if s.PlayBeepTimeInterval.Set {
			e.FieldStart("play_beep_time_interval")
			s.PlayBeepTimeInterval.Encode(e)
		}
	}
}

var jsonFieldsNameOfListZoomPhoneAccountSettingsOKAutoCallRecordingPlayRecordingBeepTone = [4]string{
	0: "enable",
	1: "play_beep_member",
	2: "play_beep_volume",
	3: "play_beep_time_interval",
}

// Decode decodes ListZoomPhoneAccountSettingsOKAutoCallRecordingPlayRecordingBeepTone from json.
func (s *ListZoomPhoneAccountSettingsOKAutoCallRecordingPlayRecordingBeepTone) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListZoomPhoneAccountSettingsOKAutoCallRecordingPlayRecordingBeepTone to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "play_beep_member":
			if err := func() error {
				s.PlayBeepMember.Reset()
				if err := s.PlayBeepMember.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_beep_member\"")
			}
		case "play_beep_volume":
			if err := func() error {
				s.PlayBeepVolume.Reset()
				if err := s.PlayBeepVolume.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_beep_volume\"")
			}
		case "play_beep_time_interval":
			if err := func() error {
				s.PlayBeepTimeInterval.Reset()
				if err := s.PlayBeepTimeInterval.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_beep_time_interval\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListZoomPhoneAccountSettingsOKAutoCallRecordingPlayRecordingBeepTone")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKAutoCallRecordingPlayRecordingBeepTone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListZoomPhoneAccountSettingsOKAutoCallRecordingPlayRecordingBeepTone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKAutoDeleteDataAfterRetentionDuration) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListZoomPhoneAccountSettingsOKAutoDeleteDataAfterRetentionDuration) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
}

var jsonFieldsNameOfListZoomPhoneAccountSettingsOKAutoDeleteDataAfterRetentionDuration = [3]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
}

// Decode decodes ListZoomPhoneAccountSettingsOKAutoDeleteDataAfterRetentionDuration from json.
func (s *ListZoomPhoneAccountSettingsOKAutoDeleteDataAfterRetentionDuration) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListZoomPhoneAccountSettingsOKAutoDeleteDataAfterRetentionDuration to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListZoomPhoneAccountSettingsOKAutoDeleteDataAfterRetentionDuration")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKAutoDeleteDataAfterRetentionDuration) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListZoomPhoneAccountSettingsOKAutoDeleteDataAfterRetentionDuration) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKBlockCallsAsThreat) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListZoomPhoneAccountSettingsOKBlockCallsAsThreat) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
}

var jsonFieldsNameOfListZoomPhoneAccountSettingsOKBlockCallsAsThreat = [3]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
}

// Decode decodes ListZoomPhoneAccountSettingsOKBlockCallsAsThreat from json.
func (s *ListZoomPhoneAccountSettingsOKBlockCallsAsThreat) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListZoomPhoneAccountSettingsOKBlockCallsAsThreat to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListZoomPhoneAccountSettingsOKBlockCallsAsThreat")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKBlockCallsAsThreat) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListZoomPhoneAccountSettingsOKBlockCallsAsThreat) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKBlockCallsWithoutCallerID) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListZoomPhoneAccountSettingsOKBlockCallsWithoutCallerID) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
}

var jsonFieldsNameOfListZoomPhoneAccountSettingsOKBlockCallsWithoutCallerID = [3]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
}

// Decode decodes ListZoomPhoneAccountSettingsOKBlockCallsWithoutCallerID from json.
func (s *ListZoomPhoneAccountSettingsOKBlockCallsWithoutCallerID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListZoomPhoneAccountSettingsOKBlockCallsWithoutCallerID to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListZoomPhoneAccountSettingsOKBlockCallsWithoutCallerID")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKBlockCallsWithoutCallerID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListZoomPhoneAccountSettingsOKBlockCallsWithoutCallerID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKBlockExternalCalls) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListZoomPhoneAccountSettingsOKBlockExternalCalls) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
}

var jsonFieldsNameOfListZoomPhoneAccountSettingsOKBlockExternalCalls = [3]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
}

// Decode decodes ListZoomPhoneAccountSettingsOKBlockExternalCalls from json.
func (s *ListZoomPhoneAccountSettingsOKBlockExternalCalls) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListZoomPhoneAccountSettingsOKBlockExternalCalls to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListZoomPhoneAccountSettingsOKBlockExternalCalls")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKBlockExternalCalls) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListZoomPhoneAccountSettingsOKBlockExternalCalls) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKBlockListForInboundCallsAndMessaging) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListZoomPhoneAccountSettingsOKBlockListForInboundCallsAndMessaging) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
}

var jsonFieldsNameOfListZoomPhoneAccountSettingsOKBlockListForInboundCallsAndMessaging = [3]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
}

// Decode decodes ListZoomPhoneAccountSettingsOKBlockListForInboundCallsAndMessaging from json.
func (s *ListZoomPhoneAccountSettingsOKBlockListForInboundCallsAndMessaging) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListZoomPhoneAccountSettingsOKBlockListForInboundCallsAndMessaging to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListZoomPhoneAccountSettingsOKBlockListForInboundCallsAndMessaging")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKBlockListForInboundCallsAndMessaging) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListZoomPhoneAccountSettingsOKBlockListForInboundCallsAndMessaging) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKCallHandlingForwardingToOtherUsers) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListZoomPhoneAccountSettingsOKCallHandlingForwardingToOtherUsers) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.CallForwardingType.Set {
			e.FieldStart("call_forwarding_type")
			s.CallForwardingType.Encode(e)
		}
	}
}

var jsonFieldsNameOfListZoomPhoneAccountSettingsOKCallHandlingForwardingToOtherUsers = [4]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "call_forwarding_type",
}

// Decode decodes ListZoomPhoneAccountSettingsOKCallHandlingForwardingToOtherUsers from json.
func (s *ListZoomPhoneAccountSettingsOKCallHandlingForwardingToOtherUsers) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListZoomPhoneAccountSettingsOKCallHandlingForwardingToOtherUsers to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "call_forwarding_type":
			if err := func() error {
				s.CallForwardingType.Reset()
				if err := s.CallForwardingType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_forwarding_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListZoomPhoneAccountSettingsOKCallHandlingForwardingToOtherUsers")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKCallHandlingForwardingToOtherUsers) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListZoomPhoneAccountSettingsOKCallHandlingForwardingToOtherUsers) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKCallLiveTranscription) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListZoomPhoneAccountSettingsOKCallLiveTranscription) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.TranscriptionStartPrompt.Set {
			e.FieldStart("transcription_start_prompt")
			s.TranscriptionStartPrompt.Encode(e)
		}
	}
}

var jsonFieldsNameOfListZoomPhoneAccountSettingsOKCallLiveTranscription = [4]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "transcription_start_prompt",
}

// Decode decodes ListZoomPhoneAccountSettingsOKCallLiveTranscription from json.
func (s *ListZoomPhoneAccountSettingsOKCallLiveTranscription) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListZoomPhoneAccountSettingsOKCallLiveTranscription to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "transcription_start_prompt":
			if err := func() error {
				s.TranscriptionStartPrompt.Reset()
				if err := s.TranscriptionStartPrompt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transcription_start_prompt\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListZoomPhoneAccountSettingsOKCallLiveTranscription")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKCallLiveTranscription) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListZoomPhoneAccountSettingsOKCallLiveTranscription) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKCallLiveTranscriptionTranscriptionStartPrompt) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListZoomPhoneAccountSettingsOKCallLiveTranscriptionTranscriptionStartPrompt) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.AudioID.Set {
			e.FieldStart("audio_id")
			s.AudioID.Encode(e)
		}
	}
	{
		if s.AudioName.Set {
			e.FieldStart("audio_name")
			s.AudioName.Encode(e)
		}
	}
}

var jsonFieldsNameOfListZoomPhoneAccountSettingsOKCallLiveTranscriptionTranscriptionStartPrompt = [3]string{
	0: "enable",
	1: "audio_id",
	2: "audio_name",
}

// Decode decodes ListZoomPhoneAccountSettingsOKCallLiveTranscriptionTranscriptionStartPrompt from json.
func (s *ListZoomPhoneAccountSettingsOKCallLiveTranscriptionTranscriptionStartPrompt) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListZoomPhoneAccountSettingsOKCallLiveTranscriptionTranscriptionStartPrompt to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "audio_id":
			if err := func() error {
				s.AudioID.Reset()
				if err := s.AudioID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_id\"")
			}
		case "audio_name":
			if err := func() error {
				s.AudioName.Reset()
				if err := s.AudioName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListZoomPhoneAccountSettingsOKCallLiveTranscriptionTranscriptionStartPrompt")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKCallLiveTranscriptionTranscriptionStartPrompt) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListZoomPhoneAccountSettingsOKCallLiveTranscriptionTranscriptionStartPrompt) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKCallOverflow) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListZoomPhoneAccountSettingsOKCallOverflow) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.CallOverflowType.Set {
			e.FieldStart("call_overflow_type")
			s.CallOverflowType.Encode(e)
		}
	}
}

var jsonFieldsNameOfListZoomPhoneAccountSettingsOKCallOverflow = [4]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "call_overflow_type",
}

// Decode decodes ListZoomPhoneAccountSettingsOKCallOverflow from json.
func (s *ListZoomPhoneAccountSettingsOKCallOverflow) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListZoomPhoneAccountSettingsOKCallOverflow to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "call_overflow_type":
			if err := func() error {
				s.CallOverflowType.Reset()
				if err := s.CallOverflowType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_overflow_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListZoomPhoneAccountSettingsOKCallOverflow")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKCallOverflow) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListZoomPhoneAccountSettingsOKCallOverflow) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKCallPark) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListZoomPhoneAccountSettingsOKCallPark) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
}

var jsonFieldsNameOfListZoomPhoneAccountSettingsOKCallPark = [3]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
}

// Decode decodes ListZoomPhoneAccountSettingsOKCallPark from json.
func (s *ListZoomPhoneAccountSettingsOKCallPark) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListZoomPhoneAccountSettingsOKCallPark to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListZoomPhoneAccountSettingsOKCallPark")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKCallPark) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListZoomPhoneAccountSettingsOKCallPark) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKCallQueueOptOutReason) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListZoomPhoneAccountSettingsOKCallQueueOptOutReason) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
}

var jsonFieldsNameOfListZoomPhoneAccountSettingsOKCallQueueOptOutReason = [3]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
}

// Decode decodes ListZoomPhoneAccountSettingsOKCallQueueOptOutReason from json.
func (s *ListZoomPhoneAccountSettingsOKCallQueueOptOutReason) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListZoomPhoneAccountSettingsOKCallQueueOptOutReason to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListZoomPhoneAccountSettingsOKCallQueueOptOutReason")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKCallQueueOptOutReason) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListZoomPhoneAccountSettingsOKCallQueueOptOutReason) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKCallTransferring) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListZoomPhoneAccountSettingsOKCallTransferring) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.CallTransferringType.Set {
			e.FieldStart("call_transferring_type")
			s.CallTransferringType.Encode(e)
		}
	}
}

var jsonFieldsNameOfListZoomPhoneAccountSettingsOKCallTransferring = [4]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "call_transferring_type",
}

// Decode decodes ListZoomPhoneAccountSettingsOKCallTransferring from json.
func (s *ListZoomPhoneAccountSettingsOKCallTransferring) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListZoomPhoneAccountSettingsOKCallTransferring to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "call_transferring_type":
			if err := func() error {
				s.CallTransferringType.Reset()
				if err := s.CallTransferringType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_transferring_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListZoomPhoneAccountSettingsOKCallTransferring")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKCallTransferring) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListZoomPhoneAccountSettingsOKCallTransferring) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKCheckVoicemailsOverPhone) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListZoomPhoneAccountSettingsOKCheckVoicemailsOverPhone) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
}

var jsonFieldsNameOfListZoomPhoneAccountSettingsOKCheckVoicemailsOverPhone = [3]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
}

// Decode decodes ListZoomPhoneAccountSettingsOKCheckVoicemailsOverPhone from json.
func (s *ListZoomPhoneAccountSettingsOKCheckVoicemailsOverPhone) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListZoomPhoneAccountSettingsOKCheckVoicemailsOverPhone to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListZoomPhoneAccountSettingsOKCheckVoicemailsOverPhone")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKCheckVoicemailsOverPhone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListZoomPhoneAccountSettingsOKCheckVoicemailsOverPhone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKDelegation) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListZoomPhoneAccountSettingsOKDelegation) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
}

var jsonFieldsNameOfListZoomPhoneAccountSettingsOKDelegation = [3]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
}

// Decode decodes ListZoomPhoneAccountSettingsOKDelegation from json.
func (s *ListZoomPhoneAccountSettingsOKDelegation) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListZoomPhoneAccountSettingsOKDelegation to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListZoomPhoneAccountSettingsOKDelegation")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKDelegation) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListZoomPhoneAccountSettingsOKDelegation) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKDisplayCallFeedbackSurvey) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListZoomPhoneAccountSettingsOKDisplayCallFeedbackSurvey) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
}

var jsonFieldsNameOfListZoomPhoneAccountSettingsOKDisplayCallFeedbackSurvey = [3]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
}

// Decode decodes ListZoomPhoneAccountSettingsOKDisplayCallFeedbackSurvey from json.
func (s *ListZoomPhoneAccountSettingsOKDisplayCallFeedbackSurvey) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListZoomPhoneAccountSettingsOKDisplayCallFeedbackSurvey to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListZoomPhoneAccountSettingsOKDisplayCallFeedbackSurvey")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKDisplayCallFeedbackSurvey) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListZoomPhoneAccountSettingsOKDisplayCallFeedbackSurvey) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKE2eEncryption) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListZoomPhoneAccountSettingsOKE2eEncryption) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
}

var jsonFieldsNameOfListZoomPhoneAccountSettingsOKE2eEncryption = [3]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
}

// Decode decodes ListZoomPhoneAccountSettingsOKE2eEncryption from json.
func (s *ListZoomPhoneAccountSettingsOKE2eEncryption) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListZoomPhoneAccountSettingsOKE2eEncryption to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListZoomPhoneAccountSettingsOKE2eEncryption")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKE2eEncryption) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListZoomPhoneAccountSettingsOKE2eEncryption) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKElevateToMeeting) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListZoomPhoneAccountSettingsOKElevateToMeeting) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
}

var jsonFieldsNameOfListZoomPhoneAccountSettingsOKElevateToMeeting = [3]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
}

// Decode decodes ListZoomPhoneAccountSettingsOKElevateToMeeting from json.
func (s *ListZoomPhoneAccountSettingsOKElevateToMeeting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListZoomPhoneAccountSettingsOKElevateToMeeting to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListZoomPhoneAccountSettingsOKElevateToMeeting")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKElevateToMeeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListZoomPhoneAccountSettingsOKElevateToMeeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKExternalCallingOnZoomRoomCommonArea) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListZoomPhoneAccountSettingsOKExternalCallingOnZoomRoomCommonArea) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
}

var jsonFieldsNameOfListZoomPhoneAccountSettingsOKExternalCallingOnZoomRoomCommonArea = [3]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
}

// Decode decodes ListZoomPhoneAccountSettingsOKExternalCallingOnZoomRoomCommonArea from json.
func (s *ListZoomPhoneAccountSettingsOKExternalCallingOnZoomRoomCommonArea) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListZoomPhoneAccountSettingsOKExternalCallingOnZoomRoomCommonArea to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListZoomPhoneAccountSettingsOKExternalCallingOnZoomRoomCommonArea")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKExternalCallingOnZoomRoomCommonArea) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListZoomPhoneAccountSettingsOKExternalCallingOnZoomRoomCommonArea) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKHandOffToRoom) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListZoomPhoneAccountSettingsOKHandOffToRoom) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
}

var jsonFieldsNameOfListZoomPhoneAccountSettingsOKHandOffToRoom = [3]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
}

// Decode decodes ListZoomPhoneAccountSettingsOKHandOffToRoom from json.
func (s *ListZoomPhoneAccountSettingsOKHandOffToRoom) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListZoomPhoneAccountSettingsOKHandOffToRoom to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListZoomPhoneAccountSettingsOKHandOffToRoom")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKHandOffToRoom) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListZoomPhoneAccountSettingsOKHandOffToRoom) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKInternationalCalling) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListZoomPhoneAccountSettingsOKInternationalCalling) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
}

var jsonFieldsNameOfListZoomPhoneAccountSettingsOKInternationalCalling = [3]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
}

// Decode decodes ListZoomPhoneAccountSettingsOKInternationalCalling from json.
func (s *ListZoomPhoneAccountSettingsOKInternationalCalling) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListZoomPhoneAccountSettingsOKInternationalCalling to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListZoomPhoneAccountSettingsOKInternationalCalling")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKInternationalCalling) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListZoomPhoneAccountSettingsOKInternationalCalling) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKLocalSurvivabilityMode) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListZoomPhoneAccountSettingsOKLocalSurvivabilityMode) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
}

var jsonFieldsNameOfListZoomPhoneAccountSettingsOKLocalSurvivabilityMode = [3]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
}

// Decode decodes ListZoomPhoneAccountSettingsOKLocalSurvivabilityMode from json.
func (s *ListZoomPhoneAccountSettingsOKLocalSurvivabilityMode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListZoomPhoneAccountSettingsOKLocalSurvivabilityMode to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListZoomPhoneAccountSettingsOKLocalSurvivabilityMode")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKLocalSurvivabilityMode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListZoomPhoneAccountSettingsOKLocalSurvivabilityMode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKMobileSwitchToCarrier) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListZoomPhoneAccountSettingsOKMobileSwitchToCarrier) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
}

var jsonFieldsNameOfListZoomPhoneAccountSettingsOKMobileSwitchToCarrier = [3]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
}

// Decode decodes ListZoomPhoneAccountSettingsOKMobileSwitchToCarrier from json.
func (s *ListZoomPhoneAccountSettingsOKMobileSwitchToCarrier) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListZoomPhoneAccountSettingsOKMobileSwitchToCarrier to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListZoomPhoneAccountSettingsOKMobileSwitchToCarrier")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKMobileSwitchToCarrier) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListZoomPhoneAccountSettingsOKMobileSwitchToCarrier) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKOutboundCalling) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListZoomPhoneAccountSettingsOKOutboundCalling) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
}

var jsonFieldsNameOfListZoomPhoneAccountSettingsOKOutboundCalling = [3]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
}

// Decode decodes ListZoomPhoneAccountSettingsOKOutboundCalling from json.
func (s *ListZoomPhoneAccountSettingsOKOutboundCalling) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListZoomPhoneAccountSettingsOKOutboundCalling to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListZoomPhoneAccountSettingsOKOutboundCalling")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKOutboundCalling) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListZoomPhoneAccountSettingsOKOutboundCalling) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKOutboundSMS) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListZoomPhoneAccountSettingsOKOutboundSMS) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
}

var jsonFieldsNameOfListZoomPhoneAccountSettingsOKOutboundSMS = [3]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
}

// Decode decodes ListZoomPhoneAccountSettingsOKOutboundSMS from json.
func (s *ListZoomPhoneAccountSettingsOKOutboundSMS) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListZoomPhoneAccountSettingsOKOutboundSMS to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListZoomPhoneAccountSettingsOKOutboundSMS")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKOutboundSMS) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListZoomPhoneAccountSettingsOKOutboundSMS) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKOverrideDefaultPort) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListZoomPhoneAccountSettingsOKOverrideDefaultPort) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
}

var jsonFieldsNameOfListZoomPhoneAccountSettingsOKOverrideDefaultPort = [3]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
}

// Decode decodes ListZoomPhoneAccountSettingsOKOverrideDefaultPort from json.
func (s *ListZoomPhoneAccountSettingsOKOverrideDefaultPort) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListZoomPhoneAccountSettingsOKOverrideDefaultPort to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListZoomPhoneAccountSettingsOKOverrideDefaultPort")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKOverrideDefaultPort) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListZoomPhoneAccountSettingsOKOverrideDefaultPort) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKPeerToPeerMedia) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListZoomPhoneAccountSettingsOKPeerToPeerMedia) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
}

var jsonFieldsNameOfListZoomPhoneAccountSettingsOKPeerToPeerMedia = [3]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
}

// Decode decodes ListZoomPhoneAccountSettingsOKPeerToPeerMedia from json.
func (s *ListZoomPhoneAccountSettingsOKPeerToPeerMedia) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListZoomPhoneAccountSettingsOKPeerToPeerMedia to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListZoomPhoneAccountSettingsOKPeerToPeerMedia")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKPeerToPeerMedia) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListZoomPhoneAccountSettingsOKPeerToPeerMedia) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKPersonalAudioLibrary) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListZoomPhoneAccountSettingsOKPersonalAudioLibrary) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.AllowMusicOnHoldCustomization.Set {
			e.FieldStart("allow_music_on_hold_customization")
			s.AllowMusicOnHoldCustomization.Encode(e)
		}
	}
	{
		if s.AllowVoicemailAndMessageGreetingCustomization.Set {
			e.FieldStart("allow_voicemail_and_message_greeting_customization")
			s.AllowVoicemailAndMessageGreetingCustomization.Encode(e)
		}
	}
}

var jsonFieldsNameOfListZoomPhoneAccountSettingsOKPersonalAudioLibrary = [5]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "allow_music_on_hold_customization",
	4: "allow_voicemail_and_message_greeting_customization",
}

// Decode decodes ListZoomPhoneAccountSettingsOKPersonalAudioLibrary from json.
func (s *ListZoomPhoneAccountSettingsOKPersonalAudioLibrary) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListZoomPhoneAccountSettingsOKPersonalAudioLibrary to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "allow_music_on_hold_customization":
			if err := func() error {
				s.AllowMusicOnHoldCustomization.Reset()
				if err := s.AllowMusicOnHoldCustomization.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_music_on_hold_customization\"")
			}
		case "allow_voicemail_and_message_greeting_customization":
			if err := func() error {
				s.AllowVoicemailAndMessageGreetingCustomization.Reset()
				if err := s.AllowVoicemailAndMessageGreetingCustomization.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_voicemail_and_message_greeting_customization\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListZoomPhoneAccountSettingsOKPersonalAudioLibrary")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKPersonalAudioLibrary) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListZoomPhoneAccountSettingsOKPersonalAudioLibrary) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKRestrictedCallHours) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListZoomPhoneAccountSettingsOKRestrictedCallHours) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.TimeZone.Set {
			e.FieldStart("time_zone")
			s.TimeZone.Encode(e)
		}
	}
	{
		if s.RestrictedHoursApplied.Set {
			e.FieldStart("restricted_hours_applied")
			s.RestrictedHoursApplied.Encode(e)
		}
	}
	{
		if s.RestrictedHolidayHoursApplied.Set {
			e.FieldStart("restricted_holiday_hours_applied")
			s.RestrictedHolidayHoursApplied.Encode(e)
		}
	}
	{
		if s.AllowInternalCalls.Set {
			e.FieldStart("allow_internal_calls")
			s.AllowInternalCalls.Encode(e)
		}
	}
}

var jsonFieldsNameOfListZoomPhoneAccountSettingsOKRestrictedCallHours = [7]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "time_zone",
	4: "restricted_hours_applied",
	5: "restricted_holiday_hours_applied",
	6: "allow_internal_calls",
}

// Decode decodes ListZoomPhoneAccountSettingsOKRestrictedCallHours from json.
func (s *ListZoomPhoneAccountSettingsOKRestrictedCallHours) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListZoomPhoneAccountSettingsOKRestrictedCallHours to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "time_zone":
			if err := func() error {
				s.TimeZone.Reset()
				if err := s.TimeZone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"time_zone\"")
			}
		case "restricted_hours_applied":
			if err := func() error {
				s.RestrictedHoursApplied.Reset()
				if err := s.RestrictedHoursApplied.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"restricted_hours_applied\"")
			}
		case "restricted_holiday_hours_applied":
			if err := func() error {
				s.RestrictedHolidayHoursApplied.Reset()
				if err := s.RestrictedHolidayHoursApplied.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"restricted_holiday_hours_applied\"")
			}
		case "allow_internal_calls":
			if err := func() error {
				s.AllowInternalCalls.Reset()
				if err := s.AllowInternalCalls.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_internal_calls\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListZoomPhoneAccountSettingsOKRestrictedCallHours")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKRestrictedCallHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListZoomPhoneAccountSettingsOKRestrictedCallHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKRestrictedCallHoursTimeZone) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListZoomPhoneAccountSettingsOKRestrictedCallHoursTimeZone) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfListZoomPhoneAccountSettingsOKRestrictedCallHoursTimeZone = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes ListZoomPhoneAccountSettingsOKRestrictedCallHoursTimeZone from json.
func (s *ListZoomPhoneAccountSettingsOKRestrictedCallHoursTimeZone) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListZoomPhoneAccountSettingsOKRestrictedCallHoursTimeZone to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListZoomPhoneAccountSettingsOKRestrictedCallHoursTimeZone")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKRestrictedCallHoursTimeZone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListZoomPhoneAccountSettingsOKRestrictedCallHoursTimeZone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKSMS) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListZoomPhoneAccountSettingsOKSMS) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.InternationalSMS.Set {
			e.FieldStart("international_sms")
			s.InternationalSMS.Encode(e)
		}
	}
}

var jsonFieldsNameOfListZoomPhoneAccountSettingsOKSMS = [4]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "international_sms",
}

// Decode decodes ListZoomPhoneAccountSettingsOKSMS from json.
func (s *ListZoomPhoneAccountSettingsOKSMS) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListZoomPhoneAccountSettingsOKSMS to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "international_sms":
			if err := func() error {
				s.InternationalSMS.Reset()
				if err := s.InternationalSMS.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"international_sms\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListZoomPhoneAccountSettingsOKSMS")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKSMS) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListZoomPhoneAccountSettingsOKSMS) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKSMSEtiquetteTool) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListZoomPhoneAccountSettingsOKSMSEtiquetteTool) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
}

var jsonFieldsNameOfListZoomPhoneAccountSettingsOKSMSEtiquetteTool = [3]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
}

// Decode decodes ListZoomPhoneAccountSettingsOKSMSEtiquetteTool from json.
func (s *ListZoomPhoneAccountSettingsOKSMSEtiquetteTool) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListZoomPhoneAccountSettingsOKSMSEtiquetteTool to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListZoomPhoneAccountSettingsOKSMSEtiquetteTool")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKSMSEtiquetteTool) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListZoomPhoneAccountSettingsOKSMSEtiquetteTool) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKSelectOutboundCallerID) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListZoomPhoneAccountSettingsOKSelectOutboundCallerID) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.AllowHideOutboundCallerID.Set {
			e.FieldStart("allow_hide_outbound_caller_id")
			s.AllowHideOutboundCallerID.Encode(e)
		}
	}
}

var jsonFieldsNameOfListZoomPhoneAccountSettingsOKSelectOutboundCallerID = [4]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "allow_hide_outbound_caller_id",
}

// Decode decodes ListZoomPhoneAccountSettingsOKSelectOutboundCallerID from json.
func (s *ListZoomPhoneAccountSettingsOKSelectOutboundCallerID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListZoomPhoneAccountSettingsOKSelectOutboundCallerID to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "allow_hide_outbound_caller_id":
			if err := func() error {
				s.AllowHideOutboundCallerID.Reset()
				if err := s.AllowHideOutboundCallerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_hide_outbound_caller_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListZoomPhoneAccountSettingsOKSelectOutboundCallerID")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKSelectOutboundCallerID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListZoomPhoneAccountSettingsOKSelectOutboundCallerID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKSharedVoicemailNotificationByEmail) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListZoomPhoneAccountSettingsOKSharedVoicemailNotificationByEmail) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
}

var jsonFieldsNameOfListZoomPhoneAccountSettingsOKSharedVoicemailNotificationByEmail = [3]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
}

// Decode decodes ListZoomPhoneAccountSettingsOKSharedVoicemailNotificationByEmail from json.
func (s *ListZoomPhoneAccountSettingsOKSharedVoicemailNotificationByEmail) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListZoomPhoneAccountSettingsOKSharedVoicemailNotificationByEmail to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListZoomPhoneAccountSettingsOKSharedVoicemailNotificationByEmail")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKSharedVoicemailNotificationByEmail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListZoomPhoneAccountSettingsOKSharedVoicemailNotificationByEmail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKVoicemail) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListZoomPhoneAccountSettingsOKVoicemail) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.AllowVideomail.Set {
			e.FieldStart("allow_videomail")
			s.AllowVideomail.Encode(e)
		}
	}
	{
		if s.AllowDownload.Set {
			e.FieldStart("allow_download")
			s.AllowDownload.Encode(e)
		}
	}
	{
		if s.AllowDelete.Set {
			e.FieldStart("allow_delete")
			s.AllowDelete.Encode(e)
		}
	}
	{
		if s.AllowShare.Set {
			e.FieldStart("allow_share")
			s.AllowShare.Encode(e)
		}
	}
	{
		if s.AllowVirtualBackground.Set {
			e.FieldStart("allow_virtual_background")
			s.AllowVirtualBackground.Encode(e)
		}
	}
}

var jsonFieldsNameOfListZoomPhoneAccountSettingsOKVoicemail = [8]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "allow_videomail",
	4: "allow_download",
	5: "allow_delete",
	6: "allow_share",
	7: "allow_virtual_background",
}

// Decode decodes ListZoomPhoneAccountSettingsOKVoicemail from json.
func (s *ListZoomPhoneAccountSettingsOKVoicemail) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListZoomPhoneAccountSettingsOKVoicemail to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "allow_videomail":
			if err := func() error {
				s.AllowVideomail.Reset()
				if err := s.AllowVideomail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_videomail\"")
			}
		case "allow_download":
			if err := func() error {
				s.AllowDownload.Reset()
				if err := s.AllowDownload.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_download\"")
			}
		case "allow_delete":
			if err := func() error {
				s.AllowDelete.Reset()
				if err := s.AllowDelete.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_delete\"")
			}
		case "allow_share":
			if err := func() error {
				s.AllowShare.Reset()
				if err := s.AllowShare.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_share\"")
			}
		case "allow_virtual_background":
			if err := func() error {
				s.AllowVirtualBackground.Reset()
				if err := s.AllowVirtualBackground.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_virtual_background\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListZoomPhoneAccountSettingsOKVoicemail")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKVoicemail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListZoomPhoneAccountSettingsOKVoicemail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKVoicemailNotificationByEmail) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListZoomPhoneAccountSettingsOKVoicemailNotificationByEmail) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.IncludeVoicemailFile.Set {
			e.FieldStart("include_voicemail_file")
			s.IncludeVoicemailFile.Encode(e)
		}
	}
	{
		if s.IncludeVoicemailTranscription.Set {
			e.FieldStart("include_voicemail_transcription")
			s.IncludeVoicemailTranscription.Encode(e)
		}
	}
	{
		if s.ForwardVoicemailToEmail.Set {
			e.FieldStart("forward_voicemail_to_email")
			s.ForwardVoicemailToEmail.Encode(e)
		}
	}
}

var jsonFieldsNameOfListZoomPhoneAccountSettingsOKVoicemailNotificationByEmail = [6]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "include_voicemail_file",
	4: "include_voicemail_transcription",
	5: "forward_voicemail_to_email",
}

// Decode decodes ListZoomPhoneAccountSettingsOKVoicemailNotificationByEmail from json.
func (s *ListZoomPhoneAccountSettingsOKVoicemailNotificationByEmail) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListZoomPhoneAccountSettingsOKVoicemailNotificationByEmail to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "include_voicemail_file":
			if err := func() error {
				s.IncludeVoicemailFile.Reset()
				if err := s.IncludeVoicemailFile.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"include_voicemail_file\"")
			}
		case "include_voicemail_transcription":
			if err := func() error {
				s.IncludeVoicemailTranscription.Reset()
				if err := s.IncludeVoicemailTranscription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"include_voicemail_transcription\"")
			}
		case "forward_voicemail_to_email":
			if err := func() error {
				s.ForwardVoicemailToEmail.Reset()
				if err := s.ForwardVoicemailToEmail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward_voicemail_to_email\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListZoomPhoneAccountSettingsOKVoicemailNotificationByEmail")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKVoicemailNotificationByEmail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListZoomPhoneAccountSettingsOKVoicemailNotificationByEmail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKVoicemailTranscription) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListZoomPhoneAccountSettingsOKVoicemailTranscription) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
}

var jsonFieldsNameOfListZoomPhoneAccountSettingsOKVoicemailTranscription = [3]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
}

// Decode decodes ListZoomPhoneAccountSettingsOKVoicemailTranscription from json.
func (s *ListZoomPhoneAccountSettingsOKVoicemailTranscription) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListZoomPhoneAccountSettingsOKVoicemailTranscription to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListZoomPhoneAccountSettingsOKVoicemailTranscription")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKVoicemailTranscription) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListZoomPhoneAccountSettingsOKVoicemailTranscription) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKZoomPhoneOnMobile) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListZoomPhoneAccountSettingsOKZoomPhoneOnMobile) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.AllowCallingSMSMms.Set {
			e.FieldStart("allow_calling_sms_mms")
			s.AllowCallingSMSMms.Encode(e)
		}
	}
}

var jsonFieldsNameOfListZoomPhoneAccountSettingsOKZoomPhoneOnMobile = [4]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "allow_calling_sms_mms",
}

// Decode decodes ListZoomPhoneAccountSettingsOKZoomPhoneOnMobile from json.
func (s *ListZoomPhoneAccountSettingsOKZoomPhoneOnMobile) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListZoomPhoneAccountSettingsOKZoomPhoneOnMobile to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "allow_calling_sms_mms":
			if err := func() error {
				s.AllowCallingSMSMms.Reset()
				if err := s.AllowCallingSMSMms.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_calling_sms_mms\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListZoomPhoneAccountSettingsOKZoomPhoneOnMobile")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKZoomPhoneOnMobile) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListZoomPhoneAccountSettingsOKZoomPhoneOnMobile) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKZoomPhoneOnPwa) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListZoomPhoneAccountSettingsOKZoomPhoneOnPwa) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
}

var jsonFieldsNameOfListZoomPhoneAccountSettingsOKZoomPhoneOnPwa = [3]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
}

// Decode decodes ListZoomPhoneAccountSettingsOKZoomPhoneOnPwa from json.
func (s *ListZoomPhoneAccountSettingsOKZoomPhoneOnPwa) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListZoomPhoneAccountSettingsOKZoomPhoneOnPwa to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListZoomPhoneAccountSettingsOKZoomPhoneOnPwa")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListZoomPhoneAccountSettingsOKZoomPhoneOnPwa) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListZoomPhoneAccountSettingsOKZoomPhoneOnPwa) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListZoomRoomsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListZoomRoomsOK) encodeFields(e *jx.Encoder) {
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
	{
		if s.Rooms != nil {
			e.FieldStart("rooms")
			e.ArrStart()
			for _, elem := range s.Rooms {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalRecords.Set {
			e.FieldStart("total_records")
			s.TotalRecords.Encode(e)
		}
	}
}

var jsonFieldsNameOfListZoomRoomsOK = [4]string{
	0: "next_page_token",
	1: "page_size",
	2: "rooms",
	3: "total_records",
}

// Decode decodes ListZoomRoomsOK from json.
func (s *ListZoomRoomsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListZoomRoomsOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		case "rooms":
			if err := func() error {
				s.Rooms = make([]ListZoomRoomsOKRoomsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListZoomRoomsOKRoomsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Rooms = append(s.Rooms, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rooms\"")
			}
		case "total_records":
			if err := func() error {
				s.TotalRecords.Reset()
				if err := s.TotalRecords.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_records\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListZoomRoomsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListZoomRoomsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListZoomRoomsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListZoomRoomsOKRoomsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListZoomRoomsOKRoomsItem) encodeFields(e *jx.Encoder) {
	{
		if s.CallingPlans != nil {
			e.FieldStart("calling_plans")
			e.ArrStart()
			for _, elem := range s.CallingPlans {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.PhoneNumbers != nil {
			e.FieldStart("phone_numbers")
			e.ArrStart()
			for _, elem := range s.PhoneNumbers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Site.Set {
			e.FieldStart("site")
			s.Site.Encode(e)
		}
	}
}

var jsonFieldsNameOfListZoomRoomsOKRoomsItem = [7]string{
	0: "calling_plans",
	1: "extension_id",
	2: "extension_number",
	3: "id",
	4: "name",
	5: "phone_numbers",
	6: "site",
}

// Decode decodes ListZoomRoomsOKRoomsItem from json.
func (s *ListZoomRoomsOKRoomsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListZoomRoomsOKRoomsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "calling_plans":
			if err := func() error {
				s.CallingPlans = make([]ListZoomRoomsOKRoomsItemCallingPlansItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListZoomRoomsOKRoomsItemCallingPlansItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CallingPlans = append(s.CallingPlans, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"calling_plans\"")
			}
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "phone_numbers":
			if err := func() error {
				s.PhoneNumbers = make([]ListZoomRoomsOKRoomsItemPhoneNumbersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListZoomRoomsOKRoomsItemPhoneNumbersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.PhoneNumbers = append(s.PhoneNumbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_numbers\"")
			}
		case "site":
			if err := func() error {
				s.Site.Reset()
				if err := s.Site.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListZoomRoomsOKRoomsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListZoomRoomsOKRoomsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListZoomRoomsOKRoomsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListZoomRoomsOKRoomsItemCallingPlansItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListZoomRoomsOKRoomsItemCallingPlansItem) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.BillingAccountID.Set {
			e.FieldStart("billing_account_id")
			s.BillingAccountID.Encode(e)
		}
	}
	{
		if s.BillingAccountName.Set {
			e.FieldStart("billing_account_name")
			s.BillingAccountName.Encode(e)
		}
	}
}

var jsonFieldsNameOfListZoomRoomsOKRoomsItemCallingPlansItem = [4]string{
	0: "name",
	1: "type",
	2: "billing_account_id",
	3: "billing_account_name",
}

// Decode decodes ListZoomRoomsOKRoomsItemCallingPlansItem from json.
func (s *ListZoomRoomsOKRoomsItemCallingPlansItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListZoomRoomsOKRoomsItemCallingPlansItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "billing_account_id":
			if err := func() error {
				s.BillingAccountID.Reset()
				if err := s.BillingAccountID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"billing_account_id\"")
			}
		case "billing_account_name":
			if err := func() error {
				s.BillingAccountName.Reset()
				if err := s.BillingAccountName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"billing_account_name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListZoomRoomsOKRoomsItemCallingPlansItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListZoomRoomsOKRoomsItemCallingPlansItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListZoomRoomsOKRoomsItemCallingPlansItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListZoomRoomsOKRoomsItemPhoneNumbersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListZoomRoomsOKRoomsItemPhoneNumbersItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Number.Set {
			e.FieldStart("number")
			s.Number.Encode(e)
		}
	}
}

var jsonFieldsNameOfListZoomRoomsOKRoomsItemPhoneNumbersItem = [2]string{
	0: "id",
	1: "number",
}

// Decode decodes ListZoomRoomsOKRoomsItemPhoneNumbersItem from json.
func (s *ListZoomRoomsOKRoomsItemPhoneNumbersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListZoomRoomsOKRoomsItemPhoneNumbersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "number":
			if err := func() error {
				s.Number.Reset()
				if err := s.Number.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListZoomRoomsOKRoomsItemPhoneNumbersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListZoomRoomsOKRoomsItemPhoneNumbersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListZoomRoomsOKRoomsItemPhoneNumbersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListZoomRoomsOKRoomsItemSite) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListZoomRoomsOKRoomsItemSite) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfListZoomRoomsOKRoomsItemSite = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes ListZoomRoomsOKRoomsItemSite from json.
func (s *ListZoomRoomsOKRoomsItemSite) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListZoomRoomsOKRoomsItemSite to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListZoomRoomsOKRoomsItemSite")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListZoomRoomsOKRoomsItemSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListZoomRoomsOKRoomsItemSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MarkPhoneNumberAsBlockedForAllExtensionsReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MarkPhoneNumberAsBlockedForAllExtensionsReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("blocked_statistic_id")
		e.Str(s.BlockedStatisticID)
	}
}

var jsonFieldsNameOfMarkPhoneNumberAsBlockedForAllExtensionsReq = [1]string{
	0: "blocked_statistic_id",
}

// Decode decodes MarkPhoneNumberAsBlockedForAllExtensionsReq from json.
func (s *MarkPhoneNumberAsBlockedForAllExtensionsReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MarkPhoneNumberAsBlockedForAllExtensionsReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "blocked_statistic_id":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.BlockedStatisticID = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"blocked_statistic_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MarkPhoneNumberAsBlockedForAllExtensionsReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfMarkPhoneNumberAsBlockedForAllExtensionsReq) {
					name = jsonFieldsNameOfMarkPhoneNumberAsBlockedForAllExtensionsReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MarkPhoneNumberAsBlockedForAllExtensionsReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MarkPhoneNumberAsBlockedForAllExtensionsReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AccountCallLogsOKCallLogsItemOwner as json.
func (o OptAccountCallLogsOKCallLogsItemOwner) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AccountCallLogsOKCallLogsItemOwner from json.
func (o *OptAccountCallLogsOKCallLogsItemOwner) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAccountCallLogsOKCallLogsItemOwner to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAccountCallLogsOKCallLogsItemOwner) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAccountCallLogsOKCallLogsItemOwner) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AccountCallLogsOKCallLogsItemSite as json.
func (o OptAccountCallLogsOKCallLogsItemSite) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AccountCallLogsOKCallLogsItemSite from json.
func (o *OptAccountCallLogsOKCallLogsItemSite) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAccountCallLogsOKCallLogsItemSite to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAccountCallLogsOKCallLogsItemSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAccountCallLogsOKCallLogsItemSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AccountSmsSessionOKSMSSessionsItemParticipantsItemOwner as json.
func (o OptAccountSmsSessionOKSMSSessionsItemParticipantsItemOwner) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AccountSmsSessionOKSMSSessionsItemParticipantsItemOwner from json.
func (o *OptAccountSmsSessionOKSMSSessionsItemParticipantsItemOwner) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAccountSmsSessionOKSMSSessionsItemParticipantsItemOwner to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAccountSmsSessionOKSMSSessionsItemParticipantsItemOwner) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAccountSmsSessionOKSMSSessionsItemParticipantsItemOwner) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddAccountLevelInboundBlockRulesReq as json.
func (o OptAddAccountLevelInboundBlockRulesReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddAccountLevelInboundBlockRulesReq from json.
func (o *OptAddAccountLevelInboundBlockRulesReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddAccountLevelInboundBlockRulesReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddAccountLevelInboundBlockRulesReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddAccountLevelInboundBlockRulesReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddAccountOutboundCallingExceptionRuleReq as json.
func (o OptAddAccountOutboundCallingExceptionRuleReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddAccountOutboundCallingExceptionRuleReq from json.
func (o *OptAddAccountOutboundCallingExceptionRuleReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddAccountOutboundCallingExceptionRuleReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddAccountOutboundCallingExceptionRuleReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddAccountOutboundCallingExceptionRuleReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddAccountOutboundCallingExceptionRuleReqExceptionRule as json.
func (o OptAddAccountOutboundCallingExceptionRuleReqExceptionRule) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddAccountOutboundCallingExceptionRuleReqExceptionRule from json.
func (o *OptAddAccountOutboundCallingExceptionRuleReqExceptionRule) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddAccountOutboundCallingExceptionRuleReqExceptionRule to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddAccountOutboundCallingExceptionRuleReqExceptionRule) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddAccountOutboundCallingExceptionRuleReqExceptionRule) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddAnAlertSettingReq as json.
func (o OptAddAnAlertSettingReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddAnAlertSettingReq from json.
func (o *OptAddAnAlertSettingReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddAnAlertSettingReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddAnAlertSettingReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddAnAlertSettingReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddAnAudioReq as json.
func (o OptAddAnAudioReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddAnAudioReq from json.
func (o *OptAddAnAudioReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddAnAudioReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddAnAudioReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddAnAudioReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddAnumberToBlockedListReq as json.
func (o OptAddAnumberToBlockedListReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddAnumberToBlockedListReq from json.
func (o *OptAddAnumberToBlockedListReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddAnumberToBlockedListReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddAnumberToBlockedListReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddAnumberToBlockedListReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddAudioItemReq as json.
func (o OptAddAudioItemReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddAudioItemReq from json.
func (o *OptAddAudioItemReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddAudioItemReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddAudioItemReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddAudioItemReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddAutoReceptionistReq as json.
func (o OptAddAutoReceptionistReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddAutoReceptionistReq from json.
func (o *OptAddAutoReceptionistReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddAutoReceptionistReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddAutoReceptionistReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddAutoReceptionistReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddBYOCNumberReq as json.
func (o OptAddBYOCNumberReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddBYOCNumberReq from json.
func (o *OptAddBYOCNumberReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddBYOCNumberReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddBYOCNumberReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddBYOCNumberReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddCQPolicySubSettingReq as json.
func (o OptAddCQPolicySubSettingReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddCQPolicySubSettingReq from json.
func (o *OptAddCQPolicySubSettingReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddCQPolicySubSettingReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddCQPolicySubSettingReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddCQPolicySubSettingReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddCallHandlingReq as json.
func (o OptAddCallHandlingReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddCallHandlingReq from json.
func (o *OptAddCallHandlingReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddCallHandlingReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddCallHandlingReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddCallHandlingReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddClientCodeToCallLogReq as json.
func (o OptAddClientCodeToCallLogReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddClientCodeToCallLogReq from json.
func (o *OptAddClientCodeToCallLogReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddClientCodeToCallLogReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddClientCodeToCallLogReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddClientCodeToCallLogReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddCommonAreaOutboundCallingExceptionRuleReq as json.
func (o OptAddCommonAreaOutboundCallingExceptionRuleReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddCommonAreaOutboundCallingExceptionRuleReq from json.
func (o *OptAddCommonAreaOutboundCallingExceptionRuleReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddCommonAreaOutboundCallingExceptionRuleReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddCommonAreaOutboundCallingExceptionRuleReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddCommonAreaOutboundCallingExceptionRuleReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddCommonAreaOutboundCallingExceptionRuleReqExceptionRule as json.
func (o OptAddCommonAreaOutboundCallingExceptionRuleReqExceptionRule) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddCommonAreaOutboundCallingExceptionRuleReqExceptionRule from json.
func (o *OptAddCommonAreaOutboundCallingExceptionRuleReqExceptionRule) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddCommonAreaOutboundCallingExceptionRuleReqExceptionRule to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddCommonAreaOutboundCallingExceptionRuleReqExceptionRule) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddCommonAreaOutboundCallingExceptionRuleReqExceptionRule) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddCommonAreaReq as json.
func (o OptAddCommonAreaReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddCommonAreaReq from json.
func (o *OptAddCommonAreaReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddCommonAreaReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddCommonAreaReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddCommonAreaReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddCommonAreaSettingReq as json.
func (o OptAddCommonAreaSettingReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddCommonAreaSettingReq from json.
func (o *OptAddCommonAreaSettingReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddCommonAreaSettingReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddCommonAreaSettingReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddCommonAreaSettingReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddEmergencyAddressCreatedOwner as json.
func (o OptAddEmergencyAddressCreatedOwner) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddEmergencyAddressCreatedOwner from json.
func (o *OptAddEmergencyAddressCreatedOwner) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddEmergencyAddressCreatedOwner to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddEmergencyAddressCreatedOwner) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddEmergencyAddressCreatedOwner) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddEmergencyAddressCreatedSite as json.
func (o OptAddEmergencyAddressCreatedSite) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddEmergencyAddressCreatedSite from json.
func (o *OptAddEmergencyAddressCreatedSite) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddEmergencyAddressCreatedSite to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddEmergencyAddressCreatedSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddEmergencyAddressCreatedSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddEmergencyAddressReq as json.
func (o OptAddEmergencyAddressReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddEmergencyAddressReq from json.
func (o *OptAddEmergencyAddressReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddEmergencyAddressReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddEmergencyAddressReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddEmergencyAddressReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddExtensionsToADeviceReq as json.
func (o OptAddExtensionsToADeviceReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddExtensionsToADeviceReq from json.
func (o *OptAddExtensionsToADeviceReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddExtensionsToADeviceReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddExtensionsToADeviceReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddExtensionsToADeviceReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddExtensiontLevelInboundBlockRulesReq as json.
func (o OptAddExtensiontLevelInboundBlockRulesReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddExtensiontLevelInboundBlockRulesReq from json.
func (o *OptAddExtensiontLevelInboundBlockRulesReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddExtensiontLevelInboundBlockRulesReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddExtensiontLevelInboundBlockRulesReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddExtensiontLevelInboundBlockRulesReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddExternalContactReq as json.
func (o OptAddExternalContactReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddExternalContactReq from json.
func (o *OptAddExternalContactReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddExternalContactReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddExternalContactReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddExternalContactReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddFirmwareRuleReq as json.
func (o OptAddFirmwareRuleReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddFirmwareRuleReq from json.
func (o *OptAddFirmwareRuleReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddFirmwareRuleReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddFirmwareRuleReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddFirmwareRuleReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddGCPMembersReq as json.
func (o OptAddGCPMembersReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddGCPMembersReq from json.
func (o *OptAddGCPMembersReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddGCPMembersReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddGCPMembersReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddGCPMembersReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddGCPReq as json.
func (o OptAddGCPReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddGCPReq from json.
func (o *OptAddGCPReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddGCPReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddGCPReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddGCPReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddGCPReqPlayIncomingCallsSound as json.
func (o OptAddGCPReqPlayIncomingCallsSound) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddGCPReqPlayIncomingCallsSound from json.
func (o *OptAddGCPReqPlayIncomingCallsSound) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddGCPReqPlayIncomingCallsSound to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddGCPReqPlayIncomingCallsSound) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddGCPReqPlayIncomingCallsSound) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddLocationReq as json.
func (o OptAddLocationReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddLocationReq from json.
func (o *OptAddLocationReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddLocationReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddLocationReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddLocationReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddMembersToCallQueueReq as json.
func (o OptAddMembersToCallQueueReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddMembersToCallQueueReq from json.
func (o *OptAddMembersToCallQueueReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddMembersToCallQueueReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddMembersToCallQueueReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddMembersToCallQueueReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddMembersToCallQueueReqMembers as json.
func (o OptAddMembersToCallQueueReqMembers) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddMembersToCallQueueReqMembers from json.
func (o *OptAddMembersToCallQueueReqMembers) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddMembersToCallQueueReqMembers to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddMembersToCallQueueReqMembers) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddMembersToCallQueueReqMembers) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddMembersToSharedLineGroupReq as json.
func (o OptAddMembersToSharedLineGroupReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddMembersToSharedLineGroupReq from json.
func (o *OptAddMembersToSharedLineGroupReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddMembersToSharedLineGroupReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddMembersToSharedLineGroupReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddMembersToSharedLineGroupReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddMembersToSharedLineGroupReqMembers as json.
func (o OptAddMembersToSharedLineGroupReqMembers) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddMembersToSharedLineGroupReqMembers from json.
func (o *OptAddMembersToSharedLineGroupReqMembers) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddMembersToSharedLineGroupReqMembers to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddMembersToSharedLineGroupReqMembers) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddMembersToSharedLineGroupReqMembers) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddOutboundCallerNumbersReq as json.
func (o OptAddOutboundCallerNumbersReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddOutboundCallerNumbersReq from json.
func (o *OptAddOutboundCallerNumbersReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddOutboundCallerNumbersReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddOutboundCallerNumbersReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddOutboundCallerNumbersReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddPeeringPhoneNumbersReq as json.
func (o OptAddPeeringPhoneNumbersReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddPeeringPhoneNumbersReq from json.
func (o *OptAddPeeringPhoneNumbersReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddPeeringPhoneNumbersReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddPeeringPhoneNumbersReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddPeeringPhoneNumbersReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddPhoneDeviceReq as json.
func (o OptAddPhoneDeviceReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddPhoneDeviceReq from json.
func (o *OptAddPhoneDeviceReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddPhoneDeviceReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddPhoneDeviceReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddPhoneDeviceReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddPolicyCreatedVoicemailAccessMember as json.
func (o OptAddPolicyCreatedVoicemailAccessMember) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddPolicyCreatedVoicemailAccessMember from json.
func (o *OptAddPolicyCreatedVoicemailAccessMember) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddPolicyCreatedVoicemailAccessMember to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddPolicyCreatedVoicemailAccessMember) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddPolicyCreatedVoicemailAccessMember) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddPolicyReq as json.
func (o OptAddPolicyReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddPolicyReq from json.
func (o *OptAddPolicyReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddPolicyReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddPolicyReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddPolicyReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddPolicyReqVoicemailAccessMember as json.
func (o OptAddPolicyReqVoicemailAccessMember) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddPolicyReqVoicemailAccessMember from json.
func (o *OptAddPolicyReqVoicemailAccessMember) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddPolicyReqVoicemailAccessMember to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddPolicyReqVoicemailAccessMember) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddPolicyReqVoicemailAccessMember) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddProvisionTemplateReq as json.
func (o OptAddProvisionTemplateReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddProvisionTemplateReq from json.
func (o *OptAddProvisionTemplateReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddProvisionTemplateReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddProvisionTemplateReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddProvisionTemplateReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddRoleMembersReq as json.
func (o OptAddRoleMembersReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddRoleMembersReq from json.
func (o *OptAddRoleMembersReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddRoleMembersReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddRoleMembersReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddRoleMembersReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddRoutingRuleReq as json.
func (o OptAddRoutingRuleReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddRoutingRuleReq from json.
func (o *OptAddRoutingRuleReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddRoutingRuleReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddRoutingRuleReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddRoutingRuleReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddSLGPolicySubSettingReq as json.
func (o OptAddSLGPolicySubSettingReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddSLGPolicySubSettingReq from json.
func (o *OptAddSLGPolicySubSettingReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddSLGPolicySubSettingReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddSLGPolicySubSettingReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddSLGPolicySubSettingReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddSettingTemplateReq as json.
func (o OptAddSettingTemplateReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddSettingTemplateReq from json.
func (o *OptAddSettingTemplateReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddSettingTemplateReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddSettingTemplateReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddSettingTemplateReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddSiteOutboundCallerNumbersReq as json.
func (o OptAddSiteOutboundCallerNumbersReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddSiteOutboundCallerNumbersReq from json.
func (o *OptAddSiteOutboundCallerNumbersReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddSiteOutboundCallerNumbersReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddSiteOutboundCallerNumbersReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddSiteOutboundCallerNumbersReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddSiteOutboundCallingExceptionRuleReq as json.
func (o OptAddSiteOutboundCallingExceptionRuleReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddSiteOutboundCallingExceptionRuleReq from json.
func (o *OptAddSiteOutboundCallingExceptionRuleReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddSiteOutboundCallingExceptionRuleReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddSiteOutboundCallingExceptionRuleReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddSiteOutboundCallingExceptionRuleReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddSiteOutboundCallingExceptionRuleReqExceptionRule as json.
func (o OptAddSiteOutboundCallingExceptionRuleReqExceptionRule) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddSiteOutboundCallingExceptionRuleReqExceptionRule from json.
func (o *OptAddSiteOutboundCallingExceptionRuleReqExceptionRule) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddSiteOutboundCallingExceptionRuleReqExceptionRule to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddSiteOutboundCallingExceptionRuleReqExceptionRule) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddSiteOutboundCallingExceptionRuleReqExceptionRule) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddSiteSettingReq as json.
func (o OptAddSiteSettingReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddSiteSettingReq from json.
func (o *OptAddSiteSettingReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddSiteSettingReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddSiteSettingReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddSiteSettingReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddUserOutboundCallerNumbersReq as json.
func (o OptAddUserOutboundCallerNumbersReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddUserOutboundCallerNumbersReq from json.
func (o *OptAddUserOutboundCallerNumbersReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddUserOutboundCallerNumbersReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddUserOutboundCallerNumbersReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddUserOutboundCallerNumbersReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddUserOutboundCallingExceptionRuleReq as json.
func (o OptAddUserOutboundCallingExceptionRuleReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddUserOutboundCallingExceptionRuleReq from json.
func (o *OptAddUserOutboundCallingExceptionRuleReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddUserOutboundCallingExceptionRuleReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddUserOutboundCallingExceptionRuleReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddUserOutboundCallingExceptionRuleReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddUserOutboundCallingExceptionRuleReqExceptionRule as json.
func (o OptAddUserOutboundCallingExceptionRuleReqExceptionRule) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddUserOutboundCallingExceptionRuleReqExceptionRule from json.
func (o *OptAddUserOutboundCallingExceptionRuleReqExceptionRule) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddUserOutboundCallingExceptionRuleReqExceptionRule to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddUserOutboundCallingExceptionRuleReqExceptionRule) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddUserOutboundCallingExceptionRuleReqExceptionRule) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddUserSettingCreatedDelegation as json.
func (o OptAddUserSettingCreatedDelegation) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddUserSettingCreatedDelegation from json.
func (o *OptAddUserSettingCreatedDelegation) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddUserSettingCreatedDelegation to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddUserSettingCreatedDelegation) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddUserSettingCreatedDelegation) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddUserSettingCreatedVoiceMail as json.
func (o OptAddUserSettingCreatedVoiceMail) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddUserSettingCreatedVoiceMail from json.
func (o *OptAddUserSettingCreatedVoiceMail) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddUserSettingCreatedVoiceMail to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddUserSettingCreatedVoiceMail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddUserSettingCreatedVoiceMail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddUserSettingReq as json.
func (o OptAddUserSettingReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddUserSettingReq from json.
func (o *OptAddUserSettingReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddUserSettingReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddUserSettingReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddUserSettingReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddUserSettingReqVoiceMail as json.
func (o OptAddUserSettingReqVoiceMail) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddUserSettingReqVoiceMail from json.
func (o *OptAddUserSettingReqVoiceMail) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddUserSettingReqVoiceMail to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddUserSettingReqVoiceMail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddUserSettingReqVoiceMail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddUsersToDirectoryBySiteReq as json.
func (o OptAddUsersToDirectoryBySiteReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddUsersToDirectoryBySiteReq from json.
func (o *OptAddUsersToDirectoryBySiteReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddUsersToDirectoryBySiteReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddUsersToDirectoryBySiteReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddUsersToDirectoryBySiteReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddUsersToDirectoryReq as json.
func (o OptAddUsersToDirectoryReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddUsersToDirectoryReq from json.
func (o *OptAddUsersToDirectoryReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddUsersToDirectoryReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddUsersToDirectoryReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddUsersToDirectoryReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddZoomRoomReq as json.
func (o OptAddZoomRoomReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddZoomRoomReq from json.
func (o *OptAddZoomRoomReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAddZoomRoomReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAddZoomRoomReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAddZoomRoomReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AssignCallingPlanReq as json.
func (o OptAssignCallingPlanReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AssignCallingPlanReq from json.
func (o *OptAssignCallingPlanReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAssignCallingPlanReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAssignCallingPlanReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAssignCallingPlanReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AssignCallingPlanToRoomReq as json.
func (o OptAssignCallingPlanToRoomReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AssignCallingPlanToRoomReq from json.
func (o *OptAssignCallingPlanToRoomReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAssignCallingPlanToRoomReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAssignCallingPlanToRoomReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAssignCallingPlanToRoomReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AssignCallingPlansToCommonAreaReq as json.
func (o OptAssignCallingPlansToCommonAreaReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AssignCallingPlansToCommonAreaReq from json.
func (o *OptAssignCallingPlansToCommonAreaReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAssignCallingPlansToCommonAreaReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAssignCallingPlansToCommonAreaReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAssignCallingPlansToCommonAreaReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AssignCampaignPhoneNumbersReq as json.
func (o OptAssignCampaignPhoneNumbersReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AssignCampaignPhoneNumbersReq from json.
func (o *OptAssignCampaignPhoneNumbersReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAssignCampaignPhoneNumbersReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAssignCampaignPhoneNumbersReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAssignCampaignPhoneNumbersReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AssignPhoneNumberReq as json.
func (o OptAssignPhoneNumberReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AssignPhoneNumberReq from json.
func (o *OptAssignPhoneNumberReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAssignPhoneNumberReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAssignPhoneNumberReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAssignPhoneNumberReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AssignPhoneNumberToZoomRoomReq as json.
func (o OptAssignPhoneNumberToZoomRoomReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AssignPhoneNumberToZoomRoomReq from json.
func (o *OptAssignPhoneNumberToZoomRoomReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAssignPhoneNumberToZoomRoomReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAssignPhoneNumberToZoomRoomReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAssignPhoneNumberToZoomRoomReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AssignPhoneNumbersAutoReceptionistReq as json.
func (o OptAssignPhoneNumbersAutoReceptionistReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AssignPhoneNumbersAutoReceptionistReq from json.
func (o *OptAssignPhoneNumbersAutoReceptionistReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAssignPhoneNumbersAutoReceptionistReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAssignPhoneNumbersAutoReceptionistReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAssignPhoneNumbersAutoReceptionistReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AssignPhoneNumbersSLGReq as json.
func (o OptAssignPhoneNumbersSLGReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AssignPhoneNumbersSLGReq from json.
func (o *OptAssignPhoneNumbersSLGReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAssignPhoneNumbersSLGReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAssignPhoneNumbersSLGReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAssignPhoneNumbersSLGReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AssignPhoneNumbersToCommonAreaReq as json.
func (o OptAssignPhoneNumbersToCommonAreaReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AssignPhoneNumbersToCommonAreaReq from json.
func (o *OptAssignPhoneNumbersToCommonAreaReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAssignPhoneNumbersToCommonAreaReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAssignPhoneNumbersToCommonAreaReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAssignPhoneNumbersToCommonAreaReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AssignPhoneToCallQueueReq as json.
func (o OptAssignPhoneToCallQueueReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AssignPhoneToCallQueueReq from json.
func (o *OptAssignPhoneToCallQueueReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAssignPhoneToCallQueueReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAssignPhoneToCallQueueReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAssignPhoneToCallQueueReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes BatchAddLocationsReq as json.
func (o OptBatchAddLocationsReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes BatchAddLocationsReq from json.
func (o *OptBatchAddLocationsReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptBatchAddLocationsReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptBatchAddLocationsReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptBatchAddLocationsReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes BatchAddUsersReq as json.
func (o OptBatchAddUsersReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes BatchAddUsersReq from json.
func (o *OptBatchAddUsersReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptBatchAddUsersReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptBatchAddUsersReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptBatchAddUsersReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes BatchUpdateDeviceLineKeySettingReq as json.
func (o OptBatchUpdateDeviceLineKeySettingReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes BatchUpdateDeviceLineKeySettingReq from json.
func (o *OptBatchUpdateDeviceLineKeySettingReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptBatchUpdateDeviceLineKeySettingReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptBatchUpdateDeviceLineKeySettingReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptBatchUpdateDeviceLineKeySettingReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes BatchUpdateLineKeySettingReq as json.
func (o OptBatchUpdateLineKeySettingReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes BatchUpdateLineKeySettingReq from json.
func (o *OptBatchUpdateLineKeySettingReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptBatchUpdateLineKeySettingReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptBatchUpdateLineKeySettingReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptBatchUpdateLineKeySettingReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes BatchUpdateLineKeySettingReqLineKeysItemKeyAssignment as json.
func (o OptBatchUpdateLineKeySettingReqLineKeysItemKeyAssignment) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes BatchUpdateLineKeySettingReqLineKeysItemKeyAssignment from json.
func (o *OptBatchUpdateLineKeySettingReqLineKeysItemKeyAssignment) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptBatchUpdateLineKeySettingReqLineKeysItemKeyAssignment to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptBatchUpdateLineKeySettingReqLineKeysItemKeyAssignment) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptBatchUpdateLineKeySettingReqLineKeysItemKeyAssignment) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes bool as json.
func (o OptBool) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Bool(bool(o.Value))
}

// Decode decodes bool from json.
func (o *OptBool) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptBool to nil")
	}
	o.Set = true
	v, err := d.Bool()
	if err != nil {
		return err
	}
	o.Value = bool(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptBool) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptBool) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreateASharedLineGroupReq as json.
func (o OptCreateASharedLineGroupReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CreateASharedLineGroupReq from json.
func (o *OptCreateASharedLineGroupReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCreateASharedLineGroupReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCreateASharedLineGroupReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCreateASharedLineGroupReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreateCallQueueReq as json.
func (o OptCreateCallQueueReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CreateCallQueueReq from json.
func (o *OptCreateCallQueueReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCreateCallQueueReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCreateCallQueueReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCreateCallQueueReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreateCallQueueReqMembers as json.
func (o OptCreateCallQueueReqMembers) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CreateCallQueueReqMembers from json.
func (o *OptCreateCallQueueReqMembers) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCreateCallQueueReqMembers to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCreateCallQueueReqMembers) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCreateCallQueueReqMembers) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreateMonitoringGroupReq as json.
func (o OptCreateMonitoringGroupReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CreateMonitoringGroupReq from json.
func (o *OptCreateMonitoringGroupReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCreateMonitoringGroupReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCreateMonitoringGroupReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCreateMonitoringGroupReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePhoneSiteReq as json.
func (o OptCreatePhoneSiteReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CreatePhoneSiteReq from json.
func (o *OptCreatePhoneSiteReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCreatePhoneSiteReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCreatePhoneSiteReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCreatePhoneSiteReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePhoneSiteReqForceOffNet as json.
func (o OptCreatePhoneSiteReqForceOffNet) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CreatePhoneSiteReqForceOffNet from json.
func (o *OptCreatePhoneSiteReqForceOffNet) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCreatePhoneSiteReqForceOffNet to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCreatePhoneSiteReqForceOffNet) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCreatePhoneSiteReqForceOffNet) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePhoneSiteReqShortExtension as json.
func (o OptCreatePhoneSiteReqShortExtension) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CreatePhoneSiteReqShortExtension from json.
func (o *OptCreatePhoneSiteReqShortExtension) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCreatePhoneSiteReqShortExtension to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCreatePhoneSiteReqShortExtension) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCreatePhoneSiteReqShortExtension) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePhoneSiteReqSipZone as json.
func (o OptCreatePhoneSiteReqSipZone) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CreatePhoneSiteReqSipZone from json.
func (o *OptCreatePhoneSiteReqSipZone) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCreatePhoneSiteReqSipZone to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCreatePhoneSiteReqSipZone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCreatePhoneSiteReqSipZone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes time.Time as json.
func (o OptDate) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if !o.Set {
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *OptDate) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDate to nil")
	}
	o.Set = true
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptDate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeDate)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptDate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeDate)
}

// Encode encodes time.Time as json.
func (o OptDateTime) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if !o.Set {
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *OptDateTime) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDateTime to nil")
	}
	o.Set = true
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptDateTime) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeDateTime)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptDateTime) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeDateTime)
}

// Encode encodes DeletePeeringPhoneNumbersReq as json.
func (o OptDeletePeeringPhoneNumbersReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes DeletePeeringPhoneNumbersReq from json.
func (o *OptDeletePeeringPhoneNumbersReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDeletePeeringPhoneNumbersReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptDeletePeeringPhoneNumbersReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptDeletePeeringPhoneNumbersReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DuplicatePhoneRoleReq as json.
func (o OptDuplicatePhoneRoleReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes DuplicatePhoneRoleReq from json.
func (o *OptDuplicatePhoneRoleReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDuplicatePhoneRoleReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptDuplicatePhoneRoleReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptDuplicatePhoneRoleReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetACallQueueOKMembers as json.
func (o OptGetACallQueueOKMembers) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetACallQueueOKMembers from json.
func (o *OptGetACallQueueOKMembers) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetACallQueueOKMembers to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetACallQueueOKMembers) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetACallQueueOKMembers) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetACallQueueOKSite as json.
func (o OptGetACallQueueOKSite) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetACallQueueOKSite from json.
func (o *OptGetACallQueueOKSite) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetACallQueueOKSite to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetACallQueueOKSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetACallQueueOKSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetACommonAreaOKCountry as json.
func (o OptGetACommonAreaOKCountry) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetACommonAreaOKCountry from json.
func (o *OptGetACommonAreaOKCountry) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetACommonAreaOKCountry to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetACommonAreaOKCountry) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetACommonAreaOKCountry) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetACommonAreaOKEmergencyAddress as json.
func (o OptGetACommonAreaOKEmergencyAddress) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetACommonAreaOKEmergencyAddress from json.
func (o *OptGetACommonAreaOKEmergencyAddress) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetACommonAreaOKEmergencyAddress to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetACommonAreaOKEmergencyAddress) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetACommonAreaOKEmergencyAddress) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetACommonAreaOKPolicy as json.
func (o OptGetACommonAreaOKPolicy) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetACommonAreaOKPolicy from json.
func (o *OptGetACommonAreaOKPolicy) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetACommonAreaOKPolicy to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetACommonAreaOKPolicy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetACommonAreaOKPolicy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetACommonAreaOKPolicyInternationalCalling as json.
func (o OptGetACommonAreaOKPolicyInternationalCalling) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetACommonAreaOKPolicyInternationalCalling from json.
func (o *OptGetACommonAreaOKPolicyInternationalCalling) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetACommonAreaOKPolicyInternationalCalling to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetACommonAreaOKPolicyInternationalCalling) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetACommonAreaOKPolicyInternationalCalling) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetACommonAreaOKPolicyOutboundCalling as json.
func (o OptGetACommonAreaOKPolicyOutboundCalling) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetACommonAreaOKPolicyOutboundCalling from json.
func (o *OptGetACommonAreaOKPolicyOutboundCalling) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetACommonAreaOKPolicyOutboundCalling to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetACommonAreaOKPolicyOutboundCalling) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetACommonAreaOKPolicyOutboundCalling) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetACommonAreaOKSite as json.
func (o OptGetACommonAreaOKSite) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetACommonAreaOKSite from json.
func (o *OptGetACommonAreaOKSite) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetACommonAreaOKSite to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetACommonAreaOKSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetACommonAreaOKSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetADeviceOKAssignee as json.
func (o OptGetADeviceOKAssignee) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetADeviceOKAssignee from json.
func (o *OptGetADeviceOKAssignee) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetADeviceOKAssignee to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetADeviceOKAssignee) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetADeviceOKAssignee) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetADeviceOKProvision as json.
func (o OptGetADeviceOKProvision) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetADeviceOKProvision from json.
func (o *OptGetADeviceOKProvision) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetADeviceOKProvision to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetADeviceOKProvision) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetADeviceOKProvision) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetADeviceOKProvisionSipAccountsItemSharedLine as json.
func (o OptGetADeviceOKProvisionSipAccountsItemSharedLine) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetADeviceOKProvisionSipAccountsItemSharedLine from json.
func (o *OptGetADeviceOKProvisionSipAccountsItemSharedLine) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetADeviceOKProvisionSipAccountsItemSharedLine to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetADeviceOKProvisionSipAccountsItemSharedLine) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetADeviceOKProvisionSipAccountsItemSharedLine) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetADeviceOKProvisionSipAccountsItemSharedLineLineSubscription as json.
func (o OptGetADeviceOKProvisionSipAccountsItemSharedLineLineSubscription) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetADeviceOKProvisionSipAccountsItemSharedLineLineSubscription from json.
func (o *OptGetADeviceOKProvisionSipAccountsItemSharedLineLineSubscription) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetADeviceOKProvisionSipAccountsItemSharedLineLineSubscription to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetADeviceOKProvisionSipAccountsItemSharedLineLineSubscription) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetADeviceOKProvisionSipAccountsItemSharedLineLineSubscription) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetADeviceOKSite as json.
func (o OptGetADeviceOKSite) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetADeviceOKSite from json.
func (o *OptGetADeviceOKSite) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetADeviceOKSite to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetADeviceOKSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetADeviceOKSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetASharedLineGroupOKMembers as json.
func (o OptGetASharedLineGroupOKMembers) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetASharedLineGroupOKMembers from json.
func (o *OptGetASharedLineGroupOKMembers) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetASharedLineGroupOKMembers to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetASharedLineGroupOKMembers) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetASharedLineGroupOKMembers) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetASharedLineGroupOKPolicy as json.
func (o OptGetASharedLineGroupOKPolicy) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetASharedLineGroupOKPolicy from json.
func (o *OptGetASharedLineGroupOKPolicy) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetASharedLineGroupOKPolicy to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetASharedLineGroupOKPolicy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetASharedLineGroupOKPolicy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetASharedLineGroupOKSite as json.
func (o OptGetASharedLineGroupOKSite) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetASharedLineGroupOKSite from json.
func (o *OptGetASharedLineGroupOKSite) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetASharedLineGroupOKSite to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetASharedLineGroupOKSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetASharedLineGroupOKSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetASiteOKCountry as json.
func (o OptGetASiteOKCountry) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetASiteOKCountry from json.
func (o *OptGetASiteOKCountry) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetASiteOKCountry to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetASiteOKCountry) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetASiteOKCountry) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetASiteOKMainAutoReceptionist as json.
func (o OptGetASiteOKMainAutoReceptionist) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetASiteOKMainAutoReceptionist from json.
func (o *OptGetASiteOKMainAutoReceptionist) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetASiteOKMainAutoReceptionist to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetASiteOKMainAutoReceptionist) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetASiteOKMainAutoReceptionist) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetASiteOKPolicy as json.
func (o OptGetASiteOKPolicy) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetASiteOKPolicy from json.
func (o *OptGetASiteOKPolicy) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetASiteOKPolicy to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetASiteOKPolicy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetASiteOKPolicy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetASiteOKPolicyAdHocCallRecording as json.
func (o OptGetASiteOKPolicyAdHocCallRecording) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetASiteOKPolicyAdHocCallRecording from json.
func (o *OptGetASiteOKPolicyAdHocCallRecording) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetASiteOKPolicyAdHocCallRecording to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetASiteOKPolicyAdHocCallRecording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetASiteOKPolicyAdHocCallRecording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetASiteOKPolicyAdHocCallRecordingPlayRecordingBeepTone as json.
func (o OptGetASiteOKPolicyAdHocCallRecordingPlayRecordingBeepTone) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetASiteOKPolicyAdHocCallRecordingPlayRecordingBeepTone from json.
func (o *OptGetASiteOKPolicyAdHocCallRecordingPlayRecordingBeepTone) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetASiteOKPolicyAdHocCallRecordingPlayRecordingBeepTone to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetASiteOKPolicyAdHocCallRecordingPlayRecordingBeepTone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetASiteOKPolicyAdHocCallRecordingPlayRecordingBeepTone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetASiteOKPolicyAudioIntercom as json.
func (o OptGetASiteOKPolicyAudioIntercom) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetASiteOKPolicyAudioIntercom from json.
func (o *OptGetASiteOKPolicyAudioIntercom) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetASiteOKPolicyAudioIntercom to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetASiteOKPolicyAudioIntercom) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetASiteOKPolicyAudioIntercom) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetASiteOKPolicyAutoCallRecording as json.
func (o OptGetASiteOKPolicyAutoCallRecording) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetASiteOKPolicyAutoCallRecording from json.
func (o *OptGetASiteOKPolicyAutoCallRecording) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetASiteOKPolicyAutoCallRecording to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetASiteOKPolicyAutoCallRecording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetASiteOKPolicyAutoCallRecording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetASiteOKPolicyAutoCallRecordingPlayRecordingBeepTone as json.
func (o OptGetASiteOKPolicyAutoCallRecordingPlayRecordingBeepTone) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetASiteOKPolicyAutoCallRecordingPlayRecordingBeepTone from json.
func (o *OptGetASiteOKPolicyAutoCallRecordingPlayRecordingBeepTone) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetASiteOKPolicyAutoCallRecordingPlayRecordingBeepTone to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetASiteOKPolicyAutoCallRecordingPlayRecordingBeepTone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetASiteOKPolicyAutoCallRecordingPlayRecordingBeepTone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetASiteOKPolicyAutoDeleteDataAfterRetentionDuration as json.
func (o OptGetASiteOKPolicyAutoDeleteDataAfterRetentionDuration) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetASiteOKPolicyAutoDeleteDataAfterRetentionDuration from json.
func (o *OptGetASiteOKPolicyAutoDeleteDataAfterRetentionDuration) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetASiteOKPolicyAutoDeleteDataAfterRetentionDuration to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetASiteOKPolicyAutoDeleteDataAfterRetentionDuration) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetASiteOKPolicyAutoDeleteDataAfterRetentionDuration) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetASiteOKPolicyBlockCallsWithoutCallerID as json.
func (o OptGetASiteOKPolicyBlockCallsWithoutCallerID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetASiteOKPolicyBlockCallsWithoutCallerID from json.
func (o *OptGetASiteOKPolicyBlockCallsWithoutCallerID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetASiteOKPolicyBlockCallsWithoutCallerID to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetASiteOKPolicyBlockCallsWithoutCallerID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetASiteOKPolicyBlockCallsWithoutCallerID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetASiteOKPolicyBlockExternalCalls as json.
func (o OptGetASiteOKPolicyBlockExternalCalls) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetASiteOKPolicyBlockExternalCalls from json.
func (o *OptGetASiteOKPolicyBlockExternalCalls) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetASiteOKPolicyBlockExternalCalls to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetASiteOKPolicyBlockExternalCalls) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetASiteOKPolicyBlockExternalCalls) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetASiteOKPolicyBlockExternalCallsE2eEncryption as json.
func (o OptGetASiteOKPolicyBlockExternalCallsE2eEncryption) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetASiteOKPolicyBlockExternalCallsE2eEncryption from json.
func (o *OptGetASiteOKPolicyBlockExternalCallsE2eEncryption) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetASiteOKPolicyBlockExternalCallsE2eEncryption to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetASiteOKPolicyBlockExternalCallsE2eEncryption) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetASiteOKPolicyBlockExternalCallsE2eEncryption) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetASiteOKPolicyCallHandlingForwardingToOtherUsers as json.
func (o OptGetASiteOKPolicyCallHandlingForwardingToOtherUsers) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetASiteOKPolicyCallHandlingForwardingToOtherUsers from json.
func (o *OptGetASiteOKPolicyCallHandlingForwardingToOtherUsers) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetASiteOKPolicyCallHandlingForwardingToOtherUsers to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetASiteOKPolicyCallHandlingForwardingToOtherUsers) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetASiteOKPolicyCallHandlingForwardingToOtherUsers) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetASiteOKPolicyCallOverflow as json.
func (o OptGetASiteOKPolicyCallOverflow) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetASiteOKPolicyCallOverflow from json.
func (o *OptGetASiteOKPolicyCallOverflow) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetASiteOKPolicyCallOverflow to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetASiteOKPolicyCallOverflow) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetASiteOKPolicyCallOverflow) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetASiteOKPolicyCallPark as json.
func (o OptGetASiteOKPolicyCallPark) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetASiteOKPolicyCallPark from json.
func (o *OptGetASiteOKPolicyCallPark) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetASiteOKPolicyCallPark to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetASiteOKPolicyCallPark) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetASiteOKPolicyCallPark) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetASiteOKPolicyCallParkForwardTo as json.
func (o OptGetASiteOKPolicyCallParkForwardTo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetASiteOKPolicyCallParkForwardTo from json.
func (o *OptGetASiteOKPolicyCallParkForwardTo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetASiteOKPolicyCallParkForwardTo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetASiteOKPolicyCallParkForwardTo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetASiteOKPolicyCallParkForwardTo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetASiteOKPolicyCallQueueOptOutReason as json.
func (o OptGetASiteOKPolicyCallQueueOptOutReason) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetASiteOKPolicyCallQueueOptOutReason from json.
func (o *OptGetASiteOKPolicyCallQueueOptOutReason) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetASiteOKPolicyCallQueueOptOutReason to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetASiteOKPolicyCallQueueOptOutReason) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetASiteOKPolicyCallQueueOptOutReason) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetASiteOKPolicyCallQueuePickupCode as json.
func (o OptGetASiteOKPolicyCallQueuePickupCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetASiteOKPolicyCallQueuePickupCode from json.
func (o *OptGetASiteOKPolicyCallQueuePickupCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetASiteOKPolicyCallQueuePickupCode to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetASiteOKPolicyCallQueuePickupCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetASiteOKPolicyCallQueuePickupCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetASiteOKPolicyCallTransferring as json.
func (o OptGetASiteOKPolicyCallTransferring) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetASiteOKPolicyCallTransferring from json.
func (o *OptGetASiteOKPolicyCallTransferring) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetASiteOKPolicyCallTransferring to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetASiteOKPolicyCallTransferring) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetASiteOKPolicyCallTransferring) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetASiteOKPolicyCheckVoicemailsOverPhone as json.
func (o OptGetASiteOKPolicyCheckVoicemailsOverPhone) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetASiteOKPolicyCheckVoicemailsOverPhone from json.
func (o *OptGetASiteOKPolicyCheckVoicemailsOverPhone) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetASiteOKPolicyCheckVoicemailsOverPhone to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetASiteOKPolicyCheckVoicemailsOverPhone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetASiteOKPolicyCheckVoicemailsOverPhone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetASiteOKPolicyDelegation as json.
func (o OptGetASiteOKPolicyDelegation) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetASiteOKPolicyDelegation from json.
func (o *OptGetASiteOKPolicyDelegation) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetASiteOKPolicyDelegation to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetASiteOKPolicyDelegation) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetASiteOKPolicyDelegation) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetASiteOKPolicyElevateToMeeting as json.
func (o OptGetASiteOKPolicyElevateToMeeting) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetASiteOKPolicyElevateToMeeting from json.
func (o *OptGetASiteOKPolicyElevateToMeeting) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetASiteOKPolicyElevateToMeeting to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetASiteOKPolicyElevateToMeeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetASiteOKPolicyElevateToMeeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetASiteOKPolicyForceOffNet as json.
func (o OptGetASiteOKPolicyForceOffNet) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetASiteOKPolicyForceOffNet from json.
func (o *OptGetASiteOKPolicyForceOffNet) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetASiteOKPolicyForceOffNet to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetASiteOKPolicyForceOffNet) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetASiteOKPolicyForceOffNet) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetASiteOKPolicyHandOffToRoom as json.
func (o OptGetASiteOKPolicyHandOffToRoom) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetASiteOKPolicyHandOffToRoom from json.
func (o *OptGetASiteOKPolicyHandOffToRoom) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetASiteOKPolicyHandOffToRoom to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetASiteOKPolicyHandOffToRoom) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetASiteOKPolicyHandOffToRoom) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetASiteOKPolicyInternationalCalling as json.
func (o OptGetASiteOKPolicyInternationalCalling) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetASiteOKPolicyInternationalCalling from json.
func (o *OptGetASiteOKPolicyInternationalCalling) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetASiteOKPolicyInternationalCalling to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetASiteOKPolicyInternationalCalling) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetASiteOKPolicyInternationalCalling) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetASiteOKPolicyMobileSwitchToCarrier as json.
func (o OptGetASiteOKPolicyMobileSwitchToCarrier) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetASiteOKPolicyMobileSwitchToCarrier from json.
func (o *OptGetASiteOKPolicyMobileSwitchToCarrier) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetASiteOKPolicyMobileSwitchToCarrier to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetASiteOKPolicyMobileSwitchToCarrier) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetASiteOKPolicyMobileSwitchToCarrier) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetASiteOKPolicyPersonalAudioLibrary as json.
func (o OptGetASiteOKPolicyPersonalAudioLibrary) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetASiteOKPolicyPersonalAudioLibrary from json.
func (o *OptGetASiteOKPolicyPersonalAudioLibrary) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetASiteOKPolicyPersonalAudioLibrary to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetASiteOKPolicyPersonalAudioLibrary) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetASiteOKPolicyPersonalAudioLibrary) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetASiteOKPolicySMS as json.
func (o OptGetASiteOKPolicySMS) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetASiteOKPolicySMS from json.
func (o *OptGetASiteOKPolicySMS) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetASiteOKPolicySMS to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetASiteOKPolicySMS) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetASiteOKPolicySMS) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetASiteOKPolicySelectOutboundCallerID as json.
func (o OptGetASiteOKPolicySelectOutboundCallerID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetASiteOKPolicySelectOutboundCallerID from json.
func (o *OptGetASiteOKPolicySelectOutboundCallerID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetASiteOKPolicySelectOutboundCallerID to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetASiteOKPolicySelectOutboundCallerID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetASiteOKPolicySelectOutboundCallerID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetASiteOKPolicySharedVoicemailNotificationByEmail as json.
func (o OptGetASiteOKPolicySharedVoicemailNotificationByEmail) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetASiteOKPolicySharedVoicemailNotificationByEmail from json.
func (o *OptGetASiteOKPolicySharedVoicemailNotificationByEmail) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetASiteOKPolicySharedVoicemailNotificationByEmail to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetASiteOKPolicySharedVoicemailNotificationByEmail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetASiteOKPolicySharedVoicemailNotificationByEmail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetASiteOKPolicyVoicemail as json.
func (o OptGetASiteOKPolicyVoicemail) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetASiteOKPolicyVoicemail from json.
func (o *OptGetASiteOKPolicyVoicemail) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetASiteOKPolicyVoicemail to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetASiteOKPolicyVoicemail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetASiteOKPolicyVoicemail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetASiteOKPolicyVoicemailNotificationByEmail as json.
func (o OptGetASiteOKPolicyVoicemailNotificationByEmail) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetASiteOKPolicyVoicemailNotificationByEmail from json.
func (o *OptGetASiteOKPolicyVoicemailNotificationByEmail) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetASiteOKPolicyVoicemailNotificationByEmail to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetASiteOKPolicyVoicemailNotificationByEmail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetASiteOKPolicyVoicemailNotificationByEmail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetASiteOKPolicyVoicemailTranscription as json.
func (o OptGetASiteOKPolicyVoicemailTranscription) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetASiteOKPolicyVoicemailTranscription from json.
func (o *OptGetASiteOKPolicyVoicemailTranscription) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetASiteOKPolicyVoicemailTranscription to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetASiteOKPolicyVoicemailTranscription) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetASiteOKPolicyVoicemailTranscription) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetASiteOKPolicyZoomPhoneOnMobile as json.
func (o OptGetASiteOKPolicyZoomPhoneOnMobile) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetASiteOKPolicyZoomPhoneOnMobile from json.
func (o *OptGetASiteOKPolicyZoomPhoneOnMobile) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetASiteOKPolicyZoomPhoneOnMobile to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetASiteOKPolicyZoomPhoneOnMobile) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetASiteOKPolicyZoomPhoneOnMobile) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetASiteOKShortExtension as json.
func (o OptGetASiteOKShortExtension) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetASiteOKShortExtension from json.
func (o *OptGetASiteOKShortExtension) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetASiteOKShortExtension to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetASiteOKShortExtension) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetASiteOKShortExtension) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetASiteOKSipZone as json.
func (o OptGetASiteOKSipZone) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetASiteOKSipZone from json.
func (o *OptGetASiteOKSipZone) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetASiteOKSipZone to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetASiteOKSipZone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetASiteOKSipZone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetAlertSettingDetailsOKTargetsItemSite as json.
func (o OptGetAlertSettingDetailsOKTargetsItemSite) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetAlertSettingDetailsOKTargetsItemSite from json.
func (o *OptGetAlertSettingDetailsOKTargetsItemSite) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetAlertSettingDetailsOKTargetsItemSite to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetAlertSettingDetailsOKTargetsItemSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetAlertSettingDetailsOKTargetsItemSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetAutoReceptionistDetailOKSite as json.
func (o OptGetAutoReceptionistDetailOKSite) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetAutoReceptionistDetailOKSite from json.
func (o *OptGetAutoReceptionistDetailOKSite) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetAutoReceptionistDetailOKSite to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetAutoReceptionistDetailOKSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetAutoReceptionistDetailOKSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetAutoReceptionistIVROKAudioPrompt as json.
func (o OptGetAutoReceptionistIVROKAudioPrompt) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetAutoReceptionistIVROKAudioPrompt from json.
func (o *OptGetAutoReceptionistIVROKAudioPrompt) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetAutoReceptionistIVROKAudioPrompt to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetAutoReceptionistIVROKAudioPrompt) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetAutoReceptionistIVROKAudioPrompt) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetAutoReceptionistIVROKCallerEntersNoAction as json.
func (o OptGetAutoReceptionistIVROKCallerEntersNoAction) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetAutoReceptionistIVROKCallerEntersNoAction from json.
func (o *OptGetAutoReceptionistIVROKCallerEntersNoAction) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetAutoReceptionistIVROKCallerEntersNoAction to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetAutoReceptionistIVROKCallerEntersNoAction) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetAutoReceptionistIVROKCallerEntersNoAction) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetAutoReceptionistIVROKCallerEntersNoActionForwardTo as json.
func (o OptGetAutoReceptionistIVROKCallerEntersNoActionForwardTo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetAutoReceptionistIVROKCallerEntersNoActionForwardTo from json.
func (o *OptGetAutoReceptionistIVROKCallerEntersNoActionForwardTo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetAutoReceptionistIVROKCallerEntersNoActionForwardTo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetAutoReceptionistIVROKCallerEntersNoActionForwardTo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetAutoReceptionistIVROKCallerEntersNoActionForwardTo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetAutoReceptionistIVROKKeyActionsItemTarget as json.
func (o OptGetAutoReceptionistIVROKKeyActionsItemTarget) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetAutoReceptionistIVROKKeyActionsItemTarget from json.
func (o *OptGetAutoReceptionistIVROKKeyActionsItemTarget) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetAutoReceptionistIVROKKeyActionsItemTarget to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetAutoReceptionistIVROKKeyActionsItemTarget) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetAutoReceptionistIVROKKeyActionsItemTarget) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetAutoReceptionistIVROKKeyActionsItemVoicemailGreeting as json.
func (o OptGetAutoReceptionistIVROKKeyActionsItemVoicemailGreeting) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetAutoReceptionistIVROKKeyActionsItemVoicemailGreeting from json.
func (o *OptGetAutoReceptionistIVROKKeyActionsItemVoicemailGreeting) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetAutoReceptionistIVROKKeyActionsItemVoicemailGreeting to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetAutoReceptionistIVROKKeyActionsItemVoicemailGreeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetAutoReceptionistIVROKKeyActionsItemVoicemailGreeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetAutoReceptionistsPolicyOKSMS as json.
func (o OptGetAutoReceptionistsPolicyOKSMS) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetAutoReceptionistsPolicyOKSMS from json.
func (o *OptGetAutoReceptionistsPolicyOKSMS) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetAutoReceptionistsPolicyOKSMS to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetAutoReceptionistsPolicyOKSMS) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetAutoReceptionistsPolicyOKSMS) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetAutoReceptionistsPolicyOKVoicemailNotificationByEmail as json.
func (o OptGetAutoReceptionistsPolicyOKVoicemailNotificationByEmail) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetAutoReceptionistsPolicyOKVoicemailNotificationByEmail from json.
func (o *OptGetAutoReceptionistsPolicyOKVoicemailNotificationByEmail) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetAutoReceptionistsPolicyOKVoicemailNotificationByEmail to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetAutoReceptionistsPolicyOKVoicemailNotificationByEmail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetAutoReceptionistsPolicyOKVoicemailNotificationByEmail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetAutoReceptionistsPolicyOKVoicemailTranscription as json.
func (o OptGetAutoReceptionistsPolicyOKVoicemailTranscription) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetAutoReceptionistsPolicyOKVoicemailTranscription from json.
func (o *OptGetAutoReceptionistsPolicyOKVoicemailTranscription) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetAutoReceptionistsPolicyOKVoicemailTranscription to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetAutoReceptionistsPolicyOKVoicemailTranscription) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetAutoReceptionistsPolicyOKVoicemailTranscription) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetCallHandlingOKBusinessHoursItemSettings as json.
func (o OptGetCallHandlingOKBusinessHoursItemSettings) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetCallHandlingOKBusinessHoursItemSettings from json.
func (o *OptGetCallHandlingOKBusinessHoursItemSettings) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetCallHandlingOKBusinessHoursItemSettings to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetCallHandlingOKBusinessHoursItemSettings) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetCallHandlingOKBusinessHoursItemSettings) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetCallHandlingOKBusinessHoursItemSettingsAudioWhileConnecting as json.
func (o OptGetCallHandlingOKBusinessHoursItemSettingsAudioWhileConnecting) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetCallHandlingOKBusinessHoursItemSettingsAudioWhileConnecting from json.
func (o *OptGetCallHandlingOKBusinessHoursItemSettingsAudioWhileConnecting) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetCallHandlingOKBusinessHoursItemSettingsAudioWhileConnecting to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetCallHandlingOKBusinessHoursItemSettingsAudioWhileConnecting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetCallHandlingOKBusinessHoursItemSettingsAudioWhileConnecting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetCallHandlingOKBusinessHoursItemSettingsBusyRouting as json.
func (o OptGetCallHandlingOKBusinessHoursItemSettingsBusyRouting) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetCallHandlingOKBusinessHoursItemSettingsBusyRouting from json.
func (o *OptGetCallHandlingOKBusinessHoursItemSettingsBusyRouting) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetCallHandlingOKBusinessHoursItemSettingsBusyRouting to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetCallHandlingOKBusinessHoursItemSettingsBusyRouting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetCallHandlingOKBusinessHoursItemSettingsBusyRouting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetCallHandlingOKBusinessHoursItemSettingsBusyRoutingForwardTo as json.
func (o OptGetCallHandlingOKBusinessHoursItemSettingsBusyRoutingForwardTo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetCallHandlingOKBusinessHoursItemSettingsBusyRoutingForwardTo from json.
func (o *OptGetCallHandlingOKBusinessHoursItemSettingsBusyRoutingForwardTo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetCallHandlingOKBusinessHoursItemSettingsBusyRoutingForwardTo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetCallHandlingOKBusinessHoursItemSettingsBusyRoutingForwardTo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetCallHandlingOKBusinessHoursItemSettingsBusyRoutingForwardTo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetCallHandlingOKBusinessHoursItemSettingsBusyRoutingOperator as json.
func (o OptGetCallHandlingOKBusinessHoursItemSettingsBusyRoutingOperator) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetCallHandlingOKBusinessHoursItemSettingsBusyRoutingOperator from json.
func (o *OptGetCallHandlingOKBusinessHoursItemSettingsBusyRoutingOperator) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetCallHandlingOKBusinessHoursItemSettingsBusyRoutingOperator to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetCallHandlingOKBusinessHoursItemSettingsBusyRoutingOperator) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetCallHandlingOKBusinessHoursItemSettingsBusyRoutingOperator) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetCallHandlingOKBusinessHoursItemSettingsBusyRoutingVoicemailGreeting as json.
func (o OptGetCallHandlingOKBusinessHoursItemSettingsBusyRoutingVoicemailGreeting) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetCallHandlingOKBusinessHoursItemSettingsBusyRoutingVoicemailGreeting from json.
func (o *OptGetCallHandlingOKBusinessHoursItemSettingsBusyRoutingVoicemailGreeting) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetCallHandlingOKBusinessHoursItemSettingsBusyRoutingVoicemailGreeting to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetCallHandlingOKBusinessHoursItemSettingsBusyRoutingVoicemailGreeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetCallHandlingOKBusinessHoursItemSettingsBusyRoutingVoicemailGreeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetCallHandlingOKBusinessHoursItemSettingsCallDistribution as json.
func (o OptGetCallHandlingOKBusinessHoursItemSettingsCallDistribution) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetCallHandlingOKBusinessHoursItemSettingsCallDistribution from json.
func (o *OptGetCallHandlingOKBusinessHoursItemSettingsCallDistribution) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetCallHandlingOKBusinessHoursItemSettingsCallDistribution to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetCallHandlingOKBusinessHoursItemSettingsCallDistribution) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetCallHandlingOKBusinessHoursItemSettingsCallDistribution) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetCallHandlingOKBusinessHoursItemSettingsCallForwardingSettingsItemExternalContact as json.
func (o OptGetCallHandlingOKBusinessHoursItemSettingsCallForwardingSettingsItemExternalContact) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetCallHandlingOKBusinessHoursItemSettingsCallForwardingSettingsItemExternalContact from json.
func (o *OptGetCallHandlingOKBusinessHoursItemSettingsCallForwardingSettingsItemExternalContact) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetCallHandlingOKBusinessHoursItemSettingsCallForwardingSettingsItemExternalContact to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetCallHandlingOKBusinessHoursItemSettingsCallForwardingSettingsItemExternalContact) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetCallHandlingOKBusinessHoursItemSettingsCallForwardingSettingsItemExternalContact) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetCallHandlingOKBusinessHoursItemSettingsGreetingPrompt as json.
func (o OptGetCallHandlingOKBusinessHoursItemSettingsGreetingPrompt) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetCallHandlingOKBusinessHoursItemSettingsGreetingPrompt from json.
func (o *OptGetCallHandlingOKBusinessHoursItemSettingsGreetingPrompt) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetCallHandlingOKBusinessHoursItemSettingsGreetingPrompt to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetCallHandlingOKBusinessHoursItemSettingsGreetingPrompt) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetCallHandlingOKBusinessHoursItemSettingsGreetingPrompt) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetCallHandlingOKBusinessHoursItemSettingsMusicOnHold as json.
func (o OptGetCallHandlingOKBusinessHoursItemSettingsMusicOnHold) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetCallHandlingOKBusinessHoursItemSettingsMusicOnHold from json.
func (o *OptGetCallHandlingOKBusinessHoursItemSettingsMusicOnHold) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetCallHandlingOKBusinessHoursItemSettingsMusicOnHold to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetCallHandlingOKBusinessHoursItemSettingsMusicOnHold) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetCallHandlingOKBusinessHoursItemSettingsMusicOnHold) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetCallHandlingOKBusinessHoursItemSettingsRouting as json.
func (o OptGetCallHandlingOKBusinessHoursItemSettingsRouting) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetCallHandlingOKBusinessHoursItemSettingsRouting from json.
func (o *OptGetCallHandlingOKBusinessHoursItemSettingsRouting) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetCallHandlingOKBusinessHoursItemSettingsRouting to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetCallHandlingOKBusinessHoursItemSettingsRouting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetCallHandlingOKBusinessHoursItemSettingsRouting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetCallHandlingOKBusinessHoursItemSettingsRoutingForwardTo as json.
func (o OptGetCallHandlingOKBusinessHoursItemSettingsRoutingForwardTo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetCallHandlingOKBusinessHoursItemSettingsRoutingForwardTo from json.
func (o *OptGetCallHandlingOKBusinessHoursItemSettingsRoutingForwardTo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetCallHandlingOKBusinessHoursItemSettingsRoutingForwardTo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetCallHandlingOKBusinessHoursItemSettingsRoutingForwardTo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetCallHandlingOKBusinessHoursItemSettingsRoutingForwardTo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetCallHandlingOKBusinessHoursItemSettingsRoutingOperator as json.
func (o OptGetCallHandlingOKBusinessHoursItemSettingsRoutingOperator) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetCallHandlingOKBusinessHoursItemSettingsRoutingOperator from json.
func (o *OptGetCallHandlingOKBusinessHoursItemSettingsRoutingOperator) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetCallHandlingOKBusinessHoursItemSettingsRoutingOperator to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetCallHandlingOKBusinessHoursItemSettingsRoutingOperator) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetCallHandlingOKBusinessHoursItemSettingsRoutingOperator) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetCallHandlingOKBusinessHoursItemSettingsRoutingVoicemailGreeting as json.
func (o OptGetCallHandlingOKBusinessHoursItemSettingsRoutingVoicemailGreeting) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetCallHandlingOKBusinessHoursItemSettingsRoutingVoicemailGreeting from json.
func (o *OptGetCallHandlingOKBusinessHoursItemSettingsRoutingVoicemailGreeting) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetCallHandlingOKBusinessHoursItemSettingsRoutingVoicemailGreeting to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetCallHandlingOKBusinessHoursItemSettingsRoutingVoicemailGreeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetCallHandlingOKBusinessHoursItemSettingsRoutingVoicemailGreeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetCallHandlingOKClosedHoursItemSettings as json.
func (o OptGetCallHandlingOKClosedHoursItemSettings) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetCallHandlingOKClosedHoursItemSettings from json.
func (o *OptGetCallHandlingOKClosedHoursItemSettings) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetCallHandlingOKClosedHoursItemSettings to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetCallHandlingOKClosedHoursItemSettings) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetCallHandlingOKClosedHoursItemSettings) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetCallHandlingOKClosedHoursItemSettingsBusyRouting as json.
func (o OptGetCallHandlingOKClosedHoursItemSettingsBusyRouting) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetCallHandlingOKClosedHoursItemSettingsBusyRouting from json.
func (o *OptGetCallHandlingOKClosedHoursItemSettingsBusyRouting) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetCallHandlingOKClosedHoursItemSettingsBusyRouting to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetCallHandlingOKClosedHoursItemSettingsBusyRouting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetCallHandlingOKClosedHoursItemSettingsBusyRouting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetCallHandlingOKClosedHoursItemSettingsBusyRoutingForwardTo as json.
func (o OptGetCallHandlingOKClosedHoursItemSettingsBusyRoutingForwardTo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetCallHandlingOKClosedHoursItemSettingsBusyRoutingForwardTo from json.
func (o *OptGetCallHandlingOKClosedHoursItemSettingsBusyRoutingForwardTo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetCallHandlingOKClosedHoursItemSettingsBusyRoutingForwardTo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetCallHandlingOKClosedHoursItemSettingsBusyRoutingForwardTo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetCallHandlingOKClosedHoursItemSettingsBusyRoutingForwardTo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetCallHandlingOKClosedHoursItemSettingsBusyRoutingOperator as json.
func (o OptGetCallHandlingOKClosedHoursItemSettingsBusyRoutingOperator) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetCallHandlingOKClosedHoursItemSettingsBusyRoutingOperator from json.
func (o *OptGetCallHandlingOKClosedHoursItemSettingsBusyRoutingOperator) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetCallHandlingOKClosedHoursItemSettingsBusyRoutingOperator to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetCallHandlingOKClosedHoursItemSettingsBusyRoutingOperator) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetCallHandlingOKClosedHoursItemSettingsBusyRoutingOperator) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetCallHandlingOKClosedHoursItemSettingsBusyRoutingVoicemailGreeting as json.
func (o OptGetCallHandlingOKClosedHoursItemSettingsBusyRoutingVoicemailGreeting) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetCallHandlingOKClosedHoursItemSettingsBusyRoutingVoicemailGreeting from json.
func (o *OptGetCallHandlingOKClosedHoursItemSettingsBusyRoutingVoicemailGreeting) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetCallHandlingOKClosedHoursItemSettingsBusyRoutingVoicemailGreeting to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetCallHandlingOKClosedHoursItemSettingsBusyRoutingVoicemailGreeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetCallHandlingOKClosedHoursItemSettingsBusyRoutingVoicemailGreeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetCallHandlingOKClosedHoursItemSettingsCallForwardingSettingsItemExternalContact as json.
func (o OptGetCallHandlingOKClosedHoursItemSettingsCallForwardingSettingsItemExternalContact) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetCallHandlingOKClosedHoursItemSettingsCallForwardingSettingsItemExternalContact from json.
func (o *OptGetCallHandlingOKClosedHoursItemSettingsCallForwardingSettingsItemExternalContact) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetCallHandlingOKClosedHoursItemSettingsCallForwardingSettingsItemExternalContact to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetCallHandlingOKClosedHoursItemSettingsCallForwardingSettingsItemExternalContact) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetCallHandlingOKClosedHoursItemSettingsCallForwardingSettingsItemExternalContact) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetCallHandlingOKClosedHoursItemSettingsRouting as json.
func (o OptGetCallHandlingOKClosedHoursItemSettingsRouting) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetCallHandlingOKClosedHoursItemSettingsRouting from json.
func (o *OptGetCallHandlingOKClosedHoursItemSettingsRouting) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetCallHandlingOKClosedHoursItemSettingsRouting to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetCallHandlingOKClosedHoursItemSettingsRouting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetCallHandlingOKClosedHoursItemSettingsRouting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetCallHandlingOKClosedHoursItemSettingsRoutingForwardTo as json.
func (o OptGetCallHandlingOKClosedHoursItemSettingsRoutingForwardTo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetCallHandlingOKClosedHoursItemSettingsRoutingForwardTo from json.
func (o *OptGetCallHandlingOKClosedHoursItemSettingsRoutingForwardTo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetCallHandlingOKClosedHoursItemSettingsRoutingForwardTo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetCallHandlingOKClosedHoursItemSettingsRoutingForwardTo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetCallHandlingOKClosedHoursItemSettingsRoutingForwardTo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetCallHandlingOKClosedHoursItemSettingsRoutingOperator as json.
func (o OptGetCallHandlingOKClosedHoursItemSettingsRoutingOperator) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetCallHandlingOKClosedHoursItemSettingsRoutingOperator from json.
func (o *OptGetCallHandlingOKClosedHoursItemSettingsRoutingOperator) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetCallHandlingOKClosedHoursItemSettingsRoutingOperator to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetCallHandlingOKClosedHoursItemSettingsRoutingOperator) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetCallHandlingOKClosedHoursItemSettingsRoutingOperator) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetCallHandlingOKClosedHoursItemSettingsRoutingVoicemailGreeting as json.
func (o OptGetCallHandlingOKClosedHoursItemSettingsRoutingVoicemailGreeting) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetCallHandlingOKClosedHoursItemSettingsRoutingVoicemailGreeting from json.
func (o *OptGetCallHandlingOKClosedHoursItemSettingsRoutingVoicemailGreeting) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetCallHandlingOKClosedHoursItemSettingsRoutingVoicemailGreeting to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetCallHandlingOKClosedHoursItemSettingsRoutingVoicemailGreeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetCallHandlingOKClosedHoursItemSettingsRoutingVoicemailGreeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetCallHandlingOKHolidayHoursItemDetailsItemSettings as json.
func (o OptGetCallHandlingOKHolidayHoursItemDetailsItemSettings) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetCallHandlingOKHolidayHoursItemDetailsItemSettings from json.
func (o *OptGetCallHandlingOKHolidayHoursItemDetailsItemSettings) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetCallHandlingOKHolidayHoursItemDetailsItemSettings to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetCallHandlingOKHolidayHoursItemDetailsItemSettings) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetCallHandlingOKHolidayHoursItemDetailsItemSettings) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetCallHandlingOKHolidayHoursItemDetailsItemSettingsCallForwardingSettingsItemExternalContact as json.
func (o OptGetCallHandlingOKHolidayHoursItemDetailsItemSettingsCallForwardingSettingsItemExternalContact) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetCallHandlingOKHolidayHoursItemDetailsItemSettingsCallForwardingSettingsItemExternalContact from json.
func (o *OptGetCallHandlingOKHolidayHoursItemDetailsItemSettingsCallForwardingSettingsItemExternalContact) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetCallHandlingOKHolidayHoursItemDetailsItemSettingsCallForwardingSettingsItemExternalContact to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetCallHandlingOKHolidayHoursItemDetailsItemSettingsCallForwardingSettingsItemExternalContact) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetCallHandlingOKHolidayHoursItemDetailsItemSettingsCallForwardingSettingsItemExternalContact) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRouting as json.
func (o OptGetCallHandlingOKHolidayHoursItemDetailsItemSettingsRouting) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRouting from json.
func (o *OptGetCallHandlingOKHolidayHoursItemDetailsItemSettingsRouting) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetCallHandlingOKHolidayHoursItemDetailsItemSettingsRouting to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetCallHandlingOKHolidayHoursItemDetailsItemSettingsRouting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetCallHandlingOKHolidayHoursItemDetailsItemSettingsRouting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingForwardTo as json.
func (o OptGetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingForwardTo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingForwardTo from json.
func (o *OptGetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingForwardTo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingForwardTo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingForwardTo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingForwardTo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingOperator as json.
func (o OptGetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingOperator) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingOperator from json.
func (o *OptGetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingOperator) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingOperator to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingOperator) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingOperator) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingVoicemailGreeting as json.
func (o OptGetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingVoicemailGreeting) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingVoicemailGreeting from json.
func (o *OptGetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingVoicemailGreeting) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingVoicemailGreeting to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingVoicemailGreeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetCallHandlingOKHolidayHoursItemDetailsItemSettingsRoutingVoicemailGreeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetCallLogDetailsOKLogDetailsItemForwardTo as json.
func (o OptGetCallLogDetailsOKLogDetailsItemForwardTo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetCallLogDetailsOKLogDetailsItemForwardTo from json.
func (o *OptGetCallLogDetailsOKLogDetailsItemForwardTo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetCallLogDetailsOKLogDetailsItemForwardTo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetCallLogDetailsOKLogDetailsItemForwardTo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetCallLogDetailsOKLogDetailsItemForwardTo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetCallLogDetailsOKLogDetailsItemSite as json.
func (o OptGetCallLogDetailsOKLogDetailsItemSite) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetCallLogDetailsOKLogDetailsItemSite from json.
func (o *OptGetCallLogDetailsOKLogDetailsItemSite) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetCallLogDetailsOKLogDetailsItemSite to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetCallLogDetailsOKLogDetailsItemSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetCallLogDetailsOKLogDetailsItemSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetCallLogMetricsDetailsOKCallee as json.
func (o OptGetCallLogMetricsDetailsOKCallee) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetCallLogMetricsDetailsOKCallee from json.
func (o *OptGetCallLogMetricsDetailsOKCallee) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetCallLogMetricsDetailsOKCallee to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetCallLogMetricsDetailsOKCallee) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetCallLogMetricsDetailsOKCallee) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetCallLogMetricsDetailsOKCaller as json.
func (o OptGetCallLogMetricsDetailsOKCaller) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetCallLogMetricsDetailsOKCaller from json.
func (o *OptGetCallLogMetricsDetailsOKCaller) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetCallLogMetricsDetailsOKCaller to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetCallLogMetricsDetailsOKCaller) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetCallLogMetricsDetailsOKCaller) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetCallQoSOKCalleeQos as json.
func (o OptGetCallQoSOKCalleeQos) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetCallQoSOKCalleeQos from json.
func (o *OptGetCallQoSOKCalleeQos) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetCallQoSOKCalleeQos to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetCallQoSOKCalleeQos) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetCallQoSOKCalleeQos) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetCallQoSOKCalleeQosReceivingItemQos as json.
func (o OptGetCallQoSOKCalleeQosReceivingItemQos) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetCallQoSOKCalleeQosReceivingItemQos from json.
func (o *OptGetCallQoSOKCalleeQosReceivingItemQos) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetCallQoSOKCalleeQosReceivingItemQos to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetCallQoSOKCalleeQosReceivingItemQos) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetCallQoSOKCalleeQosReceivingItemQos) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetCallQoSOKCalleeQosSendingItemQos as json.
func (o OptGetCallQoSOKCalleeQosSendingItemQos) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetCallQoSOKCalleeQosSendingItemQos from json.
func (o *OptGetCallQoSOKCalleeQosSendingItemQos) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetCallQoSOKCalleeQosSendingItemQos to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetCallQoSOKCalleeQosSendingItemQos) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetCallQoSOKCalleeQosSendingItemQos) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetCallQoSOKCallerQos as json.
func (o OptGetCallQoSOKCallerQos) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetCallQoSOKCallerQos from json.
func (o *OptGetCallQoSOKCallerQos) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetCallQoSOKCallerQos to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetCallQoSOKCallerQos) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetCallQoSOKCallerQos) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetCallQoSOKCallerQosReceivingItemQos as json.
func (o OptGetCallQoSOKCallerQosReceivingItemQos) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetCallQoSOKCallerQosReceivingItemQos from json.
func (o *OptGetCallQoSOKCallerQosReceivingItemQos) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetCallQoSOKCallerQosReceivingItemQos to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetCallQoSOKCallerQosReceivingItemQos) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetCallQoSOKCallerQosReceivingItemQos) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetCallQoSOKCallerQosSendingItemQos as json.
func (o OptGetCallQoSOKCallerQosSendingItemQos) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetCallQoSOKCallerQosSendingItemQos from json.
func (o *OptGetCallQoSOKCallerQosSendingItemQos) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetCallQoSOKCallerQosSendingItemQos to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetCallQoSOKCallerQosSendingItemQos) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetCallQoSOKCallerQosSendingItemQos) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetCommonAreaSettingsOKDeskPhonesItemHotDesking as json.
func (o OptGetCommonAreaSettingsOKDeskPhonesItemHotDesking) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetCommonAreaSettingsOKDeskPhonesItemHotDesking from json.
func (o *OptGetCommonAreaSettingsOKDeskPhonesItemHotDesking) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetCommonAreaSettingsOKDeskPhonesItemHotDesking to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetCommonAreaSettingsOKDeskPhonesItemHotDesking) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetCommonAreaSettingsOKDeskPhonesItemHotDesking) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetEmergencyAddressOKOwner as json.
func (o OptGetEmergencyAddressOKOwner) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetEmergencyAddressOKOwner from json.
func (o *OptGetEmergencyAddressOKOwner) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetEmergencyAddressOKOwner to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetEmergencyAddressOKOwner) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetEmergencyAddressOKOwner) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetEmergencyAddressOKSite as json.
func (o OptGetEmergencyAddressOKSite) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetEmergencyAddressOKSite from json.
func (o *OptGetEmergencyAddressOKSite) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetEmergencyAddressOKSite to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetEmergencyAddressOKSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetEmergencyAddressOKSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGCPOKPlayIncomingCallsSound as json.
func (o OptGetGCPOKPlayIncomingCallsSound) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGCPOKPlayIncomingCallsSound from json.
func (o *OptGetGCPOKPlayIncomingCallsSound) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGCPOKPlayIncomingCallsSound to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGCPOKPlayIncomingCallsSound) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGCPOKPlayIncomingCallsSound) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGCPOKSite as json.
func (o OptGetGCPOKSite) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGCPOKSite from json.
func (o *OptGetGCPOKSite) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGCPOKSite to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGCPOKSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGCPOKSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupPhoneSettingsOKAdHocCallRecording as json.
func (o OptGetGroupPhoneSettingsOKAdHocCallRecording) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupPhoneSettingsOKAdHocCallRecording from json.
func (o *OptGetGroupPhoneSettingsOKAdHocCallRecording) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupPhoneSettingsOKAdHocCallRecording to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupPhoneSettingsOKAdHocCallRecording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupPhoneSettingsOKAdHocCallRecording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupPhoneSettingsOKAdHocCallRecordingPlayRecordingBeepTone as json.
func (o OptGetGroupPhoneSettingsOKAdHocCallRecordingPlayRecordingBeepTone) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupPhoneSettingsOKAdHocCallRecordingPlayRecordingBeepTone from json.
func (o *OptGetGroupPhoneSettingsOKAdHocCallRecordingPlayRecordingBeepTone) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupPhoneSettingsOKAdHocCallRecordingPlayRecordingBeepTone to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupPhoneSettingsOKAdHocCallRecordingPlayRecordingBeepTone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupPhoneSettingsOKAdHocCallRecordingPlayRecordingBeepTone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupPhoneSettingsOKAdvancedEncryption as json.
func (o OptGetGroupPhoneSettingsOKAdvancedEncryption) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupPhoneSettingsOKAdvancedEncryption from json.
func (o *OptGetGroupPhoneSettingsOKAdvancedEncryption) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupPhoneSettingsOKAdvancedEncryption to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupPhoneSettingsOKAdvancedEncryption) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupPhoneSettingsOKAdvancedEncryption) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupPhoneSettingsOKAllowedCallLocations as json.
func (o OptGetGroupPhoneSettingsOKAllowedCallLocations) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupPhoneSettingsOKAllowedCallLocations from json.
func (o *OptGetGroupPhoneSettingsOKAllowedCallLocations) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupPhoneSettingsOKAllowedCallLocations to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupPhoneSettingsOKAllowedCallLocations) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupPhoneSettingsOKAllowedCallLocations) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupPhoneSettingsOKAudioIntercom as json.
func (o OptGetGroupPhoneSettingsOKAudioIntercom) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupPhoneSettingsOKAudioIntercom from json.
func (o *OptGetGroupPhoneSettingsOKAudioIntercom) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupPhoneSettingsOKAudioIntercom to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupPhoneSettingsOKAudioIntercom) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupPhoneSettingsOKAudioIntercom) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupPhoneSettingsOKAutoCallRecording as json.
func (o OptGetGroupPhoneSettingsOKAutoCallRecording) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupPhoneSettingsOKAutoCallRecording from json.
func (o *OptGetGroupPhoneSettingsOKAutoCallRecording) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupPhoneSettingsOKAutoCallRecording to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupPhoneSettingsOKAutoCallRecording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupPhoneSettingsOKAutoCallRecording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupPhoneSettingsOKAutoCallRecordingPlayRecordingBeepTone as json.
func (o OptGetGroupPhoneSettingsOKAutoCallRecordingPlayRecordingBeepTone) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupPhoneSettingsOKAutoCallRecordingPlayRecordingBeepTone from json.
func (o *OptGetGroupPhoneSettingsOKAutoCallRecordingPlayRecordingBeepTone) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupPhoneSettingsOKAutoCallRecordingPlayRecordingBeepTone to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupPhoneSettingsOKAutoCallRecordingPlayRecordingBeepTone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupPhoneSettingsOKAutoCallRecordingPlayRecordingBeepTone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupPhoneSettingsOKBlockCallsWithoutCallerID as json.
func (o OptGetGroupPhoneSettingsOKBlockCallsWithoutCallerID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupPhoneSettingsOKBlockCallsWithoutCallerID from json.
func (o *OptGetGroupPhoneSettingsOKBlockCallsWithoutCallerID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupPhoneSettingsOKBlockCallsWithoutCallerID to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupPhoneSettingsOKBlockCallsWithoutCallerID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupPhoneSettingsOKBlockCallsWithoutCallerID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupPhoneSettingsOKBlockExternalCalls as json.
func (o OptGetGroupPhoneSettingsOKBlockExternalCalls) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupPhoneSettingsOKBlockExternalCalls from json.
func (o *OptGetGroupPhoneSettingsOKBlockExternalCalls) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupPhoneSettingsOKBlockExternalCalls to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupPhoneSettingsOKBlockExternalCalls) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupPhoneSettingsOKBlockExternalCalls) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupPhoneSettingsOKBlockListForInboundCallsAndMessaging as json.
func (o OptGetGroupPhoneSettingsOKBlockListForInboundCallsAndMessaging) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupPhoneSettingsOKBlockListForInboundCallsAndMessaging from json.
func (o *OptGetGroupPhoneSettingsOKBlockListForInboundCallsAndMessaging) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupPhoneSettingsOKBlockListForInboundCallsAndMessaging to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupPhoneSettingsOKBlockListForInboundCallsAndMessaging) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupPhoneSettingsOKBlockListForInboundCallsAndMessaging) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupPhoneSettingsOKCallHandlingForwarding as json.
func (o OptGetGroupPhoneSettingsOKCallHandlingForwarding) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupPhoneSettingsOKCallHandlingForwarding from json.
func (o *OptGetGroupPhoneSettingsOKCallHandlingForwarding) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupPhoneSettingsOKCallHandlingForwarding to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupPhoneSettingsOKCallHandlingForwarding) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupPhoneSettingsOKCallHandlingForwarding) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupPhoneSettingsOKCallLiveTranscription as json.
func (o OptGetGroupPhoneSettingsOKCallLiveTranscription) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupPhoneSettingsOKCallLiveTranscription from json.
func (o *OptGetGroupPhoneSettingsOKCallLiveTranscription) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupPhoneSettingsOKCallLiveTranscription to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupPhoneSettingsOKCallLiveTranscription) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupPhoneSettingsOKCallLiveTranscription) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupPhoneSettingsOKCallLiveTranscriptionTranscriptionStartPrompt as json.
func (o OptGetGroupPhoneSettingsOKCallLiveTranscriptionTranscriptionStartPrompt) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupPhoneSettingsOKCallLiveTranscriptionTranscriptionStartPrompt from json.
func (o *OptGetGroupPhoneSettingsOKCallLiveTranscriptionTranscriptionStartPrompt) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupPhoneSettingsOKCallLiveTranscriptionTranscriptionStartPrompt to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupPhoneSettingsOKCallLiveTranscriptionTranscriptionStartPrompt) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupPhoneSettingsOKCallLiveTranscriptionTranscriptionStartPrompt) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupPhoneSettingsOKCallOverflow as json.
func (o OptGetGroupPhoneSettingsOKCallOverflow) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupPhoneSettingsOKCallOverflow from json.
func (o *OptGetGroupPhoneSettingsOKCallOverflow) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupPhoneSettingsOKCallOverflow to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupPhoneSettingsOKCallOverflow) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupPhoneSettingsOKCallOverflow) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupPhoneSettingsOKCallPark as json.
func (o OptGetGroupPhoneSettingsOKCallPark) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupPhoneSettingsOKCallPark from json.
func (o *OptGetGroupPhoneSettingsOKCallPark) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupPhoneSettingsOKCallPark to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupPhoneSettingsOKCallPark) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupPhoneSettingsOKCallPark) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupPhoneSettingsOKCallParkForwardTo as json.
func (o OptGetGroupPhoneSettingsOKCallParkForwardTo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupPhoneSettingsOKCallParkForwardTo from json.
func (o *OptGetGroupPhoneSettingsOKCallParkForwardTo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupPhoneSettingsOKCallParkForwardTo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupPhoneSettingsOKCallParkForwardTo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupPhoneSettingsOKCallParkForwardTo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupPhoneSettingsOKCallTransferring as json.
func (o OptGetGroupPhoneSettingsOKCallTransferring) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupPhoneSettingsOKCallTransferring from json.
func (o *OptGetGroupPhoneSettingsOKCallTransferring) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupPhoneSettingsOKCallTransferring to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupPhoneSettingsOKCallTransferring) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupPhoneSettingsOKCallTransferring) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupPhoneSettingsOKCheckVoicemailsOverPhone as json.
func (o OptGetGroupPhoneSettingsOKCheckVoicemailsOverPhone) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupPhoneSettingsOKCheckVoicemailsOverPhone from json.
func (o *OptGetGroupPhoneSettingsOKCheckVoicemailsOverPhone) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupPhoneSettingsOKCheckVoicemailsOverPhone to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupPhoneSettingsOKCheckVoicemailsOverPhone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupPhoneSettingsOKCheckVoicemailsOverPhone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupPhoneSettingsOKDelegation as json.
func (o OptGetGroupPhoneSettingsOKDelegation) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupPhoneSettingsOKDelegation from json.
func (o *OptGetGroupPhoneSettingsOKDelegation) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupPhoneSettingsOKDelegation to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupPhoneSettingsOKDelegation) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupPhoneSettingsOKDelegation) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupPhoneSettingsOKDisplayCallFeedbackSurvey as json.
func (o OptGetGroupPhoneSettingsOKDisplayCallFeedbackSurvey) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupPhoneSettingsOKDisplayCallFeedbackSurvey from json.
func (o *OptGetGroupPhoneSettingsOKDisplayCallFeedbackSurvey) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupPhoneSettingsOKDisplayCallFeedbackSurvey to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupPhoneSettingsOKDisplayCallFeedbackSurvey) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupPhoneSettingsOKDisplayCallFeedbackSurvey) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupPhoneSettingsOKDisplayCallFeedbackSurveyFeedbackDuration as json.
func (o OptGetGroupPhoneSettingsOKDisplayCallFeedbackSurveyFeedbackDuration) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupPhoneSettingsOKDisplayCallFeedbackSurveyFeedbackDuration from json.
func (o *OptGetGroupPhoneSettingsOKDisplayCallFeedbackSurveyFeedbackDuration) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupPhoneSettingsOKDisplayCallFeedbackSurveyFeedbackDuration to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupPhoneSettingsOKDisplayCallFeedbackSurveyFeedbackDuration) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupPhoneSettingsOKDisplayCallFeedbackSurveyFeedbackDuration) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupPhoneSettingsOKDisplayCallFeedbackSurveyFeedbackMos as json.
func (o OptGetGroupPhoneSettingsOKDisplayCallFeedbackSurveyFeedbackMos) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupPhoneSettingsOKDisplayCallFeedbackSurveyFeedbackMos from json.
func (o *OptGetGroupPhoneSettingsOKDisplayCallFeedbackSurveyFeedbackMos) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupPhoneSettingsOKDisplayCallFeedbackSurveyFeedbackMos to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupPhoneSettingsOKDisplayCallFeedbackSurveyFeedbackMos) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupPhoneSettingsOKDisplayCallFeedbackSurveyFeedbackMos) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupPhoneSettingsOKE2eEncryption as json.
func (o OptGetGroupPhoneSettingsOKE2eEncryption) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupPhoneSettingsOKE2eEncryption from json.
func (o *OptGetGroupPhoneSettingsOKE2eEncryption) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupPhoneSettingsOKE2eEncryption to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupPhoneSettingsOKE2eEncryption) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupPhoneSettingsOKE2eEncryption) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupPhoneSettingsOKElevateToMeeting as json.
func (o OptGetGroupPhoneSettingsOKElevateToMeeting) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupPhoneSettingsOKElevateToMeeting from json.
func (o *OptGetGroupPhoneSettingsOKElevateToMeeting) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupPhoneSettingsOKElevateToMeeting to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupPhoneSettingsOKElevateToMeeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupPhoneSettingsOKElevateToMeeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupPhoneSettingsOKHandOffToRoom as json.
func (o OptGetGroupPhoneSettingsOKHandOffToRoom) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupPhoneSettingsOKHandOffToRoom from json.
func (o *OptGetGroupPhoneSettingsOKHandOffToRoom) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupPhoneSettingsOKHandOffToRoom to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupPhoneSettingsOKHandOffToRoom) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupPhoneSettingsOKHandOffToRoom) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupPhoneSettingsOKInternationalCalling as json.
func (o OptGetGroupPhoneSettingsOKInternationalCalling) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupPhoneSettingsOKInternationalCalling from json.
func (o *OptGetGroupPhoneSettingsOKInternationalCalling) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupPhoneSettingsOKInternationalCalling to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupPhoneSettingsOKInternationalCalling) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupPhoneSettingsOKInternationalCalling) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupPhoneSettingsOKLocalSurvivabilityMode as json.
func (o OptGetGroupPhoneSettingsOKLocalSurvivabilityMode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupPhoneSettingsOKLocalSurvivabilityMode from json.
func (o *OptGetGroupPhoneSettingsOKLocalSurvivabilityMode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupPhoneSettingsOKLocalSurvivabilityMode to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupPhoneSettingsOKLocalSurvivabilityMode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupPhoneSettingsOKLocalSurvivabilityMode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupPhoneSettingsOKMobileSwitchToCarrier as json.
func (o OptGetGroupPhoneSettingsOKMobileSwitchToCarrier) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupPhoneSettingsOKMobileSwitchToCarrier from json.
func (o *OptGetGroupPhoneSettingsOKMobileSwitchToCarrier) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupPhoneSettingsOKMobileSwitchToCarrier to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupPhoneSettingsOKMobileSwitchToCarrier) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupPhoneSettingsOKMobileSwitchToCarrier) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupPhoneSettingsOKOutboundCalling as json.
func (o OptGetGroupPhoneSettingsOKOutboundCalling) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupPhoneSettingsOKOutboundCalling from json.
func (o *OptGetGroupPhoneSettingsOKOutboundCalling) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupPhoneSettingsOKOutboundCalling to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupPhoneSettingsOKOutboundCalling) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupPhoneSettingsOKOutboundCalling) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupPhoneSettingsOKOutboundSMS as json.
func (o OptGetGroupPhoneSettingsOKOutboundSMS) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupPhoneSettingsOKOutboundSMS from json.
func (o *OptGetGroupPhoneSettingsOKOutboundSMS) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupPhoneSettingsOKOutboundSMS to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupPhoneSettingsOKOutboundSMS) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupPhoneSettingsOKOutboundSMS) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupPhoneSettingsOKPeerToPeerMedia as json.
func (o OptGetGroupPhoneSettingsOKPeerToPeerMedia) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupPhoneSettingsOKPeerToPeerMedia from json.
func (o *OptGetGroupPhoneSettingsOKPeerToPeerMedia) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupPhoneSettingsOKPeerToPeerMedia to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupPhoneSettingsOKPeerToPeerMedia) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupPhoneSettingsOKPeerToPeerMedia) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupPhoneSettingsOKPersonalAudioLibrary as json.
func (o OptGetGroupPhoneSettingsOKPersonalAudioLibrary) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupPhoneSettingsOKPersonalAudioLibrary from json.
func (o *OptGetGroupPhoneSettingsOKPersonalAudioLibrary) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupPhoneSettingsOKPersonalAudioLibrary to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupPhoneSettingsOKPersonalAudioLibrary) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupPhoneSettingsOKPersonalAudioLibrary) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupPhoneSettingsOKRestrictedCallHours as json.
func (o OptGetGroupPhoneSettingsOKRestrictedCallHours) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupPhoneSettingsOKRestrictedCallHours from json.
func (o *OptGetGroupPhoneSettingsOKRestrictedCallHours) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupPhoneSettingsOKRestrictedCallHours to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupPhoneSettingsOKRestrictedCallHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupPhoneSettingsOKRestrictedCallHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupPhoneSettingsOKRestrictedCallHoursTimeZone as json.
func (o OptGetGroupPhoneSettingsOKRestrictedCallHoursTimeZone) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupPhoneSettingsOKRestrictedCallHoursTimeZone from json.
func (o *OptGetGroupPhoneSettingsOKRestrictedCallHoursTimeZone) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupPhoneSettingsOKRestrictedCallHoursTimeZone to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupPhoneSettingsOKRestrictedCallHoursTimeZone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupPhoneSettingsOKRestrictedCallHoursTimeZone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupPhoneSettingsOKSMS as json.
func (o OptGetGroupPhoneSettingsOKSMS) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupPhoneSettingsOKSMS from json.
func (o *OptGetGroupPhoneSettingsOKSMS) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupPhoneSettingsOKSMS to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupPhoneSettingsOKSMS) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupPhoneSettingsOKSMS) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupPhoneSettingsOKSMSEtiquetteTool as json.
func (o OptGetGroupPhoneSettingsOKSMSEtiquetteTool) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupPhoneSettingsOKSMSEtiquetteTool from json.
func (o *OptGetGroupPhoneSettingsOKSMSEtiquetteTool) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupPhoneSettingsOKSMSEtiquetteTool to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupPhoneSettingsOKSMSEtiquetteTool) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupPhoneSettingsOKSMSEtiquetteTool) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupPhoneSettingsOKSelectOutboundCallerID as json.
func (o OptGetGroupPhoneSettingsOKSelectOutboundCallerID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupPhoneSettingsOKSelectOutboundCallerID from json.
func (o *OptGetGroupPhoneSettingsOKSelectOutboundCallerID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupPhoneSettingsOKSelectOutboundCallerID to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupPhoneSettingsOKSelectOutboundCallerID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupPhoneSettingsOKSelectOutboundCallerID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupPhoneSettingsOKSharedVoicemailNotificationByEmail as json.
func (o OptGetGroupPhoneSettingsOKSharedVoicemailNotificationByEmail) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupPhoneSettingsOKSharedVoicemailNotificationByEmail from json.
func (o *OptGetGroupPhoneSettingsOKSharedVoicemailNotificationByEmail) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupPhoneSettingsOKSharedVoicemailNotificationByEmail to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupPhoneSettingsOKSharedVoicemailNotificationByEmail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupPhoneSettingsOKSharedVoicemailNotificationByEmail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupPhoneSettingsOKVoicemail as json.
func (o OptGetGroupPhoneSettingsOKVoicemail) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupPhoneSettingsOKVoicemail from json.
func (o *OptGetGroupPhoneSettingsOKVoicemail) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupPhoneSettingsOKVoicemail to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupPhoneSettingsOKVoicemail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupPhoneSettingsOKVoicemail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupPhoneSettingsOKVoicemailNotificationByEmail as json.
func (o OptGetGroupPhoneSettingsOKVoicemailNotificationByEmail) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupPhoneSettingsOKVoicemailNotificationByEmail from json.
func (o *OptGetGroupPhoneSettingsOKVoicemailNotificationByEmail) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupPhoneSettingsOKVoicemailNotificationByEmail to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupPhoneSettingsOKVoicemailNotificationByEmail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupPhoneSettingsOKVoicemailNotificationByEmail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupPhoneSettingsOKVoicemailTranscription as json.
func (o OptGetGroupPhoneSettingsOKVoicemailTranscription) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupPhoneSettingsOKVoicemailTranscription from json.
func (o *OptGetGroupPhoneSettingsOKVoicemailTranscription) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupPhoneSettingsOKVoicemailTranscription to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupPhoneSettingsOKVoicemailTranscription) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupPhoneSettingsOKVoicemailTranscription) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupPhoneSettingsOKZoomPhoneOnMobile as json.
func (o OptGetGroupPhoneSettingsOKZoomPhoneOnMobile) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupPhoneSettingsOKZoomPhoneOnMobile from json.
func (o *OptGetGroupPhoneSettingsOKZoomPhoneOnMobile) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupPhoneSettingsOKZoomPhoneOnMobile to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupPhoneSettingsOKZoomPhoneOnMobile) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupPhoneSettingsOKZoomPhoneOnMobile) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupPhoneSettingsOKZoomPhoneOnPwa as json.
func (o OptGetGroupPhoneSettingsOKZoomPhoneOnPwa) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupPhoneSettingsOKZoomPhoneOnPwa from json.
func (o *OptGetGroupPhoneSettingsOKZoomPhoneOnPwa) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupPhoneSettingsOKZoomPhoneOnPwa to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupPhoneSettingsOKZoomPhoneOnPwa) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupPhoneSettingsOKZoomPhoneOnPwa) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetLocationOKElin as json.
func (o OptGetLocationOKElin) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetLocationOKElin from json.
func (o *OptGetLocationOKElin) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetLocationOKElin to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetLocationOKElin) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetLocationOKElin) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetLocationOKEmergencyAddress as json.
func (o OptGetLocationOKEmergencyAddress) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetLocationOKEmergencyAddress from json.
func (o *OptGetLocationOKEmergencyAddress) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetLocationOKEmergencyAddress to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetLocationOKEmergencyAddress) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetLocationOKEmergencyAddress) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetLocationOKSipGroup as json.
func (o OptGetLocationOKSipGroup) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetLocationOKSipGroup from json.
func (o *OptGetLocationOKSipGroup) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetLocationOKSipGroup to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetLocationOKSipGroup) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetLocationOKSipGroup) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetLocationOKSite as json.
func (o OptGetLocationOKSite) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetLocationOKSite from json.
func (o *OptGetLocationOKSite) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetLocationOKSite to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetLocationOKSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetLocationOKSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetMonitoringGroupByIdOKSite as json.
func (o OptGetMonitoringGroupByIdOKSite) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetMonitoringGroupByIdOKSite from json.
func (o *OptGetMonitoringGroupByIdOKSite) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetMonitoringGroupByIdOKSite to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetMonitoringGroupByIdOKSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetMonitoringGroupByIdOKSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetPhoneNumberDetailsOKAssignee as json.
func (o OptGetPhoneNumberDetailsOKAssignee) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetPhoneNumberDetailsOKAssignee from json.
func (o *OptGetPhoneNumberDetailsOKAssignee) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetPhoneNumberDetailsOKAssignee to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetPhoneNumberDetailsOKAssignee) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetPhoneNumberDetailsOKAssignee) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetPhoneNumberDetailsOKAssigneeGreeting as json.
func (o OptGetPhoneNumberDetailsOKAssigneeGreeting) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetPhoneNumberDetailsOKAssigneeGreeting from json.
func (o *OptGetPhoneNumberDetailsOKAssigneeGreeting) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetPhoneNumberDetailsOKAssigneeGreeting to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetPhoneNumberDetailsOKAssigneeGreeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetPhoneNumberDetailsOKAssigneeGreeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetPhoneNumberDetailsOKAssigneeOnHoldMusic as json.
func (o OptGetPhoneNumberDetailsOKAssigneeOnHoldMusic) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetPhoneNumberDetailsOKAssigneeOnHoldMusic from json.
func (o *OptGetPhoneNumberDetailsOKAssigneeOnHoldMusic) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetPhoneNumberDetailsOKAssigneeOnHoldMusic to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetPhoneNumberDetailsOKAssigneeOnHoldMusic) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetPhoneNumberDetailsOKAssigneeOnHoldMusic) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetPhoneNumberDetailsOKCarrier as json.
func (o OptGetPhoneNumberDetailsOKCarrier) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetPhoneNumberDetailsOKCarrier from json.
func (o *OptGetPhoneNumberDetailsOKCarrier) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetPhoneNumberDetailsOKCarrier to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetPhoneNumberDetailsOKCarrier) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetPhoneNumberDetailsOKCarrier) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetPhoneNumberDetailsOKEmergencyAddress as json.
func (o OptGetPhoneNumberDetailsOKEmergencyAddress) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetPhoneNumberDetailsOKEmergencyAddress from json.
func (o *OptGetPhoneNumberDetailsOKEmergencyAddress) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetPhoneNumberDetailsOKEmergencyAddress to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetPhoneNumberDetailsOKEmergencyAddress) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetPhoneNumberDetailsOKEmergencyAddress) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetPhoneNumberDetailsOKSipGroup as json.
func (o OptGetPhoneNumberDetailsOKSipGroup) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetPhoneNumberDetailsOKSipGroup from json.
func (o *OptGetPhoneNumberDetailsOKSipGroup) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetPhoneNumberDetailsOKSipGroup to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetPhoneNumberDetailsOKSipGroup) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetPhoneNumberDetailsOKSipGroup) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetPhoneNumberDetailsOKSite as json.
func (o OptGetPhoneNumberDetailsOKSite) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetPhoneNumberDetailsOKSite from json.
func (o *OptGetPhoneNumberDetailsOKSite) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetPhoneNumberDetailsOKSite to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetPhoneNumberDetailsOKSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetPhoneNumberDetailsOKSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetPhoneRecordingsByCallIdOrCallLogIdOKAcceptedBy as json.
func (o OptGetPhoneRecordingsByCallIdOrCallLogIdOKAcceptedBy) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetPhoneRecordingsByCallIdOrCallLogIdOKAcceptedBy from json.
func (o *OptGetPhoneRecordingsByCallIdOrCallLogIdOKAcceptedBy) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetPhoneRecordingsByCallIdOrCallLogIdOKAcceptedBy to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetPhoneRecordingsByCallIdOrCallLogIdOKAcceptedBy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetPhoneRecordingsByCallIdOrCallLogIdOKAcceptedBy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetPhoneRecordingsByCallIdOrCallLogIdOKOutgoingBy as json.
func (o OptGetPhoneRecordingsByCallIdOrCallLogIdOKOutgoingBy) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetPhoneRecordingsByCallIdOrCallLogIdOKOutgoingBy from json.
func (o *OptGetPhoneRecordingsByCallIdOrCallLogIdOKOutgoingBy) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetPhoneRecordingsByCallIdOrCallLogIdOKOutgoingBy to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetPhoneRecordingsByCallIdOrCallLogIdOKOutgoingBy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetPhoneRecordingsByCallIdOrCallLogIdOKOutgoingBy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetPhoneRecordingsByCallIdOrCallLogIdOKOwner as json.
func (o OptGetPhoneRecordingsByCallIdOrCallLogIdOKOwner) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetPhoneRecordingsByCallIdOrCallLogIdOKOwner from json.
func (o *OptGetPhoneRecordingsByCallIdOrCallLogIdOKOwner) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetPhoneRecordingsByCallIdOrCallLogIdOKOwner to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetPhoneRecordingsByCallIdOrCallLogIdOKOwner) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetPhoneRecordingsByCallIdOrCallLogIdOKOwner) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetPhoneRecordingsOKRecordingsItemAcceptedBy as json.
func (o OptGetPhoneRecordingsOKRecordingsItemAcceptedBy) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetPhoneRecordingsOKRecordingsItemAcceptedBy from json.
func (o *OptGetPhoneRecordingsOKRecordingsItemAcceptedBy) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetPhoneRecordingsOKRecordingsItemAcceptedBy to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetPhoneRecordingsOKRecordingsItemAcceptedBy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetPhoneRecordingsOKRecordingsItemAcceptedBy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetPhoneRecordingsOKRecordingsItemOutgoingBy as json.
func (o OptGetPhoneRecordingsOKRecordingsItemOutgoingBy) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetPhoneRecordingsOKRecordingsItemOutgoingBy from json.
func (o *OptGetPhoneRecordingsOKRecordingsItemOutgoingBy) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetPhoneRecordingsOKRecordingsItemOutgoingBy to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetPhoneRecordingsOKRecordingsItemOutgoingBy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetPhoneRecordingsOKRecordingsItemOutgoingBy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetPhoneRecordingsOKRecordingsItemOwner as json.
func (o OptGetPhoneRecordingsOKRecordingsItemOwner) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetPhoneRecordingsOKRecordingsItemOwner from json.
func (o *OptGetPhoneRecordingsOKRecordingsItemOwner) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetPhoneRecordingsOKRecordingsItemOwner to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetPhoneRecordingsOKRecordingsItemOwner) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetPhoneRecordingsOKRecordingsItemOwner) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetPhoneRecordingsOKRecordingsItemSite as json.
func (o OptGetPhoneRecordingsOKRecordingsItemSite) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetPhoneRecordingsOKRecordingsItemSite from json.
func (o *OptGetPhoneRecordingsOKRecordingsItemSite) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetPhoneRecordingsOKRecordingsItemSite to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetPhoneRecordingsOKRecordingsItemSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetPhoneRecordingsOKRecordingsItemSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetPortedNumbersDetailsOKOriginalBillingInfo as json.
func (o OptGetPortedNumbersDetailsOKOriginalBillingInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetPortedNumbersDetailsOKOriginalBillingInfo from json.
func (o *OptGetPortedNumbersDetailsOKOriginalBillingInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetPortedNumbersDetailsOKOriginalBillingInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetPortedNumbersDetailsOKOriginalBillingInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetPortedNumbersDetailsOKOriginalBillingInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetPortedNumbersDetailsOKOriginalBillingInfoAddress as json.
func (o OptGetPortedNumbersDetailsOKOriginalBillingInfoAddress) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetPortedNumbersDetailsOKOriginalBillingInfoAddress from json.
func (o *OptGetPortedNumbersDetailsOKOriginalBillingInfoAddress) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetPortedNumbersDetailsOKOriginalBillingInfoAddress to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetPortedNumbersDetailsOKOriginalBillingInfoAddress) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetPortedNumbersDetailsOKOriginalBillingInfoAddress) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetRoutingRuleOKRoutingPath as json.
func (o OptGetRoutingRuleOKRoutingPath) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetRoutingRuleOKRoutingPath from json.
func (o *OptGetRoutingRuleOKRoutingPath) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetRoutingRuleOKRoutingPath to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetRoutingRuleOKRoutingPath) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetRoutingRuleOKRoutingPath) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetRoutingRuleOKRoutingPathSipGroup as json.
func (o OptGetRoutingRuleOKRoutingPathSipGroup) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetRoutingRuleOKRoutingPathSipGroup from json.
func (o *OptGetRoutingRuleOKRoutingPathSipGroup) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetRoutingRuleOKRoutingPathSipGroup to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetRoutingRuleOKRoutingPathSipGroup) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetRoutingRuleOKRoutingPathSipGroup) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSMSCampaignOKBrand as json.
func (o OptGetSMSCampaignOKBrand) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSMSCampaignOKBrand from json.
func (o *OptGetSMSCampaignOKBrand) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSMSCampaignOKBrand to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSMSCampaignOKBrand) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSMSCampaignOKBrand) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSettingTemplateOKPolicy as json.
func (o OptGetSettingTemplateOKPolicy) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSettingTemplateOKPolicy from json.
func (o *OptGetSettingTemplateOKPolicy) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSettingTemplateOKPolicy to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSettingTemplateOKPolicy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSettingTemplateOKPolicy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSettingTemplateOKPolicyAdHocCallRecording as json.
func (o OptGetSettingTemplateOKPolicyAdHocCallRecording) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSettingTemplateOKPolicyAdHocCallRecording from json.
func (o *OptGetSettingTemplateOKPolicyAdHocCallRecording) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSettingTemplateOKPolicyAdHocCallRecording to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSettingTemplateOKPolicyAdHocCallRecording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSettingTemplateOKPolicyAdHocCallRecording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSettingTemplateOKPolicyAutoCallRecording as json.
func (o OptGetSettingTemplateOKPolicyAutoCallRecording) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSettingTemplateOKPolicyAutoCallRecording from json.
func (o *OptGetSettingTemplateOKPolicyAutoCallRecording) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSettingTemplateOKPolicyAutoCallRecording to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSettingTemplateOKPolicyAutoCallRecording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSettingTemplateOKPolicyAutoCallRecording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSettingTemplateOKPolicyCallForwarding as json.
func (o OptGetSettingTemplateOKPolicyCallForwarding) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSettingTemplateOKPolicyCallForwarding from json.
func (o *OptGetSettingTemplateOKPolicyCallForwarding) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSettingTemplateOKPolicyCallForwarding to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSettingTemplateOKPolicyCallForwarding) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSettingTemplateOKPolicyCallForwarding) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSettingTemplateOKPolicyCallOverflow as json.
func (o OptGetSettingTemplateOKPolicyCallOverflow) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSettingTemplateOKPolicyCallOverflow from json.
func (o *OptGetSettingTemplateOKPolicyCallOverflow) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSettingTemplateOKPolicyCallOverflow to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSettingTemplateOKPolicyCallOverflow) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSettingTemplateOKPolicyCallOverflow) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSettingTemplateOKPolicySMS as json.
func (o OptGetSettingTemplateOKPolicySMS) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSettingTemplateOKPolicySMS from json.
func (o *OptGetSettingTemplateOKPolicySMS) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSettingTemplateOKPolicySMS to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSettingTemplateOKPolicySMS) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSettingTemplateOKPolicySMS) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSettingTemplateOKPolicyVoicemail as json.
func (o OptGetSettingTemplateOKPolicyVoicemail) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSettingTemplateOKPolicyVoicemail from json.
func (o *OptGetSettingTemplateOKPolicyVoicemail) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSettingTemplateOKPolicyVoicemail to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSettingTemplateOKPolicyVoicemail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSettingTemplateOKPolicyVoicemail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSettingTemplateOKProfile as json.
func (o OptGetSettingTemplateOKProfile) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSettingTemplateOKProfile from json.
func (o *OptGetSettingTemplateOKProfile) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSettingTemplateOKProfile to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSettingTemplateOKProfile) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSettingTemplateOKProfile) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSettingTemplateOKUserSettings as json.
func (o OptGetSettingTemplateOKUserSettings) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSettingTemplateOKUserSettings from json.
func (o *OptGetSettingTemplateOKUserSettings) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSettingTemplateOKUserSettings to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSettingTemplateOKUserSettings) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSettingTemplateOKUserSettings) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSettingTemplateOKUserSettingsCallHandling as json.
func (o OptGetSettingTemplateOKUserSettingsCallHandling) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSettingTemplateOKUserSettingsCallHandling from json.
func (o *OptGetSettingTemplateOKUserSettingsCallHandling) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSettingTemplateOKUserSettingsCallHandling to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSettingTemplateOKUserSettingsCallHandling) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSettingTemplateOKUserSettingsCallHandling) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSettingTemplateOKUserSettingsCallHandlingBusinessHours as json.
func (o OptGetSettingTemplateOKUserSettingsCallHandlingBusinessHours) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSettingTemplateOKUserSettingsCallHandlingBusinessHours from json.
func (o *OptGetSettingTemplateOKUserSettingsCallHandlingBusinessHours) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSettingTemplateOKUserSettingsCallHandlingBusinessHours to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSettingTemplateOKUserSettingsCallHandlingBusinessHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSettingTemplateOKUserSettingsCallHandlingBusinessHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursBusyConnectOperator as json.
func (o OptGetSettingTemplateOKUserSettingsCallHandlingBusinessHoursBusyConnectOperator) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursBusyConnectOperator from json.
func (o *OptGetSettingTemplateOKUserSettingsCallHandlingBusinessHoursBusyConnectOperator) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSettingTemplateOKUserSettingsCallHandlingBusinessHoursBusyConnectOperator to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSettingTemplateOKUserSettingsCallHandlingBusinessHoursBusyConnectOperator) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSettingTemplateOKUserSettingsCallHandlingBusinessHoursBusyConnectOperator) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursBusyConnectOperatorExternalNumber as json.
func (o OptGetSettingTemplateOKUserSettingsCallHandlingBusinessHoursBusyConnectOperatorExternalNumber) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursBusyConnectOperatorExternalNumber from json.
func (o *OptGetSettingTemplateOKUserSettingsCallHandlingBusinessHoursBusyConnectOperatorExternalNumber) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSettingTemplateOKUserSettingsCallHandlingBusinessHoursBusyConnectOperatorExternalNumber to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSettingTemplateOKUserSettingsCallHandlingBusinessHoursBusyConnectOperatorExternalNumber) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSettingTemplateOKUserSettingsCallHandlingBusinessHoursBusyConnectOperatorExternalNumber) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursConnectToOperator as json.
func (o OptGetSettingTemplateOKUserSettingsCallHandlingBusinessHoursConnectToOperator) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursConnectToOperator from json.
func (o *OptGetSettingTemplateOKUserSettingsCallHandlingBusinessHoursConnectToOperator) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSettingTemplateOKUserSettingsCallHandlingBusinessHoursConnectToOperator to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSettingTemplateOKUserSettingsCallHandlingBusinessHoursConnectToOperator) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSettingTemplateOKUserSettingsCallHandlingBusinessHoursConnectToOperator) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursConnectToOperatorExternalNumber as json.
func (o OptGetSettingTemplateOKUserSettingsCallHandlingBusinessHoursConnectToOperatorExternalNumber) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSettingTemplateOKUserSettingsCallHandlingBusinessHoursConnectToOperatorExternalNumber from json.
func (o *OptGetSettingTemplateOKUserSettingsCallHandlingBusinessHoursConnectToOperatorExternalNumber) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSettingTemplateOKUserSettingsCallHandlingBusinessHoursConnectToOperatorExternalNumber to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSettingTemplateOKUserSettingsCallHandlingBusinessHoursConnectToOperatorExternalNumber) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSettingTemplateOKUserSettingsCallHandlingBusinessHoursConnectToOperatorExternalNumber) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSettingTemplateOKUserSettingsCallHandlingCloseHours as json.
func (o OptGetSettingTemplateOKUserSettingsCallHandlingCloseHours) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSettingTemplateOKUserSettingsCallHandlingCloseHours from json.
func (o *OptGetSettingTemplateOKUserSettingsCallHandlingCloseHours) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSettingTemplateOKUserSettingsCallHandlingCloseHours to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSettingTemplateOKUserSettingsCallHandlingCloseHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSettingTemplateOKUserSettingsCallHandlingCloseHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSettingTemplateOKUserSettingsCallHandlingCloseHoursBusyConnectOperator as json.
func (o OptGetSettingTemplateOKUserSettingsCallHandlingCloseHoursBusyConnectOperator) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSettingTemplateOKUserSettingsCallHandlingCloseHoursBusyConnectOperator from json.
func (o *OptGetSettingTemplateOKUserSettingsCallHandlingCloseHoursBusyConnectOperator) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSettingTemplateOKUserSettingsCallHandlingCloseHoursBusyConnectOperator to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSettingTemplateOKUserSettingsCallHandlingCloseHoursBusyConnectOperator) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSettingTemplateOKUserSettingsCallHandlingCloseHoursBusyConnectOperator) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSettingTemplateOKUserSettingsCallHandlingCloseHoursBusyConnectOperatorExternalNumber as json.
func (o OptGetSettingTemplateOKUserSettingsCallHandlingCloseHoursBusyConnectOperatorExternalNumber) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSettingTemplateOKUserSettingsCallHandlingCloseHoursBusyConnectOperatorExternalNumber from json.
func (o *OptGetSettingTemplateOKUserSettingsCallHandlingCloseHoursBusyConnectOperatorExternalNumber) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSettingTemplateOKUserSettingsCallHandlingCloseHoursBusyConnectOperatorExternalNumber to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSettingTemplateOKUserSettingsCallHandlingCloseHoursBusyConnectOperatorExternalNumber) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSettingTemplateOKUserSettingsCallHandlingCloseHoursBusyConnectOperatorExternalNumber) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSettingTemplateOKUserSettingsCallHandlingCloseHoursConnectToOperator as json.
func (o OptGetSettingTemplateOKUserSettingsCallHandlingCloseHoursConnectToOperator) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSettingTemplateOKUserSettingsCallHandlingCloseHoursConnectToOperator from json.
func (o *OptGetSettingTemplateOKUserSettingsCallHandlingCloseHoursConnectToOperator) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSettingTemplateOKUserSettingsCallHandlingCloseHoursConnectToOperator to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSettingTemplateOKUserSettingsCallHandlingCloseHoursConnectToOperator) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSettingTemplateOKUserSettingsCallHandlingCloseHoursConnectToOperator) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSettingTemplateOKUserSettingsCallHandlingCloseHoursConnectToOperatorExternalNumber as json.
func (o OptGetSettingTemplateOKUserSettingsCallHandlingCloseHoursConnectToOperatorExternalNumber) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSettingTemplateOKUserSettingsCallHandlingCloseHoursConnectToOperatorExternalNumber from json.
func (o *OptGetSettingTemplateOKUserSettingsCallHandlingCloseHoursConnectToOperatorExternalNumber) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSettingTemplateOKUserSettingsCallHandlingCloseHoursConnectToOperatorExternalNumber to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSettingTemplateOKUserSettingsCallHandlingCloseHoursConnectToOperatorExternalNumber) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSettingTemplateOKUserSettingsCallHandlingCloseHoursConnectToOperatorExternalNumber) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSettingTemplateOKUserSettingsDeskPhone as json.
func (o OptGetSettingTemplateOKUserSettingsDeskPhone) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSettingTemplateOKUserSettingsDeskPhone from json.
func (o *OptGetSettingTemplateOKUserSettingsDeskPhone) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSettingTemplateOKUserSettingsDeskPhone to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSettingTemplateOKUserSettingsDeskPhone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSettingTemplateOKUserSettingsDeskPhone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSharedLineGroupPolicyOKCheckVoicemailsOverPhone as json.
func (o OptGetSharedLineGroupPolicyOKCheckVoicemailsOverPhone) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSharedLineGroupPolicyOKCheckVoicemailsOverPhone from json.
func (o *OptGetSharedLineGroupPolicyOKCheckVoicemailsOverPhone) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSharedLineGroupPolicyOKCheckVoicemailsOverPhone to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSharedLineGroupPolicyOKCheckVoicemailsOverPhone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSharedLineGroupPolicyOKCheckVoicemailsOverPhone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSiteSettingForTypeOKAudioPrompt as json.
func (o OptGetSiteSettingForTypeOKAudioPrompt) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSiteSettingForTypeOKAudioPrompt from json.
func (o *OptGetSiteSettingForTypeOKAudioPrompt) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSiteSettingForTypeOKAudioPrompt to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSiteSettingForTypeOKAudioPrompt) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSiteSettingForTypeOKAudioPrompt) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSiteSettingForTypeOKAudioPromptAudioWhileConnecting as json.
func (o OptGetSiteSettingForTypeOKAudioPromptAudioWhileConnecting) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSiteSettingForTypeOKAudioPromptAudioWhileConnecting from json.
func (o *OptGetSiteSettingForTypeOKAudioPromptAudioWhileConnecting) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSiteSettingForTypeOKAudioPromptAudioWhileConnecting to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSiteSettingForTypeOKAudioPromptAudioWhileConnecting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSiteSettingForTypeOKAudioPromptAudioWhileConnecting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstruction as json.
func (o OptGetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstruction) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstruction from json.
func (o *OptGetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstruction) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstruction to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstruction) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstruction) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstructionBusinessHours as json.
func (o OptGetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstructionBusinessHours) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstructionBusinessHours from json.
func (o *OptGetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstructionBusinessHours) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstructionBusinessHours to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstructionBusinessHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstructionBusinessHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstructionClosedHours as json.
func (o OptGetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstructionClosedHours) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstructionClosedHours from json.
func (o *OptGetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstructionClosedHours) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstructionClosedHours to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstructionClosedHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstructionClosedHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstructionHolidayHours as json.
func (o OptGetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstructionHolidayHours) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstructionHolidayHours from json.
func (o *OptGetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstructionHolidayHours) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstructionHolidayHours to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstructionHolidayHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSiteSettingForTypeOKAudioPromptGreetingLeaveVoicemailInstructionHolidayHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemail as json.
func (o OptGetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemail) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemail from json.
func (o *OptGetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemail) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemail to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailBusinessHours as json.
func (o OptGetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailBusinessHours) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailBusinessHours from json.
func (o *OptGetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailBusinessHours) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailBusinessHours to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailBusinessHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailBusinessHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailClosedHours as json.
func (o OptGetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailClosedHours) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailClosedHours from json.
func (o *OptGetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailClosedHours) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailClosedHours to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailClosedHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailClosedHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailHolidayHours as json.
func (o OptGetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailHolidayHours) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailHolidayHours from json.
func (o *OptGetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailHolidayHours) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailHolidayHours to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailHolidayHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailHolidayHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemail as json.
func (o OptGetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemail) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemail from json.
func (o *OptGetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemail) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemail to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailBusinessHours as json.
func (o OptGetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailBusinessHours) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailBusinessHours from json.
func (o *OptGetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailBusinessHours) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailBusinessHours to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailBusinessHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailBusinessHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailClosedHours as json.
func (o OptGetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailClosedHours) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailClosedHours from json.
func (o *OptGetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailClosedHours) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailClosedHours to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailClosedHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailClosedHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailHolidayHours as json.
func (o OptGetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailHolidayHours) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailHolidayHours from json.
func (o *OptGetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailHolidayHours) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailHolidayHours to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailHolidayHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSiteSettingForTypeOKAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailHolidayHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemail as json.
func (o OptGetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemail) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemail from json.
func (o *OptGetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemail) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemail to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemailBusinessHours as json.
func (o OptGetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemailBusinessHours) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemailBusinessHours from json.
func (o *OptGetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemailBusinessHours) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemailBusinessHours to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemailBusinessHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemailBusinessHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemailClosedHours as json.
func (o OptGetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemailClosedHours) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemailClosedHours from json.
func (o *OptGetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemailClosedHours) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemailClosedHours to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemailClosedHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemailClosedHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemailHolidayHours as json.
func (o OptGetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemailHolidayHours) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemailHolidayHours from json.
func (o *OptGetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemailHolidayHours) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemailHolidayHours to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemailHolidayHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSiteSettingForTypeOKAudioPromptGreetingMenuLeaveOrCheckVoicemailHolidayHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSiteSettingForTypeOKAudioPromptHoldMusic as json.
func (o OptGetSiteSettingForTypeOKAudioPromptHoldMusic) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSiteSettingForTypeOKAudioPromptHoldMusic from json.
func (o *OptGetSiteSettingForTypeOKAudioPromptHoldMusic) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSiteSettingForTypeOKAudioPromptHoldMusic to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSiteSettingForTypeOKAudioPromptHoldMusic) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSiteSettingForTypeOKAudioPromptHoldMusic) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroduction as json.
func (o OptGetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroduction) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroduction from json.
func (o *OptGetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroduction) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroduction to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroduction) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroduction) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroductionBusinessHours as json.
func (o OptGetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroductionBusinessHours) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroductionBusinessHours from json.
func (o *OptGetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroductionBusinessHours) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroductionBusinessHours to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroductionBusinessHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroductionBusinessHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroductionClosedHours as json.
func (o OptGetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroductionClosedHours) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroductionClosedHours from json.
func (o *OptGetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroductionClosedHours) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroductionClosedHours to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroductionClosedHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroductionClosedHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroductionHolidayHours as json.
func (o OptGetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroductionHolidayHours) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroductionHolidayHours from json.
func (o *OptGetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroductionHolidayHours) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroductionHolidayHours to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroductionHolidayHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSiteSettingForTypeOKAudioPromptLeaveVoicemailIntroductionHolidayHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSiteSettingForTypeOKAudioPromptMessageGreeting as json.
func (o OptGetSiteSettingForTypeOKAudioPromptMessageGreeting) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSiteSettingForTypeOKAudioPromptMessageGreeting from json.
func (o *OptGetSiteSettingForTypeOKAudioPromptMessageGreeting) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSiteSettingForTypeOKAudioPromptMessageGreeting to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSiteSettingForTypeOKAudioPromptMessageGreeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSiteSettingForTypeOKAudioPromptMessageGreeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSiteSettingForTypeOKAudioPromptMessageGreetingBusinessHours as json.
func (o OptGetSiteSettingForTypeOKAudioPromptMessageGreetingBusinessHours) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSiteSettingForTypeOKAudioPromptMessageGreetingBusinessHours from json.
func (o *OptGetSiteSettingForTypeOKAudioPromptMessageGreetingBusinessHours) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSiteSettingForTypeOKAudioPromptMessageGreetingBusinessHours to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSiteSettingForTypeOKAudioPromptMessageGreetingBusinessHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSiteSettingForTypeOKAudioPromptMessageGreetingBusinessHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSiteSettingForTypeOKAudioPromptMessageGreetingClosedHours as json.
func (o OptGetSiteSettingForTypeOKAudioPromptMessageGreetingClosedHours) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSiteSettingForTypeOKAudioPromptMessageGreetingClosedHours from json.
func (o *OptGetSiteSettingForTypeOKAudioPromptMessageGreetingClosedHours) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSiteSettingForTypeOKAudioPromptMessageGreetingClosedHours to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSiteSettingForTypeOKAudioPromptMessageGreetingClosedHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSiteSettingForTypeOKAudioPromptMessageGreetingClosedHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSiteSettingForTypeOKAudioPromptMessageGreetingHolidayHours as json.
func (o OptGetSiteSettingForTypeOKAudioPromptMessageGreetingHolidayHours) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSiteSettingForTypeOKAudioPromptMessageGreetingHolidayHours from json.
func (o *OptGetSiteSettingForTypeOKAudioPromptMessageGreetingHolidayHours) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSiteSettingForTypeOKAudioPromptMessageGreetingHolidayHours to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSiteSettingForTypeOKAudioPromptMessageGreetingHolidayHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSiteSettingForTypeOKAudioPromptMessageGreetingHolidayHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSiteSettingForTypeOKBillingAccount as json.
func (o OptGetSiteSettingForTypeOKBillingAccount) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSiteSettingForTypeOKBillingAccount from json.
func (o *OptGetSiteSettingForTypeOKBillingAccount) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSiteSettingForTypeOKBillingAccount to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSiteSettingForTypeOKBillingAccount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSiteSettingForTypeOKBillingAccount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSiteSettingForTypeOKBusinessHours as json.
func (o OptGetSiteSettingForTypeOKBusinessHours) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSiteSettingForTypeOKBusinessHours from json.
func (o *OptGetSiteSettingForTypeOKBusinessHours) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSiteSettingForTypeOKBusinessHours to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSiteSettingForTypeOKBusinessHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSiteSettingForTypeOKBusinessHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSiteSettingForTypeOKBusinessHoursOverflow as json.
func (o OptGetSiteSettingForTypeOKBusinessHoursOverflow) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSiteSettingForTypeOKBusinessHoursOverflow from json.
func (o *OptGetSiteSettingForTypeOKBusinessHoursOverflow) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSiteSettingForTypeOKBusinessHoursOverflow to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSiteSettingForTypeOKBusinessHoursOverflow) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSiteSettingForTypeOKBusinessHoursOverflow) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSiteSettingForTypeOKBusinessHoursOverflowOperator as json.
func (o OptGetSiteSettingForTypeOKBusinessHoursOverflowOperator) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSiteSettingForTypeOKBusinessHoursOverflowOperator from json.
func (o *OptGetSiteSettingForTypeOKBusinessHoursOverflowOperator) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSiteSettingForTypeOKBusinessHoursOverflowOperator to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSiteSettingForTypeOKBusinessHoursOverflowOperator) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSiteSettingForTypeOKBusinessHoursOverflowOperator) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSiteSettingForTypeOKClosedHours as json.
func (o OptGetSiteSettingForTypeOKClosedHours) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSiteSettingForTypeOKClosedHours from json.
func (o *OptGetSiteSettingForTypeOKClosedHours) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSiteSettingForTypeOKClosedHours to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSiteSettingForTypeOKClosedHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSiteSettingForTypeOKClosedHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSiteSettingForTypeOKClosedHoursOverflow as json.
func (o OptGetSiteSettingForTypeOKClosedHoursOverflow) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSiteSettingForTypeOKClosedHoursOverflow from json.
func (o *OptGetSiteSettingForTypeOKClosedHoursOverflow) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSiteSettingForTypeOKClosedHoursOverflow to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSiteSettingForTypeOKClosedHoursOverflow) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSiteSettingForTypeOKClosedHoursOverflow) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSiteSettingForTypeOKClosedHoursOverflowOperator as json.
func (o OptGetSiteSettingForTypeOKClosedHoursOverflowOperator) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSiteSettingForTypeOKClosedHoursOverflowOperator from json.
func (o *OptGetSiteSettingForTypeOKClosedHoursOverflowOperator) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSiteSettingForTypeOKClosedHoursOverflowOperator to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSiteSettingForTypeOKClosedHoursOverflowOperator) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSiteSettingForTypeOKClosedHoursOverflowOperator) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSiteSettingForTypeOKDialByName as json.
func (o OptGetSiteSettingForTypeOKDialByName) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSiteSettingForTypeOKDialByName from json.
func (o *OptGetSiteSettingForTypeOKDialByName) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSiteSettingForTypeOKDialByName to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSiteSettingForTypeOKDialByName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSiteSettingForTypeOKDialByName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSiteSettingForTypeOKHolidayHours as json.
func (o OptGetSiteSettingForTypeOKHolidayHours) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSiteSettingForTypeOKHolidayHours from json.
func (o *OptGetSiteSettingForTypeOKHolidayHours) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSiteSettingForTypeOKHolidayHours to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSiteSettingForTypeOKHolidayHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSiteSettingForTypeOKHolidayHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSiteSettingForTypeOKHolidayHoursOverflow as json.
func (o OptGetSiteSettingForTypeOKHolidayHoursOverflow) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSiteSettingForTypeOKHolidayHoursOverflow from json.
func (o *OptGetSiteSettingForTypeOKHolidayHoursOverflow) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSiteSettingForTypeOKHolidayHoursOverflow to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSiteSettingForTypeOKHolidayHoursOverflow) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSiteSettingForTypeOKHolidayHoursOverflow) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSiteSettingForTypeOKHolidayHoursOverflowOperator as json.
func (o OptGetSiteSettingForTypeOKHolidayHoursOverflowOperator) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSiteSettingForTypeOKHolidayHoursOverflowOperator from json.
func (o *OptGetSiteSettingForTypeOKHolidayHoursOverflowOperator) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSiteSettingForTypeOKHolidayHoursOverflowOperator to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSiteSettingForTypeOKHolidayHoursOverflowOperator) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSiteSettingForTypeOKHolidayHoursOverflowOperator) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSiteSettingForTypeOKLocationBasedRouting as json.
func (o OptGetSiteSettingForTypeOKLocationBasedRouting) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSiteSettingForTypeOKLocationBasedRouting from json.
func (o *OptGetSiteSettingForTypeOKLocationBasedRouting) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSiteSettingForTypeOKLocationBasedRouting to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSiteSettingForTypeOKLocationBasedRouting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSiteSettingForTypeOKLocationBasedRouting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSiteSettingForTypeOKOutboundCallerID as json.
func (o OptGetSiteSettingForTypeOKOutboundCallerID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSiteSettingForTypeOKOutboundCallerID from json.
func (o *OptGetSiteSettingForTypeOKOutboundCallerID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSiteSettingForTypeOKOutboundCallerID to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSiteSettingForTypeOKOutboundCallerID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSiteSettingForTypeOKOutboundCallerID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSiteSettingForTypeOKSecurity as json.
func (o OptGetSiteSettingForTypeOKSecurity) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSiteSettingForTypeOKSecurity from json.
func (o *OptGetSiteSettingForTypeOKSecurity) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSiteSettingForTypeOKSecurity to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSiteSettingForTypeOKSecurity) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSiteSettingForTypeOKSecurity) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSmsSessionsOKSMSSessionsItemLatestMessage as json.
func (o OptGetSmsSessionsOKSMSSessionsItemLatestMessage) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSmsSessionsOKSMSSessionsItemLatestMessage from json.
func (o *OptGetSmsSessionsOKSMSSessionsItemLatestMessage) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSmsSessionsOKSMSSessionsItemLatestMessage to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSmsSessionsOKSMSSessionsItemLatestMessage) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSmsSessionsOKSMSSessionsItemLatestMessage) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSmsSessionsOKSMSSessionsItemLatestMessageSender as json.
func (o OptGetSmsSessionsOKSMSSessionsItemLatestMessageSender) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSmsSessionsOKSMSSessionsItemLatestMessageSender from json.
func (o *OptGetSmsSessionsOKSMSSessionsItemLatestMessageSender) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSmsSessionsOKSMSSessionsItemLatestMessageSender to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSmsSessionsOKSMSSessionsItemLatestMessageSender) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSmsSessionsOKSMSSessionsItemLatestMessageSender) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSmsSessionsOKSMSSessionsItemLatestMessageSenderOwner as json.
func (o OptGetSmsSessionsOKSMSSessionsItemLatestMessageSenderOwner) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSmsSessionsOKSMSSessionsItemLatestMessageSenderOwner from json.
func (o *OptGetSmsSessionsOKSMSSessionsItemLatestMessageSenderOwner) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSmsSessionsOKSMSSessionsItemLatestMessageSenderOwner to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSmsSessionsOKSMSSessionsItemLatestMessageSenderOwner) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSmsSessionsOKSMSSessionsItemLatestMessageSenderOwner) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSmsSessionsOKSMSSessionsItemLatestMessageToMembersItemOwner as json.
func (o OptGetSmsSessionsOKSMSSessionsItemLatestMessageToMembersItemOwner) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSmsSessionsOKSMSSessionsItemLatestMessageToMembersItemOwner from json.
func (o *OptGetSmsSessionsOKSMSSessionsItemLatestMessageToMembersItemOwner) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSmsSessionsOKSMSSessionsItemLatestMessageToMembersItemOwner to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSmsSessionsOKSMSSessionsItemLatestMessageToMembersItemOwner) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSmsSessionsOKSMSSessionsItemLatestMessageToMembersItemOwner) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetSmsSessionsOKSMSSessionsItemParticipantsItemOwner as json.
func (o OptGetSmsSessionsOKSMSSessionsItemParticipantsItemOwner) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetSmsSessionsOKSMSSessionsItemParticipantsItemOwner from json.
func (o *OptGetSmsSessionsOKSMSSessionsItemParticipantsItemOwner) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetSmsSessionsOKSMSSessionsItemParticipantsItemOwner to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetSmsSessionsOKSMSSessionsItemParticipantsItemOwner) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetSmsSessionsOKSMSSessionsItemParticipantsItemOwner) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetVoicemailDetailsByCallIdOrCallLogIdOKTranscription as json.
func (o OptGetVoicemailDetailsByCallIdOrCallLogIdOKTranscription) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetVoicemailDetailsByCallIdOrCallLogIdOKTranscription from json.
func (o *OptGetVoicemailDetailsByCallIdOrCallLogIdOKTranscription) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetVoicemailDetailsByCallIdOrCallLogIdOKTranscription to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetVoicemailDetailsByCallIdOrCallLogIdOKTranscription) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetVoicemailDetailsByCallIdOrCallLogIdOKTranscription) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetVoicemailDetailsOKTranscription as json.
func (o OptGetVoicemailDetailsOKTranscription) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetVoicemailDetailsOKTranscription from json.
func (o *OptGetVoicemailDetailsOKTranscription) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetVoicemailDetailsOKTranscription to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetVoicemailDetailsOKTranscription) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetVoicemailDetailsOKTranscription) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetZoomRoomOKEmergencyAddress as json.
func (o OptGetZoomRoomOKEmergencyAddress) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetZoomRoomOKEmergencyAddress from json.
func (o *OptGetZoomRoomOKEmergencyAddress) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetZoomRoomOKEmergencyAddress to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetZoomRoomOKEmergencyAddress) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetZoomRoomOKEmergencyAddress) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetZoomRoomOKPolicy as json.
func (o OptGetZoomRoomOKPolicy) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetZoomRoomOKPolicy from json.
func (o *OptGetZoomRoomOKPolicy) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetZoomRoomOKPolicy to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetZoomRoomOKPolicy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetZoomRoomOKPolicy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetZoomRoomOKPolicyInternationalCalling as json.
func (o OptGetZoomRoomOKPolicyInternationalCalling) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetZoomRoomOKPolicyInternationalCalling from json.
func (o *OptGetZoomRoomOKPolicyInternationalCalling) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetZoomRoomOKPolicyInternationalCalling to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetZoomRoomOKPolicyInternationalCalling) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetZoomRoomOKPolicyInternationalCalling) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetZoomRoomOKPolicySelectOutboundCallerID as json.
func (o OptGetZoomRoomOKPolicySelectOutboundCallerID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetZoomRoomOKPolicySelectOutboundCallerID from json.
func (o *OptGetZoomRoomOKPolicySelectOutboundCallerID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetZoomRoomOKPolicySelectOutboundCallerID to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetZoomRoomOKPolicySelectOutboundCallerID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetZoomRoomOKPolicySelectOutboundCallerID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetZoomRoomOKSite as json.
func (o OptGetZoomRoomOKSite) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetZoomRoomOKSite from json.
func (o *OptGetZoomRoomOKSite) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetZoomRoomOKSite to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetZoomRoomOKSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetZoomRoomOKSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int as json.
func (o OptInt) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes int from json.
func (o *OptInt) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptInt to nil")
	}
	o.Set = true
	v, err := d.Int()
	if err != nil {
		return err
	}
	o.Value = int(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptInt) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptInt) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int64 as json.
func (o OptInt64) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int64(int64(o.Value))
}

// Decode decodes int64 from json.
func (o *OptInt64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptInt64 to nil")
	}
	o.Set = true
	v, err := d.Int64()
	if err != nil {
		return err
	}
	o.Value = int64(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptInt64) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptInt64) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListAccountPhoneNumbersOKPhoneNumbersItemAssignee as json.
func (o OptListAccountPhoneNumbersOKPhoneNumbersItemAssignee) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListAccountPhoneNumbersOKPhoneNumbersItemAssignee from json.
func (o *OptListAccountPhoneNumbersOKPhoneNumbersItemAssignee) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListAccountPhoneNumbersOKPhoneNumbersItemAssignee to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListAccountPhoneNumbersOKPhoneNumbersItemAssignee) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListAccountPhoneNumbersOKPhoneNumbersItemAssignee) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListAccountPhoneNumbersOKPhoneNumbersItemCarrier as json.
func (o OptListAccountPhoneNumbersOKPhoneNumbersItemCarrier) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListAccountPhoneNumbersOKPhoneNumbersItemCarrier from json.
func (o *OptListAccountPhoneNumbersOKPhoneNumbersItemCarrier) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListAccountPhoneNumbersOKPhoneNumbersItemCarrier to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListAccountPhoneNumbersOKPhoneNumbersItemCarrier) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListAccountPhoneNumbersOKPhoneNumbersItemCarrier) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListAccountPhoneNumbersOKPhoneNumbersItemEmergencyAddress as json.
func (o OptListAccountPhoneNumbersOKPhoneNumbersItemEmergencyAddress) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListAccountPhoneNumbersOKPhoneNumbersItemEmergencyAddress from json.
func (o *OptListAccountPhoneNumbersOKPhoneNumbersItemEmergencyAddress) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListAccountPhoneNumbersOKPhoneNumbersItemEmergencyAddress to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListAccountPhoneNumbersOKPhoneNumbersItemEmergencyAddress) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListAccountPhoneNumbersOKPhoneNumbersItemEmergencyAddress) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListAccountPhoneNumbersOKPhoneNumbersItemSipGroup as json.
func (o OptListAccountPhoneNumbersOKPhoneNumbersItemSipGroup) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListAccountPhoneNumbersOKPhoneNumbersItemSipGroup from json.
func (o *OptListAccountPhoneNumbersOKPhoneNumbersItemSipGroup) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListAccountPhoneNumbersOKPhoneNumbersItemSipGroup to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListAccountPhoneNumbersOKPhoneNumbersItemSipGroup) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListAccountPhoneNumbersOKPhoneNumbersItemSipGroup) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListAccountPhoneNumbersOKPhoneNumbersItemSite as json.
func (o OptListAccountPhoneNumbersOKPhoneNumbersItemSite) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListAccountPhoneNumbersOKPhoneNumbersItemSite from json.
func (o *OptListAccountPhoneNumbersOKPhoneNumbersItemSite) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListAccountPhoneNumbersOKPhoneNumbersItemSite to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListAccountPhoneNumbersOKPhoneNumbersItemSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListAccountPhoneNumbersOKPhoneNumbersItemSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListAccountSMSCampaignsOKSMSCampaignsItemBrand as json.
func (o OptListAccountSMSCampaignsOKSMSCampaignsItemBrand) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListAccountSMSCampaignsOKSMSCampaignsItemBrand from json.
func (o *OptListAccountSMSCampaignsOKSMSCampaignsItemBrand) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListAccountSMSCampaignsOKSMSCampaignsItemBrand to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListAccountSMSCampaignsOKSMSCampaignsItemBrand) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListAccountSMSCampaignsOKSMSCampaignsItemBrand) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListActivationCodesOKCommonAreasActivationCodesItemSite as json.
func (o OptListActivationCodesOKCommonAreasActivationCodesItemSite) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListActivationCodesOKCommonAreasActivationCodesItemSite from json.
func (o *OptListActivationCodesOKCommonAreasActivationCodesItemSite) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListActivationCodesOKCommonAreasActivationCodesItemSite to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListActivationCodesOKCommonAreasActivationCodesItemSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListActivationCodesOKCommonAreasActivationCodesItemSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListAutoReceptionistsOKAutoReceptionistsItemSite as json.
func (o OptListAutoReceptionistsOKAutoReceptionistsItemSite) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListAutoReceptionistsOKAutoReceptionistsItemSite from json.
func (o *OptListAutoReceptionistsOKAutoReceptionistsItemSite) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListAutoReceptionistsOKAutoReceptionistsItemSite to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListAutoReceptionistsOKAutoReceptionistsItemSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListAutoReceptionistsOKAutoReceptionistsItemSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListCallLogsMetricsOKCallLogsItemCallee as json.
func (o OptListCallLogsMetricsOKCallLogsItemCallee) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListCallLogsMetricsOKCallLogsItemCallee from json.
func (o *OptListCallLogsMetricsOKCallLogsItemCallee) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListCallLogsMetricsOKCallLogsItemCallee to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListCallLogsMetricsOKCallLogsItemCallee) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListCallLogsMetricsOKCallLogsItemCallee) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListCallLogsMetricsOKCallLogsItemCaller as json.
func (o OptListCallLogsMetricsOKCallLogsItemCaller) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListCallLogsMetricsOKCallLogsItemCaller from json.
func (o *OptListCallLogsMetricsOKCallLogsItemCaller) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListCallLogsMetricsOKCallLogsItemCaller to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListCallLogsMetricsOKCallLogsItemCaller) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListCallLogsMetricsOKCallLogsItemCaller) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListCallQueuesOKCallQueuesItemSite as json.
func (o OptListCallQueuesOKCallQueuesItemSite) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListCallQueuesOKCallQueuesItemSite from json.
func (o *OptListCallQueuesOKCallQueuesItemSite) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListCallQueuesOKCallQueuesItemSite to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListCallQueuesOKCallQueuesItemSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListCallQueuesOKCallQueuesItemSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListCommonAreasOKCommonAreasItemSite as json.
func (o OptListCommonAreasOKCommonAreasItemSite) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListCommonAreasOKCommonAreasItemSite from json.
func (o *OptListCommonAreasOKCommonAreasItemSite) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListCommonAreasOKCommonAreasItemSite to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListCommonAreasOKCommonAreasItemSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListCommonAreasOKCommonAreasItemSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListCustomizeOutboundCallerNumbersOKCustomizeNumbersItemSite as json.
func (o OptListCustomizeOutboundCallerNumbersOKCustomizeNumbersItemSite) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListCustomizeOutboundCallerNumbersOKCustomizeNumbersItemSite from json.
func (o *OptListCustomizeOutboundCallerNumbersOKCustomizeNumbersItemSite) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListCustomizeOutboundCallerNumbersOKCustomizeNumbersItemSite to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListCustomizeOutboundCallerNumbersOKCustomizeNumbersItemSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListCustomizeOutboundCallerNumbersOKCustomizeNumbersItemSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListEmergencyAddressesOKEmergencyAddressesItemOwner as json.
func (o OptListEmergencyAddressesOKEmergencyAddressesItemOwner) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListEmergencyAddressesOKEmergencyAddressesItemOwner from json.
func (o *OptListEmergencyAddressesOKEmergencyAddressesItemOwner) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListEmergencyAddressesOKEmergencyAddressesItemOwner to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListEmergencyAddressesOKEmergencyAddressesItemOwner) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListEmergencyAddressesOKEmergencyAddressesItemOwner) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListEmergencyAddressesOKEmergencyAddressesItemSite as json.
func (o OptListEmergencyAddressesOKEmergencyAddressesItemSite) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListEmergencyAddressesOKEmergencyAddressesItemSite from json.
func (o *OptListEmergencyAddressesOKEmergencyAddressesItemSite) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListEmergencyAddressesOKEmergencyAddressesItemSite to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListEmergencyAddressesOKEmergencyAddressesItemSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListEmergencyAddressesOKEmergencyAddressesItemSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListGCPOKGroupCallPickupItemSite as json.
func (o OptListGCPOKGroupCallPickupItemSite) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListGCPOKGroupCallPickupItemSite from json.
func (o *OptListGCPOKGroupCallPickupItemSite) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListGCPOKGroupCallPickupItemSite to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListGCPOKGroupCallPickupItemSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListGCPOKGroupCallPickupItemSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListLineKeySettingOKLineKeysItemKeyAssignment as json.
func (o OptListLineKeySettingOKLineKeysItemKeyAssignment) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListLineKeySettingOKLineKeysItemKeyAssignment from json.
func (o *OptListLineKeySettingOKLineKeysItemKeyAssignment) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListLineKeySettingOKLineKeysItemKeyAssignment to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListLineKeySettingOKLineKeysItemKeyAssignment) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListLineKeySettingOKLineKeysItemKeyAssignment) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListLocationsOKLocationsItemElin as json.
func (o OptListLocationsOKLocationsItemElin) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListLocationsOKLocationsItemElin from json.
func (o *OptListLocationsOKLocationsItemElin) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListLocationsOKLocationsItemElin to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListLocationsOKLocationsItemElin) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListLocationsOKLocationsItemElin) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListLocationsOKLocationsItemEmergencyAddress as json.
func (o OptListLocationsOKLocationsItemEmergencyAddress) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListLocationsOKLocationsItemEmergencyAddress from json.
func (o *OptListLocationsOKLocationsItemEmergencyAddress) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListLocationsOKLocationsItemEmergencyAddress to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListLocationsOKLocationsItemEmergencyAddress) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListLocationsOKLocationsItemEmergencyAddress) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListLocationsOKLocationsItemSipGroup as json.
func (o OptListLocationsOKLocationsItemSipGroup) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListLocationsOKLocationsItemSipGroup from json.
func (o *OptListLocationsOKLocationsItemSipGroup) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListLocationsOKLocationsItemSipGroup to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListLocationsOKLocationsItemSipGroup) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListLocationsOKLocationsItemSipGroup) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListLocationsOKLocationsItemSite as json.
func (o OptListLocationsOKLocationsItemSite) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListLocationsOKLocationsItemSite from json.
func (o *OptListLocationsOKLocationsItemSite) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListLocationsOKLocationsItemSite to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListLocationsOKLocationsItemSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListLocationsOKLocationsItemSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListMonitoringGroupOKMonitoringGroupsItemSite as json.
func (o OptListMonitoringGroupOKMonitoringGroupsItemSite) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListMonitoringGroupOKMonitoringGroupsItemSite from json.
func (o *OptListMonitoringGroupOKMonitoringGroupsItemSite) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListMonitoringGroupOKMonitoringGroupsItemSite to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListMonitoringGroupOKMonitoringGroupsItemSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListMonitoringGroupOKMonitoringGroupsItemSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListPastCallMetricsOKCallLogsItemCallee as json.
func (o OptListPastCallMetricsOKCallLogsItemCallee) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListPastCallMetricsOKCallLogsItemCallee from json.
func (o *OptListPastCallMetricsOKCallLogsItemCallee) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListPastCallMetricsOKCallLogsItemCallee to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListPastCallMetricsOKCallLogsItemCallee) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListPastCallMetricsOKCallLogsItemCallee) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListPastCallMetricsOKCallLogsItemCaller as json.
func (o OptListPastCallMetricsOKCallLogsItemCaller) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListPastCallMetricsOKCallLogsItemCaller from json.
func (o *OptListPastCallMetricsOKCallLogsItemCaller) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListPastCallMetricsOKCallLogsItemCaller to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListPastCallMetricsOKCallLogsItemCaller) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListPastCallMetricsOKCallLogsItemCaller) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListPhoneDevicesOKDevicesItemAssignee as json.
func (o OptListPhoneDevicesOKDevicesItemAssignee) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListPhoneDevicesOKDevicesItemAssignee from json.
func (o *OptListPhoneDevicesOKDevicesItemAssignee) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListPhoneDevicesOKDevicesItemAssignee to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListPhoneDevicesOKDevicesItemAssignee) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListPhoneDevicesOKDevicesItemAssignee) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListPhoneDevicesOKDevicesItemSite as json.
func (o OptListPhoneDevicesOKDevicesItemSite) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListPhoneDevicesOKDevicesItemSite from json.
func (o *OptListPhoneDevicesOKDevicesItemSite) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListPhoneDevicesOKDevicesItemSite to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListPhoneDevicesOKDevicesItemSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListPhoneDevicesOKDevicesItemSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListPhoneSitesOKSitesItemCountry as json.
func (o OptListPhoneSitesOKSitesItemCountry) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListPhoneSitesOKSitesItemCountry from json.
func (o *OptListPhoneSitesOKSitesItemCountry) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListPhoneSitesOKSitesItemCountry to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListPhoneSitesOKSitesItemCountry) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListPhoneSitesOKSitesItemCountry) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListPhoneSitesOKSitesItemMainAutoReceptionist as json.
func (o OptListPhoneSitesOKSitesItemMainAutoReceptionist) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListPhoneSitesOKSitesItemMainAutoReceptionist from json.
func (o *OptListPhoneSitesOKSitesItemMainAutoReceptionist) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListPhoneSitesOKSitesItemMainAutoReceptionist to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListPhoneSitesOKSitesItemMainAutoReceptionist) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListPhoneSitesOKSitesItemMainAutoReceptionist) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListPhoneUsersOKUsersItemSite as json.
func (o OptListPhoneUsersOKUsersItemSite) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListPhoneUsersOKUsersItemSite from json.
func (o *OptListPhoneUsersOKUsersItemSite) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListPhoneUsersOKUsersItemSite to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListPhoneUsersOKUsersItemSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListPhoneUsersOKUsersItemSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListRoleMembersOKMembersItemSite as json.
func (o OptListRoleMembersOKMembersItemSite) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListRoleMembersOKMembersItemSite from json.
func (o *OptListRoleMembersOKMembersItemSite) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListRoleMembersOKMembersItemSite to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListRoleMembersOKMembersItemSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListRoleMembersOKMembersItemSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListRoutingRuleOKItemRoutingPath as json.
func (o OptListRoutingRuleOKItemRoutingPath) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListRoutingRuleOKItemRoutingPath from json.
func (o *OptListRoutingRuleOKItemRoutingPath) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListRoutingRuleOKItemRoutingPath to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListRoutingRuleOKItemRoutingPath) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListRoutingRuleOKItemRoutingPath) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListRoutingRuleOKItemRoutingPathSipGroup as json.
func (o OptListRoutingRuleOKItemRoutingPathSipGroup) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListRoutingRuleOKItemRoutingPathSipGroup from json.
func (o *OptListRoutingRuleOKItemRoutingPathSipGroup) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListRoutingRuleOKItemRoutingPathSipGroup to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListRoutingRuleOKItemRoutingPathSipGroup) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListRoutingRuleOKItemRoutingPathSipGroup) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListSharedLineAppearancesOKSharedLineAppearancesItemExecutive as json.
func (o OptListSharedLineAppearancesOKSharedLineAppearancesItemExecutive) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListSharedLineAppearancesOKSharedLineAppearancesItemExecutive from json.
func (o *OptListSharedLineAppearancesOKSharedLineAppearancesItemExecutive) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListSharedLineAppearancesOKSharedLineAppearancesItemExecutive to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListSharedLineAppearancesOKSharedLineAppearancesItemExecutive) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListSharedLineAppearancesOKSharedLineAppearancesItemExecutive) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListSharedLineGroupsOKSharedLineGroupsItemSite as json.
func (o OptListSharedLineGroupsOKSharedLineGroupsItemSite) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListSharedLineGroupsOKSharedLineGroupsItemSite from json.
func (o *OptListSharedLineGroupsOKSharedLineGroupsItemSite) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListSharedLineGroupsOKSharedLineGroupsItemSite to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListSharedLineGroupsOKSharedLineGroupsItemSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListSharedLineGroupsOKSharedLineGroupsItemSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListSipGroupsOKSipGroupsItemSipTrunk as json.
func (o OptListSipGroupsOKSipGroupsItemSipTrunk) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListSipGroupsOKSipGroupsItemSipTrunk from json.
func (o *OptListSipGroupsOKSipGroupsItemSipTrunk) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListSipGroupsOKSipGroupsItemSipTrunk to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListSipGroupsOKSipGroupsItemSipTrunk) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListSipGroupsOKSipGroupsItemSipTrunk) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListSiteCustomizeOutboundCallerNumbersOKCustomizeNumbersItemSite as json.
func (o OptListSiteCustomizeOutboundCallerNumbersOKCustomizeNumbersItemSite) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListSiteCustomizeOutboundCallerNumbersOKCustomizeNumbersItemSite from json.
func (o *OptListSiteCustomizeOutboundCallerNumbersOKCustomizeNumbersItemSite) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListSiteCustomizeOutboundCallerNumbersOKCustomizeNumbersItemSite to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListSiteCustomizeOutboundCallerNumbersOKCustomizeNumbersItemSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListSiteCustomizeOutboundCallerNumbersOKCustomizeNumbersItemSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListTrackedLocationsOKLocationTrackingItemDevice as json.
func (o OptListTrackedLocationsOKLocationTrackingItemDevice) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListTrackedLocationsOKLocationTrackingItemDevice from json.
func (o *OptListTrackedLocationsOKLocationTrackingItemDevice) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListTrackedLocationsOKLocationTrackingItemDevice to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListTrackedLocationsOKLocationTrackingItemDevice) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListTrackedLocationsOKLocationTrackingItemDevice) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListTrackedLocationsOKLocationTrackingItemNetworkSwitch as json.
func (o OptListTrackedLocationsOKLocationTrackingItemNetworkSwitch) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListTrackedLocationsOKLocationTrackingItemNetworkSwitch from json.
func (o *OptListTrackedLocationsOKLocationTrackingItemNetworkSwitch) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListTrackedLocationsOKLocationTrackingItemNetworkSwitch to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListTrackedLocationsOKLocationTrackingItemNetworkSwitch) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListTrackedLocationsOKLocationTrackingItemNetworkSwitch) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListTrackedLocationsOKLocationTrackingItemSite as json.
func (o OptListTrackedLocationsOKLocationTrackingItemSite) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListTrackedLocationsOKLocationTrackingItemSite from json.
func (o *OptListTrackedLocationsOKLocationTrackingItemSite) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListTrackedLocationsOKLocationTrackingItemSite to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListTrackedLocationsOKLocationTrackingItemSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListTrackedLocationsOKLocationTrackingItemSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListUserCustomizeOutboundCallerNumbersOKCustomizeNumbersItemSite as json.
func (o OptListUserCustomizeOutboundCallerNumbersOKCustomizeNumbersItemSite) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListUserCustomizeOutboundCallerNumbersOKCustomizeNumbersItemSite from json.
func (o *OptListUserCustomizeOutboundCallerNumbersOKCustomizeNumbersItemSite) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListUserCustomizeOutboundCallerNumbersOKCustomizeNumbersItemSite to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListUserCustomizeOutboundCallerNumbersOKCustomizeNumbersItemSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListUserCustomizeOutboundCallerNumbersOKCustomizeNumbersItemSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListUsersFromDirectoryBySiteOKResultItemSite as json.
func (o OptListUsersFromDirectoryBySiteOKResultItemSite) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListUsersFromDirectoryBySiteOKResultItemSite from json.
func (o *OptListUsersFromDirectoryBySiteOKResultItemSite) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListUsersFromDirectoryBySiteOKResultItemSite to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListUsersFromDirectoryBySiteOKResultItemSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListUsersFromDirectoryBySiteOKResultItemSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListUsersFromDirectoryOKResultItemSite as json.
func (o OptListUsersFromDirectoryOKResultItemSite) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListUsersFromDirectoryOKResultItemSite from json.
func (o *OptListUsersFromDirectoryOKResultItemSite) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListUsersFromDirectoryOKResultItemSite to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListUsersFromDirectoryOKResultItemSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListUsersFromDirectoryOKResultItemSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListZoomPhoneAccountSettingsOKAdHocCallRecording as json.
func (o OptListZoomPhoneAccountSettingsOKAdHocCallRecording) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListZoomPhoneAccountSettingsOKAdHocCallRecording from json.
func (o *OptListZoomPhoneAccountSettingsOKAdHocCallRecording) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListZoomPhoneAccountSettingsOKAdHocCallRecording to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListZoomPhoneAccountSettingsOKAdHocCallRecording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListZoomPhoneAccountSettingsOKAdHocCallRecording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListZoomPhoneAccountSettingsOKAdvancedEncryption as json.
func (o OptListZoomPhoneAccountSettingsOKAdvancedEncryption) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListZoomPhoneAccountSettingsOKAdvancedEncryption from json.
func (o *OptListZoomPhoneAccountSettingsOKAdvancedEncryption) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListZoomPhoneAccountSettingsOKAdvancedEncryption to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListZoomPhoneAccountSettingsOKAdvancedEncryption) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListZoomPhoneAccountSettingsOKAdvancedEncryption) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListZoomPhoneAccountSettingsOKAllowedCallLocations as json.
func (o OptListZoomPhoneAccountSettingsOKAllowedCallLocations) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListZoomPhoneAccountSettingsOKAllowedCallLocations from json.
func (o *OptListZoomPhoneAccountSettingsOKAllowedCallLocations) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListZoomPhoneAccountSettingsOKAllowedCallLocations to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListZoomPhoneAccountSettingsOKAllowedCallLocations) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListZoomPhoneAccountSettingsOKAllowedCallLocations) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListZoomPhoneAccountSettingsOKAudioIntercom as json.
func (o OptListZoomPhoneAccountSettingsOKAudioIntercom) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListZoomPhoneAccountSettingsOKAudioIntercom from json.
func (o *OptListZoomPhoneAccountSettingsOKAudioIntercom) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListZoomPhoneAccountSettingsOKAudioIntercom to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListZoomPhoneAccountSettingsOKAudioIntercom) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListZoomPhoneAccountSettingsOKAudioIntercom) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListZoomPhoneAccountSettingsOKAutoCallFromThirdPartyApps as json.
func (o OptListZoomPhoneAccountSettingsOKAutoCallFromThirdPartyApps) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListZoomPhoneAccountSettingsOKAutoCallFromThirdPartyApps from json.
func (o *OptListZoomPhoneAccountSettingsOKAutoCallFromThirdPartyApps) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListZoomPhoneAccountSettingsOKAutoCallFromThirdPartyApps to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListZoomPhoneAccountSettingsOKAutoCallFromThirdPartyApps) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListZoomPhoneAccountSettingsOKAutoCallFromThirdPartyApps) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListZoomPhoneAccountSettingsOKAutoCallRecording as json.
func (o OptListZoomPhoneAccountSettingsOKAutoCallRecording) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListZoomPhoneAccountSettingsOKAutoCallRecording from json.
func (o *OptListZoomPhoneAccountSettingsOKAutoCallRecording) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListZoomPhoneAccountSettingsOKAutoCallRecording to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListZoomPhoneAccountSettingsOKAutoCallRecording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListZoomPhoneAccountSettingsOKAutoCallRecording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListZoomPhoneAccountSettingsOKAutoCallRecordingPlayRecordingBeepTone as json.
func (o OptListZoomPhoneAccountSettingsOKAutoCallRecordingPlayRecordingBeepTone) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListZoomPhoneAccountSettingsOKAutoCallRecordingPlayRecordingBeepTone from json.
func (o *OptListZoomPhoneAccountSettingsOKAutoCallRecordingPlayRecordingBeepTone) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListZoomPhoneAccountSettingsOKAutoCallRecordingPlayRecordingBeepTone to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListZoomPhoneAccountSettingsOKAutoCallRecordingPlayRecordingBeepTone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListZoomPhoneAccountSettingsOKAutoCallRecordingPlayRecordingBeepTone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListZoomPhoneAccountSettingsOKAutoDeleteDataAfterRetentionDuration as json.
func (o OptListZoomPhoneAccountSettingsOKAutoDeleteDataAfterRetentionDuration) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListZoomPhoneAccountSettingsOKAutoDeleteDataAfterRetentionDuration from json.
func (o *OptListZoomPhoneAccountSettingsOKAutoDeleteDataAfterRetentionDuration) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListZoomPhoneAccountSettingsOKAutoDeleteDataAfterRetentionDuration to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListZoomPhoneAccountSettingsOKAutoDeleteDataAfterRetentionDuration) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListZoomPhoneAccountSettingsOKAutoDeleteDataAfterRetentionDuration) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListZoomPhoneAccountSettingsOKBlockCallsAsThreat as json.
func (o OptListZoomPhoneAccountSettingsOKBlockCallsAsThreat) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListZoomPhoneAccountSettingsOKBlockCallsAsThreat from json.
func (o *OptListZoomPhoneAccountSettingsOKBlockCallsAsThreat) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListZoomPhoneAccountSettingsOKBlockCallsAsThreat to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListZoomPhoneAccountSettingsOKBlockCallsAsThreat) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListZoomPhoneAccountSettingsOKBlockCallsAsThreat) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListZoomPhoneAccountSettingsOKBlockCallsWithoutCallerID as json.
func (o OptListZoomPhoneAccountSettingsOKBlockCallsWithoutCallerID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListZoomPhoneAccountSettingsOKBlockCallsWithoutCallerID from json.
func (o *OptListZoomPhoneAccountSettingsOKBlockCallsWithoutCallerID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListZoomPhoneAccountSettingsOKBlockCallsWithoutCallerID to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListZoomPhoneAccountSettingsOKBlockCallsWithoutCallerID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListZoomPhoneAccountSettingsOKBlockCallsWithoutCallerID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListZoomPhoneAccountSettingsOKBlockExternalCalls as json.
func (o OptListZoomPhoneAccountSettingsOKBlockExternalCalls) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListZoomPhoneAccountSettingsOKBlockExternalCalls from json.
func (o *OptListZoomPhoneAccountSettingsOKBlockExternalCalls) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListZoomPhoneAccountSettingsOKBlockExternalCalls to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListZoomPhoneAccountSettingsOKBlockExternalCalls) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListZoomPhoneAccountSettingsOKBlockExternalCalls) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListZoomPhoneAccountSettingsOKBlockListForInboundCallsAndMessaging as json.
func (o OptListZoomPhoneAccountSettingsOKBlockListForInboundCallsAndMessaging) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListZoomPhoneAccountSettingsOKBlockListForInboundCallsAndMessaging from json.
func (o *OptListZoomPhoneAccountSettingsOKBlockListForInboundCallsAndMessaging) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListZoomPhoneAccountSettingsOKBlockListForInboundCallsAndMessaging to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListZoomPhoneAccountSettingsOKBlockListForInboundCallsAndMessaging) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListZoomPhoneAccountSettingsOKBlockListForInboundCallsAndMessaging) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListZoomPhoneAccountSettingsOKCallHandlingForwardingToOtherUsers as json.
func (o OptListZoomPhoneAccountSettingsOKCallHandlingForwardingToOtherUsers) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListZoomPhoneAccountSettingsOKCallHandlingForwardingToOtherUsers from json.
func (o *OptListZoomPhoneAccountSettingsOKCallHandlingForwardingToOtherUsers) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListZoomPhoneAccountSettingsOKCallHandlingForwardingToOtherUsers to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListZoomPhoneAccountSettingsOKCallHandlingForwardingToOtherUsers) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListZoomPhoneAccountSettingsOKCallHandlingForwardingToOtherUsers) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListZoomPhoneAccountSettingsOKCallLiveTranscription as json.
func (o OptListZoomPhoneAccountSettingsOKCallLiveTranscription) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListZoomPhoneAccountSettingsOKCallLiveTranscription from json.
func (o *OptListZoomPhoneAccountSettingsOKCallLiveTranscription) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListZoomPhoneAccountSettingsOKCallLiveTranscription to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListZoomPhoneAccountSettingsOKCallLiveTranscription) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListZoomPhoneAccountSettingsOKCallLiveTranscription) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListZoomPhoneAccountSettingsOKCallLiveTranscriptionTranscriptionStartPrompt as json.
func (o OptListZoomPhoneAccountSettingsOKCallLiveTranscriptionTranscriptionStartPrompt) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListZoomPhoneAccountSettingsOKCallLiveTranscriptionTranscriptionStartPrompt from json.
func (o *OptListZoomPhoneAccountSettingsOKCallLiveTranscriptionTranscriptionStartPrompt) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListZoomPhoneAccountSettingsOKCallLiveTranscriptionTranscriptionStartPrompt to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListZoomPhoneAccountSettingsOKCallLiveTranscriptionTranscriptionStartPrompt) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListZoomPhoneAccountSettingsOKCallLiveTranscriptionTranscriptionStartPrompt) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListZoomPhoneAccountSettingsOKCallOverflow as json.
func (o OptListZoomPhoneAccountSettingsOKCallOverflow) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListZoomPhoneAccountSettingsOKCallOverflow from json.
func (o *OptListZoomPhoneAccountSettingsOKCallOverflow) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListZoomPhoneAccountSettingsOKCallOverflow to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListZoomPhoneAccountSettingsOKCallOverflow) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListZoomPhoneAccountSettingsOKCallOverflow) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListZoomPhoneAccountSettingsOKCallPark as json.
func (o OptListZoomPhoneAccountSettingsOKCallPark) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListZoomPhoneAccountSettingsOKCallPark from json.
func (o *OptListZoomPhoneAccountSettingsOKCallPark) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListZoomPhoneAccountSettingsOKCallPark to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListZoomPhoneAccountSettingsOKCallPark) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListZoomPhoneAccountSettingsOKCallPark) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListZoomPhoneAccountSettingsOKCallQueueOptOutReason as json.
func (o OptListZoomPhoneAccountSettingsOKCallQueueOptOutReason) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListZoomPhoneAccountSettingsOKCallQueueOptOutReason from json.
func (o *OptListZoomPhoneAccountSettingsOKCallQueueOptOutReason) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListZoomPhoneAccountSettingsOKCallQueueOptOutReason to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListZoomPhoneAccountSettingsOKCallQueueOptOutReason) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListZoomPhoneAccountSettingsOKCallQueueOptOutReason) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListZoomPhoneAccountSettingsOKCallTransferring as json.
func (o OptListZoomPhoneAccountSettingsOKCallTransferring) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListZoomPhoneAccountSettingsOKCallTransferring from json.
func (o *OptListZoomPhoneAccountSettingsOKCallTransferring) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListZoomPhoneAccountSettingsOKCallTransferring to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListZoomPhoneAccountSettingsOKCallTransferring) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListZoomPhoneAccountSettingsOKCallTransferring) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListZoomPhoneAccountSettingsOKCheckVoicemailsOverPhone as json.
func (o OptListZoomPhoneAccountSettingsOKCheckVoicemailsOverPhone) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListZoomPhoneAccountSettingsOKCheckVoicemailsOverPhone from json.
func (o *OptListZoomPhoneAccountSettingsOKCheckVoicemailsOverPhone) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListZoomPhoneAccountSettingsOKCheckVoicemailsOverPhone to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListZoomPhoneAccountSettingsOKCheckVoicemailsOverPhone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListZoomPhoneAccountSettingsOKCheckVoicemailsOverPhone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListZoomPhoneAccountSettingsOKDelegation as json.
func (o OptListZoomPhoneAccountSettingsOKDelegation) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListZoomPhoneAccountSettingsOKDelegation from json.
func (o *OptListZoomPhoneAccountSettingsOKDelegation) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListZoomPhoneAccountSettingsOKDelegation to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListZoomPhoneAccountSettingsOKDelegation) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListZoomPhoneAccountSettingsOKDelegation) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListZoomPhoneAccountSettingsOKDisplayCallFeedbackSurvey as json.
func (o OptListZoomPhoneAccountSettingsOKDisplayCallFeedbackSurvey) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListZoomPhoneAccountSettingsOKDisplayCallFeedbackSurvey from json.
func (o *OptListZoomPhoneAccountSettingsOKDisplayCallFeedbackSurvey) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListZoomPhoneAccountSettingsOKDisplayCallFeedbackSurvey to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListZoomPhoneAccountSettingsOKDisplayCallFeedbackSurvey) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListZoomPhoneAccountSettingsOKDisplayCallFeedbackSurvey) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListZoomPhoneAccountSettingsOKE2eEncryption as json.
func (o OptListZoomPhoneAccountSettingsOKE2eEncryption) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListZoomPhoneAccountSettingsOKE2eEncryption from json.
func (o *OptListZoomPhoneAccountSettingsOKE2eEncryption) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListZoomPhoneAccountSettingsOKE2eEncryption to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListZoomPhoneAccountSettingsOKE2eEncryption) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListZoomPhoneAccountSettingsOKE2eEncryption) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListZoomPhoneAccountSettingsOKElevateToMeeting as json.
func (o OptListZoomPhoneAccountSettingsOKElevateToMeeting) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListZoomPhoneAccountSettingsOKElevateToMeeting from json.
func (o *OptListZoomPhoneAccountSettingsOKElevateToMeeting) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListZoomPhoneAccountSettingsOKElevateToMeeting to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListZoomPhoneAccountSettingsOKElevateToMeeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListZoomPhoneAccountSettingsOKElevateToMeeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListZoomPhoneAccountSettingsOKExternalCallingOnZoomRoomCommonArea as json.
func (o OptListZoomPhoneAccountSettingsOKExternalCallingOnZoomRoomCommonArea) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListZoomPhoneAccountSettingsOKExternalCallingOnZoomRoomCommonArea from json.
func (o *OptListZoomPhoneAccountSettingsOKExternalCallingOnZoomRoomCommonArea) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListZoomPhoneAccountSettingsOKExternalCallingOnZoomRoomCommonArea to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListZoomPhoneAccountSettingsOKExternalCallingOnZoomRoomCommonArea) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListZoomPhoneAccountSettingsOKExternalCallingOnZoomRoomCommonArea) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListZoomPhoneAccountSettingsOKHandOffToRoom as json.
func (o OptListZoomPhoneAccountSettingsOKHandOffToRoom) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListZoomPhoneAccountSettingsOKHandOffToRoom from json.
func (o *OptListZoomPhoneAccountSettingsOKHandOffToRoom) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListZoomPhoneAccountSettingsOKHandOffToRoom to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListZoomPhoneAccountSettingsOKHandOffToRoom) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListZoomPhoneAccountSettingsOKHandOffToRoom) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListZoomPhoneAccountSettingsOKInternationalCalling as json.
func (o OptListZoomPhoneAccountSettingsOKInternationalCalling) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListZoomPhoneAccountSettingsOKInternationalCalling from json.
func (o *OptListZoomPhoneAccountSettingsOKInternationalCalling) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListZoomPhoneAccountSettingsOKInternationalCalling to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListZoomPhoneAccountSettingsOKInternationalCalling) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListZoomPhoneAccountSettingsOKInternationalCalling) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListZoomPhoneAccountSettingsOKLocalSurvivabilityMode as json.
func (o OptListZoomPhoneAccountSettingsOKLocalSurvivabilityMode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListZoomPhoneAccountSettingsOKLocalSurvivabilityMode from json.
func (o *OptListZoomPhoneAccountSettingsOKLocalSurvivabilityMode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListZoomPhoneAccountSettingsOKLocalSurvivabilityMode to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListZoomPhoneAccountSettingsOKLocalSurvivabilityMode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListZoomPhoneAccountSettingsOKLocalSurvivabilityMode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListZoomPhoneAccountSettingsOKMobileSwitchToCarrier as json.
func (o OptListZoomPhoneAccountSettingsOKMobileSwitchToCarrier) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListZoomPhoneAccountSettingsOKMobileSwitchToCarrier from json.
func (o *OptListZoomPhoneAccountSettingsOKMobileSwitchToCarrier) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListZoomPhoneAccountSettingsOKMobileSwitchToCarrier to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListZoomPhoneAccountSettingsOKMobileSwitchToCarrier) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListZoomPhoneAccountSettingsOKMobileSwitchToCarrier) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListZoomPhoneAccountSettingsOKOutboundCalling as json.
func (o OptListZoomPhoneAccountSettingsOKOutboundCalling) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListZoomPhoneAccountSettingsOKOutboundCalling from json.
func (o *OptListZoomPhoneAccountSettingsOKOutboundCalling) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListZoomPhoneAccountSettingsOKOutboundCalling to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListZoomPhoneAccountSettingsOKOutboundCalling) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListZoomPhoneAccountSettingsOKOutboundCalling) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListZoomPhoneAccountSettingsOKOutboundSMS as json.
func (o OptListZoomPhoneAccountSettingsOKOutboundSMS) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListZoomPhoneAccountSettingsOKOutboundSMS from json.
func (o *OptListZoomPhoneAccountSettingsOKOutboundSMS) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListZoomPhoneAccountSettingsOKOutboundSMS to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListZoomPhoneAccountSettingsOKOutboundSMS) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListZoomPhoneAccountSettingsOKOutboundSMS) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListZoomPhoneAccountSettingsOKOverrideDefaultPort as json.
func (o OptListZoomPhoneAccountSettingsOKOverrideDefaultPort) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListZoomPhoneAccountSettingsOKOverrideDefaultPort from json.
func (o *OptListZoomPhoneAccountSettingsOKOverrideDefaultPort) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListZoomPhoneAccountSettingsOKOverrideDefaultPort to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListZoomPhoneAccountSettingsOKOverrideDefaultPort) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListZoomPhoneAccountSettingsOKOverrideDefaultPort) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListZoomPhoneAccountSettingsOKPeerToPeerMedia as json.
func (o OptListZoomPhoneAccountSettingsOKPeerToPeerMedia) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListZoomPhoneAccountSettingsOKPeerToPeerMedia from json.
func (o *OptListZoomPhoneAccountSettingsOKPeerToPeerMedia) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListZoomPhoneAccountSettingsOKPeerToPeerMedia to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListZoomPhoneAccountSettingsOKPeerToPeerMedia) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListZoomPhoneAccountSettingsOKPeerToPeerMedia) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListZoomPhoneAccountSettingsOKPersonalAudioLibrary as json.
func (o OptListZoomPhoneAccountSettingsOKPersonalAudioLibrary) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListZoomPhoneAccountSettingsOKPersonalAudioLibrary from json.
func (o *OptListZoomPhoneAccountSettingsOKPersonalAudioLibrary) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListZoomPhoneAccountSettingsOKPersonalAudioLibrary to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListZoomPhoneAccountSettingsOKPersonalAudioLibrary) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListZoomPhoneAccountSettingsOKPersonalAudioLibrary) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListZoomPhoneAccountSettingsOKRestrictedCallHours as json.
func (o OptListZoomPhoneAccountSettingsOKRestrictedCallHours) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListZoomPhoneAccountSettingsOKRestrictedCallHours from json.
func (o *OptListZoomPhoneAccountSettingsOKRestrictedCallHours) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListZoomPhoneAccountSettingsOKRestrictedCallHours to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListZoomPhoneAccountSettingsOKRestrictedCallHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListZoomPhoneAccountSettingsOKRestrictedCallHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListZoomPhoneAccountSettingsOKRestrictedCallHoursTimeZone as json.
func (o OptListZoomPhoneAccountSettingsOKRestrictedCallHoursTimeZone) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListZoomPhoneAccountSettingsOKRestrictedCallHoursTimeZone from json.
func (o *OptListZoomPhoneAccountSettingsOKRestrictedCallHoursTimeZone) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListZoomPhoneAccountSettingsOKRestrictedCallHoursTimeZone to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListZoomPhoneAccountSettingsOKRestrictedCallHoursTimeZone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListZoomPhoneAccountSettingsOKRestrictedCallHoursTimeZone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListZoomPhoneAccountSettingsOKSMS as json.
func (o OptListZoomPhoneAccountSettingsOKSMS) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListZoomPhoneAccountSettingsOKSMS from json.
func (o *OptListZoomPhoneAccountSettingsOKSMS) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListZoomPhoneAccountSettingsOKSMS to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListZoomPhoneAccountSettingsOKSMS) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListZoomPhoneAccountSettingsOKSMS) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListZoomPhoneAccountSettingsOKSMSEtiquetteTool as json.
func (o OptListZoomPhoneAccountSettingsOKSMSEtiquetteTool) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListZoomPhoneAccountSettingsOKSMSEtiquetteTool from json.
func (o *OptListZoomPhoneAccountSettingsOKSMSEtiquetteTool) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListZoomPhoneAccountSettingsOKSMSEtiquetteTool to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListZoomPhoneAccountSettingsOKSMSEtiquetteTool) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListZoomPhoneAccountSettingsOKSMSEtiquetteTool) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListZoomPhoneAccountSettingsOKSelectOutboundCallerID as json.
func (o OptListZoomPhoneAccountSettingsOKSelectOutboundCallerID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListZoomPhoneAccountSettingsOKSelectOutboundCallerID from json.
func (o *OptListZoomPhoneAccountSettingsOKSelectOutboundCallerID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListZoomPhoneAccountSettingsOKSelectOutboundCallerID to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListZoomPhoneAccountSettingsOKSelectOutboundCallerID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListZoomPhoneAccountSettingsOKSelectOutboundCallerID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListZoomPhoneAccountSettingsOKSharedVoicemailNotificationByEmail as json.
func (o OptListZoomPhoneAccountSettingsOKSharedVoicemailNotificationByEmail) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListZoomPhoneAccountSettingsOKSharedVoicemailNotificationByEmail from json.
func (o *OptListZoomPhoneAccountSettingsOKSharedVoicemailNotificationByEmail) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListZoomPhoneAccountSettingsOKSharedVoicemailNotificationByEmail to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListZoomPhoneAccountSettingsOKSharedVoicemailNotificationByEmail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListZoomPhoneAccountSettingsOKSharedVoicemailNotificationByEmail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListZoomPhoneAccountSettingsOKVoicemail as json.
func (o OptListZoomPhoneAccountSettingsOKVoicemail) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListZoomPhoneAccountSettingsOKVoicemail from json.
func (o *OptListZoomPhoneAccountSettingsOKVoicemail) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListZoomPhoneAccountSettingsOKVoicemail to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListZoomPhoneAccountSettingsOKVoicemail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListZoomPhoneAccountSettingsOKVoicemail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListZoomPhoneAccountSettingsOKVoicemailNotificationByEmail as json.
func (o OptListZoomPhoneAccountSettingsOKVoicemailNotificationByEmail) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListZoomPhoneAccountSettingsOKVoicemailNotificationByEmail from json.
func (o *OptListZoomPhoneAccountSettingsOKVoicemailNotificationByEmail) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListZoomPhoneAccountSettingsOKVoicemailNotificationByEmail to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListZoomPhoneAccountSettingsOKVoicemailNotificationByEmail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListZoomPhoneAccountSettingsOKVoicemailNotificationByEmail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListZoomPhoneAccountSettingsOKVoicemailTranscription as json.
func (o OptListZoomPhoneAccountSettingsOKVoicemailTranscription) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListZoomPhoneAccountSettingsOKVoicemailTranscription from json.
func (o *OptListZoomPhoneAccountSettingsOKVoicemailTranscription) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListZoomPhoneAccountSettingsOKVoicemailTranscription to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListZoomPhoneAccountSettingsOKVoicemailTranscription) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListZoomPhoneAccountSettingsOKVoicemailTranscription) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListZoomPhoneAccountSettingsOKZoomPhoneOnMobile as json.
func (o OptListZoomPhoneAccountSettingsOKZoomPhoneOnMobile) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListZoomPhoneAccountSettingsOKZoomPhoneOnMobile from json.
func (o *OptListZoomPhoneAccountSettingsOKZoomPhoneOnMobile) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListZoomPhoneAccountSettingsOKZoomPhoneOnMobile to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListZoomPhoneAccountSettingsOKZoomPhoneOnMobile) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListZoomPhoneAccountSettingsOKZoomPhoneOnMobile) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListZoomPhoneAccountSettingsOKZoomPhoneOnPwa as json.
func (o OptListZoomPhoneAccountSettingsOKZoomPhoneOnPwa) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListZoomPhoneAccountSettingsOKZoomPhoneOnPwa from json.
func (o *OptListZoomPhoneAccountSettingsOKZoomPhoneOnPwa) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListZoomPhoneAccountSettingsOKZoomPhoneOnPwa to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListZoomPhoneAccountSettingsOKZoomPhoneOnPwa) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListZoomPhoneAccountSettingsOKZoomPhoneOnPwa) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListZoomRoomsOKRoomsItemSite as json.
func (o OptListZoomRoomsOKRoomsItemSite) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListZoomRoomsOKRoomsItemSite from json.
func (o *OptListZoomRoomsOKRoomsItemSite) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListZoomRoomsOKRoomsItemSite to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListZoomRoomsOKRoomsItemSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListZoomRoomsOKRoomsItemSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MarkPhoneNumberAsBlockedForAllExtensionsReq as json.
func (o OptMarkPhoneNumberAsBlockedForAllExtensionsReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MarkPhoneNumberAsBlockedForAllExtensionsReq from json.
func (o *OptMarkPhoneNumberAsBlockedForAllExtensionsReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMarkPhoneNumberAsBlockedForAllExtensionsReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMarkPhoneNumberAsBlockedForAllExtensionsReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMarkPhoneNumberAsBlockedForAllExtensionsReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PatchCallHandlingSettingsCallForwardingSettings as json.
func (o OptPatchCallHandlingSettingsCallForwardingSettings) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PatchCallHandlingSettingsCallForwardingSettings from json.
func (o *OptPatchCallHandlingSettingsCallForwardingSettings) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPatchCallHandlingSettingsCallForwardingSettings to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPatchCallHandlingSettingsCallForwardingSettings) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPatchCallHandlingSettingsCallForwardingSettings) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PatchCallHandlingSettingsCallForwardingSettingsCallForwardingSettingsItemExternalContact as json.
func (o OptPatchCallHandlingSettingsCallForwardingSettingsCallForwardingSettingsItemExternalContact) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PatchCallHandlingSettingsCallForwardingSettingsCallForwardingSettingsItemExternalContact from json.
func (o *OptPatchCallHandlingSettingsCallForwardingSettingsCallForwardingSettingsItemExternalContact) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPatchCallHandlingSettingsCallForwardingSettingsCallForwardingSettingsItemExternalContact to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPatchCallHandlingSettingsCallForwardingSettingsCallForwardingSettingsItemExternalContact) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPatchCallHandlingSettingsCallForwardingSettingsCallForwardingSettingsItemExternalContact) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PatchCallHandlingSettingsCallHandlingSettings as json.
func (o OptPatchCallHandlingSettingsCallHandlingSettings) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PatchCallHandlingSettingsCallHandlingSettings from json.
func (o *OptPatchCallHandlingSettingsCallHandlingSettings) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPatchCallHandlingSettingsCallHandlingSettings to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPatchCallHandlingSettingsCallHandlingSettings) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPatchCallHandlingSettingsCallHandlingSettings) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PatchCallHandlingSettingsCallHandlingSettingsCallDistribution as json.
func (o OptPatchCallHandlingSettingsCallHandlingSettingsCallDistribution) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PatchCallHandlingSettingsCallHandlingSettingsCallDistribution from json.
func (o *OptPatchCallHandlingSettingsCallHandlingSettingsCallDistribution) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPatchCallHandlingSettingsCallHandlingSettingsCallDistribution to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPatchCallHandlingSettingsCallHandlingSettingsCallDistribution) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPatchCallHandlingSettingsCallHandlingSettingsCallDistribution) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PatchCallHandlingSettingsCustomHoursSettings as json.
func (o OptPatchCallHandlingSettingsCustomHoursSettings) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PatchCallHandlingSettingsCustomHoursSettings from json.
func (o *OptPatchCallHandlingSettingsCustomHoursSettings) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPatchCallHandlingSettingsCustomHoursSettings to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPatchCallHandlingSettingsCustomHoursSettings) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPatchCallHandlingSettingsCustomHoursSettings) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PatchCallHandlingSettingsHolidaySettings as json.
func (o OptPatchCallHandlingSettingsHolidaySettings) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PatchCallHandlingSettingsHolidaySettings from json.
func (o *OptPatchCallHandlingSettingsHolidaySettings) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPatchCallHandlingSettingsHolidaySettings to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPatchCallHandlingSettingsHolidaySettings) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPatchCallHandlingSettingsHolidaySettings) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneSettingOKBillingAccount as json.
func (o OptPhoneSettingOKBillingAccount) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PhoneSettingOKBillingAccount from json.
func (o *OptPhoneSettingOKBillingAccount) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPhoneSettingOKBillingAccount to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPhoneSettingOKBillingAccount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPhoneSettingOKBillingAccount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneSettingOKByoc as json.
func (o OptPhoneSettingOKByoc) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PhoneSettingOKByoc from json.
func (o *OptPhoneSettingOKByoc) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPhoneSettingOKByoc to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPhoneSettingOKByoc) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPhoneSettingOKByoc) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneSettingOKCountry as json.
func (o OptPhoneSettingOKCountry) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PhoneSettingOKCountry from json.
func (o *OptPhoneSettingOKCountry) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPhoneSettingOKCountry to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPhoneSettingOKCountry) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPhoneSettingOKCountry) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneSettingOKMultiplePartyConference as json.
func (o OptPhoneSettingOKMultiplePartyConference) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PhoneSettingOKMultiplePartyConference from json.
func (o *OptPhoneSettingOKMultiplePartyConference) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPhoneSettingOKMultiplePartyConference to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPhoneSettingOKMultiplePartyConference) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPhoneSettingOKMultiplePartyConference) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneSettingOKMultipleSites as json.
func (o OptPhoneSettingOKMultipleSites) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PhoneSettingOKMultipleSites from json.
func (o *OptPhoneSettingOKMultipleSites) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPhoneSettingOKMultipleSites to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPhoneSettingOKMultipleSites) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPhoneSettingOKMultipleSites) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneSettingOKShowDeviceIPForCallLog as json.
func (o OptPhoneSettingOKShowDeviceIPForCallLog) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PhoneSettingOKShowDeviceIPForCallLog from json.
func (o *OptPhoneSettingOKShowDeviceIPForCallLog) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPhoneSettingOKShowDeviceIPForCallLog to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPhoneSettingOKShowDeviceIPForCallLog) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPhoneSettingOKShowDeviceIPForCallLog) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneUserCallLogsOKCallLogsItemAcceptedBy as json.
func (o OptPhoneUserCallLogsOKCallLogsItemAcceptedBy) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PhoneUserCallLogsOKCallLogsItemAcceptedBy from json.
func (o *OptPhoneUserCallLogsOKCallLogsItemAcceptedBy) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPhoneUserCallLogsOKCallLogsItemAcceptedBy to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPhoneUserCallLogsOKCallLogsItemAcceptedBy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPhoneUserCallLogsOKCallLogsItemAcceptedBy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneUserCallLogsOKCallLogsItemForwardedBy as json.
func (o OptPhoneUserCallLogsOKCallLogsItemForwardedBy) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PhoneUserCallLogsOKCallLogsItemForwardedBy from json.
func (o *OptPhoneUserCallLogsOKCallLogsItemForwardedBy) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPhoneUserCallLogsOKCallLogsItemForwardedBy to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPhoneUserCallLogsOKCallLogsItemForwardedBy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPhoneUserCallLogsOKCallLogsItemForwardedBy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneUserCallLogsOKCallLogsItemForwardedTo as json.
func (o OptPhoneUserCallLogsOKCallLogsItemForwardedTo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PhoneUserCallLogsOKCallLogsItemForwardedTo from json.
func (o *OptPhoneUserCallLogsOKCallLogsItemForwardedTo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPhoneUserCallLogsOKCallLogsItemForwardedTo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPhoneUserCallLogsOKCallLogsItemForwardedTo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPhoneUserCallLogsOKCallLogsItemForwardedTo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneUserCallLogsOKCallLogsItemOutgoingBy as json.
func (o OptPhoneUserCallLogsOKCallLogsItemOutgoingBy) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PhoneUserCallLogsOKCallLogsItemOutgoingBy from json.
func (o *OptPhoneUserCallLogsOKCallLogsItemOutgoingBy) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPhoneUserCallLogsOKCallLogsItemOutgoingBy to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPhoneUserCallLogsOKCallLogsItemOutgoingBy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPhoneUserCallLogsOKCallLogsItemOutgoingBy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneUserCallLogsOKCallLogsItemSite as json.
func (o OptPhoneUserCallLogsOKCallLogsItemSite) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PhoneUserCallLogsOKCallLogsItemSite from json.
func (o *OptPhoneUserCallLogsOKCallLogsItemSite) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPhoneUserCallLogsOKCallLogsItemSite to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPhoneUserCallLogsOKCallLogsItemSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPhoneUserCallLogsOKCallLogsItemSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneUserOKEmergencyAddress as json.
func (o OptPhoneUserOKEmergencyAddress) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PhoneUserOKEmergencyAddress from json.
func (o *OptPhoneUserOKEmergencyAddress) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPhoneUserOKEmergencyAddress to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPhoneUserOKEmergencyAddress) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPhoneUserOKEmergencyAddress) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneUserOKPolicy as json.
func (o OptPhoneUserOKPolicy) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PhoneUserOKPolicy from json.
func (o *OptPhoneUserOKPolicy) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPhoneUserOKPolicy to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPhoneUserOKPolicy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPhoneUserOKPolicy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneUserOKPolicyAdHocCallRecording as json.
func (o OptPhoneUserOKPolicyAdHocCallRecording) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PhoneUserOKPolicyAdHocCallRecording from json.
func (o *OptPhoneUserOKPolicyAdHocCallRecording) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPhoneUserOKPolicyAdHocCallRecording to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPhoneUserOKPolicyAdHocCallRecording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPhoneUserOKPolicyAdHocCallRecording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneUserOKPolicyAdHocCallRecordingPlayRecordingBeepTone as json.
func (o OptPhoneUserOKPolicyAdHocCallRecordingPlayRecordingBeepTone) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PhoneUserOKPolicyAdHocCallRecordingPlayRecordingBeepTone from json.
func (o *OptPhoneUserOKPolicyAdHocCallRecordingPlayRecordingBeepTone) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPhoneUserOKPolicyAdHocCallRecordingPlayRecordingBeepTone to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPhoneUserOKPolicyAdHocCallRecordingPlayRecordingBeepTone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPhoneUserOKPolicyAdHocCallRecordingPlayRecordingBeepTone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneUserOKPolicyAllowEndUserEditCallHandling as json.
func (o OptPhoneUserOKPolicyAllowEndUserEditCallHandling) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PhoneUserOKPolicyAllowEndUserEditCallHandling from json.
func (o *OptPhoneUserOKPolicyAllowEndUserEditCallHandling) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPhoneUserOKPolicyAllowEndUserEditCallHandling to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPhoneUserOKPolicyAllowEndUserEditCallHandling) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPhoneUserOKPolicyAllowEndUserEditCallHandling) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneUserOKPolicyAudioIntercom as json.
func (o OptPhoneUserOKPolicyAudioIntercom) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PhoneUserOKPolicyAudioIntercom from json.
func (o *OptPhoneUserOKPolicyAudioIntercom) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPhoneUserOKPolicyAudioIntercom to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPhoneUserOKPolicyAudioIntercom) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPhoneUserOKPolicyAudioIntercom) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneUserOKPolicyAutoCallRecording as json.
func (o OptPhoneUserOKPolicyAutoCallRecording) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PhoneUserOKPolicyAutoCallRecording from json.
func (o *OptPhoneUserOKPolicyAutoCallRecording) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPhoneUserOKPolicyAutoCallRecording to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPhoneUserOKPolicyAutoCallRecording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPhoneUserOKPolicyAutoCallRecording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneUserOKPolicyAutoCallRecordingPlayRecordingBeepTone as json.
func (o OptPhoneUserOKPolicyAutoCallRecordingPlayRecordingBeepTone) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PhoneUserOKPolicyAutoCallRecordingPlayRecordingBeepTone from json.
func (o *OptPhoneUserOKPolicyAutoCallRecordingPlayRecordingBeepTone) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPhoneUserOKPolicyAutoCallRecordingPlayRecordingBeepTone to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPhoneUserOKPolicyAutoCallRecordingPlayRecordingBeepTone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPhoneUserOKPolicyAutoCallRecordingPlayRecordingBeepTone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneUserOKPolicyCallHandlingForwardingToOtherUsers as json.
func (o OptPhoneUserOKPolicyCallHandlingForwardingToOtherUsers) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PhoneUserOKPolicyCallHandlingForwardingToOtherUsers from json.
func (o *OptPhoneUserOKPolicyCallHandlingForwardingToOtherUsers) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPhoneUserOKPolicyCallHandlingForwardingToOtherUsers to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPhoneUserOKPolicyCallHandlingForwardingToOtherUsers) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPhoneUserOKPolicyCallHandlingForwardingToOtherUsers) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneUserOKPolicyCallOverflow as json.
func (o OptPhoneUserOKPolicyCallOverflow) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PhoneUserOKPolicyCallOverflow from json.
func (o *OptPhoneUserOKPolicyCallOverflow) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPhoneUserOKPolicyCallOverflow to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPhoneUserOKPolicyCallOverflow) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPhoneUserOKPolicyCallOverflow) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneUserOKPolicyCallPark as json.
func (o OptPhoneUserOKPolicyCallPark) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PhoneUserOKPolicyCallPark from json.
func (o *OptPhoneUserOKPolicyCallPark) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPhoneUserOKPolicyCallPark to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPhoneUserOKPolicyCallPark) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPhoneUserOKPolicyCallPark) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneUserOKPolicyCallParkForwardTo as json.
func (o OptPhoneUserOKPolicyCallParkForwardTo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PhoneUserOKPolicyCallParkForwardTo from json.
func (o *OptPhoneUserOKPolicyCallParkForwardTo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPhoneUserOKPolicyCallParkForwardTo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPhoneUserOKPolicyCallParkForwardTo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPhoneUserOKPolicyCallParkForwardTo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneUserOKPolicyCallTransferring as json.
func (o OptPhoneUserOKPolicyCallTransferring) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PhoneUserOKPolicyCallTransferring from json.
func (o *OptPhoneUserOKPolicyCallTransferring) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPhoneUserOKPolicyCallTransferring to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPhoneUserOKPolicyCallTransferring) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPhoneUserOKPolicyCallTransferring) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneUserOKPolicyCheckVoicemailsOverPhone as json.
func (o OptPhoneUserOKPolicyCheckVoicemailsOverPhone) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PhoneUserOKPolicyCheckVoicemailsOverPhone from json.
func (o *OptPhoneUserOKPolicyCheckVoicemailsOverPhone) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPhoneUserOKPolicyCheckVoicemailsOverPhone to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPhoneUserOKPolicyCheckVoicemailsOverPhone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPhoneUserOKPolicyCheckVoicemailsOverPhone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneUserOKPolicyE2eEncryption as json.
func (o OptPhoneUserOKPolicyE2eEncryption) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PhoneUserOKPolicyE2eEncryption from json.
func (o *OptPhoneUserOKPolicyE2eEncryption) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPhoneUserOKPolicyE2eEncryption to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPhoneUserOKPolicyE2eEncryption) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPhoneUserOKPolicyE2eEncryption) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneUserOKPolicyEmergencyAddressManagement as json.
func (o OptPhoneUserOKPolicyEmergencyAddressManagement) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PhoneUserOKPolicyEmergencyAddressManagement from json.
func (o *OptPhoneUserOKPolicyEmergencyAddressManagement) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPhoneUserOKPolicyEmergencyAddressManagement to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPhoneUserOKPolicyEmergencyAddressManagement) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPhoneUserOKPolicyEmergencyAddressManagement) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneUserOKPolicyHandOffToRoom as json.
func (o OptPhoneUserOKPolicyHandOffToRoom) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PhoneUserOKPolicyHandOffToRoom from json.
func (o *OptPhoneUserOKPolicyHandOffToRoom) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPhoneUserOKPolicyHandOffToRoom to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPhoneUserOKPolicyHandOffToRoom) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPhoneUserOKPolicyHandOffToRoom) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneUserOKPolicyMobileSwitchToCarrier as json.
func (o OptPhoneUserOKPolicyMobileSwitchToCarrier) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PhoneUserOKPolicyMobileSwitchToCarrier from json.
func (o *OptPhoneUserOKPolicyMobileSwitchToCarrier) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPhoneUserOKPolicyMobileSwitchToCarrier to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPhoneUserOKPolicyMobileSwitchToCarrier) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPhoneUserOKPolicyMobileSwitchToCarrier) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneUserOKPolicyOutboundCalling as json.
func (o OptPhoneUserOKPolicyOutboundCalling) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PhoneUserOKPolicyOutboundCalling from json.
func (o *OptPhoneUserOKPolicyOutboundCalling) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPhoneUserOKPolicyOutboundCalling to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPhoneUserOKPolicyOutboundCalling) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPhoneUserOKPolicyOutboundCalling) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneUserOKPolicyOutboundSMS as json.
func (o OptPhoneUserOKPolicyOutboundSMS) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PhoneUserOKPolicyOutboundSMS from json.
func (o *OptPhoneUserOKPolicyOutboundSMS) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPhoneUserOKPolicyOutboundSMS to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPhoneUserOKPolicyOutboundSMS) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPhoneUserOKPolicyOutboundSMS) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneUserOKPolicyPeerToPeerMedia as json.
func (o OptPhoneUserOKPolicyPeerToPeerMedia) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PhoneUserOKPolicyPeerToPeerMedia from json.
func (o *OptPhoneUserOKPolicyPeerToPeerMedia) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPhoneUserOKPolicyPeerToPeerMedia to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPhoneUserOKPolicyPeerToPeerMedia) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPhoneUserOKPolicyPeerToPeerMedia) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneUserOKPolicyPersonalAudioLibrary as json.
func (o OptPhoneUserOKPolicyPersonalAudioLibrary) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PhoneUserOKPolicyPersonalAudioLibrary from json.
func (o *OptPhoneUserOKPolicyPersonalAudioLibrary) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPhoneUserOKPolicyPersonalAudioLibrary to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPhoneUserOKPolicyPersonalAudioLibrary) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPhoneUserOKPolicyPersonalAudioLibrary) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneUserOKPolicySMS as json.
func (o OptPhoneUserOKPolicySMS) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PhoneUserOKPolicySMS from json.
func (o *OptPhoneUserOKPolicySMS) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPhoneUserOKPolicySMS to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPhoneUserOKPolicySMS) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPhoneUserOKPolicySMS) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneUserOKPolicySelectOutboundCallerID as json.
func (o OptPhoneUserOKPolicySelectOutboundCallerID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PhoneUserOKPolicySelectOutboundCallerID from json.
func (o *OptPhoneUserOKPolicySelectOutboundCallerID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPhoneUserOKPolicySelectOutboundCallerID to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPhoneUserOKPolicySelectOutboundCallerID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPhoneUserOKPolicySelectOutboundCallerID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneUserOKPolicySharedVoicemailNotificationByEmail as json.
func (o OptPhoneUserOKPolicySharedVoicemailNotificationByEmail) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PhoneUserOKPolicySharedVoicemailNotificationByEmail from json.
func (o *OptPhoneUserOKPolicySharedVoicemailNotificationByEmail) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPhoneUserOKPolicySharedVoicemailNotificationByEmail to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPhoneUserOKPolicySharedVoicemailNotificationByEmail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPhoneUserOKPolicySharedVoicemailNotificationByEmail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneUserOKPolicyVoicemail as json.
func (o OptPhoneUserOKPolicyVoicemail) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PhoneUserOKPolicyVoicemail from json.
func (o *OptPhoneUserOKPolicyVoicemail) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPhoneUserOKPolicyVoicemail to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPhoneUserOKPolicyVoicemail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPhoneUserOKPolicyVoicemail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneUserOKPolicyVoicemailNotificationByEmail as json.
func (o OptPhoneUserOKPolicyVoicemailNotificationByEmail) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PhoneUserOKPolicyVoicemailNotificationByEmail from json.
func (o *OptPhoneUserOKPolicyVoicemailNotificationByEmail) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPhoneUserOKPolicyVoicemailNotificationByEmail to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPhoneUserOKPolicyVoicemailNotificationByEmail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPhoneUserOKPolicyVoicemailNotificationByEmail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneUserOKPolicyVoicemailTranscription as json.
func (o OptPhoneUserOKPolicyVoicemailTranscription) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PhoneUserOKPolicyVoicemailTranscription from json.
func (o *OptPhoneUserOKPolicyVoicemailTranscription) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPhoneUserOKPolicyVoicemailTranscription to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPhoneUserOKPolicyVoicemailTranscription) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPhoneUserOKPolicyVoicemailTranscription) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneUserOKPolicyZoomPhoneOnMobile as json.
func (o OptPhoneUserOKPolicyZoomPhoneOnMobile) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PhoneUserOKPolicyZoomPhoneOnMobile from json.
func (o *OptPhoneUserOKPolicyZoomPhoneOnMobile) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPhoneUserOKPolicyZoomPhoneOnMobile to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPhoneUserOKPolicyZoomPhoneOnMobile) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPhoneUserOKPolicyZoomPhoneOnMobile) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneUserRecordingsOKRecordingsItemAcceptedBy as json.
func (o OptPhoneUserRecordingsOKRecordingsItemAcceptedBy) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PhoneUserRecordingsOKRecordingsItemAcceptedBy from json.
func (o *OptPhoneUserRecordingsOKRecordingsItemAcceptedBy) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPhoneUserRecordingsOKRecordingsItemAcceptedBy to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPhoneUserRecordingsOKRecordingsItemAcceptedBy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPhoneUserRecordingsOKRecordingsItemAcceptedBy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneUserRecordingsOKRecordingsItemOutgoingBy as json.
func (o OptPhoneUserRecordingsOKRecordingsItemOutgoingBy) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PhoneUserRecordingsOKRecordingsItemOutgoingBy from json.
func (o *OptPhoneUserRecordingsOKRecordingsItemOutgoingBy) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPhoneUserRecordingsOKRecordingsItemOutgoingBy to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPhoneUserRecordingsOKRecordingsItemOutgoingBy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPhoneUserRecordingsOKRecordingsItemOutgoingBy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneUserSettingsOKCountry as json.
func (o OptPhoneUserSettingsOKCountry) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PhoneUserSettingsOKCountry from json.
func (o *OptPhoneUserSettingsOKCountry) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPhoneUserSettingsOKCountry to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPhoneUserSettingsOKCountry) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPhoneUserSettingsOKCountry) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneUserSettingsOKDelegation as json.
func (o OptPhoneUserSettingsOKDelegation) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PhoneUserSettingsOKDelegation from json.
func (o *OptPhoneUserSettingsOKDelegation) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPhoneUserSettingsOKDelegation to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPhoneUserSettingsOKDelegation) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPhoneUserSettingsOKDelegation) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneUserSettingsOKDeskPhone as json.
func (o OptPhoneUserSettingsOKDeskPhone) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PhoneUserSettingsOKDeskPhone from json.
func (o *OptPhoneUserSettingsOKDeskPhone) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPhoneUserSettingsOKDeskPhone to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPhoneUserSettingsOKDeskPhone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPhoneUserSettingsOKDeskPhone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneUserSettingsOKDeskPhoneDevicesItemPolicy as json.
func (o OptPhoneUserSettingsOKDeskPhoneDevicesItemPolicy) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PhoneUserSettingsOKDeskPhoneDevicesItemPolicy from json.
func (o *OptPhoneUserSettingsOKDeskPhoneDevicesItemPolicy) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPhoneUserSettingsOKDeskPhoneDevicesItemPolicy to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPhoneUserSettingsOKDeskPhoneDevicesItemPolicy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPhoneUserSettingsOKDeskPhoneDevicesItemPolicy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneUserSettingsOKDeskPhoneDevicesItemPolicyCallControl as json.
func (o OptPhoneUserSettingsOKDeskPhoneDevicesItemPolicyCallControl) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PhoneUserSettingsOKDeskPhoneDevicesItemPolicyCallControl from json.
func (o *OptPhoneUserSettingsOKDeskPhoneDevicesItemPolicyCallControl) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPhoneUserSettingsOKDeskPhoneDevicesItemPolicyCallControl to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPhoneUserSettingsOKDeskPhoneDevicesItemPolicyCallControl) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPhoneUserSettingsOKDeskPhoneDevicesItemPolicyCallControl) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneUserSettingsOKDeskPhoneDevicesItemPolicyHotDesking as json.
func (o OptPhoneUserSettingsOKDeskPhoneDevicesItemPolicyHotDesking) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PhoneUserSettingsOKDeskPhoneDevicesItemPolicyHotDesking from json.
func (o *OptPhoneUserSettingsOKDeskPhoneDevicesItemPolicyHotDesking) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPhoneUserSettingsOKDeskPhoneDevicesItemPolicyHotDesking to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPhoneUserSettingsOKDeskPhoneDevicesItemPolicyHotDesking) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPhoneUserSettingsOKDeskPhoneDevicesItemPolicyHotDesking) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneUserSettingsOKDeskPhoneKeysPositions as json.
func (o OptPhoneUserSettingsOKDeskPhoneKeysPositions) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PhoneUserSettingsOKDeskPhoneKeysPositions from json.
func (o *OptPhoneUserSettingsOKDeskPhoneKeysPositions) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPhoneUserSettingsOKDeskPhoneKeysPositions to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPhoneUserSettingsOKDeskPhoneKeysPositions) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPhoneUserSettingsOKDeskPhoneKeysPositions) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneUserSettingsOKIntercom as json.
func (o OptPhoneUserSettingsOKIntercom) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PhoneUserSettingsOKIntercom from json.
func (o *OptPhoneUserSettingsOKIntercom) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPhoneUserSettingsOKIntercom to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPhoneUserSettingsOKIntercom) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPhoneUserSettingsOKIntercom) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneUserSettingsOKIntercomDevice as json.
func (o OptPhoneUserSettingsOKIntercomDevice) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PhoneUserSettingsOKIntercomDevice from json.
func (o *OptPhoneUserSettingsOKIntercomDevice) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPhoneUserSettingsOKIntercomDevice to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPhoneUserSettingsOKIntercomDevice) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPhoneUserSettingsOKIntercomDevice) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneUserSettingsOKOutboundCaller as json.
func (o OptPhoneUserSettingsOKOutboundCaller) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PhoneUserSettingsOKOutboundCaller from json.
func (o *OptPhoneUserSettingsOKOutboundCaller) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPhoneUserSettingsOKOutboundCaller to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPhoneUserSettingsOKOutboundCaller) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPhoneUserSettingsOKOutboundCaller) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PostCallHandlingSettingsCallForwardingSettings as json.
func (o OptPostCallHandlingSettingsCallForwardingSettings) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PostCallHandlingSettingsCallForwardingSettings from json.
func (o *OptPostCallHandlingSettingsCallForwardingSettings) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPostCallHandlingSettingsCallForwardingSettings to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPostCallHandlingSettingsCallForwardingSettings) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPostCallHandlingSettingsCallForwardingSettings) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PostCallHandlingSettingsHolidaySettings as json.
func (o OptPostCallHandlingSettingsHolidaySettings) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PostCallHandlingSettingsHolidaySettings from json.
func (o *OptPostCallHandlingSettingsHolidaySettings) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPostCallHandlingSettingsHolidaySettings to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPostCallHandlingSettingsHolidaySettings) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPostCallHandlingSettingsHolidaySettings) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SmsByMessageIdOKSender as json.
func (o OptSmsByMessageIdOKSender) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes SmsByMessageIdOKSender from json.
func (o *OptSmsByMessageIdOKSender) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptSmsByMessageIdOKSender to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptSmsByMessageIdOKSender) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptSmsByMessageIdOKSender) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SmsByMessageIdOKSenderOwner as json.
func (o OptSmsByMessageIdOKSenderOwner) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes SmsByMessageIdOKSenderOwner from json.
func (o *OptSmsByMessageIdOKSenderOwner) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptSmsByMessageIdOKSenderOwner to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptSmsByMessageIdOKSenderOwner) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptSmsByMessageIdOKSenderOwner) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SmsByMessageIdOKToMembersItemOwner as json.
func (o OptSmsByMessageIdOKToMembersItemOwner) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes SmsByMessageIdOKToMembersItemOwner from json.
func (o *OptSmsByMessageIdOKToMembersItemOwner) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptSmsByMessageIdOKToMembersItemOwner to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptSmsByMessageIdOKToMembersItemOwner) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptSmsByMessageIdOKToMembersItemOwner) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SmsSessionDetailsOKSMSHistoriesItemSender as json.
func (o OptSmsSessionDetailsOKSMSHistoriesItemSender) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes SmsSessionDetailsOKSMSHistoriesItemSender from json.
func (o *OptSmsSessionDetailsOKSMSHistoriesItemSender) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptSmsSessionDetailsOKSMSHistoriesItemSender to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptSmsSessionDetailsOKSMSHistoriesItemSender) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptSmsSessionDetailsOKSMSHistoriesItemSender) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SmsSessionDetailsOKSMSHistoriesItemSenderOwner as json.
func (o OptSmsSessionDetailsOKSMSHistoriesItemSenderOwner) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes SmsSessionDetailsOKSMSHistoriesItemSenderOwner from json.
func (o *OptSmsSessionDetailsOKSMSHistoriesItemSenderOwner) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptSmsSessionDetailsOKSMSHistoriesItemSenderOwner to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptSmsSessionDetailsOKSMSHistoriesItemSenderOwner) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptSmsSessionDetailsOKSMSHistoriesItemSenderOwner) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SmsSessionDetailsOKSMSHistoriesItemToMembersItemOwner as json.
func (o OptSmsSessionDetailsOKSMSHistoriesItemToMembersItemOwner) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes SmsSessionDetailsOKSMSHistoriesItemToMembersItemOwner from json.
func (o *OptSmsSessionDetailsOKSMSHistoriesItemToMembersItemOwner) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptSmsSessionDetailsOKSMSHistoriesItemToMembersItemOwner to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptSmsSessionDetailsOKSMSHistoriesItemToMembersItemOwner) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptSmsSessionDetailsOKSMSHistoriesItemToMembersItemOwner) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SmsSessionSyncOKSMSHistoriesItemSender as json.
func (o OptSmsSessionSyncOKSMSHistoriesItemSender) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes SmsSessionSyncOKSMSHistoriesItemSender from json.
func (o *OptSmsSessionSyncOKSMSHistoriesItemSender) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptSmsSessionSyncOKSMSHistoriesItemSender to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptSmsSessionSyncOKSMSHistoriesItemSender) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptSmsSessionSyncOKSMSHistoriesItemSender) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SmsSessionSyncOKSMSHistoriesItemSenderOwner as json.
func (o OptSmsSessionSyncOKSMSHistoriesItemSenderOwner) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes SmsSessionSyncOKSMSHistoriesItemSenderOwner from json.
func (o *OptSmsSessionSyncOKSMSHistoriesItemSenderOwner) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptSmsSessionSyncOKSMSHistoriesItemSenderOwner to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptSmsSessionSyncOKSMSHistoriesItemSenderOwner) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptSmsSessionSyncOKSMSHistoriesItemSenderOwner) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SmsSessionSyncOKSMSHistoriesItemToMembersItemOwner as json.
func (o OptSmsSessionSyncOKSMSHistoriesItemToMembersItemOwner) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes SmsSessionSyncOKSMSHistoriesItemToMembersItemOwner from json.
func (o *OptSmsSessionSyncOKSMSHistoriesItemToMembersItemOwner) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptSmsSessionSyncOKSMSHistoriesItemToMembersItemOwner to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptSmsSessionSyncOKSMSHistoriesItemToMembersItemOwner) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptSmsSessionSyncOKSMSHistoriesItemToMembersItemOwner) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes string as json.
func (o OptString) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes string from json.
func (o *OptString) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptString to nil")
	}
	o.Set = true
	v, err := d.Str()
	if err != nil {
		return err
	}
	o.Value = string(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptString) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptString) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SyncPhoneDeviceReq as json.
func (o OptSyncPhoneDeviceReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes SyncPhoneDeviceReq from json.
func (o *OptSyncPhoneDeviceReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptSyncPhoneDeviceReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptSyncPhoneDeviceReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptSyncPhoneDeviceReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SyncUserCallLogsOKCallLogsItemAcceptedBy as json.
func (o OptSyncUserCallLogsOKCallLogsItemAcceptedBy) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes SyncUserCallLogsOKCallLogsItemAcceptedBy from json.
func (o *OptSyncUserCallLogsOKCallLogsItemAcceptedBy) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptSyncUserCallLogsOKCallLogsItemAcceptedBy to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptSyncUserCallLogsOKCallLogsItemAcceptedBy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptSyncUserCallLogsOKCallLogsItemAcceptedBy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SyncUserCallLogsOKCallLogsItemForwardedBy as json.
func (o OptSyncUserCallLogsOKCallLogsItemForwardedBy) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes SyncUserCallLogsOKCallLogsItemForwardedBy from json.
func (o *OptSyncUserCallLogsOKCallLogsItemForwardedBy) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptSyncUserCallLogsOKCallLogsItemForwardedBy to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptSyncUserCallLogsOKCallLogsItemForwardedBy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptSyncUserCallLogsOKCallLogsItemForwardedBy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SyncUserCallLogsOKCallLogsItemForwardedTo as json.
func (o OptSyncUserCallLogsOKCallLogsItemForwardedTo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes SyncUserCallLogsOKCallLogsItemForwardedTo from json.
func (o *OptSyncUserCallLogsOKCallLogsItemForwardedTo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptSyncUserCallLogsOKCallLogsItemForwardedTo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptSyncUserCallLogsOKCallLogsItemForwardedTo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptSyncUserCallLogsOKCallLogsItemForwardedTo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SyncUserCallLogsOKCallLogsItemOutgoingBy as json.
func (o OptSyncUserCallLogsOKCallLogsItemOutgoingBy) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes SyncUserCallLogsOKCallLogsItemOutgoingBy from json.
func (o *OptSyncUserCallLogsOKCallLogsItemOutgoingBy) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptSyncUserCallLogsOKCallLogsItemOutgoingBy to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptSyncUserCallLogsOKCallLogsItemOutgoingBy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptSyncUserCallLogsOKCallLogsItemOutgoingBy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SyncUserCallLogsOKCallLogsItemSite as json.
func (o OptSyncUserCallLogsOKCallLogsItemSite) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes SyncUserCallLogsOKCallLogsItemSite from json.
func (o *OptSyncUserCallLogsOKCallLogsItemSite) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptSyncUserCallLogsOKCallLogsItemSite to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptSyncUserCallLogsOKCallLogsItemSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptSyncUserCallLogsOKCallLogsItemSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes time.Time as json.
func (o OptTime) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if !o.Set {
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *OptTime) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTime to nil")
	}
	o.Set = true
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTime) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeTime)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTime) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeTime)
}

// Encode encodes UpdateADeviceReq as json.
func (o OptUpdateADeviceReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateADeviceReq from json.
func (o *OptUpdateADeviceReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateADeviceReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateADeviceReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateADeviceReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateASharedLineGroupReq as json.
func (o OptUpdateASharedLineGroupReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateASharedLineGroupReq from json.
func (o *OptUpdateASharedLineGroupReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateASharedLineGroupReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateASharedLineGroupReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateASharedLineGroupReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateAccountLevelInboundBlockRuleReq as json.
func (o OptUpdateAccountLevelInboundBlockRuleReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateAccountLevelInboundBlockRuleReq from json.
func (o *OptUpdateAccountLevelInboundBlockRuleReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateAccountLevelInboundBlockRuleReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateAccountLevelInboundBlockRuleReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateAccountLevelInboundBlockRuleReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateAccountOutboundCallingCountriesOrRegionsReq as json.
func (o OptUpdateAccountOutboundCallingCountriesOrRegionsReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateAccountOutboundCallingCountriesOrRegionsReq from json.
func (o *OptUpdateAccountOutboundCallingCountriesOrRegionsReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateAccountOutboundCallingCountriesOrRegionsReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateAccountOutboundCallingCountriesOrRegionsReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateAccountOutboundCallingCountriesOrRegionsReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateAccountOutboundCallingExceptionRuleReq as json.
func (o OptUpdateAccountOutboundCallingExceptionRuleReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateAccountOutboundCallingExceptionRuleReq from json.
func (o *OptUpdateAccountOutboundCallingExceptionRuleReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateAccountOutboundCallingExceptionRuleReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateAccountOutboundCallingExceptionRuleReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateAccountOutboundCallingExceptionRuleReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateAccountOutboundCallingExceptionRuleReqExceptionRule as json.
func (o OptUpdateAccountOutboundCallingExceptionRuleReqExceptionRule) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateAccountOutboundCallingExceptionRuleReqExceptionRule from json.
func (o *OptUpdateAccountOutboundCallingExceptionRuleReqExceptionRule) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateAccountOutboundCallingExceptionRuleReqExceptionRule to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateAccountOutboundCallingExceptionRuleReqExceptionRule) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateAccountOutboundCallingExceptionRuleReqExceptionRule) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateAnAlertSettingReq as json.
func (o OptUpdateAnAlertSettingReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateAnAlertSettingReq from json.
func (o *OptUpdateAnAlertSettingReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateAnAlertSettingReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateAnAlertSettingReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateAnAlertSettingReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateAudioItemReq as json.
func (o OptUpdateAudioItemReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateAudioItemReq from json.
func (o *OptUpdateAudioItemReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateAudioItemReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateAudioItemReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateAudioItemReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateAutoDeleteFieldReq as json.
func (o OptUpdateAutoDeleteFieldReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateAutoDeleteFieldReq from json.
func (o *OptUpdateAutoDeleteFieldReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateAutoDeleteFieldReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateAutoDeleteFieldReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateAutoDeleteFieldReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateAutoReceptionistIVRReq as json.
func (o OptUpdateAutoReceptionistIVRReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateAutoReceptionistIVRReq from json.
func (o *OptUpdateAutoReceptionistIVRReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateAutoReceptionistIVRReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateAutoReceptionistIVRReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateAutoReceptionistIVRReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateAutoReceptionistIVRReqCallerEntersNoAction as json.
func (o OptUpdateAutoReceptionistIVRReqCallerEntersNoAction) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateAutoReceptionistIVRReqCallerEntersNoAction from json.
func (o *OptUpdateAutoReceptionistIVRReqCallerEntersNoAction) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateAutoReceptionistIVRReqCallerEntersNoAction to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateAutoReceptionistIVRReqCallerEntersNoAction) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateAutoReceptionistIVRReqCallerEntersNoAction) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateAutoReceptionistIVRReqKeyAction as json.
func (o OptUpdateAutoReceptionistIVRReqKeyAction) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateAutoReceptionistIVRReqKeyAction from json.
func (o *OptUpdateAutoReceptionistIVRReqKeyAction) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateAutoReceptionistIVRReqKeyAction to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateAutoReceptionistIVRReqKeyAction) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateAutoReceptionistIVRReqKeyAction) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateAutoReceptionistIVRReqKeyActionTarget as json.
func (o OptUpdateAutoReceptionistIVRReqKeyActionTarget) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateAutoReceptionistIVRReqKeyActionTarget from json.
func (o *OptUpdateAutoReceptionistIVRReqKeyActionTarget) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateAutoReceptionistIVRReqKeyActionTarget to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateAutoReceptionistIVRReqKeyActionTarget) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateAutoReceptionistIVRReqKeyActionTarget) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateAutoReceptionistPolicyReq as json.
func (o OptUpdateAutoReceptionistPolicyReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateAutoReceptionistPolicyReq from json.
func (o *OptUpdateAutoReceptionistPolicyReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateAutoReceptionistPolicyReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateAutoReceptionistPolicyReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateAutoReceptionistPolicyReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateAutoReceptionistPolicyReqSMS as json.
func (o OptUpdateAutoReceptionistPolicyReqSMS) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateAutoReceptionistPolicyReqSMS from json.
func (o *OptUpdateAutoReceptionistPolicyReqSMS) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateAutoReceptionistPolicyReqSMS to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateAutoReceptionistPolicyReqSMS) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateAutoReceptionistPolicyReqSMS) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateAutoReceptionistPolicyReqVoicemailNotificationByEmail as json.
func (o OptUpdateAutoReceptionistPolicyReqVoicemailNotificationByEmail) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateAutoReceptionistPolicyReqVoicemailNotificationByEmail from json.
func (o *OptUpdateAutoReceptionistPolicyReqVoicemailNotificationByEmail) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateAutoReceptionistPolicyReqVoicemailNotificationByEmail to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateAutoReceptionistPolicyReqVoicemailNotificationByEmail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateAutoReceptionistPolicyReqVoicemailNotificationByEmail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateAutoReceptionistPolicyReqVoicemailTranscription as json.
func (o OptUpdateAutoReceptionistPolicyReqVoicemailTranscription) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateAutoReceptionistPolicyReqVoicemailTranscription from json.
func (o *OptUpdateAutoReceptionistPolicyReqVoicemailTranscription) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateAutoReceptionistPolicyReqVoicemailTranscription to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateAutoReceptionistPolicyReqVoicemailTranscription) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateAutoReceptionistPolicyReqVoicemailTranscription) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateAutoReceptionistReq as json.
func (o OptUpdateAutoReceptionistReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateAutoReceptionistReq from json.
func (o *OptUpdateAutoReceptionistReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateAutoReceptionistReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateAutoReceptionistReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateAutoReceptionistReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateCQPolicySubSettingReq as json.
func (o OptUpdateCQPolicySubSettingReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateCQPolicySubSettingReq from json.
func (o *OptUpdateCQPolicySubSettingReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateCQPolicySubSettingReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateCQPolicySubSettingReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateCQPolicySubSettingReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateCallHandlingReq as json.
func (o OptUpdateCallHandlingReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateCallHandlingReq from json.
func (o *OptUpdateCallHandlingReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateCallHandlingReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateCallHandlingReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateCallHandlingReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateCallQueueReq as json.
func (o OptUpdateCallQueueReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateCallQueueReq from json.
func (o *OptUpdateCallQueueReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateCallQueueReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateCallQueueReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateCallQueueReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateCallingPlanReq as json.
func (o OptUpdateCallingPlanReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateCallingPlanReq from json.
func (o *OptUpdateCallingPlanReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateCallingPlanReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateCallingPlanReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateCallingPlanReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateCommonAreaOutboundCallingCountriesOrRegionsReq as json.
func (o OptUpdateCommonAreaOutboundCallingCountriesOrRegionsReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateCommonAreaOutboundCallingCountriesOrRegionsReq from json.
func (o *OptUpdateCommonAreaOutboundCallingCountriesOrRegionsReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateCommonAreaOutboundCallingCountriesOrRegionsReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateCommonAreaOutboundCallingCountriesOrRegionsReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateCommonAreaOutboundCallingCountriesOrRegionsReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateCommonAreaOutboundCallingExceptionRuleReq as json.
func (o OptUpdateCommonAreaOutboundCallingExceptionRuleReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateCommonAreaOutboundCallingExceptionRuleReq from json.
func (o *OptUpdateCommonAreaOutboundCallingExceptionRuleReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateCommonAreaOutboundCallingExceptionRuleReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateCommonAreaOutboundCallingExceptionRuleReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateCommonAreaOutboundCallingExceptionRuleReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateCommonAreaOutboundCallingExceptionRuleReqExceptionRule as json.
func (o OptUpdateCommonAreaOutboundCallingExceptionRuleReqExceptionRule) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateCommonAreaOutboundCallingExceptionRuleReqExceptionRule from json.
func (o *OptUpdateCommonAreaOutboundCallingExceptionRuleReqExceptionRule) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateCommonAreaOutboundCallingExceptionRuleReqExceptionRule to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateCommonAreaOutboundCallingExceptionRuleReqExceptionRule) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateCommonAreaOutboundCallingExceptionRuleReqExceptionRule) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateCommonAreaReq as json.
func (o OptUpdateCommonAreaReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateCommonAreaReq from json.
func (o *OptUpdateCommonAreaReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateCommonAreaReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateCommonAreaReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateCommonAreaReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateCommonAreaReqPolicy as json.
func (o OptUpdateCommonAreaReqPolicy) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateCommonAreaReqPolicy from json.
func (o *OptUpdateCommonAreaReqPolicy) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateCommonAreaReqPolicy to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateCommonAreaReqPolicy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateCommonAreaReqPolicy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateCommonAreaReqPolicyInternationalCalling as json.
func (o OptUpdateCommonAreaReqPolicyInternationalCalling) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateCommonAreaReqPolicyInternationalCalling from json.
func (o *OptUpdateCommonAreaReqPolicyInternationalCalling) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateCommonAreaReqPolicyInternationalCalling to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateCommonAreaReqPolicyInternationalCalling) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateCommonAreaReqPolicyInternationalCalling) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateCommonAreaSettingReq as json.
func (o OptUpdateCommonAreaSettingReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateCommonAreaSettingReq from json.
func (o *OptUpdateCommonAreaSettingReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateCommonAreaSettingReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateCommonAreaSettingReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateCommonAreaSettingReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateCommonAreaSettingReqDeskPhonesItemHotDesking as json.
func (o OptUpdateCommonAreaSettingReqDeskPhonesItemHotDesking) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateCommonAreaSettingReqDeskPhonesItemHotDesking from json.
func (o *OptUpdateCommonAreaSettingReqDeskPhonesItemHotDesking) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateCommonAreaSettingReqDeskPhonesItemHotDesking to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateCommonAreaSettingReqDeskPhonesItemHotDesking) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateCommonAreaSettingReqDeskPhonesItemHotDesking) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateEmergencyAddressOKOwner as json.
func (o OptUpdateEmergencyAddressOKOwner) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateEmergencyAddressOKOwner from json.
func (o *OptUpdateEmergencyAddressOKOwner) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateEmergencyAddressOKOwner to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateEmergencyAddressOKOwner) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateEmergencyAddressOKOwner) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateEmergencyAddressOKSite as json.
func (o OptUpdateEmergencyAddressOKSite) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateEmergencyAddressOKSite from json.
func (o *OptUpdateEmergencyAddressOKSite) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateEmergencyAddressOKSite to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateEmergencyAddressOKSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateEmergencyAddressOKSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateEmergencyAddressReq as json.
func (o OptUpdateEmergencyAddressReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateEmergencyAddressReq from json.
func (o *OptUpdateEmergencyAddressReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateEmergencyAddressReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateEmergencyAddressReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateEmergencyAddressReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateExternalContactReq as json.
func (o OptUpdateExternalContactReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateExternalContactReq from json.
func (o *OptUpdateExternalContactReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateExternalContactReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateExternalContactReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateExternalContactReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateFirmwareRuleReq as json.
func (o OptUpdateFirmwareRuleReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateFirmwareRuleReq from json.
func (o *OptUpdateFirmwareRuleReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateFirmwareRuleReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateFirmwareRuleReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateFirmwareRuleReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateGCPReq as json.
func (o OptUpdateGCPReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateGCPReq from json.
func (o *OptUpdateGCPReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateGCPReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateGCPReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateGCPReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateGCPReqPlayIncomingCallsSound as json.
func (o OptUpdateGCPReqPlayIncomingCallsSound) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateGCPReqPlayIncomingCallsSound from json.
func (o *OptUpdateGCPReqPlayIncomingCallsSound) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateGCPReqPlayIncomingCallsSound to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateGCPReqPlayIncomingCallsSound) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateGCPReqPlayIncomingCallsSound) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateLocationReq as json.
func (o OptUpdateLocationReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateLocationReq from json.
func (o *OptUpdateLocationReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateLocationReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateLocationReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateLocationReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateMonitoringGroupReq as json.
func (o OptUpdateMonitoringGroupReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateMonitoringGroupReq from json.
func (o *OptUpdateMonitoringGroupReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateMonitoringGroupReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateMonitoringGroupReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateMonitoringGroupReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdatePeeringPhoneNumbersReq as json.
func (o OptUpdatePeeringPhoneNumbersReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdatePeeringPhoneNumbersReq from json.
func (o *OptUpdatePeeringPhoneNumbersReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdatePeeringPhoneNumbersReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdatePeeringPhoneNumbersReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdatePeeringPhoneNumbersReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdatePhoneNumberDetailsReq as json.
func (o OptUpdatePhoneNumberDetailsReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdatePhoneNumberDetailsReq from json.
func (o *OptUpdatePhoneNumberDetailsReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdatePhoneNumberDetailsReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdatePhoneNumberDetailsReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdatePhoneNumberDetailsReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdatePhoneRoleReq as json.
func (o OptUpdatePhoneRoleReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdatePhoneRoleReq from json.
func (o *OptUpdatePhoneRoleReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdatePhoneRoleReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdatePhoneRoleReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdatePhoneRoleReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdatePhoneSettingsReq as json.
func (o OptUpdatePhoneSettingsReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdatePhoneSettingsReq from json.
func (o *OptUpdatePhoneSettingsReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdatePhoneSettingsReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdatePhoneSettingsReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdatePhoneSettingsReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdatePhoneSettingsReqBillingAccount as json.
func (o OptUpdatePhoneSettingsReqBillingAccount) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdatePhoneSettingsReqBillingAccount from json.
func (o *OptUpdatePhoneSettingsReqBillingAccount) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdatePhoneSettingsReqBillingAccount to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdatePhoneSettingsReqBillingAccount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdatePhoneSettingsReqBillingAccount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdatePhoneSettingsReqByoc as json.
func (o OptUpdatePhoneSettingsReqByoc) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdatePhoneSettingsReqByoc from json.
func (o *OptUpdatePhoneSettingsReqByoc) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdatePhoneSettingsReqByoc to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdatePhoneSettingsReqByoc) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdatePhoneSettingsReqByoc) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdatePhoneSettingsReqMultipleSites as json.
func (o OptUpdatePhoneSettingsReqMultipleSites) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdatePhoneSettingsReqMultipleSites from json.
func (o *OptUpdatePhoneSettingsReqMultipleSites) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdatePhoneSettingsReqMultipleSites to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdatePhoneSettingsReqMultipleSites) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdatePhoneSettingsReqMultipleSites) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdatePhoneSettingsReqMultipleSitesSiteCode as json.
func (o OptUpdatePhoneSettingsReqMultipleSitesSiteCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdatePhoneSettingsReqMultipleSitesSiteCode from json.
func (o *OptUpdatePhoneSettingsReqMultipleSitesSiteCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdatePhoneSettingsReqMultipleSitesSiteCode to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdatePhoneSettingsReqMultipleSitesSiteCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdatePhoneSettingsReqMultipleSitesSiteCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdatePhoneSettingsReqShowDeviceIPForCallLog as json.
func (o OptUpdatePhoneSettingsReqShowDeviceIPForCallLog) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdatePhoneSettingsReqShowDeviceIPForCallLog from json.
func (o *OptUpdatePhoneSettingsReqShowDeviceIPForCallLog) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdatePhoneSettingsReqShowDeviceIPForCallLog to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdatePhoneSettingsReqShowDeviceIPForCallLog) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdatePhoneSettingsReqShowDeviceIPForCallLog) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdatePolicyReq as json.
func (o OptUpdatePolicyReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdatePolicyReq from json.
func (o *OptUpdatePolicyReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdatePolicyReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdatePolicyReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdatePolicyReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdatePolicyReqVoicemailAccessMember as json.
func (o OptUpdatePolicyReqVoicemailAccessMember) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdatePolicyReqVoicemailAccessMember from json.
func (o *OptUpdatePolicyReqVoicemailAccessMember) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdatePolicyReqVoicemailAccessMember to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdatePolicyReqVoicemailAccessMember) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdatePolicyReqVoicemailAccessMember) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateProvisionTemplateReq as json.
func (o OptUpdateProvisionTemplateReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateProvisionTemplateReq from json.
func (o *OptUpdateProvisionTemplateReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateProvisionTemplateReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateProvisionTemplateReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateProvisionTemplateReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateProvisionTemplateToDeviceReq as json.
func (o OptUpdateProvisionTemplateToDeviceReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateProvisionTemplateToDeviceReq from json.
func (o *OptUpdateProvisionTemplateToDeviceReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateProvisionTemplateToDeviceReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateProvisionTemplateToDeviceReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateProvisionTemplateToDeviceReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateRecordingStatusReq as json.
func (o OptUpdateRecordingStatusReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateRecordingStatusReq from json.
func (o *OptUpdateRecordingStatusReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateRecordingStatusReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateRecordingStatusReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateRecordingStatusReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateRoutingRuleReq as json.
func (o OptUpdateRoutingRuleReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateRoutingRuleReq from json.
func (o *OptUpdateRoutingRuleReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateRoutingRuleReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateRoutingRuleReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateRoutingRuleReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSLGPolicySubSettingReq as json.
func (o OptUpdateSLGPolicySubSettingReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSLGPolicySubSettingReq from json.
func (o *OptUpdateSLGPolicySubSettingReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSLGPolicySubSettingReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSLGPolicySubSettingReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSLGPolicySubSettingReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSettingTemplateReq as json.
func (o OptUpdateSettingTemplateReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSettingTemplateReq from json.
func (o *OptUpdateSettingTemplateReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSettingTemplateReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSettingTemplateReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSettingTemplateReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSettingTemplateReqPolicy as json.
func (o OptUpdateSettingTemplateReqPolicy) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSettingTemplateReqPolicy from json.
func (o *OptUpdateSettingTemplateReqPolicy) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSettingTemplateReqPolicy to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSettingTemplateReqPolicy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSettingTemplateReqPolicy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSettingTemplateReqPolicyAdHocCallRecording as json.
func (o OptUpdateSettingTemplateReqPolicyAdHocCallRecording) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSettingTemplateReqPolicyAdHocCallRecording from json.
func (o *OptUpdateSettingTemplateReqPolicyAdHocCallRecording) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSettingTemplateReqPolicyAdHocCallRecording to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSettingTemplateReqPolicyAdHocCallRecording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSettingTemplateReqPolicyAdHocCallRecording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSettingTemplateReqPolicyAutoCallRecording as json.
func (o OptUpdateSettingTemplateReqPolicyAutoCallRecording) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSettingTemplateReqPolicyAutoCallRecording from json.
func (o *OptUpdateSettingTemplateReqPolicyAutoCallRecording) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSettingTemplateReqPolicyAutoCallRecording to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSettingTemplateReqPolicyAutoCallRecording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSettingTemplateReqPolicyAutoCallRecording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSettingTemplateReqPolicyCallForwarding as json.
func (o OptUpdateSettingTemplateReqPolicyCallForwarding) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSettingTemplateReqPolicyCallForwarding from json.
func (o *OptUpdateSettingTemplateReqPolicyCallForwarding) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSettingTemplateReqPolicyCallForwarding to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSettingTemplateReqPolicyCallForwarding) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSettingTemplateReqPolicyCallForwarding) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSettingTemplateReqPolicyCallOverflow as json.
func (o OptUpdateSettingTemplateReqPolicyCallOverflow) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSettingTemplateReqPolicyCallOverflow from json.
func (o *OptUpdateSettingTemplateReqPolicyCallOverflow) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSettingTemplateReqPolicyCallOverflow to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSettingTemplateReqPolicyCallOverflow) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSettingTemplateReqPolicyCallOverflow) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSettingTemplateReqPolicySMS as json.
func (o OptUpdateSettingTemplateReqPolicySMS) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSettingTemplateReqPolicySMS from json.
func (o *OptUpdateSettingTemplateReqPolicySMS) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSettingTemplateReqPolicySMS to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSettingTemplateReqPolicySMS) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSettingTemplateReqPolicySMS) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSettingTemplateReqPolicyVoicemail as json.
func (o OptUpdateSettingTemplateReqPolicyVoicemail) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSettingTemplateReqPolicyVoicemail from json.
func (o *OptUpdateSettingTemplateReqPolicyVoicemail) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSettingTemplateReqPolicyVoicemail to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSettingTemplateReqPolicyVoicemail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSettingTemplateReqPolicyVoicemail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSettingTemplateReqProfile as json.
func (o OptUpdateSettingTemplateReqProfile) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSettingTemplateReqProfile from json.
func (o *OptUpdateSettingTemplateReqProfile) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSettingTemplateReqProfile to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSettingTemplateReqProfile) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSettingTemplateReqProfile) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSettingTemplateReqUserSettings as json.
func (o OptUpdateSettingTemplateReqUserSettings) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSettingTemplateReqUserSettings from json.
func (o *OptUpdateSettingTemplateReqUserSettings) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSettingTemplateReqUserSettings to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSettingTemplateReqUserSettings) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSettingTemplateReqUserSettings) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSettingTemplateReqUserSettingsCallHandling as json.
func (o OptUpdateSettingTemplateReqUserSettingsCallHandling) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSettingTemplateReqUserSettingsCallHandling from json.
func (o *OptUpdateSettingTemplateReqUserSettingsCallHandling) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSettingTemplateReqUserSettingsCallHandling to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSettingTemplateReqUserSettingsCallHandling) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSettingTemplateReqUserSettingsCallHandling) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHours as json.
func (o OptUpdateSettingTemplateReqUserSettingsCallHandlingBusinessHours) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHours from json.
func (o *OptUpdateSettingTemplateReqUserSettingsCallHandlingBusinessHours) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSettingTemplateReqUserSettingsCallHandlingBusinessHours to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSettingTemplateReqUserSettingsCallHandlingBusinessHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSettingTemplateReqUserSettingsCallHandlingBusinessHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursBusyConnectOperator as json.
func (o OptUpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursBusyConnectOperator) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursBusyConnectOperator from json.
func (o *OptUpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursBusyConnectOperator) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursBusyConnectOperator to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursBusyConnectOperator) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursBusyConnectOperator) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursBusyConnectOperatorExternalNumber as json.
func (o OptUpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursBusyConnectOperatorExternalNumber) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursBusyConnectOperatorExternalNumber from json.
func (o *OptUpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursBusyConnectOperatorExternalNumber) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursBusyConnectOperatorExternalNumber to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursBusyConnectOperatorExternalNumber) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursBusyConnectOperatorExternalNumber) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursConnectToOperator as json.
func (o OptUpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursConnectToOperator) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursConnectToOperator from json.
func (o *OptUpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursConnectToOperator) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursConnectToOperator to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursConnectToOperator) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursConnectToOperator) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursConnectToOperatorExternalNumber as json.
func (o OptUpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursConnectToOperatorExternalNumber) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursConnectToOperatorExternalNumber from json.
func (o *OptUpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursConnectToOperatorExternalNumber) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursConnectToOperatorExternalNumber to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursConnectToOperatorExternalNumber) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursConnectToOperatorExternalNumber) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSettingTemplateReqUserSettingsCallHandlingCloseHours as json.
func (o OptUpdateSettingTemplateReqUserSettingsCallHandlingCloseHours) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSettingTemplateReqUserSettingsCallHandlingCloseHours from json.
func (o *OptUpdateSettingTemplateReqUserSettingsCallHandlingCloseHours) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSettingTemplateReqUserSettingsCallHandlingCloseHours to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSettingTemplateReqUserSettingsCallHandlingCloseHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSettingTemplateReqUserSettingsCallHandlingCloseHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursBusyConnectOperator as json.
func (o OptUpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursBusyConnectOperator) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursBusyConnectOperator from json.
func (o *OptUpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursBusyConnectOperator) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursBusyConnectOperator to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursBusyConnectOperator) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursBusyConnectOperator) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursBusyConnectOperatorExternalNumber as json.
func (o OptUpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursBusyConnectOperatorExternalNumber) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursBusyConnectOperatorExternalNumber from json.
func (o *OptUpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursBusyConnectOperatorExternalNumber) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursBusyConnectOperatorExternalNumber to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursBusyConnectOperatorExternalNumber) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursBusyConnectOperatorExternalNumber) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursConnectToOperator as json.
func (o OptUpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursConnectToOperator) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursConnectToOperator from json.
func (o *OptUpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursConnectToOperator) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursConnectToOperator to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursConnectToOperator) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursConnectToOperator) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursConnectToOperatorExternalNumber as json.
func (o OptUpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursConnectToOperatorExternalNumber) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursConnectToOperatorExternalNumber from json.
func (o *OptUpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursConnectToOperatorExternalNumber) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursConnectToOperatorExternalNumber to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursConnectToOperatorExternalNumber) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursConnectToOperatorExternalNumber) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSettingTemplateReqUserSettingsDeskPhone as json.
func (o OptUpdateSettingTemplateReqUserSettingsDeskPhone) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSettingTemplateReqUserSettingsDeskPhone from json.
func (o *OptUpdateSettingTemplateReqUserSettingsDeskPhone) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSettingTemplateReqUserSettingsDeskPhone to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSettingTemplateReqUserSettingsDeskPhone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSettingTemplateReqUserSettingsDeskPhone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSharedLineGroupPolicyReq as json.
func (o OptUpdateSharedLineGroupPolicyReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSharedLineGroupPolicyReq from json.
func (o *OptUpdateSharedLineGroupPolicyReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSharedLineGroupPolicyReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSharedLineGroupPolicyReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSharedLineGroupPolicyReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSharedLineGroupPolicyReqCheckVoicemailsOverPhone as json.
func (o OptUpdateSharedLineGroupPolicyReqCheckVoicemailsOverPhone) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSharedLineGroupPolicyReqCheckVoicemailsOverPhone from json.
func (o *OptUpdateSharedLineGroupPolicyReqCheckVoicemailsOverPhone) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSharedLineGroupPolicyReqCheckVoicemailsOverPhone to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSharedLineGroupPolicyReqCheckVoicemailsOverPhone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSharedLineGroupPolicyReqCheckVoicemailsOverPhone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteDetailsReq as json.
func (o OptUpdateSiteDetailsReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteDetailsReq from json.
func (o *OptUpdateSiteDetailsReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteDetailsReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteDetailsReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteDetailsReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteDetailsReqDefaultEmergencyAddress as json.
func (o OptUpdateSiteDetailsReqDefaultEmergencyAddress) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteDetailsReqDefaultEmergencyAddress from json.
func (o *OptUpdateSiteDetailsReqDefaultEmergencyAddress) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteDetailsReqDefaultEmergencyAddress to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteDetailsReqDefaultEmergencyAddress) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteDetailsReqDefaultEmergencyAddress) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteDetailsReqPolicy as json.
func (o OptUpdateSiteDetailsReqPolicy) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteDetailsReqPolicy from json.
func (o *OptUpdateSiteDetailsReqPolicy) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteDetailsReqPolicy to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteDetailsReqPolicy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteDetailsReqPolicy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteDetailsReqPolicyAdHocCallRecording as json.
func (o OptUpdateSiteDetailsReqPolicyAdHocCallRecording) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteDetailsReqPolicyAdHocCallRecording from json.
func (o *OptUpdateSiteDetailsReqPolicyAdHocCallRecording) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteDetailsReqPolicyAdHocCallRecording to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteDetailsReqPolicyAdHocCallRecording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteDetailsReqPolicyAdHocCallRecording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteDetailsReqPolicyAdHocCallRecordingPlayRecordingBeepTone as json.
func (o OptUpdateSiteDetailsReqPolicyAdHocCallRecordingPlayRecordingBeepTone) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteDetailsReqPolicyAdHocCallRecordingPlayRecordingBeepTone from json.
func (o *OptUpdateSiteDetailsReqPolicyAdHocCallRecordingPlayRecordingBeepTone) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteDetailsReqPolicyAdHocCallRecordingPlayRecordingBeepTone to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteDetailsReqPolicyAdHocCallRecordingPlayRecordingBeepTone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteDetailsReqPolicyAdHocCallRecordingPlayRecordingBeepTone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteDetailsReqPolicyAudioIntercom as json.
func (o OptUpdateSiteDetailsReqPolicyAudioIntercom) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteDetailsReqPolicyAudioIntercom from json.
func (o *OptUpdateSiteDetailsReqPolicyAudioIntercom) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteDetailsReqPolicyAudioIntercom to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteDetailsReqPolicyAudioIntercom) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteDetailsReqPolicyAudioIntercom) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteDetailsReqPolicyAutoCallRecording as json.
func (o OptUpdateSiteDetailsReqPolicyAutoCallRecording) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteDetailsReqPolicyAutoCallRecording from json.
func (o *OptUpdateSiteDetailsReqPolicyAutoCallRecording) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteDetailsReqPolicyAutoCallRecording to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteDetailsReqPolicyAutoCallRecording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteDetailsReqPolicyAutoCallRecording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteDetailsReqPolicyAutoCallRecordingPlayRecordingBeepTone as json.
func (o OptUpdateSiteDetailsReqPolicyAutoCallRecordingPlayRecordingBeepTone) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteDetailsReqPolicyAutoCallRecordingPlayRecordingBeepTone from json.
func (o *OptUpdateSiteDetailsReqPolicyAutoCallRecordingPlayRecordingBeepTone) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteDetailsReqPolicyAutoCallRecordingPlayRecordingBeepTone to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteDetailsReqPolicyAutoCallRecordingPlayRecordingBeepTone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteDetailsReqPolicyAutoCallRecordingPlayRecordingBeepTone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteDetailsReqPolicyAutoDeleteDataAfterRetentionDuration as json.
func (o OptUpdateSiteDetailsReqPolicyAutoDeleteDataAfterRetentionDuration) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteDetailsReqPolicyAutoDeleteDataAfterRetentionDuration from json.
func (o *OptUpdateSiteDetailsReqPolicyAutoDeleteDataAfterRetentionDuration) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteDetailsReqPolicyAutoDeleteDataAfterRetentionDuration to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteDetailsReqPolicyAutoDeleteDataAfterRetentionDuration) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteDetailsReqPolicyAutoDeleteDataAfterRetentionDuration) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteDetailsReqPolicyBlockCallsWithoutCallerID as json.
func (o OptUpdateSiteDetailsReqPolicyBlockCallsWithoutCallerID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteDetailsReqPolicyBlockCallsWithoutCallerID from json.
func (o *OptUpdateSiteDetailsReqPolicyBlockCallsWithoutCallerID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteDetailsReqPolicyBlockCallsWithoutCallerID to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteDetailsReqPolicyBlockCallsWithoutCallerID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteDetailsReqPolicyBlockCallsWithoutCallerID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteDetailsReqPolicyBlockExternalCalls as json.
func (o OptUpdateSiteDetailsReqPolicyBlockExternalCalls) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteDetailsReqPolicyBlockExternalCalls from json.
func (o *OptUpdateSiteDetailsReqPolicyBlockExternalCalls) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteDetailsReqPolicyBlockExternalCalls to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteDetailsReqPolicyBlockExternalCalls) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteDetailsReqPolicyBlockExternalCalls) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteDetailsReqPolicyBlockExternalCallsE2eEncryption as json.
func (o OptUpdateSiteDetailsReqPolicyBlockExternalCallsE2eEncryption) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteDetailsReqPolicyBlockExternalCallsE2eEncryption from json.
func (o *OptUpdateSiteDetailsReqPolicyBlockExternalCallsE2eEncryption) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteDetailsReqPolicyBlockExternalCallsE2eEncryption to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteDetailsReqPolicyBlockExternalCallsE2eEncryption) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteDetailsReqPolicyBlockExternalCallsE2eEncryption) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteDetailsReqPolicyCallHandlingForwardingToOtherUsers as json.
func (o OptUpdateSiteDetailsReqPolicyCallHandlingForwardingToOtherUsers) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteDetailsReqPolicyCallHandlingForwardingToOtherUsers from json.
func (o *OptUpdateSiteDetailsReqPolicyCallHandlingForwardingToOtherUsers) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteDetailsReqPolicyCallHandlingForwardingToOtherUsers to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteDetailsReqPolicyCallHandlingForwardingToOtherUsers) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteDetailsReqPolicyCallHandlingForwardingToOtherUsers) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteDetailsReqPolicyCallOverflow as json.
func (o OptUpdateSiteDetailsReqPolicyCallOverflow) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteDetailsReqPolicyCallOverflow from json.
func (o *OptUpdateSiteDetailsReqPolicyCallOverflow) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteDetailsReqPolicyCallOverflow to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteDetailsReqPolicyCallOverflow) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteDetailsReqPolicyCallOverflow) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteDetailsReqPolicyCallPark as json.
func (o OptUpdateSiteDetailsReqPolicyCallPark) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteDetailsReqPolicyCallPark from json.
func (o *OptUpdateSiteDetailsReqPolicyCallPark) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteDetailsReqPolicyCallPark to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteDetailsReqPolicyCallPark) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteDetailsReqPolicyCallPark) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteDetailsReqPolicyCallQueueOptOutReason as json.
func (o OptUpdateSiteDetailsReqPolicyCallQueueOptOutReason) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteDetailsReqPolicyCallQueueOptOutReason from json.
func (o *OptUpdateSiteDetailsReqPolicyCallQueueOptOutReason) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteDetailsReqPolicyCallQueueOptOutReason to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteDetailsReqPolicyCallQueueOptOutReason) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteDetailsReqPolicyCallQueueOptOutReason) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteDetailsReqPolicyCallQueuePickupCode as json.
func (o OptUpdateSiteDetailsReqPolicyCallQueuePickupCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteDetailsReqPolicyCallQueuePickupCode from json.
func (o *OptUpdateSiteDetailsReqPolicyCallQueuePickupCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteDetailsReqPolicyCallQueuePickupCode to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteDetailsReqPolicyCallQueuePickupCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteDetailsReqPolicyCallQueuePickupCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteDetailsReqPolicyCallTransferring as json.
func (o OptUpdateSiteDetailsReqPolicyCallTransferring) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteDetailsReqPolicyCallTransferring from json.
func (o *OptUpdateSiteDetailsReqPolicyCallTransferring) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteDetailsReqPolicyCallTransferring to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteDetailsReqPolicyCallTransferring) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteDetailsReqPolicyCallTransferring) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteDetailsReqPolicyCheckVoicemailsOverPhone as json.
func (o OptUpdateSiteDetailsReqPolicyCheckVoicemailsOverPhone) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteDetailsReqPolicyCheckVoicemailsOverPhone from json.
func (o *OptUpdateSiteDetailsReqPolicyCheckVoicemailsOverPhone) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteDetailsReqPolicyCheckVoicemailsOverPhone to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteDetailsReqPolicyCheckVoicemailsOverPhone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteDetailsReqPolicyCheckVoicemailsOverPhone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteDetailsReqPolicyDelegation as json.
func (o OptUpdateSiteDetailsReqPolicyDelegation) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteDetailsReqPolicyDelegation from json.
func (o *OptUpdateSiteDetailsReqPolicyDelegation) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteDetailsReqPolicyDelegation to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteDetailsReqPolicyDelegation) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteDetailsReqPolicyDelegation) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteDetailsReqPolicyElevateToMeeting as json.
func (o OptUpdateSiteDetailsReqPolicyElevateToMeeting) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteDetailsReqPolicyElevateToMeeting from json.
func (o *OptUpdateSiteDetailsReqPolicyElevateToMeeting) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteDetailsReqPolicyElevateToMeeting to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteDetailsReqPolicyElevateToMeeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteDetailsReqPolicyElevateToMeeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteDetailsReqPolicyForceOffNet as json.
func (o OptUpdateSiteDetailsReqPolicyForceOffNet) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteDetailsReqPolicyForceOffNet from json.
func (o *OptUpdateSiteDetailsReqPolicyForceOffNet) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteDetailsReqPolicyForceOffNet to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteDetailsReqPolicyForceOffNet) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteDetailsReqPolicyForceOffNet) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteDetailsReqPolicyHandOffToRoom as json.
func (o OptUpdateSiteDetailsReqPolicyHandOffToRoom) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteDetailsReqPolicyHandOffToRoom from json.
func (o *OptUpdateSiteDetailsReqPolicyHandOffToRoom) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteDetailsReqPolicyHandOffToRoom to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteDetailsReqPolicyHandOffToRoom) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteDetailsReqPolicyHandOffToRoom) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteDetailsReqPolicyInternationalCalling as json.
func (o OptUpdateSiteDetailsReqPolicyInternationalCalling) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteDetailsReqPolicyInternationalCalling from json.
func (o *OptUpdateSiteDetailsReqPolicyInternationalCalling) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteDetailsReqPolicyInternationalCalling to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteDetailsReqPolicyInternationalCalling) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteDetailsReqPolicyInternationalCalling) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteDetailsReqPolicyMobileSwitchToCarrier as json.
func (o OptUpdateSiteDetailsReqPolicyMobileSwitchToCarrier) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteDetailsReqPolicyMobileSwitchToCarrier from json.
func (o *OptUpdateSiteDetailsReqPolicyMobileSwitchToCarrier) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteDetailsReqPolicyMobileSwitchToCarrier to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteDetailsReqPolicyMobileSwitchToCarrier) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteDetailsReqPolicyMobileSwitchToCarrier) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteDetailsReqPolicyPersonalAudioLibrary as json.
func (o OptUpdateSiteDetailsReqPolicyPersonalAudioLibrary) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteDetailsReqPolicyPersonalAudioLibrary from json.
func (o *OptUpdateSiteDetailsReqPolicyPersonalAudioLibrary) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteDetailsReqPolicyPersonalAudioLibrary to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteDetailsReqPolicyPersonalAudioLibrary) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteDetailsReqPolicyPersonalAudioLibrary) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteDetailsReqPolicySMS as json.
func (o OptUpdateSiteDetailsReqPolicySMS) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteDetailsReqPolicySMS from json.
func (o *OptUpdateSiteDetailsReqPolicySMS) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteDetailsReqPolicySMS to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteDetailsReqPolicySMS) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteDetailsReqPolicySMS) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteDetailsReqPolicySelectOutboundCallerID as json.
func (o OptUpdateSiteDetailsReqPolicySelectOutboundCallerID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteDetailsReqPolicySelectOutboundCallerID from json.
func (o *OptUpdateSiteDetailsReqPolicySelectOutboundCallerID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteDetailsReqPolicySelectOutboundCallerID to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteDetailsReqPolicySelectOutboundCallerID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteDetailsReqPolicySelectOutboundCallerID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteDetailsReqPolicySharedVoicemailNotificationByEmail as json.
func (o OptUpdateSiteDetailsReqPolicySharedVoicemailNotificationByEmail) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteDetailsReqPolicySharedVoicemailNotificationByEmail from json.
func (o *OptUpdateSiteDetailsReqPolicySharedVoicemailNotificationByEmail) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteDetailsReqPolicySharedVoicemailNotificationByEmail to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteDetailsReqPolicySharedVoicemailNotificationByEmail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteDetailsReqPolicySharedVoicemailNotificationByEmail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteDetailsReqPolicyVoicemail as json.
func (o OptUpdateSiteDetailsReqPolicyVoicemail) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteDetailsReqPolicyVoicemail from json.
func (o *OptUpdateSiteDetailsReqPolicyVoicemail) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteDetailsReqPolicyVoicemail to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteDetailsReqPolicyVoicemail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteDetailsReqPolicyVoicemail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteDetailsReqPolicyVoicemailNotificationByEmail as json.
func (o OptUpdateSiteDetailsReqPolicyVoicemailNotificationByEmail) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteDetailsReqPolicyVoicemailNotificationByEmail from json.
func (o *OptUpdateSiteDetailsReqPolicyVoicemailNotificationByEmail) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteDetailsReqPolicyVoicemailNotificationByEmail to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteDetailsReqPolicyVoicemailNotificationByEmail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteDetailsReqPolicyVoicemailNotificationByEmail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteDetailsReqPolicyVoicemailTranscription as json.
func (o OptUpdateSiteDetailsReqPolicyVoicemailTranscription) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteDetailsReqPolicyVoicemailTranscription from json.
func (o *OptUpdateSiteDetailsReqPolicyVoicemailTranscription) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteDetailsReqPolicyVoicemailTranscription to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteDetailsReqPolicyVoicemailTranscription) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteDetailsReqPolicyVoicemailTranscription) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteDetailsReqPolicyZoomPhoneOnMobile as json.
func (o OptUpdateSiteDetailsReqPolicyZoomPhoneOnMobile) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteDetailsReqPolicyZoomPhoneOnMobile from json.
func (o *OptUpdateSiteDetailsReqPolicyZoomPhoneOnMobile) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteDetailsReqPolicyZoomPhoneOnMobile to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteDetailsReqPolicyZoomPhoneOnMobile) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteDetailsReqPolicyZoomPhoneOnMobile) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteDetailsReqShortExtension as json.
func (o OptUpdateSiteDetailsReqShortExtension) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteDetailsReqShortExtension from json.
func (o *OptUpdateSiteDetailsReqShortExtension) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteDetailsReqShortExtension to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteDetailsReqShortExtension) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteDetailsReqShortExtension) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteDetailsReqSipZone as json.
func (o OptUpdateSiteDetailsReqSipZone) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteDetailsReqSipZone from json.
func (o *OptUpdateSiteDetailsReqSipZone) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteDetailsReqSipZone to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteDetailsReqSipZone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteDetailsReqSipZone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteForUnassignedPhoneNumbersReq as json.
func (o OptUpdateSiteForUnassignedPhoneNumbersReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteForUnassignedPhoneNumbersReq from json.
func (o *OptUpdateSiteForUnassignedPhoneNumbersReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteForUnassignedPhoneNumbersReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteForUnassignedPhoneNumbersReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteForUnassignedPhoneNumbersReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteOutboundCallingCountriesOrRegionsReq as json.
func (o OptUpdateSiteOutboundCallingCountriesOrRegionsReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteOutboundCallingCountriesOrRegionsReq from json.
func (o *OptUpdateSiteOutboundCallingCountriesOrRegionsReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteOutboundCallingCountriesOrRegionsReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteOutboundCallingCountriesOrRegionsReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteOutboundCallingCountriesOrRegionsReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteOutboundCallingExceptionRuleReq as json.
func (o OptUpdateSiteOutboundCallingExceptionRuleReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteOutboundCallingExceptionRuleReq from json.
func (o *OptUpdateSiteOutboundCallingExceptionRuleReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteOutboundCallingExceptionRuleReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteOutboundCallingExceptionRuleReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteOutboundCallingExceptionRuleReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteOutboundCallingExceptionRuleReqExceptionRule as json.
func (o OptUpdateSiteOutboundCallingExceptionRuleReqExceptionRule) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteOutboundCallingExceptionRuleReqExceptionRule from json.
func (o *OptUpdateSiteOutboundCallingExceptionRuleReqExceptionRule) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteOutboundCallingExceptionRuleReqExceptionRule to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteOutboundCallingExceptionRuleReqExceptionRule) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteOutboundCallingExceptionRuleReqExceptionRule) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteSettingReq as json.
func (o OptUpdateSiteSettingReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteSettingReq from json.
func (o *OptUpdateSiteSettingReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteSettingReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteSettingReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteSettingReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteSettingReqAudioPrompt as json.
func (o OptUpdateSiteSettingReqAudioPrompt) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteSettingReqAudioPrompt from json.
func (o *OptUpdateSiteSettingReqAudioPrompt) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteSettingReqAudioPrompt to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteSettingReqAudioPrompt) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteSettingReqAudioPrompt) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteSettingReqAudioPromptAudioWhileConnecting as json.
func (o OptUpdateSiteSettingReqAudioPromptAudioWhileConnecting) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteSettingReqAudioPromptAudioWhileConnecting from json.
func (o *OptUpdateSiteSettingReqAudioPromptAudioWhileConnecting) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteSettingReqAudioPromptAudioWhileConnecting to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteSettingReqAudioPromptAudioWhileConnecting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteSettingReqAudioPromptAudioWhileConnecting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstruction as json.
func (o OptUpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstruction) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstruction from json.
func (o *OptUpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstruction) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstruction to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstruction) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstruction) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstructionBusinessHours as json.
func (o OptUpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstructionBusinessHours) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstructionBusinessHours from json.
func (o *OptUpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstructionBusinessHours) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstructionBusinessHours to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstructionBusinessHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstructionBusinessHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstructionClosedHours as json.
func (o OptUpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstructionClosedHours) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstructionClosedHours from json.
func (o *OptUpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstructionClosedHours) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstructionClosedHours to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstructionClosedHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstructionClosedHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstructionHolidayHours as json.
func (o OptUpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstructionHolidayHours) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstructionHolidayHours from json.
func (o *OptUpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstructionHolidayHours) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstructionHolidayHours to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstructionHolidayHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstructionHolidayHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemail as json.
func (o OptUpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemail) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemail from json.
func (o *OptUpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemail) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemail to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailBusinessHours as json.
func (o OptUpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailBusinessHours) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailBusinessHours from json.
func (o *OptUpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailBusinessHours) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailBusinessHours to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailBusinessHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailBusinessHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailClosedHours as json.
func (o OptUpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailClosedHours) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailClosedHours from json.
func (o *OptUpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailClosedHours) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailClosedHours to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailClosedHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailClosedHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailHolidayHours as json.
func (o OptUpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailHolidayHours) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailHolidayHours from json.
func (o *OptUpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailHolidayHours) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailHolidayHours to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailHolidayHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailHolidayHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemail as json.
func (o OptUpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemail) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemail from json.
func (o *OptUpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemail) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemail to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailBusinessHours as json.
func (o OptUpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailBusinessHours) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailBusinessHours from json.
func (o *OptUpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailBusinessHours) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailBusinessHours to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailBusinessHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailBusinessHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailClosedHours as json.
func (o OptUpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailClosedHours) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailClosedHours from json.
func (o *OptUpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailClosedHours) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailClosedHours to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailClosedHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailClosedHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailHolidayHours as json.
func (o OptUpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailHolidayHours) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailHolidayHours from json.
func (o *OptUpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailHolidayHours) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailHolidayHours to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailHolidayHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailHolidayHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemail as json.
func (o OptUpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemail) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemail from json.
func (o *OptUpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemail) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemail to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemailBusinessHours as json.
func (o OptUpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemailBusinessHours) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemailBusinessHours from json.
func (o *OptUpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemailBusinessHours) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemailBusinessHours to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemailBusinessHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemailBusinessHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemailClosedHours as json.
func (o OptUpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemailClosedHours) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemailClosedHours from json.
func (o *OptUpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemailClosedHours) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemailClosedHours to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemailClosedHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemailClosedHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemailHolidayHours as json.
func (o OptUpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemailHolidayHours) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemailHolidayHours from json.
func (o *OptUpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemailHolidayHours) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemailHolidayHours to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemailHolidayHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemailHolidayHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteSettingReqAudioPromptHoldMusic as json.
func (o OptUpdateSiteSettingReqAudioPromptHoldMusic) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteSettingReqAudioPromptHoldMusic from json.
func (o *OptUpdateSiteSettingReqAudioPromptHoldMusic) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteSettingReqAudioPromptHoldMusic to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteSettingReqAudioPromptHoldMusic) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteSettingReqAudioPromptHoldMusic) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteSettingReqAudioPromptLeaveVoicemailIntroduction as json.
func (o OptUpdateSiteSettingReqAudioPromptLeaveVoicemailIntroduction) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteSettingReqAudioPromptLeaveVoicemailIntroduction from json.
func (o *OptUpdateSiteSettingReqAudioPromptLeaveVoicemailIntroduction) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteSettingReqAudioPromptLeaveVoicemailIntroduction to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteSettingReqAudioPromptLeaveVoicemailIntroduction) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteSettingReqAudioPromptLeaveVoicemailIntroduction) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteSettingReqAudioPromptLeaveVoicemailIntroductionBusinessHours as json.
func (o OptUpdateSiteSettingReqAudioPromptLeaveVoicemailIntroductionBusinessHours) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteSettingReqAudioPromptLeaveVoicemailIntroductionBusinessHours from json.
func (o *OptUpdateSiteSettingReqAudioPromptLeaveVoicemailIntroductionBusinessHours) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteSettingReqAudioPromptLeaveVoicemailIntroductionBusinessHours to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteSettingReqAudioPromptLeaveVoicemailIntroductionBusinessHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteSettingReqAudioPromptLeaveVoicemailIntroductionBusinessHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteSettingReqAudioPromptLeaveVoicemailIntroductionClosedHours as json.
func (o OptUpdateSiteSettingReqAudioPromptLeaveVoicemailIntroductionClosedHours) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteSettingReqAudioPromptLeaveVoicemailIntroductionClosedHours from json.
func (o *OptUpdateSiteSettingReqAudioPromptLeaveVoicemailIntroductionClosedHours) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteSettingReqAudioPromptLeaveVoicemailIntroductionClosedHours to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteSettingReqAudioPromptLeaveVoicemailIntroductionClosedHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteSettingReqAudioPromptLeaveVoicemailIntroductionClosedHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteSettingReqAudioPromptLeaveVoicemailIntroductionHolidayHours as json.
func (o OptUpdateSiteSettingReqAudioPromptLeaveVoicemailIntroductionHolidayHours) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteSettingReqAudioPromptLeaveVoicemailIntroductionHolidayHours from json.
func (o *OptUpdateSiteSettingReqAudioPromptLeaveVoicemailIntroductionHolidayHours) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteSettingReqAudioPromptLeaveVoicemailIntroductionHolidayHours to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteSettingReqAudioPromptLeaveVoicemailIntroductionHolidayHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteSettingReqAudioPromptLeaveVoicemailIntroductionHolidayHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteSettingReqAudioPromptMessageGreeting as json.
func (o OptUpdateSiteSettingReqAudioPromptMessageGreeting) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteSettingReqAudioPromptMessageGreeting from json.
func (o *OptUpdateSiteSettingReqAudioPromptMessageGreeting) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteSettingReqAudioPromptMessageGreeting to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteSettingReqAudioPromptMessageGreeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteSettingReqAudioPromptMessageGreeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteSettingReqAudioPromptMessageGreetingBusinessHours as json.
func (o OptUpdateSiteSettingReqAudioPromptMessageGreetingBusinessHours) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteSettingReqAudioPromptMessageGreetingBusinessHours from json.
func (o *OptUpdateSiteSettingReqAudioPromptMessageGreetingBusinessHours) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteSettingReqAudioPromptMessageGreetingBusinessHours to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteSettingReqAudioPromptMessageGreetingBusinessHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteSettingReqAudioPromptMessageGreetingBusinessHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteSettingReqAudioPromptMessageGreetingClosedHours as json.
func (o OptUpdateSiteSettingReqAudioPromptMessageGreetingClosedHours) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteSettingReqAudioPromptMessageGreetingClosedHours from json.
func (o *OptUpdateSiteSettingReqAudioPromptMessageGreetingClosedHours) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteSettingReqAudioPromptMessageGreetingClosedHours to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteSettingReqAudioPromptMessageGreetingClosedHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteSettingReqAudioPromptMessageGreetingClosedHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteSettingReqAudioPromptMessageGreetingHolidayHours as json.
func (o OptUpdateSiteSettingReqAudioPromptMessageGreetingHolidayHours) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteSettingReqAudioPromptMessageGreetingHolidayHours from json.
func (o *OptUpdateSiteSettingReqAudioPromptMessageGreetingHolidayHours) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteSettingReqAudioPromptMessageGreetingHolidayHours to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteSettingReqAudioPromptMessageGreetingHolidayHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteSettingReqAudioPromptMessageGreetingHolidayHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteSettingReqBillingAccount as json.
func (o OptUpdateSiteSettingReqBillingAccount) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteSettingReqBillingAccount from json.
func (o *OptUpdateSiteSettingReqBillingAccount) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteSettingReqBillingAccount to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteSettingReqBillingAccount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteSettingReqBillingAccount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteSettingReqBusinessHours as json.
func (o OptUpdateSiteSettingReqBusinessHours) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteSettingReqBusinessHours from json.
func (o *OptUpdateSiteSettingReqBusinessHours) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteSettingReqBusinessHours to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteSettingReqBusinessHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteSettingReqBusinessHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteSettingReqBusinessHoursOverflow as json.
func (o OptUpdateSiteSettingReqBusinessHoursOverflow) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteSettingReqBusinessHoursOverflow from json.
func (o *OptUpdateSiteSettingReqBusinessHoursOverflow) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteSettingReqBusinessHoursOverflow to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteSettingReqBusinessHoursOverflow) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteSettingReqBusinessHoursOverflow) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteSettingReqBusinessHoursOverflowOperator as json.
func (o OptUpdateSiteSettingReqBusinessHoursOverflowOperator) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteSettingReqBusinessHoursOverflowOperator from json.
func (o *OptUpdateSiteSettingReqBusinessHoursOverflowOperator) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteSettingReqBusinessHoursOverflowOperator to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteSettingReqBusinessHoursOverflowOperator) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteSettingReqBusinessHoursOverflowOperator) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteSettingReqClosedHours as json.
func (o OptUpdateSiteSettingReqClosedHours) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteSettingReqClosedHours from json.
func (o *OptUpdateSiteSettingReqClosedHours) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteSettingReqClosedHours to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteSettingReqClosedHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteSettingReqClosedHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteSettingReqClosedHoursOverflow as json.
func (o OptUpdateSiteSettingReqClosedHoursOverflow) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteSettingReqClosedHoursOverflow from json.
func (o *OptUpdateSiteSettingReqClosedHoursOverflow) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteSettingReqClosedHoursOverflow to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteSettingReqClosedHoursOverflow) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteSettingReqClosedHoursOverflow) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteSettingReqClosedHoursOverflowOperator as json.
func (o OptUpdateSiteSettingReqClosedHoursOverflowOperator) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteSettingReqClosedHoursOverflowOperator from json.
func (o *OptUpdateSiteSettingReqClosedHoursOverflowOperator) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteSettingReqClosedHoursOverflowOperator to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteSettingReqClosedHoursOverflowOperator) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteSettingReqClosedHoursOverflowOperator) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteSettingReqDialByName as json.
func (o OptUpdateSiteSettingReqDialByName) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteSettingReqDialByName from json.
func (o *OptUpdateSiteSettingReqDialByName) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteSettingReqDialByName to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteSettingReqDialByName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteSettingReqDialByName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteSettingReqHolidayHours as json.
func (o OptUpdateSiteSettingReqHolidayHours) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteSettingReqHolidayHours from json.
func (o *OptUpdateSiteSettingReqHolidayHours) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteSettingReqHolidayHours to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteSettingReqHolidayHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteSettingReqHolidayHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteSettingReqHolidayHoursOverflow as json.
func (o OptUpdateSiteSettingReqHolidayHoursOverflow) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteSettingReqHolidayHoursOverflow from json.
func (o *OptUpdateSiteSettingReqHolidayHoursOverflow) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteSettingReqHolidayHoursOverflow to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteSettingReqHolidayHoursOverflow) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteSettingReqHolidayHoursOverflow) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteSettingReqHolidayHoursOverflowOperator as json.
func (o OptUpdateSiteSettingReqHolidayHoursOverflowOperator) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteSettingReqHolidayHoursOverflowOperator from json.
func (o *OptUpdateSiteSettingReqHolidayHoursOverflowOperator) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteSettingReqHolidayHoursOverflowOperator to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteSettingReqHolidayHoursOverflowOperator) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteSettingReqHolidayHoursOverflowOperator) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteSettingReqLocationBasedRouting as json.
func (o OptUpdateSiteSettingReqLocationBasedRouting) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteSettingReqLocationBasedRouting from json.
func (o *OptUpdateSiteSettingReqLocationBasedRouting) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteSettingReqLocationBasedRouting to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteSettingReqLocationBasedRouting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteSettingReqLocationBasedRouting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateSiteSettingReqOutboundCallerID as json.
func (o OptUpdateSiteSettingReqOutboundCallerID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateSiteSettingReqOutboundCallerID from json.
func (o *OptUpdateSiteSettingReqOutboundCallerID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateSiteSettingReqOutboundCallerID to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateSiteSettingReqOutboundCallerID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateSiteSettingReqOutboundCallerID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateUserOutboundCallingCountriesOrRegionsReq as json.
func (o OptUpdateUserOutboundCallingCountriesOrRegionsReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateUserOutboundCallingCountriesOrRegionsReq from json.
func (o *OptUpdateUserOutboundCallingCountriesOrRegionsReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateUserOutboundCallingCountriesOrRegionsReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateUserOutboundCallingCountriesOrRegionsReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateUserOutboundCallingCountriesOrRegionsReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateUserOutboundCallingExceptionRuleReq as json.
func (o OptUpdateUserOutboundCallingExceptionRuleReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateUserOutboundCallingExceptionRuleReq from json.
func (o *OptUpdateUserOutboundCallingExceptionRuleReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateUserOutboundCallingExceptionRuleReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateUserOutboundCallingExceptionRuleReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateUserOutboundCallingExceptionRuleReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateUserOutboundCallingExceptionRuleReqExceptionRule as json.
func (o OptUpdateUserOutboundCallingExceptionRuleReqExceptionRule) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateUserOutboundCallingExceptionRuleReqExceptionRule from json.
func (o *OptUpdateUserOutboundCallingExceptionRuleReqExceptionRule) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateUserOutboundCallingExceptionRuleReqExceptionRule to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateUserOutboundCallingExceptionRuleReqExceptionRule) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateUserOutboundCallingExceptionRuleReqExceptionRule) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateUserProfileReq as json.
func (o OptUpdateUserProfileReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateUserProfileReq from json.
func (o *OptUpdateUserProfileReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateUserProfileReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateUserProfileReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateUserProfileReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateUserProfileReqPolicy as json.
func (o OptUpdateUserProfileReqPolicy) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateUserProfileReqPolicy from json.
func (o *OptUpdateUserProfileReqPolicy) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateUserProfileReqPolicy to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateUserProfileReqPolicy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateUserProfileReqPolicy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateUserProfileReqPolicyAdHocCallRecording as json.
func (o OptUpdateUserProfileReqPolicyAdHocCallRecording) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateUserProfileReqPolicyAdHocCallRecording from json.
func (o *OptUpdateUserProfileReqPolicyAdHocCallRecording) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateUserProfileReqPolicyAdHocCallRecording to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateUserProfileReqPolicyAdHocCallRecording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateUserProfileReqPolicyAdHocCallRecording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateUserProfileReqPolicyAdHocCallRecordingPlayRecordingBeepTone as json.
func (o OptUpdateUserProfileReqPolicyAdHocCallRecordingPlayRecordingBeepTone) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateUserProfileReqPolicyAdHocCallRecordingPlayRecordingBeepTone from json.
func (o *OptUpdateUserProfileReqPolicyAdHocCallRecordingPlayRecordingBeepTone) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateUserProfileReqPolicyAdHocCallRecordingPlayRecordingBeepTone to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateUserProfileReqPolicyAdHocCallRecordingPlayRecordingBeepTone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateUserProfileReqPolicyAdHocCallRecordingPlayRecordingBeepTone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateUserProfileReqPolicyAudioIntercom as json.
func (o OptUpdateUserProfileReqPolicyAudioIntercom) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateUserProfileReqPolicyAudioIntercom from json.
func (o *OptUpdateUserProfileReqPolicyAudioIntercom) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateUserProfileReqPolicyAudioIntercom to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateUserProfileReqPolicyAudioIntercom) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateUserProfileReqPolicyAudioIntercom) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateUserProfileReqPolicyAutoCallRecording as json.
func (o OptUpdateUserProfileReqPolicyAutoCallRecording) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateUserProfileReqPolicyAutoCallRecording from json.
func (o *OptUpdateUserProfileReqPolicyAutoCallRecording) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateUserProfileReqPolicyAutoCallRecording to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateUserProfileReqPolicyAutoCallRecording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateUserProfileReqPolicyAutoCallRecording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateUserProfileReqPolicyAutoCallRecordingPlayRecordingBeepTone as json.
func (o OptUpdateUserProfileReqPolicyAutoCallRecordingPlayRecordingBeepTone) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateUserProfileReqPolicyAutoCallRecordingPlayRecordingBeepTone from json.
func (o *OptUpdateUserProfileReqPolicyAutoCallRecordingPlayRecordingBeepTone) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateUserProfileReqPolicyAutoCallRecordingPlayRecordingBeepTone to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateUserProfileReqPolicyAutoCallRecordingPlayRecordingBeepTone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateUserProfileReqPolicyAutoCallRecordingPlayRecordingBeepTone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateUserProfileReqPolicyCallHandlingForwardingToOtherUsers as json.
func (o OptUpdateUserProfileReqPolicyCallHandlingForwardingToOtherUsers) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateUserProfileReqPolicyCallHandlingForwardingToOtherUsers from json.
func (o *OptUpdateUserProfileReqPolicyCallHandlingForwardingToOtherUsers) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateUserProfileReqPolicyCallHandlingForwardingToOtherUsers to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateUserProfileReqPolicyCallHandlingForwardingToOtherUsers) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateUserProfileReqPolicyCallHandlingForwardingToOtherUsers) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateUserProfileReqPolicyCallOverflow as json.
func (o OptUpdateUserProfileReqPolicyCallOverflow) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateUserProfileReqPolicyCallOverflow from json.
func (o *OptUpdateUserProfileReqPolicyCallOverflow) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateUserProfileReqPolicyCallOverflow to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateUserProfileReqPolicyCallOverflow) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateUserProfileReqPolicyCallOverflow) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateUserProfileReqPolicyCallPark as json.
func (o OptUpdateUserProfileReqPolicyCallPark) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateUserProfileReqPolicyCallPark from json.
func (o *OptUpdateUserProfileReqPolicyCallPark) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateUserProfileReqPolicyCallPark to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateUserProfileReqPolicyCallPark) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateUserProfileReqPolicyCallPark) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateUserProfileReqPolicyCallTransferring as json.
func (o OptUpdateUserProfileReqPolicyCallTransferring) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateUserProfileReqPolicyCallTransferring from json.
func (o *OptUpdateUserProfileReqPolicyCallTransferring) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateUserProfileReqPolicyCallTransferring to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateUserProfileReqPolicyCallTransferring) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateUserProfileReqPolicyCallTransferring) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateUserProfileReqPolicyCheckVoicemailsOverPhone as json.
func (o OptUpdateUserProfileReqPolicyCheckVoicemailsOverPhone) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateUserProfileReqPolicyCheckVoicemailsOverPhone from json.
func (o *OptUpdateUserProfileReqPolicyCheckVoicemailsOverPhone) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateUserProfileReqPolicyCheckVoicemailsOverPhone to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateUserProfileReqPolicyCheckVoicemailsOverPhone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateUserProfileReqPolicyCheckVoicemailsOverPhone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateUserProfileReqPolicyE2eEncryption as json.
func (o OptUpdateUserProfileReqPolicyE2eEncryption) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateUserProfileReqPolicyE2eEncryption from json.
func (o *OptUpdateUserProfileReqPolicyE2eEncryption) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateUserProfileReqPolicyE2eEncryption to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateUserProfileReqPolicyE2eEncryption) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateUserProfileReqPolicyE2eEncryption) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateUserProfileReqPolicyEmergencyAddressManagement as json.
func (o OptUpdateUserProfileReqPolicyEmergencyAddressManagement) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateUserProfileReqPolicyEmergencyAddressManagement from json.
func (o *OptUpdateUserProfileReqPolicyEmergencyAddressManagement) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateUserProfileReqPolicyEmergencyAddressManagement to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateUserProfileReqPolicyEmergencyAddressManagement) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateUserProfileReqPolicyEmergencyAddressManagement) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateUserProfileReqPolicyHandOffToRoom as json.
func (o OptUpdateUserProfileReqPolicyHandOffToRoom) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateUserProfileReqPolicyHandOffToRoom from json.
func (o *OptUpdateUserProfileReqPolicyHandOffToRoom) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateUserProfileReqPolicyHandOffToRoom to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateUserProfileReqPolicyHandOffToRoom) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateUserProfileReqPolicyHandOffToRoom) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateUserProfileReqPolicyMobileSwitchToCarrier as json.
func (o OptUpdateUserProfileReqPolicyMobileSwitchToCarrier) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateUserProfileReqPolicyMobileSwitchToCarrier from json.
func (o *OptUpdateUserProfileReqPolicyMobileSwitchToCarrier) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateUserProfileReqPolicyMobileSwitchToCarrier to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateUserProfileReqPolicyMobileSwitchToCarrier) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateUserProfileReqPolicyMobileSwitchToCarrier) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateUserProfileReqPolicyPersonalAudioLibrary as json.
func (o OptUpdateUserProfileReqPolicyPersonalAudioLibrary) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateUserProfileReqPolicyPersonalAudioLibrary from json.
func (o *OptUpdateUserProfileReqPolicyPersonalAudioLibrary) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateUserProfileReqPolicyPersonalAudioLibrary to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateUserProfileReqPolicyPersonalAudioLibrary) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateUserProfileReqPolicyPersonalAudioLibrary) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateUserProfileReqPolicySMS as json.
func (o OptUpdateUserProfileReqPolicySMS) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateUserProfileReqPolicySMS from json.
func (o *OptUpdateUserProfileReqPolicySMS) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateUserProfileReqPolicySMS to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateUserProfileReqPolicySMS) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateUserProfileReqPolicySMS) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateUserProfileReqPolicySelectOutboundCallerID as json.
func (o OptUpdateUserProfileReqPolicySelectOutboundCallerID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateUserProfileReqPolicySelectOutboundCallerID from json.
func (o *OptUpdateUserProfileReqPolicySelectOutboundCallerID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateUserProfileReqPolicySelectOutboundCallerID to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateUserProfileReqPolicySelectOutboundCallerID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateUserProfileReqPolicySelectOutboundCallerID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateUserProfileReqPolicySharedVoicemailNotificationByEmail as json.
func (o OptUpdateUserProfileReqPolicySharedVoicemailNotificationByEmail) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateUserProfileReqPolicySharedVoicemailNotificationByEmail from json.
func (o *OptUpdateUserProfileReqPolicySharedVoicemailNotificationByEmail) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateUserProfileReqPolicySharedVoicemailNotificationByEmail to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateUserProfileReqPolicySharedVoicemailNotificationByEmail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateUserProfileReqPolicySharedVoicemailNotificationByEmail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateUserProfileReqPolicyVoicemail as json.
func (o OptUpdateUserProfileReqPolicyVoicemail) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateUserProfileReqPolicyVoicemail from json.
func (o *OptUpdateUserProfileReqPolicyVoicemail) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateUserProfileReqPolicyVoicemail to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateUserProfileReqPolicyVoicemail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateUserProfileReqPolicyVoicemail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateUserProfileReqPolicyVoicemailNotificationByEmail as json.
func (o OptUpdateUserProfileReqPolicyVoicemailNotificationByEmail) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateUserProfileReqPolicyVoicemailNotificationByEmail from json.
func (o *OptUpdateUserProfileReqPolicyVoicemailNotificationByEmail) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateUserProfileReqPolicyVoicemailNotificationByEmail to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateUserProfileReqPolicyVoicemailNotificationByEmail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateUserProfileReqPolicyVoicemailNotificationByEmail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateUserProfileReqPolicyVoicemailTranscription as json.
func (o OptUpdateUserProfileReqPolicyVoicemailTranscription) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateUserProfileReqPolicyVoicemailTranscription from json.
func (o *OptUpdateUserProfileReqPolicyVoicemailTranscription) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateUserProfileReqPolicyVoicemailTranscription to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateUserProfileReqPolicyVoicemailTranscription) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateUserProfileReqPolicyVoicemailTranscription) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateUserProfileReqPolicyZoomPhoneOnMobile as json.
func (o OptUpdateUserProfileReqPolicyZoomPhoneOnMobile) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateUserProfileReqPolicyZoomPhoneOnMobile from json.
func (o *OptUpdateUserProfileReqPolicyZoomPhoneOnMobile) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateUserProfileReqPolicyZoomPhoneOnMobile to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateUserProfileReqPolicyZoomPhoneOnMobile) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateUserProfileReqPolicyZoomPhoneOnMobile) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateUserSettingReq as json.
func (o OptUpdateUserSettingReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateUserSettingReq from json.
func (o *OptUpdateUserSettingReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateUserSettingReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateUserSettingReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateUserSettingReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateUserSettingReqDelegation as json.
func (o OptUpdateUserSettingReqDelegation) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateUserSettingReqDelegation from json.
func (o *OptUpdateUserSettingReqDelegation) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateUserSettingReqDelegation to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateUserSettingReqDelegation) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateUserSettingReqDelegation) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateUserSettingReqDeskPhone as json.
func (o OptUpdateUserSettingReqDeskPhone) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateUserSettingReqDeskPhone from json.
func (o *OptUpdateUserSettingReqDeskPhone) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateUserSettingReqDeskPhone to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateUserSettingReqDeskPhone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateUserSettingReqDeskPhone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateUserSettingReqDeskPhoneDevicesItemPolicy as json.
func (o OptUpdateUserSettingReqDeskPhoneDevicesItemPolicy) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateUserSettingReqDeskPhoneDevicesItemPolicy from json.
func (o *OptUpdateUserSettingReqDeskPhoneDevicesItemPolicy) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateUserSettingReqDeskPhoneDevicesItemPolicy to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateUserSettingReqDeskPhoneDevicesItemPolicy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateUserSettingReqDeskPhoneDevicesItemPolicy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateUserSettingReqDeskPhoneDevicesItemPolicyCallControl as json.
func (o OptUpdateUserSettingReqDeskPhoneDevicesItemPolicyCallControl) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateUserSettingReqDeskPhoneDevicesItemPolicyCallControl from json.
func (o *OptUpdateUserSettingReqDeskPhoneDevicesItemPolicyCallControl) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateUserSettingReqDeskPhoneDevicesItemPolicyCallControl to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateUserSettingReqDeskPhoneDevicesItemPolicyCallControl) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateUserSettingReqDeskPhoneDevicesItemPolicyCallControl) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateUserSettingReqDeskPhoneDevicesItemPolicyHotDesking as json.
func (o OptUpdateUserSettingReqDeskPhoneDevicesItemPolicyHotDesking) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateUserSettingReqDeskPhoneDevicesItemPolicyHotDesking from json.
func (o *OptUpdateUserSettingReqDeskPhoneDevicesItemPolicyHotDesking) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateUserSettingReqDeskPhoneDevicesItemPolicyHotDesking to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateUserSettingReqDeskPhoneDevicesItemPolicyHotDesking) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateUserSettingReqDeskPhoneDevicesItemPolicyHotDesking) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateUserSettingReqIntercom as json.
func (o OptUpdateUserSettingReqIntercom) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateUserSettingReqIntercom from json.
func (o *OptUpdateUserSettingReqIntercom) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateUserSettingReqIntercom to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateUserSettingReqIntercom) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateUserSettingReqIntercom) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateUserSettingReqVoiceMail as json.
func (o OptUpdateUserSettingReqVoiceMail) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateUserSettingReqVoiceMail from json.
func (o *OptUpdateUserSettingReqVoiceMail) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateUserSettingReqVoiceMail to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateUserSettingReqVoiceMail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateUserSettingReqVoiceMail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateUserSettingsReq as json.
func (o OptUpdateUserSettingsReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateUserSettingsReq from json.
func (o *OptUpdateUserSettingsReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateUserSettingsReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateUserSettingsReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateUserSettingsReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateUsersPropertiesInBatchReq as json.
func (o OptUpdateUsersPropertiesInBatchReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateUsersPropertiesInBatchReq from json.
func (o *OptUpdateUsersPropertiesInBatchReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateUsersPropertiesInBatchReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateUsersPropertiesInBatchReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateUsersPropertiesInBatchReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateZoomRoomReq as json.
func (o OptUpdateZoomRoomReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateZoomRoomReq from json.
func (o *OptUpdateZoomRoomReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateZoomRoomReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateZoomRoomReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateZoomRoomReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateZoomRoomReqPolicy as json.
func (o OptUpdateZoomRoomReqPolicy) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateZoomRoomReqPolicy from json.
func (o *OptUpdateZoomRoomReqPolicy) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateZoomRoomReqPolicy to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateZoomRoomReqPolicy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateZoomRoomReqPolicy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateZoomRoomReqPolicyInternationalCalling as json.
func (o OptUpdateZoomRoomReqPolicyInternationalCalling) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateZoomRoomReqPolicyInternationalCalling from json.
func (o *OptUpdateZoomRoomReqPolicyInternationalCalling) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateZoomRoomReqPolicyInternationalCalling to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateZoomRoomReqPolicyInternationalCalling) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateZoomRoomReqPolicyInternationalCalling) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateZoomRoomReqPolicySelectOutboundCallerID as json.
func (o OptUpdateZoomRoomReqPolicySelectOutboundCallerID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateZoomRoomReqPolicySelectOutboundCallerID from json.
func (o *OptUpdateZoomRoomReqPolicySelectOutboundCallerID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateZoomRoomReqPolicySelectOutboundCallerID to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateZoomRoomReqPolicySelectOutboundCallerID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateZoomRoomReqPolicySelectOutboundCallerID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSmsSessionOKSMSSessionsItemParticipantsItemOwner as json.
func (o OptUserSmsSessionOKSMSSessionsItemParticipantsItemOwner) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSmsSessionOKSMSSessionsItemParticipantsItemOwner from json.
func (o *OptUserSmsSessionOKSMSSessionsItemParticipantsItemOwner) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSmsSessionOKSMSSessionsItemParticipantsItemOwner to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSmsSessionOKSMSSessionsItemParticipantsItemOwner) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSmsSessionOKSMSSessionsItemParticipantsItemOwner) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PatchCallHandlingSettingsCallForwarding) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PatchCallHandlingSettingsCallForwarding) encodeFields(e *jx.Encoder) {
	{
		if s.Settings.Set {
			e.FieldStart("settings")
			s.Settings.Encode(e)
		}
	}
	{
		if s.SubSettingType.Set {
			e.FieldStart("sub_setting_type")
			s.SubSettingType.Encode(e)
		}
	}
}

var jsonFieldsNameOfPatchCallHandlingSettingsCallForwarding = [2]string{
	0: "settings",
	1: "sub_setting_type",
}

// Decode decodes PatchCallHandlingSettingsCallForwarding from json.
func (s *PatchCallHandlingSettingsCallForwarding) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PatchCallHandlingSettingsCallForwarding to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "settings":
			if err := func() error {
				s.Settings.Reset()
				if err := s.Settings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"settings\"")
			}
		case "sub_setting_type":
			if err := func() error {
				s.SubSettingType.Reset()
				if err := s.SubSettingType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sub_setting_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PatchCallHandlingSettingsCallForwarding")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PatchCallHandlingSettingsCallForwarding) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PatchCallHandlingSettingsCallForwarding) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PatchCallHandlingSettingsCallForwardingSettings) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PatchCallHandlingSettingsCallForwardingSettings) encodeFields(e *jx.Encoder) {
	{
		if s.CallForwardingSettings != nil {
			e.FieldStart("call_forwarding_settings")
			e.ArrStart()
			for _, elem := range s.CallForwardingSettings {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.RequirePress1BeforeConnecting.Set {
			e.FieldStart("require_press_1_before_connecting")
			s.RequirePress1BeforeConnecting.Encode(e)
		}
	}
}

var jsonFieldsNameOfPatchCallHandlingSettingsCallForwardingSettings = [2]string{
	0: "call_forwarding_settings",
	1: "require_press_1_before_connecting",
}

// Decode decodes PatchCallHandlingSettingsCallForwardingSettings from json.
func (s *PatchCallHandlingSettingsCallForwardingSettings) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PatchCallHandlingSettingsCallForwardingSettings to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "call_forwarding_settings":
			if err := func() error {
				s.CallForwardingSettings = make([]PatchCallHandlingSettingsCallForwardingSettingsCallForwardingSettingsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PatchCallHandlingSettingsCallForwardingSettingsCallForwardingSettingsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CallForwardingSettings = append(s.CallForwardingSettings, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_forwarding_settings\"")
			}
		case "require_press_1_before_connecting":
			if err := func() error {
				s.RequirePress1BeforeConnecting.Reset()
				if err := s.RequirePress1BeforeConnecting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_press_1_before_connecting\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PatchCallHandlingSettingsCallForwardingSettings")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PatchCallHandlingSettingsCallForwardingSettings) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PatchCallHandlingSettingsCallForwardingSettings) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PatchCallHandlingSettingsCallForwardingSettingsCallForwardingSettingsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PatchCallHandlingSettingsCallForwardingSettingsCallForwardingSettingsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.PhoneNumber.Set {
			e.FieldStart("phone_number")
			s.PhoneNumber.Encode(e)
		}
	}
	{
		if s.ExternalContact.Set {
			e.FieldStart("external_contact")
			s.ExternalContact.Encode(e)
		}
	}
}

var jsonFieldsNameOfPatchCallHandlingSettingsCallForwardingSettingsCallForwardingSettingsItem = [5]string{
	0: "description",
	1: "enable",
	2: "id",
	3: "phone_number",
	4: "external_contact",
}

// Decode decodes PatchCallHandlingSettingsCallForwardingSettingsCallForwardingSettingsItem from json.
func (s *PatchCallHandlingSettingsCallForwardingSettingsCallForwardingSettingsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PatchCallHandlingSettingsCallForwardingSettingsCallForwardingSettingsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		case "external_contact":
			if err := func() error {
				s.ExternalContact.Reset()
				if err := s.ExternalContact.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"external_contact\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PatchCallHandlingSettingsCallForwardingSettingsCallForwardingSettingsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PatchCallHandlingSettingsCallForwardingSettingsCallForwardingSettingsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PatchCallHandlingSettingsCallForwardingSettingsCallForwardingSettingsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PatchCallHandlingSettingsCallForwardingSettingsCallForwardingSettingsItemExternalContact) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PatchCallHandlingSettingsCallForwardingSettingsCallForwardingSettingsItemExternalContact) encodeFields(e *jx.Encoder) {
	{
		if s.ExternalContactID.Set {
			e.FieldStart("external_contact_id")
			s.ExternalContactID.Encode(e)
		}
	}
}

var jsonFieldsNameOfPatchCallHandlingSettingsCallForwardingSettingsCallForwardingSettingsItemExternalContact = [1]string{
	0: "external_contact_id",
}

// Decode decodes PatchCallHandlingSettingsCallForwardingSettingsCallForwardingSettingsItemExternalContact from json.
func (s *PatchCallHandlingSettingsCallForwardingSettingsCallForwardingSettingsItemExternalContact) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PatchCallHandlingSettingsCallForwardingSettingsCallForwardingSettingsItemExternalContact to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "external_contact_id":
			if err := func() error {
				s.ExternalContactID.Reset()
				if err := s.ExternalContactID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"external_contact_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PatchCallHandlingSettingsCallForwardingSettingsCallForwardingSettingsItemExternalContact")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PatchCallHandlingSettingsCallForwardingSettingsCallForwardingSettingsItemExternalContact) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PatchCallHandlingSettingsCallForwardingSettingsCallForwardingSettingsItemExternalContact) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PatchCallHandlingSettingsCallHandling) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PatchCallHandlingSettingsCallHandling) encodeFields(e *jx.Encoder) {
	{
		if s.Settings.Set {
			e.FieldStart("settings")
			s.Settings.Encode(e)
		}
	}
	{
		if s.SubSettingType.Set {
			e.FieldStart("sub_setting_type")
			s.SubSettingType.Encode(e)
		}
	}
}

var jsonFieldsNameOfPatchCallHandlingSettingsCallHandling = [2]string{
	0: "settings",
	1: "sub_setting_type",
}

// Decode decodes PatchCallHandlingSettingsCallHandling from json.
func (s *PatchCallHandlingSettingsCallHandling) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PatchCallHandlingSettingsCallHandling to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "settings":
			if err := func() error {
				s.Settings.Reset()
				if err := s.Settings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"settings\"")
			}
		case "sub_setting_type":
			if err := func() error {
				s.SubSettingType.Reset()
				if err := s.SubSettingType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sub_setting_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PatchCallHandlingSettingsCallHandling")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PatchCallHandlingSettingsCallHandling) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PatchCallHandlingSettingsCallHandling) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PatchCallHandlingSettingsCallHandlingSettings) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PatchCallHandlingSettingsCallHandlingSettings) encodeFields(e *jx.Encoder) {
	{
		if s.AllowCallersCheckVoicemail.Set {
			e.FieldStart("allow_callers_check_voicemail")
			s.AllowCallersCheckVoicemail.Encode(e)
		}
	}
	{
		if s.AllowMembersToReset.Set {
			e.FieldStart("allow_members_to_reset")
			s.AllowMembersToReset.Encode(e)
		}
	}
	{
		if s.AudioWhileConnectingID.Set {
			e.FieldStart("audio_while_connecting_id")
			s.AudioWhileConnectingID.Encode(e)
		}
	}
	{
		if s.CallDistribution.Set {
			e.FieldStart("call_distribution")
			s.CallDistribution.Encode(e)
		}
	}
	{
		if s.CallNotAnswerAction.Set {
			e.FieldStart("call_not_answer_action")
			s.CallNotAnswerAction.Encode(e)
		}
	}
	{
		if s.BusyOnAnotherCallAction.Set {
			e.FieldStart("busy_on_another_call_action")
			s.BusyOnAnotherCallAction.Encode(e)
		}
	}
	{
		if s.BusyRequirePress1BeforeConnecting.Set {
			e.FieldStart("busy_require_press_1_before_connecting")
			s.BusyRequirePress1BeforeConnecting.Encode(e)
		}
	}
	{
		if s.UnAnsweredRequirePress1BeforeConnecting.Set {
			e.FieldStart("un_answered_require_press_1_before_connecting")
			s.UnAnsweredRequirePress1BeforeConnecting.Encode(e)
		}
	}
	{
		if s.OverflowPlayCalleeVoicemailGreeting.Set {
			e.FieldStart("overflow_play_callee_voicemail_greeting")
			s.OverflowPlayCalleeVoicemailGreeting.Encode(e)
		}
	}
	{
		if s.PlayCalleeVoicemailGreeting.Set {
			e.FieldStart("play_callee_voicemail_greeting")
			s.PlayCalleeVoicemailGreeting.Encode(e)
		}
	}
	{
		if s.BusyPlayCalleeVoicemailGreeting.Set {
			e.FieldStart("busy_play_callee_voicemail_greeting")
			s.BusyPlayCalleeVoicemailGreeting.Encode(e)
		}
	}
	{
		if s.PhoneNumber.Set {
			e.FieldStart("phone_number")
			s.PhoneNumber.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.BusyPhoneNumber.Set {
			e.FieldStart("busy_phone_number")
			s.BusyPhoneNumber.Encode(e)
		}
	}
	{
		if s.BusyDescription.Set {
			e.FieldStart("busy_description")
			s.BusyDescription.Encode(e)
		}
	}
	{
		if s.ConnectToOperator.Set {
			e.FieldStart("connect_to_operator")
			s.ConnectToOperator.Encode(e)
		}
	}
	{
		if s.ForwardToExtensionID.Set {
			e.FieldStart("forward_to_extension_id")
			s.ForwardToExtensionID.Encode(e)
		}
	}
	{
		if s.BusyForwardToExtensionID.Set {
			e.FieldStart("busy_forward_to_extension_id")
			s.BusyForwardToExtensionID.Encode(e)
		}
	}
	{
		if s.GreetingPromptID.Set {
			e.FieldStart("greeting_prompt_id")
			s.GreetingPromptID.Encode(e)
		}
	}
	{
		if s.MaxCallInQueue.Set {
			e.FieldStart("max_call_in_queue")
			s.MaxCallInQueue.Encode(e)
		}
	}
	{
		if s.MaxWaitTime.Set {
			e.FieldStart("max_wait_time")
			s.MaxWaitTime.Encode(e)
		}
	}
	{
		if s.MusicOnHoldID.Set {
			e.FieldStart("music_on_hold_id")
			s.MusicOnHoldID.Encode(e)
		}
	}
	{
		if s.OperatorExtensionID.Set {
			e.FieldStart("operator_extension_id")
			s.OperatorExtensionID.Encode(e)
		}
	}
	{
		if s.ReceiveCall.Set {
			e.FieldStart("receive_call")
			s.ReceiveCall.Encode(e)
		}
	}
	{
		if s.RingMode.Set {
			e.FieldStart("ring_mode")
			s.RingMode.Encode(e)
		}
	}
	{
		if s.VoicemailGreetingID.Set {
			e.FieldStart("voicemail_greeting_id")
			s.VoicemailGreetingID.Encode(e)
		}
	}
	{
		if s.WrapUpTime.Set {
			e.FieldStart("wrap_up_time")
			s.WrapUpTime.Encode(e)
		}
	}
}

var jsonFieldsNameOfPatchCallHandlingSettingsCallHandlingSettings = [27]string{
	0:  "allow_callers_check_voicemail",
	1:  "allow_members_to_reset",
	2:  "audio_while_connecting_id",
	3:  "call_distribution",
	4:  "call_not_answer_action",
	5:  "busy_on_another_call_action",
	6:  "busy_require_press_1_before_connecting",
	7:  "un_answered_require_press_1_before_connecting",
	8:  "overflow_play_callee_voicemail_greeting",
	9:  "play_callee_voicemail_greeting",
	10: "busy_play_callee_voicemail_greeting",
	11: "phone_number",
	12: "description",
	13: "busy_phone_number",
	14: "busy_description",
	15: "connect_to_operator",
	16: "forward_to_extension_id",
	17: "busy_forward_to_extension_id",
	18: "greeting_prompt_id",
	19: "max_call_in_queue",
	20: "max_wait_time",
	21: "music_on_hold_id",
	22: "operator_extension_id",
	23: "receive_call",
	24: "ring_mode",
	25: "voicemail_greeting_id",
	26: "wrap_up_time",
}

// Decode decodes PatchCallHandlingSettingsCallHandlingSettings from json.
func (s *PatchCallHandlingSettingsCallHandlingSettings) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PatchCallHandlingSettingsCallHandlingSettings to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allow_callers_check_voicemail":
			if err := func() error {
				s.AllowCallersCheckVoicemail.Reset()
				if err := s.AllowCallersCheckVoicemail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_callers_check_voicemail\"")
			}
		case "allow_members_to_reset":
			if err := func() error {
				s.AllowMembersToReset.Reset()
				if err := s.AllowMembersToReset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_members_to_reset\"")
			}
		case "audio_while_connecting_id":
			if err := func() error {
				s.AudioWhileConnectingID.Reset()
				if err := s.AudioWhileConnectingID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_while_connecting_id\"")
			}
		case "call_distribution":
			if err := func() error {
				s.CallDistribution.Reset()
				if err := s.CallDistribution.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_distribution\"")
			}
		case "call_not_answer_action":
			if err := func() error {
				s.CallNotAnswerAction.Reset()
				if err := s.CallNotAnswerAction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_not_answer_action\"")
			}
		case "busy_on_another_call_action":
			if err := func() error {
				s.BusyOnAnotherCallAction.Reset()
				if err := s.BusyOnAnotherCallAction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"busy_on_another_call_action\"")
			}
		case "busy_require_press_1_before_connecting":
			if err := func() error {
				s.BusyRequirePress1BeforeConnecting.Reset()
				if err := s.BusyRequirePress1BeforeConnecting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"busy_require_press_1_before_connecting\"")
			}
		case "un_answered_require_press_1_before_connecting":
			if err := func() error {
				s.UnAnsweredRequirePress1BeforeConnecting.Reset()
				if err := s.UnAnsweredRequirePress1BeforeConnecting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"un_answered_require_press_1_before_connecting\"")
			}
		case "overflow_play_callee_voicemail_greeting":
			if err := func() error {
				s.OverflowPlayCalleeVoicemailGreeting.Reset()
				if err := s.OverflowPlayCalleeVoicemailGreeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overflow_play_callee_voicemail_greeting\"")
			}
		case "play_callee_voicemail_greeting":
			if err := func() error {
				s.PlayCalleeVoicemailGreeting.Reset()
				if err := s.PlayCalleeVoicemailGreeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_callee_voicemail_greeting\"")
			}
		case "busy_play_callee_voicemail_greeting":
			if err := func() error {
				s.BusyPlayCalleeVoicemailGreeting.Reset()
				if err := s.BusyPlayCalleeVoicemailGreeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"busy_play_callee_voicemail_greeting\"")
			}
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "busy_phone_number":
			if err := func() error {
				s.BusyPhoneNumber.Reset()
				if err := s.BusyPhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"busy_phone_number\"")
			}
		case "busy_description":
			if err := func() error {
				s.BusyDescription.Reset()
				if err := s.BusyDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"busy_description\"")
			}
		case "connect_to_operator":
			if err := func() error {
				s.ConnectToOperator.Reset()
				if err := s.ConnectToOperator.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"connect_to_operator\"")
			}
		case "forward_to_extension_id":
			if err := func() error {
				s.ForwardToExtensionID.Reset()
				if err := s.ForwardToExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward_to_extension_id\"")
			}
		case "busy_forward_to_extension_id":
			if err := func() error {
				s.BusyForwardToExtensionID.Reset()
				if err := s.BusyForwardToExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"busy_forward_to_extension_id\"")
			}
		case "greeting_prompt_id":
			if err := func() error {
				s.GreetingPromptID.Reset()
				if err := s.GreetingPromptID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"greeting_prompt_id\"")
			}
		case "max_call_in_queue":
			if err := func() error {
				s.MaxCallInQueue.Reset()
				if err := s.MaxCallInQueue.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"max_call_in_queue\"")
			}
		case "max_wait_time":
			if err := func() error {
				s.MaxWaitTime.Reset()
				if err := s.MaxWaitTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"max_wait_time\"")
			}
		case "music_on_hold_id":
			if err := func() error {
				s.MusicOnHoldID.Reset()
				if err := s.MusicOnHoldID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"music_on_hold_id\"")
			}
		case "operator_extension_id":
			if err := func() error {
				s.OperatorExtensionID.Reset()
				if err := s.OperatorExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"operator_extension_id\"")
			}
		case "receive_call":
			if err := func() error {
				s.ReceiveCall.Reset()
				if err := s.ReceiveCall.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"receive_call\"")
			}
		case "ring_mode":
			if err := func() error {
				s.RingMode.Reset()
				if err := s.RingMode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ring_mode\"")
			}
		case "voicemail_greeting_id":
			if err := func() error {
				s.VoicemailGreetingID.Reset()
				if err := s.VoicemailGreetingID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voicemail_greeting_id\"")
			}
		case "wrap_up_time":
			if err := func() error {
				s.WrapUpTime.Reset()
				if err := s.WrapUpTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"wrap_up_time\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PatchCallHandlingSettingsCallHandlingSettings")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PatchCallHandlingSettingsCallHandlingSettings) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PatchCallHandlingSettingsCallHandlingSettings) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PatchCallHandlingSettingsCallHandlingSettingsCallDistribution) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PatchCallHandlingSettingsCallHandlingSettingsCallDistribution) encodeFields(e *jx.Encoder) {
	{
		if s.HandleMultipleCalls.Set {
			e.FieldStart("handle_multiple_calls")
			s.HandleMultipleCalls.Encode(e)
		}
	}
	{
		if s.RingDuration.Set {
			e.FieldStart("ring_duration")
			s.RingDuration.Encode(e)
		}
	}
	{
		if s.RingMode.Set {
			e.FieldStart("ring_mode")
			s.RingMode.Encode(e)
		}
	}
	{
		if s.SkipOfflineDevicePhoneNumber.Set {
			e.FieldStart("skip_offline_device_phone_number")
			s.SkipOfflineDevicePhoneNumber.Encode(e)
		}
	}
}

var jsonFieldsNameOfPatchCallHandlingSettingsCallHandlingSettingsCallDistribution = [4]string{
	0: "handle_multiple_calls",
	1: "ring_duration",
	2: "ring_mode",
	3: "skip_offline_device_phone_number",
}

// Decode decodes PatchCallHandlingSettingsCallHandlingSettingsCallDistribution from json.
func (s *PatchCallHandlingSettingsCallHandlingSettingsCallDistribution) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PatchCallHandlingSettingsCallHandlingSettingsCallDistribution to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "handle_multiple_calls":
			if err := func() error {
				s.HandleMultipleCalls.Reset()
				if err := s.HandleMultipleCalls.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"handle_multiple_calls\"")
			}
		case "ring_duration":
			if err := func() error {
				s.RingDuration.Reset()
				if err := s.RingDuration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ring_duration\"")
			}
		case "ring_mode":
			if err := func() error {
				s.RingMode.Reset()
				if err := s.RingMode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ring_mode\"")
			}
		case "skip_offline_device_phone_number":
			if err := func() error {
				s.SkipOfflineDevicePhoneNumber.Reset()
				if err := s.SkipOfflineDevicePhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"skip_offline_device_phone_number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PatchCallHandlingSettingsCallHandlingSettingsCallDistribution")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PatchCallHandlingSettingsCallHandlingSettingsCallDistribution) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PatchCallHandlingSettingsCallHandlingSettingsCallDistribution) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PatchCallHandlingSettingsCustomHours) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PatchCallHandlingSettingsCustomHours) encodeFields(e *jx.Encoder) {
	{
		if s.Settings.Set {
			e.FieldStart("settings")
			s.Settings.Encode(e)
		}
	}
	{
		if s.SubSettingType.Set {
			e.FieldStart("sub_setting_type")
			s.SubSettingType.Encode(e)
		}
	}
}

var jsonFieldsNameOfPatchCallHandlingSettingsCustomHours = [2]string{
	0: "settings",
	1: "sub_setting_type",
}

// Decode decodes PatchCallHandlingSettingsCustomHours from json.
func (s *PatchCallHandlingSettingsCustomHours) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PatchCallHandlingSettingsCustomHours to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "settings":
			if err := func() error {
				s.Settings.Reset()
				if err := s.Settings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"settings\"")
			}
		case "sub_setting_type":
			if err := func() error {
				s.SubSettingType.Reset()
				if err := s.SubSettingType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sub_setting_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PatchCallHandlingSettingsCustomHours")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PatchCallHandlingSettingsCustomHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PatchCallHandlingSettingsCustomHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PatchCallHandlingSettingsCustomHoursSettings) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PatchCallHandlingSettingsCustomHoursSettings) encodeFields(e *jx.Encoder) {
	{
		if s.AllowMembersToReset.Set {
			e.FieldStart("allow_members_to_reset")
			s.AllowMembersToReset.Encode(e)
		}
	}
	{
		if s.CustomHoursSettings != nil {
			e.FieldStart("custom_hours_settings")
			e.ArrStart()
			for _, elem := range s.CustomHoursSettings {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfPatchCallHandlingSettingsCustomHoursSettings = [3]string{
	0: "allow_members_to_reset",
	1: "custom_hours_settings",
	2: "type",
}

// Decode decodes PatchCallHandlingSettingsCustomHoursSettings from json.
func (s *PatchCallHandlingSettingsCustomHoursSettings) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PatchCallHandlingSettingsCustomHoursSettings to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allow_members_to_reset":
			if err := func() error {
				s.AllowMembersToReset.Reset()
				if err := s.AllowMembersToReset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_members_to_reset\"")
			}
		case "custom_hours_settings":
			if err := func() error {
				s.CustomHoursSettings = make([]PatchCallHandlingSettingsCustomHoursSettingsCustomHoursSettingsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PatchCallHandlingSettingsCustomHoursSettingsCustomHoursSettingsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CustomHoursSettings = append(s.CustomHoursSettings, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"custom_hours_settings\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PatchCallHandlingSettingsCustomHoursSettings")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PatchCallHandlingSettingsCustomHoursSettings) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PatchCallHandlingSettingsCustomHoursSettings) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PatchCallHandlingSettingsCustomHoursSettingsCustomHoursSettingsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PatchCallHandlingSettingsCustomHoursSettingsCustomHoursSettingsItem) encodeFields(e *jx.Encoder) {
	{
		if s.From.Set {
			e.FieldStart("from")
			s.From.Encode(e)
		}
	}
	{
		if s.To.Set {
			e.FieldStart("to")
			s.To.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.Weekday.Set {
			e.FieldStart("weekday")
			s.Weekday.Encode(e)
		}
	}
}

var jsonFieldsNameOfPatchCallHandlingSettingsCustomHoursSettingsCustomHoursSettingsItem = [4]string{
	0: "from",
	1: "to",
	2: "type",
	3: "weekday",
}

// Decode decodes PatchCallHandlingSettingsCustomHoursSettingsCustomHoursSettingsItem from json.
func (s *PatchCallHandlingSettingsCustomHoursSettingsCustomHoursSettingsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PatchCallHandlingSettingsCustomHoursSettingsCustomHoursSettingsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "from":
			if err := func() error {
				s.From.Reset()
				if err := s.From.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"from\"")
			}
		case "to":
			if err := func() error {
				s.To.Reset()
				if err := s.To.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"to\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "weekday":
			if err := func() error {
				s.Weekday.Reset()
				if err := s.Weekday.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"weekday\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PatchCallHandlingSettingsCustomHoursSettingsCustomHoursSettingsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PatchCallHandlingSettingsCustomHoursSettingsCustomHoursSettingsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PatchCallHandlingSettingsCustomHoursSettingsCustomHoursSettingsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PatchCallHandlingSettingsHoliday) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PatchCallHandlingSettingsHoliday) encodeFields(e *jx.Encoder) {
	{
		if s.Settings.Set {
			e.FieldStart("settings")
			s.Settings.Encode(e)
		}
	}
	{
		if s.SubSettingType.Set {
			e.FieldStart("sub_setting_type")
			s.SubSettingType.Encode(e)
		}
	}
}

var jsonFieldsNameOfPatchCallHandlingSettingsHoliday = [2]string{
	0: "settings",
	1: "sub_setting_type",
}

// Decode decodes PatchCallHandlingSettingsHoliday from json.
func (s *PatchCallHandlingSettingsHoliday) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PatchCallHandlingSettingsHoliday to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "settings":
			if err := func() error {
				s.Settings.Reset()
				if err := s.Settings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"settings\"")
			}
		case "sub_setting_type":
			if err := func() error {
				s.SubSettingType.Reset()
				if err := s.SubSettingType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sub_setting_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PatchCallHandlingSettingsHoliday")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PatchCallHandlingSettingsHoliday) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PatchCallHandlingSettingsHoliday) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PatchCallHandlingSettingsHolidaySettings) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PatchCallHandlingSettingsHolidaySettings) encodeFields(e *jx.Encoder) {
	{
		if s.From.Set {
			e.FieldStart("from")
			s.From.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.HolidayID.Set {
			e.FieldStart("holiday_id")
			s.HolidayID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.To.Set {
			e.FieldStart("to")
			s.To.Encode(e, json.EncodeDateTime)
		}
	}
}

var jsonFieldsNameOfPatchCallHandlingSettingsHolidaySettings = [4]string{
	0: "from",
	1: "holiday_id",
	2: "name",
	3: "to",
}

// Decode decodes PatchCallHandlingSettingsHolidaySettings from json.
func (s *PatchCallHandlingSettingsHolidaySettings) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PatchCallHandlingSettingsHolidaySettings to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "from":
			if err := func() error {
				s.From.Reset()
				if err := s.From.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"from\"")
			}
		case "holiday_id":
			if err := func() error {
				s.HolidayID.Reset()
				if err := s.HolidayID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holiday_id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "to":
			if err := func() error {
				s.To.Reset()
				if err := s.To.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"to\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PatchCallHandlingSettingsHolidaySettings")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PatchCallHandlingSettingsHolidaySettings) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PatchCallHandlingSettingsHolidaySettings) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneSettingOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneSettingOK) encodeFields(e *jx.Encoder) {
	{
		if s.Byoc.Set {
			e.FieldStart("byoc")
			s.Byoc.Encode(e)
		}
	}
	{
		if s.Country.Set {
			e.FieldStart("country")
			s.Country.Encode(e)
		}
	}
	{
		if s.MultipleSites.Set {
			e.FieldStart("multiple_sites")
			s.MultipleSites.Encode(e)
		}
	}
	{
		if s.ShowDeviceIPForCallLog.Set {
			e.FieldStart("show_device_ip_for_call_log")
			s.ShowDeviceIPForCallLog.Encode(e)
		}
	}
	{
		if s.MultiplePartyConference.Set {
			e.FieldStart("multiple_party_conference")
			s.MultiplePartyConference.Encode(e)
		}
	}
	{
		if s.BillingAccount.Set {
			e.FieldStart("billing_account")
			s.BillingAccount.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneSettingOK = [6]string{
	0: "byoc",
	1: "country",
	2: "multiple_sites",
	3: "show_device_ip_for_call_log",
	4: "multiple_party_conference",
	5: "billing_account",
}

// Decode decodes PhoneSettingOK from json.
func (s *PhoneSettingOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneSettingOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "byoc":
			if err := func() error {
				s.Byoc.Reset()
				if err := s.Byoc.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"byoc\"")
			}
		case "country":
			if err := func() error {
				s.Country.Reset()
				if err := s.Country.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country\"")
			}
		case "multiple_sites":
			if err := func() error {
				s.MultipleSites.Reset()
				if err := s.MultipleSites.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"multiple_sites\"")
			}
		case "show_device_ip_for_call_log":
			if err := func() error {
				s.ShowDeviceIPForCallLog.Reset()
				if err := s.ShowDeviceIPForCallLog.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"show_device_ip_for_call_log\"")
			}
		case "multiple_party_conference":
			if err := func() error {
				s.MultiplePartyConference.Reset()
				if err := s.MultiplePartyConference.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"multiple_party_conference\"")
			}
		case "billing_account":
			if err := func() error {
				s.BillingAccount.Reset()
				if err := s.BillingAccount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"billing_account\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneSettingOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneSettingOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneSettingOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneSettingOKBillingAccount) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneSettingOKBillingAccount) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneSettingOKBillingAccount = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes PhoneSettingOKBillingAccount from json.
func (s *PhoneSettingOKBillingAccount) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneSettingOKBillingAccount to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneSettingOKBillingAccount")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneSettingOKBillingAccount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneSettingOKBillingAccount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneSettingOKByoc) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneSettingOKByoc) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneSettingOKByoc = [1]string{
	0: "enable",
}

// Decode decodes PhoneSettingOKByoc from json.
func (s *PhoneSettingOKByoc) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneSettingOKByoc to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneSettingOKByoc")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneSettingOKByoc) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneSettingOKByoc) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneSettingOKCountry) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneSettingOKCountry) encodeFields(e *jx.Encoder) {
	{
		if s.Code.Set {
			e.FieldStart("code")
			s.Code.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneSettingOKCountry = [2]string{
	0: "code",
	1: "name",
}

// Decode decodes PhoneSettingOKCountry from json.
func (s *PhoneSettingOKCountry) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneSettingOKCountry to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "code":
			if err := func() error {
				s.Code.Reset()
				if err := s.Code.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneSettingOKCountry")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneSettingOKCountry) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneSettingOKCountry) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneSettingOKMultiplePartyConference) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneSettingOKMultiplePartyConference) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneSettingOKMultiplePartyConference = [1]string{
	0: "enable",
}

// Decode decodes PhoneSettingOKMultiplePartyConference from json.
func (s *PhoneSettingOKMultiplePartyConference) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneSettingOKMultiplePartyConference to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneSettingOKMultiplePartyConference")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneSettingOKMultiplePartyConference) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneSettingOKMultiplePartyConference) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneSettingOKMultipleSites) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneSettingOKMultipleSites) encodeFields(e *jx.Encoder) {
	{
		if s.Enabled.Set {
			e.FieldStart("enabled")
			s.Enabled.Encode(e)
		}
	}
	{
		if s.SiteCode.Set {
			e.FieldStart("site_code")
			s.SiteCode.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneSettingOKMultipleSites = [2]string{
	0: "enabled",
	1: "site_code",
}

// Decode decodes PhoneSettingOKMultipleSites from json.
func (s *PhoneSettingOKMultipleSites) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneSettingOKMultipleSites to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enabled":
			if err := func() error {
				s.Enabled.Reset()
				if err := s.Enabled.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enabled\"")
			}
		case "site_code":
			if err := func() error {
				s.SiteCode.Reset()
				if err := s.SiteCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_code\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneSettingOKMultipleSites")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneSettingOKMultipleSites) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneSettingOKMultipleSites) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneSettingOKShowDeviceIPForCallLog) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneSettingOKShowDeviceIPForCallLog) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneSettingOKShowDeviceIPForCallLog = [1]string{
	0: "enable",
}

// Decode decodes PhoneSettingOKShowDeviceIPForCallLog from json.
func (s *PhoneSettingOKShowDeviceIPForCallLog) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneSettingOKShowDeviceIPForCallLog to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneSettingOKShowDeviceIPForCallLog")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneSettingOKShowDeviceIPForCallLog) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneSettingOKShowDeviceIPForCallLog) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserCallLogsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserCallLogsOK) encodeFields(e *jx.Encoder) {
	{
		if s.CallLogs != nil {
			e.FieldStart("call_logs")
			e.ArrStart()
			for _, elem := range s.CallLogs {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.From.Set {
			e.FieldStart("from")
			s.From.Encode(e)
		}
	}
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageCount.Set {
			e.FieldStart("page_count")
			s.PageCount.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
	{
		if s.To.Set {
			e.FieldStart("to")
			s.To.Encode(e)
		}
	}
	{
		if s.TotalRecords.Set {
			e.FieldStart("total_records")
			s.TotalRecords.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserCallLogsOK = [7]string{
	0: "call_logs",
	1: "from",
	2: "next_page_token",
	3: "page_count",
	4: "page_size",
	5: "to",
	6: "total_records",
}

// Decode decodes PhoneUserCallLogsOK from json.
func (s *PhoneUserCallLogsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserCallLogsOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "call_logs":
			if err := func() error {
				s.CallLogs = make([]PhoneUserCallLogsOKCallLogsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PhoneUserCallLogsOKCallLogsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CallLogs = append(s.CallLogs, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_logs\"")
			}
		case "from":
			if err := func() error {
				s.From.Reset()
				if err := s.From.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"from\"")
			}
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_count":
			if err := func() error {
				s.PageCount.Reset()
				if err := s.PageCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_count\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		case "to":
			if err := func() error {
				s.To.Reset()
				if err := s.To.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"to\"")
			}
		case "total_records":
			if err := func() error {
				s.TotalRecords.Reset()
				if err := s.TotalRecords.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_records\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserCallLogsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserCallLogsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserCallLogsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserCallLogsOKCallLogsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserCallLogsOKCallLogsItem) encodeFields(e *jx.Encoder) {
	{
		if s.AcceptedBy.Set {
			e.FieldStart("accepted_by")
			s.AcceptedBy.Encode(e)
		}
	}
	{
		if s.AnswerStartTime.Set {
			e.FieldStart("answer_start_time")
			s.AnswerStartTime.Encode(e)
		}
	}
	{
		if s.CallEndTime.Set {
			e.FieldStart("call_end_time")
			s.CallEndTime.Encode(e)
		}
	}
	{
		if s.CallID.Set {
			e.FieldStart("call_id")
			s.CallID.Encode(e)
		}
	}
	{
		if s.CalleeCountryCode.Set {
			e.FieldStart("callee_country_code")
			s.CalleeCountryCode.Encode(e)
		}
	}
	{
		if s.CalleeCountryIsoCode.Set {
			e.FieldStart("callee_country_iso_code")
			s.CalleeCountryIsoCode.Encode(e)
		}
	}
	{
		if s.CalleeDidNumber.Set {
			e.FieldStart("callee_did_number")
			s.CalleeDidNumber.Encode(e)
		}
	}
	{
		if s.CalleeName.Set {
			e.FieldStart("callee_name")
			s.CalleeName.Encode(e)
		}
	}
	{
		if s.CalleeNumber.Set {
			e.FieldStart("callee_number")
			s.CalleeNumber.Encode(e)
		}
	}
	{
		if s.CalleeNumberType.Set {
			e.FieldStart("callee_number_type")
			s.CalleeNumberType.Encode(e)
		}
	}
	{
		if s.CalleeNumberSource.Set {
			e.FieldStart("callee_number_source")
			s.CalleeNumberSource.Encode(e)
		}
	}
	{
		if s.CallerCountryCode.Set {
			e.FieldStart("caller_country_code")
			s.CallerCountryCode.Encode(e)
		}
	}
	{
		if s.CallerCountryIsoCode.Set {
			e.FieldStart("caller_country_iso_code")
			s.CallerCountryIsoCode.Encode(e)
		}
	}
	{
		if s.CallerDidNumber.Set {
			e.FieldStart("caller_did_number")
			s.CallerDidNumber.Encode(e)
		}
	}
	{
		if s.CallerName.Set {
			e.FieldStart("caller_name")
			s.CallerName.Encode(e)
		}
	}
	{
		if s.CallerNumber.Set {
			e.FieldStart("caller_number")
			s.CallerNumber.Encode(e)
		}
	}
	{
		if s.CallerNumberType.Set {
			e.FieldStart("caller_number_type")
			s.CallerNumberType.Encode(e)
		}
	}
	{
		if s.CallerNumberSource.Set {
			e.FieldStart("caller_number_source")
			s.CallerNumberSource.Encode(e)
		}
	}
	{
		if s.CallerBillingReferenceID.Set {
			e.FieldStart("caller_billing_reference_id")
			s.CallerBillingReferenceID.Encode(e)
		}
	}
	{
		if s.Charge.Set {
			e.FieldStart("charge")
			s.Charge.Encode(e)
		}
	}
	{
		if s.ClientCode.Set {
			e.FieldStart("client_code")
			s.ClientCode.Encode(e)
		}
	}
	{
		if s.DateTime.Set {
			e.FieldStart("date_time")
			s.DateTime.Encode(e)
		}
	}
	{
		if s.Direction.Set {
			e.FieldStart("direction")
			s.Direction.Encode(e)
		}
	}
	{
		if s.Duration.Set {
			e.FieldStart("duration")
			s.Duration.Encode(e)
		}
	}
	{
		if s.ForwardedBy.Set {
			e.FieldStart("forwarded_by")
			s.ForwardedBy.Encode(e)
		}
	}
	{
		if s.ForwardedTo.Set {
			e.FieldStart("forwarded_to")
			s.ForwardedTo.Encode(e)
		}
	}
	{
		if s.HasRecording.Set {
			e.FieldStart("has_recording")
			s.HasRecording.Encode(e)
		}
	}
	{
		if s.HasVoicemail.Set {
			e.FieldStart("has_voicemail")
			s.HasVoicemail.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.OutgoingBy.Set {
			e.FieldStart("outgoing_by")
			s.OutgoingBy.Encode(e)
		}
	}
	{
		if s.Path.Set {
			e.FieldStart("path")
			s.Path.Encode(e)
		}
	}
	{
		if s.Rate.Set {
			e.FieldStart("rate")
			s.Rate.Encode(e)
		}
	}
	{
		if s.RecordingType.Set {
			e.FieldStart("recording_type")
			s.RecordingType.Encode(e)
		}
	}
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Site.Set {
			e.FieldStart("site")
			s.Site.Encode(e)
		}
	}
	{
		if s.UserID.Set {
			e.FieldStart("user_id")
			s.UserID.Encode(e)
		}
	}
	{
		if s.HoldTime.Set {
			e.FieldStart("hold_time")
			s.HoldTime.Encode(e)
		}
	}
	{
		if s.WaitingTime.Set {
			e.FieldStart("waiting_time")
			s.WaitingTime.Encode(e)
		}
	}
	{
		if s.Department.Set {
			e.FieldStart("department")
			s.Department.Encode(e)
		}
	}
	{
		if s.CostCenter.Set {
			e.FieldStart("cost_center")
			s.CostCenter.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserCallLogsOKCallLogsItem = [40]string{
	0:  "accepted_by",
	1:  "answer_start_time",
	2:  "call_end_time",
	3:  "call_id",
	4:  "callee_country_code",
	5:  "callee_country_iso_code",
	6:  "callee_did_number",
	7:  "callee_name",
	8:  "callee_number",
	9:  "callee_number_type",
	10: "callee_number_source",
	11: "caller_country_code",
	12: "caller_country_iso_code",
	13: "caller_did_number",
	14: "caller_name",
	15: "caller_number",
	16: "caller_number_type",
	17: "caller_number_source",
	18: "caller_billing_reference_id",
	19: "charge",
	20: "client_code",
	21: "date_time",
	22: "direction",
	23: "duration",
	24: "forwarded_by",
	25: "forwarded_to",
	26: "has_recording",
	27: "has_voicemail",
	28: "id",
	29: "outgoing_by",
	30: "path",
	31: "rate",
	32: "recording_type",
	33: "result",
	34: "site",
	35: "user_id",
	36: "hold_time",
	37: "waiting_time",
	38: "department",
	39: "cost_center",
}

// Decode decodes PhoneUserCallLogsOKCallLogsItem from json.
func (s *PhoneUserCallLogsOKCallLogsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserCallLogsOKCallLogsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "accepted_by":
			if err := func() error {
				s.AcceptedBy.Reset()
				if err := s.AcceptedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"accepted_by\"")
			}
		case "answer_start_time":
			if err := func() error {
				s.AnswerStartTime.Reset()
				if err := s.AnswerStartTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"answer_start_time\"")
			}
		case "call_end_time":
			if err := func() error {
				s.CallEndTime.Reset()
				if err := s.CallEndTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_end_time\"")
			}
		case "call_id":
			if err := func() error {
				s.CallID.Reset()
				if err := s.CallID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_id\"")
			}
		case "callee_country_code":
			if err := func() error {
				s.CalleeCountryCode.Reset()
				if err := s.CalleeCountryCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_country_code\"")
			}
		case "callee_country_iso_code":
			if err := func() error {
				s.CalleeCountryIsoCode.Reset()
				if err := s.CalleeCountryIsoCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_country_iso_code\"")
			}
		case "callee_did_number":
			if err := func() error {
				s.CalleeDidNumber.Reset()
				if err := s.CalleeDidNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_did_number\"")
			}
		case "callee_name":
			if err := func() error {
				s.CalleeName.Reset()
				if err := s.CalleeName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_name\"")
			}
		case "callee_number":
			if err := func() error {
				s.CalleeNumber.Reset()
				if err := s.CalleeNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_number\"")
			}
		case "callee_number_type":
			if err := func() error {
				s.CalleeNumberType.Reset()
				if err := s.CalleeNumberType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_number_type\"")
			}
		case "callee_number_source":
			if err := func() error {
				s.CalleeNumberSource.Reset()
				if err := s.CalleeNumberSource.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_number_source\"")
			}
		case "caller_country_code":
			if err := func() error {
				s.CallerCountryCode.Reset()
				if err := s.CallerCountryCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_country_code\"")
			}
		case "caller_country_iso_code":
			if err := func() error {
				s.CallerCountryIsoCode.Reset()
				if err := s.CallerCountryIsoCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_country_iso_code\"")
			}
		case "caller_did_number":
			if err := func() error {
				s.CallerDidNumber.Reset()
				if err := s.CallerDidNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_did_number\"")
			}
		case "caller_name":
			if err := func() error {
				s.CallerName.Reset()
				if err := s.CallerName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_name\"")
			}
		case "caller_number":
			if err := func() error {
				s.CallerNumber.Reset()
				if err := s.CallerNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_number\"")
			}
		case "caller_number_type":
			if err := func() error {
				s.CallerNumberType.Reset()
				if err := s.CallerNumberType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_number_type\"")
			}
		case "caller_number_source":
			if err := func() error {
				s.CallerNumberSource.Reset()
				if err := s.CallerNumberSource.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_number_source\"")
			}
		case "caller_billing_reference_id":
			if err := func() error {
				s.CallerBillingReferenceID.Reset()
				if err := s.CallerBillingReferenceID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_billing_reference_id\"")
			}
		case "charge":
			if err := func() error {
				s.Charge.Reset()
				if err := s.Charge.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"charge\"")
			}
		case "client_code":
			if err := func() error {
				s.ClientCode.Reset()
				if err := s.ClientCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_code\"")
			}
		case "date_time":
			if err := func() error {
				s.DateTime.Reset()
				if err := s.DateTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"date_time\"")
			}
		case "direction":
			if err := func() error {
				s.Direction.Reset()
				if err := s.Direction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"direction\"")
			}
		case "duration":
			if err := func() error {
				s.Duration.Reset()
				if err := s.Duration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"duration\"")
			}
		case "forwarded_by":
			if err := func() error {
				s.ForwardedBy.Reset()
				if err := s.ForwardedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forwarded_by\"")
			}
		case "forwarded_to":
			if err := func() error {
				s.ForwardedTo.Reset()
				if err := s.ForwardedTo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forwarded_to\"")
			}
		case "has_recording":
			if err := func() error {
				s.HasRecording.Reset()
				if err := s.HasRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"has_recording\"")
			}
		case "has_voicemail":
			if err := func() error {
				s.HasVoicemail.Reset()
				if err := s.HasVoicemail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"has_voicemail\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "outgoing_by":
			if err := func() error {
				s.OutgoingBy.Reset()
				if err := s.OutgoingBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"outgoing_by\"")
			}
		case "path":
			if err := func() error {
				s.Path.Reset()
				if err := s.Path.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"path\"")
			}
		case "rate":
			if err := func() error {
				s.Rate.Reset()
				if err := s.Rate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rate\"")
			}
		case "recording_type":
			if err := func() error {
				s.RecordingType.Reset()
				if err := s.RecordingType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_type\"")
			}
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "site":
			if err := func() error {
				s.Site.Reset()
				if err := s.Site.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site\"")
			}
		case "user_id":
			if err := func() error {
				s.UserID.Reset()
				if err := s.UserID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"user_id\"")
			}
		case "hold_time":
			if err := func() error {
				s.HoldTime.Reset()
				if err := s.HoldTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hold_time\"")
			}
		case "waiting_time":
			if err := func() error {
				s.WaitingTime.Reset()
				if err := s.WaitingTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"waiting_time\"")
			}
		case "department":
			if err := func() error {
				s.Department.Reset()
				if err := s.Department.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"department\"")
			}
		case "cost_center":
			if err := func() error {
				s.CostCenter.Reset()
				if err := s.CostCenter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cost_center\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserCallLogsOKCallLogsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserCallLogsOKCallLogsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserCallLogsOKCallLogsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserCallLogsOKCallLogsItemAcceptedBy) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserCallLogsOKCallLogsItemAcceptedBy) encodeFields(e *jx.Encoder) {
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.Location.Set {
			e.FieldStart("location")
			s.Location.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.NumberType.Set {
			e.FieldStart("number_type")
			s.NumberType.Encode(e)
		}
	}
	{
		if s.PhoneNumber.Set {
			e.FieldStart("phone_number")
			s.PhoneNumber.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserCallLogsOKCallLogsItemAcceptedBy = [5]string{
	0: "extension_number",
	1: "location",
	2: "name",
	3: "number_type",
	4: "phone_number",
}

// Decode decodes PhoneUserCallLogsOKCallLogsItemAcceptedBy from json.
func (s *PhoneUserCallLogsOKCallLogsItemAcceptedBy) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserCallLogsOKCallLogsItemAcceptedBy to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "location":
			if err := func() error {
				s.Location.Reset()
				if err := s.Location.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"location\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "number_type":
			if err := func() error {
				s.NumberType.Reset()
				if err := s.NumberType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number_type\"")
			}
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserCallLogsOKCallLogsItemAcceptedBy")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserCallLogsOKCallLogsItemAcceptedBy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserCallLogsOKCallLogsItemAcceptedBy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserCallLogsOKCallLogsItemForwardedBy) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserCallLogsOKCallLogsItemForwardedBy) encodeFields(e *jx.Encoder) {
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ExtensionType.Set {
			e.FieldStart("extension_type")
			s.ExtensionType.Encode(e)
		}
	}
	{
		if s.Location.Set {
			e.FieldStart("location")
			s.Location.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.NumberType.Set {
			e.FieldStart("number_type")
			s.NumberType.Encode(e)
		}
	}
	{
		if s.PhoneNumber.Set {
			e.FieldStart("phone_number")
			s.PhoneNumber.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserCallLogsOKCallLogsItemForwardedBy = [6]string{
	0: "extension_number",
	1: "extension_type",
	2: "location",
	3: "name",
	4: "number_type",
	5: "phone_number",
}

// Decode decodes PhoneUserCallLogsOKCallLogsItemForwardedBy from json.
func (s *PhoneUserCallLogsOKCallLogsItemForwardedBy) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserCallLogsOKCallLogsItemForwardedBy to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "extension_type":
			if err := func() error {
				s.ExtensionType.Reset()
				if err := s.ExtensionType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_type\"")
			}
		case "location":
			if err := func() error {
				s.Location.Reset()
				if err := s.Location.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"location\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "number_type":
			if err := func() error {
				s.NumberType.Reset()
				if err := s.NumberType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number_type\"")
			}
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserCallLogsOKCallLogsItemForwardedBy")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserCallLogsOKCallLogsItemForwardedBy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserCallLogsOKCallLogsItemForwardedBy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserCallLogsOKCallLogsItemForwardedTo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserCallLogsOKCallLogsItemForwardedTo) encodeFields(e *jx.Encoder) {
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.Location.Set {
			e.FieldStart("location")
			s.Location.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.NumberType.Set {
			e.FieldStart("number_type")
			s.NumberType.Encode(e)
		}
	}
	{
		if s.PhoneNumber.Set {
			e.FieldStart("phone_number")
			s.PhoneNumber.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserCallLogsOKCallLogsItemForwardedTo = [5]string{
	0: "extension_number",
	1: "location",
	2: "name",
	3: "number_type",
	4: "phone_number",
}

// Decode decodes PhoneUserCallLogsOKCallLogsItemForwardedTo from json.
func (s *PhoneUserCallLogsOKCallLogsItemForwardedTo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserCallLogsOKCallLogsItemForwardedTo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "location":
			if err := func() error {
				s.Location.Reset()
				if err := s.Location.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"location\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "number_type":
			if err := func() error {
				s.NumberType.Reset()
				if err := s.NumberType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number_type\"")
			}
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserCallLogsOKCallLogsItemForwardedTo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserCallLogsOKCallLogsItemForwardedTo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserCallLogsOKCallLogsItemForwardedTo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserCallLogsOKCallLogsItemOutgoingBy) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserCallLogsOKCallLogsItemOutgoingBy) encodeFields(e *jx.Encoder) {
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.Location.Set {
			e.FieldStart("location")
			s.Location.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.NumberType.Set {
			e.FieldStart("number_type")
			s.NumberType.Encode(e)
		}
	}
	{
		if s.PhoneNumber.Set {
			e.FieldStart("phone_number")
			s.PhoneNumber.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserCallLogsOKCallLogsItemOutgoingBy = [5]string{
	0: "extension_number",
	1: "location",
	2: "name",
	3: "number_type",
	4: "phone_number",
}

// Decode decodes PhoneUserCallLogsOKCallLogsItemOutgoingBy from json.
func (s *PhoneUserCallLogsOKCallLogsItemOutgoingBy) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserCallLogsOKCallLogsItemOutgoingBy to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "location":
			if err := func() error {
				s.Location.Reset()
				if err := s.Location.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"location\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "number_type":
			if err := func() error {
				s.NumberType.Reset()
				if err := s.NumberType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number_type\"")
			}
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserCallLogsOKCallLogsItemOutgoingBy")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserCallLogsOKCallLogsItemOutgoingBy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserCallLogsOKCallLogsItemOutgoingBy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserCallLogsOKCallLogsItemSite) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserCallLogsOKCallLogsItemSite) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserCallLogsOKCallLogsItemSite = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes PhoneUserCallLogsOKCallLogsItemSite from json.
func (s *PhoneUserCallLogsOKCallLogsItemSite) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserCallLogsOKCallLogsItemSite to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserCallLogsOKCallLogsItemSite")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserCallLogsOKCallLogsItemSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserCallLogsOKCallLogsItemSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserOK) encodeFields(e *jx.Encoder) {
	{
		if s.CallingPlans != nil {
			e.FieldStart("calling_plans")
			e.ArrStart()
			for _, elem := range s.CallingPlans {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.CostCenter.Set {
			e.FieldStart("cost_center")
			s.CostCenter.Encode(e)
		}
	}
	{
		if s.Department.Set {
			e.FieldStart("department")
			s.Department.Encode(e)
		}
	}
	{
		if s.Email.Set {
			e.FieldStart("email")
			s.Email.Encode(e)
		}
	}
	{
		if s.EmergencyAddress.Set {
			e.FieldStart("emergency_address")
			s.EmergencyAddress.Encode(e)
		}
	}
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.PhoneNumbers != nil {
			e.FieldStart("phone_numbers")
			e.ArrStart()
			for _, elem := range s.PhoneNumbers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.PhoneUserID.Set {
			e.FieldStart("phone_user_id")
			s.PhoneUserID.Encode(e)
		}
	}
	{
		if s.Policy.Set {
			e.FieldStart("policy")
			s.Policy.Encode(e)
		}
	}
	{
		if s.SiteAdmin.Set {
			e.FieldStart("site_admin")
			s.SiteAdmin.Encode(e)
		}
	}
	{
		if s.SiteID.Set {
			e.FieldStart("site_id")
			s.SiteID.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserOK = [14]string{
	0:  "calling_plans",
	1:  "cost_center",
	2:  "department",
	3:  "email",
	4:  "emergency_address",
	5:  "extension_id",
	6:  "extension_number",
	7:  "id",
	8:  "phone_numbers",
	9:  "phone_user_id",
	10: "policy",
	11: "site_admin",
	12: "site_id",
	13: "status",
}

// Decode decodes PhoneUserOK from json.
func (s *PhoneUserOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "calling_plans":
			if err := func() error {
				s.CallingPlans = make([]PhoneUserOKCallingPlansItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PhoneUserOKCallingPlansItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CallingPlans = append(s.CallingPlans, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"calling_plans\"")
			}
		case "cost_center":
			if err := func() error {
				s.CostCenter.Reset()
				if err := s.CostCenter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cost_center\"")
			}
		case "department":
			if err := func() error {
				s.Department.Reset()
				if err := s.Department.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"department\"")
			}
		case "email":
			if err := func() error {
				s.Email.Reset()
				if err := s.Email.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		case "emergency_address":
			if err := func() error {
				s.EmergencyAddress.Reset()
				if err := s.EmergencyAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"emergency_address\"")
			}
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "phone_numbers":
			if err := func() error {
				s.PhoneNumbers = make([]PhoneUserOKPhoneNumbersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PhoneUserOKPhoneNumbersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.PhoneNumbers = append(s.PhoneNumbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_numbers\"")
			}
		case "phone_user_id":
			if err := func() error {
				s.PhoneUserID.Reset()
				if err := s.PhoneUserID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_user_id\"")
			}
		case "policy":
			if err := func() error {
				s.Policy.Reset()
				if err := s.Policy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"policy\"")
			}
		case "site_admin":
			if err := func() error {
				s.SiteAdmin.Reset()
				if err := s.SiteAdmin.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_admin\"")
			}
		case "site_id":
			if err := func() error {
				s.SiteID.Reset()
				if err := s.SiteID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_id\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserOKCallingPlansItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserOKCallingPlansItem) encodeFields(e *jx.Encoder) {
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.BillingAccountID.Set {
			e.FieldStart("billing_account_id")
			s.BillingAccountID.Encode(e)
		}
	}
	{
		if s.BillingAccountName.Set {
			e.FieldStart("billing_account_name")
			s.BillingAccountName.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserOKCallingPlansItem = [3]string{
	0: "type",
	1: "billing_account_id",
	2: "billing_account_name",
}

// Decode decodes PhoneUserOKCallingPlansItem from json.
func (s *PhoneUserOKCallingPlansItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserOKCallingPlansItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "billing_account_id":
			if err := func() error {
				s.BillingAccountID.Reset()
				if err := s.BillingAccountID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"billing_account_id\"")
			}
		case "billing_account_name":
			if err := func() error {
				s.BillingAccountName.Reset()
				if err := s.BillingAccountName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"billing_account_name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserOKCallingPlansItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserOKCallingPlansItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserOKCallingPlansItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserOKEmergencyAddress) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserOKEmergencyAddress) encodeFields(e *jx.Encoder) {
	{
		if s.AddressLine1.Set {
			e.FieldStart("address_line1")
			s.AddressLine1.Encode(e)
		}
	}
	{
		if s.AddressLine2.Set {
			e.FieldStart("address_line2")
			s.AddressLine2.Encode(e)
		}
	}
	{
		if s.City.Set {
			e.FieldStart("city")
			s.City.Encode(e)
		}
	}
	{
		if s.Country.Set {
			e.FieldStart("country")
			s.Country.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.StateCode.Set {
			e.FieldStart("state_code")
			s.StateCode.Encode(e)
		}
	}
	{
		if s.Zip.Set {
			e.FieldStart("zip")
			s.Zip.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserOKEmergencyAddress = [7]string{
	0: "address_line1",
	1: "address_line2",
	2: "city",
	3: "country",
	4: "id",
	5: "state_code",
	6: "zip",
}

// Decode decodes PhoneUserOKEmergencyAddress from json.
func (s *PhoneUserOKEmergencyAddress) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserOKEmergencyAddress to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "address_line1":
			if err := func() error {
				s.AddressLine1.Reset()
				if err := s.AddressLine1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"address_line1\"")
			}
		case "address_line2":
			if err := func() error {
				s.AddressLine2.Reset()
				if err := s.AddressLine2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"address_line2\"")
			}
		case "city":
			if err := func() error {
				s.City.Reset()
				if err := s.City.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"city\"")
			}
		case "country":
			if err := func() error {
				s.Country.Reset()
				if err := s.Country.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "state_code":
			if err := func() error {
				s.StateCode.Reset()
				if err := s.StateCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"state_code\"")
			}
		case "zip":
			if err := func() error {
				s.Zip.Reset()
				if err := s.Zip.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zip\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserOKEmergencyAddress")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserOKEmergencyAddress) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserOKEmergencyAddress) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserOKPhoneNumbersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserOKPhoneNumbersItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Number.Set {
			e.FieldStart("number")
			s.Number.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserOKPhoneNumbersItem = [2]string{
	0: "id",
	1: "number",
}

// Decode decodes PhoneUserOKPhoneNumbersItem from json.
func (s *PhoneUserOKPhoneNumbersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserOKPhoneNumbersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "number":
			if err := func() error {
				s.Number.Reset()
				if err := s.Number.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserOKPhoneNumbersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserOKPhoneNumbersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserOKPhoneNumbersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserOKPolicy) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserOKPolicy) encodeFields(e *jx.Encoder) {
	{
		if s.AdHocCallRecording.Set {
			e.FieldStart("ad_hoc_call_recording")
			s.AdHocCallRecording.Encode(e)
		}
	}
	{
		if s.AdHocCallRecordingAccessMembers != nil {
			e.FieldStart("ad_hoc_call_recording_access_members")
			e.ArrStart()
			for _, elem := range s.AdHocCallRecordingAccessMembers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.AutoCallRecording.Set {
			e.FieldStart("auto_call_recording")
			s.AutoCallRecording.Encode(e)
		}
	}
	{
		if s.AutoCallRecordingAccessMembers != nil {
			e.FieldStart("auto_call_recording_access_members")
			e.ArrStart()
			for _, elem := range s.AutoCallRecordingAccessMembers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.CallOverflow.Set {
			e.FieldStart("call_overflow")
			s.CallOverflow.Encode(e)
		}
	}
	{
		if s.CallPark.Set {
			e.FieldStart("call_park")
			s.CallPark.Encode(e)
		}
	}
	{
		if s.CallTransferring.Set {
			e.FieldStart("call_transferring")
			s.CallTransferring.Encode(e)
		}
	}
	{
		if s.Delegation.Set {
			e.FieldStart("delegation")
			s.Delegation.Encode(e)
		}
	}
	{
		if s.ElevateToMeeting.Set {
			e.FieldStart("elevate_to_meeting")
			s.ElevateToMeeting.Encode(e)
		}
	}
	{
		if s.EmergencyAddressManagement.Set {
			e.FieldStart("emergency_address_management")
			s.EmergencyAddressManagement.Encode(e)
		}
	}
	{
		if s.EmergencyCallsToPsap.Set {
			e.FieldStart("emergency_calls_to_psap")
			s.EmergencyCallsToPsap.Encode(e)
		}
	}
	{
		if s.ForwardingToExternalNumbers.Set {
			e.FieldStart("forwarding_to_external_numbers")
			s.ForwardingToExternalNumbers.Encode(e)
		}
	}
	{
		if s.CallHandlingForwardingToOtherUsers.Set {
			e.FieldStart("call_handling_forwarding_to_other_users")
			s.CallHandlingForwardingToOtherUsers.Encode(e)
		}
	}
	{
		if s.HandOffToRoom.Set {
			e.FieldStart("hand_off_to_room")
			s.HandOffToRoom.Encode(e)
		}
	}
	{
		if s.InternationalCalling.Set {
			e.FieldStart("international_calling")
			s.InternationalCalling.Encode(e)
		}
	}
	{
		if s.MobileSwitchToCarrier.Set {
			e.FieldStart("mobile_switch_to_carrier")
			s.MobileSwitchToCarrier.Encode(e)
		}
	}
	{
		if s.SelectOutboundCallerID.Set {
			e.FieldStart("select_outbound_caller_id")
			s.SelectOutboundCallerID.Encode(e)
		}
	}
	{
		if s.SMS.Set {
			e.FieldStart("sms")
			s.SMS.Encode(e)
		}
	}
	{
		if s.Voicemail.Set {
			e.FieldStart("voicemail")
			s.Voicemail.Encode(e)
		}
	}
	{
		if s.VoicemailAccessMembers != nil {
			e.FieldStart("voicemail_access_members")
			e.ArrStart()
			for _, elem := range s.VoicemailAccessMembers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ZoomPhoneOnMobile.Set {
			e.FieldStart("zoom_phone_on_mobile")
			s.ZoomPhoneOnMobile.Encode(e)
		}
	}
	{
		if s.PersonalAudioLibrary.Set {
			e.FieldStart("personal_audio_library")
			s.PersonalAudioLibrary.Encode(e)
		}
	}
	{
		if s.VoicemailTranscription.Set {
			e.FieldStart("voicemail_transcription")
			s.VoicemailTranscription.Encode(e)
		}
	}
	{
		if s.VoicemailNotificationByEmail.Set {
			e.FieldStart("voicemail_notification_by_email")
			s.VoicemailNotificationByEmail.Encode(e)
		}
	}
	{
		if s.SharedVoicemailNotificationByEmail.Set {
			e.FieldStart("shared_voicemail_notification_by_email")
			s.SharedVoicemailNotificationByEmail.Encode(e)
		}
	}
	{
		if s.CheckVoicemailsOverPhone.Set {
			e.FieldStart("check_voicemails_over_phone")
			s.CheckVoicemailsOverPhone.Encode(e)
		}
	}
	{
		if s.AudioIntercom.Set {
			e.FieldStart("audio_intercom")
			s.AudioIntercom.Encode(e)
		}
	}
	{
		if s.PeerToPeerMedia.Set {
			e.FieldStart("peer_to_peer_media")
			s.PeerToPeerMedia.Encode(e)
		}
	}
	{
		if s.E2eEncryption.Set {
			e.FieldStart("e2e_encryption")
			s.E2eEncryption.Encode(e)
		}
	}
	{
		if s.OutboundCalling.Set {
			e.FieldStart("outbound_calling")
			s.OutboundCalling.Encode(e)
		}
	}
	{
		if s.OutboundSMS.Set {
			e.FieldStart("outbound_sms")
			s.OutboundSMS.Encode(e)
		}
	}
	{
		if s.AllowEndUserEditCallHandling.Set {
			e.FieldStart("allow_end_user_edit_call_handling")
			s.AllowEndUserEditCallHandling.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserOKPolicy = [32]string{
	0:  "ad_hoc_call_recording",
	1:  "ad_hoc_call_recording_access_members",
	2:  "auto_call_recording",
	3:  "auto_call_recording_access_members",
	4:  "call_overflow",
	5:  "call_park",
	6:  "call_transferring",
	7:  "delegation",
	8:  "elevate_to_meeting",
	9:  "emergency_address_management",
	10: "emergency_calls_to_psap",
	11: "forwarding_to_external_numbers",
	12: "call_handling_forwarding_to_other_users",
	13: "hand_off_to_room",
	14: "international_calling",
	15: "mobile_switch_to_carrier",
	16: "select_outbound_caller_id",
	17: "sms",
	18: "voicemail",
	19: "voicemail_access_members",
	20: "zoom_phone_on_mobile",
	21: "personal_audio_library",
	22: "voicemail_transcription",
	23: "voicemail_notification_by_email",
	24: "shared_voicemail_notification_by_email",
	25: "check_voicemails_over_phone",
	26: "audio_intercom",
	27: "peer_to_peer_media",
	28: "e2e_encryption",
	29: "outbound_calling",
	30: "outbound_sms",
	31: "allow_end_user_edit_call_handling",
}

// Decode decodes PhoneUserOKPolicy from json.
func (s *PhoneUserOKPolicy) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserOKPolicy to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "ad_hoc_call_recording":
			if err := func() error {
				s.AdHocCallRecording.Reset()
				if err := s.AdHocCallRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ad_hoc_call_recording\"")
			}
		case "ad_hoc_call_recording_access_members":
			if err := func() error {
				s.AdHocCallRecordingAccessMembers = make([]PhoneUserOKPolicyAdHocCallRecordingAccessMembersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PhoneUserOKPolicyAdHocCallRecordingAccessMembersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.AdHocCallRecordingAccessMembers = append(s.AdHocCallRecordingAccessMembers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ad_hoc_call_recording_access_members\"")
			}
		case "auto_call_recording":
			if err := func() error {
				s.AutoCallRecording.Reset()
				if err := s.AutoCallRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_call_recording\"")
			}
		case "auto_call_recording_access_members":
			if err := func() error {
				s.AutoCallRecordingAccessMembers = make([]PhoneUserOKPolicyAutoCallRecordingAccessMembersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PhoneUserOKPolicyAutoCallRecordingAccessMembersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.AutoCallRecordingAccessMembers = append(s.AutoCallRecordingAccessMembers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_call_recording_access_members\"")
			}
		case "call_overflow":
			if err := func() error {
				s.CallOverflow.Reset()
				if err := s.CallOverflow.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_overflow\"")
			}
		case "call_park":
			if err := func() error {
				s.CallPark.Reset()
				if err := s.CallPark.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_park\"")
			}
		case "call_transferring":
			if err := func() error {
				s.CallTransferring.Reset()
				if err := s.CallTransferring.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_transferring\"")
			}
		case "delegation":
			if err := func() error {
				s.Delegation.Reset()
				if err := s.Delegation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delegation\"")
			}
		case "elevate_to_meeting":
			if err := func() error {
				s.ElevateToMeeting.Reset()
				if err := s.ElevateToMeeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"elevate_to_meeting\"")
			}
		case "emergency_address_management":
			if err := func() error {
				s.EmergencyAddressManagement.Reset()
				if err := s.EmergencyAddressManagement.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"emergency_address_management\"")
			}
		case "emergency_calls_to_psap":
			if err := func() error {
				s.EmergencyCallsToPsap.Reset()
				if err := s.EmergencyCallsToPsap.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"emergency_calls_to_psap\"")
			}
		case "forwarding_to_external_numbers":
			if err := func() error {
				s.ForwardingToExternalNumbers.Reset()
				if err := s.ForwardingToExternalNumbers.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forwarding_to_external_numbers\"")
			}
		case "call_handling_forwarding_to_other_users":
			if err := func() error {
				s.CallHandlingForwardingToOtherUsers.Reset()
				if err := s.CallHandlingForwardingToOtherUsers.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_handling_forwarding_to_other_users\"")
			}
		case "hand_off_to_room":
			if err := func() error {
				s.HandOffToRoom.Reset()
				if err := s.HandOffToRoom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hand_off_to_room\"")
			}
		case "international_calling":
			if err := func() error {
				s.InternationalCalling.Reset()
				if err := s.InternationalCalling.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"international_calling\"")
			}
		case "mobile_switch_to_carrier":
			if err := func() error {
				s.MobileSwitchToCarrier.Reset()
				if err := s.MobileSwitchToCarrier.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mobile_switch_to_carrier\"")
			}
		case "select_outbound_caller_id":
			if err := func() error {
				s.SelectOutboundCallerID.Reset()
				if err := s.SelectOutboundCallerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"select_outbound_caller_id\"")
			}
		case "sms":
			if err := func() error {
				s.SMS.Reset()
				if err := s.SMS.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sms\"")
			}
		case "voicemail":
			if err := func() error {
				s.Voicemail.Reset()
				if err := s.Voicemail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voicemail\"")
			}
		case "voicemail_access_members":
			if err := func() error {
				s.VoicemailAccessMembers = make([]PhoneUserOKPolicyVoicemailAccessMembersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PhoneUserOKPolicyVoicemailAccessMembersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.VoicemailAccessMembers = append(s.VoicemailAccessMembers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voicemail_access_members\"")
			}
		case "zoom_phone_on_mobile":
			if err := func() error {
				s.ZoomPhoneOnMobile.Reset()
				if err := s.ZoomPhoneOnMobile.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_phone_on_mobile\"")
			}
		case "personal_audio_library":
			if err := func() error {
				s.PersonalAudioLibrary.Reset()
				if err := s.PersonalAudioLibrary.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"personal_audio_library\"")
			}
		case "voicemail_transcription":
			if err := func() error {
				s.VoicemailTranscription.Reset()
				if err := s.VoicemailTranscription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voicemail_transcription\"")
			}
		case "voicemail_notification_by_email":
			if err := func() error {
				s.VoicemailNotificationByEmail.Reset()
				if err := s.VoicemailNotificationByEmail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voicemail_notification_by_email\"")
			}
		case "shared_voicemail_notification_by_email":
			if err := func() error {
				s.SharedVoicemailNotificationByEmail.Reset()
				if err := s.SharedVoicemailNotificationByEmail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shared_voicemail_notification_by_email\"")
			}
		case "check_voicemails_over_phone":
			if err := func() error {
				s.CheckVoicemailsOverPhone.Reset()
				if err := s.CheckVoicemailsOverPhone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"check_voicemails_over_phone\"")
			}
		case "audio_intercom":
			if err := func() error {
				s.AudioIntercom.Reset()
				if err := s.AudioIntercom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_intercom\"")
			}
		case "peer_to_peer_media":
			if err := func() error {
				s.PeerToPeerMedia.Reset()
				if err := s.PeerToPeerMedia.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"peer_to_peer_media\"")
			}
		case "e2e_encryption":
			if err := func() error {
				s.E2eEncryption.Reset()
				if err := s.E2eEncryption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"e2e_encryption\"")
			}
		case "outbound_calling":
			if err := func() error {
				s.OutboundCalling.Reset()
				if err := s.OutboundCalling.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"outbound_calling\"")
			}
		case "outbound_sms":
			if err := func() error {
				s.OutboundSMS.Reset()
				if err := s.OutboundSMS.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"outbound_sms\"")
			}
		case "allow_end_user_edit_call_handling":
			if err := func() error {
				s.AllowEndUserEditCallHandling.Reset()
				if err := s.AllowEndUserEditCallHandling.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_end_user_edit_call_handling\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserOKPolicy")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserOKPolicy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserOKPolicy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserOKPolicyAdHocCallRecording) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserOKPolicyAdHocCallRecording) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.RecordingStartPrompt.Set {
			e.FieldStart("recording_start_prompt")
			s.RecordingStartPrompt.Encode(e)
		}
	}
	{
		if s.RecordingTranscription.Set {
			e.FieldStart("recording_transcription")
			s.RecordingTranscription.Encode(e)
		}
	}
	{
		if s.PlayRecordingBeepTone.Set {
			e.FieldStart("play_recording_beep_tone")
			s.PlayRecordingBeepTone.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserOKPolicyAdHocCallRecording = [6]string{
	0: "enable",
	1: "recording_start_prompt",
	2: "recording_transcription",
	3: "play_recording_beep_tone",
	4: "locked",
	5: "locked_by",
}

// Decode decodes PhoneUserOKPolicyAdHocCallRecording from json.
func (s *PhoneUserOKPolicyAdHocCallRecording) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserOKPolicyAdHocCallRecording to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "recording_start_prompt":
			if err := func() error {
				s.RecordingStartPrompt.Reset()
				if err := s.RecordingStartPrompt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_start_prompt\"")
			}
		case "recording_transcription":
			if err := func() error {
				s.RecordingTranscription.Reset()
				if err := s.RecordingTranscription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_transcription\"")
			}
		case "play_recording_beep_tone":
			if err := func() error {
				s.PlayRecordingBeepTone.Reset()
				if err := s.PlayRecordingBeepTone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_recording_beep_tone\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserOKPolicyAdHocCallRecording")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserOKPolicyAdHocCallRecording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserOKPolicyAdHocCallRecording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserOKPolicyAdHocCallRecordingAccessMembersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserOKPolicyAdHocCallRecordingAccessMembersItem) encodeFields(e *jx.Encoder) {
	{
		if s.AccessUserID.Set {
			e.FieldStart("access_user_id")
			s.AccessUserID.Encode(e)
		}
	}
	{
		if s.AllowDelete.Set {
			e.FieldStart("allow_delete")
			s.AllowDelete.Encode(e)
		}
	}
	{
		if s.AllowDownload.Set {
			e.FieldStart("allow_download")
			s.AllowDownload.Encode(e)
		}
	}
	{
		if s.SharedID.Set {
			e.FieldStart("shared_id")
			s.SharedID.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserOKPolicyAdHocCallRecordingAccessMembersItem = [4]string{
	0: "access_user_id",
	1: "allow_delete",
	2: "allow_download",
	3: "shared_id",
}

// Decode decodes PhoneUserOKPolicyAdHocCallRecordingAccessMembersItem from json.
func (s *PhoneUserOKPolicyAdHocCallRecordingAccessMembersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserOKPolicyAdHocCallRecordingAccessMembersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "access_user_id":
			if err := func() error {
				s.AccessUserID.Reset()
				if err := s.AccessUserID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_user_id\"")
			}
		case "allow_delete":
			if err := func() error {
				s.AllowDelete.Reset()
				if err := s.AllowDelete.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_delete\"")
			}
		case "allow_download":
			if err := func() error {
				s.AllowDownload.Reset()
				if err := s.AllowDownload.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_download\"")
			}
		case "shared_id":
			if err := func() error {
				s.SharedID.Reset()
				if err := s.SharedID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shared_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserOKPolicyAdHocCallRecordingAccessMembersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserOKPolicyAdHocCallRecordingAccessMembersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserOKPolicyAdHocCallRecordingAccessMembersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserOKPolicyAdHocCallRecordingPlayRecordingBeepTone) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserOKPolicyAdHocCallRecordingPlayRecordingBeepTone) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.PlayBeepVolume.Set {
			e.FieldStart("play_beep_volume")
			s.PlayBeepVolume.Encode(e)
		}
	}
	{
		if s.PlayBeepTimeInterval.Set {
			e.FieldStart("play_beep_time_interval")
			s.PlayBeepTimeInterval.Encode(e)
		}
	}
	{
		if s.PlayBeepMember.Set {
			e.FieldStart("play_beep_member")
			s.PlayBeepMember.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserOKPolicyAdHocCallRecordingPlayRecordingBeepTone = [4]string{
	0: "enable",
	1: "play_beep_volume",
	2: "play_beep_time_interval",
	3: "play_beep_member",
}

// Decode decodes PhoneUserOKPolicyAdHocCallRecordingPlayRecordingBeepTone from json.
func (s *PhoneUserOKPolicyAdHocCallRecordingPlayRecordingBeepTone) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserOKPolicyAdHocCallRecordingPlayRecordingBeepTone to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "play_beep_volume":
			if err := func() error {
				s.PlayBeepVolume.Reset()
				if err := s.PlayBeepVolume.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_beep_volume\"")
			}
		case "play_beep_time_interval":
			if err := func() error {
				s.PlayBeepTimeInterval.Reset()
				if err := s.PlayBeepTimeInterval.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_beep_time_interval\"")
			}
		case "play_beep_member":
			if err := func() error {
				s.PlayBeepMember.Reset()
				if err := s.PlayBeepMember.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_beep_member\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserOKPolicyAdHocCallRecordingPlayRecordingBeepTone")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserOKPolicyAdHocCallRecordingPlayRecordingBeepTone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserOKPolicyAdHocCallRecordingPlayRecordingBeepTone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserOKPolicyAllowEndUserEditCallHandling) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserOKPolicyAllowEndUserEditCallHandling) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserOKPolicyAllowEndUserEditCallHandling = [3]string{
	0: "enable",
	1: "locked",
	2: "modified",
}

// Decode decodes PhoneUserOKPolicyAllowEndUserEditCallHandling from json.
func (s *PhoneUserOKPolicyAllowEndUserEditCallHandling) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserOKPolicyAllowEndUserEditCallHandling to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserOKPolicyAllowEndUserEditCallHandling")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserOKPolicyAllowEndUserEditCallHandling) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserOKPolicyAllowEndUserEditCallHandling) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserOKPolicyAudioIntercom) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserOKPolicyAudioIntercom) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserOKPolicyAudioIntercom = [4]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
}

// Decode decodes PhoneUserOKPolicyAudioIntercom from json.
func (s *PhoneUserOKPolicyAudioIntercom) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserOKPolicyAudioIntercom to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserOKPolicyAudioIntercom")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserOKPolicyAudioIntercom) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserOKPolicyAudioIntercom) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserOKPolicyAutoCallRecording) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserOKPolicyAutoCallRecording) encodeFields(e *jx.Encoder) {
	{
		if s.AllowStopResumeRecording.Set {
			e.FieldStart("allow_stop_resume_recording")
			s.AllowStopResumeRecording.Encode(e)
		}
	}
	{
		if s.DisconnectOnRecordingFailure.Set {
			e.FieldStart("disconnect_on_recording_failure")
			s.DisconnectOnRecordingFailure.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.RecordingCalls.Set {
			e.FieldStart("recording_calls")
			s.RecordingCalls.Encode(e)
		}
	}
	{
		if s.RecordingExplicitConsent.Set {
			e.FieldStart("recording_explicit_consent")
			s.RecordingExplicitConsent.Encode(e)
		}
	}
	{
		if s.RecordingStartPrompt.Set {
			e.FieldStart("recording_start_prompt")
			s.RecordingStartPrompt.Encode(e)
		}
	}
	{
		if s.RecordingTranscription.Set {
			e.FieldStart("recording_transcription")
			s.RecordingTranscription.Encode(e)
		}
	}
	{
		if s.PlayRecordingBeepTone.Set {
			e.FieldStart("play_recording_beep_tone")
			s.PlayRecordingBeepTone.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserOKPolicyAutoCallRecording = [10]string{
	0: "allow_stop_resume_recording",
	1: "disconnect_on_recording_failure",
	2: "enable",
	3: "locked",
	4: "locked_by",
	5: "recording_calls",
	6: "recording_explicit_consent",
	7: "recording_start_prompt",
	8: "recording_transcription",
	9: "play_recording_beep_tone",
}

// Decode decodes PhoneUserOKPolicyAutoCallRecording from json.
func (s *PhoneUserOKPolicyAutoCallRecording) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserOKPolicyAutoCallRecording to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allow_stop_resume_recording":
			if err := func() error {
				s.AllowStopResumeRecording.Reset()
				if err := s.AllowStopResumeRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_stop_resume_recording\"")
			}
		case "disconnect_on_recording_failure":
			if err := func() error {
				s.DisconnectOnRecordingFailure.Reset()
				if err := s.DisconnectOnRecordingFailure.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"disconnect_on_recording_failure\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "recording_calls":
			if err := func() error {
				s.RecordingCalls.Reset()
				if err := s.RecordingCalls.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_calls\"")
			}
		case "recording_explicit_consent":
			if err := func() error {
				s.RecordingExplicitConsent.Reset()
				if err := s.RecordingExplicitConsent.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_explicit_consent\"")
			}
		case "recording_start_prompt":
			if err := func() error {
				s.RecordingStartPrompt.Reset()
				if err := s.RecordingStartPrompt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_start_prompt\"")
			}
		case "recording_transcription":
			if err := func() error {
				s.RecordingTranscription.Reset()
				if err := s.RecordingTranscription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_transcription\"")
			}
		case "play_recording_beep_tone":
			if err := func() error {
				s.PlayRecordingBeepTone.Reset()
				if err := s.PlayRecordingBeepTone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_recording_beep_tone\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserOKPolicyAutoCallRecording")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserOKPolicyAutoCallRecording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserOKPolicyAutoCallRecording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserOKPolicyAutoCallRecordingAccessMembersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserOKPolicyAutoCallRecordingAccessMembersItem) encodeFields(e *jx.Encoder) {
	{
		if s.AccessUserID.Set {
			e.FieldStart("access_user_id")
			s.AccessUserID.Encode(e)
		}
	}
	{
		if s.AllowDelete.Set {
			e.FieldStart("allow_delete")
			s.AllowDelete.Encode(e)
		}
	}
	{
		if s.AllowDownload.Set {
			e.FieldStart("allow_download")
			s.AllowDownload.Encode(e)
		}
	}
	{
		if s.SharedID.Set {
			e.FieldStart("shared_id")
			s.SharedID.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserOKPolicyAutoCallRecordingAccessMembersItem = [4]string{
	0: "access_user_id",
	1: "allow_delete",
	2: "allow_download",
	3: "shared_id",
}

// Decode decodes PhoneUserOKPolicyAutoCallRecordingAccessMembersItem from json.
func (s *PhoneUserOKPolicyAutoCallRecordingAccessMembersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserOKPolicyAutoCallRecordingAccessMembersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "access_user_id":
			if err := func() error {
				s.AccessUserID.Reset()
				if err := s.AccessUserID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_user_id\"")
			}
		case "allow_delete":
			if err := func() error {
				s.AllowDelete.Reset()
				if err := s.AllowDelete.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_delete\"")
			}
		case "allow_download":
			if err := func() error {
				s.AllowDownload.Reset()
				if err := s.AllowDownload.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_download\"")
			}
		case "shared_id":
			if err := func() error {
				s.SharedID.Reset()
				if err := s.SharedID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shared_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserOKPolicyAutoCallRecordingAccessMembersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserOKPolicyAutoCallRecordingAccessMembersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserOKPolicyAutoCallRecordingAccessMembersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserOKPolicyAutoCallRecordingPlayRecordingBeepTone) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserOKPolicyAutoCallRecordingPlayRecordingBeepTone) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.PlayBeepVolume.Set {
			e.FieldStart("play_beep_volume")
			s.PlayBeepVolume.Encode(e)
		}
	}
	{
		if s.PlayBeepTimeInterval.Set {
			e.FieldStart("play_beep_time_interval")
			s.PlayBeepTimeInterval.Encode(e)
		}
	}
	{
		if s.PlayBeepMember.Set {
			e.FieldStart("play_beep_member")
			s.PlayBeepMember.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserOKPolicyAutoCallRecordingPlayRecordingBeepTone = [4]string{
	0: "enable",
	1: "play_beep_volume",
	2: "play_beep_time_interval",
	3: "play_beep_member",
}

// Decode decodes PhoneUserOKPolicyAutoCallRecordingPlayRecordingBeepTone from json.
func (s *PhoneUserOKPolicyAutoCallRecordingPlayRecordingBeepTone) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserOKPolicyAutoCallRecordingPlayRecordingBeepTone to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "play_beep_volume":
			if err := func() error {
				s.PlayBeepVolume.Reset()
				if err := s.PlayBeepVolume.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_beep_volume\"")
			}
		case "play_beep_time_interval":
			if err := func() error {
				s.PlayBeepTimeInterval.Reset()
				if err := s.PlayBeepTimeInterval.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_beep_time_interval\"")
			}
		case "play_beep_member":
			if err := func() error {
				s.PlayBeepMember.Reset()
				if err := s.PlayBeepMember.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_beep_member\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserOKPolicyAutoCallRecordingPlayRecordingBeepTone")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserOKPolicyAutoCallRecordingPlayRecordingBeepTone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserOKPolicyAutoCallRecordingPlayRecordingBeepTone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserOKPolicyCallHandlingForwardingToOtherUsers) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserOKPolicyCallHandlingForwardingToOtherUsers) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.CallForwardingType.Set {
			e.FieldStart("call_forwarding_type")
			s.CallForwardingType.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserOKPolicyCallHandlingForwardingToOtherUsers = [5]string{
	0: "enable",
	1: "call_forwarding_type",
	2: "locked",
	3: "locked_by",
	4: "modified",
}

// Decode decodes PhoneUserOKPolicyCallHandlingForwardingToOtherUsers from json.
func (s *PhoneUserOKPolicyCallHandlingForwardingToOtherUsers) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserOKPolicyCallHandlingForwardingToOtherUsers to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "call_forwarding_type":
			if err := func() error {
				s.CallForwardingType.Reset()
				if err := s.CallForwardingType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_forwarding_type\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserOKPolicyCallHandlingForwardingToOtherUsers")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserOKPolicyCallHandlingForwardingToOtherUsers) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserOKPolicyCallHandlingForwardingToOtherUsers) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserOKPolicyCallOverflow) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserOKPolicyCallOverflow) encodeFields(e *jx.Encoder) {
	{
		if s.CallOverflowType.Set {
			e.FieldStart("call_overflow_type")
			s.CallOverflowType.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserOKPolicyCallOverflow = [5]string{
	0: "call_overflow_type",
	1: "enable",
	2: "locked",
	3: "locked_by",
	4: "modified",
}

// Decode decodes PhoneUserOKPolicyCallOverflow from json.
func (s *PhoneUserOKPolicyCallOverflow) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserOKPolicyCallOverflow to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "call_overflow_type":
			if err := func() error {
				s.CallOverflowType.Reset()
				if err := s.CallOverflowType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_overflow_type\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserOKPolicyCallOverflow")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserOKPolicyCallOverflow) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserOKPolicyCallOverflow) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserOKPolicyCallPark) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserOKPolicyCallPark) encodeFields(e *jx.Encoder) {
	{
		if s.CallNotPickedUpAction.Set {
			e.FieldStart("call_not_picked_up_action")
			s.CallNotPickedUpAction.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.ExpirationPeriod.Set {
			e.FieldStart("expiration_period")
			s.ExpirationPeriod.Encode(e)
		}
	}
	{
		if s.ForwardTo.Set {
			e.FieldStart("forward_to")
			s.ForwardTo.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserOKPolicyCallPark = [6]string{
	0: "call_not_picked_up_action",
	1: "enable",
	2: "expiration_period",
	3: "forward_to",
	4: "locked",
	5: "locked_by",
}

// Decode decodes PhoneUserOKPolicyCallPark from json.
func (s *PhoneUserOKPolicyCallPark) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserOKPolicyCallPark to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "call_not_picked_up_action":
			if err := func() error {
				s.CallNotPickedUpAction.Reset()
				if err := s.CallNotPickedUpAction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_not_picked_up_action\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "expiration_period":
			if err := func() error {
				s.ExpirationPeriod.Reset()
				if err := s.ExpirationPeriod.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expiration_period\"")
			}
		case "forward_to":
			if err := func() error {
				s.ForwardTo.Reset()
				if err := s.ForwardTo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward_to\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserOKPolicyCallPark")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserOKPolicyCallPark) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserOKPolicyCallPark) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserOKPolicyCallParkForwardTo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserOKPolicyCallParkForwardTo) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ExtensionType.Set {
			e.FieldStart("extension_type")
			s.ExtensionType.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserOKPolicyCallParkForwardTo = [5]string{
	0: "display_name",
	1: "extension_id",
	2: "extension_number",
	3: "extension_type",
	4: "id",
}

// Decode decodes PhoneUserOKPolicyCallParkForwardTo from json.
func (s *PhoneUserOKPolicyCallParkForwardTo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserOKPolicyCallParkForwardTo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "extension_type":
			if err := func() error {
				s.ExtensionType.Reset()
				if err := s.ExtensionType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_type\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserOKPolicyCallParkForwardTo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserOKPolicyCallParkForwardTo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserOKPolicyCallParkForwardTo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserOKPolicyCallTransferring) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserOKPolicyCallTransferring) encodeFields(e *jx.Encoder) {
	{
		if s.CallTransferringType.Set {
			e.FieldStart("call_transferring_type")
			s.CallTransferringType.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserOKPolicyCallTransferring = [4]string{
	0: "call_transferring_type",
	1: "enable",
	2: "locked",
	3: "locked_by",
}

// Decode decodes PhoneUserOKPolicyCallTransferring from json.
func (s *PhoneUserOKPolicyCallTransferring) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserOKPolicyCallTransferring to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "call_transferring_type":
			if err := func() error {
				s.CallTransferringType.Reset()
				if err := s.CallTransferringType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_transferring_type\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserOKPolicyCallTransferring")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserOKPolicyCallTransferring) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserOKPolicyCallTransferring) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserOKPolicyCheckVoicemailsOverPhone) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserOKPolicyCheckVoicemailsOverPhone) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserOKPolicyCheckVoicemailsOverPhone = [4]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
}

// Decode decodes PhoneUserOKPolicyCheckVoicemailsOverPhone from json.
func (s *PhoneUserOKPolicyCheckVoicemailsOverPhone) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserOKPolicyCheckVoicemailsOverPhone to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserOKPolicyCheckVoicemailsOverPhone")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserOKPolicyCheckVoicemailsOverPhone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserOKPolicyCheckVoicemailsOverPhone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserOKPolicyE2eEncryption) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserOKPolicyE2eEncryption) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserOKPolicyE2eEncryption = [4]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
}

// Decode decodes PhoneUserOKPolicyE2eEncryption from json.
func (s *PhoneUserOKPolicyE2eEncryption) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserOKPolicyE2eEncryption to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserOKPolicyE2eEncryption")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserOKPolicyE2eEncryption) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserOKPolicyE2eEncryption) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserOKPolicyEmergencyAddressManagement) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserOKPolicyEmergencyAddressManagement) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.PromptDefaultAddress.Set {
			e.FieldStart("prompt_default_address")
			s.PromptDefaultAddress.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserOKPolicyEmergencyAddressManagement = [2]string{
	0: "enable",
	1: "prompt_default_address",
}

// Decode decodes PhoneUserOKPolicyEmergencyAddressManagement from json.
func (s *PhoneUserOKPolicyEmergencyAddressManagement) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserOKPolicyEmergencyAddressManagement to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "prompt_default_address":
			if err := func() error {
				s.PromptDefaultAddress.Reset()
				if err := s.PromptDefaultAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"prompt_default_address\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserOKPolicyEmergencyAddressManagement")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserOKPolicyEmergencyAddressManagement) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserOKPolicyEmergencyAddressManagement) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserOKPolicyHandOffToRoom) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserOKPolicyHandOffToRoom) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserOKPolicyHandOffToRoom = [3]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
}

// Decode decodes PhoneUserOKPolicyHandOffToRoom from json.
func (s *PhoneUserOKPolicyHandOffToRoom) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserOKPolicyHandOffToRoom to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserOKPolicyHandOffToRoom")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserOKPolicyHandOffToRoom) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserOKPolicyHandOffToRoom) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserOKPolicyMobileSwitchToCarrier) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserOKPolicyMobileSwitchToCarrier) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserOKPolicyMobileSwitchToCarrier = [3]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
}

// Decode decodes PhoneUserOKPolicyMobileSwitchToCarrier from json.
func (s *PhoneUserOKPolicyMobileSwitchToCarrier) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserOKPolicyMobileSwitchToCarrier to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserOKPolicyMobileSwitchToCarrier")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserOKPolicyMobileSwitchToCarrier) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserOKPolicyMobileSwitchToCarrier) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserOKPolicyOutboundCalling) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserOKPolicyOutboundCalling) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserOKPolicyOutboundCalling = [3]string{
	0: "enable",
	1: "locked",
	2: "modified",
}

// Decode decodes PhoneUserOKPolicyOutboundCalling from json.
func (s *PhoneUserOKPolicyOutboundCalling) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserOKPolicyOutboundCalling to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserOKPolicyOutboundCalling")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserOKPolicyOutboundCalling) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserOKPolicyOutboundCalling) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserOKPolicyOutboundSMS) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserOKPolicyOutboundSMS) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserOKPolicyOutboundSMS = [3]string{
	0: "enable",
	1: "locked",
	2: "modified",
}

// Decode decodes PhoneUserOKPolicyOutboundSMS from json.
func (s *PhoneUserOKPolicyOutboundSMS) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserOKPolicyOutboundSMS to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserOKPolicyOutboundSMS")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserOKPolicyOutboundSMS) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserOKPolicyOutboundSMS) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserOKPolicyPeerToPeerMedia) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserOKPolicyPeerToPeerMedia) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserOKPolicyPeerToPeerMedia = [4]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
}

// Decode decodes PhoneUserOKPolicyPeerToPeerMedia from json.
func (s *PhoneUserOKPolicyPeerToPeerMedia) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserOKPolicyPeerToPeerMedia to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserOKPolicyPeerToPeerMedia")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserOKPolicyPeerToPeerMedia) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserOKPolicyPeerToPeerMedia) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserOKPolicyPersonalAudioLibrary) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserOKPolicyPersonalAudioLibrary) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
	{
		if s.AllowMusicOnHoldCustomization.Set {
			e.FieldStart("allow_music_on_hold_customization")
			s.AllowMusicOnHoldCustomization.Encode(e)
		}
	}
	{
		if s.AllowVoicemailAndMessageGreetingCustomization.Set {
			e.FieldStart("allow_voicemail_and_message_greeting_customization")
			s.AllowVoicemailAndMessageGreetingCustomization.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserOKPolicyPersonalAudioLibrary = [6]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
	4: "allow_music_on_hold_customization",
	5: "allow_voicemail_and_message_greeting_customization",
}

// Decode decodes PhoneUserOKPolicyPersonalAudioLibrary from json.
func (s *PhoneUserOKPolicyPersonalAudioLibrary) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserOKPolicyPersonalAudioLibrary to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		case "allow_music_on_hold_customization":
			if err := func() error {
				s.AllowMusicOnHoldCustomization.Reset()
				if err := s.AllowMusicOnHoldCustomization.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_music_on_hold_customization\"")
			}
		case "allow_voicemail_and_message_greeting_customization":
			if err := func() error {
				s.AllowVoicemailAndMessageGreetingCustomization.Reset()
				if err := s.AllowVoicemailAndMessageGreetingCustomization.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_voicemail_and_message_greeting_customization\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserOKPolicyPersonalAudioLibrary")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserOKPolicyPersonalAudioLibrary) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserOKPolicyPersonalAudioLibrary) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserOKPolicySMS) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserOKPolicySMS) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.InternationalSMS.Set {
			e.FieldStart("international_sms")
			s.InternationalSMS.Encode(e)
		}
	}
	{
		if s.InternationalSMSCountries != nil {
			e.FieldStart("international_sms_countries")
			e.ArrStart()
			for _, elem := range s.InternationalSMSCountries {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserOKPolicySMS = [5]string{
	0: "enable",
	1: "international_sms",
	2: "international_sms_countries",
	3: "locked",
	4: "locked_by",
}

// Decode decodes PhoneUserOKPolicySMS from json.
func (s *PhoneUserOKPolicySMS) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserOKPolicySMS to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "international_sms":
			if err := func() error {
				s.InternationalSMS.Reset()
				if err := s.InternationalSMS.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"international_sms\"")
			}
		case "international_sms_countries":
			if err := func() error {
				s.InternationalSMSCountries = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.InternationalSMSCountries = append(s.InternationalSMSCountries, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"international_sms_countries\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserOKPolicySMS")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserOKPolicySMS) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserOKPolicySMS) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserOKPolicySelectOutboundCallerID) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserOKPolicySelectOutboundCallerID) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.AllowHideOutboundCallerID.Set {
			e.FieldStart("allow_hide_outbound_caller_id")
			s.AllowHideOutboundCallerID.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserOKPolicySelectOutboundCallerID = [4]string{
	0: "enable",
	1: "allow_hide_outbound_caller_id",
	2: "locked",
	3: "locked_by",
}

// Decode decodes PhoneUserOKPolicySelectOutboundCallerID from json.
func (s *PhoneUserOKPolicySelectOutboundCallerID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserOKPolicySelectOutboundCallerID to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "allow_hide_outbound_caller_id":
			if err := func() error {
				s.AllowHideOutboundCallerID.Reset()
				if err := s.AllowHideOutboundCallerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_hide_outbound_caller_id\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserOKPolicySelectOutboundCallerID")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserOKPolicySelectOutboundCallerID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserOKPolicySelectOutboundCallerID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserOKPolicySharedVoicemailNotificationByEmail) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserOKPolicySharedVoicemailNotificationByEmail) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserOKPolicySharedVoicemailNotificationByEmail = [4]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
}

// Decode decodes PhoneUserOKPolicySharedVoicemailNotificationByEmail from json.
func (s *PhoneUserOKPolicySharedVoicemailNotificationByEmail) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserOKPolicySharedVoicemailNotificationByEmail to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserOKPolicySharedVoicemailNotificationByEmail")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserOKPolicySharedVoicemailNotificationByEmail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserOKPolicySharedVoicemailNotificationByEmail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserOKPolicyVoicemail) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserOKPolicyVoicemail) encodeFields(e *jx.Encoder) {
	{
		if s.AllowDelete.Set {
			e.FieldStart("allow_delete")
			s.AllowDelete.Encode(e)
		}
	}
	{
		if s.AllowDownload.Set {
			e.FieldStart("allow_download")
			s.AllowDownload.Encode(e)
		}
	}
	{
		if s.AllowTranscription.Set {
			e.FieldStart("allow_transcription")
			s.AllowTranscription.Encode(e)
		}
	}
	{
		if s.AllowVideomail.Set {
			e.FieldStart("allow_videomail")
			s.AllowVideomail.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserOKPolicyVoicemail = [5]string{
	0: "allow_delete",
	1: "allow_download",
	2: "allow_transcription",
	3: "allow_videomail",
	4: "enable",
}

// Decode decodes PhoneUserOKPolicyVoicemail from json.
func (s *PhoneUserOKPolicyVoicemail) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserOKPolicyVoicemail to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allow_delete":
			if err := func() error {
				s.AllowDelete.Reset()
				if err := s.AllowDelete.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_delete\"")
			}
		case "allow_download":
			if err := func() error {
				s.AllowDownload.Reset()
				if err := s.AllowDownload.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_download\"")
			}
		case "allow_transcription":
			if err := func() error {
				s.AllowTranscription.Reset()
				if err := s.AllowTranscription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_transcription\"")
			}
		case "allow_videomail":
			if err := func() error {
				s.AllowVideomail.Reset()
				if err := s.AllowVideomail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_videomail\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserOKPolicyVoicemail")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserOKPolicyVoicemail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserOKPolicyVoicemail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserOKPolicyVoicemailAccessMembersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserOKPolicyVoicemailAccessMembersItem) encodeFields(e *jx.Encoder) {
	{
		if s.AccessUserID.Set {
			e.FieldStart("access_user_id")
			s.AccessUserID.Encode(e)
		}
	}
	{
		if s.AllowDelete.Set {
			e.FieldStart("allow_delete")
			s.AllowDelete.Encode(e)
		}
	}
	{
		if s.AllowDownload.Set {
			e.FieldStart("allow_download")
			s.AllowDownload.Encode(e)
		}
	}
	{
		if s.AllowSharing.Set {
			e.FieldStart("allow_sharing")
			s.AllowSharing.Encode(e)
		}
	}
	{
		if s.SharedID.Set {
			e.FieldStart("shared_id")
			s.SharedID.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserOKPolicyVoicemailAccessMembersItem = [5]string{
	0: "access_user_id",
	1: "allow_delete",
	2: "allow_download",
	3: "allow_sharing",
	4: "shared_id",
}

// Decode decodes PhoneUserOKPolicyVoicemailAccessMembersItem from json.
func (s *PhoneUserOKPolicyVoicemailAccessMembersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserOKPolicyVoicemailAccessMembersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "access_user_id":
			if err := func() error {
				s.AccessUserID.Reset()
				if err := s.AccessUserID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_user_id\"")
			}
		case "allow_delete":
			if err := func() error {
				s.AllowDelete.Reset()
				if err := s.AllowDelete.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_delete\"")
			}
		case "allow_download":
			if err := func() error {
				s.AllowDownload.Reset()
				if err := s.AllowDownload.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_download\"")
			}
		case "allow_sharing":
			if err := func() error {
				s.AllowSharing.Reset()
				if err := s.AllowSharing.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_sharing\"")
			}
		case "shared_id":
			if err := func() error {
				s.SharedID.Reset()
				if err := s.SharedID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shared_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserOKPolicyVoicemailAccessMembersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserOKPolicyVoicemailAccessMembersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserOKPolicyVoicemailAccessMembersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserOKPolicyVoicemailNotificationByEmail) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserOKPolicyVoicemailNotificationByEmail) encodeFields(e *jx.Encoder) {
	{
		if s.IncludeVoicemailFile.Set {
			e.FieldStart("include_voicemail_file")
			s.IncludeVoicemailFile.Encode(e)
		}
	}
	{
		if s.IncludeVoicemailTranscription.Set {
			e.FieldStart("include_voicemail_transcription")
			s.IncludeVoicemailTranscription.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserOKPolicyVoicemailNotificationByEmail = [6]string{
	0: "include_voicemail_file",
	1: "include_voicemail_transcription",
	2: "enable",
	3: "locked",
	4: "locked_by",
	5: "modified",
}

// Decode decodes PhoneUserOKPolicyVoicemailNotificationByEmail from json.
func (s *PhoneUserOKPolicyVoicemailNotificationByEmail) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserOKPolicyVoicemailNotificationByEmail to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "include_voicemail_file":
			if err := func() error {
				s.IncludeVoicemailFile.Reset()
				if err := s.IncludeVoicemailFile.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"include_voicemail_file\"")
			}
		case "include_voicemail_transcription":
			if err := func() error {
				s.IncludeVoicemailTranscription.Reset()
				if err := s.IncludeVoicemailTranscription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"include_voicemail_transcription\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserOKPolicyVoicemailNotificationByEmail")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserOKPolicyVoicemailNotificationByEmail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserOKPolicyVoicemailNotificationByEmail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserOKPolicyVoicemailTranscription) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserOKPolicyVoicemailTranscription) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserOKPolicyVoicemailTranscription = [4]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
}

// Decode decodes PhoneUserOKPolicyVoicemailTranscription from json.
func (s *PhoneUserOKPolicyVoicemailTranscription) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserOKPolicyVoicemailTranscription to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserOKPolicyVoicemailTranscription")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserOKPolicyVoicemailTranscription) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserOKPolicyVoicemailTranscription) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserOKPolicyZoomPhoneOnMobile) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserOKPolicyZoomPhoneOnMobile) encodeFields(e *jx.Encoder) {
	{
		if s.AllowCallingSMSMms.Set {
			e.FieldStart("allow_calling_sms_mms")
			s.AllowCallingSMSMms.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserOKPolicyZoomPhoneOnMobile = [4]string{
	0: "allow_calling_sms_mms",
	1: "enable",
	2: "locked",
	3: "locked_by",
}

// Decode decodes PhoneUserOKPolicyZoomPhoneOnMobile from json.
func (s *PhoneUserOKPolicyZoomPhoneOnMobile) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserOKPolicyZoomPhoneOnMobile to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allow_calling_sms_mms":
			if err := func() error {
				s.AllowCallingSMSMms.Reset()
				if err := s.AllowCallingSMSMms.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_calling_sms_mms\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserOKPolicyZoomPhoneOnMobile")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserOKPolicyZoomPhoneOnMobile) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserOKPolicyZoomPhoneOnMobile) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserRecordingsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserRecordingsOK) encodeFields(e *jx.Encoder) {
	{
		if s.From.Set {
			e.FieldStart("from")
			s.From.Encode(e, json.EncodeDate)
		}
	}
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageCount.Set {
			e.FieldStart("page_count")
			s.PageCount.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
	{
		if s.Recordings != nil {
			e.FieldStart("recordings")
			e.ArrStart()
			for _, elem := range s.Recordings {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.To.Set {
			e.FieldStart("to")
			s.To.Encode(e, json.EncodeDate)
		}
	}
	{
		if s.TotalRecords.Set {
			e.FieldStart("total_records")
			s.TotalRecords.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserRecordingsOK = [7]string{
	0: "from",
	1: "next_page_token",
	2: "page_count",
	3: "page_size",
	4: "recordings",
	5: "to",
	6: "total_records",
}

// Decode decodes PhoneUserRecordingsOK from json.
func (s *PhoneUserRecordingsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserRecordingsOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "from":
			if err := func() error {
				s.From.Reset()
				if err := s.From.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"from\"")
			}
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_count":
			if err := func() error {
				s.PageCount.Reset()
				if err := s.PageCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_count\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		case "recordings":
			if err := func() error {
				s.Recordings = make([]PhoneUserRecordingsOKRecordingsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PhoneUserRecordingsOKRecordingsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Recordings = append(s.Recordings, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recordings\"")
			}
		case "to":
			if err := func() error {
				s.To.Reset()
				if err := s.To.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"to\"")
			}
		case "total_records":
			if err := func() error {
				s.TotalRecords.Reset()
				if err := s.TotalRecords.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_records\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserRecordingsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserRecordingsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserRecordingsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserRecordingsOKRecordingsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserRecordingsOKRecordingsItem) encodeFields(e *jx.Encoder) {
	{
		if s.CallID.Set {
			e.FieldStart("call_id")
			s.CallID.Encode(e)
		}
	}
	{
		if s.CallLogID.Set {
			e.FieldStart("call_log_id")
			s.CallLogID.Encode(e)
		}
	}
	{
		if s.CalleeName.Set {
			e.FieldStart("callee_name")
			s.CalleeName.Encode(e)
		}
	}
	{
		if s.CalleeNumber.Set {
			e.FieldStart("callee_number")
			s.CalleeNumber.Encode(e)
		}
	}
	{
		if s.CalleeNumberType.Set {
			e.FieldStart("callee_number_type")
			s.CalleeNumberType.Encode(e)
		}
	}
	{
		if s.CallerName.Set {
			e.FieldStart("caller_name")
			s.CallerName.Encode(e)
		}
	}
	{
		if s.CallerNumber.Set {
			e.FieldStart("caller_number")
			s.CallerNumber.Encode(e)
		}
	}
	{
		if s.CallerNumberType.Set {
			e.FieldStart("caller_number_type")
			s.CallerNumberType.Encode(e)
		}
	}
	{
		if s.OutgoingBy.Set {
			e.FieldStart("outgoing_by")
			s.OutgoingBy.Encode(e)
		}
	}
	{
		if s.AcceptedBy.Set {
			e.FieldStart("accepted_by")
			s.AcceptedBy.Encode(e)
		}
	}
	{
		if s.DateTime.Set {
			e.FieldStart("date_time")
			s.DateTime.Encode(e)
		}
	}
	{
		if s.Direction.Set {
			e.FieldStart("direction")
			s.Direction.Encode(e)
		}
	}
	{
		if s.DownloadURL.Set {
			e.FieldStart("download_url")
			s.DownloadURL.Encode(e)
		}
	}
	{
		if s.Duration.Set {
			e.FieldStart("duration")
			s.Duration.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.TranscriptDownloadURL.Set {
			e.FieldStart("transcript_download_url")
			s.TranscriptDownloadURL.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserRecordingsOKRecordingsItem = [16]string{
	0:  "call_id",
	1:  "call_log_id",
	2:  "callee_name",
	3:  "callee_number",
	4:  "callee_number_type",
	5:  "caller_name",
	6:  "caller_number",
	7:  "caller_number_type",
	8:  "outgoing_by",
	9:  "accepted_by",
	10: "date_time",
	11: "direction",
	12: "download_url",
	13: "duration",
	14: "id",
	15: "transcript_download_url",
}

// Decode decodes PhoneUserRecordingsOKRecordingsItem from json.
func (s *PhoneUserRecordingsOKRecordingsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserRecordingsOKRecordingsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "call_id":
			if err := func() error {
				s.CallID.Reset()
				if err := s.CallID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_id\"")
			}
		case "call_log_id":
			if err := func() error {
				s.CallLogID.Reset()
				if err := s.CallLogID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_log_id\"")
			}
		case "callee_name":
			if err := func() error {
				s.CalleeName.Reset()
				if err := s.CalleeName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_name\"")
			}
		case "callee_number":
			if err := func() error {
				s.CalleeNumber.Reset()
				if err := s.CalleeNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_number\"")
			}
		case "callee_number_type":
			if err := func() error {
				s.CalleeNumberType.Reset()
				if err := s.CalleeNumberType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_number_type\"")
			}
		case "caller_name":
			if err := func() error {
				s.CallerName.Reset()
				if err := s.CallerName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_name\"")
			}
		case "caller_number":
			if err := func() error {
				s.CallerNumber.Reset()
				if err := s.CallerNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_number\"")
			}
		case "caller_number_type":
			if err := func() error {
				s.CallerNumberType.Reset()
				if err := s.CallerNumberType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_number_type\"")
			}
		case "outgoing_by":
			if err := func() error {
				s.OutgoingBy.Reset()
				if err := s.OutgoingBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"outgoing_by\"")
			}
		case "accepted_by":
			if err := func() error {
				s.AcceptedBy.Reset()
				if err := s.AcceptedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"accepted_by\"")
			}
		case "date_time":
			if err := func() error {
				s.DateTime.Reset()
				if err := s.DateTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"date_time\"")
			}
		case "direction":
			if err := func() error {
				s.Direction.Reset()
				if err := s.Direction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"direction\"")
			}
		case "download_url":
			if err := func() error {
				s.DownloadURL.Reset()
				if err := s.DownloadURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"download_url\"")
			}
		case "duration":
			if err := func() error {
				s.Duration.Reset()
				if err := s.Duration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"duration\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "transcript_download_url":
			if err := func() error {
				s.TranscriptDownloadURL.Reset()
				if err := s.TranscriptDownloadURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transcript_download_url\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserRecordingsOKRecordingsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserRecordingsOKRecordingsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserRecordingsOKRecordingsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserRecordingsOKRecordingsItemAcceptedBy) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserRecordingsOKRecordingsItemAcceptedBy) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserRecordingsOKRecordingsItemAcceptedBy = [2]string{
	0: "name",
	1: "extension_number",
}

// Decode decodes PhoneUserRecordingsOKRecordingsItemAcceptedBy from json.
func (s *PhoneUserRecordingsOKRecordingsItemAcceptedBy) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserRecordingsOKRecordingsItemAcceptedBy to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserRecordingsOKRecordingsItemAcceptedBy")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserRecordingsOKRecordingsItemAcceptedBy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserRecordingsOKRecordingsItemAcceptedBy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserRecordingsOKRecordingsItemOutgoingBy) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserRecordingsOKRecordingsItemOutgoingBy) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserRecordingsOKRecordingsItemOutgoingBy = [2]string{
	0: "name",
	1: "extension_number",
}

// Decode decodes PhoneUserRecordingsOKRecordingsItemOutgoingBy from json.
func (s *PhoneUserRecordingsOKRecordingsItemOutgoingBy) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserRecordingsOKRecordingsItemOutgoingBy to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserRecordingsOKRecordingsItemOutgoingBy")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserRecordingsOKRecordingsItemOutgoingBy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserRecordingsOKRecordingsItemOutgoingBy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserSettingsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserSettingsOK) encodeFields(e *jx.Encoder) {
	{
		if s.AreaCode.Set {
			e.FieldStart("area_code")
			s.AreaCode.Encode(e)
		}
	}
	{
		if s.AudioPromptLanguage.Set {
			e.FieldStart("audio_prompt_language")
			s.AudioPromptLanguage.Encode(e)
		}
	}
	{
		if s.CompanyNumber.Set {
			e.FieldStart("company_number")
			s.CompanyNumber.Encode(e)
		}
	}
	{
		if s.Country.Set {
			e.FieldStart("country")
			s.Country.Encode(e)
		}
	}
	{
		if s.Delegation.Set {
			e.FieldStart("delegation")
			s.Delegation.Encode(e)
		}
	}
	{
		if s.DeskPhone.Set {
			e.FieldStart("desk_phone")
			s.DeskPhone.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.MusicOnHoldID.Set {
			e.FieldStart("music_on_hold_id")
			s.MusicOnHoldID.Encode(e)
		}
	}
	{
		if s.OutboundCaller.Set {
			e.FieldStart("outbound_caller")
			s.OutboundCaller.Encode(e)
		}
	}
	{
		if s.OutboundCallerIds != nil {
			e.FieldStart("outbound_caller_ids")
			e.ArrStart()
			for _, elem := range s.OutboundCallerIds {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.VoiceMail != nil {
			e.FieldStart("voice_mail")
			e.ArrStart()
			for _, elem := range s.VoiceMail {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Intercom.Set {
			e.FieldStart("intercom")
			s.Intercom.Encode(e)
		}
	}
	{
		if s.AutoCallRecordingAccessMembers != nil {
			e.FieldStart("auto_call_recording_access_members")
			e.ArrStart()
			for _, elem := range s.AutoCallRecordingAccessMembers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.AdHocCallRecordingAccessMembers != nil {
			e.FieldStart("ad_hoc_call_recording_access_members")
			e.ArrStart()
			for _, elem := range s.AdHocCallRecordingAccessMembers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfPhoneUserSettingsOK = [15]string{
	0:  "area_code",
	1:  "audio_prompt_language",
	2:  "company_number",
	3:  "country",
	4:  "delegation",
	5:  "desk_phone",
	6:  "extension_number",
	7:  "music_on_hold_id",
	8:  "outbound_caller",
	9:  "outbound_caller_ids",
	10: "status",
	11: "voice_mail",
	12: "intercom",
	13: "auto_call_recording_access_members",
	14: "ad_hoc_call_recording_access_members",
}

// Decode decodes PhoneUserSettingsOK from json.
func (s *PhoneUserSettingsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserSettingsOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "area_code":
			if err := func() error {
				s.AreaCode.Reset()
				if err := s.AreaCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"area_code\"")
			}
		case "audio_prompt_language":
			if err := func() error {
				s.AudioPromptLanguage.Reset()
				if err := s.AudioPromptLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_prompt_language\"")
			}
		case "company_number":
			if err := func() error {
				s.CompanyNumber.Reset()
				if err := s.CompanyNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_number\"")
			}
		case "country":
			if err := func() error {
				s.Country.Reset()
				if err := s.Country.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country\"")
			}
		case "delegation":
			if err := func() error {
				s.Delegation.Reset()
				if err := s.Delegation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delegation\"")
			}
		case "desk_phone":
			if err := func() error {
				s.DeskPhone.Reset()
				if err := s.DeskPhone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"desk_phone\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "music_on_hold_id":
			if err := func() error {
				s.MusicOnHoldID.Reset()
				if err := s.MusicOnHoldID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"music_on_hold_id\"")
			}
		case "outbound_caller":
			if err := func() error {
				s.OutboundCaller.Reset()
				if err := s.OutboundCaller.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"outbound_caller\"")
			}
		case "outbound_caller_ids":
			if err := func() error {
				s.OutboundCallerIds = make([]PhoneUserSettingsOKOutboundCallerIdsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PhoneUserSettingsOKOutboundCallerIdsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.OutboundCallerIds = append(s.OutboundCallerIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"outbound_caller_ids\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "voice_mail":
			if err := func() error {
				s.VoiceMail = make([]PhoneUserSettingsOKVoiceMailItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PhoneUserSettingsOKVoiceMailItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.VoiceMail = append(s.VoiceMail, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voice_mail\"")
			}
		case "intercom":
			if err := func() error {
				s.Intercom.Reset()
				if err := s.Intercom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"intercom\"")
			}
		case "auto_call_recording_access_members":
			if err := func() error {
				s.AutoCallRecordingAccessMembers = make([]PhoneUserSettingsOKAutoCallRecordingAccessMembersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PhoneUserSettingsOKAutoCallRecordingAccessMembersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.AutoCallRecordingAccessMembers = append(s.AutoCallRecordingAccessMembers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_call_recording_access_members\"")
			}
		case "ad_hoc_call_recording_access_members":
			if err := func() error {
				s.AdHocCallRecordingAccessMembers = make([]PhoneUserSettingsOKAdHocCallRecordingAccessMembersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PhoneUserSettingsOKAdHocCallRecordingAccessMembersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.AdHocCallRecordingAccessMembers = append(s.AdHocCallRecordingAccessMembers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ad_hoc_call_recording_access_members\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserSettingsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserSettingsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserSettingsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserSettingsOKAdHocCallRecordingAccessMembersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserSettingsOKAdHocCallRecordingAccessMembersItem) encodeFields(e *jx.Encoder) {
	{
		if s.AccessUserID.Set {
			e.FieldStart("access_user_id")
			s.AccessUserID.Encode(e)
		}
	}
	{
		if s.AllowDelete.Set {
			e.FieldStart("allow_delete")
			s.AllowDelete.Encode(e)
		}
	}
	{
		if s.AllowDownload.Set {
			e.FieldStart("allow_download")
			s.AllowDownload.Encode(e)
		}
	}
	{
		if s.SharedID.Set {
			e.FieldStart("shared_id")
			s.SharedID.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserSettingsOKAdHocCallRecordingAccessMembersItem = [4]string{
	0: "access_user_id",
	1: "allow_delete",
	2: "allow_download",
	3: "shared_id",
}

// Decode decodes PhoneUserSettingsOKAdHocCallRecordingAccessMembersItem from json.
func (s *PhoneUserSettingsOKAdHocCallRecordingAccessMembersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserSettingsOKAdHocCallRecordingAccessMembersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "access_user_id":
			if err := func() error {
				s.AccessUserID.Reset()
				if err := s.AccessUserID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_user_id\"")
			}
		case "allow_delete":
			if err := func() error {
				s.AllowDelete.Reset()
				if err := s.AllowDelete.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_delete\"")
			}
		case "allow_download":
			if err := func() error {
				s.AllowDownload.Reset()
				if err := s.AllowDownload.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_download\"")
			}
		case "shared_id":
			if err := func() error {
				s.SharedID.Reset()
				if err := s.SharedID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shared_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserSettingsOKAdHocCallRecordingAccessMembersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserSettingsOKAdHocCallRecordingAccessMembersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserSettingsOKAdHocCallRecordingAccessMembersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserSettingsOKAutoCallRecordingAccessMembersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserSettingsOKAutoCallRecordingAccessMembersItem) encodeFields(e *jx.Encoder) {
	{
		if s.AccessUserID.Set {
			e.FieldStart("access_user_id")
			s.AccessUserID.Encode(e)
		}
	}
	{
		if s.AllowDelete.Set {
			e.FieldStart("allow_delete")
			s.AllowDelete.Encode(e)
		}
	}
	{
		if s.AllowDownload.Set {
			e.FieldStart("allow_download")
			s.AllowDownload.Encode(e)
		}
	}
	{
		if s.SharedID.Set {
			e.FieldStart("shared_id")
			s.SharedID.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserSettingsOKAutoCallRecordingAccessMembersItem = [4]string{
	0: "access_user_id",
	1: "allow_delete",
	2: "allow_download",
	3: "shared_id",
}

// Decode decodes PhoneUserSettingsOKAutoCallRecordingAccessMembersItem from json.
func (s *PhoneUserSettingsOKAutoCallRecordingAccessMembersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserSettingsOKAutoCallRecordingAccessMembersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "access_user_id":
			if err := func() error {
				s.AccessUserID.Reset()
				if err := s.AccessUserID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_user_id\"")
			}
		case "allow_delete":
			if err := func() error {
				s.AllowDelete.Reset()
				if err := s.AllowDelete.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_delete\"")
			}
		case "allow_download":
			if err := func() error {
				s.AllowDownload.Reset()
				if err := s.AllowDownload.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_download\"")
			}
		case "shared_id":
			if err := func() error {
				s.SharedID.Reset()
				if err := s.SharedID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shared_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserSettingsOKAutoCallRecordingAccessMembersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserSettingsOKAutoCallRecordingAccessMembersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserSettingsOKAutoCallRecordingAccessMembersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserSettingsOKCountry) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserSettingsOKCountry) encodeFields(e *jx.Encoder) {
	{
		if s.Code.Set {
			e.FieldStart("code")
			s.Code.Encode(e)
		}
	}
	{
		if s.CountryCode.Set {
			e.FieldStart("country_code")
			s.CountryCode.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserSettingsOKCountry = [3]string{
	0: "code",
	1: "country_code",
	2: "name",
}

// Decode decodes PhoneUserSettingsOKCountry from json.
func (s *PhoneUserSettingsOKCountry) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserSettingsOKCountry to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "code":
			if err := func() error {
				s.Code.Reset()
				if err := s.Code.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code\"")
			}
		case "country_code":
			if err := func() error {
				s.CountryCode.Reset()
				if err := s.CountryCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country_code\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserSettingsOKCountry")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserSettingsOKCountry) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserSettingsOKCountry) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserSettingsOKDelegation) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserSettingsOKDelegation) encodeFields(e *jx.Encoder) {
	{
		if s.Assistants != nil {
			e.FieldStart("assistants")
			e.ArrStart()
			for _, elem := range s.Assistants {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Privacy.Set {
			e.FieldStart("privacy")
			s.Privacy.Encode(e)
		}
	}
	{
		if s.Privileges != nil {
			e.FieldStart("privileges")
			e.ArrStart()
			for _, elem := range s.Privileges {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserSettingsOKDelegation = [4]string{
	0: "assistants",
	1: "privacy",
	2: "privileges",
	3: "locked",
}

// Decode decodes PhoneUserSettingsOKDelegation from json.
func (s *PhoneUserSettingsOKDelegation) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserSettingsOKDelegation to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "assistants":
			if err := func() error {
				s.Assistants = make([]PhoneUserSettingsOKDelegationAssistantsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PhoneUserSettingsOKDelegationAssistantsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Assistants = append(s.Assistants, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"assistants\"")
			}
		case "privacy":
			if err := func() error {
				s.Privacy.Reset()
				if err := s.Privacy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"privacy\"")
			}
		case "privileges":
			if err := func() error {
				s.Privileges = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.Privileges = append(s.Privileges, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"privileges\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserSettingsOKDelegation")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserSettingsOKDelegation) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserSettingsOKDelegation) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserSettingsOKDelegationAssistantsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserSettingsOKDelegationAssistantsItem) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ExtensionType.Set {
			e.FieldStart("extension_type")
			s.ExtensionType.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserSettingsOKDelegationAssistantsItem = [5]string{
	0: "display_name",
	1: "extension_id",
	2: "extension_number",
	3: "extension_type",
	4: "id",
}

// Decode decodes PhoneUserSettingsOKDelegationAssistantsItem from json.
func (s *PhoneUserSettingsOKDelegationAssistantsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserSettingsOKDelegationAssistantsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "extension_type":
			if err := func() error {
				s.ExtensionType.Reset()
				if err := s.ExtensionType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_type\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserSettingsOKDelegationAssistantsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserSettingsOKDelegationAssistantsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserSettingsOKDelegationAssistantsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserSettingsOKDeskPhone) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserSettingsOKDeskPhone) encodeFields(e *jx.Encoder) {
	{
		if s.Devices != nil {
			e.FieldStart("devices")
			e.ArrStart()
			for _, elem := range s.Devices {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.KeysPositions.Set {
			e.FieldStart("keys_positions")
			s.KeysPositions.Encode(e)
		}
	}
	{
		if s.PhoneScreenLock.Set {
			e.FieldStart("phone_screen_lock")
			s.PhoneScreenLock.Encode(e)
		}
	}
	{
		if s.PinCode.Set {
			e.FieldStart("pin_code")
			s.PinCode.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserSettingsOKDeskPhone = [4]string{
	0: "devices",
	1: "keys_positions",
	2: "phone_screen_lock",
	3: "pin_code",
}

// Decode decodes PhoneUserSettingsOKDeskPhone from json.
func (s *PhoneUserSettingsOKDeskPhone) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserSettingsOKDeskPhone to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "devices":
			if err := func() error {
				s.Devices = make([]PhoneUserSettingsOKDeskPhoneDevicesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PhoneUserSettingsOKDeskPhoneDevicesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Devices = append(s.Devices, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"devices\"")
			}
		case "keys_positions":
			if err := func() error {
				s.KeysPositions.Reset()
				if err := s.KeysPositions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"keys_positions\"")
			}
		case "phone_screen_lock":
			if err := func() error {
				s.PhoneScreenLock.Reset()
				if err := s.PhoneScreenLock.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_screen_lock\"")
			}
		case "pin_code":
			if err := func() error {
				s.PinCode.Reset()
				if err := s.PinCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pin_code\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserSettingsOKDeskPhone")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserSettingsOKDeskPhone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserSettingsOKDeskPhone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserSettingsOKDeskPhoneDevicesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserSettingsOKDeskPhoneDevicesItem) encodeFields(e *jx.Encoder) {
	{
		if s.DeviceType.Set {
			e.FieldStart("device_type")
			s.DeviceType.Encode(e)
		}
	}
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Policy.Set {
			e.FieldStart("policy")
			s.Policy.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserSettingsOKDeskPhoneDevicesItem = [5]string{
	0: "device_type",
	1: "display_name",
	2: "id",
	3: "policy",
	4: "status",
}

// Decode decodes PhoneUserSettingsOKDeskPhoneDevicesItem from json.
func (s *PhoneUserSettingsOKDeskPhoneDevicesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserSettingsOKDeskPhoneDevicesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "device_type":
			if err := func() error {
				s.DeviceType.Reset()
				if err := s.DeviceType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_type\"")
			}
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "policy":
			if err := func() error {
				s.Policy.Reset()
				if err := s.Policy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"policy\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserSettingsOKDeskPhoneDevicesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserSettingsOKDeskPhoneDevicesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserSettingsOKDeskPhoneDevicesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserSettingsOKDeskPhoneDevicesItemPolicy) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserSettingsOKDeskPhoneDevicesItemPolicy) encodeFields(e *jx.Encoder) {
	{
		if s.CallControl.Set {
			e.FieldStart("call_control")
			s.CallControl.Encode(e)
		}
	}
	{
		if s.HotDesking.Set {
			e.FieldStart("hot_desking")
			s.HotDesking.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserSettingsOKDeskPhoneDevicesItemPolicy = [2]string{
	0: "call_control",
	1: "hot_desking",
}

// Decode decodes PhoneUserSettingsOKDeskPhoneDevicesItemPolicy from json.
func (s *PhoneUserSettingsOKDeskPhoneDevicesItemPolicy) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserSettingsOKDeskPhoneDevicesItemPolicy to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "call_control":
			if err := func() error {
				s.CallControl.Reset()
				if err := s.CallControl.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_control\"")
			}
		case "hot_desking":
			if err := func() error {
				s.HotDesking.Reset()
				if err := s.HotDesking.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hot_desking\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserSettingsOKDeskPhoneDevicesItemPolicy")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserSettingsOKDeskPhoneDevicesItemPolicy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserSettingsOKDeskPhoneDevicesItemPolicy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserSettingsOKDeskPhoneDevicesItemPolicyCallControl) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserSettingsOKDeskPhoneDevicesItemPolicyCallControl) encodeFields(e *jx.Encoder) {
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserSettingsOKDeskPhoneDevicesItemPolicyCallControl = [1]string{
	0: "status",
}

// Decode decodes PhoneUserSettingsOKDeskPhoneDevicesItemPolicyCallControl from json.
func (s *PhoneUserSettingsOKDeskPhoneDevicesItemPolicyCallControl) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserSettingsOKDeskPhoneDevicesItemPolicyCallControl to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserSettingsOKDeskPhoneDevicesItemPolicyCallControl")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserSettingsOKDeskPhoneDevicesItemPolicyCallControl) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserSettingsOKDeskPhoneDevicesItemPolicyCallControl) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserSettingsOKDeskPhoneDevicesItemPolicyHotDesking) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserSettingsOKDeskPhoneDevicesItemPolicyHotDesking) encodeFields(e *jx.Encoder) {
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserSettingsOKDeskPhoneDevicesItemPolicyHotDesking = [1]string{
	0: "status",
}

// Decode decodes PhoneUserSettingsOKDeskPhoneDevicesItemPolicyHotDesking from json.
func (s *PhoneUserSettingsOKDeskPhoneDevicesItemPolicyHotDesking) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserSettingsOKDeskPhoneDevicesItemPolicyHotDesking to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserSettingsOKDeskPhoneDevicesItemPolicyHotDesking")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserSettingsOKDeskPhoneDevicesItemPolicyHotDesking) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserSettingsOKDeskPhoneDevicesItemPolicyHotDesking) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserSettingsOKDeskPhoneKeysPositions) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserSettingsOKDeskPhoneKeysPositions) encodeFields(e *jx.Encoder) {
	{
		if s.PrimaryNumber.Set {
			e.FieldStart("primary_number")
			s.PrimaryNumber.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserSettingsOKDeskPhoneKeysPositions = [1]string{
	0: "primary_number",
}

// Decode decodes PhoneUserSettingsOKDeskPhoneKeysPositions from json.
func (s *PhoneUserSettingsOKDeskPhoneKeysPositions) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserSettingsOKDeskPhoneKeysPositions to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "primary_number":
			if err := func() error {
				s.PrimaryNumber.Reset()
				if err := s.PrimaryNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"primary_number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserSettingsOKDeskPhoneKeysPositions")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserSettingsOKDeskPhoneKeysPositions) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserSettingsOKDeskPhoneKeysPositions) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserSettingsOKIntercom) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserSettingsOKIntercom) encodeFields(e *jx.Encoder) {
	{
		if s.AudioIntercoms != nil {
			e.FieldStart("audio_intercoms")
			e.ArrStart()
			for _, elem := range s.AudioIntercoms {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Device.Set {
			e.FieldStart("device")
			s.Device.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserSettingsOKIntercom = [2]string{
	0: "audio_intercoms",
	1: "device",
}

// Decode decodes PhoneUserSettingsOKIntercom from json.
func (s *PhoneUserSettingsOKIntercom) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserSettingsOKIntercom to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_intercoms":
			if err := func() error {
				s.AudioIntercoms = make([]PhoneUserSettingsOKIntercomAudioIntercomsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PhoneUserSettingsOKIntercomAudioIntercomsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.AudioIntercoms = append(s.AudioIntercoms, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_intercoms\"")
			}
		case "device":
			if err := func() error {
				s.Device.Reset()
				if err := s.Device.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserSettingsOKIntercom")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserSettingsOKIntercom) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserSettingsOKIntercom) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserSettingsOKIntercomAudioIntercomsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserSettingsOKIntercomAudioIntercomsItem) encodeFields(e *jx.Encoder) {
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ExtensionType.Set {
			e.FieldStart("extension_type")
			s.ExtensionType.Encode(e)
		}
	}
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.DeviceID.Set {
			e.FieldStart("device_id")
			s.DeviceID.Encode(e)
		}
	}
	{
		if s.DeviceStatus.Set {
			e.FieldStart("device_status")
			s.DeviceStatus.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserSettingsOKIntercomAudioIntercomsItem = [7]string{
	0: "extension_id",
	1: "extension_number",
	2: "extension_type",
	3: "display_name",
	4: "status",
	5: "device_id",
	6: "device_status",
}

// Decode decodes PhoneUserSettingsOKIntercomAudioIntercomsItem from json.
func (s *PhoneUserSettingsOKIntercomAudioIntercomsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserSettingsOKIntercomAudioIntercomsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "extension_type":
			if err := func() error {
				s.ExtensionType.Reset()
				if err := s.ExtensionType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_type\"")
			}
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "device_id":
			if err := func() error {
				s.DeviceID.Reset()
				if err := s.DeviceID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_id\"")
			}
		case "device_status":
			if err := func() error {
				s.DeviceStatus.Reset()
				if err := s.DeviceStatus.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserSettingsOKIntercomAudioIntercomsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserSettingsOKIntercomAudioIntercomsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserSettingsOKIntercomAudioIntercomsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserSettingsOKIntercomDevice) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserSettingsOKIntercomDevice) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserSettingsOKIntercomDevice = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes PhoneUserSettingsOKIntercomDevice from json.
func (s *PhoneUserSettingsOKIntercomDevice) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserSettingsOKIntercomDevice to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserSettingsOKIntercomDevice")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserSettingsOKIntercomDevice) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserSettingsOKIntercomDevice) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserSettingsOKOutboundCaller) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserSettingsOKOutboundCaller) encodeFields(e *jx.Encoder) {
	{
		if s.Number.Set {
			e.FieldStart("number")
			s.Number.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserSettingsOKOutboundCaller = [1]string{
	0: "number",
}

// Decode decodes PhoneUserSettingsOKOutboundCaller from json.
func (s *PhoneUserSettingsOKOutboundCaller) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserSettingsOKOutboundCaller to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "number":
			if err := func() error {
				s.Number.Reset()
				if err := s.Number.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserSettingsOKOutboundCaller")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserSettingsOKOutboundCaller) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserSettingsOKOutboundCaller) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserSettingsOKOutboundCallerIdsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserSettingsOKOutboundCallerIdsItem) encodeFields(e *jx.Encoder) {
	{
		if s.IsDefault.Set {
			e.FieldStart("is_default")
			s.IsDefault.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Number.Set {
			e.FieldStart("number")
			s.Number.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserSettingsOKOutboundCallerIdsItem = [3]string{
	0: "is_default",
	1: "name",
	2: "number",
}

// Decode decodes PhoneUserSettingsOKOutboundCallerIdsItem from json.
func (s *PhoneUserSettingsOKOutboundCallerIdsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserSettingsOKOutboundCallerIdsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "is_default":
			if err := func() error {
				s.IsDefault.Reset()
				if err := s.IsDefault.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"is_default\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "number":
			if err := func() error {
				s.Number.Reset()
				if err := s.Number.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserSettingsOKOutboundCallerIdsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserSettingsOKOutboundCallerIdsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserSettingsOKOutboundCallerIdsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserSettingsOKVoiceMailItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserSettingsOKVoiceMailItem) encodeFields(e *jx.Encoder) {
	{
		if s.AccessUserID.Set {
			e.FieldStart("access_user_id")
			s.AccessUserID.Encode(e)
		}
	}
	{
		if s.Delete.Set {
			e.FieldStart("delete")
			s.Delete.Encode(e)
		}
	}
	{
		if s.Download.Set {
			e.FieldStart("download")
			s.Download.Encode(e)
		}
	}
	{
		if s.SharedID.Set {
			e.FieldStart("shared_id")
			s.SharedID.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserSettingsOKVoiceMailItem = [4]string{
	0: "access_user_id",
	1: "delete",
	2: "download",
	3: "shared_id",
}

// Decode decodes PhoneUserSettingsOKVoiceMailItem from json.
func (s *PhoneUserSettingsOKVoiceMailItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserSettingsOKVoiceMailItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "access_user_id":
			if err := func() error {
				s.AccessUserID.Reset()
				if err := s.AccessUserID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_user_id\"")
			}
		case "delete":
			if err := func() error {
				s.Delete.Reset()
				if err := s.Delete.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delete\"")
			}
		case "download":
			if err := func() error {
				s.Download.Reset()
				if err := s.Download.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"download\"")
			}
		case "shared_id":
			if err := func() error {
				s.SharedID.Reset()
				if err := s.SharedID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shared_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserSettingsOKVoiceMailItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserSettingsOKVoiceMailItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserSettingsOKVoiceMailItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserVoiceMailsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserVoiceMailsOK) encodeFields(e *jx.Encoder) {
	{
		if s.From.Set {
			e.FieldStart("from")
			s.From.Encode(e, json.EncodeDate)
		}
	}
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageCount.Set {
			e.FieldStart("page_count")
			s.PageCount.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
	{
		if s.To.Set {
			e.FieldStart("to")
			s.To.Encode(e, json.EncodeDate)
		}
	}
	{
		if s.TotalRecords.Set {
			e.FieldStart("total_records")
			s.TotalRecords.Encode(e)
		}
	}
	{
		if s.VoiceMails != nil {
			e.FieldStart("voice_mails")
			e.ArrStart()
			for _, elem := range s.VoiceMails {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfPhoneUserVoiceMailsOK = [7]string{
	0: "from",
	1: "next_page_token",
	2: "page_count",
	3: "page_size",
	4: "to",
	5: "total_records",
	6: "voice_mails",
}

// Decode decodes PhoneUserVoiceMailsOK from json.
func (s *PhoneUserVoiceMailsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserVoiceMailsOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "from":
			if err := func() error {
				s.From.Reset()
				if err := s.From.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"from\"")
			}
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_count":
			if err := func() error {
				s.PageCount.Reset()
				if err := s.PageCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_count\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		case "to":
			if err := func() error {
				s.To.Reset()
				if err := s.To.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"to\"")
			}
		case "total_records":
			if err := func() error {
				s.TotalRecords.Reset()
				if err := s.TotalRecords.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_records\"")
			}
		case "voice_mails":
			if err := func() error {
				s.VoiceMails = make([]PhoneUserVoiceMailsOKVoiceMailsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PhoneUserVoiceMailsOKVoiceMailsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.VoiceMails = append(s.VoiceMails, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voice_mails\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserVoiceMailsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserVoiceMailsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserVoiceMailsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PhoneUserVoiceMailsOKVoiceMailsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PhoneUserVoiceMailsOKVoiceMailsItem) encodeFields(e *jx.Encoder) {
	{
		if s.CallID.Set {
			e.FieldStart("call_id")
			s.CallID.Encode(e)
		}
	}
	{
		if s.CallLogID.Set {
			e.FieldStart("call_log_id")
			s.CallLogID.Encode(e)
		}
	}
	{
		if s.CalleeName.Set {
			e.FieldStart("callee_name")
			s.CalleeName.Encode(e)
		}
	}
	{
		if s.CalleeNumber.Set {
			e.FieldStart("callee_number")
			s.CalleeNumber.Encode(e)
		}
	}
	{
		if s.CalleeNumberType.Set {
			e.FieldStart("callee_number_type")
			s.CalleeNumberType.Encode(e)
		}
	}
	{
		if s.CallerName.Set {
			e.FieldStart("caller_name")
			s.CallerName.Encode(e)
		}
	}
	{
		if s.CallerNumber.Set {
			e.FieldStart("caller_number")
			s.CallerNumber.Encode(e)
		}
	}
	{
		if s.CallerNumberType.Set {
			e.FieldStart("caller_number_type")
			s.CallerNumberType.Encode(e)
		}
	}
	{
		if s.DateTime.Set {
			e.FieldStart("date_time")
			s.DateTime.Encode(e)
		}
	}
	{
		if s.DownloadURL.Set {
			e.FieldStart("download_url")
			s.DownloadURL.Encode(e)
		}
	}
	{
		if s.Duration.Set {
			e.FieldStart("duration")
			s.Duration.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
}

var jsonFieldsNameOfPhoneUserVoiceMailsOKVoiceMailsItem = [13]string{
	0:  "call_id",
	1:  "call_log_id",
	2:  "callee_name",
	3:  "callee_number",
	4:  "callee_number_type",
	5:  "caller_name",
	6:  "caller_number",
	7:  "caller_number_type",
	8:  "date_time",
	9:  "download_url",
	10: "duration",
	11: "id",
	12: "status",
}

// Decode decodes PhoneUserVoiceMailsOKVoiceMailsItem from json.
func (s *PhoneUserVoiceMailsOKVoiceMailsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneUserVoiceMailsOKVoiceMailsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "call_id":
			if err := func() error {
				s.CallID.Reset()
				if err := s.CallID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_id\"")
			}
		case "call_log_id":
			if err := func() error {
				s.CallLogID.Reset()
				if err := s.CallLogID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_log_id\"")
			}
		case "callee_name":
			if err := func() error {
				s.CalleeName.Reset()
				if err := s.CalleeName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_name\"")
			}
		case "callee_number":
			if err := func() error {
				s.CalleeNumber.Reset()
				if err := s.CalleeNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_number\"")
			}
		case "callee_number_type":
			if err := func() error {
				s.CalleeNumberType.Reset()
				if err := s.CalleeNumberType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_number_type\"")
			}
		case "caller_name":
			if err := func() error {
				s.CallerName.Reset()
				if err := s.CallerName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_name\"")
			}
		case "caller_number":
			if err := func() error {
				s.CallerNumber.Reset()
				if err := s.CallerNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_number\"")
			}
		case "caller_number_type":
			if err := func() error {
				s.CallerNumberType.Reset()
				if err := s.CallerNumberType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_number_type\"")
			}
		case "date_time":
			if err := func() error {
				s.DateTime.Reset()
				if err := s.DateTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"date_time\"")
			}
		case "download_url":
			if err := func() error {
				s.DownloadURL.Reset()
				if err := s.DownloadURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"download_url\"")
			}
		case "duration":
			if err := func() error {
				s.Duration.Reset()
				if err := s.Duration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"duration\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PhoneUserVoiceMailsOKVoiceMailsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PhoneUserVoiceMailsOKVoiceMailsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneUserVoiceMailsOKVoiceMailsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PostCallHandlingSettingsCallForwarding) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PostCallHandlingSettingsCallForwarding) encodeFields(e *jx.Encoder) {
	{
		if s.Settings.Set {
			e.FieldStart("settings")
			s.Settings.Encode(e)
		}
	}
	{
		if s.SubSettingType.Set {
			e.FieldStart("sub_setting_type")
			s.SubSettingType.Encode(e)
		}
	}
}

var jsonFieldsNameOfPostCallHandlingSettingsCallForwarding = [2]string{
	0: "settings",
	1: "sub_setting_type",
}

// Decode decodes PostCallHandlingSettingsCallForwarding from json.
func (s *PostCallHandlingSettingsCallForwarding) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PostCallHandlingSettingsCallForwarding to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "settings":
			if err := func() error {
				s.Settings.Reset()
				if err := s.Settings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"settings\"")
			}
		case "sub_setting_type":
			if err := func() error {
				s.SubSettingType.Reset()
				if err := s.SubSettingType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sub_setting_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PostCallHandlingSettingsCallForwarding")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PostCallHandlingSettingsCallForwarding) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PostCallHandlingSettingsCallForwarding) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PostCallHandlingSettingsCallForwardingSettings) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PostCallHandlingSettingsCallForwardingSettings) encodeFields(e *jx.Encoder) {
	{
		if s.HolidayID.Set {
			e.FieldStart("holiday_id")
			s.HolidayID.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.PhoneNumber.Set {
			e.FieldStart("phone_number")
			s.PhoneNumber.Encode(e)
		}
	}
}

var jsonFieldsNameOfPostCallHandlingSettingsCallForwardingSettings = [3]string{
	0: "holiday_id",
	1: "description",
	2: "phone_number",
}

// Decode decodes PostCallHandlingSettingsCallForwardingSettings from json.
func (s *PostCallHandlingSettingsCallForwardingSettings) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PostCallHandlingSettingsCallForwardingSettings to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "holiday_id":
			if err := func() error {
				s.HolidayID.Reset()
				if err := s.HolidayID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holiday_id\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PostCallHandlingSettingsCallForwardingSettings")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PostCallHandlingSettingsCallForwardingSettings) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PostCallHandlingSettingsCallForwardingSettings) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PostCallHandlingSettingsHoliday) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PostCallHandlingSettingsHoliday) encodeFields(e *jx.Encoder) {
	{
		if s.Settings.Set {
			e.FieldStart("settings")
			s.Settings.Encode(e)
		}
	}
	{
		if s.SubSettingType.Set {
			e.FieldStart("sub_setting_type")
			s.SubSettingType.Encode(e)
		}
	}
}

var jsonFieldsNameOfPostCallHandlingSettingsHoliday = [2]string{
	0: "settings",
	1: "sub_setting_type",
}

// Decode decodes PostCallHandlingSettingsHoliday from json.
func (s *PostCallHandlingSettingsHoliday) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PostCallHandlingSettingsHoliday to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "settings":
			if err := func() error {
				s.Settings.Reset()
				if err := s.Settings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"settings\"")
			}
		case "sub_setting_type":
			if err := func() error {
				s.SubSettingType.Reset()
				if err := s.SubSettingType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sub_setting_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PostCallHandlingSettingsHoliday")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PostCallHandlingSettingsHoliday) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PostCallHandlingSettingsHoliday) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PostCallHandlingSettingsHolidaySettings) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PostCallHandlingSettingsHolidaySettings) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.From.Set {
			e.FieldStart("from")
			s.From.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.To.Set {
			e.FieldStart("to")
			s.To.Encode(e, json.EncodeDateTime)
		}
	}
}

var jsonFieldsNameOfPostCallHandlingSettingsHolidaySettings = [3]string{
	0: "name",
	1: "from",
	2: "to",
}

// Decode decodes PostCallHandlingSettingsHolidaySettings from json.
func (s *PostCallHandlingSettingsHolidaySettings) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PostCallHandlingSettingsHolidaySettings to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "from":
			if err := func() error {
				s.From.Reset()
				if err := s.From.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"from\"")
			}
		case "to":
			if err := func() error {
				s.To.Reset()
				if err := s.To.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"to\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PostCallHandlingSettingsHolidaySettings")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PostCallHandlingSettingsHolidaySettings) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PostCallHandlingSettingsHolidaySettings) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SmsByMessageIdOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SmsByMessageIdOK) encodeFields(e *jx.Encoder) {
	{
		if s.Attachments != nil {
			e.FieldStart("attachments")
			e.ArrStart()
			for _, elem := range s.Attachments {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.DateTime.Set {
			e.FieldStart("date_time")
			s.DateTime.Encode(e)
		}
	}
	{
		if s.Direction.Set {
			e.FieldStart("direction")
			s.Direction.Encode(e)
		}
	}
	{
		if s.Message.Set {
			e.FieldStart("message")
			s.Message.Encode(e)
		}
	}
	{
		if s.MessageID.Set {
			e.FieldStart("message_id")
			s.MessageID.Encode(e)
		}
	}
	{
		if s.MessageType.Set {
			e.FieldStart("message_type")
			s.MessageType.Encode(e)
		}
	}
	{
		if s.Sender.Set {
			e.FieldStart("sender")
			s.Sender.Encode(e)
		}
	}
	{
		if s.ToMembers != nil {
			e.FieldStart("to_members")
			e.ArrStart()
			for _, elem := range s.ToMembers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfSmsByMessageIdOK = [8]string{
	0: "attachments",
	1: "date_time",
	2: "direction",
	3: "message",
	4: "message_id",
	5: "message_type",
	6: "sender",
	7: "to_members",
}

// Decode decodes SmsByMessageIdOK from json.
func (s *SmsByMessageIdOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SmsByMessageIdOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "attachments":
			if err := func() error {
				s.Attachments = make([]SmsByMessageIdOKAttachmentsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem SmsByMessageIdOKAttachmentsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Attachments = append(s.Attachments, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"attachments\"")
			}
		case "date_time":
			if err := func() error {
				s.DateTime.Reset()
				if err := s.DateTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"date_time\"")
			}
		case "direction":
			if err := func() error {
				s.Direction.Reset()
				if err := s.Direction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"direction\"")
			}
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		case "message_id":
			if err := func() error {
				s.MessageID.Reset()
				if err := s.MessageID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message_id\"")
			}
		case "message_type":
			if err := func() error {
				s.MessageType.Reset()
				if err := s.MessageType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message_type\"")
			}
		case "sender":
			if err := func() error {
				s.Sender.Reset()
				if err := s.Sender.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sender\"")
			}
		case "to_members":
			if err := func() error {
				s.ToMembers = make([]SmsByMessageIdOKToMembersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem SmsByMessageIdOKToMembersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.ToMembers = append(s.ToMembers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"to_members\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SmsByMessageIdOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SmsByMessageIdOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SmsByMessageIdOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SmsByMessageIdOKAttachmentsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SmsByMessageIdOKAttachmentsItem) encodeFields(e *jx.Encoder) {
	{
		if s.DownloadURL.Set {
			e.FieldStart("download_url")
			s.DownloadURL.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Size.Set {
			e.FieldStart("size")
			s.Size.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfSmsByMessageIdOKAttachmentsItem = [5]string{
	0: "download_url",
	1: "id",
	2: "name",
	3: "size",
	4: "type",
}

// Decode decodes SmsByMessageIdOKAttachmentsItem from json.
func (s *SmsByMessageIdOKAttachmentsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SmsByMessageIdOKAttachmentsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "download_url":
			if err := func() error {
				s.DownloadURL.Reset()
				if err := s.DownloadURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"download_url\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "size":
			if err := func() error {
				s.Size.Reset()
				if err := s.Size.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SmsByMessageIdOKAttachmentsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SmsByMessageIdOKAttachmentsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SmsByMessageIdOKAttachmentsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SmsByMessageIdOKSender) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SmsByMessageIdOKSender) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.Owner.Set {
			e.FieldStart("owner")
			s.Owner.Encode(e)
		}
	}
	{
		e.FieldStart("phone_number")
		e.Str(s.PhoneNumber)
	}
}

var jsonFieldsNameOfSmsByMessageIdOKSender = [3]string{
	0: "display_name",
	1: "owner",
	2: "phone_number",
}

// Decode decodes SmsByMessageIdOKSender from json.
func (s *SmsByMessageIdOKSender) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SmsByMessageIdOKSender to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "owner":
			if err := func() error {
				s.Owner.Reset()
				if err := s.Owner.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"owner\"")
			}
		case "phone_number":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.PhoneNumber = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SmsByMessageIdOKSender")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000100,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfSmsByMessageIdOKSender) {
					name = jsonFieldsNameOfSmsByMessageIdOKSender[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SmsByMessageIdOKSender) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SmsByMessageIdOKSender) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SmsByMessageIdOKSenderOwner) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SmsByMessageIdOKSenderOwner) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfSmsByMessageIdOKSenderOwner = [2]string{
	0: "id",
	1: "type",
}

// Decode decodes SmsByMessageIdOKSenderOwner from json.
func (s *SmsByMessageIdOKSenderOwner) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SmsByMessageIdOKSenderOwner to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SmsByMessageIdOKSenderOwner")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SmsByMessageIdOKSenderOwner) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SmsByMessageIdOKSenderOwner) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SmsByMessageIdOKToMembersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SmsByMessageIdOKToMembersItem) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.Owner.Set {
			e.FieldStart("owner")
			s.Owner.Encode(e)
		}
	}
	{
		e.FieldStart("phone_number")
		e.Str(s.PhoneNumber)
	}
}

var jsonFieldsNameOfSmsByMessageIdOKToMembersItem = [3]string{
	0: "display_name",
	1: "owner",
	2: "phone_number",
}

// Decode decodes SmsByMessageIdOKToMembersItem from json.
func (s *SmsByMessageIdOKToMembersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SmsByMessageIdOKToMembersItem to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "owner":
			if err := func() error {
				s.Owner.Reset()
				if err := s.Owner.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"owner\"")
			}
		case "phone_number":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.PhoneNumber = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SmsByMessageIdOKToMembersItem")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000100,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfSmsByMessageIdOKToMembersItem) {
					name = jsonFieldsNameOfSmsByMessageIdOKToMembersItem[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SmsByMessageIdOKToMembersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SmsByMessageIdOKToMembersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SmsByMessageIdOKToMembersItemOwner) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SmsByMessageIdOKToMembersItemOwner) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfSmsByMessageIdOKToMembersItemOwner = [2]string{
	0: "id",
	1: "type",
}

// Decode decodes SmsByMessageIdOKToMembersItemOwner from json.
func (s *SmsByMessageIdOKToMembersItemOwner) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SmsByMessageIdOKToMembersItemOwner to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SmsByMessageIdOKToMembersItemOwner")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SmsByMessageIdOKToMembersItemOwner) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SmsByMessageIdOKToMembersItemOwner) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SmsSessionDetailsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SmsSessionDetailsOK) encodeFields(e *jx.Encoder) {
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
	{
		if s.SMSHistories != nil {
			e.FieldStart("sms_histories")
			e.ArrStart()
			for _, elem := range s.SMSHistories {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfSmsSessionDetailsOK = [3]string{
	0: "next_page_token",
	1: "page_size",
	2: "sms_histories",
}

// Decode decodes SmsSessionDetailsOK from json.
func (s *SmsSessionDetailsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SmsSessionDetailsOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		case "sms_histories":
			if err := func() error {
				s.SMSHistories = make([]SmsSessionDetailsOKSMSHistoriesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem SmsSessionDetailsOKSMSHistoriesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.SMSHistories = append(s.SMSHistories, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sms_histories\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SmsSessionDetailsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SmsSessionDetailsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SmsSessionDetailsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SmsSessionDetailsOKSMSHistoriesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SmsSessionDetailsOKSMSHistoriesItem) encodeFields(e *jx.Encoder) {
	{
		if s.Attachments != nil {
			e.FieldStart("attachments")
			e.ArrStart()
			for _, elem := range s.Attachments {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.DateTime.Set {
			e.FieldStart("date_time")
			s.DateTime.Encode(e)
		}
	}
	{
		if s.Direction.Set {
			e.FieldStart("direction")
			s.Direction.Encode(e)
		}
	}
	{
		if s.Message.Set {
			e.FieldStart("message")
			s.Message.Encode(e)
		}
	}
	{
		if s.MessageID.Set {
			e.FieldStart("message_id")
			s.MessageID.Encode(e)
		}
	}
	{
		if s.MessageType.Set {
			e.FieldStart("message_type")
			s.MessageType.Encode(e)
		}
	}
	{
		if s.Sender.Set {
			e.FieldStart("sender")
			s.Sender.Encode(e)
		}
	}
	{
		if s.ToMembers != nil {
			e.FieldStart("to_members")
			e.ArrStart()
			for _, elem := range s.ToMembers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfSmsSessionDetailsOKSMSHistoriesItem = [8]string{
	0: "attachments",
	1: "date_time",
	2: "direction",
	3: "message",
	4: "message_id",
	5: "message_type",
	6: "sender",
	7: "to_members",
}

// Decode decodes SmsSessionDetailsOKSMSHistoriesItem from json.
func (s *SmsSessionDetailsOKSMSHistoriesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SmsSessionDetailsOKSMSHistoriesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "attachments":
			if err := func() error {
				s.Attachments = make([]SmsSessionDetailsOKSMSHistoriesItemAttachmentsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem SmsSessionDetailsOKSMSHistoriesItemAttachmentsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Attachments = append(s.Attachments, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"attachments\"")
			}
		case "date_time":
			if err := func() error {
				s.DateTime.Reset()
				if err := s.DateTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"date_time\"")
			}
		case "direction":
			if err := func() error {
				s.Direction.Reset()
				if err := s.Direction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"direction\"")
			}
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		case "message_id":
			if err := func() error {
				s.MessageID.Reset()
				if err := s.MessageID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message_id\"")
			}
		case "message_type":
			if err := func() error {
				s.MessageType.Reset()
				if err := s.MessageType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message_type\"")
			}
		case "sender":
			if err := func() error {
				s.Sender.Reset()
				if err := s.Sender.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sender\"")
			}
		case "to_members":
			if err := func() error {
				s.ToMembers = make([]SmsSessionDetailsOKSMSHistoriesItemToMembersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem SmsSessionDetailsOKSMSHistoriesItemToMembersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.ToMembers = append(s.ToMembers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"to_members\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SmsSessionDetailsOKSMSHistoriesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SmsSessionDetailsOKSMSHistoriesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SmsSessionDetailsOKSMSHistoriesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SmsSessionDetailsOKSMSHistoriesItemAttachmentsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SmsSessionDetailsOKSMSHistoriesItemAttachmentsItem) encodeFields(e *jx.Encoder) {
	{
		if s.DownloadURL.Set {
			e.FieldStart("download_url")
			s.DownloadURL.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Size.Set {
			e.FieldStart("size")
			s.Size.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfSmsSessionDetailsOKSMSHistoriesItemAttachmentsItem = [5]string{
	0: "download_url",
	1: "id",
	2: "name",
	3: "size",
	4: "type",
}

// Decode decodes SmsSessionDetailsOKSMSHistoriesItemAttachmentsItem from json.
func (s *SmsSessionDetailsOKSMSHistoriesItemAttachmentsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SmsSessionDetailsOKSMSHistoriesItemAttachmentsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "download_url":
			if err := func() error {
				s.DownloadURL.Reset()
				if err := s.DownloadURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"download_url\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "size":
			if err := func() error {
				s.Size.Reset()
				if err := s.Size.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SmsSessionDetailsOKSMSHistoriesItemAttachmentsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SmsSessionDetailsOKSMSHistoriesItemAttachmentsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SmsSessionDetailsOKSMSHistoriesItemAttachmentsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SmsSessionDetailsOKSMSHistoriesItemSender) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SmsSessionDetailsOKSMSHistoriesItemSender) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.Owner.Set {
			e.FieldStart("owner")
			s.Owner.Encode(e)
		}
	}
	{
		e.FieldStart("phone_number")
		e.Str(s.PhoneNumber)
	}
}

var jsonFieldsNameOfSmsSessionDetailsOKSMSHistoriesItemSender = [3]string{
	0: "display_name",
	1: "owner",
	2: "phone_number",
}

// Decode decodes SmsSessionDetailsOKSMSHistoriesItemSender from json.
func (s *SmsSessionDetailsOKSMSHistoriesItemSender) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SmsSessionDetailsOKSMSHistoriesItemSender to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "owner":
			if err := func() error {
				s.Owner.Reset()
				if err := s.Owner.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"owner\"")
			}
		case "phone_number":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.PhoneNumber = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SmsSessionDetailsOKSMSHistoriesItemSender")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000100,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfSmsSessionDetailsOKSMSHistoriesItemSender) {
					name = jsonFieldsNameOfSmsSessionDetailsOKSMSHistoriesItemSender[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SmsSessionDetailsOKSMSHistoriesItemSender) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SmsSessionDetailsOKSMSHistoriesItemSender) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SmsSessionDetailsOKSMSHistoriesItemSenderOwner) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SmsSessionDetailsOKSMSHistoriesItemSenderOwner) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfSmsSessionDetailsOKSMSHistoriesItemSenderOwner = [2]string{
	0: "id",
	1: "type",
}

// Decode decodes SmsSessionDetailsOKSMSHistoriesItemSenderOwner from json.
func (s *SmsSessionDetailsOKSMSHistoriesItemSenderOwner) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SmsSessionDetailsOKSMSHistoriesItemSenderOwner to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SmsSessionDetailsOKSMSHistoriesItemSenderOwner")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SmsSessionDetailsOKSMSHistoriesItemSenderOwner) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SmsSessionDetailsOKSMSHistoriesItemSenderOwner) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SmsSessionDetailsOKSMSHistoriesItemToMembersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SmsSessionDetailsOKSMSHistoriesItemToMembersItem) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.Owner.Set {
			e.FieldStart("owner")
			s.Owner.Encode(e)
		}
	}
	{
		e.FieldStart("phone_number")
		e.Str(s.PhoneNumber)
	}
}

var jsonFieldsNameOfSmsSessionDetailsOKSMSHistoriesItemToMembersItem = [3]string{
	0: "display_name",
	1: "owner",
	2: "phone_number",
}

// Decode decodes SmsSessionDetailsOKSMSHistoriesItemToMembersItem from json.
func (s *SmsSessionDetailsOKSMSHistoriesItemToMembersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SmsSessionDetailsOKSMSHistoriesItemToMembersItem to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "owner":
			if err := func() error {
				s.Owner.Reset()
				if err := s.Owner.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"owner\"")
			}
		case "phone_number":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.PhoneNumber = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SmsSessionDetailsOKSMSHistoriesItemToMembersItem")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000100,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfSmsSessionDetailsOKSMSHistoriesItemToMembersItem) {
					name = jsonFieldsNameOfSmsSessionDetailsOKSMSHistoriesItemToMembersItem[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SmsSessionDetailsOKSMSHistoriesItemToMembersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SmsSessionDetailsOKSMSHistoriesItemToMembersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SmsSessionDetailsOKSMSHistoriesItemToMembersItemOwner) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SmsSessionDetailsOKSMSHistoriesItemToMembersItemOwner) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfSmsSessionDetailsOKSMSHistoriesItemToMembersItemOwner = [2]string{
	0: "id",
	1: "type",
}

// Decode decodes SmsSessionDetailsOKSMSHistoriesItemToMembersItemOwner from json.
func (s *SmsSessionDetailsOKSMSHistoriesItemToMembersItemOwner) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SmsSessionDetailsOKSMSHistoriesItemToMembersItemOwner to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SmsSessionDetailsOKSMSHistoriesItemToMembersItemOwner")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SmsSessionDetailsOKSMSHistoriesItemToMembersItemOwner) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SmsSessionDetailsOKSMSHistoriesItemToMembersItemOwner) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SmsSessionSyncOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SmsSessionSyncOK) encodeFields(e *jx.Encoder) {
	{
		if s.SMSHistories != nil {
			e.FieldStart("sms_histories")
			e.ArrStart()
			for _, elem := range s.SMSHistories {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.SyncToken.Set {
			e.FieldStart("sync_token")
			s.SyncToken.Encode(e)
		}
	}
}

var jsonFieldsNameOfSmsSessionSyncOK = [2]string{
	0: "sms_histories",
	1: "sync_token",
}

// Decode decodes SmsSessionSyncOK from json.
func (s *SmsSessionSyncOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SmsSessionSyncOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "sms_histories":
			if err := func() error {
				s.SMSHistories = make([]SmsSessionSyncOKSMSHistoriesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem SmsSessionSyncOKSMSHistoriesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.SMSHistories = append(s.SMSHistories, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sms_histories\"")
			}
		case "sync_token":
			if err := func() error {
				s.SyncToken.Reset()
				if err := s.SyncToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sync_token\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SmsSessionSyncOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SmsSessionSyncOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SmsSessionSyncOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SmsSessionSyncOKSMSHistoriesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SmsSessionSyncOKSMSHistoriesItem) encodeFields(e *jx.Encoder) {
	{
		if s.Attachments != nil {
			e.FieldStart("attachments")
			e.ArrStart()
			for _, elem := range s.Attachments {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.DateTime.Set {
			e.FieldStart("date_time")
			s.DateTime.Encode(e)
		}
	}
	{
		if s.Direction.Set {
			e.FieldStart("direction")
			s.Direction.Encode(e)
		}
	}
	{
		if s.Message.Set {
			e.FieldStart("message")
			s.Message.Encode(e)
		}
	}
	{
		if s.MessageID.Set {
			e.FieldStart("message_id")
			s.MessageID.Encode(e)
		}
	}
	{
		if s.MessageType.Set {
			e.FieldStart("message_type")
			s.MessageType.Encode(e)
		}
	}
	{
		if s.Sender.Set {
			e.FieldStart("sender")
			s.Sender.Encode(e)
		}
	}
	{
		if s.ToMembers != nil {
			e.FieldStart("to_members")
			e.ArrStart()
			for _, elem := range s.ToMembers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfSmsSessionSyncOKSMSHistoriesItem = [8]string{
	0: "attachments",
	1: "date_time",
	2: "direction",
	3: "message",
	4: "message_id",
	5: "message_type",
	6: "sender",
	7: "to_members",
}

// Decode decodes SmsSessionSyncOKSMSHistoriesItem from json.
func (s *SmsSessionSyncOKSMSHistoriesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SmsSessionSyncOKSMSHistoriesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "attachments":
			if err := func() error {
				s.Attachments = make([]SmsSessionSyncOKSMSHistoriesItemAttachmentsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem SmsSessionSyncOKSMSHistoriesItemAttachmentsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Attachments = append(s.Attachments, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"attachments\"")
			}
		case "date_time":
			if err := func() error {
				s.DateTime.Reset()
				if err := s.DateTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"date_time\"")
			}
		case "direction":
			if err := func() error {
				s.Direction.Reset()
				if err := s.Direction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"direction\"")
			}
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		case "message_id":
			if err := func() error {
				s.MessageID.Reset()
				if err := s.MessageID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message_id\"")
			}
		case "message_type":
			if err := func() error {
				s.MessageType.Reset()
				if err := s.MessageType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message_type\"")
			}
		case "sender":
			if err := func() error {
				s.Sender.Reset()
				if err := s.Sender.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sender\"")
			}
		case "to_members":
			if err := func() error {
				s.ToMembers = make([]SmsSessionSyncOKSMSHistoriesItemToMembersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem SmsSessionSyncOKSMSHistoriesItemToMembersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.ToMembers = append(s.ToMembers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"to_members\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SmsSessionSyncOKSMSHistoriesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SmsSessionSyncOKSMSHistoriesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SmsSessionSyncOKSMSHistoriesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SmsSessionSyncOKSMSHistoriesItemAttachmentsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SmsSessionSyncOKSMSHistoriesItemAttachmentsItem) encodeFields(e *jx.Encoder) {
	{
		if s.DownloadURL.Set {
			e.FieldStart("download_url")
			s.DownloadURL.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Size.Set {
			e.FieldStart("size")
			s.Size.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfSmsSessionSyncOKSMSHistoriesItemAttachmentsItem = [5]string{
	0: "download_url",
	1: "id",
	2: "name",
	3: "size",
	4: "type",
}

// Decode decodes SmsSessionSyncOKSMSHistoriesItemAttachmentsItem from json.
func (s *SmsSessionSyncOKSMSHistoriesItemAttachmentsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SmsSessionSyncOKSMSHistoriesItemAttachmentsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "download_url":
			if err := func() error {
				s.DownloadURL.Reset()
				if err := s.DownloadURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"download_url\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "size":
			if err := func() error {
				s.Size.Reset()
				if err := s.Size.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SmsSessionSyncOKSMSHistoriesItemAttachmentsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SmsSessionSyncOKSMSHistoriesItemAttachmentsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SmsSessionSyncOKSMSHistoriesItemAttachmentsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SmsSessionSyncOKSMSHistoriesItemSender) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SmsSessionSyncOKSMSHistoriesItemSender) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.Owner.Set {
			e.FieldStart("owner")
			s.Owner.Encode(e)
		}
	}
	{
		e.FieldStart("phone_number")
		e.Str(s.PhoneNumber)
	}
}

var jsonFieldsNameOfSmsSessionSyncOKSMSHistoriesItemSender = [3]string{
	0: "display_name",
	1: "owner",
	2: "phone_number",
}

// Decode decodes SmsSessionSyncOKSMSHistoriesItemSender from json.
func (s *SmsSessionSyncOKSMSHistoriesItemSender) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SmsSessionSyncOKSMSHistoriesItemSender to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "owner":
			if err := func() error {
				s.Owner.Reset()
				if err := s.Owner.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"owner\"")
			}
		case "phone_number":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.PhoneNumber = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SmsSessionSyncOKSMSHistoriesItemSender")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000100,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfSmsSessionSyncOKSMSHistoriesItemSender) {
					name = jsonFieldsNameOfSmsSessionSyncOKSMSHistoriesItemSender[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SmsSessionSyncOKSMSHistoriesItemSender) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SmsSessionSyncOKSMSHistoriesItemSender) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SmsSessionSyncOKSMSHistoriesItemSenderOwner) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SmsSessionSyncOKSMSHistoriesItemSenderOwner) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfSmsSessionSyncOKSMSHistoriesItemSenderOwner = [2]string{
	0: "id",
	1: "type",
}

// Decode decodes SmsSessionSyncOKSMSHistoriesItemSenderOwner from json.
func (s *SmsSessionSyncOKSMSHistoriesItemSenderOwner) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SmsSessionSyncOKSMSHistoriesItemSenderOwner to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SmsSessionSyncOKSMSHistoriesItemSenderOwner")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SmsSessionSyncOKSMSHistoriesItemSenderOwner) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SmsSessionSyncOKSMSHistoriesItemSenderOwner) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SmsSessionSyncOKSMSHistoriesItemToMembersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SmsSessionSyncOKSMSHistoriesItemToMembersItem) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.Owner.Set {
			e.FieldStart("owner")
			s.Owner.Encode(e)
		}
	}
	{
		e.FieldStart("phone_number")
		e.Str(s.PhoneNumber)
	}
}

var jsonFieldsNameOfSmsSessionSyncOKSMSHistoriesItemToMembersItem = [3]string{
	0: "display_name",
	1: "owner",
	2: "phone_number",
}

// Decode decodes SmsSessionSyncOKSMSHistoriesItemToMembersItem from json.
func (s *SmsSessionSyncOKSMSHistoriesItemToMembersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SmsSessionSyncOKSMSHistoriesItemToMembersItem to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "owner":
			if err := func() error {
				s.Owner.Reset()
				if err := s.Owner.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"owner\"")
			}
		case "phone_number":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.PhoneNumber = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SmsSessionSyncOKSMSHistoriesItemToMembersItem")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000100,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfSmsSessionSyncOKSMSHistoriesItemToMembersItem) {
					name = jsonFieldsNameOfSmsSessionSyncOKSMSHistoriesItemToMembersItem[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SmsSessionSyncOKSMSHistoriesItemToMembersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SmsSessionSyncOKSMSHistoriesItemToMembersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SmsSessionSyncOKSMSHistoriesItemToMembersItemOwner) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SmsSessionSyncOKSMSHistoriesItemToMembersItemOwner) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfSmsSessionSyncOKSMSHistoriesItemToMembersItemOwner = [2]string{
	0: "id",
	1: "type",
}

// Decode decodes SmsSessionSyncOKSMSHistoriesItemToMembersItemOwner from json.
func (s *SmsSessionSyncOKSMSHistoriesItemToMembersItemOwner) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SmsSessionSyncOKSMSHistoriesItemToMembersItemOwner to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SmsSessionSyncOKSMSHistoriesItemToMembersItemOwner")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SmsSessionSyncOKSMSHistoriesItemToMembersItemOwner) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SmsSessionSyncOKSMSHistoriesItemToMembersItemOwner) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SyncPhoneDeviceReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SyncPhoneDeviceReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("level")
		e.Int(s.Level)
	}
	{
		if s.SiteID.Set {
			e.FieldStart("site_id")
			s.SiteID.Encode(e)
		}
	}
}

var jsonFieldsNameOfSyncPhoneDeviceReq = [2]string{
	0: "level",
	1: "site_id",
}

// Decode decodes SyncPhoneDeviceReq from json.
func (s *SyncPhoneDeviceReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SyncPhoneDeviceReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "level":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Int()
				s.Level = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"level\"")
			}
		case "site_id":
			if err := func() error {
				s.SiteID.Reset()
				if err := s.SiteID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SyncPhoneDeviceReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfSyncPhoneDeviceReq) {
					name = jsonFieldsNameOfSyncPhoneDeviceReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SyncPhoneDeviceReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SyncPhoneDeviceReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SyncUserCallLogsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SyncUserCallLogsOK) encodeFields(e *jx.Encoder) {
	{
		if s.CallLogs != nil {
			e.FieldStart("call_logs")
			e.ArrStart()
			for _, elem := range s.CallLogs {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.SyncToken.Set {
			e.FieldStart("sync_token")
			s.SyncToken.Encode(e)
		}
	}
}

var jsonFieldsNameOfSyncUserCallLogsOK = [2]string{
	0: "call_logs",
	1: "sync_token",
}

// Decode decodes SyncUserCallLogsOK from json.
func (s *SyncUserCallLogsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SyncUserCallLogsOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "call_logs":
			if err := func() error {
				s.CallLogs = make([]SyncUserCallLogsOKCallLogsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem SyncUserCallLogsOKCallLogsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CallLogs = append(s.CallLogs, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_logs\"")
			}
		case "sync_token":
			if err := func() error {
				s.SyncToken.Reset()
				if err := s.SyncToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sync_token\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SyncUserCallLogsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SyncUserCallLogsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SyncUserCallLogsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SyncUserCallLogsOKCallLogsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SyncUserCallLogsOKCallLogsItem) encodeFields(e *jx.Encoder) {
	{
		if s.AcceptedBy.Set {
			e.FieldStart("accepted_by")
			s.AcceptedBy.Encode(e)
		}
	}
	{
		if s.AnswerStartTime.Set {
			e.FieldStart("answer_start_time")
			s.AnswerStartTime.Encode(e)
		}
	}
	{
		if s.CallEndTime.Set {
			e.FieldStart("call_end_time")
			s.CallEndTime.Encode(e)
		}
	}
	{
		if s.CallID.Set {
			e.FieldStart("call_id")
			s.CallID.Encode(e)
		}
	}
	{
		if s.CalleeUserID.Set {
			e.FieldStart("callee_user_id")
			s.CalleeUserID.Encode(e)
		}
	}
	{
		if s.CalleeCountryCode.Set {
			e.FieldStart("callee_country_code")
			s.CalleeCountryCode.Encode(e)
		}
	}
	{
		if s.CalleeCountryIsoCode.Set {
			e.FieldStart("callee_country_iso_code")
			s.CalleeCountryIsoCode.Encode(e)
		}
	}
	{
		if s.CalleeDidNumber.Set {
			e.FieldStart("callee_did_number")
			s.CalleeDidNumber.Encode(e)
		}
	}
	{
		if s.CalleeName.Set {
			e.FieldStart("callee_name")
			s.CalleeName.Encode(e)
		}
	}
	{
		if s.CalleeNumber.Set {
			e.FieldStart("callee_number")
			s.CalleeNumber.Encode(e)
		}
	}
	{
		if s.CalleeNumberType.Set {
			e.FieldStart("callee_number_type")
			s.CalleeNumberType.Encode(e)
		}
	}
	{
		if s.CalleeNumberSource.Set {
			e.FieldStart("callee_number_source")
			s.CalleeNumberSource.Encode(e)
		}
	}
	{
		if s.CallerUserID.Set {
			e.FieldStart("caller_user_id")
			s.CallerUserID.Encode(e)
		}
	}
	{
		if s.CallerCountryCode.Set {
			e.FieldStart("caller_country_code")
			s.CallerCountryCode.Encode(e)
		}
	}
	{
		if s.CallerCountryIsoCode.Set {
			e.FieldStart("caller_country_iso_code")
			s.CallerCountryIsoCode.Encode(e)
		}
	}
	{
		if s.CallerDidNumber.Set {
			e.FieldStart("caller_did_number")
			s.CallerDidNumber.Encode(e)
		}
	}
	{
		if s.CallerName.Set {
			e.FieldStart("caller_name")
			s.CallerName.Encode(e)
		}
	}
	{
		if s.CallerNumber.Set {
			e.FieldStart("caller_number")
			s.CallerNumber.Encode(e)
		}
	}
	{
		if s.CallerNumberType.Set {
			e.FieldStart("caller_number_type")
			s.CallerNumberType.Encode(e)
		}
	}
	{
		if s.CallerNumberSource.Set {
			e.FieldStart("caller_number_source")
			s.CallerNumberSource.Encode(e)
		}
	}
	{
		if s.CallerBillingReferenceID.Set {
			e.FieldStart("caller_billing_reference_id")
			s.CallerBillingReferenceID.Encode(e)
		}
	}
	{
		if s.Charge.Set {
			e.FieldStart("charge")
			s.Charge.Encode(e)
		}
	}
	{
		if s.ClientCode.Set {
			e.FieldStart("client_code")
			s.ClientCode.Encode(e)
		}
	}
	{
		if s.DateTime.Set {
			e.FieldStart("date_time")
			s.DateTime.Encode(e)
		}
	}
	{
		if s.Direction.Set {
			e.FieldStart("direction")
			s.Direction.Encode(e)
		}
	}
	{
		if s.Duration.Set {
			e.FieldStart("duration")
			s.Duration.Encode(e)
		}
	}
	{
		if s.ForwardedBy.Set {
			e.FieldStart("forwarded_by")
			s.ForwardedBy.Encode(e)
		}
	}
	{
		if s.ForwardedTo.Set {
			e.FieldStart("forwarded_to")
			s.ForwardedTo.Encode(e)
		}
	}
	{
		if s.HasRecording.Set {
			e.FieldStart("has_recording")
			s.HasRecording.Encode(e)
		}
	}
	{
		if s.HasVoicemail.Set {
			e.FieldStart("has_voicemail")
			s.HasVoicemail.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.OutgoingBy.Set {
			e.FieldStart("outgoing_by")
			s.OutgoingBy.Encode(e)
		}
	}
	{
		if s.Path.Set {
			e.FieldStart("path")
			s.Path.Encode(e)
		}
	}
	{
		if s.Rate.Set {
			e.FieldStart("rate")
			s.Rate.Encode(e)
		}
	}
	{
		if s.RecordingType.Set {
			e.FieldStart("recording_type")
			s.RecordingType.Encode(e)
		}
	}
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Site.Set {
			e.FieldStart("site")
			s.Site.Encode(e)
		}
	}
	{
		if s.UserID.Set {
			e.FieldStart("user_id")
			s.UserID.Encode(e)
		}
	}
	{
		if s.HoldTime.Set {
			e.FieldStart("hold_time")
			s.HoldTime.Encode(e)
		}
	}
	{
		if s.WaitingTime.Set {
			e.FieldStart("waiting_time")
			s.WaitingTime.Encode(e)
		}
	}
}

var jsonFieldsNameOfSyncUserCallLogsOKCallLogsItem = [40]string{
	0:  "accepted_by",
	1:  "answer_start_time",
	2:  "call_end_time",
	3:  "call_id",
	4:  "callee_user_id",
	5:  "callee_country_code",
	6:  "callee_country_iso_code",
	7:  "callee_did_number",
	8:  "callee_name",
	9:  "callee_number",
	10: "callee_number_type",
	11: "callee_number_source",
	12: "caller_user_id",
	13: "caller_country_code",
	14: "caller_country_iso_code",
	15: "caller_did_number",
	16: "caller_name",
	17: "caller_number",
	18: "caller_number_type",
	19: "caller_number_source",
	20: "caller_billing_reference_id",
	21: "charge",
	22: "client_code",
	23: "date_time",
	24: "direction",
	25: "duration",
	26: "forwarded_by",
	27: "forwarded_to",
	28: "has_recording",
	29: "has_voicemail",
	30: "id",
	31: "outgoing_by",
	32: "path",
	33: "rate",
	34: "recording_type",
	35: "result",
	36: "site",
	37: "user_id",
	38: "hold_time",
	39: "waiting_time",
}

// Decode decodes SyncUserCallLogsOKCallLogsItem from json.
func (s *SyncUserCallLogsOKCallLogsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SyncUserCallLogsOKCallLogsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "accepted_by":
			if err := func() error {
				s.AcceptedBy.Reset()
				if err := s.AcceptedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"accepted_by\"")
			}
		case "answer_start_time":
			if err := func() error {
				s.AnswerStartTime.Reset()
				if err := s.AnswerStartTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"answer_start_time\"")
			}
		case "call_end_time":
			if err := func() error {
				s.CallEndTime.Reset()
				if err := s.CallEndTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_end_time\"")
			}
		case "call_id":
			if err := func() error {
				s.CallID.Reset()
				if err := s.CallID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_id\"")
			}
		case "callee_user_id":
			if err := func() error {
				s.CalleeUserID.Reset()
				if err := s.CalleeUserID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_user_id\"")
			}
		case "callee_country_code":
			if err := func() error {
				s.CalleeCountryCode.Reset()
				if err := s.CalleeCountryCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_country_code\"")
			}
		case "callee_country_iso_code":
			if err := func() error {
				s.CalleeCountryIsoCode.Reset()
				if err := s.CalleeCountryIsoCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_country_iso_code\"")
			}
		case "callee_did_number":
			if err := func() error {
				s.CalleeDidNumber.Reset()
				if err := s.CalleeDidNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_did_number\"")
			}
		case "callee_name":
			if err := func() error {
				s.CalleeName.Reset()
				if err := s.CalleeName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_name\"")
			}
		case "callee_number":
			if err := func() error {
				s.CalleeNumber.Reset()
				if err := s.CalleeNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_number\"")
			}
		case "callee_number_type":
			if err := func() error {
				s.CalleeNumberType.Reset()
				if err := s.CalleeNumberType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_number_type\"")
			}
		case "callee_number_source":
			if err := func() error {
				s.CalleeNumberSource.Reset()
				if err := s.CalleeNumberSource.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"callee_number_source\"")
			}
		case "caller_user_id":
			if err := func() error {
				s.CallerUserID.Reset()
				if err := s.CallerUserID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_user_id\"")
			}
		case "caller_country_code":
			if err := func() error {
				s.CallerCountryCode.Reset()
				if err := s.CallerCountryCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_country_code\"")
			}
		case "caller_country_iso_code":
			if err := func() error {
				s.CallerCountryIsoCode.Reset()
				if err := s.CallerCountryIsoCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_country_iso_code\"")
			}
		case "caller_did_number":
			if err := func() error {
				s.CallerDidNumber.Reset()
				if err := s.CallerDidNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_did_number\"")
			}
		case "caller_name":
			if err := func() error {
				s.CallerName.Reset()
				if err := s.CallerName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_name\"")
			}
		case "caller_number":
			if err := func() error {
				s.CallerNumber.Reset()
				if err := s.CallerNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_number\"")
			}
		case "caller_number_type":
			if err := func() error {
				s.CallerNumberType.Reset()
				if err := s.CallerNumberType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_number_type\"")
			}
		case "caller_number_source":
			if err := func() error {
				s.CallerNumberSource.Reset()
				if err := s.CallerNumberSource.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_number_source\"")
			}
		case "caller_billing_reference_id":
			if err := func() error {
				s.CallerBillingReferenceID.Reset()
				if err := s.CallerBillingReferenceID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_billing_reference_id\"")
			}
		case "charge":
			if err := func() error {
				s.Charge.Reset()
				if err := s.Charge.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"charge\"")
			}
		case "client_code":
			if err := func() error {
				s.ClientCode.Reset()
				if err := s.ClientCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_code\"")
			}
		case "date_time":
			if err := func() error {
				s.DateTime.Reset()
				if err := s.DateTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"date_time\"")
			}
		case "direction":
			if err := func() error {
				s.Direction.Reset()
				if err := s.Direction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"direction\"")
			}
		case "duration":
			if err := func() error {
				s.Duration.Reset()
				if err := s.Duration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"duration\"")
			}
		case "forwarded_by":
			if err := func() error {
				s.ForwardedBy.Reset()
				if err := s.ForwardedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forwarded_by\"")
			}
		case "forwarded_to":
			if err := func() error {
				s.ForwardedTo.Reset()
				if err := s.ForwardedTo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forwarded_to\"")
			}
		case "has_recording":
			if err := func() error {
				s.HasRecording.Reset()
				if err := s.HasRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"has_recording\"")
			}
		case "has_voicemail":
			if err := func() error {
				s.HasVoicemail.Reset()
				if err := s.HasVoicemail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"has_voicemail\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "outgoing_by":
			if err := func() error {
				s.OutgoingBy.Reset()
				if err := s.OutgoingBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"outgoing_by\"")
			}
		case "path":
			if err := func() error {
				s.Path.Reset()
				if err := s.Path.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"path\"")
			}
		case "rate":
			if err := func() error {
				s.Rate.Reset()
				if err := s.Rate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rate\"")
			}
		case "recording_type":
			if err := func() error {
				s.RecordingType.Reset()
				if err := s.RecordingType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_type\"")
			}
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "site":
			if err := func() error {
				s.Site.Reset()
				if err := s.Site.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site\"")
			}
		case "user_id":
			if err := func() error {
				s.UserID.Reset()
				if err := s.UserID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"user_id\"")
			}
		case "hold_time":
			if err := func() error {
				s.HoldTime.Reset()
				if err := s.HoldTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hold_time\"")
			}
		case "waiting_time":
			if err := func() error {
				s.WaitingTime.Reset()
				if err := s.WaitingTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"waiting_time\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SyncUserCallLogsOKCallLogsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SyncUserCallLogsOKCallLogsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SyncUserCallLogsOKCallLogsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SyncUserCallLogsOKCallLogsItemAcceptedBy) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SyncUserCallLogsOKCallLogsItemAcceptedBy) encodeFields(e *jx.Encoder) {
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.Location.Set {
			e.FieldStart("location")
			s.Location.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.NumberType.Set {
			e.FieldStart("number_type")
			s.NumberType.Encode(e)
		}
	}
	{
		if s.PhoneNumber.Set {
			e.FieldStart("phone_number")
			s.PhoneNumber.Encode(e)
		}
	}
}

var jsonFieldsNameOfSyncUserCallLogsOKCallLogsItemAcceptedBy = [5]string{
	0: "extension_number",
	1: "location",
	2: "name",
	3: "number_type",
	4: "phone_number",
}

// Decode decodes SyncUserCallLogsOKCallLogsItemAcceptedBy from json.
func (s *SyncUserCallLogsOKCallLogsItemAcceptedBy) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SyncUserCallLogsOKCallLogsItemAcceptedBy to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "location":
			if err := func() error {
				s.Location.Reset()
				if err := s.Location.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"location\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "number_type":
			if err := func() error {
				s.NumberType.Reset()
				if err := s.NumberType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number_type\"")
			}
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SyncUserCallLogsOKCallLogsItemAcceptedBy")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SyncUserCallLogsOKCallLogsItemAcceptedBy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SyncUserCallLogsOKCallLogsItemAcceptedBy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SyncUserCallLogsOKCallLogsItemForwardedBy) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SyncUserCallLogsOKCallLogsItemForwardedBy) encodeFields(e *jx.Encoder) {
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ExtensionType.Set {
			e.FieldStart("extension_type")
			s.ExtensionType.Encode(e)
		}
	}
	{
		if s.Location.Set {
			e.FieldStart("location")
			s.Location.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.NumberType.Set {
			e.FieldStart("number_type")
			s.NumberType.Encode(e)
		}
	}
	{
		if s.PhoneNumber.Set {
			e.FieldStart("phone_number")
			s.PhoneNumber.Encode(e)
		}
	}
}

var jsonFieldsNameOfSyncUserCallLogsOKCallLogsItemForwardedBy = [6]string{
	0: "extension_number",
	1: "extension_type",
	2: "location",
	3: "name",
	4: "number_type",
	5: "phone_number",
}

// Decode decodes SyncUserCallLogsOKCallLogsItemForwardedBy from json.
func (s *SyncUserCallLogsOKCallLogsItemForwardedBy) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SyncUserCallLogsOKCallLogsItemForwardedBy to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "extension_type":
			if err := func() error {
				s.ExtensionType.Reset()
				if err := s.ExtensionType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_type\"")
			}
		case "location":
			if err := func() error {
				s.Location.Reset()
				if err := s.Location.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"location\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "number_type":
			if err := func() error {
				s.NumberType.Reset()
				if err := s.NumberType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number_type\"")
			}
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SyncUserCallLogsOKCallLogsItemForwardedBy")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SyncUserCallLogsOKCallLogsItemForwardedBy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SyncUserCallLogsOKCallLogsItemForwardedBy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SyncUserCallLogsOKCallLogsItemForwardedTo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SyncUserCallLogsOKCallLogsItemForwardedTo) encodeFields(e *jx.Encoder) {
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.Location.Set {
			e.FieldStart("location")
			s.Location.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.NumberType.Set {
			e.FieldStart("number_type")
			s.NumberType.Encode(e)
		}
	}
	{
		if s.PhoneNumber.Set {
			e.FieldStart("phone_number")
			s.PhoneNumber.Encode(e)
		}
	}
}

var jsonFieldsNameOfSyncUserCallLogsOKCallLogsItemForwardedTo = [5]string{
	0: "extension_number",
	1: "location",
	2: "name",
	3: "number_type",
	4: "phone_number",
}

// Decode decodes SyncUserCallLogsOKCallLogsItemForwardedTo from json.
func (s *SyncUserCallLogsOKCallLogsItemForwardedTo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SyncUserCallLogsOKCallLogsItemForwardedTo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "location":
			if err := func() error {
				s.Location.Reset()
				if err := s.Location.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"location\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "number_type":
			if err := func() error {
				s.NumberType.Reset()
				if err := s.NumberType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number_type\"")
			}
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SyncUserCallLogsOKCallLogsItemForwardedTo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SyncUserCallLogsOKCallLogsItemForwardedTo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SyncUserCallLogsOKCallLogsItemForwardedTo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SyncUserCallLogsOKCallLogsItemOutgoingBy) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SyncUserCallLogsOKCallLogsItemOutgoingBy) encodeFields(e *jx.Encoder) {
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.Location.Set {
			e.FieldStart("location")
			s.Location.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.NumberType.Set {
			e.FieldStart("number_type")
			s.NumberType.Encode(e)
		}
	}
	{
		if s.PhoneNumber.Set {
			e.FieldStart("phone_number")
			s.PhoneNumber.Encode(e)
		}
	}
}

var jsonFieldsNameOfSyncUserCallLogsOKCallLogsItemOutgoingBy = [5]string{
	0: "extension_number",
	1: "location",
	2: "name",
	3: "number_type",
	4: "phone_number",
}

// Decode decodes SyncUserCallLogsOKCallLogsItemOutgoingBy from json.
func (s *SyncUserCallLogsOKCallLogsItemOutgoingBy) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SyncUserCallLogsOKCallLogsItemOutgoingBy to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "location":
			if err := func() error {
				s.Location.Reset()
				if err := s.Location.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"location\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "number_type":
			if err := func() error {
				s.NumberType.Reset()
				if err := s.NumberType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number_type\"")
			}
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SyncUserCallLogsOKCallLogsItemOutgoingBy")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SyncUserCallLogsOKCallLogsItemOutgoingBy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SyncUserCallLogsOKCallLogsItemOutgoingBy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SyncUserCallLogsOKCallLogsItemSite) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SyncUserCallLogsOKCallLogsItemSite) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfSyncUserCallLogsOKCallLogsItemSite = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes SyncUserCallLogsOKCallLogsItemSite from json.
func (s *SyncUserCallLogsOKCallLogsItemSite) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SyncUserCallLogsOKCallLogsItemSite to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SyncUserCallLogsOKCallLogsItemSite")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SyncUserCallLogsOKCallLogsItemSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SyncUserCallLogsOKCallLogsItemSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateADeviceReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateADeviceReq) encodeFields(e *jx.Encoder) {
	{
		if s.AssignedTo.Set {
			e.FieldStart("assigned_to")
			s.AssignedTo.Encode(e)
		}
	}
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.MACAddress.Set {
			e.FieldStart("mac_address")
			s.MACAddress.Encode(e)
		}
	}
	{
		if s.ProvisionTemplateID.Set {
			e.FieldStart("provision_template_id")
			s.ProvisionTemplateID.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateADeviceReq = [4]string{
	0: "assigned_to",
	1: "display_name",
	2: "mac_address",
	3: "provision_template_id",
}

// Decode decodes UpdateADeviceReq from json.
func (s *UpdateADeviceReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateADeviceReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "assigned_to":
			if err := func() error {
				s.AssignedTo.Reset()
				if err := s.AssignedTo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"assigned_to\"")
			}
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "mac_address":
			if err := func() error {
				s.MACAddress.Reset()
				if err := s.MACAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mac_address\"")
			}
		case "provision_template_id":
			if err := func() error {
				s.ProvisionTemplateID.Reset()
				if err := s.ProvisionTemplateID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provision_template_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateADeviceReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateADeviceReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateADeviceReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateASharedLineGroupReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateASharedLineGroupReq) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.PrimaryNumber.Set {
			e.FieldStart("primary_number")
			s.PrimaryNumber.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.Timezone.Set {
			e.FieldStart("timezone")
			s.Timezone.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateASharedLineGroupReq = [5]string{
	0: "display_name",
	1: "extension_number",
	2: "primary_number",
	3: "status",
	4: "timezone",
}

// Decode decodes UpdateASharedLineGroupReq from json.
func (s *UpdateASharedLineGroupReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateASharedLineGroupReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "primary_number":
			if err := func() error {
				s.PrimaryNumber.Reset()
				if err := s.PrimaryNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"primary_number\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "timezone":
			if err := func() error {
				s.Timezone.Reset()
				if err := s.Timezone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"timezone\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateASharedLineGroupReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateASharedLineGroupReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateASharedLineGroupReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateAccountLevelInboundBlockRuleReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateAccountLevelInboundBlockRuleReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("match_type")
		e.Str(s.MatchType)
	}
	{
		e.FieldStart("blocked_number")
		e.Str(s.BlockedNumber)
	}
	{
		e.FieldStart("type")
		e.Str(s.Type)
	}
	{
		if s.Comment.Set {
			e.FieldStart("comment")
			s.Comment.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.Country.Set {
			e.FieldStart("country")
			s.Country.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateAccountLevelInboundBlockRuleReq = [6]string{
	0: "match_type",
	1: "blocked_number",
	2: "type",
	3: "comment",
	4: "status",
	5: "country",
}

// Decode decodes UpdateAccountLevelInboundBlockRuleReq from json.
func (s *UpdateAccountLevelInboundBlockRuleReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateAccountLevelInboundBlockRuleReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "match_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.MatchType = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"match_type\"")
			}
		case "blocked_number":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.BlockedNumber = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"blocked_number\"")
			}
		case "type":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.Type = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "comment":
			if err := func() error {
				s.Comment.Reset()
				if err := s.Comment.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"comment\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "country":
			if err := func() error {
				s.Country.Reset()
				if err := s.Country.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateAccountLevelInboundBlockRuleReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000111,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfUpdateAccountLevelInboundBlockRuleReq) {
					name = jsonFieldsNameOfUpdateAccountLevelInboundBlockRuleReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateAccountLevelInboundBlockRuleReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateAccountLevelInboundBlockRuleReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateAccountOutboundCallingCountriesOrRegionsReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateAccountOutboundCallingCountriesOrRegionsReq) encodeFields(e *jx.Encoder) {
	{
		if s.CountryRegions != nil {
			e.FieldStart("country_regions")
			e.ArrStart()
			for _, elem := range s.CountryRegions {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfUpdateAccountOutboundCallingCountriesOrRegionsReq = [1]string{
	0: "country_regions",
}

// Decode decodes UpdateAccountOutboundCallingCountriesOrRegionsReq from json.
func (s *UpdateAccountOutboundCallingCountriesOrRegionsReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateAccountOutboundCallingCountriesOrRegionsReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "country_regions":
			if err := func() error {
				s.CountryRegions = make([]UpdateAccountOutboundCallingCountriesOrRegionsReqCountryRegionsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem UpdateAccountOutboundCallingCountriesOrRegionsReqCountryRegionsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CountryRegions = append(s.CountryRegions, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country_regions\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateAccountOutboundCallingCountriesOrRegionsReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateAccountOutboundCallingCountriesOrRegionsReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateAccountOutboundCallingCountriesOrRegionsReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateAccountOutboundCallingCountriesOrRegionsReqCountryRegionsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateAccountOutboundCallingCountriesOrRegionsReqCountryRegionsItem) encodeFields(e *jx.Encoder) {
	{
		if s.IsoCode.Set {
			e.FieldStart("iso_code")
			s.IsoCode.Encode(e)
		}
	}
	{
		if s.Rule.Set {
			e.FieldStart("rule")
			s.Rule.Encode(e)
		}
	}
	{
		if s.DeleteExistingExceptionRules.Set {
			e.FieldStart("delete_existing_exception_rules")
			s.DeleteExistingExceptionRules.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateAccountOutboundCallingCountriesOrRegionsReqCountryRegionsItem = [3]string{
	0: "iso_code",
	1: "rule",
	2: "delete_existing_exception_rules",
}

// Decode decodes UpdateAccountOutboundCallingCountriesOrRegionsReqCountryRegionsItem from json.
func (s *UpdateAccountOutboundCallingCountriesOrRegionsReqCountryRegionsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateAccountOutboundCallingCountriesOrRegionsReqCountryRegionsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "iso_code":
			if err := func() error {
				s.IsoCode.Reset()
				if err := s.IsoCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_code\"")
			}
		case "rule":
			if err := func() error {
				s.Rule.Reset()
				if err := s.Rule.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rule\"")
			}
		case "delete_existing_exception_rules":
			if err := func() error {
				s.DeleteExistingExceptionRules.Reset()
				if err := s.DeleteExistingExceptionRules.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delete_existing_exception_rules\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateAccountOutboundCallingCountriesOrRegionsReqCountryRegionsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateAccountOutboundCallingCountriesOrRegionsReqCountryRegionsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateAccountOutboundCallingCountriesOrRegionsReqCountryRegionsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateAccountOutboundCallingExceptionRuleReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateAccountOutboundCallingExceptionRuleReq) encodeFields(e *jx.Encoder) {
	{
		if s.ExceptionRule.Set {
			e.FieldStart("exception_rule")
			s.ExceptionRule.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateAccountOutboundCallingExceptionRuleReq = [1]string{
	0: "exception_rule",
}

// Decode decodes UpdateAccountOutboundCallingExceptionRuleReq from json.
func (s *UpdateAccountOutboundCallingExceptionRuleReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateAccountOutboundCallingExceptionRuleReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "exception_rule":
			if err := func() error {
				s.ExceptionRule.Reset()
				if err := s.ExceptionRule.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exception_rule\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateAccountOutboundCallingExceptionRuleReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateAccountOutboundCallingExceptionRuleReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateAccountOutboundCallingExceptionRuleReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateAccountOutboundCallingExceptionRuleReqExceptionRule) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateAccountOutboundCallingExceptionRuleReqExceptionRule) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("match_type")
		e.Str(s.MatchType)
	}
	{
		e.FieldStart("prefix_number")
		e.Str(s.PrefixNumber)
	}
	{
		if s.Comment.Set {
			e.FieldStart("comment")
			s.Comment.Encode(e)
		}
	}
	{
		e.FieldStart("status")
		e.Str(s.Status)
	}
	{
		e.FieldStart("country")
		e.Str(s.Country)
	}
}

var jsonFieldsNameOfUpdateAccountOutboundCallingExceptionRuleReqExceptionRule = [5]string{
	0: "match_type",
	1: "prefix_number",
	2: "comment",
	3: "status",
	4: "country",
}

// Decode decodes UpdateAccountOutboundCallingExceptionRuleReqExceptionRule from json.
func (s *UpdateAccountOutboundCallingExceptionRuleReqExceptionRule) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateAccountOutboundCallingExceptionRuleReqExceptionRule to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "match_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.MatchType = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"match_type\"")
			}
		case "prefix_number":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.PrefixNumber = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"prefix_number\"")
			}
		case "comment":
			if err := func() error {
				s.Comment.Reset()
				if err := s.Comment.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"comment\"")
			}
		case "status":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				v, err := d.Str()
				s.Status = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "country":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				v, err := d.Str()
				s.Country = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateAccountOutboundCallingExceptionRuleReqExceptionRule")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00011011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfUpdateAccountOutboundCallingExceptionRuleReqExceptionRule) {
					name = jsonFieldsNameOfUpdateAccountOutboundCallingExceptionRuleReqExceptionRule[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateAccountOutboundCallingExceptionRuleReqExceptionRule) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateAccountOutboundCallingExceptionRuleReqExceptionRule) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateAnAlertSettingReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateAnAlertSettingReq) encodeFields(e *jx.Encoder) {
	{
		if s.AlertSettingName.Set {
			e.FieldStart("alert_setting_name")
			s.AlertSettingName.Encode(e)
		}
	}
	{
		if s.RuleConditions != nil {
			e.FieldStart("rule_conditions")
			e.ArrStart()
			for _, elem := range s.RuleConditions {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TargetIds != nil {
			e.FieldStart("target_ids")
			e.ArrStart()
			for _, elem := range s.TargetIds {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TimeFrameType.Set {
			e.FieldStart("time_frame_type")
			s.TimeFrameType.Encode(e)
		}
	}
	{
		if s.TimeFrameFrom.Set {
			e.FieldStart("time_frame_from")
			s.TimeFrameFrom.Encode(e)
		}
	}
	{
		if s.TimeFrameTo.Set {
			e.FieldStart("time_frame_to")
			s.TimeFrameTo.Encode(e)
		}
	}
	{
		if s.Frequency.Set {
			e.FieldStart("frequency")
			s.Frequency.Encode(e)
		}
	}
	{
		if s.EmailRecipients != nil {
			e.FieldStart("email_recipients")
			e.ArrStart()
			for _, elem := range s.EmailRecipients {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ChatChannels != nil {
			e.FieldStart("chat_channels")
			e.ArrStart()
			for _, elem := range s.ChatChannels {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateAnAlertSettingReq = [10]string{
	0: "alert_setting_name",
	1: "rule_conditions",
	2: "target_ids",
	3: "time_frame_type",
	4: "time_frame_from",
	5: "time_frame_to",
	6: "frequency",
	7: "email_recipients",
	8: "chat_channels",
	9: "status",
}

// Decode decodes UpdateAnAlertSettingReq from json.
func (s *UpdateAnAlertSettingReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateAnAlertSettingReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "alert_setting_name":
			if err := func() error {
				s.AlertSettingName.Reset()
				if err := s.AlertSettingName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"alert_setting_name\"")
			}
		case "rule_conditions":
			if err := func() error {
				s.RuleConditions = make([]UpdateAnAlertSettingReqRuleConditionsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem UpdateAnAlertSettingReqRuleConditionsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.RuleConditions = append(s.RuleConditions, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rule_conditions\"")
			}
		case "target_ids":
			if err := func() error {
				s.TargetIds = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.TargetIds = append(s.TargetIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"target_ids\"")
			}
		case "time_frame_type":
			if err := func() error {
				s.TimeFrameType.Reset()
				if err := s.TimeFrameType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"time_frame_type\"")
			}
		case "time_frame_from":
			if err := func() error {
				s.TimeFrameFrom.Reset()
				if err := s.TimeFrameFrom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"time_frame_from\"")
			}
		case "time_frame_to":
			if err := func() error {
				s.TimeFrameTo.Reset()
				if err := s.TimeFrameTo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"time_frame_to\"")
			}
		case "frequency":
			if err := func() error {
				s.Frequency.Reset()
				if err := s.Frequency.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"frequency\"")
			}
		case "email_recipients":
			if err := func() error {
				s.EmailRecipients = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.EmailRecipients = append(s.EmailRecipients, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email_recipients\"")
			}
		case "chat_channels":
			if err := func() error {
				s.ChatChannels = make([]UpdateAnAlertSettingReqChatChannelsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem UpdateAnAlertSettingReqChatChannelsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.ChatChannels = append(s.ChatChannels, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"chat_channels\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateAnAlertSettingReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateAnAlertSettingReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateAnAlertSettingReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateAnAlertSettingReqChatChannelsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateAnAlertSettingReqChatChannelsItem) encodeFields(e *jx.Encoder) {
	{
		if s.ChatChannelName.Set {
			e.FieldStart("chat_channel_name")
			s.ChatChannelName.Encode(e)
		}
	}
	{
		if s.Token.Set {
			e.FieldStart("token")
			s.Token.Encode(e)
		}
	}
	{
		if s.EndPoint.Set {
			e.FieldStart("end_point")
			s.EndPoint.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateAnAlertSettingReqChatChannelsItem = [3]string{
	0: "chat_channel_name",
	1: "token",
	2: "end_point",
}

// Decode decodes UpdateAnAlertSettingReqChatChannelsItem from json.
func (s *UpdateAnAlertSettingReqChatChannelsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateAnAlertSettingReqChatChannelsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "chat_channel_name":
			if err := func() error {
				s.ChatChannelName.Reset()
				if err := s.ChatChannelName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"chat_channel_name\"")
			}
		case "token":
			if err := func() error {
				s.Token.Reset()
				if err := s.Token.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"token\"")
			}
		case "end_point":
			if err := func() error {
				s.EndPoint.Reset()
				if err := s.EndPoint.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"end_point\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateAnAlertSettingReqChatChannelsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateAnAlertSettingReqChatChannelsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateAnAlertSettingReqChatChannelsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateAnAlertSettingReqRuleConditionsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateAnAlertSettingReqRuleConditionsItem) encodeFields(e *jx.Encoder) {
	{
		if s.RuleConditionType.Set {
			e.FieldStart("rule_condition_type")
			s.RuleConditionType.Encode(e)
		}
	}
	{
		if s.RuleConditionValue.Set {
			e.FieldStart("rule_condition_value")
			s.RuleConditionValue.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateAnAlertSettingReqRuleConditionsItem = [2]string{
	0: "rule_condition_type",
	1: "rule_condition_value",
}

// Decode decodes UpdateAnAlertSettingReqRuleConditionsItem from json.
func (s *UpdateAnAlertSettingReqRuleConditionsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateAnAlertSettingReqRuleConditionsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "rule_condition_type":
			if err := func() error {
				s.RuleConditionType.Reset()
				if err := s.RuleConditionType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rule_condition_type\"")
			}
		case "rule_condition_value":
			if err := func() error {
				s.RuleConditionValue.Reset()
				if err := s.RuleConditionValue.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rule_condition_value\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateAnAlertSettingReqRuleConditionsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateAnAlertSettingReqRuleConditionsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateAnAlertSettingReqRuleConditionsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateAudioItemReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateAudioItemReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("name")
		e.Str(s.Name)
	}
}

var jsonFieldsNameOfUpdateAudioItemReq = [1]string{
	0: "name",
}

// Decode decodes UpdateAudioItemReq from json.
func (s *UpdateAudioItemReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateAudioItemReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Name = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateAudioItemReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfUpdateAudioItemReq) {
					name = jsonFieldsNameOfUpdateAudioItemReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateAudioItemReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateAudioItemReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateAutoDeleteFieldReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateAutoDeleteFieldReq) encodeFields(e *jx.Encoder) {
	{
		if s.AutoDeleteEnable.Set {
			e.FieldStart("auto_delete_enable")
			s.AutoDeleteEnable.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateAutoDeleteFieldReq = [1]string{
	0: "auto_delete_enable",
}

// Decode decodes UpdateAutoDeleteFieldReq from json.
func (s *UpdateAutoDeleteFieldReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateAutoDeleteFieldReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "auto_delete_enable":
			if err := func() error {
				s.AutoDeleteEnable.Reset()
				if err := s.AutoDeleteEnable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_delete_enable\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateAutoDeleteFieldReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateAutoDeleteFieldReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateAutoDeleteFieldReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateAutoReceptionistIVRReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateAutoReceptionistIVRReq) encodeFields(e *jx.Encoder) {
	{
		if s.AudioPromptID.Set {
			e.FieldStart("audio_prompt_id")
			s.AudioPromptID.Encode(e)
		}
	}
	{
		if s.CallerEntersNoAction.Set {
			e.FieldStart("caller_enters_no_action")
			s.CallerEntersNoAction.Encode(e)
		}
	}
	{
		if s.HolidayID.Set {
			e.FieldStart("holiday_id")
			s.HolidayID.Encode(e)
		}
	}
	{
		if s.HoursType.Set {
			e.FieldStart("hours_type")
			s.HoursType.Encode(e)
		}
	}
	{
		if s.KeyAction.Set {
			e.FieldStart("key_action")
			s.KeyAction.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateAutoReceptionistIVRReq = [5]string{
	0: "audio_prompt_id",
	1: "caller_enters_no_action",
	2: "holiday_id",
	3: "hours_type",
	4: "key_action",
}

// Decode decodes UpdateAutoReceptionistIVRReq from json.
func (s *UpdateAutoReceptionistIVRReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateAutoReceptionistIVRReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_prompt_id":
			if err := func() error {
				s.AudioPromptID.Reset()
				if err := s.AudioPromptID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_prompt_id\"")
			}
		case "caller_enters_no_action":
			if err := func() error {
				s.CallerEntersNoAction.Reset()
				if err := s.CallerEntersNoAction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_enters_no_action\"")
			}
		case "holiday_id":
			if err := func() error {
				s.HolidayID.Reset()
				if err := s.HolidayID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holiday_id\"")
			}
		case "hours_type":
			if err := func() error {
				s.HoursType.Reset()
				if err := s.HoursType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hours_type\"")
			}
		case "key_action":
			if err := func() error {
				s.KeyAction.Reset()
				if err := s.KeyAction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"key_action\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateAutoReceptionistIVRReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateAutoReceptionistIVRReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateAutoReceptionistIVRReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateAutoReceptionistIVRReqCallerEntersNoAction) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateAutoReceptionistIVRReqCallerEntersNoAction) encodeFields(e *jx.Encoder) {
	{
		if s.Action.Set {
			e.FieldStart("action")
			s.Action.Encode(e)
		}
	}
	{
		if s.AudioPromptRepeat.Set {
			e.FieldStart("audio_prompt_repeat")
			s.AudioPromptRepeat.Encode(e)
		}
	}
	{
		if s.ForwardToExtensionID.Set {
			e.FieldStart("forward_to_extension_id")
			s.ForwardToExtensionID.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateAutoReceptionistIVRReqCallerEntersNoAction = [3]string{
	0: "action",
	1: "audio_prompt_repeat",
	2: "forward_to_extension_id",
}

// Decode decodes UpdateAutoReceptionistIVRReqCallerEntersNoAction from json.
func (s *UpdateAutoReceptionistIVRReqCallerEntersNoAction) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateAutoReceptionistIVRReqCallerEntersNoAction to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "action":
			if err := func() error {
				s.Action.Reset()
				if err := s.Action.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"action\"")
			}
		case "audio_prompt_repeat":
			if err := func() error {
				s.AudioPromptRepeat.Reset()
				if err := s.AudioPromptRepeat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_prompt_repeat\"")
			}
		case "forward_to_extension_id":
			if err := func() error {
				s.ForwardToExtensionID.Reset()
				if err := s.ForwardToExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward_to_extension_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateAutoReceptionistIVRReqCallerEntersNoAction")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateAutoReceptionistIVRReqCallerEntersNoAction) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateAutoReceptionistIVRReqCallerEntersNoAction) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateAutoReceptionistIVRReqKeyAction) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateAutoReceptionistIVRReqKeyAction) encodeFields(e *jx.Encoder) {
	{
		if s.Action.Set {
			e.FieldStart("action")
			s.Action.Encode(e)
		}
	}
	{
		if s.Key.Set {
			e.FieldStart("key")
			s.Key.Encode(e)
		}
	}
	{
		if s.Target.Set {
			e.FieldStart("target")
			s.Target.Encode(e)
		}
	}
	{
		if s.VoicemailGreetingID.Set {
			e.FieldStart("voicemail_greeting_id")
			s.VoicemailGreetingID.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateAutoReceptionistIVRReqKeyAction = [4]string{
	0: "action",
	1: "key",
	2: "target",
	3: "voicemail_greeting_id",
}

// Decode decodes UpdateAutoReceptionistIVRReqKeyAction from json.
func (s *UpdateAutoReceptionistIVRReqKeyAction) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateAutoReceptionistIVRReqKeyAction to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "action":
			if err := func() error {
				s.Action.Reset()
				if err := s.Action.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"action\"")
			}
		case "key":
			if err := func() error {
				s.Key.Reset()
				if err := s.Key.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"key\"")
			}
		case "target":
			if err := func() error {
				s.Target.Reset()
				if err := s.Target.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"target\"")
			}
		case "voicemail_greeting_id":
			if err := func() error {
				s.VoicemailGreetingID.Reset()
				if err := s.VoicemailGreetingID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voicemail_greeting_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateAutoReceptionistIVRReqKeyAction")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateAutoReceptionistIVRReqKeyAction) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateAutoReceptionistIVRReqKeyAction) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateAutoReceptionistIVRReqKeyActionTarget) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateAutoReceptionistIVRReqKeyActionTarget) encodeFields(e *jx.Encoder) {
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
	{
		if s.PhoneNumber.Set {
			e.FieldStart("phone_number")
			s.PhoneNumber.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateAutoReceptionistIVRReqKeyActionTarget = [2]string{
	0: "extension_id",
	1: "phone_number",
}

// Decode decodes UpdateAutoReceptionistIVRReqKeyActionTarget from json.
func (s *UpdateAutoReceptionistIVRReqKeyActionTarget) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateAutoReceptionistIVRReqKeyActionTarget to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateAutoReceptionistIVRReqKeyActionTarget")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateAutoReceptionistIVRReqKeyActionTarget) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateAutoReceptionistIVRReqKeyActionTarget) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateAutoReceptionistPolicyReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateAutoReceptionistPolicyReq) encodeFields(e *jx.Encoder) {
	{
		if s.VoicemailTranscription.Set {
			e.FieldStart("voicemail_transcription")
			s.VoicemailTranscription.Encode(e)
		}
	}
	{
		if s.VoicemailNotificationByEmail.Set {
			e.FieldStart("voicemail_notification_by_email")
			s.VoicemailNotificationByEmail.Encode(e)
		}
	}
	{
		if s.SMS.Set {
			e.FieldStart("sms")
			s.SMS.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateAutoReceptionistPolicyReq = [3]string{
	0: "voicemail_transcription",
	1: "voicemail_notification_by_email",
	2: "sms",
}

// Decode decodes UpdateAutoReceptionistPolicyReq from json.
func (s *UpdateAutoReceptionistPolicyReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateAutoReceptionistPolicyReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "voicemail_transcription":
			if err := func() error {
				s.VoicemailTranscription.Reset()
				if err := s.VoicemailTranscription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voicemail_transcription\"")
			}
		case "voicemail_notification_by_email":
			if err := func() error {
				s.VoicemailNotificationByEmail.Reset()
				if err := s.VoicemailNotificationByEmail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voicemail_notification_by_email\"")
			}
		case "sms":
			if err := func() error {
				s.SMS.Reset()
				if err := s.SMS.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sms\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateAutoReceptionistPolicyReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateAutoReceptionistPolicyReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateAutoReceptionistPolicyReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateAutoReceptionistPolicyReqSMS) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateAutoReceptionistPolicyReqSMS) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Reset.Set {
			e.FieldStart("reset")
			s.Reset.Encode(e)
		}
	}
	{
		if s.InternationalSMS.Set {
			e.FieldStart("international_sms")
			s.InternationalSMS.Encode(e)
		}
	}
	{
		if s.InternationalSMSCountries != nil {
			e.FieldStart("international_sms_countries")
			e.ArrStart()
			for _, elem := range s.InternationalSMSCountries {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfUpdateAutoReceptionistPolicyReqSMS = [4]string{
	0: "enable",
	1: "reset",
	2: "international_sms",
	3: "international_sms_countries",
}

// Decode decodes UpdateAutoReceptionistPolicyReqSMS from json.
func (s *UpdateAutoReceptionistPolicyReqSMS) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateAutoReceptionistPolicyReqSMS to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "reset":
			if err := func() error {
				s.Reset.Reset()
				if err := s.Reset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reset\"")
			}
		case "international_sms":
			if err := func() error {
				s.InternationalSMS.Reset()
				if err := s.InternationalSMS.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"international_sms\"")
			}
		case "international_sms_countries":
			if err := func() error {
				s.InternationalSMSCountries = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.InternationalSMSCountries = append(s.InternationalSMSCountries, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"international_sms_countries\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateAutoReceptionistPolicyReqSMS")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateAutoReceptionistPolicyReqSMS) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateAutoReceptionistPolicyReqSMS) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateAutoReceptionistPolicyReqVoicemailNotificationByEmail) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateAutoReceptionistPolicyReqVoicemailNotificationByEmail) encodeFields(e *jx.Encoder) {
	{
		if s.IncludeVoicemailFile.Set {
			e.FieldStart("include_voicemail_file")
			s.IncludeVoicemailFile.Encode(e)
		}
	}
	{
		if s.IncludeVoicemailTranscription.Set {
			e.FieldStart("include_voicemail_transcription")
			s.IncludeVoicemailTranscription.Encode(e)
		}
	}
	{
		if s.ForwardVoicemailToEmail.Set {
			e.FieldStart("forward_voicemail_to_email")
			s.ForwardVoicemailToEmail.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Reset.Set {
			e.FieldStart("reset")
			s.Reset.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateAutoReceptionistPolicyReqVoicemailNotificationByEmail = [5]string{
	0: "include_voicemail_file",
	1: "include_voicemail_transcription",
	2: "forward_voicemail_to_email",
	3: "enable",
	4: "reset",
}

// Decode decodes UpdateAutoReceptionistPolicyReqVoicemailNotificationByEmail from json.
func (s *UpdateAutoReceptionistPolicyReqVoicemailNotificationByEmail) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateAutoReceptionistPolicyReqVoicemailNotificationByEmail to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "include_voicemail_file":
			if err := func() error {
				s.IncludeVoicemailFile.Reset()
				if err := s.IncludeVoicemailFile.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"include_voicemail_file\"")
			}
		case "include_voicemail_transcription":
			if err := func() error {
				s.IncludeVoicemailTranscription.Reset()
				if err := s.IncludeVoicemailTranscription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"include_voicemail_transcription\"")
			}
		case "forward_voicemail_to_email":
			if err := func() error {
				s.ForwardVoicemailToEmail.Reset()
				if err := s.ForwardVoicemailToEmail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward_voicemail_to_email\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "reset":
			if err := func() error {
				s.Reset.Reset()
				if err := s.Reset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reset\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateAutoReceptionistPolicyReqVoicemailNotificationByEmail")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateAutoReceptionistPolicyReqVoicemailNotificationByEmail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateAutoReceptionistPolicyReqVoicemailNotificationByEmail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateAutoReceptionistPolicyReqVoicemailTranscription) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateAutoReceptionistPolicyReqVoicemailTranscription) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Reset.Set {
			e.FieldStart("reset")
			s.Reset.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateAutoReceptionistPolicyReqVoicemailTranscription = [2]string{
	0: "enable",
	1: "reset",
}

// Decode decodes UpdateAutoReceptionistPolicyReqVoicemailTranscription from json.
func (s *UpdateAutoReceptionistPolicyReqVoicemailTranscription) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateAutoReceptionistPolicyReqVoicemailTranscription to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "reset":
			if err := func() error {
				s.Reset.Reset()
				if err := s.Reset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reset\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateAutoReceptionistPolicyReqVoicemailTranscription")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateAutoReceptionistPolicyReqVoicemailTranscription) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateAutoReceptionistPolicyReqVoicemailTranscription) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateAutoReceptionistReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateAutoReceptionistReq) encodeFields(e *jx.Encoder) {
	{
		if s.CostCenter.Set {
			e.FieldStart("cost_center")
			s.CostCenter.Encode(e)
		}
	}
	{
		if s.Department.Set {
			e.FieldStart("department")
			s.Department.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.AudioPromptLanguage.Set {
			e.FieldStart("audio_prompt_language")
			s.AudioPromptLanguage.Encode(e)
		}
	}
	{
		if s.Timezone.Set {
			e.FieldStart("timezone")
			s.Timezone.Encode(e)
		}
	}
	{
		if s.RecordingStorageLocation.Set {
			e.FieldStart("recording_storage_location")
			s.RecordingStorageLocation.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateAutoReceptionistReq = [7]string{
	0: "cost_center",
	1: "department",
	2: "extension_number",
	3: "name",
	4: "audio_prompt_language",
	5: "timezone",
	6: "recording_storage_location",
}

// Decode decodes UpdateAutoReceptionistReq from json.
func (s *UpdateAutoReceptionistReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateAutoReceptionistReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "cost_center":
			if err := func() error {
				s.CostCenter.Reset()
				if err := s.CostCenter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cost_center\"")
			}
		case "department":
			if err := func() error {
				s.Department.Reset()
				if err := s.Department.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"department\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "audio_prompt_language":
			if err := func() error {
				s.AudioPromptLanguage.Reset()
				if err := s.AudioPromptLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_prompt_language\"")
			}
		case "timezone":
			if err := func() error {
				s.Timezone.Reset()
				if err := s.Timezone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"timezone\"")
			}
		case "recording_storage_location":
			if err := func() error {
				s.RecordingStorageLocation.Reset()
				if err := s.RecordingStorageLocation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_storage_location\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateAutoReceptionistReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateAutoReceptionistReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateAutoReceptionistReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateCQPolicySubSettingReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateCQPolicySubSettingReq) encodeFields(e *jx.Encoder) {
	{
		if s.VoicemailAccessMembers != nil {
			e.FieldStart("voicemail_access_members")
			e.ArrStart()
			for _, elem := range s.VoicemailAccessMembers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfUpdateCQPolicySubSettingReq = [1]string{
	0: "voicemail_access_members",
}

// Decode decodes UpdateCQPolicySubSettingReq from json.
func (s *UpdateCQPolicySubSettingReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateCQPolicySubSettingReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "voicemail_access_members":
			if err := func() error {
				s.VoicemailAccessMembers = make([]UpdateCQPolicySubSettingReqVoicemailAccessMembersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem UpdateCQPolicySubSettingReqVoicemailAccessMembersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.VoicemailAccessMembers = append(s.VoicemailAccessMembers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voicemail_access_members\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateCQPolicySubSettingReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateCQPolicySubSettingReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateCQPolicySubSettingReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateCQPolicySubSettingReqVoicemailAccessMembersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateCQPolicySubSettingReqVoicemailAccessMembersItem) encodeFields(e *jx.Encoder) {
	{
		if s.AccessUserID.Set {
			e.FieldStart("access_user_id")
			s.AccessUserID.Encode(e)
		}
	}
	{
		if s.AllowDownload.Set {
			e.FieldStart("allow_download")
			s.AllowDownload.Encode(e)
		}
	}
	{
		if s.AllowDelete.Set {
			e.FieldStart("allow_delete")
			s.AllowDelete.Encode(e)
		}
	}
	{
		if s.AllowSharing.Set {
			e.FieldStart("allow_sharing")
			s.AllowSharing.Encode(e)
		}
	}
	{
		if s.SharedID.Set {
			e.FieldStart("shared_id")
			s.SharedID.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateCQPolicySubSettingReqVoicemailAccessMembersItem = [5]string{
	0: "access_user_id",
	1: "allow_download",
	2: "allow_delete",
	3: "allow_sharing",
	4: "shared_id",
}

// Decode decodes UpdateCQPolicySubSettingReqVoicemailAccessMembersItem from json.
func (s *UpdateCQPolicySubSettingReqVoicemailAccessMembersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateCQPolicySubSettingReqVoicemailAccessMembersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "access_user_id":
			if err := func() error {
				s.AccessUserID.Reset()
				if err := s.AccessUserID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_user_id\"")
			}
		case "allow_download":
			if err := func() error {
				s.AllowDownload.Reset()
				if err := s.AllowDownload.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_download\"")
			}
		case "allow_delete":
			if err := func() error {
				s.AllowDelete.Reset()
				if err := s.AllowDelete.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_delete\"")
			}
		case "allow_sharing":
			if err := func() error {
				s.AllowSharing.Reset()
				if err := s.AllowSharing.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_sharing\"")
			}
		case "shared_id":
			if err := func() error {
				s.SharedID.Reset()
				if err := s.SharedID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shared_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateCQPolicySubSettingReqVoicemailAccessMembersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateCQPolicySubSettingReqVoicemailAccessMembersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateCQPolicySubSettingReqVoicemailAccessMembersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateCallHandlingReq as json.
func (s UpdateCallHandlingReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

func (s UpdateCallHandlingReq) encodeFields(e *jx.Encoder) {
	switch s.Type {
	case PatchCallHandlingSettingsCallForwardingUpdateCallHandlingReq:
		e.FieldStart("sub_setting_type")
		e.Str("call_forwarding")
		{
			s := s.PatchCallHandlingSettingsCallForwarding
			{
				if s.Settings.Set {
					e.FieldStart("settings")
					s.Settings.Encode(e)
				}
			}
		}
	case PatchCallHandlingSettingsCallHandlingUpdateCallHandlingReq:
		e.FieldStart("sub_setting_type")
		e.Str("call_handling")
		{
			s := s.PatchCallHandlingSettingsCallHandling
			{
				if s.Settings.Set {
					e.FieldStart("settings")
					s.Settings.Encode(e)
				}
			}
		}
	case PatchCallHandlingSettingsCustomHoursUpdateCallHandlingReq:
		e.FieldStart("sub_setting_type")
		e.Str("custom_hours")
		{
			s := s.PatchCallHandlingSettingsCustomHours
			{
				if s.Settings.Set {
					e.FieldStart("settings")
					s.Settings.Encode(e)
				}
			}
		}
	case PatchCallHandlingSettingsHolidayUpdateCallHandlingReq:
		e.FieldStart("sub_setting_type")
		e.Str("holiday")
		{
			s := s.PatchCallHandlingSettingsHoliday
			{
				if s.Settings.Set {
					e.FieldStart("settings")
					s.Settings.Encode(e)
				}
			}
		}
	}
}

// Decode decodes UpdateCallHandlingReq from json.
func (s *UpdateCallHandlingReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateCallHandlingReq to nil")
	}
	// Sum type discriminator.
	if typ := d.Next(); typ != jx.Object {
		return errors.Errorf("unexpected json type %q", typ)
	}

	var found bool
	if err := d.Capture(func(d *jx.Decoder) error {
		return d.ObjBytes(func(d *jx.Decoder, key []byte) error {
			if found {
				return d.Skip()
			}
			switch string(key) {
			case "sub_setting_type":
				typ, err := d.Str()
				if err != nil {
					return err
				}
				switch typ {
				case "call_forwarding":
					s.Type = PatchCallHandlingSettingsCallForwardingUpdateCallHandlingReq
					found = true
				case "call_handling":
					s.Type = PatchCallHandlingSettingsCallHandlingUpdateCallHandlingReq
					found = true
				case "custom_hours":
					s.Type = PatchCallHandlingSettingsCustomHoursUpdateCallHandlingReq
					found = true
				case "holiday":
					s.Type = PatchCallHandlingSettingsHolidayUpdateCallHandlingReq
					found = true
				default:
					return errors.Errorf("unknown type %s", typ)
				}
				return nil
			}
			return d.Skip()
		})
	}); err != nil {
		return errors.Wrap(err, "capture")
	}
	if !found {
		return errors.New("unable to detect sum type variant")
	}
	switch s.Type {
	case PatchCallHandlingSettingsCallForwardingUpdateCallHandlingReq:
		if err := s.PatchCallHandlingSettingsCallForwarding.Decode(d); err != nil {
			return err
		}
	case PatchCallHandlingSettingsHolidayUpdateCallHandlingReq:
		if err := s.PatchCallHandlingSettingsHoliday.Decode(d); err != nil {
			return err
		}
	case PatchCallHandlingSettingsCustomHoursUpdateCallHandlingReq:
		if err := s.PatchCallHandlingSettingsCustomHours.Decode(d); err != nil {
			return err
		}
	case PatchCallHandlingSettingsCallHandlingUpdateCallHandlingReq:
		if err := s.PatchCallHandlingSettingsCallHandling.Decode(d); err != nil {
			return err
		}
	default:
		return errors.Errorf("inferred invalid type: %s", s.Type)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s UpdateCallHandlingReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateCallHandlingReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateCallQueueReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateCallQueueReq) encodeFields(e *jx.Encoder) {
	{
		if s.CostCenter.Set {
			e.FieldStart("cost_center")
			s.CostCenter.Encode(e)
		}
	}
	{
		if s.Department.Set {
			e.FieldStart("department")
			s.Department.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.SiteID.Set {
			e.FieldStart("site_id")
			s.SiteID.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.Timezone.Set {
			e.FieldStart("timezone")
			s.Timezone.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateCallQueueReq = [8]string{
	0: "cost_center",
	1: "department",
	2: "description",
	3: "extension_number",
	4: "name",
	5: "site_id",
	6: "status",
	7: "timezone",
}

// Decode decodes UpdateCallQueueReq from json.
func (s *UpdateCallQueueReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateCallQueueReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "cost_center":
			if err := func() error {
				s.CostCenter.Reset()
				if err := s.CostCenter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cost_center\"")
			}
		case "department":
			if err := func() error {
				s.Department.Reset()
				if err := s.Department.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"department\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "site_id":
			if err := func() error {
				s.SiteID.Reset()
				if err := s.SiteID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_id\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "timezone":
			if err := func() error {
				s.Timezone.Reset()
				if err := s.Timezone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"timezone\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateCallQueueReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateCallQueueReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateCallQueueReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateCallingPlanReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateCallingPlanReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("source_type")
		e.Int(s.SourceType)
	}
	{
		e.FieldStart("target_type")
		e.Int(s.TargetType)
	}
}

var jsonFieldsNameOfUpdateCallingPlanReq = [2]string{
	0: "source_type",
	1: "target_type",
}

// Decode decodes UpdateCallingPlanReq from json.
func (s *UpdateCallingPlanReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateCallingPlanReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "source_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Int()
				s.SourceType = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"source_type\"")
			}
		case "target_type":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Int()
				s.TargetType = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"target_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateCallingPlanReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfUpdateCallingPlanReq) {
					name = jsonFieldsNameOfUpdateCallingPlanReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateCallingPlanReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateCallingPlanReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateCommonAreaOutboundCallingCountriesOrRegionsReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateCommonAreaOutboundCallingCountriesOrRegionsReq) encodeFields(e *jx.Encoder) {
	{
		if s.CountryRegions != nil {
			e.FieldStart("country_regions")
			e.ArrStart()
			for _, elem := range s.CountryRegions {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfUpdateCommonAreaOutboundCallingCountriesOrRegionsReq = [1]string{
	0: "country_regions",
}

// Decode decodes UpdateCommonAreaOutboundCallingCountriesOrRegionsReq from json.
func (s *UpdateCommonAreaOutboundCallingCountriesOrRegionsReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateCommonAreaOutboundCallingCountriesOrRegionsReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "country_regions":
			if err := func() error {
				s.CountryRegions = make([]UpdateCommonAreaOutboundCallingCountriesOrRegionsReqCountryRegionsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem UpdateCommonAreaOutboundCallingCountriesOrRegionsReqCountryRegionsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CountryRegions = append(s.CountryRegions, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country_regions\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateCommonAreaOutboundCallingCountriesOrRegionsReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateCommonAreaOutboundCallingCountriesOrRegionsReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateCommonAreaOutboundCallingCountriesOrRegionsReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateCommonAreaOutboundCallingCountriesOrRegionsReqCountryRegionsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateCommonAreaOutboundCallingCountriesOrRegionsReqCountryRegionsItem) encodeFields(e *jx.Encoder) {
	{
		if s.IsoCode.Set {
			e.FieldStart("iso_code")
			s.IsoCode.Encode(e)
		}
	}
	{
		if s.Rule.Set {
			e.FieldStart("rule")
			s.Rule.Encode(e)
		}
	}
	{
		if s.DeleteExistingExceptionRules.Set {
			e.FieldStart("delete_existing_exception_rules")
			s.DeleteExistingExceptionRules.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateCommonAreaOutboundCallingCountriesOrRegionsReqCountryRegionsItem = [3]string{
	0: "iso_code",
	1: "rule",
	2: "delete_existing_exception_rules",
}

// Decode decodes UpdateCommonAreaOutboundCallingCountriesOrRegionsReqCountryRegionsItem from json.
func (s *UpdateCommonAreaOutboundCallingCountriesOrRegionsReqCountryRegionsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateCommonAreaOutboundCallingCountriesOrRegionsReqCountryRegionsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "iso_code":
			if err := func() error {
				s.IsoCode.Reset()
				if err := s.IsoCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_code\"")
			}
		case "rule":
			if err := func() error {
				s.Rule.Reset()
				if err := s.Rule.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rule\"")
			}
		case "delete_existing_exception_rules":
			if err := func() error {
				s.DeleteExistingExceptionRules.Reset()
				if err := s.DeleteExistingExceptionRules.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delete_existing_exception_rules\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateCommonAreaOutboundCallingCountriesOrRegionsReqCountryRegionsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateCommonAreaOutboundCallingCountriesOrRegionsReqCountryRegionsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateCommonAreaOutboundCallingCountriesOrRegionsReqCountryRegionsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateCommonAreaOutboundCallingExceptionRuleReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateCommonAreaOutboundCallingExceptionRuleReq) encodeFields(e *jx.Encoder) {
	{
		if s.ExceptionRule.Set {
			e.FieldStart("exception_rule")
			s.ExceptionRule.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateCommonAreaOutboundCallingExceptionRuleReq = [1]string{
	0: "exception_rule",
}

// Decode decodes UpdateCommonAreaOutboundCallingExceptionRuleReq from json.
func (s *UpdateCommonAreaOutboundCallingExceptionRuleReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateCommonAreaOutboundCallingExceptionRuleReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "exception_rule":
			if err := func() error {
				s.ExceptionRule.Reset()
				if err := s.ExceptionRule.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exception_rule\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateCommonAreaOutboundCallingExceptionRuleReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateCommonAreaOutboundCallingExceptionRuleReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateCommonAreaOutboundCallingExceptionRuleReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateCommonAreaOutboundCallingExceptionRuleReqExceptionRule) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateCommonAreaOutboundCallingExceptionRuleReqExceptionRule) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("match_type")
		e.Str(s.MatchType)
	}
	{
		e.FieldStart("prefix_number")
		e.Str(s.PrefixNumber)
	}
	{
		if s.Comment.Set {
			e.FieldStart("comment")
			s.Comment.Encode(e)
		}
	}
	{
		e.FieldStart("status")
		e.Str(s.Status)
	}
	{
		e.FieldStart("country")
		e.Str(s.Country)
	}
}

var jsonFieldsNameOfUpdateCommonAreaOutboundCallingExceptionRuleReqExceptionRule = [5]string{
	0: "match_type",
	1: "prefix_number",
	2: "comment",
	3: "status",
	4: "country",
}

// Decode decodes UpdateCommonAreaOutboundCallingExceptionRuleReqExceptionRule from json.
func (s *UpdateCommonAreaOutboundCallingExceptionRuleReqExceptionRule) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateCommonAreaOutboundCallingExceptionRuleReqExceptionRule to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "match_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.MatchType = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"match_type\"")
			}
		case "prefix_number":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.PrefixNumber = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"prefix_number\"")
			}
		case "comment":
			if err := func() error {
				s.Comment.Reset()
				if err := s.Comment.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"comment\"")
			}
		case "status":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				v, err := d.Str()
				s.Status = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "country":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				v, err := d.Str()
				s.Country = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateCommonAreaOutboundCallingExceptionRuleReqExceptionRule")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00011011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfUpdateCommonAreaOutboundCallingExceptionRuleReqExceptionRule) {
					name = jsonFieldsNameOfUpdateCommonAreaOutboundCallingExceptionRuleReqExceptionRule[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateCommonAreaOutboundCallingExceptionRuleReqExceptionRule) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateCommonAreaOutboundCallingExceptionRuleReqExceptionRule) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateCommonAreaReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateCommonAreaReq) encodeFields(e *jx.Encoder) {
	{
		if s.AreaCode.Set {
			e.FieldStart("area_code")
			s.AreaCode.Encode(e)
		}
	}
	{
		if s.CostCenter.Set {
			e.FieldStart("cost_center")
			s.CostCenter.Encode(e)
		}
	}
	{
		if s.CountryIsoCode.Set {
			e.FieldStart("country_iso_code")
			s.CountryIsoCode.Encode(e)
		}
	}
	{
		if s.Department.Set {
			e.FieldStart("department")
			s.Department.Encode(e)
		}
	}
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.EmergencyAddressID.Set {
			e.FieldStart("emergency_address_id")
			s.EmergencyAddressID.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.OutboundCallerID.Set {
			e.FieldStart("outbound_caller_id")
			s.OutboundCallerID.Encode(e)
		}
	}
	{
		if s.Policy.Set {
			e.FieldStart("policy")
			s.Policy.Encode(e)
		}
	}
	{
		if s.SiteID.Set {
			e.FieldStart("site_id")
			s.SiteID.Encode(e)
		}
	}
	{
		if s.Timezone.Set {
			e.FieldStart("timezone")
			s.Timezone.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateCommonAreaReq = [11]string{
	0:  "area_code",
	1:  "cost_center",
	2:  "country_iso_code",
	3:  "department",
	4:  "display_name",
	5:  "emergency_address_id",
	6:  "extension_number",
	7:  "outbound_caller_id",
	8:  "policy",
	9:  "site_id",
	10: "timezone",
}

// Decode decodes UpdateCommonAreaReq from json.
func (s *UpdateCommonAreaReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateCommonAreaReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "area_code":
			if err := func() error {
				s.AreaCode.Reset()
				if err := s.AreaCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"area_code\"")
			}
		case "cost_center":
			if err := func() error {
				s.CostCenter.Reset()
				if err := s.CostCenter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cost_center\"")
			}
		case "country_iso_code":
			if err := func() error {
				s.CountryIsoCode.Reset()
				if err := s.CountryIsoCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country_iso_code\"")
			}
		case "department":
			if err := func() error {
				s.Department.Reset()
				if err := s.Department.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"department\"")
			}
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "emergency_address_id":
			if err := func() error {
				s.EmergencyAddressID.Reset()
				if err := s.EmergencyAddressID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"emergency_address_id\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "outbound_caller_id":
			if err := func() error {
				s.OutboundCallerID.Reset()
				if err := s.OutboundCallerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"outbound_caller_id\"")
			}
		case "policy":
			if err := func() error {
				s.Policy.Reset()
				if err := s.Policy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"policy\"")
			}
		case "site_id":
			if err := func() error {
				s.SiteID.Reset()
				if err := s.SiteID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_id\"")
			}
		case "timezone":
			if err := func() error {
				s.Timezone.Reset()
				if err := s.Timezone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"timezone\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateCommonAreaReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateCommonAreaReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateCommonAreaReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateCommonAreaReqPolicy) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateCommonAreaReqPolicy) encodeFields(e *jx.Encoder) {
	{
		if s.InternationalCalling.Set {
			e.FieldStart("international_calling")
			s.InternationalCalling.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateCommonAreaReqPolicy = [1]string{
	0: "international_calling",
}

// Decode decodes UpdateCommonAreaReqPolicy from json.
func (s *UpdateCommonAreaReqPolicy) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateCommonAreaReqPolicy to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "international_calling":
			if err := func() error {
				s.InternationalCalling.Reset()
				if err := s.InternationalCalling.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"international_calling\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateCommonAreaReqPolicy")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateCommonAreaReqPolicy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateCommonAreaReqPolicy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateCommonAreaReqPolicyInternationalCalling) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateCommonAreaReqPolicyInternationalCalling) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Reset.Set {
			e.FieldStart("reset")
			s.Reset.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateCommonAreaReqPolicyInternationalCalling = [2]string{
	0: "enable",
	1: "reset",
}

// Decode decodes UpdateCommonAreaReqPolicyInternationalCalling from json.
func (s *UpdateCommonAreaReqPolicyInternationalCalling) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateCommonAreaReqPolicyInternationalCalling to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "reset":
			if err := func() error {
				s.Reset.Reset()
				if err := s.Reset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reset\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateCommonAreaReqPolicyInternationalCalling")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateCommonAreaReqPolicyInternationalCalling) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateCommonAreaReqPolicyInternationalCalling) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateCommonAreaSettingReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateCommonAreaSettingReq) encodeFields(e *jx.Encoder) {
	{
		if s.DeskPhones != nil {
			e.FieldStart("desk_phones")
			e.ArrStart()
			for _, elem := range s.DeskPhones {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfUpdateCommonAreaSettingReq = [1]string{
	0: "desk_phones",
}

// Decode decodes UpdateCommonAreaSettingReq from json.
func (s *UpdateCommonAreaSettingReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateCommonAreaSettingReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "desk_phones":
			if err := func() error {
				s.DeskPhones = make([]UpdateCommonAreaSettingReqDeskPhonesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem UpdateCommonAreaSettingReqDeskPhonesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.DeskPhones = append(s.DeskPhones, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"desk_phones\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateCommonAreaSettingReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateCommonAreaSettingReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateCommonAreaSettingReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateCommonAreaSettingReqDeskPhonesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateCommonAreaSettingReqDeskPhonesItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.HotDesking.Set {
			e.FieldStart("hot_desking")
			s.HotDesking.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateCommonAreaSettingReqDeskPhonesItem = [2]string{
	0: "id",
	1: "hot_desking",
}

// Decode decodes UpdateCommonAreaSettingReqDeskPhonesItem from json.
func (s *UpdateCommonAreaSettingReqDeskPhonesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateCommonAreaSettingReqDeskPhonesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "hot_desking":
			if err := func() error {
				s.HotDesking.Reset()
				if err := s.HotDesking.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hot_desking\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateCommonAreaSettingReqDeskPhonesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateCommonAreaSettingReqDeskPhonesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateCommonAreaSettingReqDeskPhonesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateCommonAreaSettingReqDeskPhonesItemHotDesking) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateCommonAreaSettingReqDeskPhonesItemHotDesking) encodeFields(e *jx.Encoder) {
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateCommonAreaSettingReqDeskPhonesItemHotDesking = [1]string{
	0: "status",
}

// Decode decodes UpdateCommonAreaSettingReqDeskPhonesItemHotDesking from json.
func (s *UpdateCommonAreaSettingReqDeskPhonesItemHotDesking) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateCommonAreaSettingReqDeskPhonesItemHotDesking to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateCommonAreaSettingReqDeskPhonesItemHotDesking")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateCommonAreaSettingReqDeskPhonesItemHotDesking) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateCommonAreaSettingReqDeskPhonesItemHotDesking) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateEmergencyAddressOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateEmergencyAddressOK) encodeFields(e *jx.Encoder) {
	{
		if s.AddressLine1.Set {
			e.FieldStart("address_line1")
			s.AddressLine1.Encode(e)
		}
	}
	{
		if s.AddressLine2.Set {
			e.FieldStart("address_line2")
			s.AddressLine2.Encode(e)
		}
	}
	{
		if s.City.Set {
			e.FieldStart("city")
			s.City.Encode(e)
		}
	}
	{
		if s.Country.Set {
			e.FieldStart("country")
			s.Country.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.IsDefault.Set {
			e.FieldStart("is_default")
			s.IsDefault.Encode(e)
		}
	}
	{
		if s.Level.Set {
			e.FieldStart("level")
			s.Level.Encode(e)
		}
	}
	{
		if s.Owner.Set {
			e.FieldStart("owner")
			s.Owner.Encode(e)
		}
	}
	{
		if s.Site.Set {
			e.FieldStart("site")
			s.Site.Encode(e)
		}
	}
	{
		if s.StateCode.Set {
			e.FieldStart("state_code")
			s.StateCode.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.Zip.Set {
			e.FieldStart("zip")
			s.Zip.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateEmergencyAddressOK = [12]string{
	0:  "address_line1",
	1:  "address_line2",
	2:  "city",
	3:  "country",
	4:  "id",
	5:  "is_default",
	6:  "level",
	7:  "owner",
	8:  "site",
	9:  "state_code",
	10: "status",
	11: "zip",
}

// Decode decodes UpdateEmergencyAddressOK from json.
func (s *UpdateEmergencyAddressOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateEmergencyAddressOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "address_line1":
			if err := func() error {
				s.AddressLine1.Reset()
				if err := s.AddressLine1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"address_line1\"")
			}
		case "address_line2":
			if err := func() error {
				s.AddressLine2.Reset()
				if err := s.AddressLine2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"address_line2\"")
			}
		case "city":
			if err := func() error {
				s.City.Reset()
				if err := s.City.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"city\"")
			}
		case "country":
			if err := func() error {
				s.Country.Reset()
				if err := s.Country.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "is_default":
			if err := func() error {
				s.IsDefault.Reset()
				if err := s.IsDefault.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"is_default\"")
			}
		case "level":
			if err := func() error {
				s.Level.Reset()
				if err := s.Level.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"level\"")
			}
		case "owner":
			if err := func() error {
				s.Owner.Reset()
				if err := s.Owner.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"owner\"")
			}
		case "site":
			if err := func() error {
				s.Site.Reset()
				if err := s.Site.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site\"")
			}
		case "state_code":
			if err := func() error {
				s.StateCode.Reset()
				if err := s.StateCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"state_code\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "zip":
			if err := func() error {
				s.Zip.Reset()
				if err := s.Zip.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zip\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateEmergencyAddressOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateEmergencyAddressOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateEmergencyAddressOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateEmergencyAddressOKOwner) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateEmergencyAddressOKOwner) encodeFields(e *jx.Encoder) {
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateEmergencyAddressOKOwner = [3]string{
	0: "extension_number",
	1: "id",
	2: "name",
}

// Decode decodes UpdateEmergencyAddressOKOwner from json.
func (s *UpdateEmergencyAddressOKOwner) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateEmergencyAddressOKOwner to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateEmergencyAddressOKOwner")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateEmergencyAddressOKOwner) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateEmergencyAddressOKOwner) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateEmergencyAddressOKSite) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateEmergencyAddressOKSite) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateEmergencyAddressOKSite = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes UpdateEmergencyAddressOKSite from json.
func (s *UpdateEmergencyAddressOKSite) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateEmergencyAddressOKSite to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateEmergencyAddressOKSite")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateEmergencyAddressOKSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateEmergencyAddressOKSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateEmergencyAddressReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateEmergencyAddressReq) encodeFields(e *jx.Encoder) {
	{
		if s.AddressLine1.Set {
			e.FieldStart("address_line1")
			s.AddressLine1.Encode(e)
		}
	}
	{
		if s.AddressLine2.Set {
			e.FieldStart("address_line2")
			s.AddressLine2.Encode(e)
		}
	}
	{
		if s.City.Set {
			e.FieldStart("city")
			s.City.Encode(e)
		}
	}
	{
		if s.Country.Set {
			e.FieldStart("country")
			s.Country.Encode(e)
		}
	}
	{
		if s.IsDefault.Set {
			e.FieldStart("is_default")
			s.IsDefault.Encode(e)
		}
	}
	{
		if s.StateCode.Set {
			e.FieldStart("state_code")
			s.StateCode.Encode(e)
		}
	}
	{
		if s.Zip.Set {
			e.FieldStart("zip")
			s.Zip.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateEmergencyAddressReq = [7]string{
	0: "address_line1",
	1: "address_line2",
	2: "city",
	3: "country",
	4: "is_default",
	5: "state_code",
	6: "zip",
}

// Decode decodes UpdateEmergencyAddressReq from json.
func (s *UpdateEmergencyAddressReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateEmergencyAddressReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "address_line1":
			if err := func() error {
				s.AddressLine1.Reset()
				if err := s.AddressLine1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"address_line1\"")
			}
		case "address_line2":
			if err := func() error {
				s.AddressLine2.Reset()
				if err := s.AddressLine2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"address_line2\"")
			}
		case "city":
			if err := func() error {
				s.City.Reset()
				if err := s.City.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"city\"")
			}
		case "country":
			if err := func() error {
				s.Country.Reset()
				if err := s.Country.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country\"")
			}
		case "is_default":
			if err := func() error {
				s.IsDefault.Reset()
				if err := s.IsDefault.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"is_default\"")
			}
		case "state_code":
			if err := func() error {
				s.StateCode.Reset()
				if err := s.StateCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"state_code\"")
			}
		case "zip":
			if err := func() error {
				s.Zip.Reset()
				if err := s.Zip.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zip\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateEmergencyAddressReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateEmergencyAddressReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateEmergencyAddressReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateExternalContactReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateExternalContactReq) encodeFields(e *jx.Encoder) {
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.Email.Set {
			e.FieldStart("email")
			s.Email.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.PhoneNumbers != nil {
			e.FieldStart("phone_numbers")
			e.ArrStart()
			for _, elem := range s.PhoneNumbers {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.RoutingPath.Set {
			e.FieldStart("routing_path")
			s.RoutingPath.Encode(e)
		}
	}
	{
		if s.AutoCallRecorded.Set {
			e.FieldStart("auto_call_recorded")
			s.AutoCallRecorded.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateExternalContactReq = [8]string{
	0: "description",
	1: "email",
	2: "extension_number",
	3: "id",
	4: "name",
	5: "phone_numbers",
	6: "routing_path",
	7: "auto_call_recorded",
}

// Decode decodes UpdateExternalContactReq from json.
func (s *UpdateExternalContactReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateExternalContactReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "email":
			if err := func() error {
				s.Email.Reset()
				if err := s.Email.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "phone_numbers":
			if err := func() error {
				s.PhoneNumbers = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.PhoneNumbers = append(s.PhoneNumbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_numbers\"")
			}
		case "routing_path":
			if err := func() error {
				s.RoutingPath.Reset()
				if err := s.RoutingPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"routing_path\"")
			}
		case "auto_call_recorded":
			if err := func() error {
				s.AutoCallRecorded.Reset()
				if err := s.AutoCallRecorded.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_call_recorded\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateExternalContactReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateExternalContactReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateExternalContactReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateFirmwareRuleReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateFirmwareRuleReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("version")
		e.Str(s.Version)
	}
	{
		e.FieldStart("device_type")
		e.Str(s.DeviceType)
	}
	{
		e.FieldStart("device_model")
		e.Str(s.DeviceModel)
	}
	{
		if s.RestartType.Set {
			e.FieldStart("restart_type")
			s.RestartType.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateFirmwareRuleReq = [4]string{
	0: "version",
	1: "device_type",
	2: "device_model",
	3: "restart_type",
}

// Decode decodes UpdateFirmwareRuleReq from json.
func (s *UpdateFirmwareRuleReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateFirmwareRuleReq to nil")
	}
	var requiredBitSet [1]uint8
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "version":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Version = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"version\"")
			}
		case "device_type":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.DeviceType = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_type\"")
			}
		case "device_model":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.DeviceModel = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_model\"")
			}
		case "restart_type":
			if err := func() error {
				s.RestartType.Reset()
				if err := s.RestartType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"restart_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateFirmwareRuleReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000111,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfUpdateFirmwareRuleReq) {
					name = jsonFieldsNameOfUpdateFirmwareRuleReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateFirmwareRuleReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateFirmwareRuleReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGCPReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGCPReq) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.Delay.Set {
			e.FieldStart("delay")
			s.Delay.Encode(e)
		}
	}
	{
		if s.CostCenter.Set {
			e.FieldStart("cost_center")
			s.CostCenter.Encode(e)
		}
	}
	{
		if s.Department.Set {
			e.FieldStart("department")
			s.Department.Encode(e)
		}
	}
	{
		if s.PlayIncomingCallsSound.Set {
			e.FieldStart("play_incoming_calls_sound")
			s.PlayIncomingCallsSound.Encode(e)
		}
	}
	{
		if s.DirectedCallPickup.Set {
			e.FieldStart("directed_call_pickup")
			s.DirectedCallPickup.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateGCPReq = [8]string{
	0: "display_name",
	1: "extension_number",
	2: "description",
	3: "delay",
	4: "cost_center",
	5: "department",
	6: "play_incoming_calls_sound",
	7: "directed_call_pickup",
}

// Decode decodes UpdateGCPReq from json.
func (s *UpdateGCPReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGCPReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "delay":
			if err := func() error {
				s.Delay.Reset()
				if err := s.Delay.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delay\"")
			}
		case "cost_center":
			if err := func() error {
				s.CostCenter.Reset()
				if err := s.CostCenter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cost_center\"")
			}
		case "department":
			if err := func() error {
				s.Department.Reset()
				if err := s.Department.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"department\"")
			}
		case "play_incoming_calls_sound":
			if err := func() error {
				s.PlayIncomingCallsSound.Reset()
				if err := s.PlayIncomingCallsSound.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_incoming_calls_sound\"")
			}
		case "directed_call_pickup":
			if err := func() error {
				s.DirectedCallPickup.Reset()
				if err := s.DirectedCallPickup.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"directed_call_pickup\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGCPReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGCPReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGCPReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGCPReqPlayIncomingCallsSound) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGCPReqPlayIncomingCallsSound) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.RingTone.Set {
			e.FieldStart("ring_tone")
			s.RingTone.Encode(e)
		}
	}
	{
		if s.Duration.Set {
			e.FieldStart("duration")
			s.Duration.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateGCPReqPlayIncomingCallsSound = [3]string{
	0: "enable",
	1: "ring_tone",
	2: "duration",
}

// Decode decodes UpdateGCPReqPlayIncomingCallsSound from json.
func (s *UpdateGCPReqPlayIncomingCallsSound) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGCPReqPlayIncomingCallsSound to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "ring_tone":
			if err := func() error {
				s.RingTone.Reset()
				if err := s.RingTone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ring_tone\"")
			}
		case "duration":
			if err := func() error {
				s.Duration.Reset()
				if err := s.Duration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"duration\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGCPReqPlayIncomingCallsSound")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGCPReqPlayIncomingCallsSound) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGCPReqPlayIncomingCallsSound) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateLocationReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateLocationReq) encodeFields(e *jx.Encoder) {
	{
		if s.Bssid.Set {
			e.FieldStart("bssid")
			s.Bssid.Encode(e)
		}
	}
	{
		if s.ElinPhoneNumberID.Set {
			e.FieldStart("elin_phone_number_id")
			s.ElinPhoneNumberID.Encode(e)
		}
	}
	{
		if s.EmergencyAddressID.Set {
			e.FieldStart("emergency_address_id")
			s.EmergencyAddressID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.NetworkSwitches != nil {
			e.FieldStart("network_switches")
			e.ArrStart()
			for _, elem := range s.NetworkSwitches {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.PrivateIP.Set {
			e.FieldStart("private_ip")
			s.PrivateIP.Encode(e)
		}
	}
	{
		if s.PublicIP.Set {
			e.FieldStart("public_ip")
			s.PublicIP.Encode(e)
		}
	}
	{
		if s.SipGroupID.Set {
			e.FieldStart("sip_group_id")
			s.SipGroupID.Encode(e)
		}
	}
	{
		if s.MinimumMatchCriteria.Set {
			e.FieldStart("minimum_match_criteria")
			s.MinimumMatchCriteria.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateLocationReq = [9]string{
	0: "bssid",
	1: "elin_phone_number_id",
	2: "emergency_address_id",
	3: "name",
	4: "network_switches",
	5: "private_ip",
	6: "public_ip",
	7: "sip_group_id",
	8: "minimum_match_criteria",
}

// Decode decodes UpdateLocationReq from json.
func (s *UpdateLocationReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateLocationReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "bssid":
			if err := func() error {
				s.Bssid.Reset()
				if err := s.Bssid.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bssid\"")
			}
		case "elin_phone_number_id":
			if err := func() error {
				s.ElinPhoneNumberID.Reset()
				if err := s.ElinPhoneNumberID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"elin_phone_number_id\"")
			}
		case "emergency_address_id":
			if err := func() error {
				s.EmergencyAddressID.Reset()
				if err := s.EmergencyAddressID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"emergency_address_id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "network_switches":
			if err := func() error {
				s.NetworkSwitches = make([]UpdateLocationReqNetworkSwitchesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem UpdateLocationReqNetworkSwitchesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.NetworkSwitches = append(s.NetworkSwitches, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"network_switches\"")
			}
		case "private_ip":
			if err := func() error {
				s.PrivateIP.Reset()
				if err := s.PrivateIP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"private_ip\"")
			}
		case "public_ip":
			if err := func() error {
				s.PublicIP.Reset()
				if err := s.PublicIP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"public_ip\"")
			}
		case "sip_group_id":
			if err := func() error {
				s.SipGroupID.Reset()
				if err := s.SipGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sip_group_id\"")
			}
		case "minimum_match_criteria":
			if err := func() error {
				s.MinimumMatchCriteria.Reset()
				if err := s.MinimumMatchCriteria.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"minimum_match_criteria\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateLocationReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateLocationReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateLocationReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateLocationReqNetworkSwitchesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateLocationReqNetworkSwitchesItem) encodeFields(e *jx.Encoder) {
	{
		if s.MACAddress.Set {
			e.FieldStart("mac_address")
			s.MACAddress.Encode(e)
		}
	}
	{
		if s.Port.Set {
			e.FieldStart("port")
			s.Port.Encode(e)
		}
	}
	{
		if s.PortPrefix.Set {
			e.FieldStart("port_prefix")
			s.PortPrefix.Encode(e)
		}
	}
	{
		if s.PortRangeFrom.Set {
			e.FieldStart("port_range_from")
			s.PortRangeFrom.Encode(e)
		}
	}
	{
		if s.PortRangeTo.Set {
			e.FieldStart("port_range_to")
			s.PortRangeTo.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateLocationReqNetworkSwitchesItem = [5]string{
	0: "mac_address",
	1: "port",
	2: "port_prefix",
	3: "port_range_from",
	4: "port_range_to",
}

// Decode decodes UpdateLocationReqNetworkSwitchesItem from json.
func (s *UpdateLocationReqNetworkSwitchesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateLocationReqNetworkSwitchesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "mac_address":
			if err := func() error {
				s.MACAddress.Reset()
				if err := s.MACAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mac_address\"")
			}
		case "port":
			if err := func() error {
				s.Port.Reset()
				if err := s.Port.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"port\"")
			}
		case "port_prefix":
			if err := func() error {
				s.PortPrefix.Reset()
				if err := s.PortPrefix.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"port_prefix\"")
			}
		case "port_range_from":
			if err := func() error {
				s.PortRangeFrom.Reset()
				if err := s.PortRangeFrom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"port_range_from\"")
			}
		case "port_range_to":
			if err := func() error {
				s.PortRangeTo.Reset()
				if err := s.PortRangeTo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"port_range_to\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateLocationReqNetworkSwitchesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateLocationReqNetworkSwitchesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateLocationReqNetworkSwitchesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateMonitoringGroupReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateMonitoringGroupReq) encodeFields(e *jx.Encoder) {
	{
		if s.MonitoringPrivileges != nil {
			e.FieldStart("monitoring_privileges")
			e.ArrStart()
			for _, elem := range s.MonitoringPrivileges {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Prompt.Set {
			e.FieldStart("prompt")
			s.Prompt.Encode(e)
		}
	}
	{
		if s.SiteID.Set {
			e.FieldStart("site_id")
			s.SiteID.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateMonitoringGroupReq = [4]string{
	0: "monitoring_privileges",
	1: "name",
	2: "prompt",
	3: "site_id",
}

// Decode decodes UpdateMonitoringGroupReq from json.
func (s *UpdateMonitoringGroupReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateMonitoringGroupReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "monitoring_privileges":
			if err := func() error {
				s.MonitoringPrivileges = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.MonitoringPrivileges = append(s.MonitoringPrivileges, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"monitoring_privileges\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "prompt":
			if err := func() error {
				s.Prompt.Reset()
				if err := s.Prompt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"prompt\"")
			}
		case "site_id":
			if err := func() error {
				s.SiteID.Reset()
				if err := s.SiteID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateMonitoringGroupReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateMonitoringGroupReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateMonitoringGroupReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdatePeeringPhoneNumbersOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdatePeeringPhoneNumbersOK) encodeFields(e *jx.Encoder) {
	{
		if s.UnprocessedNumbers != nil {
			e.FieldStart("unprocessed_numbers")
			e.ArrStart()
			for _, elem := range s.UnprocessedNumbers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfUpdatePeeringPhoneNumbersOK = [1]string{
	0: "unprocessed_numbers",
}

// Decode decodes UpdatePeeringPhoneNumbersOK from json.
func (s *UpdatePeeringPhoneNumbersOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdatePeeringPhoneNumbersOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "unprocessed_numbers":
			if err := func() error {
				s.UnprocessedNumbers = make([]UpdatePeeringPhoneNumbersOKUnprocessedNumbersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem UpdatePeeringPhoneNumbersOKUnprocessedNumbersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.UnprocessedNumbers = append(s.UnprocessedNumbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"unprocessed_numbers\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdatePeeringPhoneNumbersOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdatePeeringPhoneNumbersOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdatePeeringPhoneNumbersOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdatePeeringPhoneNumbersOKUnprocessedNumbersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdatePeeringPhoneNumbersOKUnprocessedNumbersItem) encodeFields(e *jx.Encoder) {
	{
		if s.FailureReason.Set {
			e.FieldStart("failure_reason")
			s.FailureReason.Encode(e)
		}
	}
	{
		if s.PhoneNumber.Set {
			e.FieldStart("phone_number")
			s.PhoneNumber.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdatePeeringPhoneNumbersOKUnprocessedNumbersItem = [2]string{
	0: "failure_reason",
	1: "phone_number",
}

// Decode decodes UpdatePeeringPhoneNumbersOKUnprocessedNumbersItem from json.
func (s *UpdatePeeringPhoneNumbersOKUnprocessedNumbersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdatePeeringPhoneNumbersOKUnprocessedNumbersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "failure_reason":
			if err := func() error {
				s.FailureReason.Reset()
				if err := s.FailureReason.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"failure_reason\"")
			}
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdatePeeringPhoneNumbersOKUnprocessedNumbersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdatePeeringPhoneNumbersOKUnprocessedNumbersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdatePeeringPhoneNumbersOKUnprocessedNumbersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdatePeeringPhoneNumbersReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdatePeeringPhoneNumbersReq) encodeFields(e *jx.Encoder) {
	{
		if s.CarrierCode.Set {
			e.FieldStart("carrier_code")
			s.CarrierCode.Encode(e)
		}
	}
	{
		if s.PhoneNumbers != nil {
			e.FieldStart("phone_numbers")
			e.ArrStart()
			for _, elem := range s.PhoneNumbers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfUpdatePeeringPhoneNumbersReq = [2]string{
	0: "carrier_code",
	1: "phone_numbers",
}

// Decode decodes UpdatePeeringPhoneNumbersReq from json.
func (s *UpdatePeeringPhoneNumbersReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdatePeeringPhoneNumbersReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "carrier_code":
			if err := func() error {
				s.CarrierCode.Reset()
				if err := s.CarrierCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"carrier_code\"")
			}
		case "phone_numbers":
			if err := func() error {
				s.PhoneNumbers = make([]UpdatePeeringPhoneNumbersReqPhoneNumbersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem UpdatePeeringPhoneNumbersReqPhoneNumbersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.PhoneNumbers = append(s.PhoneNumbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_numbers\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdatePeeringPhoneNumbersReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdatePeeringPhoneNumbersReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdatePeeringPhoneNumbersReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdatePeeringPhoneNumbersReqPhoneNumbersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdatePeeringPhoneNumbersReqPhoneNumbersItem) encodeFields(e *jx.Encoder) {
	{
		if s.BillingReferenceID.Set {
			e.FieldStart("billing_reference_id")
			s.BillingReferenceID.Encode(e)
		}
	}
	{
		e.FieldStart("phone_number")
		e.Str(s.PhoneNumber)
	}
	{
		if s.ServiceInfo.Set {
			e.FieldStart("service_info")
			s.ServiceInfo.Encode(e)
		}
	}
	{
		if s.SipTrunkName.Set {
			e.FieldStart("sip_trunk_name")
			s.SipTrunkName.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdatePeeringPhoneNumbersReqPhoneNumbersItem = [5]string{
	0: "billing_reference_id",
	1: "phone_number",
	2: "service_info",
	3: "sip_trunk_name",
	4: "status",
}

// Decode decodes UpdatePeeringPhoneNumbersReqPhoneNumbersItem from json.
func (s *UpdatePeeringPhoneNumbersReqPhoneNumbersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdatePeeringPhoneNumbersReqPhoneNumbersItem to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "billing_reference_id":
			if err := func() error {
				s.BillingReferenceID.Reset()
				if err := s.BillingReferenceID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"billing_reference_id\"")
			}
		case "phone_number":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.PhoneNumber = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		case "service_info":
			if err := func() error {
				s.ServiceInfo.Reset()
				if err := s.ServiceInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"service_info\"")
			}
		case "sip_trunk_name":
			if err := func() error {
				s.SipTrunkName.Reset()
				if err := s.SipTrunkName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sip_trunk_name\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdatePeeringPhoneNumbersReqPhoneNumbersItem")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000010,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfUpdatePeeringPhoneNumbersReqPhoneNumbersItem) {
					name = jsonFieldsNameOfUpdatePeeringPhoneNumbersReqPhoneNumbersItem[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdatePeeringPhoneNumbersReqPhoneNumbersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdatePeeringPhoneNumbersReqPhoneNumbersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdatePhoneNumberDetailsReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdatePhoneNumberDetailsReq) encodeFields(e *jx.Encoder) {
	{
		if s.Capability != nil {
			e.FieldStart("capability")
			e.ArrStart()
			for _, elem := range s.Capability {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.EmergencyAddressStatus.Set {
			e.FieldStart("emergency_address_status")
			s.EmergencyAddressStatus.Encode(e)
		}
	}
	{
		if s.SipGroupID.Set {
			e.FieldStart("sip_group_id")
			s.SipGroupID.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdatePhoneNumberDetailsReq = [4]string{
	0: "capability",
	1: "display_name",
	2: "emergency_address_status",
	3: "sip_group_id",
}

// Decode decodes UpdatePhoneNumberDetailsReq from json.
func (s *UpdatePhoneNumberDetailsReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdatePhoneNumberDetailsReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "capability":
			if err := func() error {
				s.Capability = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Capability = append(s.Capability, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"capability\"")
			}
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "emergency_address_status":
			if err := func() error {
				s.EmergencyAddressStatus.Reset()
				if err := s.EmergencyAddressStatus.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"emergency_address_status\"")
			}
		case "sip_group_id":
			if err := func() error {
				s.SipGroupID.Reset()
				if err := s.SipGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sip_group_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdatePhoneNumberDetailsReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdatePhoneNumberDetailsReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdatePhoneNumberDetailsReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdatePhoneRoleReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdatePhoneRoleReq) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdatePhoneRoleReq = [2]string{
	0: "name",
	1: "description",
}

// Decode decodes UpdatePhoneRoleReq from json.
func (s *UpdatePhoneRoleReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdatePhoneRoleReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdatePhoneRoleReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdatePhoneRoleReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdatePhoneRoleReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdatePhoneSettingsReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdatePhoneSettingsReq) encodeFields(e *jx.Encoder) {
	{
		if s.Byoc.Set {
			e.FieldStart("byoc")
			s.Byoc.Encode(e)
		}
	}
	{
		if s.MultipleSites.Set {
			e.FieldStart("multiple_sites")
			s.MultipleSites.Encode(e)
		}
	}
	{
		if s.ShowDeviceIPForCallLog.Set {
			e.FieldStart("show_device_ip_for_call_log")
			s.ShowDeviceIPForCallLog.Encode(e)
		}
	}
	{
		if s.BillingAccount.Set {
			e.FieldStart("billing_account")
			s.BillingAccount.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdatePhoneSettingsReq = [4]string{
	0: "byoc",
	1: "multiple_sites",
	2: "show_device_ip_for_call_log",
	3: "billing_account",
}

// Decode decodes UpdatePhoneSettingsReq from json.
func (s *UpdatePhoneSettingsReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdatePhoneSettingsReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "byoc":
			if err := func() error {
				s.Byoc.Reset()
				if err := s.Byoc.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"byoc\"")
			}
		case "multiple_sites":
			if err := func() error {
				s.MultipleSites.Reset()
				if err := s.MultipleSites.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"multiple_sites\"")
			}
		case "show_device_ip_for_call_log":
			if err := func() error {
				s.ShowDeviceIPForCallLog.Reset()
				if err := s.ShowDeviceIPForCallLog.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"show_device_ip_for_call_log\"")
			}
		case "billing_account":
			if err := func() error {
				s.BillingAccount.Reset()
				if err := s.BillingAccount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"billing_account\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdatePhoneSettingsReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdatePhoneSettingsReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdatePhoneSettingsReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdatePhoneSettingsReqBillingAccount) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdatePhoneSettingsReqBillingAccount) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdatePhoneSettingsReqBillingAccount = [1]string{
	0: "id",
}

// Decode decodes UpdatePhoneSettingsReqBillingAccount from json.
func (s *UpdatePhoneSettingsReqBillingAccount) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdatePhoneSettingsReqBillingAccount to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdatePhoneSettingsReqBillingAccount")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdatePhoneSettingsReqBillingAccount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdatePhoneSettingsReqBillingAccount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdatePhoneSettingsReqByoc) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdatePhoneSettingsReqByoc) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdatePhoneSettingsReqByoc = [1]string{
	0: "enable",
}

// Decode decodes UpdatePhoneSettingsReqByoc from json.
func (s *UpdatePhoneSettingsReqByoc) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdatePhoneSettingsReqByoc to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdatePhoneSettingsReqByoc")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdatePhoneSettingsReqByoc) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdatePhoneSettingsReqByoc) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdatePhoneSettingsReqMultipleSites) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdatePhoneSettingsReqMultipleSites) encodeFields(e *jx.Encoder) {
	{
		if s.Enabled.Set {
			e.FieldStart("enabled")
			s.Enabled.Encode(e)
		}
	}
	{
		if s.SiteCode.Set {
			e.FieldStart("site_code")
			s.SiteCode.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdatePhoneSettingsReqMultipleSites = [2]string{
	0: "enabled",
	1: "site_code",
}

// Decode decodes UpdatePhoneSettingsReqMultipleSites from json.
func (s *UpdatePhoneSettingsReqMultipleSites) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdatePhoneSettingsReqMultipleSites to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enabled":
			if err := func() error {
				s.Enabled.Reset()
				if err := s.Enabled.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enabled\"")
			}
		case "site_code":
			if err := func() error {
				s.SiteCode.Reset()
				if err := s.SiteCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_code\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdatePhoneSettingsReqMultipleSites")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdatePhoneSettingsReqMultipleSites) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdatePhoneSettingsReqMultipleSites) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdatePhoneSettingsReqMultipleSitesSiteCode) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdatePhoneSettingsReqMultipleSitesSiteCode) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.ShortExtensionLength.Set {
			e.FieldStart("short_extension_length")
			s.ShortExtensionLength.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdatePhoneSettingsReqMultipleSitesSiteCode = [2]string{
	0: "enable",
	1: "short_extension_length",
}

// Decode decodes UpdatePhoneSettingsReqMultipleSitesSiteCode from json.
func (s *UpdatePhoneSettingsReqMultipleSitesSiteCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdatePhoneSettingsReqMultipleSitesSiteCode to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "short_extension_length":
			if err := func() error {
				s.ShortExtensionLength.Reset()
				if err := s.ShortExtensionLength.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"short_extension_length\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdatePhoneSettingsReqMultipleSitesSiteCode")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdatePhoneSettingsReqMultipleSitesSiteCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdatePhoneSettingsReqMultipleSitesSiteCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdatePhoneSettingsReqShowDeviceIPForCallLog) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdatePhoneSettingsReqShowDeviceIPForCallLog) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdatePhoneSettingsReqShowDeviceIPForCallLog = [1]string{
	0: "enable",
}

// Decode decodes UpdatePhoneSettingsReqShowDeviceIPForCallLog from json.
func (s *UpdatePhoneSettingsReqShowDeviceIPForCallLog) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdatePhoneSettingsReqShowDeviceIPForCallLog to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdatePhoneSettingsReqShowDeviceIPForCallLog")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdatePhoneSettingsReqShowDeviceIPForCallLog) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdatePhoneSettingsReqShowDeviceIPForCallLog) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdatePolicyReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdatePolicyReq) encodeFields(e *jx.Encoder) {
	{
		if s.VoicemailAccessMember.Set {
			e.FieldStart("voicemail_access_member")
			s.VoicemailAccessMember.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdatePolicyReq = [1]string{
	0: "voicemail_access_member",
}

// Decode decodes UpdatePolicyReq from json.
func (s *UpdatePolicyReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdatePolicyReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "voicemail_access_member":
			if err := func() error {
				s.VoicemailAccessMember.Reset()
				if err := s.VoicemailAccessMember.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voicemail_access_member\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdatePolicyReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdatePolicyReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdatePolicyReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdatePolicyReqVoicemailAccessMember) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdatePolicyReqVoicemailAccessMember) encodeFields(e *jx.Encoder) {
	{
		if s.AccessUserID.Set {
			e.FieldStart("access_user_id")
			s.AccessUserID.Encode(e)
		}
	}
	{
		if s.Delete.Set {
			e.FieldStart("delete")
			s.Delete.Encode(e)
		}
	}
	{
		if s.Download.Set {
			e.FieldStart("download")
			s.Download.Encode(e)
		}
	}
	{
		if s.SharedID.Set {
			e.FieldStart("shared_id")
			s.SharedID.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdatePolicyReqVoicemailAccessMember = [4]string{
	0: "access_user_id",
	1: "delete",
	2: "download",
	3: "shared_id",
}

// Decode decodes UpdatePolicyReqVoicemailAccessMember from json.
func (s *UpdatePolicyReqVoicemailAccessMember) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdatePolicyReqVoicemailAccessMember to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "access_user_id":
			if err := func() error {
				s.AccessUserID.Reset()
				if err := s.AccessUserID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_user_id\"")
			}
		case "delete":
			if err := func() error {
				s.Delete.Reset()
				if err := s.Delete.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delete\"")
			}
		case "download":
			if err := func() error {
				s.Download.Reset()
				if err := s.Download.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"download\"")
			}
		case "shared_id":
			if err := func() error {
				s.SharedID.Reset()
				if err := s.SharedID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shared_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdatePolicyReqVoicemailAccessMember")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdatePolicyReqVoicemailAccessMember) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdatePolicyReqVoicemailAccessMember) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateProvisionTemplateReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateProvisionTemplateReq) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.Content.Set {
			e.FieldStart("content")
			s.Content.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateProvisionTemplateReq = [3]string{
	0: "name",
	1: "description",
	2: "content",
}

// Decode decodes UpdateProvisionTemplateReq from json.
func (s *UpdateProvisionTemplateReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateProvisionTemplateReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "content":
			if err := func() error {
				s.Content.Reset()
				if err := s.Content.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateProvisionTemplateReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateProvisionTemplateReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateProvisionTemplateReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateProvisionTemplateToDeviceReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateProvisionTemplateToDeviceReq) encodeFields(e *jx.Encoder) {
	{
		if s.ProvisionTemplateID.Set {
			e.FieldStart("provision_template_id")
			s.ProvisionTemplateID.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateProvisionTemplateToDeviceReq = [1]string{
	0: "provision_template_id",
}

// Decode decodes UpdateProvisionTemplateToDeviceReq from json.
func (s *UpdateProvisionTemplateToDeviceReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateProvisionTemplateToDeviceReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "provision_template_id":
			if err := func() error {
				s.ProvisionTemplateID.Reset()
				if err := s.ProvisionTemplateID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provision_template_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateProvisionTemplateToDeviceReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateProvisionTemplateToDeviceReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateProvisionTemplateToDeviceReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateRecordingStatusReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateRecordingStatusReq) encodeFields(e *jx.Encoder) {
	{
		if s.Action.Set {
			e.FieldStart("action")
			s.Action.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateRecordingStatusReq = [1]string{
	0: "action",
}

// Decode decodes UpdateRecordingStatusReq from json.
func (s *UpdateRecordingStatusReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateRecordingStatusReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "action":
			if err := func() error {
				s.Action.Reset()
				if err := s.Action.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"action\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateRecordingStatusReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateRecordingStatusReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateRecordingStatusReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateRoutingRuleReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateRoutingRuleReq) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.NumberPattern.Set {
			e.FieldStart("number_pattern")
			s.NumberPattern.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
	{
		if s.SipGroupID.Set {
			e.FieldStart("sip_group_id")
			s.SipGroupID.Encode(e)
		}
	}
	{
		if s.Translation.Set {
			e.FieldStart("translation")
			s.Translation.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateRoutingRuleReq = [6]string{
	0: "name",
	1: "number_pattern",
	2: "order",
	3: "sip_group_id",
	4: "translation",
	5: "type",
}

// Decode decodes UpdateRoutingRuleReq from json.
func (s *UpdateRoutingRuleReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateRoutingRuleReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "number_pattern":
			if err := func() error {
				s.NumberPattern.Reset()
				if err := s.NumberPattern.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number_pattern\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		case "sip_group_id":
			if err := func() error {
				s.SipGroupID.Reset()
				if err := s.SipGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sip_group_id\"")
			}
		case "translation":
			if err := func() error {
				s.Translation.Reset()
				if err := s.Translation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"translation\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateRoutingRuleReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateRoutingRuleReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateRoutingRuleReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSLGPolicySubSettingReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSLGPolicySubSettingReq) encodeFields(e *jx.Encoder) {
	{
		if s.VoicemailAccessMembers != nil {
			e.FieldStart("voicemail_access_members")
			e.ArrStart()
			for _, elem := range s.VoicemailAccessMembers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfUpdateSLGPolicySubSettingReq = [1]string{
	0: "voicemail_access_members",
}

// Decode decodes UpdateSLGPolicySubSettingReq from json.
func (s *UpdateSLGPolicySubSettingReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSLGPolicySubSettingReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "voicemail_access_members":
			if err := func() error {
				s.VoicemailAccessMembers = make([]UpdateSLGPolicySubSettingReqVoicemailAccessMembersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem UpdateSLGPolicySubSettingReqVoicemailAccessMembersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.VoicemailAccessMembers = append(s.VoicemailAccessMembers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voicemail_access_members\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSLGPolicySubSettingReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSLGPolicySubSettingReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSLGPolicySubSettingReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSLGPolicySubSettingReqVoicemailAccessMembersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSLGPolicySubSettingReqVoicemailAccessMembersItem) encodeFields(e *jx.Encoder) {
	{
		if s.AccessUserID.Set {
			e.FieldStart("access_user_id")
			s.AccessUserID.Encode(e)
		}
	}
	{
		if s.AllowDownload.Set {
			e.FieldStart("allow_download")
			s.AllowDownload.Encode(e)
		}
	}
	{
		if s.AllowDelete.Set {
			e.FieldStart("allow_delete")
			s.AllowDelete.Encode(e)
		}
	}
	{
		if s.AllowSharing.Set {
			e.FieldStart("allow_sharing")
			s.AllowSharing.Encode(e)
		}
	}
	{
		if s.SharedID.Set {
			e.FieldStart("shared_id")
			s.SharedID.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSLGPolicySubSettingReqVoicemailAccessMembersItem = [5]string{
	0: "access_user_id",
	1: "allow_download",
	2: "allow_delete",
	3: "allow_sharing",
	4: "shared_id",
}

// Decode decodes UpdateSLGPolicySubSettingReqVoicemailAccessMembersItem from json.
func (s *UpdateSLGPolicySubSettingReqVoicemailAccessMembersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSLGPolicySubSettingReqVoicemailAccessMembersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "access_user_id":
			if err := func() error {
				s.AccessUserID.Reset()
				if err := s.AccessUserID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_user_id\"")
			}
		case "allow_download":
			if err := func() error {
				s.AllowDownload.Reset()
				if err := s.AllowDownload.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_download\"")
			}
		case "allow_delete":
			if err := func() error {
				s.AllowDelete.Reset()
				if err := s.AllowDelete.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_delete\"")
			}
		case "allow_sharing":
			if err := func() error {
				s.AllowSharing.Reset()
				if err := s.AllowSharing.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_sharing\"")
			}
		case "shared_id":
			if err := func() error {
				s.SharedID.Reset()
				if err := s.SharedID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shared_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSLGPolicySubSettingReqVoicemailAccessMembersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSLGPolicySubSettingReqVoicemailAccessMembersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSLGPolicySubSettingReqVoicemailAccessMembersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSettingTemplateReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSettingTemplateReq) encodeFields(e *jx.Encoder) {
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Policy.Set {
			e.FieldStart("policy")
			s.Policy.Encode(e)
		}
	}
	{
		if s.Profile.Set {
			e.FieldStart("profile")
			s.Profile.Encode(e)
		}
	}
	{
		if s.UserSettings.Set {
			e.FieldStart("user_settings")
			s.UserSettings.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSettingTemplateReq = [5]string{
	0: "description",
	1: "name",
	2: "policy",
	3: "profile",
	4: "user_settings",
}

// Decode decodes UpdateSettingTemplateReq from json.
func (s *UpdateSettingTemplateReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSettingTemplateReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "policy":
			if err := func() error {
				s.Policy.Reset()
				if err := s.Policy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"policy\"")
			}
		case "profile":
			if err := func() error {
				s.Profile.Reset()
				if err := s.Profile.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"profile\"")
			}
		case "user_settings":
			if err := func() error {
				s.UserSettings.Reset()
				if err := s.UserSettings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"user_settings\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSettingTemplateReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSettingTemplateReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSettingTemplateReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSettingTemplateReqPolicy) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSettingTemplateReqPolicy) encodeFields(e *jx.Encoder) {
	{
		if s.AdHocCallRecording.Set {
			e.FieldStart("ad_hoc_call_recording")
			s.AdHocCallRecording.Encode(e)
		}
	}
	{
		if s.AutoCallRecording.Set {
			e.FieldStart("auto_call_recording")
			s.AutoCallRecording.Encode(e)
		}
	}
	{
		if s.SMS.Set {
			e.FieldStart("sms")
			s.SMS.Encode(e)
		}
	}
	{
		if s.Voicemail.Set {
			e.FieldStart("voicemail")
			s.Voicemail.Encode(e)
		}
	}
	{
		if s.CallForwarding.Set {
			e.FieldStart("call_forwarding")
			s.CallForwarding.Encode(e)
		}
	}
	{
		if s.CallOverflow.Set {
			e.FieldStart("call_overflow")
			s.CallOverflow.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSettingTemplateReqPolicy = [6]string{
	0: "ad_hoc_call_recording",
	1: "auto_call_recording",
	2: "sms",
	3: "voicemail",
	4: "call_forwarding",
	5: "call_overflow",
}

// Decode decodes UpdateSettingTemplateReqPolicy from json.
func (s *UpdateSettingTemplateReqPolicy) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSettingTemplateReqPolicy to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "ad_hoc_call_recording":
			if err := func() error {
				s.AdHocCallRecording.Reset()
				if err := s.AdHocCallRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ad_hoc_call_recording\"")
			}
		case "auto_call_recording":
			if err := func() error {
				s.AutoCallRecording.Reset()
				if err := s.AutoCallRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_call_recording\"")
			}
		case "sms":
			if err := func() error {
				s.SMS.Reset()
				if err := s.SMS.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sms\"")
			}
		case "voicemail":
			if err := func() error {
				s.Voicemail.Reset()
				if err := s.Voicemail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voicemail\"")
			}
		case "call_forwarding":
			if err := func() error {
				s.CallForwarding.Reset()
				if err := s.CallForwarding.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_forwarding\"")
			}
		case "call_overflow":
			if err := func() error {
				s.CallOverflow.Reset()
				if err := s.CallOverflow.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_overflow\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSettingTemplateReqPolicy")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSettingTemplateReqPolicy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSettingTemplateReqPolicy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSettingTemplateReqPolicyAdHocCallRecording) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSettingTemplateReqPolicyAdHocCallRecording) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.RecordingStartPrompt.Set {
			e.FieldStart("recording_start_prompt")
			s.RecordingStartPrompt.Encode(e)
		}
	}
	{
		if s.RecordingTranscription.Set {
			e.FieldStart("recording_transcription")
			s.RecordingTranscription.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSettingTemplateReqPolicyAdHocCallRecording = [3]string{
	0: "enable",
	1: "recording_start_prompt",
	2: "recording_transcription",
}

// Decode decodes UpdateSettingTemplateReqPolicyAdHocCallRecording from json.
func (s *UpdateSettingTemplateReqPolicyAdHocCallRecording) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSettingTemplateReqPolicyAdHocCallRecording to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "recording_start_prompt":
			if err := func() error {
				s.RecordingStartPrompt.Reset()
				if err := s.RecordingStartPrompt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_start_prompt\"")
			}
		case "recording_transcription":
			if err := func() error {
				s.RecordingTranscription.Reset()
				if err := s.RecordingTranscription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_transcription\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSettingTemplateReqPolicyAdHocCallRecording")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSettingTemplateReqPolicyAdHocCallRecording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSettingTemplateReqPolicyAdHocCallRecording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSettingTemplateReqPolicyAutoCallRecording) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSettingTemplateReqPolicyAutoCallRecording) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.RecordingCalls.Set {
			e.FieldStart("recording_calls")
			s.RecordingCalls.Encode(e)
		}
	}
	{
		if s.RecordingStartPrompt.Set {
			e.FieldStart("recording_start_prompt")
			s.RecordingStartPrompt.Encode(e)
		}
	}
	{
		if s.RecordingTranscription.Set {
			e.FieldStart("recording_transcription")
			s.RecordingTranscription.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSettingTemplateReqPolicyAutoCallRecording = [4]string{
	0: "enable",
	1: "recording_calls",
	2: "recording_start_prompt",
	3: "recording_transcription",
}

// Decode decodes UpdateSettingTemplateReqPolicyAutoCallRecording from json.
func (s *UpdateSettingTemplateReqPolicyAutoCallRecording) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSettingTemplateReqPolicyAutoCallRecording to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "recording_calls":
			if err := func() error {
				s.RecordingCalls.Reset()
				if err := s.RecordingCalls.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_calls\"")
			}
		case "recording_start_prompt":
			if err := func() error {
				s.RecordingStartPrompt.Reset()
				if err := s.RecordingStartPrompt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_start_prompt\"")
			}
		case "recording_transcription":
			if err := func() error {
				s.RecordingTranscription.Reset()
				if err := s.RecordingTranscription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_transcription\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSettingTemplateReqPolicyAutoCallRecording")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSettingTemplateReqPolicyAutoCallRecording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSettingTemplateReqPolicyAutoCallRecording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSettingTemplateReqPolicyCallForwarding) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSettingTemplateReqPolicyCallForwarding) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.CallForwardingType.Set {
			e.FieldStart("call_forwarding_type")
			s.CallForwardingType.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSettingTemplateReqPolicyCallForwarding = [2]string{
	0: "enable",
	1: "call_forwarding_type",
}

// Decode decodes UpdateSettingTemplateReqPolicyCallForwarding from json.
func (s *UpdateSettingTemplateReqPolicyCallForwarding) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSettingTemplateReqPolicyCallForwarding to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "call_forwarding_type":
			if err := func() error {
				s.CallForwardingType.Reset()
				if err := s.CallForwardingType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_forwarding_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSettingTemplateReqPolicyCallForwarding")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSettingTemplateReqPolicyCallForwarding) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSettingTemplateReqPolicyCallForwarding) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSettingTemplateReqPolicyCallOverflow) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSettingTemplateReqPolicyCallOverflow) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.CallOverflowType.Set {
			e.FieldStart("call_overflow_type")
			s.CallOverflowType.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSettingTemplateReqPolicyCallOverflow = [2]string{
	0: "enable",
	1: "call_overflow_type",
}

// Decode decodes UpdateSettingTemplateReqPolicyCallOverflow from json.
func (s *UpdateSettingTemplateReqPolicyCallOverflow) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSettingTemplateReqPolicyCallOverflow to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "call_overflow_type":
			if err := func() error {
				s.CallOverflowType.Reset()
				if err := s.CallOverflowType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_overflow_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSettingTemplateReqPolicyCallOverflow")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSettingTemplateReqPolicyCallOverflow) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSettingTemplateReqPolicyCallOverflow) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSettingTemplateReqPolicySMS) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSettingTemplateReqPolicySMS) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.InternationalSMS.Set {
			e.FieldStart("international_sms")
			s.InternationalSMS.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSettingTemplateReqPolicySMS = [2]string{
	0: "enable",
	1: "international_sms",
}

// Decode decodes UpdateSettingTemplateReqPolicySMS from json.
func (s *UpdateSettingTemplateReqPolicySMS) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSettingTemplateReqPolicySMS to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "international_sms":
			if err := func() error {
				s.InternationalSMS.Reset()
				if err := s.InternationalSMS.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"international_sms\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSettingTemplateReqPolicySMS")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSettingTemplateReqPolicySMS) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSettingTemplateReqPolicySMS) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSettingTemplateReqPolicyVoicemail) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSettingTemplateReqPolicyVoicemail) encodeFields(e *jx.Encoder) {
	{
		if s.AllowTranscription.Set {
			e.FieldStart("allow_transcription")
			s.AllowTranscription.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSettingTemplateReqPolicyVoicemail = [2]string{
	0: "allow_transcription",
	1: "enable",
}

// Decode decodes UpdateSettingTemplateReqPolicyVoicemail from json.
func (s *UpdateSettingTemplateReqPolicyVoicemail) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSettingTemplateReqPolicyVoicemail to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allow_transcription":
			if err := func() error {
				s.AllowTranscription.Reset()
				if err := s.AllowTranscription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_transcription\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSettingTemplateReqPolicyVoicemail")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSettingTemplateReqPolicyVoicemail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSettingTemplateReqPolicyVoicemail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSettingTemplateReqProfile) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSettingTemplateReqProfile) encodeFields(e *jx.Encoder) {
	{
		if s.AreaCode.Set {
			e.FieldStart("area_code")
			s.AreaCode.Encode(e)
		}
	}
	{
		if s.Country.Set {
			e.FieldStart("country")
			s.Country.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSettingTemplateReqProfile = [2]string{
	0: "area_code",
	1: "country",
}

// Decode decodes UpdateSettingTemplateReqProfile from json.
func (s *UpdateSettingTemplateReqProfile) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSettingTemplateReqProfile to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "area_code":
			if err := func() error {
				s.AreaCode.Reset()
				if err := s.AreaCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"area_code\"")
			}
		case "country":
			if err := func() error {
				s.Country.Reset()
				if err := s.Country.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSettingTemplateReqProfile")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSettingTemplateReqProfile) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSettingTemplateReqProfile) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSettingTemplateReqUserSettings) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSettingTemplateReqUserSettings) encodeFields(e *jx.Encoder) {
	{
		if s.AudioPromptLanguage.Set {
			e.FieldStart("audio_prompt_language")
			s.AudioPromptLanguage.Encode(e)
		}
	}
	{
		if s.BlockCallsWithoutCallerID.Set {
			e.FieldStart("block_calls_without_caller_id")
			s.BlockCallsWithoutCallerID.Encode(e)
		}
	}
	{
		if s.CallHandling.Set {
			e.FieldStart("call_handling")
			s.CallHandling.Encode(e)
		}
	}
	{
		if s.DeskPhone.Set {
			e.FieldStart("desk_phone")
			s.DeskPhone.Encode(e)
		}
	}
	{
		if s.HoldMusic.Set {
			e.FieldStart("hold_music")
			s.HoldMusic.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSettingTemplateReqUserSettings = [5]string{
	0: "audio_prompt_language",
	1: "block_calls_without_caller_id",
	2: "call_handling",
	3: "desk_phone",
	4: "hold_music",
}

// Decode decodes UpdateSettingTemplateReqUserSettings from json.
func (s *UpdateSettingTemplateReqUserSettings) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSettingTemplateReqUserSettings to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_prompt_language":
			if err := func() error {
				s.AudioPromptLanguage.Reset()
				if err := s.AudioPromptLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_prompt_language\"")
			}
		case "block_calls_without_caller_id":
			if err := func() error {
				s.BlockCallsWithoutCallerID.Reset()
				if err := s.BlockCallsWithoutCallerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"block_calls_without_caller_id\"")
			}
		case "call_handling":
			if err := func() error {
				s.CallHandling.Reset()
				if err := s.CallHandling.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_handling\"")
			}
		case "desk_phone":
			if err := func() error {
				s.DeskPhone.Reset()
				if err := s.DeskPhone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"desk_phone\"")
			}
		case "hold_music":
			if err := func() error {
				s.HoldMusic.Reset()
				if err := s.HoldMusic.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hold_music\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSettingTemplateReqUserSettings")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSettingTemplateReqUserSettings) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSettingTemplateReqUserSettings) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSettingTemplateReqUserSettingsCallHandling) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSettingTemplateReqUserSettingsCallHandling) encodeFields(e *jx.Encoder) {
	{
		if s.BusinessHours.Set {
			e.FieldStart("business_hours")
			s.BusinessHours.Encode(e)
		}
	}
	{
		if s.CloseHours.Set {
			e.FieldStart("close_hours")
			s.CloseHours.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSettingTemplateReqUserSettingsCallHandling = [2]string{
	0: "business_hours",
	1: "close_hours",
}

// Decode decodes UpdateSettingTemplateReqUserSettingsCallHandling from json.
func (s *UpdateSettingTemplateReqUserSettingsCallHandling) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSettingTemplateReqUserSettingsCallHandling to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "business_hours":
			if err := func() error {
				s.BusinessHours.Reset()
				if err := s.BusinessHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"business_hours\"")
			}
		case "close_hours":
			if err := func() error {
				s.CloseHours.Reset()
				if err := s.CloseHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"close_hours\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSettingTemplateReqUserSettingsCallHandling")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSettingTemplateReqUserSettingsCallHandling) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSettingTemplateReqUserSettingsCallHandling) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHours) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHours) encodeFields(e *jx.Encoder) {
	{
		if s.BusinessHourAction.Set {
			e.FieldStart("business_hour_action")
			s.BusinessHourAction.Encode(e)
		}
	}
	{
		if s.ConnectToOperator.Set {
			e.FieldStart("connect_to_operator")
			s.ConnectToOperator.Encode(e)
		}
	}
	{
		if s.BusyAction.Set {
			e.FieldStart("busy_action")
			s.BusyAction.Encode(e)
		}
	}
	{
		if s.BusyConnectOperator.Set {
			e.FieldStart("busy_connect_operator")
			s.BusyConnectOperator.Encode(e)
		}
	}
	{
		if s.CustomHours != nil {
			e.FieldStart("custom_hours")
			e.ArrStart()
			for _, elem := range s.CustomHours {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.RingType.Set {
			e.FieldStart("ring_type")
			s.RingType.Encode(e)
		}
	}
	{
		if s.RingingDuration.Set {
			e.FieldStart("ringing_duration")
			s.RingingDuration.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSettingTemplateReqUserSettingsCallHandlingBusinessHours = [8]string{
	0: "business_hour_action",
	1: "connect_to_operator",
	2: "busy_action",
	3: "busy_connect_operator",
	4: "custom_hours",
	5: "ring_type",
	6: "ringing_duration",
	7: "type",
}

// Decode decodes UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHours from json.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHours) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHours to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "business_hour_action":
			if err := func() error {
				s.BusinessHourAction.Reset()
				if err := s.BusinessHourAction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"business_hour_action\"")
			}
		case "connect_to_operator":
			if err := func() error {
				s.ConnectToOperator.Reset()
				if err := s.ConnectToOperator.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"connect_to_operator\"")
			}
		case "busy_action":
			if err := func() error {
				s.BusyAction.Reset()
				if err := s.BusyAction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"busy_action\"")
			}
		case "busy_connect_operator":
			if err := func() error {
				s.BusyConnectOperator.Reset()
				if err := s.BusyConnectOperator.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"busy_connect_operator\"")
			}
		case "custom_hours":
			if err := func() error {
				s.CustomHours = make([]UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursCustomHoursItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursCustomHoursItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CustomHours = append(s.CustomHours, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"custom_hours\"")
			}
		case "ring_type":
			if err := func() error {
				s.RingType.Reset()
				if err := s.RingType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ring_type\"")
			}
		case "ringing_duration":
			if err := func() error {
				s.RingingDuration.Reset()
				if err := s.RingingDuration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ringing_duration\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHours")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursBusyConnectOperator) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursBusyConnectOperator) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.ExternalNumber.Set {
			e.FieldStart("external_number")
			s.ExternalNumber.Encode(e)
		}
	}
	{
		if s.PlayCalleeVoicemailGreeting.Set {
			e.FieldStart("play_callee_voicemail_greeting")
			s.PlayCalleeVoicemailGreeting.Encode(e)
		}
	}
	{
		if s.RequirePress1BeforeConnecting.Set {
			e.FieldStart("require_press_1_before_connecting")
			s.RequirePress1BeforeConnecting.Encode(e)
		}
	}
	{
		if s.AllowCallerCheckVoicemail.Set {
			e.FieldStart("allow_caller_check_voicemail")
			s.AllowCallerCheckVoicemail.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursBusyConnectOperator = [6]string{
	0: "enable",
	1: "id",
	2: "external_number",
	3: "play_callee_voicemail_greeting",
	4: "require_press_1_before_connecting",
	5: "allow_caller_check_voicemail",
}

// Decode decodes UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursBusyConnectOperator from json.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursBusyConnectOperator) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursBusyConnectOperator to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "external_number":
			if err := func() error {
				s.ExternalNumber.Reset()
				if err := s.ExternalNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"external_number\"")
			}
		case "play_callee_voicemail_greeting":
			if err := func() error {
				s.PlayCalleeVoicemailGreeting.Reset()
				if err := s.PlayCalleeVoicemailGreeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_callee_voicemail_greeting\"")
			}
		case "require_press_1_before_connecting":
			if err := func() error {
				s.RequirePress1BeforeConnecting.Reset()
				if err := s.RequirePress1BeforeConnecting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_press_1_before_connecting\"")
			}
		case "allow_caller_check_voicemail":
			if err := func() error {
				s.AllowCallerCheckVoicemail.Reset()
				if err := s.AllowCallerCheckVoicemail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_caller_check_voicemail\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursBusyConnectOperator")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursBusyConnectOperator) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursBusyConnectOperator) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursBusyConnectOperatorExternalNumber) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursBusyConnectOperatorExternalNumber) encodeFields(e *jx.Encoder) {
	{
		if s.Number.Set {
			e.FieldStart("number")
			s.Number.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursBusyConnectOperatorExternalNumber = [2]string{
	0: "number",
	1: "description",
}

// Decode decodes UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursBusyConnectOperatorExternalNumber from json.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursBusyConnectOperatorExternalNumber) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursBusyConnectOperatorExternalNumber to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "number":
			if err := func() error {
				s.Number.Reset()
				if err := s.Number.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursBusyConnectOperatorExternalNumber")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursBusyConnectOperatorExternalNumber) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursBusyConnectOperatorExternalNumber) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursConnectToOperator) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursConnectToOperator) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.ExternalNumber.Set {
			e.FieldStart("external_number")
			s.ExternalNumber.Encode(e)
		}
	}
	{
		if s.PlayCalleeVoicemailGreeting.Set {
			e.FieldStart("play_callee_voicemail_greeting")
			s.PlayCalleeVoicemailGreeting.Encode(e)
		}
	}
	{
		if s.RequirePress1BeforeConnecting.Set {
			e.FieldStart("require_press_1_before_connecting")
			s.RequirePress1BeforeConnecting.Encode(e)
		}
	}
	{
		if s.AllowCallerCheckVoicemail.Set {
			e.FieldStart("allow_caller_check_voicemail")
			s.AllowCallerCheckVoicemail.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursConnectToOperator = [6]string{
	0: "enable",
	1: "id",
	2: "external_number",
	3: "play_callee_voicemail_greeting",
	4: "require_press_1_before_connecting",
	5: "allow_caller_check_voicemail",
}

// Decode decodes UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursConnectToOperator from json.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursConnectToOperator) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursConnectToOperator to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "external_number":
			if err := func() error {
				s.ExternalNumber.Reset()
				if err := s.ExternalNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"external_number\"")
			}
		case "play_callee_voicemail_greeting":
			if err := func() error {
				s.PlayCalleeVoicemailGreeting.Reset()
				if err := s.PlayCalleeVoicemailGreeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_callee_voicemail_greeting\"")
			}
		case "require_press_1_before_connecting":
			if err := func() error {
				s.RequirePress1BeforeConnecting.Reset()
				if err := s.RequirePress1BeforeConnecting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_press_1_before_connecting\"")
			}
		case "allow_caller_check_voicemail":
			if err := func() error {
				s.AllowCallerCheckVoicemail.Reset()
				if err := s.AllowCallerCheckVoicemail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_caller_check_voicemail\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursConnectToOperator")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursConnectToOperator) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursConnectToOperator) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursConnectToOperatorExternalNumber) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursConnectToOperatorExternalNumber) encodeFields(e *jx.Encoder) {
	{
		if s.Number.Set {
			e.FieldStart("number")
			s.Number.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursConnectToOperatorExternalNumber = [2]string{
	0: "number",
	1: "description",
}

// Decode decodes UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursConnectToOperatorExternalNumber from json.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursConnectToOperatorExternalNumber) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursConnectToOperatorExternalNumber to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "number":
			if err := func() error {
				s.Number.Reset()
				if err := s.Number.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursConnectToOperatorExternalNumber")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursConnectToOperatorExternalNumber) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursConnectToOperatorExternalNumber) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursCustomHoursItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursCustomHoursItem) encodeFields(e *jx.Encoder) {
	{
		if s.From.Set {
			e.FieldStart("from")
			s.From.Encode(e, json.EncodeTime)
		}
	}
	{
		if s.To.Set {
			e.FieldStart("to")
			s.To.Encode(e, json.EncodeTime)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.Weekday.Set {
			e.FieldStart("weekday")
			s.Weekday.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursCustomHoursItem = [4]string{
	0: "from",
	1: "to",
	2: "type",
	3: "weekday",
}

// Decode decodes UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursCustomHoursItem from json.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursCustomHoursItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursCustomHoursItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "from":
			if err := func() error {
				s.From.Reset()
				if err := s.From.Decode(d, json.DecodeTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"from\"")
			}
		case "to":
			if err := func() error {
				s.To.Reset()
				if err := s.To.Decode(d, json.DecodeTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"to\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "weekday":
			if err := func() error {
				s.Weekday.Reset()
				if err := s.Weekday.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"weekday\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursCustomHoursItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursCustomHoursItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingBusinessHoursCustomHoursItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingCloseHours) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingCloseHours) encodeFields(e *jx.Encoder) {
	{
		if s.CloseHourAction.Set {
			e.FieldStart("close_hour_action")
			s.CloseHourAction.Encode(e)
		}
	}
	{
		if s.ConnectToOperator.Set {
			e.FieldStart("connect_to_operator")
			s.ConnectToOperator.Encode(e)
		}
	}
	{
		if s.BusyAction.Set {
			e.FieldStart("busy_action")
			s.BusyAction.Encode(e)
		}
	}
	{
		if s.BusyConnectOperator.Set {
			e.FieldStart("busy_connect_operator")
			s.BusyConnectOperator.Encode(e)
		}
	}
	{
		if s.MaxWaitTime.Set {
			e.FieldStart("max_wait_time")
			s.MaxWaitTime.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSettingTemplateReqUserSettingsCallHandlingCloseHours = [5]string{
	0: "close_hour_action",
	1: "connect_to_operator",
	2: "busy_action",
	3: "busy_connect_operator",
	4: "max_wait_time",
}

// Decode decodes UpdateSettingTemplateReqUserSettingsCallHandlingCloseHours from json.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingCloseHours) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSettingTemplateReqUserSettingsCallHandlingCloseHours to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "close_hour_action":
			if err := func() error {
				s.CloseHourAction.Reset()
				if err := s.CloseHourAction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"close_hour_action\"")
			}
		case "connect_to_operator":
			if err := func() error {
				s.ConnectToOperator.Reset()
				if err := s.ConnectToOperator.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"connect_to_operator\"")
			}
		case "busy_action":
			if err := func() error {
				s.BusyAction.Reset()
				if err := s.BusyAction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"busy_action\"")
			}
		case "busy_connect_operator":
			if err := func() error {
				s.BusyConnectOperator.Reset()
				if err := s.BusyConnectOperator.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"busy_connect_operator\"")
			}
		case "max_wait_time":
			if err := func() error {
				s.MaxWaitTime.Reset()
				if err := s.MaxWaitTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"max_wait_time\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSettingTemplateReqUserSettingsCallHandlingCloseHours")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingCloseHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingCloseHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursBusyConnectOperator) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursBusyConnectOperator) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.ExternalNumber.Set {
			e.FieldStart("external_number")
			s.ExternalNumber.Encode(e)
		}
	}
	{
		if s.PlayCalleeVoicemailGreeting.Set {
			e.FieldStart("play_callee_voicemail_greeting")
			s.PlayCalleeVoicemailGreeting.Encode(e)
		}
	}
	{
		if s.RequirePress1BeforeConnecting.Set {
			e.FieldStart("require_press_1_before_connecting")
			s.RequirePress1BeforeConnecting.Encode(e)
		}
	}
	{
		if s.AllowCallerCheckVoicemail.Set {
			e.FieldStart("allow_caller_check_voicemail")
			s.AllowCallerCheckVoicemail.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursBusyConnectOperator = [6]string{
	0: "enable",
	1: "id",
	2: "external_number",
	3: "play_callee_voicemail_greeting",
	4: "require_press_1_before_connecting",
	5: "allow_caller_check_voicemail",
}

// Decode decodes UpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursBusyConnectOperator from json.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursBusyConnectOperator) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursBusyConnectOperator to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "external_number":
			if err := func() error {
				s.ExternalNumber.Reset()
				if err := s.ExternalNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"external_number\"")
			}
		case "play_callee_voicemail_greeting":
			if err := func() error {
				s.PlayCalleeVoicemailGreeting.Reset()
				if err := s.PlayCalleeVoicemailGreeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_callee_voicemail_greeting\"")
			}
		case "require_press_1_before_connecting":
			if err := func() error {
				s.RequirePress1BeforeConnecting.Reset()
				if err := s.RequirePress1BeforeConnecting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_press_1_before_connecting\"")
			}
		case "allow_caller_check_voicemail":
			if err := func() error {
				s.AllowCallerCheckVoicemail.Reset()
				if err := s.AllowCallerCheckVoicemail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_caller_check_voicemail\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursBusyConnectOperator")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursBusyConnectOperator) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursBusyConnectOperator) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursBusyConnectOperatorExternalNumber) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursBusyConnectOperatorExternalNumber) encodeFields(e *jx.Encoder) {
	{
		if s.Number.Set {
			e.FieldStart("number")
			s.Number.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursBusyConnectOperatorExternalNumber = [2]string{
	0: "number",
	1: "description",
}

// Decode decodes UpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursBusyConnectOperatorExternalNumber from json.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursBusyConnectOperatorExternalNumber) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursBusyConnectOperatorExternalNumber to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "number":
			if err := func() error {
				s.Number.Reset()
				if err := s.Number.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursBusyConnectOperatorExternalNumber")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursBusyConnectOperatorExternalNumber) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursBusyConnectOperatorExternalNumber) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursConnectToOperator) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursConnectToOperator) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.ExternalNumber.Set {
			e.FieldStart("external_number")
			s.ExternalNumber.Encode(e)
		}
	}
	{
		if s.PlayCalleeVoicemailGreeting.Set {
			e.FieldStart("play_callee_voicemail_greeting")
			s.PlayCalleeVoicemailGreeting.Encode(e)
		}
	}
	{
		if s.RequirePress1BeforeConnecting.Set {
			e.FieldStart("require_press_1_before_connecting")
			s.RequirePress1BeforeConnecting.Encode(e)
		}
	}
	{
		if s.AllowCallerCheckVoicemail.Set {
			e.FieldStart("allow_caller_check_voicemail")
			s.AllowCallerCheckVoicemail.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursConnectToOperator = [6]string{
	0: "enable",
	1: "id",
	2: "external_number",
	3: "play_callee_voicemail_greeting",
	4: "require_press_1_before_connecting",
	5: "allow_caller_check_voicemail",
}

// Decode decodes UpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursConnectToOperator from json.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursConnectToOperator) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursConnectToOperator to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "external_number":
			if err := func() error {
				s.ExternalNumber.Reset()
				if err := s.ExternalNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"external_number\"")
			}
		case "play_callee_voicemail_greeting":
			if err := func() error {
				s.PlayCalleeVoicemailGreeting.Reset()
				if err := s.PlayCalleeVoicemailGreeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_callee_voicemail_greeting\"")
			}
		case "require_press_1_before_connecting":
			if err := func() error {
				s.RequirePress1BeforeConnecting.Reset()
				if err := s.RequirePress1BeforeConnecting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_press_1_before_connecting\"")
			}
		case "allow_caller_check_voicemail":
			if err := func() error {
				s.AllowCallerCheckVoicemail.Reset()
				if err := s.AllowCallerCheckVoicemail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_caller_check_voicemail\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursConnectToOperator")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursConnectToOperator) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursConnectToOperator) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursConnectToOperatorExternalNumber) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursConnectToOperatorExternalNumber) encodeFields(e *jx.Encoder) {
	{
		if s.Number.Set {
			e.FieldStart("number")
			s.Number.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursConnectToOperatorExternalNumber = [2]string{
	0: "number",
	1: "description",
}

// Decode decodes UpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursConnectToOperatorExternalNumber from json.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursConnectToOperatorExternalNumber) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursConnectToOperatorExternalNumber to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "number":
			if err := func() error {
				s.Number.Reset()
				if err := s.Number.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursConnectToOperatorExternalNumber")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursConnectToOperatorExternalNumber) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSettingTemplateReqUserSettingsCallHandlingCloseHoursConnectToOperatorExternalNumber) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSettingTemplateReqUserSettingsDeskPhone) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSettingTemplateReqUserSettingsDeskPhone) encodeFields(e *jx.Encoder) {
	{
		if s.PinCode.Set {
			e.FieldStart("pin_code")
			s.PinCode.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSettingTemplateReqUserSettingsDeskPhone = [1]string{
	0: "pin_code",
}

// Decode decodes UpdateSettingTemplateReqUserSettingsDeskPhone from json.
func (s *UpdateSettingTemplateReqUserSettingsDeskPhone) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSettingTemplateReqUserSettingsDeskPhone to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pin_code":
			if err := func() error {
				s.PinCode.Reset()
				if err := s.PinCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pin_code\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSettingTemplateReqUserSettingsDeskPhone")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSettingTemplateReqUserSettingsDeskPhone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSettingTemplateReqUserSettingsDeskPhone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSharedLineGroupPolicyReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSharedLineGroupPolicyReq) encodeFields(e *jx.Encoder) {
	{
		if s.CheckVoicemailsOverPhone.Set {
			e.FieldStart("check_voicemails_over_phone")
			s.CheckVoicemailsOverPhone.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSharedLineGroupPolicyReq = [1]string{
	0: "check_voicemails_over_phone",
}

// Decode decodes UpdateSharedLineGroupPolicyReq from json.
func (s *UpdateSharedLineGroupPolicyReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSharedLineGroupPolicyReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "check_voicemails_over_phone":
			if err := func() error {
				s.CheckVoicemailsOverPhone.Reset()
				if err := s.CheckVoicemailsOverPhone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"check_voicemails_over_phone\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSharedLineGroupPolicyReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSharedLineGroupPolicyReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSharedLineGroupPolicyReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSharedLineGroupPolicyReqCheckVoicemailsOverPhone) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSharedLineGroupPolicyReqCheckVoicemailsOverPhone) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Reset.Set {
			e.FieldStart("reset")
			s.Reset.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSharedLineGroupPolicyReqCheckVoicemailsOverPhone = [2]string{
	0: "enable",
	1: "reset",
}

// Decode decodes UpdateSharedLineGroupPolicyReqCheckVoicemailsOverPhone from json.
func (s *UpdateSharedLineGroupPolicyReqCheckVoicemailsOverPhone) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSharedLineGroupPolicyReqCheckVoicemailsOverPhone to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "reset":
			if err := func() error {
				s.Reset.Reset()
				if err := s.Reset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reset\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSharedLineGroupPolicyReqCheckVoicemailsOverPhone")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSharedLineGroupPolicyReqCheckVoicemailsOverPhone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSharedLineGroupPolicyReqCheckVoicemailsOverPhone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteDetailsReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteDetailsReq) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.SiteCode.Set {
			e.FieldStart("site_code")
			s.SiteCode.Encode(e)
		}
	}
	{
		if s.ShortExtension.Set {
			e.FieldStart("short_extension")
			s.ShortExtension.Encode(e)
		}
	}
	{
		if s.DefaultEmergencyAddress.Set {
			e.FieldStart("default_emergency_address")
			s.DefaultEmergencyAddress.Encode(e)
		}
	}
	{
		if s.SipZone.Set {
			e.FieldStart("sip_zone")
			s.SipZone.Encode(e)
		}
	}
	{
		if s.CallerIDName.Set {
			e.FieldStart("caller_id_name")
			s.CallerIDName.Encode(e)
		}
	}
	{
		if s.Policy.Set {
			e.FieldStart("policy")
			s.Policy.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteDetailsReq = [7]string{
	0: "name",
	1: "site_code",
	2: "short_extension",
	3: "default_emergency_address",
	4: "sip_zone",
	5: "caller_id_name",
	6: "policy",
}

// Decode decodes UpdateSiteDetailsReq from json.
func (s *UpdateSiteDetailsReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteDetailsReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "site_code":
			if err := func() error {
				s.SiteCode.Reset()
				if err := s.SiteCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_code\"")
			}
		case "short_extension":
			if err := func() error {
				s.ShortExtension.Reset()
				if err := s.ShortExtension.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"short_extension\"")
			}
		case "default_emergency_address":
			if err := func() error {
				s.DefaultEmergencyAddress.Reset()
				if err := s.DefaultEmergencyAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"default_emergency_address\"")
			}
		case "sip_zone":
			if err := func() error {
				s.SipZone.Reset()
				if err := s.SipZone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sip_zone\"")
			}
		case "caller_id_name":
			if err := func() error {
				s.CallerIDName.Reset()
				if err := s.CallerIDName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caller_id_name\"")
			}
		case "policy":
			if err := func() error {
				s.Policy.Reset()
				if err := s.Policy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"policy\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteDetailsReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteDetailsReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteDetailsReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteDetailsReqDefaultEmergencyAddress) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteDetailsReqDefaultEmergencyAddress) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("address_line1")
		e.Str(s.AddressLine1)
	}
	{
		if s.AddressLine2.Set {
			e.FieldStart("address_line2")
			s.AddressLine2.Encode(e)
		}
	}
	{
		e.FieldStart("city")
		e.Str(s.City)
	}
	{
		e.FieldStart("country")
		e.Str(s.Country)
	}
	{
		e.FieldStart("state_code")
		e.Str(s.StateCode)
	}
	{
		e.FieldStart("zip")
		e.Str(s.Zip)
	}
}

var jsonFieldsNameOfUpdateSiteDetailsReqDefaultEmergencyAddress = [6]string{
	0: "address_line1",
	1: "address_line2",
	2: "city",
	3: "country",
	4: "state_code",
	5: "zip",
}

// Decode decodes UpdateSiteDetailsReqDefaultEmergencyAddress from json.
func (s *UpdateSiteDetailsReqDefaultEmergencyAddress) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteDetailsReqDefaultEmergencyAddress to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "address_line1":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.AddressLine1 = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"address_line1\"")
			}
		case "address_line2":
			if err := func() error {
				s.AddressLine2.Reset()
				if err := s.AddressLine2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"address_line2\"")
			}
		case "city":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.City = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"city\"")
			}
		case "country":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				v, err := d.Str()
				s.Country = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country\"")
			}
		case "state_code":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				v, err := d.Str()
				s.StateCode = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"state_code\"")
			}
		case "zip":
			requiredBitSet[0] |= 1 << 5
			if err := func() error {
				v, err := d.Str()
				s.Zip = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zip\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteDetailsReqDefaultEmergencyAddress")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00111101,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfUpdateSiteDetailsReqDefaultEmergencyAddress) {
					name = jsonFieldsNameOfUpdateSiteDetailsReqDefaultEmergencyAddress[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteDetailsReqDefaultEmergencyAddress) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteDetailsReqDefaultEmergencyAddress) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteDetailsReqPolicy) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteDetailsReqPolicy) encodeFields(e *jx.Encoder) {
	{
		if s.SelectOutboundCallerID.Set {
			e.FieldStart("select_outbound_caller_id")
			s.SelectOutboundCallerID.Encode(e)
		}
	}
	{
		if s.PersonalAudioLibrary.Set {
			e.FieldStart("personal_audio_library")
			s.PersonalAudioLibrary.Encode(e)
		}
	}
	{
		if s.Voicemail.Set {
			e.FieldStart("voicemail")
			s.Voicemail.Encode(e)
		}
	}
	{
		if s.VoicemailTranscription.Set {
			e.FieldStart("voicemail_transcription")
			s.VoicemailTranscription.Encode(e)
		}
	}
	{
		if s.VoicemailNotificationByEmail.Set {
			e.FieldStart("voicemail_notification_by_email")
			s.VoicemailNotificationByEmail.Encode(e)
		}
	}
	{
		if s.SharedVoicemailNotificationByEmail.Set {
			e.FieldStart("shared_voicemail_notification_by_email")
			s.SharedVoicemailNotificationByEmail.Encode(e)
		}
	}
	{
		if s.InternationalCalling.Set {
			e.FieldStart("international_calling")
			s.InternationalCalling.Encode(e)
		}
	}
	{
		if s.ZoomPhoneOnMobile.Set {
			e.FieldStart("zoom_phone_on_mobile")
			s.ZoomPhoneOnMobile.Encode(e)
		}
	}
	{
		if s.SMS.Set {
			e.FieldStart("sms")
			s.SMS.Encode(e)
		}
	}
	{
		if s.ElevateToMeeting.Set {
			e.FieldStart("elevate_to_meeting")
			s.ElevateToMeeting.Encode(e)
		}
	}
	{
		if s.HandOffToRoom.Set {
			e.FieldStart("hand_off_to_room")
			s.HandOffToRoom.Encode(e)
		}
	}
	{
		if s.MobileSwitchToCarrier.Set {
			e.FieldStart("mobile_switch_to_carrier")
			s.MobileSwitchToCarrier.Encode(e)
		}
	}
	{
		if s.Delegation.Set {
			e.FieldStart("delegation")
			s.Delegation.Encode(e)
		}
	}
	{
		if s.AdHocCallRecording.Set {
			e.FieldStart("ad_hoc_call_recording")
			s.AdHocCallRecording.Encode(e)
		}
	}
	{
		if s.AutoCallRecording.Set {
			e.FieldStart("auto_call_recording")
			s.AutoCallRecording.Encode(e)
		}
	}
	{
		if s.CallHandlingForwardingToOtherUsers.Set {
			e.FieldStart("call_handling_forwarding_to_other_users")
			s.CallHandlingForwardingToOtherUsers.Encode(e)
		}
	}
	{
		if s.CheckVoicemailsOverPhone.Set {
			e.FieldStart("check_voicemails_over_phone")
			s.CheckVoicemailsOverPhone.Encode(e)
		}
	}
	{
		if s.CallQueuePickupCode.Set {
			e.FieldStart("call_queue_pickup_code")
			s.CallQueuePickupCode.Encode(e)
		}
	}
	{
		if s.CallQueueOptOutReason.Set {
			e.FieldStart("call_queue_opt_out_reason")
			s.CallQueueOptOutReason.Encode(e)
		}
	}
	{
		if s.ShowUserLastTransferredCall.Set {
			e.FieldStart("show_user_last_transferred_call")
			s.ShowUserLastTransferredCall.Encode(e)
		}
	}
	{
		if s.AutoDeleteDataAfterRetentionDuration.Set {
			e.FieldStart("auto_delete_data_after_retention_duration")
			s.AutoDeleteDataAfterRetentionDuration.Encode(e)
		}
	}
	{
		if s.CallPark.Set {
			e.FieldStart("call_park")
			s.CallPark.Encode(e)
		}
	}
	{
		if s.CallOverflow.Set {
			e.FieldStart("call_overflow")
			s.CallOverflow.Encode(e)
		}
	}
	{
		if s.CallTransferring.Set {
			e.FieldStart("call_transferring")
			s.CallTransferring.Encode(e)
		}
	}
	{
		if s.AudioIntercom.Set {
			e.FieldStart("audio_intercom")
			s.AudioIntercom.Encode(e)
		}
	}
	{
		if s.BlockCallsWithoutCallerID.Set {
			e.FieldStart("block_calls_without_caller_id")
			s.BlockCallsWithoutCallerID.Encode(e)
		}
	}
	{
		if s.BlockExternalCalls.Set {
			e.FieldStart("block_external_calls")
			s.BlockExternalCalls.Encode(e)
		}
	}
	{
		if s.ForceOffNet.Set {
			e.FieldStart("force_off_net")
			s.ForceOffNet.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteDetailsReqPolicy = [28]string{
	0:  "select_outbound_caller_id",
	1:  "personal_audio_library",
	2:  "voicemail",
	3:  "voicemail_transcription",
	4:  "voicemail_notification_by_email",
	5:  "shared_voicemail_notification_by_email",
	6:  "international_calling",
	7:  "zoom_phone_on_mobile",
	8:  "sms",
	9:  "elevate_to_meeting",
	10: "hand_off_to_room",
	11: "mobile_switch_to_carrier",
	12: "delegation",
	13: "ad_hoc_call_recording",
	14: "auto_call_recording",
	15: "call_handling_forwarding_to_other_users",
	16: "check_voicemails_over_phone",
	17: "call_queue_pickup_code",
	18: "call_queue_opt_out_reason",
	19: "show_user_last_transferred_call",
	20: "auto_delete_data_after_retention_duration",
	21: "call_park",
	22: "call_overflow",
	23: "call_transferring",
	24: "audio_intercom",
	25: "block_calls_without_caller_id",
	26: "block_external_calls",
	27: "force_off_net",
}

// Decode decodes UpdateSiteDetailsReqPolicy from json.
func (s *UpdateSiteDetailsReqPolicy) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteDetailsReqPolicy to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "select_outbound_caller_id":
			if err := func() error {
				s.SelectOutboundCallerID.Reset()
				if err := s.SelectOutboundCallerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"select_outbound_caller_id\"")
			}
		case "personal_audio_library":
			if err := func() error {
				s.PersonalAudioLibrary.Reset()
				if err := s.PersonalAudioLibrary.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"personal_audio_library\"")
			}
		case "voicemail":
			if err := func() error {
				s.Voicemail.Reset()
				if err := s.Voicemail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voicemail\"")
			}
		case "voicemail_transcription":
			if err := func() error {
				s.VoicemailTranscription.Reset()
				if err := s.VoicemailTranscription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voicemail_transcription\"")
			}
		case "voicemail_notification_by_email":
			if err := func() error {
				s.VoicemailNotificationByEmail.Reset()
				if err := s.VoicemailNotificationByEmail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voicemail_notification_by_email\"")
			}
		case "shared_voicemail_notification_by_email":
			if err := func() error {
				s.SharedVoicemailNotificationByEmail.Reset()
				if err := s.SharedVoicemailNotificationByEmail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shared_voicemail_notification_by_email\"")
			}
		case "international_calling":
			if err := func() error {
				s.InternationalCalling.Reset()
				if err := s.InternationalCalling.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"international_calling\"")
			}
		case "zoom_phone_on_mobile":
			if err := func() error {
				s.ZoomPhoneOnMobile.Reset()
				if err := s.ZoomPhoneOnMobile.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_phone_on_mobile\"")
			}
		case "sms":
			if err := func() error {
				s.SMS.Reset()
				if err := s.SMS.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sms\"")
			}
		case "elevate_to_meeting":
			if err := func() error {
				s.ElevateToMeeting.Reset()
				if err := s.ElevateToMeeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"elevate_to_meeting\"")
			}
		case "hand_off_to_room":
			if err := func() error {
				s.HandOffToRoom.Reset()
				if err := s.HandOffToRoom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hand_off_to_room\"")
			}
		case "mobile_switch_to_carrier":
			if err := func() error {
				s.MobileSwitchToCarrier.Reset()
				if err := s.MobileSwitchToCarrier.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mobile_switch_to_carrier\"")
			}
		case "delegation":
			if err := func() error {
				s.Delegation.Reset()
				if err := s.Delegation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delegation\"")
			}
		case "ad_hoc_call_recording":
			if err := func() error {
				s.AdHocCallRecording.Reset()
				if err := s.AdHocCallRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ad_hoc_call_recording\"")
			}
		case "auto_call_recording":
			if err := func() error {
				s.AutoCallRecording.Reset()
				if err := s.AutoCallRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_call_recording\"")
			}
		case "call_handling_forwarding_to_other_users":
			if err := func() error {
				s.CallHandlingForwardingToOtherUsers.Reset()
				if err := s.CallHandlingForwardingToOtherUsers.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_handling_forwarding_to_other_users\"")
			}
		case "check_voicemails_over_phone":
			if err := func() error {
				s.CheckVoicemailsOverPhone.Reset()
				if err := s.CheckVoicemailsOverPhone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"check_voicemails_over_phone\"")
			}
		case "call_queue_pickup_code":
			if err := func() error {
				s.CallQueuePickupCode.Reset()
				if err := s.CallQueuePickupCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_queue_pickup_code\"")
			}
		case "call_queue_opt_out_reason":
			if err := func() error {
				s.CallQueueOptOutReason.Reset()
				if err := s.CallQueueOptOutReason.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_queue_opt_out_reason\"")
			}
		case "show_user_last_transferred_call":
			if err := func() error {
				s.ShowUserLastTransferredCall.Reset()
				if err := s.ShowUserLastTransferredCall.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"show_user_last_transferred_call\"")
			}
		case "auto_delete_data_after_retention_duration":
			if err := func() error {
				s.AutoDeleteDataAfterRetentionDuration.Reset()
				if err := s.AutoDeleteDataAfterRetentionDuration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_delete_data_after_retention_duration\"")
			}
		case "call_park":
			if err := func() error {
				s.CallPark.Reset()
				if err := s.CallPark.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_park\"")
			}
		case "call_overflow":
			if err := func() error {
				s.CallOverflow.Reset()
				if err := s.CallOverflow.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_overflow\"")
			}
		case "call_transferring":
			if err := func() error {
				s.CallTransferring.Reset()
				if err := s.CallTransferring.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_transferring\"")
			}
		case "audio_intercom":
			if err := func() error {
				s.AudioIntercom.Reset()
				if err := s.AudioIntercom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_intercom\"")
			}
		case "block_calls_without_caller_id":
			if err := func() error {
				s.BlockCallsWithoutCallerID.Reset()
				if err := s.BlockCallsWithoutCallerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"block_calls_without_caller_id\"")
			}
		case "block_external_calls":
			if err := func() error {
				s.BlockExternalCalls.Reset()
				if err := s.BlockExternalCalls.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"block_external_calls\"")
			}
		case "force_off_net":
			if err := func() error {
				s.ForceOffNet.Reset()
				if err := s.ForceOffNet.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"force_off_net\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteDetailsReqPolicy")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteDetailsReqPolicy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteDetailsReqPolicy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteDetailsReqPolicyAdHocCallRecording) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteDetailsReqPolicyAdHocCallRecording) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Reset.Set {
			e.FieldStart("reset")
			s.Reset.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.RecordingStartPrompt.Set {
			e.FieldStart("recording_start_prompt")
			s.RecordingStartPrompt.Encode(e)
		}
	}
	{
		if s.RecordingTranscription.Set {
			e.FieldStart("recording_transcription")
			s.RecordingTranscription.Encode(e)
		}
	}
	{
		if s.PlayRecordingBeepTone.Set {
			e.FieldStart("play_recording_beep_tone")
			s.PlayRecordingBeepTone.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteDetailsReqPolicyAdHocCallRecording = [6]string{
	0: "enable",
	1: "reset",
	2: "locked",
	3: "recording_start_prompt",
	4: "recording_transcription",
	5: "play_recording_beep_tone",
}

// Decode decodes UpdateSiteDetailsReqPolicyAdHocCallRecording from json.
func (s *UpdateSiteDetailsReqPolicyAdHocCallRecording) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteDetailsReqPolicyAdHocCallRecording to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "reset":
			if err := func() error {
				s.Reset.Reset()
				if err := s.Reset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reset\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "recording_start_prompt":
			if err := func() error {
				s.RecordingStartPrompt.Reset()
				if err := s.RecordingStartPrompt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_start_prompt\"")
			}
		case "recording_transcription":
			if err := func() error {
				s.RecordingTranscription.Reset()
				if err := s.RecordingTranscription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_transcription\"")
			}
		case "play_recording_beep_tone":
			if err := func() error {
				s.PlayRecordingBeepTone.Reset()
				if err := s.PlayRecordingBeepTone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_recording_beep_tone\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteDetailsReqPolicyAdHocCallRecording")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteDetailsReqPolicyAdHocCallRecording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteDetailsReqPolicyAdHocCallRecording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteDetailsReqPolicyAdHocCallRecordingPlayRecordingBeepTone) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteDetailsReqPolicyAdHocCallRecordingPlayRecordingBeepTone) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.PlayBeepVolume.Set {
			e.FieldStart("play_beep_volume")
			s.PlayBeepVolume.Encode(e)
		}
	}
	{
		if s.PlayBeepTimeInterval.Set {
			e.FieldStart("play_beep_time_interval")
			s.PlayBeepTimeInterval.Encode(e)
		}
	}
	{
		if s.PlayBeepMember.Set {
			e.FieldStart("play_beep_member")
			s.PlayBeepMember.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteDetailsReqPolicyAdHocCallRecordingPlayRecordingBeepTone = [4]string{
	0: "enable",
	1: "play_beep_volume",
	2: "play_beep_time_interval",
	3: "play_beep_member",
}

// Decode decodes UpdateSiteDetailsReqPolicyAdHocCallRecordingPlayRecordingBeepTone from json.
func (s *UpdateSiteDetailsReqPolicyAdHocCallRecordingPlayRecordingBeepTone) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteDetailsReqPolicyAdHocCallRecordingPlayRecordingBeepTone to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "play_beep_volume":
			if err := func() error {
				s.PlayBeepVolume.Reset()
				if err := s.PlayBeepVolume.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_beep_volume\"")
			}
		case "play_beep_time_interval":
			if err := func() error {
				s.PlayBeepTimeInterval.Reset()
				if err := s.PlayBeepTimeInterval.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_beep_time_interval\"")
			}
		case "play_beep_member":
			if err := func() error {
				s.PlayBeepMember.Reset()
				if err := s.PlayBeepMember.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_beep_member\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteDetailsReqPolicyAdHocCallRecordingPlayRecordingBeepTone")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteDetailsReqPolicyAdHocCallRecordingPlayRecordingBeepTone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteDetailsReqPolicyAdHocCallRecordingPlayRecordingBeepTone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteDetailsReqPolicyAudioIntercom) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteDetailsReqPolicyAudioIntercom) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Reset.Set {
			e.FieldStart("reset")
			s.Reset.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteDetailsReqPolicyAudioIntercom = [3]string{
	0: "enable",
	1: "reset",
	2: "locked",
}

// Decode decodes UpdateSiteDetailsReqPolicyAudioIntercom from json.
func (s *UpdateSiteDetailsReqPolicyAudioIntercom) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteDetailsReqPolicyAudioIntercom to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "reset":
			if err := func() error {
				s.Reset.Reset()
				if err := s.Reset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reset\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteDetailsReqPolicyAudioIntercom")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteDetailsReqPolicyAudioIntercom) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteDetailsReqPolicyAudioIntercom) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteDetailsReqPolicyAutoCallRecording) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteDetailsReqPolicyAutoCallRecording) encodeFields(e *jx.Encoder) {
	{
		if s.AllowStopResumeRecording.Set {
			e.FieldStart("allow_stop_resume_recording")
			s.AllowStopResumeRecording.Encode(e)
		}
	}
	{
		if s.DisconnectOnRecordingFailure.Set {
			e.FieldStart("disconnect_on_recording_failure")
			s.DisconnectOnRecordingFailure.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Reset.Set {
			e.FieldStart("reset")
			s.Reset.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.RecordingCalls.Set {
			e.FieldStart("recording_calls")
			s.RecordingCalls.Encode(e)
		}
	}
	{
		if s.RecordingExplicitConsent.Set {
			e.FieldStart("recording_explicit_consent")
			s.RecordingExplicitConsent.Encode(e)
		}
	}
	{
		if s.RecordingStartPrompt.Set {
			e.FieldStart("recording_start_prompt")
			s.RecordingStartPrompt.Encode(e)
		}
	}
	{
		if s.RecordingTranscription.Set {
			e.FieldStart("recording_transcription")
			s.RecordingTranscription.Encode(e)
		}
	}
	{
		if s.PlayRecordingBeepTone.Set {
			e.FieldStart("play_recording_beep_tone")
			s.PlayRecordingBeepTone.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteDetailsReqPolicyAutoCallRecording = [10]string{
	0: "allow_stop_resume_recording",
	1: "disconnect_on_recording_failure",
	2: "enable",
	3: "reset",
	4: "locked",
	5: "recording_calls",
	6: "recording_explicit_consent",
	7: "recording_start_prompt",
	8: "recording_transcription",
	9: "play_recording_beep_tone",
}

// Decode decodes UpdateSiteDetailsReqPolicyAutoCallRecording from json.
func (s *UpdateSiteDetailsReqPolicyAutoCallRecording) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteDetailsReqPolicyAutoCallRecording to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allow_stop_resume_recording":
			if err := func() error {
				s.AllowStopResumeRecording.Reset()
				if err := s.AllowStopResumeRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_stop_resume_recording\"")
			}
		case "disconnect_on_recording_failure":
			if err := func() error {
				s.DisconnectOnRecordingFailure.Reset()
				if err := s.DisconnectOnRecordingFailure.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"disconnect_on_recording_failure\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "reset":
			if err := func() error {
				s.Reset.Reset()
				if err := s.Reset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reset\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "recording_calls":
			if err := func() error {
				s.RecordingCalls.Reset()
				if err := s.RecordingCalls.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_calls\"")
			}
		case "recording_explicit_consent":
			if err := func() error {
				s.RecordingExplicitConsent.Reset()
				if err := s.RecordingExplicitConsent.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_explicit_consent\"")
			}
		case "recording_start_prompt":
			if err := func() error {
				s.RecordingStartPrompt.Reset()
				if err := s.RecordingStartPrompt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_start_prompt\"")
			}
		case "recording_transcription":
			if err := func() error {
				s.RecordingTranscription.Reset()
				if err := s.RecordingTranscription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_transcription\"")
			}
		case "play_recording_beep_tone":
			if err := func() error {
				s.PlayRecordingBeepTone.Reset()
				if err := s.PlayRecordingBeepTone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_recording_beep_tone\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteDetailsReqPolicyAutoCallRecording")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteDetailsReqPolicyAutoCallRecording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteDetailsReqPolicyAutoCallRecording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteDetailsReqPolicyAutoCallRecordingPlayRecordingBeepTone) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteDetailsReqPolicyAutoCallRecordingPlayRecordingBeepTone) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.PlayBeepVolume.Set {
			e.FieldStart("play_beep_volume")
			s.PlayBeepVolume.Encode(e)
		}
	}
	{
		if s.PlayBeepTimeInterval.Set {
			e.FieldStart("play_beep_time_interval")
			s.PlayBeepTimeInterval.Encode(e)
		}
	}
	{
		if s.PlayBeepMember.Set {
			e.FieldStart("play_beep_member")
			s.PlayBeepMember.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteDetailsReqPolicyAutoCallRecordingPlayRecordingBeepTone = [4]string{
	0: "enable",
	1: "play_beep_volume",
	2: "play_beep_time_interval",
	3: "play_beep_member",
}

// Decode decodes UpdateSiteDetailsReqPolicyAutoCallRecordingPlayRecordingBeepTone from json.
func (s *UpdateSiteDetailsReqPolicyAutoCallRecordingPlayRecordingBeepTone) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteDetailsReqPolicyAutoCallRecordingPlayRecordingBeepTone to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "play_beep_volume":
			if err := func() error {
				s.PlayBeepVolume.Reset()
				if err := s.PlayBeepVolume.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_beep_volume\"")
			}
		case "play_beep_time_interval":
			if err := func() error {
				s.PlayBeepTimeInterval.Reset()
				if err := s.PlayBeepTimeInterval.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_beep_time_interval\"")
			}
		case "play_beep_member":
			if err := func() error {
				s.PlayBeepMember.Reset()
				if err := s.PlayBeepMember.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_beep_member\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteDetailsReqPolicyAutoCallRecordingPlayRecordingBeepTone")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteDetailsReqPolicyAutoCallRecordingPlayRecordingBeepTone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteDetailsReqPolicyAutoCallRecordingPlayRecordingBeepTone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteDetailsReqPolicyAutoDeleteDataAfterRetentionDuration) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteDetailsReqPolicyAutoDeleteDataAfterRetentionDuration) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Reset.Set {
			e.FieldStart("reset")
			s.Reset.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.Items != nil {
			e.FieldStart("items")
			e.ArrStart()
			for _, elem := range s.Items {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.DeleteType.Set {
			e.FieldStart("delete_type")
			s.DeleteType.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteDetailsReqPolicyAutoDeleteDataAfterRetentionDuration = [5]string{
	0: "enable",
	1: "reset",
	2: "locked",
	3: "items",
	4: "delete_type",
}

// Decode decodes UpdateSiteDetailsReqPolicyAutoDeleteDataAfterRetentionDuration from json.
func (s *UpdateSiteDetailsReqPolicyAutoDeleteDataAfterRetentionDuration) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteDetailsReqPolicyAutoDeleteDataAfterRetentionDuration to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "reset":
			if err := func() error {
				s.Reset.Reset()
				if err := s.Reset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reset\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "items":
			if err := func() error {
				s.Items = make([]UpdateSiteDetailsReqPolicyAutoDeleteDataAfterRetentionDurationItemsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem UpdateSiteDetailsReqPolicyAutoDeleteDataAfterRetentionDurationItemsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Items = append(s.Items, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"items\"")
			}
		case "delete_type":
			if err := func() error {
				s.DeleteType.Reset()
				if err := s.DeleteType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delete_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteDetailsReqPolicyAutoDeleteDataAfterRetentionDuration")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteDetailsReqPolicyAutoDeleteDataAfterRetentionDuration) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteDetailsReqPolicyAutoDeleteDataAfterRetentionDuration) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteDetailsReqPolicyAutoDeleteDataAfterRetentionDurationItemsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteDetailsReqPolicyAutoDeleteDataAfterRetentionDurationItemsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.Duration.Set {
			e.FieldStart("duration")
			s.Duration.Encode(e)
		}
	}
	{
		if s.TimeUnit.Set {
			e.FieldStart("time_unit")
			s.TimeUnit.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteDetailsReqPolicyAutoDeleteDataAfterRetentionDurationItemsItem = [3]string{
	0: "type",
	1: "duration",
	2: "time_unit",
}

// Decode decodes UpdateSiteDetailsReqPolicyAutoDeleteDataAfterRetentionDurationItemsItem from json.
func (s *UpdateSiteDetailsReqPolicyAutoDeleteDataAfterRetentionDurationItemsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteDetailsReqPolicyAutoDeleteDataAfterRetentionDurationItemsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "duration":
			if err := func() error {
				s.Duration.Reset()
				if err := s.Duration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"duration\"")
			}
		case "time_unit":
			if err := func() error {
				s.TimeUnit.Reset()
				if err := s.TimeUnit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"time_unit\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteDetailsReqPolicyAutoDeleteDataAfterRetentionDurationItemsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteDetailsReqPolicyAutoDeleteDataAfterRetentionDurationItemsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteDetailsReqPolicyAutoDeleteDataAfterRetentionDurationItemsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteDetailsReqPolicyBlockCallsWithoutCallerID) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteDetailsReqPolicyBlockCallsWithoutCallerID) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Reset.Set {
			e.FieldStart("reset")
			s.Reset.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteDetailsReqPolicyBlockCallsWithoutCallerID = [3]string{
	0: "enable",
	1: "reset",
	2: "locked",
}

// Decode decodes UpdateSiteDetailsReqPolicyBlockCallsWithoutCallerID from json.
func (s *UpdateSiteDetailsReqPolicyBlockCallsWithoutCallerID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteDetailsReqPolicyBlockCallsWithoutCallerID to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "reset":
			if err := func() error {
				s.Reset.Reset()
				if err := s.Reset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reset\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteDetailsReqPolicyBlockCallsWithoutCallerID")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteDetailsReqPolicyBlockCallsWithoutCallerID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteDetailsReqPolicyBlockCallsWithoutCallerID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteDetailsReqPolicyBlockExternalCalls) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteDetailsReqPolicyBlockExternalCalls) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Reset.Set {
			e.FieldStart("reset")
			s.Reset.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.BlockBusinessHours.Set {
			e.FieldStart("block_business_hours")
			s.BlockBusinessHours.Encode(e)
		}
	}
	{
		if s.BlockClosedHours.Set {
			e.FieldStart("block_closed_hours")
			s.BlockClosedHours.Encode(e)
		}
	}
	{
		if s.BlockHolidayHours.Set {
			e.FieldStart("block_holiday_hours")
			s.BlockHolidayHours.Encode(e)
		}
	}
	{
		if s.BlockCallAction.Set {
			e.FieldStart("block_call_action")
			s.BlockCallAction.Encode(e)
		}
	}
	{
		if s.BlockCallChangeType.Set {
			e.FieldStart("block_call_change_type")
			s.BlockCallChangeType.Encode(e)
		}
	}
	{
		if s.E2eEncryption.Set {
			e.FieldStart("e2e_encryption")
			s.E2eEncryption.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteDetailsReqPolicyBlockExternalCalls = [9]string{
	0: "enable",
	1: "reset",
	2: "locked",
	3: "block_business_hours",
	4: "block_closed_hours",
	5: "block_holiday_hours",
	6: "block_call_action",
	7: "block_call_change_type",
	8: "e2e_encryption",
}

// Decode decodes UpdateSiteDetailsReqPolicyBlockExternalCalls from json.
func (s *UpdateSiteDetailsReqPolicyBlockExternalCalls) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteDetailsReqPolicyBlockExternalCalls to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "reset":
			if err := func() error {
				s.Reset.Reset()
				if err := s.Reset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reset\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "block_business_hours":
			if err := func() error {
				s.BlockBusinessHours.Reset()
				if err := s.BlockBusinessHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"block_business_hours\"")
			}
		case "block_closed_hours":
			if err := func() error {
				s.BlockClosedHours.Reset()
				if err := s.BlockClosedHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"block_closed_hours\"")
			}
		case "block_holiday_hours":
			if err := func() error {
				s.BlockHolidayHours.Reset()
				if err := s.BlockHolidayHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"block_holiday_hours\"")
			}
		case "block_call_action":
			if err := func() error {
				s.BlockCallAction.Reset()
				if err := s.BlockCallAction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"block_call_action\"")
			}
		case "block_call_change_type":
			if err := func() error {
				s.BlockCallChangeType.Reset()
				if err := s.BlockCallChangeType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"block_call_change_type\"")
			}
		case "e2e_encryption":
			if err := func() error {
				s.E2eEncryption.Reset()
				if err := s.E2eEncryption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"e2e_encryption\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteDetailsReqPolicyBlockExternalCalls")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteDetailsReqPolicyBlockExternalCalls) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteDetailsReqPolicyBlockExternalCalls) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteDetailsReqPolicyBlockExternalCallsE2eEncryption) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteDetailsReqPolicyBlockExternalCallsE2eEncryption) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.LockedBy.Set {
			e.FieldStart("locked_by")
			s.LockedBy.Encode(e)
		}
	}
	{
		if s.Modified.Set {
			e.FieldStart("modified")
			s.Modified.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteDetailsReqPolicyBlockExternalCallsE2eEncryption = [4]string{
	0: "enable",
	1: "locked",
	2: "locked_by",
	3: "modified",
}

// Decode decodes UpdateSiteDetailsReqPolicyBlockExternalCallsE2eEncryption from json.
func (s *UpdateSiteDetailsReqPolicyBlockExternalCallsE2eEncryption) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteDetailsReqPolicyBlockExternalCallsE2eEncryption to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "locked_by":
			if err := func() error {
				s.LockedBy.Reset()
				if err := s.LockedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked_by\"")
			}
		case "modified":
			if err := func() error {
				s.Modified.Reset()
				if err := s.Modified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"modified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteDetailsReqPolicyBlockExternalCallsE2eEncryption")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteDetailsReqPolicyBlockExternalCallsE2eEncryption) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteDetailsReqPolicyBlockExternalCallsE2eEncryption) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteDetailsReqPolicyCallHandlingForwardingToOtherUsers) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteDetailsReqPolicyCallHandlingForwardingToOtherUsers) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.CallForwardingType.Set {
			e.FieldStart("call_forwarding_type")
			s.CallForwardingType.Encode(e)
		}
	}
	{
		if s.Reset.Set {
			e.FieldStart("reset")
			s.Reset.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteDetailsReqPolicyCallHandlingForwardingToOtherUsers = [4]string{
	0: "enable",
	1: "call_forwarding_type",
	2: "reset",
	3: "locked",
}

// Decode decodes UpdateSiteDetailsReqPolicyCallHandlingForwardingToOtherUsers from json.
func (s *UpdateSiteDetailsReqPolicyCallHandlingForwardingToOtherUsers) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteDetailsReqPolicyCallHandlingForwardingToOtherUsers to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "call_forwarding_type":
			if err := func() error {
				s.CallForwardingType.Reset()
				if err := s.CallForwardingType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_forwarding_type\"")
			}
		case "reset":
			if err := func() error {
				s.Reset.Reset()
				if err := s.Reset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reset\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteDetailsReqPolicyCallHandlingForwardingToOtherUsers")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteDetailsReqPolicyCallHandlingForwardingToOtherUsers) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteDetailsReqPolicyCallHandlingForwardingToOtherUsers) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteDetailsReqPolicyCallOverflow) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteDetailsReqPolicyCallOverflow) encodeFields(e *jx.Encoder) {
	{
		if s.CallOverflowType.Set {
			e.FieldStart("call_overflow_type")
			s.CallOverflowType.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Reset.Set {
			e.FieldStart("reset")
			s.Reset.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteDetailsReqPolicyCallOverflow = [4]string{
	0: "call_overflow_type",
	1: "enable",
	2: "reset",
	3: "locked",
}

// Decode decodes UpdateSiteDetailsReqPolicyCallOverflow from json.
func (s *UpdateSiteDetailsReqPolicyCallOverflow) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteDetailsReqPolicyCallOverflow to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "call_overflow_type":
			if err := func() error {
				s.CallOverflowType.Reset()
				if err := s.CallOverflowType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_overflow_type\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "reset":
			if err := func() error {
				s.Reset.Reset()
				if err := s.Reset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reset\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteDetailsReqPolicyCallOverflow")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteDetailsReqPolicyCallOverflow) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteDetailsReqPolicyCallOverflow) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteDetailsReqPolicyCallPark) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteDetailsReqPolicyCallPark) encodeFields(e *jx.Encoder) {
	{
		if s.CallNotPickedUpAction.Set {
			e.FieldStart("call_not_picked_up_action")
			s.CallNotPickedUpAction.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Reset.Set {
			e.FieldStart("reset")
			s.Reset.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.ExpirationPeriod.Set {
			e.FieldStart("expiration_period")
			s.ExpirationPeriod.Encode(e)
		}
	}
	{
		if s.ForwardToExtensionID.Set {
			e.FieldStart("forward_to_extension_id")
			s.ForwardToExtensionID.Encode(e)
		}
	}
	{
		if s.Sequence.Set {
			e.FieldStart("sequence")
			s.Sequence.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteDetailsReqPolicyCallPark = [7]string{
	0: "call_not_picked_up_action",
	1: "enable",
	2: "reset",
	3: "locked",
	4: "expiration_period",
	5: "forward_to_extension_id",
	6: "sequence",
}

// Decode decodes UpdateSiteDetailsReqPolicyCallPark from json.
func (s *UpdateSiteDetailsReqPolicyCallPark) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteDetailsReqPolicyCallPark to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "call_not_picked_up_action":
			if err := func() error {
				s.CallNotPickedUpAction.Reset()
				if err := s.CallNotPickedUpAction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_not_picked_up_action\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "reset":
			if err := func() error {
				s.Reset.Reset()
				if err := s.Reset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reset\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "expiration_period":
			if err := func() error {
				s.ExpirationPeriod.Reset()
				if err := s.ExpirationPeriod.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expiration_period\"")
			}
		case "forward_to_extension_id":
			if err := func() error {
				s.ForwardToExtensionID.Reset()
				if err := s.ForwardToExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward_to_extension_id\"")
			}
		case "sequence":
			if err := func() error {
				s.Sequence.Reset()
				if err := s.Sequence.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sequence\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteDetailsReqPolicyCallPark")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteDetailsReqPolicyCallPark) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteDetailsReqPolicyCallPark) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteDetailsReqPolicyCallQueueOptOutReason) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteDetailsReqPolicyCallQueueOptOutReason) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Reset.Set {
			e.FieldStart("reset")
			s.Reset.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.CallQueueOptOutReasonsList != nil {
			e.FieldStart("call_queue_opt_out_reasons_list")
			e.ArrStart()
			for _, elem := range s.CallQueueOptOutReasonsList {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfUpdateSiteDetailsReqPolicyCallQueueOptOutReason = [4]string{
	0: "enable",
	1: "reset",
	2: "locked",
	3: "call_queue_opt_out_reasons_list",
}

// Decode decodes UpdateSiteDetailsReqPolicyCallQueueOptOutReason from json.
func (s *UpdateSiteDetailsReqPolicyCallQueueOptOutReason) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteDetailsReqPolicyCallQueueOptOutReason to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "reset":
			if err := func() error {
				s.Reset.Reset()
				if err := s.Reset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reset\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "call_queue_opt_out_reasons_list":
			if err := func() error {
				s.CallQueueOptOutReasonsList = make([]UpdateSiteDetailsReqPolicyCallQueueOptOutReasonCallQueueOptOutReasonsListItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem UpdateSiteDetailsReqPolicyCallQueueOptOutReasonCallQueueOptOutReasonsListItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CallQueueOptOutReasonsList = append(s.CallQueueOptOutReasonsList, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_queue_opt_out_reasons_list\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteDetailsReqPolicyCallQueueOptOutReason")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteDetailsReqPolicyCallQueueOptOutReason) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteDetailsReqPolicyCallQueueOptOutReason) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteDetailsReqPolicyCallQueueOptOutReasonCallQueueOptOutReasonsListItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteDetailsReqPolicyCallQueueOptOutReasonCallQueueOptOutReasonsListItem) encodeFields(e *jx.Encoder) {
	{
		if s.Code.Set {
			e.FieldStart("code")
			s.Code.Encode(e)
		}
	}
	{
		if s.System.Set {
			e.FieldStart("system")
			s.System.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteDetailsReqPolicyCallQueueOptOutReasonCallQueueOptOutReasonsListItem = [3]string{
	0: "code",
	1: "system",
	2: "enable",
}

// Decode decodes UpdateSiteDetailsReqPolicyCallQueueOptOutReasonCallQueueOptOutReasonsListItem from json.
func (s *UpdateSiteDetailsReqPolicyCallQueueOptOutReasonCallQueueOptOutReasonsListItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteDetailsReqPolicyCallQueueOptOutReasonCallQueueOptOutReasonsListItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "code":
			if err := func() error {
				s.Code.Reset()
				if err := s.Code.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code\"")
			}
		case "system":
			if err := func() error {
				s.System.Reset()
				if err := s.System.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"system\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteDetailsReqPolicyCallQueueOptOutReasonCallQueueOptOutReasonsListItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteDetailsReqPolicyCallQueueOptOutReasonCallQueueOptOutReasonsListItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteDetailsReqPolicyCallQueueOptOutReasonCallQueueOptOutReasonsListItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteDetailsReqPolicyCallQueuePickupCode) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteDetailsReqPolicyCallQueuePickupCode) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Reset.Set {
			e.FieldStart("reset")
			s.Reset.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteDetailsReqPolicyCallQueuePickupCode = [3]string{
	0: "enable",
	1: "reset",
	2: "locked",
}

// Decode decodes UpdateSiteDetailsReqPolicyCallQueuePickupCode from json.
func (s *UpdateSiteDetailsReqPolicyCallQueuePickupCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteDetailsReqPolicyCallQueuePickupCode to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "reset":
			if err := func() error {
				s.Reset.Reset()
				if err := s.Reset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reset\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteDetailsReqPolicyCallQueuePickupCode")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteDetailsReqPolicyCallQueuePickupCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteDetailsReqPolicyCallQueuePickupCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteDetailsReqPolicyCallTransferring) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteDetailsReqPolicyCallTransferring) encodeFields(e *jx.Encoder) {
	{
		if s.CallTransferringType.Set {
			e.FieldStart("call_transferring_type")
			s.CallTransferringType.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Reset.Set {
			e.FieldStart("reset")
			s.Reset.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteDetailsReqPolicyCallTransferring = [4]string{
	0: "call_transferring_type",
	1: "enable",
	2: "reset",
	3: "locked",
}

// Decode decodes UpdateSiteDetailsReqPolicyCallTransferring from json.
func (s *UpdateSiteDetailsReqPolicyCallTransferring) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteDetailsReqPolicyCallTransferring to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "call_transferring_type":
			if err := func() error {
				s.CallTransferringType.Reset()
				if err := s.CallTransferringType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_transferring_type\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "reset":
			if err := func() error {
				s.Reset.Reset()
				if err := s.Reset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reset\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteDetailsReqPolicyCallTransferring")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteDetailsReqPolicyCallTransferring) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteDetailsReqPolicyCallTransferring) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteDetailsReqPolicyCheckVoicemailsOverPhone) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteDetailsReqPolicyCheckVoicemailsOverPhone) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Reset.Set {
			e.FieldStart("reset")
			s.Reset.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteDetailsReqPolicyCheckVoicemailsOverPhone = [3]string{
	0: "enable",
	1: "reset",
	2: "locked",
}

// Decode decodes UpdateSiteDetailsReqPolicyCheckVoicemailsOverPhone from json.
func (s *UpdateSiteDetailsReqPolicyCheckVoicemailsOverPhone) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteDetailsReqPolicyCheckVoicemailsOverPhone to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "reset":
			if err := func() error {
				s.Reset.Reset()
				if err := s.Reset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reset\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteDetailsReqPolicyCheckVoicemailsOverPhone")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteDetailsReqPolicyCheckVoicemailsOverPhone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteDetailsReqPolicyCheckVoicemailsOverPhone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteDetailsReqPolicyDelegation) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteDetailsReqPolicyDelegation) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Reset.Set {
			e.FieldStart("reset")
			s.Reset.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteDetailsReqPolicyDelegation = [3]string{
	0: "enable",
	1: "reset",
	2: "locked",
}

// Decode decodes UpdateSiteDetailsReqPolicyDelegation from json.
func (s *UpdateSiteDetailsReqPolicyDelegation) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteDetailsReqPolicyDelegation to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "reset":
			if err := func() error {
				s.Reset.Reset()
				if err := s.Reset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reset\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteDetailsReqPolicyDelegation")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteDetailsReqPolicyDelegation) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteDetailsReqPolicyDelegation) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteDetailsReqPolicyElevateToMeeting) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteDetailsReqPolicyElevateToMeeting) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Reset.Set {
			e.FieldStart("reset")
			s.Reset.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteDetailsReqPolicyElevateToMeeting = [3]string{
	0: "enable",
	1: "reset",
	2: "locked",
}

// Decode decodes UpdateSiteDetailsReqPolicyElevateToMeeting from json.
func (s *UpdateSiteDetailsReqPolicyElevateToMeeting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteDetailsReqPolicyElevateToMeeting to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "reset":
			if err := func() error {
				s.Reset.Reset()
				if err := s.Reset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reset\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteDetailsReqPolicyElevateToMeeting")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteDetailsReqPolicyElevateToMeeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteDetailsReqPolicyElevateToMeeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteDetailsReqPolicyForceOffNet) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteDetailsReqPolicyForceOffNet) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.AllowExtensionOnlyUsersCallUsersOutsideSite.Set {
			e.FieldStart("allow_extension_only_users_call_users_outside_site")
			s.AllowExtensionOnlyUsersCallUsersOutsideSite.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteDetailsReqPolicyForceOffNet = [2]string{
	0: "enable",
	1: "allow_extension_only_users_call_users_outside_site",
}

// Decode decodes UpdateSiteDetailsReqPolicyForceOffNet from json.
func (s *UpdateSiteDetailsReqPolicyForceOffNet) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteDetailsReqPolicyForceOffNet to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "allow_extension_only_users_call_users_outside_site":
			if err := func() error {
				s.AllowExtensionOnlyUsersCallUsersOutsideSite.Reset()
				if err := s.AllowExtensionOnlyUsersCallUsersOutsideSite.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_extension_only_users_call_users_outside_site\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteDetailsReqPolicyForceOffNet")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteDetailsReqPolicyForceOffNet) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteDetailsReqPolicyForceOffNet) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteDetailsReqPolicyHandOffToRoom) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteDetailsReqPolicyHandOffToRoom) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Reset.Set {
			e.FieldStart("reset")
			s.Reset.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteDetailsReqPolicyHandOffToRoom = [3]string{
	0: "enable",
	1: "reset",
	2: "locked",
}

// Decode decodes UpdateSiteDetailsReqPolicyHandOffToRoom from json.
func (s *UpdateSiteDetailsReqPolicyHandOffToRoom) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteDetailsReqPolicyHandOffToRoom to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "reset":
			if err := func() error {
				s.Reset.Reset()
				if err := s.Reset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reset\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteDetailsReqPolicyHandOffToRoom")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteDetailsReqPolicyHandOffToRoom) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteDetailsReqPolicyHandOffToRoom) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteDetailsReqPolicyInternationalCalling) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteDetailsReqPolicyInternationalCalling) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Reset.Set {
			e.FieldStart("reset")
			s.Reset.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteDetailsReqPolicyInternationalCalling = [3]string{
	0: "enable",
	1: "reset",
	2: "locked",
}

// Decode decodes UpdateSiteDetailsReqPolicyInternationalCalling from json.
func (s *UpdateSiteDetailsReqPolicyInternationalCalling) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteDetailsReqPolicyInternationalCalling to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "reset":
			if err := func() error {
				s.Reset.Reset()
				if err := s.Reset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reset\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteDetailsReqPolicyInternationalCalling")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteDetailsReqPolicyInternationalCalling) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteDetailsReqPolicyInternationalCalling) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteDetailsReqPolicyMobileSwitchToCarrier) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteDetailsReqPolicyMobileSwitchToCarrier) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Reset.Set {
			e.FieldStart("reset")
			s.Reset.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteDetailsReqPolicyMobileSwitchToCarrier = [3]string{
	0: "enable",
	1: "reset",
	2: "locked",
}

// Decode decodes UpdateSiteDetailsReqPolicyMobileSwitchToCarrier from json.
func (s *UpdateSiteDetailsReqPolicyMobileSwitchToCarrier) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteDetailsReqPolicyMobileSwitchToCarrier to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "reset":
			if err := func() error {
				s.Reset.Reset()
				if err := s.Reset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reset\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteDetailsReqPolicyMobileSwitchToCarrier")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteDetailsReqPolicyMobileSwitchToCarrier) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteDetailsReqPolicyMobileSwitchToCarrier) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteDetailsReqPolicyPersonalAudioLibrary) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteDetailsReqPolicyPersonalAudioLibrary) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Reset.Set {
			e.FieldStart("reset")
			s.Reset.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.AllowMusicOnHoldCustomization.Set {
			e.FieldStart("allow_music_on_hold_customization")
			s.AllowMusicOnHoldCustomization.Encode(e)
		}
	}
	{
		if s.AllowVoicemailAndMessageGreetingCustomization.Set {
			e.FieldStart("allow_voicemail_and_message_greeting_customization")
			s.AllowVoicemailAndMessageGreetingCustomization.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteDetailsReqPolicyPersonalAudioLibrary = [5]string{
	0: "enable",
	1: "reset",
	2: "locked",
	3: "allow_music_on_hold_customization",
	4: "allow_voicemail_and_message_greeting_customization",
}

// Decode decodes UpdateSiteDetailsReqPolicyPersonalAudioLibrary from json.
func (s *UpdateSiteDetailsReqPolicyPersonalAudioLibrary) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteDetailsReqPolicyPersonalAudioLibrary to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "reset":
			if err := func() error {
				s.Reset.Reset()
				if err := s.Reset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reset\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "allow_music_on_hold_customization":
			if err := func() error {
				s.AllowMusicOnHoldCustomization.Reset()
				if err := s.AllowMusicOnHoldCustomization.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_music_on_hold_customization\"")
			}
		case "allow_voicemail_and_message_greeting_customization":
			if err := func() error {
				s.AllowVoicemailAndMessageGreetingCustomization.Reset()
				if err := s.AllowVoicemailAndMessageGreetingCustomization.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_voicemail_and_message_greeting_customization\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteDetailsReqPolicyPersonalAudioLibrary")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteDetailsReqPolicyPersonalAudioLibrary) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteDetailsReqPolicyPersonalAudioLibrary) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteDetailsReqPolicySMS) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteDetailsReqPolicySMS) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Reset.Set {
			e.FieldStart("reset")
			s.Reset.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.InternationalSMS.Set {
			e.FieldStart("international_sms")
			s.InternationalSMS.Encode(e)
		}
	}
	{
		if s.InternationalSMSCountries != nil {
			e.FieldStart("international_sms_countries")
			e.ArrStart()
			for _, elem := range s.InternationalSMSCountries {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfUpdateSiteDetailsReqPolicySMS = [5]string{
	0: "enable",
	1: "reset",
	2: "locked",
	3: "international_sms",
	4: "international_sms_countries",
}

// Decode decodes UpdateSiteDetailsReqPolicySMS from json.
func (s *UpdateSiteDetailsReqPolicySMS) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteDetailsReqPolicySMS to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "reset":
			if err := func() error {
				s.Reset.Reset()
				if err := s.Reset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reset\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "international_sms":
			if err := func() error {
				s.InternationalSMS.Reset()
				if err := s.InternationalSMS.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"international_sms\"")
			}
		case "international_sms_countries":
			if err := func() error {
				s.InternationalSMSCountries = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.InternationalSMSCountries = append(s.InternationalSMSCountries, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"international_sms_countries\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteDetailsReqPolicySMS")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteDetailsReqPolicySMS) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteDetailsReqPolicySMS) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteDetailsReqPolicySelectOutboundCallerID) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteDetailsReqPolicySelectOutboundCallerID) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Reset.Set {
			e.FieldStart("reset")
			s.Reset.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
	{
		if s.AllowHideOutboundCallerID.Set {
			e.FieldStart("allow_hide_outbound_caller_id")
			s.AllowHideOutboundCallerID.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteDetailsReqPolicySelectOutboundCallerID = [4]string{
	0: "enable",
	1: "reset",
	2: "locked",
	3: "allow_hide_outbound_caller_id",
}

// Decode decodes UpdateSiteDetailsReqPolicySelectOutboundCallerID from json.
func (s *UpdateSiteDetailsReqPolicySelectOutboundCallerID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteDetailsReqPolicySelectOutboundCallerID to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "reset":
			if err := func() error {
				s.Reset.Reset()
				if err := s.Reset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reset\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		case "allow_hide_outbound_caller_id":
			if err := func() error {
				s.AllowHideOutboundCallerID.Reset()
				if err := s.AllowHideOutboundCallerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_hide_outbound_caller_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteDetailsReqPolicySelectOutboundCallerID")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteDetailsReqPolicySelectOutboundCallerID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteDetailsReqPolicySelectOutboundCallerID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteDetailsReqPolicySharedVoicemailNotificationByEmail) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteDetailsReqPolicySharedVoicemailNotificationByEmail) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Reset.Set {
			e.FieldStart("reset")
			s.Reset.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteDetailsReqPolicySharedVoicemailNotificationByEmail = [3]string{
	0: "enable",
	1: "reset",
	2: "locked",
}

// Decode decodes UpdateSiteDetailsReqPolicySharedVoicemailNotificationByEmail from json.
func (s *UpdateSiteDetailsReqPolicySharedVoicemailNotificationByEmail) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteDetailsReqPolicySharedVoicemailNotificationByEmail to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "reset":
			if err := func() error {
				s.Reset.Reset()
				if err := s.Reset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reset\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteDetailsReqPolicySharedVoicemailNotificationByEmail")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteDetailsReqPolicySharedVoicemailNotificationByEmail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteDetailsReqPolicySharedVoicemailNotificationByEmail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteDetailsReqPolicyVoicemail) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteDetailsReqPolicyVoicemail) encodeFields(e *jx.Encoder) {
	{
		if s.AllowDelete.Set {
			e.FieldStart("allow_delete")
			s.AllowDelete.Encode(e)
		}
	}
	{
		if s.AllowDownload.Set {
			e.FieldStart("allow_download")
			s.AllowDownload.Encode(e)
		}
	}
	{
		if s.AllowVideomail.Set {
			e.FieldStart("allow_videomail")
			s.AllowVideomail.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Reset.Set {
			e.FieldStart("reset")
			s.Reset.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteDetailsReqPolicyVoicemail = [6]string{
	0: "allow_delete",
	1: "allow_download",
	2: "allow_videomail",
	3: "enable",
	4: "reset",
	5: "locked",
}

// Decode decodes UpdateSiteDetailsReqPolicyVoicemail from json.
func (s *UpdateSiteDetailsReqPolicyVoicemail) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteDetailsReqPolicyVoicemail to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allow_delete":
			if err := func() error {
				s.AllowDelete.Reset()
				if err := s.AllowDelete.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_delete\"")
			}
		case "allow_download":
			if err := func() error {
				s.AllowDownload.Reset()
				if err := s.AllowDownload.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_download\"")
			}
		case "allow_videomail":
			if err := func() error {
				s.AllowVideomail.Reset()
				if err := s.AllowVideomail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_videomail\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "reset":
			if err := func() error {
				s.Reset.Reset()
				if err := s.Reset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reset\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteDetailsReqPolicyVoicemail")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteDetailsReqPolicyVoicemail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteDetailsReqPolicyVoicemail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteDetailsReqPolicyVoicemailNotificationByEmail) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteDetailsReqPolicyVoicemailNotificationByEmail) encodeFields(e *jx.Encoder) {
	{
		if s.IncludeVoicemailFile.Set {
			e.FieldStart("include_voicemail_file")
			s.IncludeVoicemailFile.Encode(e)
		}
	}
	{
		if s.IncludeVoicemailTranscription.Set {
			e.FieldStart("include_voicemail_transcription")
			s.IncludeVoicemailTranscription.Encode(e)
		}
	}
	{
		if s.ForwardVoicemailToEmail.Set {
			e.FieldStart("forward_voicemail_to_email")
			s.ForwardVoicemailToEmail.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Reset.Set {
			e.FieldStart("reset")
			s.Reset.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteDetailsReqPolicyVoicemailNotificationByEmail = [6]string{
	0: "include_voicemail_file",
	1: "include_voicemail_transcription",
	2: "forward_voicemail_to_email",
	3: "enable",
	4: "reset",
	5: "locked",
}

// Decode decodes UpdateSiteDetailsReqPolicyVoicemailNotificationByEmail from json.
func (s *UpdateSiteDetailsReqPolicyVoicemailNotificationByEmail) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteDetailsReqPolicyVoicemailNotificationByEmail to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "include_voicemail_file":
			if err := func() error {
				s.IncludeVoicemailFile.Reset()
				if err := s.IncludeVoicemailFile.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"include_voicemail_file\"")
			}
		case "include_voicemail_transcription":
			if err := func() error {
				s.IncludeVoicemailTranscription.Reset()
				if err := s.IncludeVoicemailTranscription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"include_voicemail_transcription\"")
			}
		case "forward_voicemail_to_email":
			if err := func() error {
				s.ForwardVoicemailToEmail.Reset()
				if err := s.ForwardVoicemailToEmail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward_voicemail_to_email\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "reset":
			if err := func() error {
				s.Reset.Reset()
				if err := s.Reset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reset\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteDetailsReqPolicyVoicemailNotificationByEmail")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteDetailsReqPolicyVoicemailNotificationByEmail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteDetailsReqPolicyVoicemailNotificationByEmail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteDetailsReqPolicyVoicemailTranscription) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteDetailsReqPolicyVoicemailTranscription) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Reset.Set {
			e.FieldStart("reset")
			s.Reset.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteDetailsReqPolicyVoicemailTranscription = [3]string{
	0: "enable",
	1: "reset",
	2: "locked",
}

// Decode decodes UpdateSiteDetailsReqPolicyVoicemailTranscription from json.
func (s *UpdateSiteDetailsReqPolicyVoicemailTranscription) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteDetailsReqPolicyVoicemailTranscription to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "reset":
			if err := func() error {
				s.Reset.Reset()
				if err := s.Reset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reset\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteDetailsReqPolicyVoicemailTranscription")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteDetailsReqPolicyVoicemailTranscription) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteDetailsReqPolicyVoicemailTranscription) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteDetailsReqPolicyZoomPhoneOnMobile) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteDetailsReqPolicyZoomPhoneOnMobile) encodeFields(e *jx.Encoder) {
	{
		if s.AllowCallingSMSMms.Set {
			e.FieldStart("allow_calling_sms_mms")
			s.AllowCallingSMSMms.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Reset.Set {
			e.FieldStart("reset")
			s.Reset.Encode(e)
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteDetailsReqPolicyZoomPhoneOnMobile = [4]string{
	0: "allow_calling_sms_mms",
	1: "enable",
	2: "reset",
	3: "locked",
}

// Decode decodes UpdateSiteDetailsReqPolicyZoomPhoneOnMobile from json.
func (s *UpdateSiteDetailsReqPolicyZoomPhoneOnMobile) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteDetailsReqPolicyZoomPhoneOnMobile to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allow_calling_sms_mms":
			if err := func() error {
				s.AllowCallingSMSMms.Reset()
				if err := s.AllowCallingSMSMms.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_calling_sms_mms\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "reset":
			if err := func() error {
				s.Reset.Reset()
				if err := s.Reset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reset\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteDetailsReqPolicyZoomPhoneOnMobile")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteDetailsReqPolicyZoomPhoneOnMobile) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteDetailsReqPolicyZoomPhoneOnMobile) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteDetailsReqShortExtension) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteDetailsReqShortExtension) encodeFields(e *jx.Encoder) {
	{
		if s.Length.Set {
			e.FieldStart("length")
			s.Length.Encode(e)
		}
	}
	{
		if s.Ranges != nil {
			e.FieldStart("ranges")
			e.ArrStart()
			for _, elem := range s.Ranges {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfUpdateSiteDetailsReqShortExtension = [2]string{
	0: "length",
	1: "ranges",
}

// Decode decodes UpdateSiteDetailsReqShortExtension from json.
func (s *UpdateSiteDetailsReqShortExtension) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteDetailsReqShortExtension to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "length":
			if err := func() error {
				s.Length.Reset()
				if err := s.Length.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"length\"")
			}
		case "ranges":
			if err := func() error {
				s.Ranges = make([]UpdateSiteDetailsReqShortExtensionRangesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem UpdateSiteDetailsReqShortExtensionRangesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Ranges = append(s.Ranges, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ranges\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteDetailsReqShortExtension")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteDetailsReqShortExtension) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteDetailsReqShortExtension) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteDetailsReqShortExtensionRangesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteDetailsReqShortExtensionRangesItem) encodeFields(e *jx.Encoder) {
	{
		if s.RangeFrom.Set {
			e.FieldStart("range_from")
			s.RangeFrom.Encode(e)
		}
	}
	{
		if s.RangeTo.Set {
			e.FieldStart("range_to")
			s.RangeTo.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteDetailsReqShortExtensionRangesItem = [2]string{
	0: "range_from",
	1: "range_to",
}

// Decode decodes UpdateSiteDetailsReqShortExtensionRangesItem from json.
func (s *UpdateSiteDetailsReqShortExtensionRangesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteDetailsReqShortExtensionRangesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "range_from":
			if err := func() error {
				s.RangeFrom.Reset()
				if err := s.RangeFrom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"range_from\"")
			}
		case "range_to":
			if err := func() error {
				s.RangeTo.Reset()
				if err := s.RangeTo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"range_to\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteDetailsReqShortExtensionRangesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteDetailsReqShortExtensionRangesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteDetailsReqShortExtensionRangesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteDetailsReqSipZone) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteDetailsReqSipZone) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteDetailsReqSipZone = [1]string{
	0: "id",
}

// Decode decodes UpdateSiteDetailsReqSipZone from json.
func (s *UpdateSiteDetailsReqSipZone) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteDetailsReqSipZone to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteDetailsReqSipZone")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteDetailsReqSipZone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteDetailsReqSipZone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteForUnassignedPhoneNumbersReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteForUnassignedPhoneNumbersReq) encodeFields(e *jx.Encoder) {
	{
		if s.PhoneNumbers != nil {
			e.FieldStart("phone_numbers")
			e.ArrStart()
			for _, elem := range s.PhoneNumbers {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfUpdateSiteForUnassignedPhoneNumbersReq = [1]string{
	0: "phone_numbers",
}

// Decode decodes UpdateSiteForUnassignedPhoneNumbersReq from json.
func (s *UpdateSiteForUnassignedPhoneNumbersReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteForUnassignedPhoneNumbersReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "phone_numbers":
			if err := func() error {
				s.PhoneNumbers = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.PhoneNumbers = append(s.PhoneNumbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_numbers\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteForUnassignedPhoneNumbersReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteForUnassignedPhoneNumbersReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteForUnassignedPhoneNumbersReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteOutboundCallingCountriesOrRegionsReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteOutboundCallingCountriesOrRegionsReq) encodeFields(e *jx.Encoder) {
	{
		if s.CountryRegions != nil {
			e.FieldStart("country_regions")
			e.ArrStart()
			for _, elem := range s.CountryRegions {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfUpdateSiteOutboundCallingCountriesOrRegionsReq = [1]string{
	0: "country_regions",
}

// Decode decodes UpdateSiteOutboundCallingCountriesOrRegionsReq from json.
func (s *UpdateSiteOutboundCallingCountriesOrRegionsReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteOutboundCallingCountriesOrRegionsReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "country_regions":
			if err := func() error {
				s.CountryRegions = make([]UpdateSiteOutboundCallingCountriesOrRegionsReqCountryRegionsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem UpdateSiteOutboundCallingCountriesOrRegionsReqCountryRegionsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CountryRegions = append(s.CountryRegions, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country_regions\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteOutboundCallingCountriesOrRegionsReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteOutboundCallingCountriesOrRegionsReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteOutboundCallingCountriesOrRegionsReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteOutboundCallingCountriesOrRegionsReqCountryRegionsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteOutboundCallingCountriesOrRegionsReqCountryRegionsItem) encodeFields(e *jx.Encoder) {
	{
		if s.IsoCode.Set {
			e.FieldStart("iso_code")
			s.IsoCode.Encode(e)
		}
	}
	{
		if s.Rule.Set {
			e.FieldStart("rule")
			s.Rule.Encode(e)
		}
	}
	{
		if s.DeleteExistingExceptionRules.Set {
			e.FieldStart("delete_existing_exception_rules")
			s.DeleteExistingExceptionRules.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteOutboundCallingCountriesOrRegionsReqCountryRegionsItem = [3]string{
	0: "iso_code",
	1: "rule",
	2: "delete_existing_exception_rules",
}

// Decode decodes UpdateSiteOutboundCallingCountriesOrRegionsReqCountryRegionsItem from json.
func (s *UpdateSiteOutboundCallingCountriesOrRegionsReqCountryRegionsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteOutboundCallingCountriesOrRegionsReqCountryRegionsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "iso_code":
			if err := func() error {
				s.IsoCode.Reset()
				if err := s.IsoCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_code\"")
			}
		case "rule":
			if err := func() error {
				s.Rule.Reset()
				if err := s.Rule.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rule\"")
			}
		case "delete_existing_exception_rules":
			if err := func() error {
				s.DeleteExistingExceptionRules.Reset()
				if err := s.DeleteExistingExceptionRules.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delete_existing_exception_rules\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteOutboundCallingCountriesOrRegionsReqCountryRegionsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteOutboundCallingCountriesOrRegionsReqCountryRegionsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteOutboundCallingCountriesOrRegionsReqCountryRegionsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteOutboundCallingExceptionRuleReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteOutboundCallingExceptionRuleReq) encodeFields(e *jx.Encoder) {
	{
		if s.ExceptionRule.Set {
			e.FieldStart("exception_rule")
			s.ExceptionRule.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteOutboundCallingExceptionRuleReq = [1]string{
	0: "exception_rule",
}

// Decode decodes UpdateSiteOutboundCallingExceptionRuleReq from json.
func (s *UpdateSiteOutboundCallingExceptionRuleReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteOutboundCallingExceptionRuleReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "exception_rule":
			if err := func() error {
				s.ExceptionRule.Reset()
				if err := s.ExceptionRule.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exception_rule\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteOutboundCallingExceptionRuleReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteOutboundCallingExceptionRuleReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteOutboundCallingExceptionRuleReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteOutboundCallingExceptionRuleReqExceptionRule) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteOutboundCallingExceptionRuleReqExceptionRule) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("match_type")
		e.Str(s.MatchType)
	}
	{
		e.FieldStart("prefix_number")
		e.Str(s.PrefixNumber)
	}
	{
		if s.Comment.Set {
			e.FieldStart("comment")
			s.Comment.Encode(e)
		}
	}
	{
		e.FieldStart("status")
		e.Str(s.Status)
	}
	{
		e.FieldStart("country")
		e.Str(s.Country)
	}
}

var jsonFieldsNameOfUpdateSiteOutboundCallingExceptionRuleReqExceptionRule = [5]string{
	0: "match_type",
	1: "prefix_number",
	2: "comment",
	3: "status",
	4: "country",
}

// Decode decodes UpdateSiteOutboundCallingExceptionRuleReqExceptionRule from json.
func (s *UpdateSiteOutboundCallingExceptionRuleReqExceptionRule) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteOutboundCallingExceptionRuleReqExceptionRule to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "match_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.MatchType = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"match_type\"")
			}
		case "prefix_number":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.PrefixNumber = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"prefix_number\"")
			}
		case "comment":
			if err := func() error {
				s.Comment.Reset()
				if err := s.Comment.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"comment\"")
			}
		case "status":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				v, err := d.Str()
				s.Status = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "country":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				v, err := d.Str()
				s.Country = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteOutboundCallingExceptionRuleReqExceptionRule")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00011011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfUpdateSiteOutboundCallingExceptionRuleReqExceptionRule) {
					name = jsonFieldsNameOfUpdateSiteOutboundCallingExceptionRuleReqExceptionRule[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteOutboundCallingExceptionRuleReqExceptionRule) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteOutboundCallingExceptionRuleReqExceptionRule) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteSettingReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteSettingReq) encodeFields(e *jx.Encoder) {
	{
		if s.LocationBasedRouting.Set {
			e.FieldStart("location_based_routing")
			s.LocationBasedRouting.Encode(e)
		}
	}
	{
		if s.BusinessHours.Set {
			e.FieldStart("business_hours")
			s.BusinessHours.Encode(e)
		}
	}
	{
		if s.ClosedHours.Set {
			e.FieldStart("closed_hours")
			s.ClosedHours.Encode(e)
		}
	}
	{
		if s.HolidayHours.Set {
			e.FieldStart("holiday_hours")
			s.HolidayHours.Encode(e)
		}
	}
	{
		if s.OutboundCallerID.Set {
			e.FieldStart("outbound_caller_id")
			s.OutboundCallerID.Encode(e)
		}
	}
	{
		if s.AudioPrompt.Set {
			e.FieldStart("audio_prompt")
			s.AudioPrompt.Encode(e)
		}
	}
	{
		if len(s.DeskPhone) != 0 {
			e.FieldStart("desk_phone")
			e.Raw(s.DeskPhone)
		}
	}
	{
		if s.DialByName.Set {
			e.FieldStart("dial_by_name")
			s.DialByName.Encode(e)
		}
	}
	{
		if s.BillingAccount.Set {
			e.FieldStart("billing_account")
			s.BillingAccount.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteSettingReq = [9]string{
	0: "location_based_routing",
	1: "business_hours",
	2: "closed_hours",
	3: "holiday_hours",
	4: "outbound_caller_id",
	5: "audio_prompt",
	6: "desk_phone",
	7: "dial_by_name",
	8: "billing_account",
}

// Decode decodes UpdateSiteSettingReq from json.
func (s *UpdateSiteSettingReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteSettingReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "location_based_routing":
			if err := func() error {
				s.LocationBasedRouting.Reset()
				if err := s.LocationBasedRouting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"location_based_routing\"")
			}
		case "business_hours":
			if err := func() error {
				s.BusinessHours.Reset()
				if err := s.BusinessHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"business_hours\"")
			}
		case "closed_hours":
			if err := func() error {
				s.ClosedHours.Reset()
				if err := s.ClosedHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"closed_hours\"")
			}
		case "holiday_hours":
			if err := func() error {
				s.HolidayHours.Reset()
				if err := s.HolidayHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holiday_hours\"")
			}
		case "outbound_caller_id":
			if err := func() error {
				s.OutboundCallerID.Reset()
				if err := s.OutboundCallerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"outbound_caller_id\"")
			}
		case "audio_prompt":
			if err := func() error {
				s.AudioPrompt.Reset()
				if err := s.AudioPrompt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_prompt\"")
			}
		case "desk_phone":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.DeskPhone = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"desk_phone\"")
			}
		case "dial_by_name":
			if err := func() error {
				s.DialByName.Reset()
				if err := s.DialByName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"dial_by_name\"")
			}
		case "billing_account":
			if err := func() error {
				s.BillingAccount.Reset()
				if err := s.BillingAccount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"billing_account\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteSettingReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteSettingReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteSettingReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteSettingReqAudioPrompt) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteSettingReqAudioPrompt) encodeFields(e *jx.Encoder) {
	{
		if s.Language.Set {
			e.FieldStart("language")
			s.Language.Encode(e)
		}
	}
	{
		if s.GreetingLeaveVoicemailInstruction.Set {
			e.FieldStart("greeting_leave_voicemail_instruction")
			s.GreetingLeaveVoicemailInstruction.Encode(e)
		}
	}
	{
		if s.GreetingMenuLeaveOrCheckVoicemail.Set {
			e.FieldStart("greeting_menu_leave_or_check_voicemail")
			s.GreetingMenuLeaveOrCheckVoicemail.Encode(e)
		}
	}
	{
		if s.GreetingMenuConnectToOperatorOrLeaveVoicemail.Set {
			e.FieldStart("greeting_menu_connect_to_operator_or_leave_voicemail")
			s.GreetingMenuConnectToOperatorOrLeaveVoicemail.Encode(e)
		}
	}
	{
		if s.GreetingMenuConnectToOperatorLeaveOrCheckVoicemail.Set {
			e.FieldStart("greeting_menu_connect_to_operator_leave_or_check_voicemail")
			s.GreetingMenuConnectToOperatorLeaveOrCheckVoicemail.Encode(e)
		}
	}
	{
		if s.LeaveVoicemailIntroduction.Set {
			e.FieldStart("leave_voicemail_introduction")
			s.LeaveVoicemailIntroduction.Encode(e)
		}
	}
	{
		if s.MessageGreeting.Set {
			e.FieldStart("message_greeting")
			s.MessageGreeting.Encode(e)
		}
	}
	{
		if s.AudioWhileConnecting.Set {
			e.FieldStart("audio_while_connecting")
			s.AudioWhileConnecting.Encode(e)
		}
	}
	{
		if s.HoldMusic.Set {
			e.FieldStart("hold_music")
			s.HoldMusic.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteSettingReqAudioPrompt = [9]string{
	0: "language",
	1: "greeting_leave_voicemail_instruction",
	2: "greeting_menu_leave_or_check_voicemail",
	3: "greeting_menu_connect_to_operator_or_leave_voicemail",
	4: "greeting_menu_connect_to_operator_leave_or_check_voicemail",
	5: "leave_voicemail_introduction",
	6: "message_greeting",
	7: "audio_while_connecting",
	8: "hold_music",
}

// Decode decodes UpdateSiteSettingReqAudioPrompt from json.
func (s *UpdateSiteSettingReqAudioPrompt) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteSettingReqAudioPrompt to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "language":
			if err := func() error {
				s.Language.Reset()
				if err := s.Language.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"language\"")
			}
		case "greeting_leave_voicemail_instruction":
			if err := func() error {
				s.GreetingLeaveVoicemailInstruction.Reset()
				if err := s.GreetingLeaveVoicemailInstruction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"greeting_leave_voicemail_instruction\"")
			}
		case "greeting_menu_leave_or_check_voicemail":
			if err := func() error {
				s.GreetingMenuLeaveOrCheckVoicemail.Reset()
				if err := s.GreetingMenuLeaveOrCheckVoicemail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"greeting_menu_leave_or_check_voicemail\"")
			}
		case "greeting_menu_connect_to_operator_or_leave_voicemail":
			if err := func() error {
				s.GreetingMenuConnectToOperatorOrLeaveVoicemail.Reset()
				if err := s.GreetingMenuConnectToOperatorOrLeaveVoicemail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"greeting_menu_connect_to_operator_or_leave_voicemail\"")
			}
		case "greeting_menu_connect_to_operator_leave_or_check_voicemail":
			if err := func() error {
				s.GreetingMenuConnectToOperatorLeaveOrCheckVoicemail.Reset()
				if err := s.GreetingMenuConnectToOperatorLeaveOrCheckVoicemail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"greeting_menu_connect_to_operator_leave_or_check_voicemail\"")
			}
		case "leave_voicemail_introduction":
			if err := func() error {
				s.LeaveVoicemailIntroduction.Reset()
				if err := s.LeaveVoicemailIntroduction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"leave_voicemail_introduction\"")
			}
		case "message_greeting":
			if err := func() error {
				s.MessageGreeting.Reset()
				if err := s.MessageGreeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message_greeting\"")
			}
		case "audio_while_connecting":
			if err := func() error {
				s.AudioWhileConnecting.Reset()
				if err := s.AudioWhileConnecting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_while_connecting\"")
			}
		case "hold_music":
			if err := func() error {
				s.HoldMusic.Reset()
				if err := s.HoldMusic.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hold_music\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteSettingReqAudioPrompt")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteSettingReqAudioPrompt) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteSettingReqAudioPrompt) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteSettingReqAudioPromptAudioWhileConnecting) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteSettingReqAudioPromptAudioWhileConnecting) encodeFields(e *jx.Encoder) {
	{
		if s.AudioID.Set {
			e.FieldStart("audio_id")
			s.AudioID.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteSettingReqAudioPromptAudioWhileConnecting = [1]string{
	0: "audio_id",
}

// Decode decodes UpdateSiteSettingReqAudioPromptAudioWhileConnecting from json.
func (s *UpdateSiteSettingReqAudioPromptAudioWhileConnecting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteSettingReqAudioPromptAudioWhileConnecting to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_id":
			if err := func() error {
				s.AudioID.Reset()
				if err := s.AudioID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteSettingReqAudioPromptAudioWhileConnecting")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteSettingReqAudioPromptAudioWhileConnecting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteSettingReqAudioPromptAudioWhileConnecting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstruction) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstruction) encodeFields(e *jx.Encoder) {
	{
		if s.BusinessHours.Set {
			e.FieldStart("business_hours")
			s.BusinessHours.Encode(e)
		}
	}
	{
		if s.ClosedHours.Set {
			e.FieldStart("closed_hours")
			s.ClosedHours.Encode(e)
		}
	}
	{
		if s.HolidayHours.Set {
			e.FieldStart("holiday_hours")
			s.HolidayHours.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstruction = [3]string{
	0: "business_hours",
	1: "closed_hours",
	2: "holiday_hours",
}

// Decode decodes UpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstruction from json.
func (s *UpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstruction) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstruction to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "business_hours":
			if err := func() error {
				s.BusinessHours.Reset()
				if err := s.BusinessHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"business_hours\"")
			}
		case "closed_hours":
			if err := func() error {
				s.ClosedHours.Reset()
				if err := s.ClosedHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"closed_hours\"")
			}
		case "holiday_hours":
			if err := func() error {
				s.HolidayHours.Reset()
				if err := s.HolidayHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holiday_hours\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstruction")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstruction) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstruction) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstructionBusinessHours) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstructionBusinessHours) encodeFields(e *jx.Encoder) {
	{
		if s.AudioID.Set {
			e.FieldStart("audio_id")
			s.AudioID.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstructionBusinessHours = [1]string{
	0: "audio_id",
}

// Decode decodes UpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstructionBusinessHours from json.
func (s *UpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstructionBusinessHours) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstructionBusinessHours to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_id":
			if err := func() error {
				s.AudioID.Reset()
				if err := s.AudioID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstructionBusinessHours")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstructionBusinessHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstructionBusinessHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstructionClosedHours) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstructionClosedHours) encodeFields(e *jx.Encoder) {
	{
		if s.AudioID.Set {
			e.FieldStart("audio_id")
			s.AudioID.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstructionClosedHours = [1]string{
	0: "audio_id",
}

// Decode decodes UpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstructionClosedHours from json.
func (s *UpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstructionClosedHours) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstructionClosedHours to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_id":
			if err := func() error {
				s.AudioID.Reset()
				if err := s.AudioID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstructionClosedHours")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstructionClosedHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstructionClosedHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstructionHolidayHours) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstructionHolidayHours) encodeFields(e *jx.Encoder) {
	{
		if s.AudioID.Set {
			e.FieldStart("audio_id")
			s.AudioID.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstructionHolidayHours = [1]string{
	0: "audio_id",
}

// Decode decodes UpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstructionHolidayHours from json.
func (s *UpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstructionHolidayHours) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstructionHolidayHours to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_id":
			if err := func() error {
				s.AudioID.Reset()
				if err := s.AudioID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstructionHolidayHours")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstructionHolidayHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteSettingReqAudioPromptGreetingLeaveVoicemailInstructionHolidayHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemail) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemail) encodeFields(e *jx.Encoder) {
	{
		if s.BusinessHours.Set {
			e.FieldStart("business_hours")
			s.BusinessHours.Encode(e)
		}
	}
	{
		if s.ClosedHours.Set {
			e.FieldStart("closed_hours")
			s.ClosedHours.Encode(e)
		}
	}
	{
		if s.HolidayHours.Set {
			e.FieldStart("holiday_hours")
			s.HolidayHours.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemail = [3]string{
	0: "business_hours",
	1: "closed_hours",
	2: "holiday_hours",
}

// Decode decodes UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemail from json.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemail) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemail to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "business_hours":
			if err := func() error {
				s.BusinessHours.Reset()
				if err := s.BusinessHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"business_hours\"")
			}
		case "closed_hours":
			if err := func() error {
				s.ClosedHours.Reset()
				if err := s.ClosedHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"closed_hours\"")
			}
		case "holiday_hours":
			if err := func() error {
				s.HolidayHours.Reset()
				if err := s.HolidayHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holiday_hours\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemail")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailBusinessHours) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailBusinessHours) encodeFields(e *jx.Encoder) {
	{
		if s.AudioID.Set {
			e.FieldStart("audio_id")
			s.AudioID.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailBusinessHours = [1]string{
	0: "audio_id",
}

// Decode decodes UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailBusinessHours from json.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailBusinessHours) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailBusinessHours to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_id":
			if err := func() error {
				s.AudioID.Reset()
				if err := s.AudioID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailBusinessHours")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailBusinessHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailBusinessHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailClosedHours) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailClosedHours) encodeFields(e *jx.Encoder) {
	{
		if s.AudioID.Set {
			e.FieldStart("audio_id")
			s.AudioID.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailClosedHours = [1]string{
	0: "audio_id",
}

// Decode decodes UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailClosedHours from json.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailClosedHours) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailClosedHours to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_id":
			if err := func() error {
				s.AudioID.Reset()
				if err := s.AudioID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailClosedHours")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailClosedHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailClosedHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailHolidayHours) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailHolidayHours) encodeFields(e *jx.Encoder) {
	{
		if s.AudioID.Set {
			e.FieldStart("audio_id")
			s.AudioID.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailHolidayHours = [1]string{
	0: "audio_id",
}

// Decode decodes UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailHolidayHours from json.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailHolidayHours) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailHolidayHours to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_id":
			if err := func() error {
				s.AudioID.Reset()
				if err := s.AudioID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailHolidayHours")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailHolidayHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorLeaveOrCheckVoicemailHolidayHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemail) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemail) encodeFields(e *jx.Encoder) {
	{
		if s.BusinessHours.Set {
			e.FieldStart("business_hours")
			s.BusinessHours.Encode(e)
		}
	}
	{
		if s.ClosedHours.Set {
			e.FieldStart("closed_hours")
			s.ClosedHours.Encode(e)
		}
	}
	{
		if s.HolidayHours.Set {
			e.FieldStart("holiday_hours")
			s.HolidayHours.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemail = [3]string{
	0: "business_hours",
	1: "closed_hours",
	2: "holiday_hours",
}

// Decode decodes UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemail from json.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemail) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemail to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "business_hours":
			if err := func() error {
				s.BusinessHours.Reset()
				if err := s.BusinessHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"business_hours\"")
			}
		case "closed_hours":
			if err := func() error {
				s.ClosedHours.Reset()
				if err := s.ClosedHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"closed_hours\"")
			}
		case "holiday_hours":
			if err := func() error {
				s.HolidayHours.Reset()
				if err := s.HolidayHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holiday_hours\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemail")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailBusinessHours) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailBusinessHours) encodeFields(e *jx.Encoder) {
	{
		if s.AudioID.Set {
			e.FieldStart("audio_id")
			s.AudioID.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailBusinessHours = [1]string{
	0: "audio_id",
}

// Decode decodes UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailBusinessHours from json.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailBusinessHours) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailBusinessHours to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_id":
			if err := func() error {
				s.AudioID.Reset()
				if err := s.AudioID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailBusinessHours")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailBusinessHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailBusinessHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailClosedHours) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailClosedHours) encodeFields(e *jx.Encoder) {
	{
		if s.AudioID.Set {
			e.FieldStart("audio_id")
			s.AudioID.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailClosedHours = [1]string{
	0: "audio_id",
}

// Decode decodes UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailClosedHours from json.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailClosedHours) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailClosedHours to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_id":
			if err := func() error {
				s.AudioID.Reset()
				if err := s.AudioID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailClosedHours")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailClosedHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailClosedHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailHolidayHours) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailHolidayHours) encodeFields(e *jx.Encoder) {
	{
		if s.AudioID.Set {
			e.FieldStart("audio_id")
			s.AudioID.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailHolidayHours = [1]string{
	0: "audio_id",
}

// Decode decodes UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailHolidayHours from json.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailHolidayHours) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailHolidayHours to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_id":
			if err := func() error {
				s.AudioID.Reset()
				if err := s.AudioID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailHolidayHours")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailHolidayHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuConnectToOperatorOrLeaveVoicemailHolidayHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemail) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemail) encodeFields(e *jx.Encoder) {
	{
		if s.BusinessHours.Set {
			e.FieldStart("business_hours")
			s.BusinessHours.Encode(e)
		}
	}
	{
		if s.ClosedHours.Set {
			e.FieldStart("closed_hours")
			s.ClosedHours.Encode(e)
		}
	}
	{
		if s.HolidayHours.Set {
			e.FieldStart("holiday_hours")
			s.HolidayHours.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemail = [3]string{
	0: "business_hours",
	1: "closed_hours",
	2: "holiday_hours",
}

// Decode decodes UpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemail from json.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemail) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemail to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "business_hours":
			if err := func() error {
				s.BusinessHours.Reset()
				if err := s.BusinessHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"business_hours\"")
			}
		case "closed_hours":
			if err := func() error {
				s.ClosedHours.Reset()
				if err := s.ClosedHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"closed_hours\"")
			}
		case "holiday_hours":
			if err := func() error {
				s.HolidayHours.Reset()
				if err := s.HolidayHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holiday_hours\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemail")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemailBusinessHours) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemailBusinessHours) encodeFields(e *jx.Encoder) {
	{
		if s.AudioID.Set {
			e.FieldStart("audio_id")
			s.AudioID.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemailBusinessHours = [1]string{
	0: "audio_id",
}

// Decode decodes UpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemailBusinessHours from json.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemailBusinessHours) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemailBusinessHours to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_id":
			if err := func() error {
				s.AudioID.Reset()
				if err := s.AudioID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemailBusinessHours")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemailBusinessHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemailBusinessHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemailClosedHours) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemailClosedHours) encodeFields(e *jx.Encoder) {
	{
		if s.AudioID.Set {
			e.FieldStart("audio_id")
			s.AudioID.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemailClosedHours = [1]string{
	0: "audio_id",
}

// Decode decodes UpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemailClosedHours from json.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemailClosedHours) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemailClosedHours to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_id":
			if err := func() error {
				s.AudioID.Reset()
				if err := s.AudioID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemailClosedHours")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemailClosedHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemailClosedHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemailHolidayHours) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemailHolidayHours) encodeFields(e *jx.Encoder) {
	{
		if s.AudioID.Set {
			e.FieldStart("audio_id")
			s.AudioID.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemailHolidayHours = [1]string{
	0: "audio_id",
}

// Decode decodes UpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemailHolidayHours from json.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemailHolidayHours) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemailHolidayHours to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_id":
			if err := func() error {
				s.AudioID.Reset()
				if err := s.AudioID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemailHolidayHours")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemailHolidayHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteSettingReqAudioPromptGreetingMenuLeaveOrCheckVoicemailHolidayHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteSettingReqAudioPromptHoldMusic) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteSettingReqAudioPromptHoldMusic) encodeFields(e *jx.Encoder) {
	{
		if s.AudioID.Set {
			e.FieldStart("audio_id")
			s.AudioID.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteSettingReqAudioPromptHoldMusic = [1]string{
	0: "audio_id",
}

// Decode decodes UpdateSiteSettingReqAudioPromptHoldMusic from json.
func (s *UpdateSiteSettingReqAudioPromptHoldMusic) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteSettingReqAudioPromptHoldMusic to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_id":
			if err := func() error {
				s.AudioID.Reset()
				if err := s.AudioID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteSettingReqAudioPromptHoldMusic")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteSettingReqAudioPromptHoldMusic) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteSettingReqAudioPromptHoldMusic) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteSettingReqAudioPromptLeaveVoicemailIntroduction) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteSettingReqAudioPromptLeaveVoicemailIntroduction) encodeFields(e *jx.Encoder) {
	{
		if s.BusinessHours.Set {
			e.FieldStart("business_hours")
			s.BusinessHours.Encode(e)
		}
	}
	{
		if s.ClosedHours.Set {
			e.FieldStart("closed_hours")
			s.ClosedHours.Encode(e)
		}
	}
	{
		if s.HolidayHours.Set {
			e.FieldStart("holiday_hours")
			s.HolidayHours.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteSettingReqAudioPromptLeaveVoicemailIntroduction = [3]string{
	0: "business_hours",
	1: "closed_hours",
	2: "holiday_hours",
}

// Decode decodes UpdateSiteSettingReqAudioPromptLeaveVoicemailIntroduction from json.
func (s *UpdateSiteSettingReqAudioPromptLeaveVoicemailIntroduction) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteSettingReqAudioPromptLeaveVoicemailIntroduction to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "business_hours":
			if err := func() error {
				s.BusinessHours.Reset()
				if err := s.BusinessHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"business_hours\"")
			}
		case "closed_hours":
			if err := func() error {
				s.ClosedHours.Reset()
				if err := s.ClosedHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"closed_hours\"")
			}
		case "holiday_hours":
			if err := func() error {
				s.HolidayHours.Reset()
				if err := s.HolidayHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holiday_hours\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteSettingReqAudioPromptLeaveVoicemailIntroduction")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteSettingReqAudioPromptLeaveVoicemailIntroduction) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteSettingReqAudioPromptLeaveVoicemailIntroduction) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteSettingReqAudioPromptLeaveVoicemailIntroductionBusinessHours) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteSettingReqAudioPromptLeaveVoicemailIntroductionBusinessHours) encodeFields(e *jx.Encoder) {
	{
		if s.AudioID.Set {
			e.FieldStart("audio_id")
			s.AudioID.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteSettingReqAudioPromptLeaveVoicemailIntroductionBusinessHours = [1]string{
	0: "audio_id",
}

// Decode decodes UpdateSiteSettingReqAudioPromptLeaveVoicemailIntroductionBusinessHours from json.
func (s *UpdateSiteSettingReqAudioPromptLeaveVoicemailIntroductionBusinessHours) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteSettingReqAudioPromptLeaveVoicemailIntroductionBusinessHours to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_id":
			if err := func() error {
				s.AudioID.Reset()
				if err := s.AudioID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteSettingReqAudioPromptLeaveVoicemailIntroductionBusinessHours")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteSettingReqAudioPromptLeaveVoicemailIntroductionBusinessHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteSettingReqAudioPromptLeaveVoicemailIntroductionBusinessHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteSettingReqAudioPromptLeaveVoicemailIntroductionClosedHours) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteSettingReqAudioPromptLeaveVoicemailIntroductionClosedHours) encodeFields(e *jx.Encoder) {
	{
		if s.AudioID.Set {
			e.FieldStart("audio_id")
			s.AudioID.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteSettingReqAudioPromptLeaveVoicemailIntroductionClosedHours = [1]string{
	0: "audio_id",
}

// Decode decodes UpdateSiteSettingReqAudioPromptLeaveVoicemailIntroductionClosedHours from json.
func (s *UpdateSiteSettingReqAudioPromptLeaveVoicemailIntroductionClosedHours) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteSettingReqAudioPromptLeaveVoicemailIntroductionClosedHours to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_id":
			if err := func() error {
				s.AudioID.Reset()
				if err := s.AudioID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteSettingReqAudioPromptLeaveVoicemailIntroductionClosedHours")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteSettingReqAudioPromptLeaveVoicemailIntroductionClosedHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteSettingReqAudioPromptLeaveVoicemailIntroductionClosedHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteSettingReqAudioPromptLeaveVoicemailIntroductionHolidayHours) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteSettingReqAudioPromptLeaveVoicemailIntroductionHolidayHours) encodeFields(e *jx.Encoder) {
	{
		if s.AudioID.Set {
			e.FieldStart("audio_id")
			s.AudioID.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteSettingReqAudioPromptLeaveVoicemailIntroductionHolidayHours = [1]string{
	0: "audio_id",
}

// Decode decodes UpdateSiteSettingReqAudioPromptLeaveVoicemailIntroductionHolidayHours from json.
func (s *UpdateSiteSettingReqAudioPromptLeaveVoicemailIntroductionHolidayHours) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteSettingReqAudioPromptLeaveVoicemailIntroductionHolidayHours to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_id":
			if err := func() error {
				s.AudioID.Reset()
				if err := s.AudioID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteSettingReqAudioPromptLeaveVoicemailIntroductionHolidayHours")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteSettingReqAudioPromptLeaveVoicemailIntroductionHolidayHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteSettingReqAudioPromptLeaveVoicemailIntroductionHolidayHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteSettingReqAudioPromptMessageGreeting) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteSettingReqAudioPromptMessageGreeting) encodeFields(e *jx.Encoder) {
	{
		if s.BusinessHours.Set {
			e.FieldStart("business_hours")
			s.BusinessHours.Encode(e)
		}
	}
	{
		if s.ClosedHours.Set {
			e.FieldStart("closed_hours")
			s.ClosedHours.Encode(e)
		}
	}
	{
		if s.HolidayHours.Set {
			e.FieldStart("holiday_hours")
			s.HolidayHours.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteSettingReqAudioPromptMessageGreeting = [3]string{
	0: "business_hours",
	1: "closed_hours",
	2: "holiday_hours",
}

// Decode decodes UpdateSiteSettingReqAudioPromptMessageGreeting from json.
func (s *UpdateSiteSettingReqAudioPromptMessageGreeting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteSettingReqAudioPromptMessageGreeting to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "business_hours":
			if err := func() error {
				s.BusinessHours.Reset()
				if err := s.BusinessHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"business_hours\"")
			}
		case "closed_hours":
			if err := func() error {
				s.ClosedHours.Reset()
				if err := s.ClosedHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"closed_hours\"")
			}
		case "holiday_hours":
			if err := func() error {
				s.HolidayHours.Reset()
				if err := s.HolidayHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holiday_hours\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteSettingReqAudioPromptMessageGreeting")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteSettingReqAudioPromptMessageGreeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteSettingReqAudioPromptMessageGreeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteSettingReqAudioPromptMessageGreetingBusinessHours) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteSettingReqAudioPromptMessageGreetingBusinessHours) encodeFields(e *jx.Encoder) {
	{
		if s.AudioID.Set {
			e.FieldStart("audio_id")
			s.AudioID.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteSettingReqAudioPromptMessageGreetingBusinessHours = [1]string{
	0: "audio_id",
}

// Decode decodes UpdateSiteSettingReqAudioPromptMessageGreetingBusinessHours from json.
func (s *UpdateSiteSettingReqAudioPromptMessageGreetingBusinessHours) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteSettingReqAudioPromptMessageGreetingBusinessHours to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_id":
			if err := func() error {
				s.AudioID.Reset()
				if err := s.AudioID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteSettingReqAudioPromptMessageGreetingBusinessHours")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteSettingReqAudioPromptMessageGreetingBusinessHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteSettingReqAudioPromptMessageGreetingBusinessHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteSettingReqAudioPromptMessageGreetingClosedHours) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteSettingReqAudioPromptMessageGreetingClosedHours) encodeFields(e *jx.Encoder) {
	{
		if s.AudioID.Set {
			e.FieldStart("audio_id")
			s.AudioID.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteSettingReqAudioPromptMessageGreetingClosedHours = [1]string{
	0: "audio_id",
}

// Decode decodes UpdateSiteSettingReqAudioPromptMessageGreetingClosedHours from json.
func (s *UpdateSiteSettingReqAudioPromptMessageGreetingClosedHours) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteSettingReqAudioPromptMessageGreetingClosedHours to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_id":
			if err := func() error {
				s.AudioID.Reset()
				if err := s.AudioID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteSettingReqAudioPromptMessageGreetingClosedHours")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteSettingReqAudioPromptMessageGreetingClosedHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteSettingReqAudioPromptMessageGreetingClosedHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteSettingReqAudioPromptMessageGreetingHolidayHours) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteSettingReqAudioPromptMessageGreetingHolidayHours) encodeFields(e *jx.Encoder) {
	{
		if s.AudioID.Set {
			e.FieldStart("audio_id")
			s.AudioID.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteSettingReqAudioPromptMessageGreetingHolidayHours = [1]string{
	0: "audio_id",
}

// Decode decodes UpdateSiteSettingReqAudioPromptMessageGreetingHolidayHours from json.
func (s *UpdateSiteSettingReqAudioPromptMessageGreetingHolidayHours) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteSettingReqAudioPromptMessageGreetingHolidayHours to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_id":
			if err := func() error {
				s.AudioID.Reset()
				if err := s.AudioID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteSettingReqAudioPromptMessageGreetingHolidayHours")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteSettingReqAudioPromptMessageGreetingHolidayHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteSettingReqAudioPromptMessageGreetingHolidayHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteSettingReqBillingAccount) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteSettingReqBillingAccount) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteSettingReqBillingAccount = [1]string{
	0: "id",
}

// Decode decodes UpdateSiteSettingReqBillingAccount from json.
func (s *UpdateSiteSettingReqBillingAccount) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteSettingReqBillingAccount to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteSettingReqBillingAccount")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteSettingReqBillingAccount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteSettingReqBillingAccount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteSettingReqBusinessHours) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteSettingReqBusinessHours) encodeFields(e *jx.Encoder) {
	{
		if s.CustomHourType.Set {
			e.FieldStart("custom_hour_type")
			s.CustomHourType.Encode(e)
		}
	}
	{
		if s.CustomHours != nil {
			e.FieldStart("custom_hours")
			e.ArrStart()
			for _, elem := range s.CustomHours {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Overflow.Set {
			e.FieldStart("overflow")
			s.Overflow.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteSettingReqBusinessHours = [3]string{
	0: "custom_hour_type",
	1: "custom_hours",
	2: "overflow",
}

// Decode decodes UpdateSiteSettingReqBusinessHours from json.
func (s *UpdateSiteSettingReqBusinessHours) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteSettingReqBusinessHours to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "custom_hour_type":
			if err := func() error {
				s.CustomHourType.Reset()
				if err := s.CustomHourType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"custom_hour_type\"")
			}
		case "custom_hours":
			if err := func() error {
				s.CustomHours = make([]UpdateSiteSettingReqBusinessHoursCustomHoursItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem UpdateSiteSettingReqBusinessHoursCustomHoursItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CustomHours = append(s.CustomHours, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"custom_hours\"")
			}
		case "overflow":
			if err := func() error {
				s.Overflow.Reset()
				if err := s.Overflow.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overflow\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteSettingReqBusinessHours")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteSettingReqBusinessHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteSettingReqBusinessHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteSettingReqBusinessHoursCustomHoursItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteSettingReqBusinessHoursCustomHoursItem) encodeFields(e *jx.Encoder) {
	{
		if s.From.Set {
			e.FieldStart("from")
			s.From.Encode(e)
		}
	}
	{
		if s.To.Set {
			e.FieldStart("to")
			s.To.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.Weekday.Set {
			e.FieldStart("weekday")
			s.Weekday.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteSettingReqBusinessHoursCustomHoursItem = [4]string{
	0: "from",
	1: "to",
	2: "type",
	3: "weekday",
}

// Decode decodes UpdateSiteSettingReqBusinessHoursCustomHoursItem from json.
func (s *UpdateSiteSettingReqBusinessHoursCustomHoursItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteSettingReqBusinessHoursCustomHoursItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "from":
			if err := func() error {
				s.From.Reset()
				if err := s.From.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"from\"")
			}
		case "to":
			if err := func() error {
				s.To.Reset()
				if err := s.To.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"to\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "weekday":
			if err := func() error {
				s.Weekday.Reset()
				if err := s.Weekday.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"weekday\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteSettingReqBusinessHoursCustomHoursItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteSettingReqBusinessHoursCustomHoursItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteSettingReqBusinessHoursCustomHoursItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteSettingReqBusinessHoursOverflow) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteSettingReqBusinessHoursOverflow) encodeFields(e *jx.Encoder) {
	{
		if s.AllowCallerToReachOperator.Set {
			e.FieldStart("allow_caller_to_reach_operator")
			s.AllowCallerToReachOperator.Encode(e)
		}
	}
	{
		if s.Operator.Set {
			e.FieldStart("operator")
			s.Operator.Encode(e)
		}
	}
	{
		if s.AllowCallerToCheckVoicemail.Set {
			e.FieldStart("allow_caller_to_check_voicemail")
			s.AllowCallerToCheckVoicemail.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteSettingReqBusinessHoursOverflow = [3]string{
	0: "allow_caller_to_reach_operator",
	1: "operator",
	2: "allow_caller_to_check_voicemail",
}

// Decode decodes UpdateSiteSettingReqBusinessHoursOverflow from json.
func (s *UpdateSiteSettingReqBusinessHoursOverflow) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteSettingReqBusinessHoursOverflow to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allow_caller_to_reach_operator":
			if err := func() error {
				s.AllowCallerToReachOperator.Reset()
				if err := s.AllowCallerToReachOperator.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_caller_to_reach_operator\"")
			}
		case "operator":
			if err := func() error {
				s.Operator.Reset()
				if err := s.Operator.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"operator\"")
			}
		case "allow_caller_to_check_voicemail":
			if err := func() error {
				s.AllowCallerToCheckVoicemail.Reset()
				if err := s.AllowCallerToCheckVoicemail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_caller_to_check_voicemail\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteSettingReqBusinessHoursOverflow")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteSettingReqBusinessHoursOverflow) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteSettingReqBusinessHoursOverflow) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteSettingReqBusinessHoursOverflowOperator) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteSettingReqBusinessHoursOverflowOperator) encodeFields(e *jx.Encoder) {
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteSettingReqBusinessHoursOverflowOperator = [1]string{
	0: "extension_id",
}

// Decode decodes UpdateSiteSettingReqBusinessHoursOverflowOperator from json.
func (s *UpdateSiteSettingReqBusinessHoursOverflowOperator) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteSettingReqBusinessHoursOverflowOperator to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteSettingReqBusinessHoursOverflowOperator")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteSettingReqBusinessHoursOverflowOperator) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteSettingReqBusinessHoursOverflowOperator) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteSettingReqClosedHours) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteSettingReqClosedHours) encodeFields(e *jx.Encoder) {
	{
		if s.Overflow.Set {
			e.FieldStart("overflow")
			s.Overflow.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteSettingReqClosedHours = [1]string{
	0: "overflow",
}

// Decode decodes UpdateSiteSettingReqClosedHours from json.
func (s *UpdateSiteSettingReqClosedHours) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteSettingReqClosedHours to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "overflow":
			if err := func() error {
				s.Overflow.Reset()
				if err := s.Overflow.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overflow\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteSettingReqClosedHours")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteSettingReqClosedHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteSettingReqClosedHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteSettingReqClosedHoursOverflow) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteSettingReqClosedHoursOverflow) encodeFields(e *jx.Encoder) {
	{
		if s.AllowCallerToReachOperator.Set {
			e.FieldStart("allow_caller_to_reach_operator")
			s.AllowCallerToReachOperator.Encode(e)
		}
	}
	{
		if s.Operator.Set {
			e.FieldStart("operator")
			s.Operator.Encode(e)
		}
	}
	{
		if s.AllowCallerToCheckVoicemail.Set {
			e.FieldStart("allow_caller_to_check_voicemail")
			s.AllowCallerToCheckVoicemail.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteSettingReqClosedHoursOverflow = [3]string{
	0: "allow_caller_to_reach_operator",
	1: "operator",
	2: "allow_caller_to_check_voicemail",
}

// Decode decodes UpdateSiteSettingReqClosedHoursOverflow from json.
func (s *UpdateSiteSettingReqClosedHoursOverflow) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteSettingReqClosedHoursOverflow to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allow_caller_to_reach_operator":
			if err := func() error {
				s.AllowCallerToReachOperator.Reset()
				if err := s.AllowCallerToReachOperator.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_caller_to_reach_operator\"")
			}
		case "operator":
			if err := func() error {
				s.Operator.Reset()
				if err := s.Operator.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"operator\"")
			}
		case "allow_caller_to_check_voicemail":
			if err := func() error {
				s.AllowCallerToCheckVoicemail.Reset()
				if err := s.AllowCallerToCheckVoicemail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_caller_to_check_voicemail\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteSettingReqClosedHoursOverflow")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteSettingReqClosedHoursOverflow) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteSettingReqClosedHoursOverflow) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteSettingReqClosedHoursOverflowOperator) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteSettingReqClosedHoursOverflowOperator) encodeFields(e *jx.Encoder) {
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteSettingReqClosedHoursOverflowOperator = [1]string{
	0: "extension_id",
}

// Decode decodes UpdateSiteSettingReqClosedHoursOverflowOperator from json.
func (s *UpdateSiteSettingReqClosedHoursOverflowOperator) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteSettingReqClosedHoursOverflowOperator to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteSettingReqClosedHoursOverflowOperator")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteSettingReqClosedHoursOverflowOperator) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteSettingReqClosedHoursOverflowOperator) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteSettingReqDialByName) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteSettingReqDialByName) encodeFields(e *jx.Encoder) {
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.Inherit.Set {
			e.FieldStart("inherit")
			s.Inherit.Encode(e)
		}
	}
	{
		if s.Rule.Set {
			e.FieldStart("rule")
			s.Rule.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteSettingReqDialByName = [3]string{
	0: "status",
	1: "inherit",
	2: "rule",
}

// Decode decodes UpdateSiteSettingReqDialByName from json.
func (s *UpdateSiteSettingReqDialByName) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteSettingReqDialByName to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "inherit":
			if err := func() error {
				s.Inherit.Reset()
				if err := s.Inherit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"inherit\"")
			}
		case "rule":
			if err := func() error {
				s.Rule.Reset()
				if err := s.Rule.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rule\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteSettingReqDialByName")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteSettingReqDialByName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteSettingReqDialByName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteSettingReqHolidayHours) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteSettingReqHolidayHours) encodeFields(e *jx.Encoder) {
	{
		if s.Holidays != nil {
			e.FieldStart("holidays")
			e.ArrStart()
			for _, elem := range s.Holidays {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Overflow.Set {
			e.FieldStart("overflow")
			s.Overflow.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteSettingReqHolidayHours = [2]string{
	0: "holidays",
	1: "overflow",
}

// Decode decodes UpdateSiteSettingReqHolidayHours from json.
func (s *UpdateSiteSettingReqHolidayHours) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteSettingReqHolidayHours to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "holidays":
			if err := func() error {
				s.Holidays = make([]UpdateSiteSettingReqHolidayHoursHolidaysItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem UpdateSiteSettingReqHolidayHoursHolidaysItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Holidays = append(s.Holidays, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holidays\"")
			}
		case "overflow":
			if err := func() error {
				s.Overflow.Reset()
				if err := s.Overflow.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overflow\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteSettingReqHolidayHours")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteSettingReqHolidayHours) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteSettingReqHolidayHours) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteSettingReqHolidayHoursHolidaysItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteSettingReqHolidayHoursHolidaysItem) encodeFields(e *jx.Encoder) {
	{
		if s.HolidayID.Set {
			e.FieldStart("holiday_id")
			s.HolidayID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.From.Set {
			e.FieldStart("from")
			s.From.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.To.Set {
			e.FieldStart("to")
			s.To.Encode(e, json.EncodeDateTime)
		}
	}
}

var jsonFieldsNameOfUpdateSiteSettingReqHolidayHoursHolidaysItem = [4]string{
	0: "holiday_id",
	1: "name",
	2: "from",
	3: "to",
}

// Decode decodes UpdateSiteSettingReqHolidayHoursHolidaysItem from json.
func (s *UpdateSiteSettingReqHolidayHoursHolidaysItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteSettingReqHolidayHoursHolidaysItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "holiday_id":
			if err := func() error {
				s.HolidayID.Reset()
				if err := s.HolidayID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holiday_id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "from":
			if err := func() error {
				s.From.Reset()
				if err := s.From.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"from\"")
			}
		case "to":
			if err := func() error {
				s.To.Reset()
				if err := s.To.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"to\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteSettingReqHolidayHoursHolidaysItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteSettingReqHolidayHoursHolidaysItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteSettingReqHolidayHoursHolidaysItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteSettingReqHolidayHoursOverflow) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteSettingReqHolidayHoursOverflow) encodeFields(e *jx.Encoder) {
	{
		if s.AllowCallerToReachOperator.Set {
			e.FieldStart("allow_caller_to_reach_operator")
			s.AllowCallerToReachOperator.Encode(e)
		}
	}
	{
		if s.Operator.Set {
			e.FieldStart("operator")
			s.Operator.Encode(e)
		}
	}
	{
		if s.AllowCallerToCheckVoicemail.Set {
			e.FieldStart("allow_caller_to_check_voicemail")
			s.AllowCallerToCheckVoicemail.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteSettingReqHolidayHoursOverflow = [3]string{
	0: "allow_caller_to_reach_operator",
	1: "operator",
	2: "allow_caller_to_check_voicemail",
}

// Decode decodes UpdateSiteSettingReqHolidayHoursOverflow from json.
func (s *UpdateSiteSettingReqHolidayHoursOverflow) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteSettingReqHolidayHoursOverflow to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allow_caller_to_reach_operator":
			if err := func() error {
				s.AllowCallerToReachOperator.Reset()
				if err := s.AllowCallerToReachOperator.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_caller_to_reach_operator\"")
			}
		case "operator":
			if err := func() error {
				s.Operator.Reset()
				if err := s.Operator.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"operator\"")
			}
		case "allow_caller_to_check_voicemail":
			if err := func() error {
				s.AllowCallerToCheckVoicemail.Reset()
				if err := s.AllowCallerToCheckVoicemail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_caller_to_check_voicemail\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteSettingReqHolidayHoursOverflow")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteSettingReqHolidayHoursOverflow) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteSettingReqHolidayHoursOverflow) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteSettingReqHolidayHoursOverflowOperator) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteSettingReqHolidayHoursOverflowOperator) encodeFields(e *jx.Encoder) {
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteSettingReqHolidayHoursOverflowOperator = [1]string{
	0: "extension_id",
}

// Decode decodes UpdateSiteSettingReqHolidayHoursOverflowOperator from json.
func (s *UpdateSiteSettingReqHolidayHoursOverflowOperator) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteSettingReqHolidayHoursOverflowOperator to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteSettingReqHolidayHoursOverflowOperator")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteSettingReqHolidayHoursOverflowOperator) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteSettingReqHolidayHoursOverflowOperator) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteSettingReqLocationBasedRouting) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteSettingReqLocationBasedRouting) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.PlaceReceivePstnCalls.Set {
			e.FieldStart("place_receive_pstn_calls")
			s.PlaceReceivePstnCalls.Encode(e)
		}
	}
	{
		if s.EnableMediaOffLoadPstnCalls.Set {
			e.FieldStart("enable_media_off_load_pstn_calls")
			s.EnableMediaOffLoadPstnCalls.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteSettingReqLocationBasedRouting = [3]string{
	0: "enable",
	1: "place_receive_pstn_calls",
	2: "enable_media_off_load_pstn_calls",
}

// Decode decodes UpdateSiteSettingReqLocationBasedRouting from json.
func (s *UpdateSiteSettingReqLocationBasedRouting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteSettingReqLocationBasedRouting to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "place_receive_pstn_calls":
			if err := func() error {
				s.PlaceReceivePstnCalls.Reset()
				if err := s.PlaceReceivePstnCalls.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"place_receive_pstn_calls\"")
			}
		case "enable_media_off_load_pstn_calls":
			if err := func() error {
				s.EnableMediaOffLoadPstnCalls.Reset()
				if err := s.EnableMediaOffLoadPstnCalls.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable_media_off_load_pstn_calls\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteSettingReqLocationBasedRouting")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteSettingReqLocationBasedRouting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteSettingReqLocationBasedRouting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateSiteSettingReqOutboundCallerID) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateSiteSettingReqOutboundCallerID) encodeFields(e *jx.Encoder) {
	{
		if s.AutoReceptionistsNumbers.Set {
			e.FieldStart("auto_receptionists_numbers")
			s.AutoReceptionistsNumbers.Encode(e)
		}
	}
	{
		if s.CallQueueNumbers.Set {
			e.FieldStart("call_queue_numbers")
			s.CallQueueNumbers.Encode(e)
		}
	}
	{
		if s.ShareLineGroupNumbers.Set {
			e.FieldStart("share_line_group_numbers")
			s.ShareLineGroupNumbers.Encode(e)
		}
	}
	{
		if s.ShowOutboundCallerIDForInternalCall.Set {
			e.FieldStart("show_outbound_caller_id_for_internal_call")
			s.ShowOutboundCallerIDForInternalCall.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateSiteSettingReqOutboundCallerID = [4]string{
	0: "auto_receptionists_numbers",
	1: "call_queue_numbers",
	2: "share_line_group_numbers",
	3: "show_outbound_caller_id_for_internal_call",
}

// Decode decodes UpdateSiteSettingReqOutboundCallerID from json.
func (s *UpdateSiteSettingReqOutboundCallerID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateSiteSettingReqOutboundCallerID to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "auto_receptionists_numbers":
			if err := func() error {
				s.AutoReceptionistsNumbers.Reset()
				if err := s.AutoReceptionistsNumbers.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_receptionists_numbers\"")
			}
		case "call_queue_numbers":
			if err := func() error {
				s.CallQueueNumbers.Reset()
				if err := s.CallQueueNumbers.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_queue_numbers\"")
			}
		case "share_line_group_numbers":
			if err := func() error {
				s.ShareLineGroupNumbers.Reset()
				if err := s.ShareLineGroupNumbers.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"share_line_group_numbers\"")
			}
		case "show_outbound_caller_id_for_internal_call":
			if err := func() error {
				s.ShowOutboundCallerIDForInternalCall.Reset()
				if err := s.ShowOutboundCallerIDForInternalCall.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"show_outbound_caller_id_for_internal_call\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateSiteSettingReqOutboundCallerID")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateSiteSettingReqOutboundCallerID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateSiteSettingReqOutboundCallerID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateUserOutboundCallingCountriesOrRegionsReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateUserOutboundCallingCountriesOrRegionsReq) encodeFields(e *jx.Encoder) {
	{
		if s.CountryRegions != nil {
			e.FieldStart("country_regions")
			e.ArrStart()
			for _, elem := range s.CountryRegions {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfUpdateUserOutboundCallingCountriesOrRegionsReq = [1]string{
	0: "country_regions",
}

// Decode decodes UpdateUserOutboundCallingCountriesOrRegionsReq from json.
func (s *UpdateUserOutboundCallingCountriesOrRegionsReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateUserOutboundCallingCountriesOrRegionsReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "country_regions":
			if err := func() error {
				s.CountryRegions = make([]UpdateUserOutboundCallingCountriesOrRegionsReqCountryRegionsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem UpdateUserOutboundCallingCountriesOrRegionsReqCountryRegionsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CountryRegions = append(s.CountryRegions, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country_regions\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateUserOutboundCallingCountriesOrRegionsReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateUserOutboundCallingCountriesOrRegionsReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateUserOutboundCallingCountriesOrRegionsReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateUserOutboundCallingCountriesOrRegionsReqCountryRegionsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateUserOutboundCallingCountriesOrRegionsReqCountryRegionsItem) encodeFields(e *jx.Encoder) {
	{
		if s.IsoCode.Set {
			e.FieldStart("iso_code")
			s.IsoCode.Encode(e)
		}
	}
	{
		if s.Rule.Set {
			e.FieldStart("rule")
			s.Rule.Encode(e)
		}
	}
	{
		if s.DeleteExistingExceptionRules.Set {
			e.FieldStart("delete_existing_exception_rules")
			s.DeleteExistingExceptionRules.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateUserOutboundCallingCountriesOrRegionsReqCountryRegionsItem = [3]string{
	0: "iso_code",
	1: "rule",
	2: "delete_existing_exception_rules",
}

// Decode decodes UpdateUserOutboundCallingCountriesOrRegionsReqCountryRegionsItem from json.
func (s *UpdateUserOutboundCallingCountriesOrRegionsReqCountryRegionsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateUserOutboundCallingCountriesOrRegionsReqCountryRegionsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "iso_code":
			if err := func() error {
				s.IsoCode.Reset()
				if err := s.IsoCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_code\"")
			}
		case "rule":
			if err := func() error {
				s.Rule.Reset()
				if err := s.Rule.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rule\"")
			}
		case "delete_existing_exception_rules":
			if err := func() error {
				s.DeleteExistingExceptionRules.Reset()
				if err := s.DeleteExistingExceptionRules.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delete_existing_exception_rules\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateUserOutboundCallingCountriesOrRegionsReqCountryRegionsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateUserOutboundCallingCountriesOrRegionsReqCountryRegionsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateUserOutboundCallingCountriesOrRegionsReqCountryRegionsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateUserOutboundCallingExceptionRuleReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateUserOutboundCallingExceptionRuleReq) encodeFields(e *jx.Encoder) {
	{
		if s.ExceptionRule.Set {
			e.FieldStart("exception_rule")
			s.ExceptionRule.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateUserOutboundCallingExceptionRuleReq = [1]string{
	0: "exception_rule",
}

// Decode decodes UpdateUserOutboundCallingExceptionRuleReq from json.
func (s *UpdateUserOutboundCallingExceptionRuleReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateUserOutboundCallingExceptionRuleReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "exception_rule":
			if err := func() error {
				s.ExceptionRule.Reset()
				if err := s.ExceptionRule.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exception_rule\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateUserOutboundCallingExceptionRuleReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateUserOutboundCallingExceptionRuleReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateUserOutboundCallingExceptionRuleReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateUserOutboundCallingExceptionRuleReqExceptionRule) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateUserOutboundCallingExceptionRuleReqExceptionRule) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("match_type")
		e.Str(s.MatchType)
	}
	{
		e.FieldStart("prefix_number")
		e.Str(s.PrefixNumber)
	}
	{
		if s.Comment.Set {
			e.FieldStart("comment")
			s.Comment.Encode(e)
		}
	}
	{
		e.FieldStart("status")
		e.Str(s.Status)
	}
	{
		e.FieldStart("country")
		e.Str(s.Country)
	}
}

var jsonFieldsNameOfUpdateUserOutboundCallingExceptionRuleReqExceptionRule = [5]string{
	0: "match_type",
	1: "prefix_number",
	2: "comment",
	3: "status",
	4: "country",
}

// Decode decodes UpdateUserOutboundCallingExceptionRuleReqExceptionRule from json.
func (s *UpdateUserOutboundCallingExceptionRuleReqExceptionRule) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateUserOutboundCallingExceptionRuleReqExceptionRule to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "match_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.MatchType = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"match_type\"")
			}
		case "prefix_number":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.PrefixNumber = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"prefix_number\"")
			}
		case "comment":
			if err := func() error {
				s.Comment.Reset()
				if err := s.Comment.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"comment\"")
			}
		case "status":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				v, err := d.Str()
				s.Status = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "country":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				v, err := d.Str()
				s.Country = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateUserOutboundCallingExceptionRuleReqExceptionRule")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00011011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfUpdateUserOutboundCallingExceptionRuleReqExceptionRule) {
					name = jsonFieldsNameOfUpdateUserOutboundCallingExceptionRuleReqExceptionRule[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateUserOutboundCallingExceptionRuleReqExceptionRule) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateUserOutboundCallingExceptionRuleReqExceptionRule) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateUserProfileReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateUserProfileReq) encodeFields(e *jx.Encoder) {
	{
		if s.EmergencyAddressID.Set {
			e.FieldStart("emergency_address_id")
			s.EmergencyAddressID.Encode(e)
		}
	}
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.Policy.Set {
			e.FieldStart("policy")
			s.Policy.Encode(e)
		}
	}
	{
		if s.SiteID.Set {
			e.FieldStart("site_id")
			s.SiteID.Encode(e)
		}
	}
	{
		if s.TemplateID.Set {
			e.FieldStart("template_id")
			s.TemplateID.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateUserProfileReq = [5]string{
	0: "emergency_address_id",
	1: "extension_number",
	2: "policy",
	3: "site_id",
	4: "template_id",
}

// Decode decodes UpdateUserProfileReq from json.
func (s *UpdateUserProfileReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateUserProfileReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "emergency_address_id":
			if err := func() error {
				s.EmergencyAddressID.Reset()
				if err := s.EmergencyAddressID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"emergency_address_id\"")
			}
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "policy":
			if err := func() error {
				s.Policy.Reset()
				if err := s.Policy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"policy\"")
			}
		case "site_id":
			if err := func() error {
				s.SiteID.Reset()
				if err := s.SiteID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_id\"")
			}
		case "template_id":
			if err := func() error {
				s.TemplateID.Reset()
				if err := s.TemplateID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"template_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateUserProfileReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateUserProfileReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateUserProfileReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateUserProfileReqPolicy) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateUserProfileReqPolicy) encodeFields(e *jx.Encoder) {
	{
		if s.AdHocCallRecording.Set {
			e.FieldStart("ad_hoc_call_recording")
			s.AdHocCallRecording.Encode(e)
		}
	}
	{
		if s.AutoCallRecording.Set {
			e.FieldStart("auto_call_recording")
			s.AutoCallRecording.Encode(e)
		}
	}
	{
		if s.CallOverflow.Set {
			e.FieldStart("call_overflow")
			s.CallOverflow.Encode(e)
		}
	}
	{
		if s.CallPark.Set {
			e.FieldStart("call_park")
			s.CallPark.Encode(e)
		}
	}
	{
		if s.CallTransferring.Set {
			e.FieldStart("call_transferring")
			s.CallTransferring.Encode(e)
		}
	}
	{
		if s.Delegation.Set {
			e.FieldStart("delegation")
			s.Delegation.Encode(e)
		}
	}
	{
		if s.ElevateToMeeting.Set {
			e.FieldStart("elevate_to_meeting")
			s.ElevateToMeeting.Encode(e)
		}
	}
	{
		if s.EmergencyAddressManagement.Set {
			e.FieldStart("emergency_address_management")
			s.EmergencyAddressManagement.Encode(e)
		}
	}
	{
		if s.EmergencyCallsToPsap.Set {
			e.FieldStart("emergency_calls_to_psap")
			s.EmergencyCallsToPsap.Encode(e)
		}
	}
	{
		if s.ForwardingToExternalNumbers.Set {
			e.FieldStart("forwarding_to_external_numbers")
			s.ForwardingToExternalNumbers.Encode(e)
		}
	}
	{
		if s.CallHandlingForwardingToOtherUsers.Set {
			e.FieldStart("call_handling_forwarding_to_other_users")
			s.CallHandlingForwardingToOtherUsers.Encode(e)
		}
	}
	{
		if s.HandOffToRoom.Set {
			e.FieldStart("hand_off_to_room")
			s.HandOffToRoom.Encode(e)
		}
	}
	{
		if s.InternationalCalling.Set {
			e.FieldStart("international_calling")
			s.InternationalCalling.Encode(e)
		}
	}
	{
		if s.MobileSwitchToCarrier.Set {
			e.FieldStart("mobile_switch_to_carrier")
			s.MobileSwitchToCarrier.Encode(e)
		}
	}
	{
		if s.SelectOutboundCallerID.Set {
			e.FieldStart("select_outbound_caller_id")
			s.SelectOutboundCallerID.Encode(e)
		}
	}
	{
		if s.SMS.Set {
			e.FieldStart("sms")
			s.SMS.Encode(e)
		}
	}
	{
		if s.Voicemail.Set {
			e.FieldStart("voicemail")
			s.Voicemail.Encode(e)
		}
	}
	{
		if s.VoicemailAccessMembers != nil {
			e.FieldStart("voicemail_access_members")
			e.ArrStart()
			for _, elem := range s.VoicemailAccessMembers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ZoomPhoneOnMobile.Set {
			e.FieldStart("zoom_phone_on_mobile")
			s.ZoomPhoneOnMobile.Encode(e)
		}
	}
	{
		if s.PersonalAudioLibrary.Set {
			e.FieldStart("personal_audio_library")
			s.PersonalAudioLibrary.Encode(e)
		}
	}
	{
		if s.VoicemailTranscription.Set {
			e.FieldStart("voicemail_transcription")
			s.VoicemailTranscription.Encode(e)
		}
	}
	{
		if s.VoicemailNotificationByEmail.Set {
			e.FieldStart("voicemail_notification_by_email")
			s.VoicemailNotificationByEmail.Encode(e)
		}
	}
	{
		if s.SharedVoicemailNotificationByEmail.Set {
			e.FieldStart("shared_voicemail_notification_by_email")
			s.SharedVoicemailNotificationByEmail.Encode(e)
		}
	}
	{
		if s.CheckVoicemailsOverPhone.Set {
			e.FieldStart("check_voicemails_over_phone")
			s.CheckVoicemailsOverPhone.Encode(e)
		}
	}
	{
		if s.AudioIntercom.Set {
			e.FieldStart("audio_intercom")
			s.AudioIntercom.Encode(e)
		}
	}
	{
		if s.E2eEncryption.Set {
			e.FieldStart("e2e_encryption")
			s.E2eEncryption.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateUserProfileReqPolicy = [26]string{
	0:  "ad_hoc_call_recording",
	1:  "auto_call_recording",
	2:  "call_overflow",
	3:  "call_park",
	4:  "call_transferring",
	5:  "delegation",
	6:  "elevate_to_meeting",
	7:  "emergency_address_management",
	8:  "emergency_calls_to_psap",
	9:  "forwarding_to_external_numbers",
	10: "call_handling_forwarding_to_other_users",
	11: "hand_off_to_room",
	12: "international_calling",
	13: "mobile_switch_to_carrier",
	14: "select_outbound_caller_id",
	15: "sms",
	16: "voicemail",
	17: "voicemail_access_members",
	18: "zoom_phone_on_mobile",
	19: "personal_audio_library",
	20: "voicemail_transcription",
	21: "voicemail_notification_by_email",
	22: "shared_voicemail_notification_by_email",
	23: "check_voicemails_over_phone",
	24: "audio_intercom",
	25: "e2e_encryption",
}

// Decode decodes UpdateUserProfileReqPolicy from json.
func (s *UpdateUserProfileReqPolicy) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateUserProfileReqPolicy to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "ad_hoc_call_recording":
			if err := func() error {
				s.AdHocCallRecording.Reset()
				if err := s.AdHocCallRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ad_hoc_call_recording\"")
			}
		case "auto_call_recording":
			if err := func() error {
				s.AutoCallRecording.Reset()
				if err := s.AutoCallRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_call_recording\"")
			}
		case "call_overflow":
			if err := func() error {
				s.CallOverflow.Reset()
				if err := s.CallOverflow.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_overflow\"")
			}
		case "call_park":
			if err := func() error {
				s.CallPark.Reset()
				if err := s.CallPark.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_park\"")
			}
		case "call_transferring":
			if err := func() error {
				s.CallTransferring.Reset()
				if err := s.CallTransferring.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_transferring\"")
			}
		case "delegation":
			if err := func() error {
				s.Delegation.Reset()
				if err := s.Delegation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delegation\"")
			}
		case "elevate_to_meeting":
			if err := func() error {
				s.ElevateToMeeting.Reset()
				if err := s.ElevateToMeeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"elevate_to_meeting\"")
			}
		case "emergency_address_management":
			if err := func() error {
				s.EmergencyAddressManagement.Reset()
				if err := s.EmergencyAddressManagement.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"emergency_address_management\"")
			}
		case "emergency_calls_to_psap":
			if err := func() error {
				s.EmergencyCallsToPsap.Reset()
				if err := s.EmergencyCallsToPsap.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"emergency_calls_to_psap\"")
			}
		case "forwarding_to_external_numbers":
			if err := func() error {
				s.ForwardingToExternalNumbers.Reset()
				if err := s.ForwardingToExternalNumbers.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forwarding_to_external_numbers\"")
			}
		case "call_handling_forwarding_to_other_users":
			if err := func() error {
				s.CallHandlingForwardingToOtherUsers.Reset()
				if err := s.CallHandlingForwardingToOtherUsers.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_handling_forwarding_to_other_users\"")
			}
		case "hand_off_to_room":
			if err := func() error {
				s.HandOffToRoom.Reset()
				if err := s.HandOffToRoom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hand_off_to_room\"")
			}
		case "international_calling":
			if err := func() error {
				s.InternationalCalling.Reset()
				if err := s.InternationalCalling.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"international_calling\"")
			}
		case "mobile_switch_to_carrier":
			if err := func() error {
				s.MobileSwitchToCarrier.Reset()
				if err := s.MobileSwitchToCarrier.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mobile_switch_to_carrier\"")
			}
		case "select_outbound_caller_id":
			if err := func() error {
				s.SelectOutboundCallerID.Reset()
				if err := s.SelectOutboundCallerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"select_outbound_caller_id\"")
			}
		case "sms":
			if err := func() error {
				s.SMS.Reset()
				if err := s.SMS.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sms\"")
			}
		case "voicemail":
			if err := func() error {
				s.Voicemail.Reset()
				if err := s.Voicemail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voicemail\"")
			}
		case "voicemail_access_members":
			if err := func() error {
				s.VoicemailAccessMembers = make([]UpdateUserProfileReqPolicyVoicemailAccessMembersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem UpdateUserProfileReqPolicyVoicemailAccessMembersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.VoicemailAccessMembers = append(s.VoicemailAccessMembers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voicemail_access_members\"")
			}
		case "zoom_phone_on_mobile":
			if err := func() error {
				s.ZoomPhoneOnMobile.Reset()
				if err := s.ZoomPhoneOnMobile.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_phone_on_mobile\"")
			}
		case "personal_audio_library":
			if err := func() error {
				s.PersonalAudioLibrary.Reset()
				if err := s.PersonalAudioLibrary.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"personal_audio_library\"")
			}
		case "voicemail_transcription":
			if err := func() error {
				s.VoicemailTranscription.Reset()
				if err := s.VoicemailTranscription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voicemail_transcription\"")
			}
		case "voicemail_notification_by_email":
			if err := func() error {
				s.VoicemailNotificationByEmail.Reset()
				if err := s.VoicemailNotificationByEmail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voicemail_notification_by_email\"")
			}
		case "shared_voicemail_notification_by_email":
			if err := func() error {
				s.SharedVoicemailNotificationByEmail.Reset()
				if err := s.SharedVoicemailNotificationByEmail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shared_voicemail_notification_by_email\"")
			}
		case "check_voicemails_over_phone":
			if err := func() error {
				s.CheckVoicemailsOverPhone.Reset()
				if err := s.CheckVoicemailsOverPhone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"check_voicemails_over_phone\"")
			}
		case "audio_intercom":
			if err := func() error {
				s.AudioIntercom.Reset()
				if err := s.AudioIntercom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_intercom\"")
			}
		case "e2e_encryption":
			if err := func() error {
				s.E2eEncryption.Reset()
				if err := s.E2eEncryption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"e2e_encryption\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateUserProfileReqPolicy")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateUserProfileReqPolicy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateUserProfileReqPolicy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateUserProfileReqPolicyAdHocCallRecording) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateUserProfileReqPolicyAdHocCallRecording) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.RecordingStartPrompt.Set {
			e.FieldStart("recording_start_prompt")
			s.RecordingStartPrompt.Encode(e)
		}
	}
	{
		if s.RecordingTranscription.Set {
			e.FieldStart("recording_transcription")
			s.RecordingTranscription.Encode(e)
		}
	}
	{
		if s.Reset.Set {
			e.FieldStart("reset")
			s.Reset.Encode(e)
		}
	}
	{
		if s.PlayRecordingBeepTone.Set {
			e.FieldStart("play_recording_beep_tone")
			s.PlayRecordingBeepTone.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateUserProfileReqPolicyAdHocCallRecording = [5]string{
	0: "enable",
	1: "recording_start_prompt",
	2: "recording_transcription",
	3: "reset",
	4: "play_recording_beep_tone",
}

// Decode decodes UpdateUserProfileReqPolicyAdHocCallRecording from json.
func (s *UpdateUserProfileReqPolicyAdHocCallRecording) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateUserProfileReqPolicyAdHocCallRecording to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "recording_start_prompt":
			if err := func() error {
				s.RecordingStartPrompt.Reset()
				if err := s.RecordingStartPrompt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_start_prompt\"")
			}
		case "recording_transcription":
			if err := func() error {
				s.RecordingTranscription.Reset()
				if err := s.RecordingTranscription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_transcription\"")
			}
		case "reset":
			if err := func() error {
				s.Reset.Reset()
				if err := s.Reset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reset\"")
			}
		case "play_recording_beep_tone":
			if err := func() error {
				s.PlayRecordingBeepTone.Reset()
				if err := s.PlayRecordingBeepTone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_recording_beep_tone\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateUserProfileReqPolicyAdHocCallRecording")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateUserProfileReqPolicyAdHocCallRecording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateUserProfileReqPolicyAdHocCallRecording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateUserProfileReqPolicyAdHocCallRecordingPlayRecordingBeepTone) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateUserProfileReqPolicyAdHocCallRecordingPlayRecordingBeepTone) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.PlayBeepVolume.Set {
			e.FieldStart("play_beep_volume")
			s.PlayBeepVolume.Encode(e)
		}
	}
	{
		if s.PlayBeepTimeInterval.Set {
			e.FieldStart("play_beep_time_interval")
			s.PlayBeepTimeInterval.Encode(e)
		}
	}
	{
		if s.PlayBeepMember.Set {
			e.FieldStart("play_beep_member")
			s.PlayBeepMember.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateUserProfileReqPolicyAdHocCallRecordingPlayRecordingBeepTone = [4]string{
	0: "enable",
	1: "play_beep_volume",
	2: "play_beep_time_interval",
	3: "play_beep_member",
}

// Decode decodes UpdateUserProfileReqPolicyAdHocCallRecordingPlayRecordingBeepTone from json.
func (s *UpdateUserProfileReqPolicyAdHocCallRecordingPlayRecordingBeepTone) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateUserProfileReqPolicyAdHocCallRecordingPlayRecordingBeepTone to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "play_beep_volume":
			if err := func() error {
				s.PlayBeepVolume.Reset()
				if err := s.PlayBeepVolume.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_beep_volume\"")
			}
		case "play_beep_time_interval":
			if err := func() error {
				s.PlayBeepTimeInterval.Reset()
				if err := s.PlayBeepTimeInterval.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_beep_time_interval\"")
			}
		case "play_beep_member":
			if err := func() error {
				s.PlayBeepMember.Reset()
				if err := s.PlayBeepMember.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_beep_member\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateUserProfileReqPolicyAdHocCallRecordingPlayRecordingBeepTone")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateUserProfileReqPolicyAdHocCallRecordingPlayRecordingBeepTone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateUserProfileReqPolicyAdHocCallRecordingPlayRecordingBeepTone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateUserProfileReqPolicyAudioIntercom) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateUserProfileReqPolicyAudioIntercom) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Reset.Set {
			e.FieldStart("reset")
			s.Reset.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateUserProfileReqPolicyAudioIntercom = [2]string{
	0: "enable",
	1: "reset",
}

// Decode decodes UpdateUserProfileReqPolicyAudioIntercom from json.
func (s *UpdateUserProfileReqPolicyAudioIntercom) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateUserProfileReqPolicyAudioIntercom to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "reset":
			if err := func() error {
				s.Reset.Reset()
				if err := s.Reset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reset\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateUserProfileReqPolicyAudioIntercom")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateUserProfileReqPolicyAudioIntercom) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateUserProfileReqPolicyAudioIntercom) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateUserProfileReqPolicyAutoCallRecording) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateUserProfileReqPolicyAutoCallRecording) encodeFields(e *jx.Encoder) {
	{
		if s.AllowStopResumeRecording.Set {
			e.FieldStart("allow_stop_resume_recording")
			s.AllowStopResumeRecording.Encode(e)
		}
	}
	{
		if s.DisconnectOnRecordingFailure.Set {
			e.FieldStart("disconnect_on_recording_failure")
			s.DisconnectOnRecordingFailure.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.RecordingCalls.Set {
			e.FieldStart("recording_calls")
			s.RecordingCalls.Encode(e)
		}
	}
	{
		if s.RecordingExplicitConsent.Set {
			e.FieldStart("recording_explicit_consent")
			s.RecordingExplicitConsent.Encode(e)
		}
	}
	{
		if s.RecordingStartPrompt.Set {
			e.FieldStart("recording_start_prompt")
			s.RecordingStartPrompt.Encode(e)
		}
	}
	{
		if s.RecordingTranscription.Set {
			e.FieldStart("recording_transcription")
			s.RecordingTranscription.Encode(e)
		}
	}
	{
		if s.PlayRecordingBeepTone.Set {
			e.FieldStart("play_recording_beep_tone")
			s.PlayRecordingBeepTone.Encode(e)
		}
	}
	{
		if s.Reset.Set {
			e.FieldStart("reset")
			s.Reset.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateUserProfileReqPolicyAutoCallRecording = [9]string{
	0: "allow_stop_resume_recording",
	1: "disconnect_on_recording_failure",
	2: "enable",
	3: "recording_calls",
	4: "recording_explicit_consent",
	5: "recording_start_prompt",
	6: "recording_transcription",
	7: "play_recording_beep_tone",
	8: "reset",
}

// Decode decodes UpdateUserProfileReqPolicyAutoCallRecording from json.
func (s *UpdateUserProfileReqPolicyAutoCallRecording) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateUserProfileReqPolicyAutoCallRecording to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allow_stop_resume_recording":
			if err := func() error {
				s.AllowStopResumeRecording.Reset()
				if err := s.AllowStopResumeRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_stop_resume_recording\"")
			}
		case "disconnect_on_recording_failure":
			if err := func() error {
				s.DisconnectOnRecordingFailure.Reset()
				if err := s.DisconnectOnRecordingFailure.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"disconnect_on_recording_failure\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "recording_calls":
			if err := func() error {
				s.RecordingCalls.Reset()
				if err := s.RecordingCalls.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_calls\"")
			}
		case "recording_explicit_consent":
			if err := func() error {
				s.RecordingExplicitConsent.Reset()
				if err := s.RecordingExplicitConsent.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_explicit_consent\"")
			}
		case "recording_start_prompt":
			if err := func() error {
				s.RecordingStartPrompt.Reset()
				if err := s.RecordingStartPrompt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_start_prompt\"")
			}
		case "recording_transcription":
			if err := func() error {
				s.RecordingTranscription.Reset()
				if err := s.RecordingTranscription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_transcription\"")
			}
		case "play_recording_beep_tone":
			if err := func() error {
				s.PlayRecordingBeepTone.Reset()
				if err := s.PlayRecordingBeepTone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_recording_beep_tone\"")
			}
		case "reset":
			if err := func() error {
				s.Reset.Reset()
				if err := s.Reset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reset\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateUserProfileReqPolicyAutoCallRecording")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateUserProfileReqPolicyAutoCallRecording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateUserProfileReqPolicyAutoCallRecording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateUserProfileReqPolicyAutoCallRecordingPlayRecordingBeepTone) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateUserProfileReqPolicyAutoCallRecordingPlayRecordingBeepTone) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.PlayBeepVolume.Set {
			e.FieldStart("play_beep_volume")
			s.PlayBeepVolume.Encode(e)
		}
	}
	{
		if s.PlayBeepTimeInterval.Set {
			e.FieldStart("play_beep_time_interval")
			s.PlayBeepTimeInterval.Encode(e)
		}
	}
	{
		if s.PlayBeepMember.Set {
			e.FieldStart("play_beep_member")
			s.PlayBeepMember.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateUserProfileReqPolicyAutoCallRecordingPlayRecordingBeepTone = [4]string{
	0: "enable",
	1: "play_beep_volume",
	2: "play_beep_time_interval",
	3: "play_beep_member",
}

// Decode decodes UpdateUserProfileReqPolicyAutoCallRecordingPlayRecordingBeepTone from json.
func (s *UpdateUserProfileReqPolicyAutoCallRecordingPlayRecordingBeepTone) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateUserProfileReqPolicyAutoCallRecordingPlayRecordingBeepTone to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "play_beep_volume":
			if err := func() error {
				s.PlayBeepVolume.Reset()
				if err := s.PlayBeepVolume.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_beep_volume\"")
			}
		case "play_beep_time_interval":
			if err := func() error {
				s.PlayBeepTimeInterval.Reset()
				if err := s.PlayBeepTimeInterval.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_beep_time_interval\"")
			}
		case "play_beep_member":
			if err := func() error {
				s.PlayBeepMember.Reset()
				if err := s.PlayBeepMember.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_beep_member\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateUserProfileReqPolicyAutoCallRecordingPlayRecordingBeepTone")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateUserProfileReqPolicyAutoCallRecordingPlayRecordingBeepTone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateUserProfileReqPolicyAutoCallRecordingPlayRecordingBeepTone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateUserProfileReqPolicyCallHandlingForwardingToOtherUsers) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateUserProfileReqPolicyCallHandlingForwardingToOtherUsers) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.CallForwardingType.Set {
			e.FieldStart("call_forwarding_type")
			s.CallForwardingType.Encode(e)
		}
	}
	{
		if s.Reset.Set {
			e.FieldStart("reset")
			s.Reset.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateUserProfileReqPolicyCallHandlingForwardingToOtherUsers = [3]string{
	0: "enable",
	1: "call_forwarding_type",
	2: "reset",
}

// Decode decodes UpdateUserProfileReqPolicyCallHandlingForwardingToOtherUsers from json.
func (s *UpdateUserProfileReqPolicyCallHandlingForwardingToOtherUsers) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateUserProfileReqPolicyCallHandlingForwardingToOtherUsers to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "call_forwarding_type":
			if err := func() error {
				s.CallForwardingType.Reset()
				if err := s.CallForwardingType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_forwarding_type\"")
			}
		case "reset":
			if err := func() error {
				s.Reset.Reset()
				if err := s.Reset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reset\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateUserProfileReqPolicyCallHandlingForwardingToOtherUsers")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateUserProfileReqPolicyCallHandlingForwardingToOtherUsers) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateUserProfileReqPolicyCallHandlingForwardingToOtherUsers) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateUserProfileReqPolicyCallOverflow) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateUserProfileReqPolicyCallOverflow) encodeFields(e *jx.Encoder) {
	{
		if s.CallOverflowType.Set {
			e.FieldStart("call_overflow_type")
			s.CallOverflowType.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Reset.Set {
			e.FieldStart("reset")
			s.Reset.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateUserProfileReqPolicyCallOverflow = [3]string{
	0: "call_overflow_type",
	1: "enable",
	2: "reset",
}

// Decode decodes UpdateUserProfileReqPolicyCallOverflow from json.
func (s *UpdateUserProfileReqPolicyCallOverflow) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateUserProfileReqPolicyCallOverflow to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "call_overflow_type":
			if err := func() error {
				s.CallOverflowType.Reset()
				if err := s.CallOverflowType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_overflow_type\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "reset":
			if err := func() error {
				s.Reset.Reset()
				if err := s.Reset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reset\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateUserProfileReqPolicyCallOverflow")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateUserProfileReqPolicyCallOverflow) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateUserProfileReqPolicyCallOverflow) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateUserProfileReqPolicyCallPark) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateUserProfileReqPolicyCallPark) encodeFields(e *jx.Encoder) {
	{
		if s.CallNotPickedUpAction.Set {
			e.FieldStart("call_not_picked_up_action")
			s.CallNotPickedUpAction.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.ExpirationPeriod.Set {
			e.FieldStart("expiration_period")
			s.ExpirationPeriod.Encode(e)
		}
	}
	{
		if s.ForwardToExtensionID.Set {
			e.FieldStart("forward_to_extension_id")
			s.ForwardToExtensionID.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateUserProfileReqPolicyCallPark = [4]string{
	0: "call_not_picked_up_action",
	1: "enable",
	2: "expiration_period",
	3: "forward_to_extension_id",
}

// Decode decodes UpdateUserProfileReqPolicyCallPark from json.
func (s *UpdateUserProfileReqPolicyCallPark) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateUserProfileReqPolicyCallPark to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "call_not_picked_up_action":
			if err := func() error {
				s.CallNotPickedUpAction.Reset()
				if err := s.CallNotPickedUpAction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_not_picked_up_action\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "expiration_period":
			if err := func() error {
				s.ExpirationPeriod.Reset()
				if err := s.ExpirationPeriod.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expiration_period\"")
			}
		case "forward_to_extension_id":
			if err := func() error {
				s.ForwardToExtensionID.Reset()
				if err := s.ForwardToExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward_to_extension_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateUserProfileReqPolicyCallPark")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateUserProfileReqPolicyCallPark) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateUserProfileReqPolicyCallPark) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateUserProfileReqPolicyCallTransferring) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateUserProfileReqPolicyCallTransferring) encodeFields(e *jx.Encoder) {
	{
		if s.CallTransferringType.Set {
			e.FieldStart("call_transferring_type")
			s.CallTransferringType.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Reset.Set {
			e.FieldStart("reset")
			s.Reset.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateUserProfileReqPolicyCallTransferring = [3]string{
	0: "call_transferring_type",
	1: "enable",
	2: "reset",
}

// Decode decodes UpdateUserProfileReqPolicyCallTransferring from json.
func (s *UpdateUserProfileReqPolicyCallTransferring) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateUserProfileReqPolicyCallTransferring to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "call_transferring_type":
			if err := func() error {
				s.CallTransferringType.Reset()
				if err := s.CallTransferringType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_transferring_type\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "reset":
			if err := func() error {
				s.Reset.Reset()
				if err := s.Reset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reset\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateUserProfileReqPolicyCallTransferring")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateUserProfileReqPolicyCallTransferring) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateUserProfileReqPolicyCallTransferring) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateUserProfileReqPolicyCheckVoicemailsOverPhone) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateUserProfileReqPolicyCheckVoicemailsOverPhone) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Reset.Set {
			e.FieldStart("reset")
			s.Reset.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateUserProfileReqPolicyCheckVoicemailsOverPhone = [2]string{
	0: "enable",
	1: "reset",
}

// Decode decodes UpdateUserProfileReqPolicyCheckVoicemailsOverPhone from json.
func (s *UpdateUserProfileReqPolicyCheckVoicemailsOverPhone) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateUserProfileReqPolicyCheckVoicemailsOverPhone to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "reset":
			if err := func() error {
				s.Reset.Reset()
				if err := s.Reset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reset\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateUserProfileReqPolicyCheckVoicemailsOverPhone")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateUserProfileReqPolicyCheckVoicemailsOverPhone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateUserProfileReqPolicyCheckVoicemailsOverPhone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateUserProfileReqPolicyE2eEncryption) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateUserProfileReqPolicyE2eEncryption) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Reset.Set {
			e.FieldStart("reset")
			s.Reset.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateUserProfileReqPolicyE2eEncryption = [2]string{
	0: "enable",
	1: "reset",
}

// Decode decodes UpdateUserProfileReqPolicyE2eEncryption from json.
func (s *UpdateUserProfileReqPolicyE2eEncryption) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateUserProfileReqPolicyE2eEncryption to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "reset":
			if err := func() error {
				s.Reset.Reset()
				if err := s.Reset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reset\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateUserProfileReqPolicyE2eEncryption")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateUserProfileReqPolicyE2eEncryption) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateUserProfileReqPolicyE2eEncryption) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateUserProfileReqPolicyEmergencyAddressManagement) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateUserProfileReqPolicyEmergencyAddressManagement) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.PromptDefaultAddress.Set {
			e.FieldStart("prompt_default_address")
			s.PromptDefaultAddress.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateUserProfileReqPolicyEmergencyAddressManagement = [2]string{
	0: "enable",
	1: "prompt_default_address",
}

// Decode decodes UpdateUserProfileReqPolicyEmergencyAddressManagement from json.
func (s *UpdateUserProfileReqPolicyEmergencyAddressManagement) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateUserProfileReqPolicyEmergencyAddressManagement to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "prompt_default_address":
			if err := func() error {
				s.PromptDefaultAddress.Reset()
				if err := s.PromptDefaultAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"prompt_default_address\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateUserProfileReqPolicyEmergencyAddressManagement")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateUserProfileReqPolicyEmergencyAddressManagement) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateUserProfileReqPolicyEmergencyAddressManagement) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateUserProfileReqPolicyHandOffToRoom) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateUserProfileReqPolicyHandOffToRoom) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateUserProfileReqPolicyHandOffToRoom = [1]string{
	0: "enable",
}

// Decode decodes UpdateUserProfileReqPolicyHandOffToRoom from json.
func (s *UpdateUserProfileReqPolicyHandOffToRoom) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateUserProfileReqPolicyHandOffToRoom to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateUserProfileReqPolicyHandOffToRoom")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateUserProfileReqPolicyHandOffToRoom) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateUserProfileReqPolicyHandOffToRoom) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateUserProfileReqPolicyMobileSwitchToCarrier) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateUserProfileReqPolicyMobileSwitchToCarrier) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateUserProfileReqPolicyMobileSwitchToCarrier = [1]string{
	0: "enable",
}

// Decode decodes UpdateUserProfileReqPolicyMobileSwitchToCarrier from json.
func (s *UpdateUserProfileReqPolicyMobileSwitchToCarrier) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateUserProfileReqPolicyMobileSwitchToCarrier to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateUserProfileReqPolicyMobileSwitchToCarrier")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateUserProfileReqPolicyMobileSwitchToCarrier) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateUserProfileReqPolicyMobileSwitchToCarrier) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateUserProfileReqPolicyPersonalAudioLibrary) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateUserProfileReqPolicyPersonalAudioLibrary) encodeFields(e *jx.Encoder) {
	{
		if s.AllowMusicOnHoldCustomization.Set {
			e.FieldStart("allow_music_on_hold_customization")
			s.AllowMusicOnHoldCustomization.Encode(e)
		}
	}
	{
		if s.AllowVoicemailAndMessageGreetingCustomization.Set {
			e.FieldStart("allow_voicemail_and_message_greeting_customization")
			s.AllowVoicemailAndMessageGreetingCustomization.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Reset.Set {
			e.FieldStart("reset")
			s.Reset.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateUserProfileReqPolicyPersonalAudioLibrary = [4]string{
	0: "allow_music_on_hold_customization",
	1: "allow_voicemail_and_message_greeting_customization",
	2: "enable",
	3: "reset",
}

// Decode decodes UpdateUserProfileReqPolicyPersonalAudioLibrary from json.
func (s *UpdateUserProfileReqPolicyPersonalAudioLibrary) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateUserProfileReqPolicyPersonalAudioLibrary to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allow_music_on_hold_customization":
			if err := func() error {
				s.AllowMusicOnHoldCustomization.Reset()
				if err := s.AllowMusicOnHoldCustomization.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_music_on_hold_customization\"")
			}
		case "allow_voicemail_and_message_greeting_customization":
			if err := func() error {
				s.AllowVoicemailAndMessageGreetingCustomization.Reset()
				if err := s.AllowVoicemailAndMessageGreetingCustomization.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_voicemail_and_message_greeting_customization\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "reset":
			if err := func() error {
				s.Reset.Reset()
				if err := s.Reset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reset\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateUserProfileReqPolicyPersonalAudioLibrary")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateUserProfileReqPolicyPersonalAudioLibrary) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateUserProfileReqPolicyPersonalAudioLibrary) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateUserProfileReqPolicySMS) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateUserProfileReqPolicySMS) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.InternationalSMS.Set {
			e.FieldStart("international_sms")
			s.InternationalSMS.Encode(e)
		}
	}
	{
		if s.InternationalSMSCountries != nil {
			e.FieldStart("international_sms_countries")
			e.ArrStart()
			for _, elem := range s.InternationalSMSCountries {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfUpdateUserProfileReqPolicySMS = [3]string{
	0: "enable",
	1: "international_sms",
	2: "international_sms_countries",
}

// Decode decodes UpdateUserProfileReqPolicySMS from json.
func (s *UpdateUserProfileReqPolicySMS) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateUserProfileReqPolicySMS to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "international_sms":
			if err := func() error {
				s.InternationalSMS.Reset()
				if err := s.InternationalSMS.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"international_sms\"")
			}
		case "international_sms_countries":
			if err := func() error {
				s.InternationalSMSCountries = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.InternationalSMSCountries = append(s.InternationalSMSCountries, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"international_sms_countries\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateUserProfileReqPolicySMS")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateUserProfileReqPolicySMS) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateUserProfileReqPolicySMS) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateUserProfileReqPolicySelectOutboundCallerID) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateUserProfileReqPolicySelectOutboundCallerID) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.AllowHideOutboundCallerID.Set {
			e.FieldStart("allow_hide_outbound_caller_id")
			s.AllowHideOutboundCallerID.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateUserProfileReqPolicySelectOutboundCallerID = [2]string{
	0: "enable",
	1: "allow_hide_outbound_caller_id",
}

// Decode decodes UpdateUserProfileReqPolicySelectOutboundCallerID from json.
func (s *UpdateUserProfileReqPolicySelectOutboundCallerID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateUserProfileReqPolicySelectOutboundCallerID to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "allow_hide_outbound_caller_id":
			if err := func() error {
				s.AllowHideOutboundCallerID.Reset()
				if err := s.AllowHideOutboundCallerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_hide_outbound_caller_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateUserProfileReqPolicySelectOutboundCallerID")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateUserProfileReqPolicySelectOutboundCallerID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateUserProfileReqPolicySelectOutboundCallerID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateUserProfileReqPolicySharedVoicemailNotificationByEmail) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateUserProfileReqPolicySharedVoicemailNotificationByEmail) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Reset.Set {
			e.FieldStart("reset")
			s.Reset.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateUserProfileReqPolicySharedVoicemailNotificationByEmail = [2]string{
	0: "enable",
	1: "reset",
}

// Decode decodes UpdateUserProfileReqPolicySharedVoicemailNotificationByEmail from json.
func (s *UpdateUserProfileReqPolicySharedVoicemailNotificationByEmail) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateUserProfileReqPolicySharedVoicemailNotificationByEmail to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "reset":
			if err := func() error {
				s.Reset.Reset()
				if err := s.Reset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reset\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateUserProfileReqPolicySharedVoicemailNotificationByEmail")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateUserProfileReqPolicySharedVoicemailNotificationByEmail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateUserProfileReqPolicySharedVoicemailNotificationByEmail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateUserProfileReqPolicyVoicemail) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateUserProfileReqPolicyVoicemail) encodeFields(e *jx.Encoder) {
	{
		if s.AllowDelete.Set {
			e.FieldStart("allow_delete")
			s.AllowDelete.Encode(e)
		}
	}
	{
		if s.AllowDownload.Set {
			e.FieldStart("allow_download")
			s.AllowDownload.Encode(e)
		}
	}
	{
		if s.AllowTranscription.Set {
			e.FieldStart("allow_transcription")
			s.AllowTranscription.Encode(e)
		}
	}
	{
		if s.AllowVideomail.Set {
			e.FieldStart("allow_videomail")
			s.AllowVideomail.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateUserProfileReqPolicyVoicemail = [5]string{
	0: "allow_delete",
	1: "allow_download",
	2: "allow_transcription",
	3: "allow_videomail",
	4: "enable",
}

// Decode decodes UpdateUserProfileReqPolicyVoicemail from json.
func (s *UpdateUserProfileReqPolicyVoicemail) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateUserProfileReqPolicyVoicemail to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allow_delete":
			if err := func() error {
				s.AllowDelete.Reset()
				if err := s.AllowDelete.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_delete\"")
			}
		case "allow_download":
			if err := func() error {
				s.AllowDownload.Reset()
				if err := s.AllowDownload.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_download\"")
			}
		case "allow_transcription":
			if err := func() error {
				s.AllowTranscription.Reset()
				if err := s.AllowTranscription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_transcription\"")
			}
		case "allow_videomail":
			if err := func() error {
				s.AllowVideomail.Reset()
				if err := s.AllowVideomail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_videomail\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateUserProfileReqPolicyVoicemail")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateUserProfileReqPolicyVoicemail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateUserProfileReqPolicyVoicemail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateUserProfileReqPolicyVoicemailAccessMembersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateUserProfileReqPolicyVoicemailAccessMembersItem) encodeFields(e *jx.Encoder) {
	{
		if s.AccessUserID.Set {
			e.FieldStart("access_user_id")
			s.AccessUserID.Encode(e)
		}
	}
	{
		if s.AllowDelete.Set {
			e.FieldStart("allow_delete")
			s.AllowDelete.Encode(e)
		}
	}
	{
		if s.AllowDownload.Set {
			e.FieldStart("allow_download")
			s.AllowDownload.Encode(e)
		}
	}
	{
		if s.AllowSharing.Set {
			e.FieldStart("allow_sharing")
			s.AllowSharing.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateUserProfileReqPolicyVoicemailAccessMembersItem = [4]string{
	0: "access_user_id",
	1: "allow_delete",
	2: "allow_download",
	3: "allow_sharing",
}

// Decode decodes UpdateUserProfileReqPolicyVoicemailAccessMembersItem from json.
func (s *UpdateUserProfileReqPolicyVoicemailAccessMembersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateUserProfileReqPolicyVoicemailAccessMembersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "access_user_id":
			if err := func() error {
				s.AccessUserID.Reset()
				if err := s.AccessUserID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_user_id\"")
			}
		case "allow_delete":
			if err := func() error {
				s.AllowDelete.Reset()
				if err := s.AllowDelete.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_delete\"")
			}
		case "allow_download":
			if err := func() error {
				s.AllowDownload.Reset()
				if err := s.AllowDownload.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_download\"")
			}
		case "allow_sharing":
			if err := func() error {
				s.AllowSharing.Reset()
				if err := s.AllowSharing.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_sharing\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateUserProfileReqPolicyVoicemailAccessMembersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateUserProfileReqPolicyVoicemailAccessMembersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateUserProfileReqPolicyVoicemailAccessMembersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateUserProfileReqPolicyVoicemailNotificationByEmail) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateUserProfileReqPolicyVoicemailNotificationByEmail) encodeFields(e *jx.Encoder) {
	{
		if s.IncludeVoicemailFile.Set {
			e.FieldStart("include_voicemail_file")
			s.IncludeVoicemailFile.Encode(e)
		}
	}
	{
		if s.IncludeVoicemailTranscription.Set {
			e.FieldStart("include_voicemail_transcription")
			s.IncludeVoicemailTranscription.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Reset.Set {
			e.FieldStart("reset")
			s.Reset.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateUserProfileReqPolicyVoicemailNotificationByEmail = [4]string{
	0: "include_voicemail_file",
	1: "include_voicemail_transcription",
	2: "enable",
	3: "reset",
}

// Decode decodes UpdateUserProfileReqPolicyVoicemailNotificationByEmail from json.
func (s *UpdateUserProfileReqPolicyVoicemailNotificationByEmail) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateUserProfileReqPolicyVoicemailNotificationByEmail to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "include_voicemail_file":
			if err := func() error {
				s.IncludeVoicemailFile.Reset()
				if err := s.IncludeVoicemailFile.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"include_voicemail_file\"")
			}
		case "include_voicemail_transcription":
			if err := func() error {
				s.IncludeVoicemailTranscription.Reset()
				if err := s.IncludeVoicemailTranscription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"include_voicemail_transcription\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "reset":
			if err := func() error {
				s.Reset.Reset()
				if err := s.Reset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reset\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateUserProfileReqPolicyVoicemailNotificationByEmail")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateUserProfileReqPolicyVoicemailNotificationByEmail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateUserProfileReqPolicyVoicemailNotificationByEmail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateUserProfileReqPolicyVoicemailTranscription) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateUserProfileReqPolicyVoicemailTranscription) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Reset.Set {
			e.FieldStart("reset")
			s.Reset.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateUserProfileReqPolicyVoicemailTranscription = [2]string{
	0: "enable",
	1: "reset",
}

// Decode decodes UpdateUserProfileReqPolicyVoicemailTranscription from json.
func (s *UpdateUserProfileReqPolicyVoicemailTranscription) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateUserProfileReqPolicyVoicemailTranscription to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "reset":
			if err := func() error {
				s.Reset.Reset()
				if err := s.Reset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reset\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateUserProfileReqPolicyVoicemailTranscription")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateUserProfileReqPolicyVoicemailTranscription) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateUserProfileReqPolicyVoicemailTranscription) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateUserProfileReqPolicyZoomPhoneOnMobile) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateUserProfileReqPolicyZoomPhoneOnMobile) encodeFields(e *jx.Encoder) {
	{
		if s.AllowCallingSMSMms.Set {
			e.FieldStart("allow_calling_sms_mms")
			s.AllowCallingSMSMms.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateUserProfileReqPolicyZoomPhoneOnMobile = [2]string{
	0: "allow_calling_sms_mms",
	1: "enable",
}

// Decode decodes UpdateUserProfileReqPolicyZoomPhoneOnMobile from json.
func (s *UpdateUserProfileReqPolicyZoomPhoneOnMobile) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateUserProfileReqPolicyZoomPhoneOnMobile to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allow_calling_sms_mms":
			if err := func() error {
				s.AllowCallingSMSMms.Reset()
				if err := s.AllowCallingSMSMms.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_calling_sms_mms\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateUserProfileReqPolicyZoomPhoneOnMobile")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateUserProfileReqPolicyZoomPhoneOnMobile) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateUserProfileReqPolicyZoomPhoneOnMobile) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateUserSettingReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateUserSettingReq) encodeFields(e *jx.Encoder) {
	{
		if s.Delegation.Set {
			e.FieldStart("delegation")
			s.Delegation.Encode(e)
		}
	}
	{
		if s.DeskPhone.Set {
			e.FieldStart("desk_phone")
			s.DeskPhone.Encode(e)
		}
	}
	{
		if s.VoiceMail.Set {
			e.FieldStart("voice_mail")
			s.VoiceMail.Encode(e)
		}
	}
	{
		if s.Intercom.Set {
			e.FieldStart("intercom")
			s.Intercom.Encode(e)
		}
	}
	{
		if s.VoicemailAccessMembers != nil {
			e.FieldStart("voicemail_access_members")
			e.ArrStart()
			for _, elem := range s.VoicemailAccessMembers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.AutoCallRecordingAccessMembers != nil {
			e.FieldStart("auto_call_recording_access_members")
			e.ArrStart()
			for _, elem := range s.AutoCallRecordingAccessMembers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.AdHocCallRecordingAccessMembers != nil {
			e.FieldStart("ad_hoc_call_recording_access_members")
			e.ArrStart()
			for _, elem := range s.AdHocCallRecordingAccessMembers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfUpdateUserSettingReq = [7]string{
	0: "delegation",
	1: "desk_phone",
	2: "voice_mail",
	3: "intercom",
	4: "voicemail_access_members",
	5: "auto_call_recording_access_members",
	6: "ad_hoc_call_recording_access_members",
}

// Decode decodes UpdateUserSettingReq from json.
func (s *UpdateUserSettingReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateUserSettingReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "delegation":
			if err := func() error {
				s.Delegation.Reset()
				if err := s.Delegation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delegation\"")
			}
		case "desk_phone":
			if err := func() error {
				s.DeskPhone.Reset()
				if err := s.DeskPhone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"desk_phone\"")
			}
		case "voice_mail":
			if err := func() error {
				s.VoiceMail.Reset()
				if err := s.VoiceMail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voice_mail\"")
			}
		case "intercom":
			if err := func() error {
				s.Intercom.Reset()
				if err := s.Intercom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"intercom\"")
			}
		case "voicemail_access_members":
			if err := func() error {
				s.VoicemailAccessMembers = make([]UpdateUserSettingReqVoicemailAccessMembersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem UpdateUserSettingReqVoicemailAccessMembersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.VoicemailAccessMembers = append(s.VoicemailAccessMembers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"voicemail_access_members\"")
			}
		case "auto_call_recording_access_members":
			if err := func() error {
				s.AutoCallRecordingAccessMembers = make([]UpdateUserSettingReqAutoCallRecordingAccessMembersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem UpdateUserSettingReqAutoCallRecordingAccessMembersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.AutoCallRecordingAccessMembers = append(s.AutoCallRecordingAccessMembers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_call_recording_access_members\"")
			}
		case "ad_hoc_call_recording_access_members":
			if err := func() error {
				s.AdHocCallRecordingAccessMembers = make([]UpdateUserSettingReqAdHocCallRecordingAccessMembersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem UpdateUserSettingReqAdHocCallRecordingAccessMembersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.AdHocCallRecordingAccessMembers = append(s.AdHocCallRecordingAccessMembers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ad_hoc_call_recording_access_members\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateUserSettingReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateUserSettingReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateUserSettingReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateUserSettingReqAdHocCallRecordingAccessMembersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateUserSettingReqAdHocCallRecordingAccessMembersItem) encodeFields(e *jx.Encoder) {
	{
		if s.AccessUserID.Set {
			e.FieldStart("access_user_id")
			s.AccessUserID.Encode(e)
		}
	}
	{
		if s.AllowDelete.Set {
			e.FieldStart("allow_delete")
			s.AllowDelete.Encode(e)
		}
	}
	{
		if s.AllowDownload.Set {
			e.FieldStart("allow_download")
			s.AllowDownload.Encode(e)
		}
	}
	{
		if s.SharedID.Set {
			e.FieldStart("shared_id")
			s.SharedID.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateUserSettingReqAdHocCallRecordingAccessMembersItem = [4]string{
	0: "access_user_id",
	1: "allow_delete",
	2: "allow_download",
	3: "shared_id",
}

// Decode decodes UpdateUserSettingReqAdHocCallRecordingAccessMembersItem from json.
func (s *UpdateUserSettingReqAdHocCallRecordingAccessMembersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateUserSettingReqAdHocCallRecordingAccessMembersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "access_user_id":
			if err := func() error {
				s.AccessUserID.Reset()
				if err := s.AccessUserID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_user_id\"")
			}
		case "allow_delete":
			if err := func() error {
				s.AllowDelete.Reset()
				if err := s.AllowDelete.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_delete\"")
			}
		case "allow_download":
			if err := func() error {
				s.AllowDownload.Reset()
				if err := s.AllowDownload.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_download\"")
			}
		case "shared_id":
			if err := func() error {
				s.SharedID.Reset()
				if err := s.SharedID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shared_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateUserSettingReqAdHocCallRecordingAccessMembersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateUserSettingReqAdHocCallRecordingAccessMembersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateUserSettingReqAdHocCallRecordingAccessMembersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateUserSettingReqAutoCallRecordingAccessMembersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateUserSettingReqAutoCallRecordingAccessMembersItem) encodeFields(e *jx.Encoder) {
	{
		if s.AccessUserID.Set {
			e.FieldStart("access_user_id")
			s.AccessUserID.Encode(e)
		}
	}
	{
		if s.AllowDelete.Set {
			e.FieldStart("allow_delete")
			s.AllowDelete.Encode(e)
		}
	}
	{
		if s.AllowDownload.Set {
			e.FieldStart("allow_download")
			s.AllowDownload.Encode(e)
		}
	}
	{
		if s.SharedID.Set {
			e.FieldStart("shared_id")
			s.SharedID.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateUserSettingReqAutoCallRecordingAccessMembersItem = [4]string{
	0: "access_user_id",
	1: "allow_delete",
	2: "allow_download",
	3: "shared_id",
}

// Decode decodes UpdateUserSettingReqAutoCallRecordingAccessMembersItem from json.
func (s *UpdateUserSettingReqAutoCallRecordingAccessMembersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateUserSettingReqAutoCallRecordingAccessMembersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "access_user_id":
			if err := func() error {
				s.AccessUserID.Reset()
				if err := s.AccessUserID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_user_id\"")
			}
		case "allow_delete":
			if err := func() error {
				s.AllowDelete.Reset()
				if err := s.AllowDelete.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_delete\"")
			}
		case "allow_download":
			if err := func() error {
				s.AllowDownload.Reset()
				if err := s.AllowDownload.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_download\"")
			}
		case "shared_id":
			if err := func() error {
				s.SharedID.Reset()
				if err := s.SharedID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shared_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateUserSettingReqAutoCallRecordingAccessMembersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateUserSettingReqAutoCallRecordingAccessMembersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateUserSettingReqAutoCallRecordingAccessMembersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateUserSettingReqDelegation) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateUserSettingReqDelegation) encodeFields(e *jx.Encoder) {
	{
		if s.Privacy.Set {
			e.FieldStart("privacy")
			s.Privacy.Encode(e)
		}
	}
	{
		if s.Privileges != nil {
			e.FieldStart("privileges")
			e.ArrStart()
			for _, elem := range s.Privileges {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateUserSettingReqDelegation = [3]string{
	0: "privacy",
	1: "privileges",
	2: "locked",
}

// Decode decodes UpdateUserSettingReqDelegation from json.
func (s *UpdateUserSettingReqDelegation) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateUserSettingReqDelegation to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "privacy":
			if err := func() error {
				s.Privacy.Reset()
				if err := s.Privacy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"privacy\"")
			}
		case "privileges":
			if err := func() error {
				s.Privileges = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.Privileges = append(s.Privileges, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"privileges\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateUserSettingReqDelegation")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateUserSettingReqDelegation) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateUserSettingReqDelegation) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateUserSettingReqDeskPhone) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateUserSettingReqDeskPhone) encodeFields(e *jx.Encoder) {
	{
		if s.Devices != nil {
			e.FieldStart("devices")
			e.ArrStart()
			for _, elem := range s.Devices {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.PhoneScreenLock.Set {
			e.FieldStart("phone_screen_lock")
			s.PhoneScreenLock.Encode(e)
		}
	}
	{
		if s.PinCode.Set {
			e.FieldStart("pin_code")
			s.PinCode.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateUserSettingReqDeskPhone = [3]string{
	0: "devices",
	1: "phone_screen_lock",
	2: "pin_code",
}

// Decode decodes UpdateUserSettingReqDeskPhone from json.
func (s *UpdateUserSettingReqDeskPhone) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateUserSettingReqDeskPhone to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "devices":
			if err := func() error {
				s.Devices = make([]UpdateUserSettingReqDeskPhoneDevicesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem UpdateUserSettingReqDeskPhoneDevicesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Devices = append(s.Devices, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"devices\"")
			}
		case "phone_screen_lock":
			if err := func() error {
				s.PhoneScreenLock.Reset()
				if err := s.PhoneScreenLock.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_screen_lock\"")
			}
		case "pin_code":
			if err := func() error {
				s.PinCode.Reset()
				if err := s.PinCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pin_code\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateUserSettingReqDeskPhone")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateUserSettingReqDeskPhone) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateUserSettingReqDeskPhone) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateUserSettingReqDeskPhoneDevicesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateUserSettingReqDeskPhoneDevicesItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Policy.Set {
			e.FieldStart("policy")
			s.Policy.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateUserSettingReqDeskPhoneDevicesItem = [2]string{
	0: "id",
	1: "policy",
}

// Decode decodes UpdateUserSettingReqDeskPhoneDevicesItem from json.
func (s *UpdateUserSettingReqDeskPhoneDevicesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateUserSettingReqDeskPhoneDevicesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "policy":
			if err := func() error {
				s.Policy.Reset()
				if err := s.Policy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"policy\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateUserSettingReqDeskPhoneDevicesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateUserSettingReqDeskPhoneDevicesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateUserSettingReqDeskPhoneDevicesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateUserSettingReqDeskPhoneDevicesItemPolicy) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateUserSettingReqDeskPhoneDevicesItemPolicy) encodeFields(e *jx.Encoder) {
	{
		if s.CallControl.Set {
			e.FieldStart("call_control")
			s.CallControl.Encode(e)
		}
	}
	{
		if s.HotDesking.Set {
			e.FieldStart("hot_desking")
			s.HotDesking.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateUserSettingReqDeskPhoneDevicesItemPolicy = [2]string{
	0: "call_control",
	1: "hot_desking",
}

// Decode decodes UpdateUserSettingReqDeskPhoneDevicesItemPolicy from json.
func (s *UpdateUserSettingReqDeskPhoneDevicesItemPolicy) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateUserSettingReqDeskPhoneDevicesItemPolicy to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "call_control":
			if err := func() error {
				s.CallControl.Reset()
				if err := s.CallControl.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_control\"")
			}
		case "hot_desking":
			if err := func() error {
				s.HotDesking.Reset()
				if err := s.HotDesking.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hot_desking\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateUserSettingReqDeskPhoneDevicesItemPolicy")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateUserSettingReqDeskPhoneDevicesItemPolicy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateUserSettingReqDeskPhoneDevicesItemPolicy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateUserSettingReqDeskPhoneDevicesItemPolicyCallControl) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateUserSettingReqDeskPhoneDevicesItemPolicyCallControl) encodeFields(e *jx.Encoder) {
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateUserSettingReqDeskPhoneDevicesItemPolicyCallControl = [1]string{
	0: "status",
}

// Decode decodes UpdateUserSettingReqDeskPhoneDevicesItemPolicyCallControl from json.
func (s *UpdateUserSettingReqDeskPhoneDevicesItemPolicyCallControl) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateUserSettingReqDeskPhoneDevicesItemPolicyCallControl to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateUserSettingReqDeskPhoneDevicesItemPolicyCallControl")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateUserSettingReqDeskPhoneDevicesItemPolicyCallControl) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateUserSettingReqDeskPhoneDevicesItemPolicyCallControl) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateUserSettingReqDeskPhoneDevicesItemPolicyHotDesking) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateUserSettingReqDeskPhoneDevicesItemPolicyHotDesking) encodeFields(e *jx.Encoder) {
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateUserSettingReqDeskPhoneDevicesItemPolicyHotDesking = [1]string{
	0: "status",
}

// Decode decodes UpdateUserSettingReqDeskPhoneDevicesItemPolicyHotDesking from json.
func (s *UpdateUserSettingReqDeskPhoneDevicesItemPolicyHotDesking) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateUserSettingReqDeskPhoneDevicesItemPolicyHotDesking to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateUserSettingReqDeskPhoneDevicesItemPolicyHotDesking")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateUserSettingReqDeskPhoneDevicesItemPolicyHotDesking) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateUserSettingReqDeskPhoneDevicesItemPolicyHotDesking) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateUserSettingReqIntercom) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateUserSettingReqIntercom) encodeFields(e *jx.Encoder) {
	{
		if s.ExtensionID.Set {
			e.FieldStart("extension_id")
			s.ExtensionID.Encode(e)
		}
	}
	{
		if s.DeviceID.Set {
			e.FieldStart("device_id")
			s.DeviceID.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateUserSettingReqIntercom = [2]string{
	0: "extension_id",
	1: "device_id",
}

// Decode decodes UpdateUserSettingReqIntercom from json.
func (s *UpdateUserSettingReqIntercom) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateUserSettingReqIntercom to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "extension_id":
			if err := func() error {
				s.ExtensionID.Reset()
				if err := s.ExtensionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_id\"")
			}
		case "device_id":
			if err := func() error {
				s.DeviceID.Reset()
				if err := s.DeviceID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateUserSettingReqIntercom")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateUserSettingReqIntercom) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateUserSettingReqIntercom) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateUserSettingReqVoiceMail) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateUserSettingReqVoiceMail) encodeFields(e *jx.Encoder) {
	{
		if s.AccessUserID.Set {
			e.FieldStart("access_user_id")
			s.AccessUserID.Encode(e)
		}
	}
	{
		if s.Delete.Set {
			e.FieldStart("delete")
			s.Delete.Encode(e)
		}
	}
	{
		if s.Download.Set {
			e.FieldStart("download")
			s.Download.Encode(e)
		}
	}
	{
		if s.SharedID.Set {
			e.FieldStart("shared_id")
			s.SharedID.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateUserSettingReqVoiceMail = [4]string{
	0: "access_user_id",
	1: "delete",
	2: "download",
	3: "shared_id",
}

// Decode decodes UpdateUserSettingReqVoiceMail from json.
func (s *UpdateUserSettingReqVoiceMail) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateUserSettingReqVoiceMail to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "access_user_id":
			if err := func() error {
				s.AccessUserID.Reset()
				if err := s.AccessUserID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_user_id\"")
			}
		case "delete":
			if err := func() error {
				s.Delete.Reset()
				if err := s.Delete.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delete\"")
			}
		case "download":
			if err := func() error {
				s.Download.Reset()
				if err := s.Download.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"download\"")
			}
		case "shared_id":
			if err := func() error {
				s.SharedID.Reset()
				if err := s.SharedID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shared_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateUserSettingReqVoiceMail")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateUserSettingReqVoiceMail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateUserSettingReqVoiceMail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateUserSettingReqVoicemailAccessMembersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateUserSettingReqVoicemailAccessMembersItem) encodeFields(e *jx.Encoder) {
	{
		if s.AccessUserID.Set {
			e.FieldStart("access_user_id")
			s.AccessUserID.Encode(e)
		}
	}
	{
		if s.AllowDelete.Set {
			e.FieldStart("allow_delete")
			s.AllowDelete.Encode(e)
		}
	}
	{
		if s.AllowDownload.Set {
			e.FieldStart("allow_download")
			s.AllowDownload.Encode(e)
		}
	}
	{
		if s.AllowSharing.Set {
			e.FieldStart("allow_sharing")
			s.AllowSharing.Encode(e)
		}
	}
	{
		if s.SharedID.Set {
			e.FieldStart("shared_id")
			s.SharedID.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateUserSettingReqVoicemailAccessMembersItem = [5]string{
	0: "access_user_id",
	1: "allow_delete",
	2: "allow_download",
	3: "allow_sharing",
	4: "shared_id",
}

// Decode decodes UpdateUserSettingReqVoicemailAccessMembersItem from json.
func (s *UpdateUserSettingReqVoicemailAccessMembersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateUserSettingReqVoicemailAccessMembersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "access_user_id":
			if err := func() error {
				s.AccessUserID.Reset()
				if err := s.AccessUserID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_user_id\"")
			}
		case "allow_delete":
			if err := func() error {
				s.AllowDelete.Reset()
				if err := s.AllowDelete.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_delete\"")
			}
		case "allow_download":
			if err := func() error {
				s.AllowDownload.Reset()
				if err := s.AllowDownload.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_download\"")
			}
		case "allow_sharing":
			if err := func() error {
				s.AllowSharing.Reset()
				if err := s.AllowSharing.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_sharing\"")
			}
		case "shared_id":
			if err := func() error {
				s.SharedID.Reset()
				if err := s.SharedID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shared_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateUserSettingReqVoicemailAccessMembersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateUserSettingReqVoicemailAccessMembersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateUserSettingReqVoicemailAccessMembersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateUserSettingsReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateUserSettingsReq) encodeFields(e *jx.Encoder) {
	{
		if s.AreaCode.Set {
			e.FieldStart("area_code")
			s.AreaCode.Encode(e)
		}
	}
	{
		if s.AudioPromptLanguage.Set {
			e.FieldStart("audio_prompt_language")
			s.AudioPromptLanguage.Encode(e)
		}
	}
	{
		if s.CountryIsoCode.Set {
			e.FieldStart("country_iso_code")
			s.CountryIsoCode.Encode(e)
		}
	}
	{
		if s.MusicOnHoldID.Set {
			e.FieldStart("music_on_hold_id")
			s.MusicOnHoldID.Encode(e)
		}
	}
	{
		if s.OutboundCallerID.Set {
			e.FieldStart("outbound_caller_id")
			s.OutboundCallerID.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateUserSettingsReq = [5]string{
	0: "area_code",
	1: "audio_prompt_language",
	2: "country_iso_code",
	3: "music_on_hold_id",
	4: "outbound_caller_id",
}

// Decode decodes UpdateUserSettingsReq from json.
func (s *UpdateUserSettingsReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateUserSettingsReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "area_code":
			if err := func() error {
				s.AreaCode.Reset()
				if err := s.AreaCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"area_code\"")
			}
		case "audio_prompt_language":
			if err := func() error {
				s.AudioPromptLanguage.Reset()
				if err := s.AudioPromptLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_prompt_language\"")
			}
		case "country_iso_code":
			if err := func() error {
				s.CountryIsoCode.Reset()
				if err := s.CountryIsoCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country_iso_code\"")
			}
		case "music_on_hold_id":
			if err := func() error {
				s.MusicOnHoldID.Reset()
				if err := s.MusicOnHoldID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"music_on_hold_id\"")
			}
		case "outbound_caller_id":
			if err := func() error {
				s.OutboundCallerID.Reset()
				if err := s.OutboundCallerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"outbound_caller_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateUserSettingsReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateUserSettingsReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateUserSettingsReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateUsersPropertiesInBatchReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateUsersPropertiesInBatchReq) encodeFields(e *jx.Encoder) {
	{
		if s.BatchType.Set {
			e.FieldStart("batch_type")
			s.BatchType.Encode(e)
		}
	}
	{
		if s.UserIds != nil {
			e.FieldStart("user_ids")
			e.ArrStart()
			for _, elem := range s.UserIds {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.SiteID.Set {
			e.FieldStart("site_id")
			s.SiteID.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateUsersPropertiesInBatchReq = [3]string{
	0: "batch_type",
	1: "user_ids",
	2: "site_id",
}

// Decode decodes UpdateUsersPropertiesInBatchReq from json.
func (s *UpdateUsersPropertiesInBatchReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateUsersPropertiesInBatchReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "batch_type":
			if err := func() error {
				s.BatchType.Reset()
				if err := s.BatchType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"batch_type\"")
			}
		case "user_ids":
			if err := func() error {
				s.UserIds = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.UserIds = append(s.UserIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"user_ids\"")
			}
		case "site_id":
			if err := func() error {
				s.SiteID.Reset()
				if err := s.SiteID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateUsersPropertiesInBatchReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateUsersPropertiesInBatchReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateUsersPropertiesInBatchReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateZoomRoomReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateZoomRoomReq) encodeFields(e *jx.Encoder) {
	{
		if s.ExtensionNumber.Set {
			e.FieldStart("extension_number")
			s.ExtensionNumber.Encode(e)
		}
	}
	{
		if s.Policy.Set {
			e.FieldStart("policy")
			s.Policy.Encode(e)
		}
	}
	{
		if s.SiteID.Set {
			e.FieldStart("site_id")
			s.SiteID.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateZoomRoomReq = [3]string{
	0: "extension_number",
	1: "policy",
	2: "site_id",
}

// Decode decodes UpdateZoomRoomReq from json.
func (s *UpdateZoomRoomReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateZoomRoomReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "extension_number":
			if err := func() error {
				s.ExtensionNumber.Reset()
				if err := s.ExtensionNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extension_number\"")
			}
		case "policy":
			if err := func() error {
				s.Policy.Reset()
				if err := s.Policy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"policy\"")
			}
		case "site_id":
			if err := func() error {
				s.SiteID.Reset()
				if err := s.SiteID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateZoomRoomReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateZoomRoomReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateZoomRoomReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateZoomRoomReqPolicy) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateZoomRoomReqPolicy) encodeFields(e *jx.Encoder) {
	{
		if s.InternationalCalling.Set {
			e.FieldStart("international_calling")
			s.InternationalCalling.Encode(e)
		}
	}
	{
		if s.SelectOutboundCallerID.Set {
			e.FieldStart("select_outbound_caller_id")
			s.SelectOutboundCallerID.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateZoomRoomReqPolicy = [2]string{
	0: "international_calling",
	1: "select_outbound_caller_id",
}

// Decode decodes UpdateZoomRoomReqPolicy from json.
func (s *UpdateZoomRoomReqPolicy) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateZoomRoomReqPolicy to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "international_calling":
			if err := func() error {
				s.InternationalCalling.Reset()
				if err := s.InternationalCalling.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"international_calling\"")
			}
		case "select_outbound_caller_id":
			if err := func() error {
				s.SelectOutboundCallerID.Reset()
				if err := s.SelectOutboundCallerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"select_outbound_caller_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateZoomRoomReqPolicy")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateZoomRoomReqPolicy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateZoomRoomReqPolicy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateZoomRoomReqPolicyInternationalCalling) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateZoomRoomReqPolicyInternationalCalling) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Reset.Set {
			e.FieldStart("reset")
			s.Reset.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateZoomRoomReqPolicyInternationalCalling = [2]string{
	0: "enable",
	1: "reset",
}

// Decode decodes UpdateZoomRoomReqPolicyInternationalCalling from json.
func (s *UpdateZoomRoomReqPolicyInternationalCalling) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateZoomRoomReqPolicyInternationalCalling to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "reset":
			if err := func() error {
				s.Reset.Reset()
				if err := s.Reset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reset\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateZoomRoomReqPolicyInternationalCalling")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateZoomRoomReqPolicyInternationalCalling) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateZoomRoomReqPolicyInternationalCalling) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateZoomRoomReqPolicySelectOutboundCallerID) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateZoomRoomReqPolicySelectOutboundCallerID) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Reset.Set {
			e.FieldStart("reset")
			s.Reset.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateZoomRoomReqPolicySelectOutboundCallerID = [2]string{
	0: "enable",
	1: "reset",
}

// Decode decodes UpdateZoomRoomReqPolicySelectOutboundCallerID from json.
func (s *UpdateZoomRoomReqPolicySelectOutboundCallerID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateZoomRoomReqPolicySelectOutboundCallerID to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "reset":
			if err := func() error {
				s.Reset.Reset()
				if err := s.Reset.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reset\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateZoomRoomReqPolicySelectOutboundCallerID")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateZoomRoomReqPolicySelectOutboundCallerID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateZoomRoomReqPolicySelectOutboundCallerID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSmsSessionOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSmsSessionOK) encodeFields(e *jx.Encoder) {
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
	{
		if s.SMSSessions != nil {
			e.FieldStart("sms_sessions")
			e.ArrStart()
			for _, elem := range s.SMSSessions {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfUserSmsSessionOK = [3]string{
	0: "next_page_token",
	1: "page_size",
	2: "sms_sessions",
}

// Decode decodes UserSmsSessionOK from json.
func (s *UserSmsSessionOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSmsSessionOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		case "sms_sessions":
			if err := func() error {
				s.SMSSessions = make([]UserSmsSessionOKSMSSessionsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem UserSmsSessionOKSMSSessionsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.SMSSessions = append(s.SMSSessions, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sms_sessions\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSmsSessionOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSmsSessionOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSmsSessionOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSmsSessionOKSMSSessionsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSmsSessionOKSMSSessionsItem) encodeFields(e *jx.Encoder) {
	{
		if s.LastAccessTime.Set {
			e.FieldStart("last_access_time")
			s.LastAccessTime.Encode(e)
		}
	}
	{
		if s.Participants != nil {
			e.FieldStart("participants")
			e.ArrStart()
			for _, elem := range s.Participants {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.SessionID.Set {
			e.FieldStart("session_id")
			s.SessionID.Encode(e)
		}
	}
	{
		if s.SessionType.Set {
			e.FieldStart("session_type")
			s.SessionType.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSmsSessionOKSMSSessionsItem = [4]string{
	0: "last_access_time",
	1: "participants",
	2: "session_id",
	3: "session_type",
}

// Decode decodes UserSmsSessionOKSMSSessionsItem from json.
func (s *UserSmsSessionOKSMSSessionsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSmsSessionOKSMSSessionsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "last_access_time":
			if err := func() error {
				s.LastAccessTime.Reset()
				if err := s.LastAccessTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"last_access_time\"")
			}
		case "participants":
			if err := func() error {
				s.Participants = make([]UserSmsSessionOKSMSSessionsItemParticipantsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem UserSmsSessionOKSMSSessionsItemParticipantsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Participants = append(s.Participants, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"participants\"")
			}
		case "session_id":
			if err := func() error {
				s.SessionID.Reset()
				if err := s.SessionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"session_id\"")
			}
		case "session_type":
			if err := func() error {
				s.SessionType.Reset()
				if err := s.SessionType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"session_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSmsSessionOKSMSSessionsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSmsSessionOKSMSSessionsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSmsSessionOKSMSSessionsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSmsSessionOKSMSSessionsItemParticipantsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSmsSessionOKSMSSessionsItemParticipantsItem) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.Owner.Set {
			e.FieldStart("owner")
			s.Owner.Encode(e)
		}
	}
	{
		if s.PhoneNumber.Set {
			e.FieldStart("phone_number")
			s.PhoneNumber.Encode(e)
		}
	}
	{
		if s.IsSessionOwner.Set {
			e.FieldStart("is_session_owner")
			s.IsSessionOwner.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSmsSessionOKSMSSessionsItemParticipantsItem = [4]string{
	0: "display_name",
	1: "owner",
	2: "phone_number",
	3: "is_session_owner",
}

// Decode decodes UserSmsSessionOKSMSSessionsItemParticipantsItem from json.
func (s *UserSmsSessionOKSMSSessionsItemParticipantsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSmsSessionOKSMSSessionsItemParticipantsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "owner":
			if err := func() error {
				s.Owner.Reset()
				if err := s.Owner.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"owner\"")
			}
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		case "is_session_owner":
			if err := func() error {
				s.IsSessionOwner.Reset()
				if err := s.IsSessionOwner.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"is_session_owner\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSmsSessionOKSMSSessionsItemParticipantsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSmsSessionOKSMSSessionsItemParticipantsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSmsSessionOKSMSSessionsItemParticipantsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSmsSessionOKSMSSessionsItemParticipantsItemOwner) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSmsSessionOKSMSSessionsItemParticipantsItemOwner) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSmsSessionOKSMSSessionsItemParticipantsItemOwner = [2]string{
	0: "id",
	1: "type",
}

// Decode decodes UserSmsSessionOKSMSSessionsItemParticipantsItemOwner from json.
func (s *UserSmsSessionOKSMSSessionsItemParticipantsItemOwner) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSmsSessionOKSMSSessionsItemParticipantsItemOwner to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSmsSessionOKSMSSessionsItemParticipantsItemOwner")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSmsSessionOKSMSSessionsItemParticipantsItemOwner) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSmsSessionOKSMSSessionsItemParticipantsItemOwner) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Code generated by ogen, DO NOT EDIT.

package zoomuser

import (
	"fmt"
	"time"
)

func (s *ErrorResponseStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

type BulkUpdateFeatureCreated struct {
	// The IDs of users for whom the feature was updated successfully.
	SuccessUserIds []string `json:"success_user_ids"`
	// The details why these users' feature was not updated successfully.
	FailDetails []BulkUpdateFeatureCreatedFailDetailsItem `json:"fail_details"`
}

// GetSuccessUserIds returns the value of SuccessUserIds.
func (s *BulkUpdateFeatureCreated) GetSuccessUserIds() []string {
	return s.SuccessUserIds
}

// GetFailDetails returns the value of FailDetails.
func (s *BulkUpdateFeatureCreated) GetFailDetails() []BulkUpdateFeatureCreatedFailDetailsItem {
	return s.FailDetails
}

// SetSuccessUserIds sets the value of SuccessUserIds.
func (s *BulkUpdateFeatureCreated) SetSuccessUserIds(val []string) {
	s.SuccessUserIds = val
}

// SetFailDetails sets the value of FailDetails.
func (s *BulkUpdateFeatureCreated) SetFailDetails(val []BulkUpdateFeatureCreatedFailDetailsItem) {
	s.FailDetails = val
}

type BulkUpdateFeatureCreatedFailDetailsItem struct {
	// The IDs of users for whom the feature was not updated successfully.
	UserIds []string `json:"user_ids"`
	// The reason why the feature for these users was not updated successfully.
	Reason OptString `json:"reason"`
}

// GetUserIds returns the value of UserIds.
func (s *BulkUpdateFeatureCreatedFailDetailsItem) GetUserIds() []string {
	return s.UserIds
}

// GetReason returns the value of Reason.
func (s *BulkUpdateFeatureCreatedFailDetailsItem) GetReason() OptString {
	return s.Reason
}

// SetUserIds sets the value of UserIds.
func (s *BulkUpdateFeatureCreatedFailDetailsItem) SetUserIds(val []string) {
	s.UserIds = val
}

// SetReason sets the value of Reason.
func (s *BulkUpdateFeatureCreatedFailDetailsItem) SetReason(val OptString) {
	s.Reason = val
}

type BulkUpdateFeatureReq struct {
	// The feature type to update.
	FeatureType string `json:"feature_type"`
	// The feature value you want to update. The value you can pass depends on the 'feature_type' field.
	// **user_type:**
	// * `1` - Basic
	// * `2` - Licensed
	// * `99` - None (this can only be set with `ssoCreate`).
	// **concurrent_meeting:**
	// * `Basic`
	// * `Plus`
	// * `None`.
	// **large_meeting:**
	// * `1` - 100 capacity
	// * `32` - 200 capacity
	// * `64` - 300 capacity
	// * `128` - 500 capacity
	// * `256` - 1000 capacity
	// * `0` - Turn off the **Large meeting** feature.
	// **webinar:**
	// * `16` - 100 capacity
	// * `1` - 500 capacity
	// * `64` - 1000 capacity
	// * `128` - 3000 capacity
	// * `256` - 5000 capacity
	// * `512` - 10000 capacity
	// * `1024` - 20000 capacity
	// * `2048` - 30000 capacity
	// * `4096` - 40000 capacity
	// * `8192` - 50000 capacity
	// * `16384` - promo 500 capacity
	// * `32768` - promo 1000 capacity
	// * `0` - Turn off the **Webinar** feature.
	// **zoom_events:**
	// * `500` - 500 capacity
	// * `1000` - 1000 capacity
	// * `3000` - 3000 capacity
	// * `5000` - 5000 capacity
	// * `10000` - 10000 capacity
	// * `20000` - 20000 capacity
	// * `30000` - 30000 capacity
	// * `50000` - 50000 capacity
	// * `0` - Turn off the **Zoom events** feature.
	// **<del>zoom_iq_for_sales</del>:**
	// * `true` - Turn on the **Zoom Revenue Accelerator** feature.
	// * `false` - Turn off the **Zoom Revenue Accelerator** feature.
	// **zoom_revenue_accelerator:**
	// * `true` - Turn on the **Zoom Revenue Accelerator** feature.
	// * `false` - Turn off the **Zoom Revenue Accelerator** feature.
	// **zoom_whiteboard:**
	// * `true` - Turn on the **Zoom whiteboard** feature.
	// * `false` - Turn off the **Zoom whiteboard** feature.
	// **zoom_clips_plus**
	// * `true` - Turn on the **Zoom Clips Plus** feature.
	// * `false` - Turn off the **Zoom Clips Plus** feature.
	// **plan_united_type:**
	// * `1` - Zoom United Pro-United with US/CA Unlimited.
	// * `2` - Zoom United Pro-United with UK/IR Unlimited.
	// * `4` - Zoom United Pro-United with AU/NZ Unlimited.
	// * `8` - Zoom United Pro-United with Global Select.
	// * `16` -  Zoom United Pro-United with Zoom Phone Pro.
	// * `32` - Zoom United Biz-United with US/CA Unlimited.
	// * `64` - Zoom United Biz-United with UK/IR Unlimited.
	// * `128` - Zoom United Biz-United with AU/NZ Unlimited.
	// * `256` - Zoom United Biz-United with Global Select.
	// * `512` -  Zoom United Biz-United with Zoom Phone Pro.
	// * `1024` - Zoom United Ent-United with US/CA Unlimited.
	// * `2048` - Zoom United Ent-United with UK/IR Unlimited.
	// * `4096` - Zoom United Ent-United with AU/NZ Unlimited.
	// * `8192` - Zoom United Ent-United with Global Select.
	// * `16384` -  Zoom United Ent-United with Zoom Phone Pro.
	// * `32768` - Zoom United Pro-United with JP Unlimited.
	// * `65536` - Zoom United Biz-United with JP Unlimited.
	// * `131072` - Zoom United Ent-United with JP Unlimited.
	// * `0` - Turn off the **Zoom united** feature.
	// **zoom_one_type:**
	// * `16` - Zoom Workplace Business Plus with US/CA Unlimited.
	// * `32` - Zoom Workplace Business Plus with UK/Ireland Unlimited.
	// * `64` - Zoom Workplace Business Plus with AU/NZ Unlimited.
	// * `128` - Zoom Workplace Business Plus with Japan Unlimited.
	// * `33554432` - Zoom Workplace Business Plus with Global Select.
	// * `134217728` - Zoom Workplace Enterprise Premier with US/CA Unlimited.
	// * `1073741824` - Zoom Workplace Enterprise Premier with AU/NZ Unlimited.
	// * `536870912` - Zoom Workplace Enterprise Premier with UK/Ireland Unlimited.
	// * `268435456` - Zoom Workplace Enterprise Premier with Japan Unlimited.
	// * `4398046511104` - Zoom Workplace Pro Plus with US/CA Unlimited.
	// * `0` - Turn off the **Zoom Workplace** feature.
	// For Gov accounts:
	// * `16` - Zoom One Business Plus.
	// * `0` - Turn off the **Zoom one** feature.
	// For Education accounts:
	// * `18014398509481984` - Zoom One for Education School and Campus.
	// * `72057594037927936` - Zoom One for Education Enterprise Essentials.
	// * `576460752303423488` - Zoom One for Education Enterprise Student.
	// * `144115188075855872` - Zoom One for Education Enterprise Plus.
	// * `137438953472` - Zoom One for Education School and Campus Plus with US/CA Unlimited.
	// * `1099511627776` -Zoom One for Education School and Campus Plus with AU/NZ Unlimited.
	// * `549755813888` - Zoom One for Education School and Campus Plus with UK/Ireland Unlimited.
	// * `274877906944` - Zoom One for Education School and Campus Plus with Japan Unlimited.
	// * `2199023255552` - Zoom One for Education School and Campus Plus with Global Select.
	// * `4294967296` - Zoom One for Education Enterprise Premier with US/CA Unlimited.
	// * `34359738368` - Zoom One for Education Enterprise Premier with AU/NZ Unlimited.
	// * `17179869184` -Zoom One for Education Enterprise Premier with UK/Ireland Unlimited.
	// * `8589934592` - Zoom One for Education Enterprise Premier with with Japan Unlimited.
	// * `68719476736` - Zoom One for Education Enterprise Premier with Global Select.
	// * `0` - Turn off the **Zoom one** feature.
	FeatureValue string `json:"feature_value"`
	// The users' info you want to update.
	Users []BulkUpdateFeatureReqUsersItem `json:"users"`
}

// GetFeatureType returns the value of FeatureType.
func (s *BulkUpdateFeatureReq) GetFeatureType() string {
	return s.FeatureType
}

// GetFeatureValue returns the value of FeatureValue.
func (s *BulkUpdateFeatureReq) GetFeatureValue() string {
	return s.FeatureValue
}

// GetUsers returns the value of Users.
func (s *BulkUpdateFeatureReq) GetUsers() []BulkUpdateFeatureReqUsersItem {
	return s.Users
}

// SetFeatureType sets the value of FeatureType.
func (s *BulkUpdateFeatureReq) SetFeatureType(val string) {
	s.FeatureType = val
}

// SetFeatureValue sets the value of FeatureValue.
func (s *BulkUpdateFeatureReq) SetFeatureValue(val string) {
	s.FeatureValue = val
}

// SetUsers sets the value of Users.
func (s *BulkUpdateFeatureReq) SetUsers(val []BulkUpdateFeatureReqUsersItem) {
	s.Users = val
}

type BulkUpdateFeatureReqUsersItem struct {
	// The user's ID.
	ID OptString `json:"id"`
	// The user's email.
	Email OptString `json:"email"`
}

// GetID returns the value of ID.
func (s *BulkUpdateFeatureReqUsersItem) GetID() OptString {
	return s.ID
}

// GetEmail returns the value of Email.
func (s *BulkUpdateFeatureReqUsersItem) GetEmail() OptString {
	return s.Email
}

// SetID sets the value of ID.
func (s *BulkUpdateFeatureReqUsersItem) SetID(val OptString) {
	s.ID = val
}

// SetEmail sets the value of Email.
func (s *BulkUpdateFeatureReqUsersItem) SetEmail(val OptString) {
	s.Email = val
}

type ContactGroupCreateCreated struct {
	// The contact group ID.
	GroupID OptString `json:"group_id"`
	// The contact group's name.
	GroupName OptString `json:"group_name"`
	// The contact group's total member count.
	TotalMembers OptInt `json:"total_members"`
	// Contact group privacy configuration:
	// `1` - Visible to anyone, searchable by anyone.
	// `2` - Visible to members only, searchable by anyone.
	// `3` - Visible to members only, searchable by members only.
	GroupPrivacy OptInt `json:"group_privacy"`
	// The group description.
	Description OptString `json:"description"`
}

// GetGroupID returns the value of GroupID.
func (s *ContactGroupCreateCreated) GetGroupID() OptString {
	return s.GroupID
}

// GetGroupName returns the value of GroupName.
func (s *ContactGroupCreateCreated) GetGroupName() OptString {
	return s.GroupName
}

// GetTotalMembers returns the value of TotalMembers.
func (s *ContactGroupCreateCreated) GetTotalMembers() OptInt {
	return s.TotalMembers
}

// GetGroupPrivacy returns the value of GroupPrivacy.
func (s *ContactGroupCreateCreated) GetGroupPrivacy() OptInt {
	return s.GroupPrivacy
}

// GetDescription returns the value of Description.
func (s *ContactGroupCreateCreated) GetDescription() OptString {
	return s.Description
}

// SetGroupID sets the value of GroupID.
func (s *ContactGroupCreateCreated) SetGroupID(val OptString) {
	s.GroupID = val
}

// SetGroupName sets the value of GroupName.
func (s *ContactGroupCreateCreated) SetGroupName(val OptString) {
	s.GroupName = val
}

// SetTotalMembers sets the value of TotalMembers.
func (s *ContactGroupCreateCreated) SetTotalMembers(val OptInt) {
	s.TotalMembers = val
}

// SetGroupPrivacy sets the value of GroupPrivacy.
func (s *ContactGroupCreateCreated) SetGroupPrivacy(val OptInt) {
	s.GroupPrivacy = val
}

// SetDescription sets the value of Description.
func (s *ContactGroupCreateCreated) SetDescription(val OptString) {
	s.Description = val
}

type ContactGroupCreateReq struct {
	// The contact group's name.
	GroupName OptString `json:"group_name"`
	// Contact group privacy configuration:
	// `1` - Visible to anyone, searchable by anyone.
	// `2` - Visible to members only, searchable by anyone.
	// `3` - Visible to members only, searchable by members only.
	GroupPrivacy OptInt `json:"group_privacy"`
	// The group description.
	Description  OptString                               `json:"description"`
	GroupMembers []ContactGroupCreateReqGroupMembersItem `json:"group_members"`
}

// GetGroupName returns the value of GroupName.
func (s *ContactGroupCreateReq) GetGroupName() OptString {
	return s.GroupName
}

// GetGroupPrivacy returns the value of GroupPrivacy.
func (s *ContactGroupCreateReq) GetGroupPrivacy() OptInt {
	return s.GroupPrivacy
}

// GetDescription returns the value of Description.
func (s *ContactGroupCreateReq) GetDescription() OptString {
	return s.Description
}

// GetGroupMembers returns the value of GroupMembers.
func (s *ContactGroupCreateReq) GetGroupMembers() []ContactGroupCreateReqGroupMembersItem {
	return s.GroupMembers
}

// SetGroupName sets the value of GroupName.
func (s *ContactGroupCreateReq) SetGroupName(val OptString) {
	s.GroupName = val
}

// SetGroupPrivacy sets the value of GroupPrivacy.
func (s *ContactGroupCreateReq) SetGroupPrivacy(val OptInt) {
	s.GroupPrivacy = val
}

// SetDescription sets the value of Description.
func (s *ContactGroupCreateReq) SetDescription(val OptString) {
	s.Description = val
}

// SetGroupMembers sets the value of GroupMembers.
func (s *ContactGroupCreateReq) SetGroupMembers(val []ContactGroupCreateReqGroupMembersItem) {
	s.GroupMembers = val
}

// The contact group member information. The member type can be a `user` or `user group`. The maximum
// number members per request is 50 for the `user` and 3 for the `user group`.
type ContactGroupCreateReqGroupMembersItem struct {
	// Contact group member types:
	// `1` - user.
	// `2` - user group.
	Type OptInt `json:"type"`
	// The member ID: user ID (`user`) or user group ID (`user group`).
	ID OptString `json:"id"`
}

// GetType returns the value of Type.
func (s *ContactGroupCreateReqGroupMembersItem) GetType() OptInt {
	return s.Type
}

// GetID returns the value of ID.
func (s *ContactGroupCreateReqGroupMembersItem) GetID() OptString {
	return s.ID
}

// SetType sets the value of Type.
func (s *ContactGroupCreateReqGroupMembersItem) SetType(val OptInt) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *ContactGroupCreateReqGroupMembersItem) SetID(val OptString) {
	s.ID = val
}

// ContactGroupDeleteNoContent is response for ContactGroupDelete operation.
type ContactGroupDeleteNoContent struct{}

type ContactGroupMemberAddCreated struct {
	MemberIds []string `json:"member_ids"`
}

// GetMemberIds returns the value of MemberIds.
func (s *ContactGroupMemberAddCreated) GetMemberIds() []string {
	return s.MemberIds
}

// SetMemberIds sets the value of MemberIds.
func (s *ContactGroupMemberAddCreated) SetMemberIds(val []string) {
	s.MemberIds = val
}

type ContactGroupMemberAddReq struct {
	GroupMembers []ContactGroupMemberAddReqGroupMembersItem `json:"group_members"`
}

// GetGroupMembers returns the value of GroupMembers.
func (s *ContactGroupMemberAddReq) GetGroupMembers() []ContactGroupMemberAddReqGroupMembersItem {
	return s.GroupMembers
}

// SetGroupMembers sets the value of GroupMembers.
func (s *ContactGroupMemberAddReq) SetGroupMembers(val []ContactGroupMemberAddReqGroupMembersItem) {
	s.GroupMembers = val
}

// The contact group member information. The member type can be a `user` or `user group`. The maximum
// number members per request is 50 for the `user` and 3 for the `user group`.
type ContactGroupMemberAddReqGroupMembersItem struct {
	// Contact group member types:
	// `1` - user.
	// `2` - user group.
	Type OptInt `json:"type"`
	// The member ID: user ID (`user`) or user group ID (`user group`).
	ID OptString `json:"id"`
}

// GetType returns the value of Type.
func (s *ContactGroupMemberAddReqGroupMembersItem) GetType() OptInt {
	return s.Type
}

// GetID returns the value of ID.
func (s *ContactGroupMemberAddReqGroupMembersItem) GetID() OptString {
	return s.ID
}

// SetType sets the value of Type.
func (s *ContactGroupMemberAddReqGroupMembersItem) SetType(val OptInt) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *ContactGroupMemberAddReqGroupMembersItem) SetID(val OptString) {
	s.ID = val
}

// ContactGroupMemberRemoveNoContent is response for ContactGroupMemberRemove operation.
type ContactGroupMemberRemoveNoContent struct{}

type ContactGroupMembersOK struct {
	// List of contact group members.
	Members []ContactGroupMembersOKMembersItem `json:"members"`
	// The next page token is used to paginate through large result sets. A next page token will be
	// returned whenever the set of available results exceeds the current page size. The expiration
	// period for this token is 15 minutes.
	NextPageToken OptString `json:"next_page_token"`
	// The number of records returned within a single API call.
	PageSize OptInt `json:"page_size"`
}

// GetMembers returns the value of Members.
func (s *ContactGroupMembersOK) GetMembers() []ContactGroupMembersOKMembersItem {
	return s.Members
}

// GetNextPageToken returns the value of NextPageToken.
func (s *ContactGroupMembersOK) GetNextPageToken() OptString {
	return s.NextPageToken
}

// GetPageSize returns the value of PageSize.
func (s *ContactGroupMembersOK) GetPageSize() OptInt {
	return s.PageSize
}

// SetMembers sets the value of Members.
func (s *ContactGroupMembersOK) SetMembers(val []ContactGroupMembersOKMembersItem) {
	s.Members = val
}

// SetNextPageToken sets the value of NextPageToken.
func (s *ContactGroupMembersOK) SetNextPageToken(val OptString) {
	s.NextPageToken = val
}

// SetPageSize sets the value of PageSize.
func (s *ContactGroupMembersOK) SetPageSize(val OptInt) {
	s.PageSize = val
}

// The contact group member information for `user` or `user group`.
type ContactGroupMembersOKMembersItem struct {
	// Contact group member types:
	// `1` - user.
	// `2` - user group.
	Type OptInt `json:"type"`
	// The member ID: user ID (`user`) or user group ID (`user group`).
	ID OptString `json:"id"`
	// The member's name: user's name (`user`) or the group's name (`user group`).
	Name OptString `json:"name"`
}

// GetType returns the value of Type.
func (s *ContactGroupMembersOKMembersItem) GetType() OptInt {
	return s.Type
}

// GetID returns the value of ID.
func (s *ContactGroupMembersOKMembersItem) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *ContactGroupMembersOKMembersItem) GetName() OptString {
	return s.Name
}

// SetType sets the value of Type.
func (s *ContactGroupMembersOKMembersItem) SetType(val OptInt) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *ContactGroupMembersOKMembersItem) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *ContactGroupMembersOKMembersItem) SetName(val OptString) {
	s.Name = val
}

// The contact group information.
type ContactGroupOK struct {
	// The group ID.
	GroupID OptString `json:"group_id"`
	// The group name.
	GroupName OptString `json:"group_name"`
	// The total number of members in a contact group.
	TotalMembers OptInt `json:"total_members"`
	// The contact group privacy configuration:
	// `1` - Visible to anyone, searchable by anyone.
	// `2` - Visible to members only, searchable by anyone.
	// `3` - Visible to members only, searchable by members only.
	GroupPrivacy OptInt `json:"group_privacy"`
	// The group description.
	Description OptString `json:"description"`
}

// GetGroupID returns the value of GroupID.
func (s *ContactGroupOK) GetGroupID() OptString {
	return s.GroupID
}

// GetGroupName returns the value of GroupName.
func (s *ContactGroupOK) GetGroupName() OptString {
	return s.GroupName
}

// GetTotalMembers returns the value of TotalMembers.
func (s *ContactGroupOK) GetTotalMembers() OptInt {
	return s.TotalMembers
}

// GetGroupPrivacy returns the value of GroupPrivacy.
func (s *ContactGroupOK) GetGroupPrivacy() OptInt {
	return s.GroupPrivacy
}

// GetDescription returns the value of Description.
func (s *ContactGroupOK) GetDescription() OptString {
	return s.Description
}

// SetGroupID sets the value of GroupID.
func (s *ContactGroupOK) SetGroupID(val OptString) {
	s.GroupID = val
}

// SetGroupName sets the value of GroupName.
func (s *ContactGroupOK) SetGroupName(val OptString) {
	s.GroupName = val
}

// SetTotalMembers sets the value of TotalMembers.
func (s *ContactGroupOK) SetTotalMembers(val OptInt) {
	s.TotalMembers = val
}

// SetGroupPrivacy sets the value of GroupPrivacy.
func (s *ContactGroupOK) SetGroupPrivacy(val OptInt) {
	s.GroupPrivacy = val
}

// SetDescription sets the value of Description.
func (s *ContactGroupOK) SetDescription(val OptString) {
	s.Description = val
}

// ContactGroupUpdateNoContent is response for ContactGroupUpdate operation.
type ContactGroupUpdateNoContent struct{}

type ContactGroupUpdateReq struct {
	// The contact group's name.
	Name OptString `json:"name"`
	// Contact group privacy configuration:
	// `1` - Visible to anyone, searchable by anyone.
	// `2` - Visible to members only, searchable by anyone.
	// `3` - Visible to members only, searchable by members only.
	Privacy OptInt `json:"privacy"`
	// The group description.
	Description OptString `json:"description"`
}

// GetName returns the value of Name.
func (s *ContactGroupUpdateReq) GetName() OptString {
	return s.Name
}

// GetPrivacy returns the value of Privacy.
func (s *ContactGroupUpdateReq) GetPrivacy() OptInt {
	return s.Privacy
}

// GetDescription returns the value of Description.
func (s *ContactGroupUpdateReq) GetDescription() OptString {
	return s.Description
}

// SetName sets the value of Name.
func (s *ContactGroupUpdateReq) SetName(val OptString) {
	s.Name = val
}

// SetPrivacy sets the value of Privacy.
func (s *ContactGroupUpdateReq) SetPrivacy(val OptInt) {
	s.Privacy = val
}

// SetDescription sets the value of Description.
func (s *ContactGroupUpdateReq) SetDescription(val OptString) {
	s.Description = val
}

type ContactGroupsOK struct {
	// List of contact group objects.
	Groups []ContactGroupsOKGroupsItem `json:"groups"`
	// The next page token is used to paginate through large result sets. A next page token will be
	// returned whenever the set of available results exceeds the current page size. The expiration
	// period for this token is 15 minutes.
	NextPageToken OptString `json:"next_page_token"`
	// The number of records returned within a single API call.
	PageSize OptInt `json:"page_size"`
}

// GetGroups returns the value of Groups.
func (s *ContactGroupsOK) GetGroups() []ContactGroupsOKGroupsItem {
	return s.Groups
}

// GetNextPageToken returns the value of NextPageToken.
func (s *ContactGroupsOK) GetNextPageToken() OptString {
	return s.NextPageToken
}

// GetPageSize returns the value of PageSize.
func (s *ContactGroupsOK) GetPageSize() OptInt {
	return s.PageSize
}

// SetGroups sets the value of Groups.
func (s *ContactGroupsOK) SetGroups(val []ContactGroupsOKGroupsItem) {
	s.Groups = val
}

// SetNextPageToken sets the value of NextPageToken.
func (s *ContactGroupsOK) SetNextPageToken(val OptString) {
	s.NextPageToken = val
}

// SetPageSize sets the value of PageSize.
func (s *ContactGroupsOK) SetPageSize(val OptInt) {
	s.PageSize = val
}

type ContactGroupsOKGroupsItem struct {
	// The group ID.
	GroupID OptString `json:"group_id"`
	// The group name.
	GroupName OptString `json:"group_name"`
	// The contact group privacy configuration:
	// `1` - Visible to anyone, searchable by anyone.
	// `2` - Visible to members only, searchable by anyone.
	// `3` - Visible to members only, searchable by members only.
	GroupPrivacy OptInt `json:"group_privacy"`
	// The group description.
	Description OptString `json:"description"`
}

// GetGroupID returns the value of GroupID.
func (s *ContactGroupsOKGroupsItem) GetGroupID() OptString {
	return s.GroupID
}

// GetGroupName returns the value of GroupName.
func (s *ContactGroupsOKGroupsItem) GetGroupName() OptString {
	return s.GroupName
}

// GetGroupPrivacy returns the value of GroupPrivacy.
func (s *ContactGroupsOKGroupsItem) GetGroupPrivacy() OptInt {
	return s.GroupPrivacy
}

// GetDescription returns the value of Description.
func (s *ContactGroupsOKGroupsItem) GetDescription() OptString {
	return s.Description
}

// SetGroupID sets the value of GroupID.
func (s *ContactGroupsOKGroupsItem) SetGroupID(val OptString) {
	s.GroupID = val
}

// SetGroupName sets the value of GroupName.
func (s *ContactGroupsOKGroupsItem) SetGroupName(val OptString) {
	s.GroupName = val
}

// SetGroupPrivacy sets the value of GroupPrivacy.
func (s *ContactGroupsOKGroupsItem) SetGroupPrivacy(val OptInt) {
	s.GroupPrivacy = val
}

// SetDescription sets the value of Description.
func (s *ContactGroupsOKGroupsItem) SetDescription(val OptString) {
	s.Description = val
}

// DelGroupVBNoContent is response for DelGroupVB operation.
type DelGroupVBNoContent struct{}

// DelUserVBNoContent is response for DelUserVB operation.
type DelUserVBNoContent struct{}

// Ref: #/components/schemas/ErrorResponse
type ErrorResponse struct {
	Code    OptInt                    `json:"code"`
	Message OptString                 `json:"message"`
	Errors  []ErrorResponseErrorsItem `json:"errors"`
}

// GetCode returns the value of Code.
func (s *ErrorResponse) GetCode() OptInt {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *ErrorResponse) GetMessage() OptString {
	return s.Message
}

// GetErrors returns the value of Errors.
func (s *ErrorResponse) GetErrors() []ErrorResponseErrorsItem {
	return s.Errors
}

// SetCode sets the value of Code.
func (s *ErrorResponse) SetCode(val OptInt) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *ErrorResponse) SetMessage(val OptString) {
	s.Message = val
}

// SetErrors sets the value of Errors.
func (s *ErrorResponse) SetErrors(val []ErrorResponseErrorsItem) {
	s.Errors = val
}

type ErrorResponseErrorsItem struct {
	Field      OptString `json:"field"`
	FieldValue OptString `json:"field_value"`
	Message    OptString `json:"message"`
}

// GetField returns the value of Field.
func (s *ErrorResponseErrorsItem) GetField() OptString {
	return s.Field
}

// GetFieldValue returns the value of FieldValue.
func (s *ErrorResponseErrorsItem) GetFieldValue() OptString {
	return s.FieldValue
}

// GetMessage returns the value of Message.
func (s *ErrorResponseErrorsItem) GetMessage() OptString {
	return s.Message
}

// SetField sets the value of Field.
func (s *ErrorResponseErrorsItem) SetField(val OptString) {
	s.Field = val
}

// SetFieldValue sets the value of FieldValue.
func (s *ErrorResponseErrorsItem) SetFieldValue(val OptString) {
	s.FieldValue = val
}

// SetMessage sets the value of Message.
func (s *ErrorResponseErrorsItem) SetMessage(val OptString) {
	s.Message = val
}

// ErrorResponseStatusCode wraps ErrorResponse with StatusCode.
type ErrorResponseStatusCode struct {
	StatusCode int
	Response   ErrorResponse
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorResponseStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorResponseStatusCode) GetResponse() ErrorResponse {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorResponseStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorResponseStatusCode) SetResponse(val ErrorResponse) {
	s.Response = val
}

// Information about the collaboration device detail.
type GetCollaborationDeviceOK struct {
	// The device's unique identifier.
	ID OptString `json:"id"`
	// Name of the Personal Zoom Room's device.
	DeviceName OptString `json:"device_name"`
	// Name of the Personal Zoom Room.
	RoomName OptString `json:"room_name"`
	// The Zoom Room's unique identifier.
	RoomUserID OptString `json:"room_user_id"`
	// The device's status. The value can be either `Online` or `Offline`.
	Status OptString `json:"status"`
}

// GetID returns the value of ID.
func (s *GetCollaborationDeviceOK) GetID() OptString {
	return s.ID
}

// GetDeviceName returns the value of DeviceName.
func (s *GetCollaborationDeviceOK) GetDeviceName() OptString {
	return s.DeviceName
}

// GetRoomName returns the value of RoomName.
func (s *GetCollaborationDeviceOK) GetRoomName() OptString {
	return s.RoomName
}

// GetRoomUserID returns the value of RoomUserID.
func (s *GetCollaborationDeviceOK) GetRoomUserID() OptString {
	return s.RoomUserID
}

// GetStatus returns the value of Status.
func (s *GetCollaborationDeviceOK) GetStatus() OptString {
	return s.Status
}

// SetID sets the value of ID.
func (s *GetCollaborationDeviceOK) SetID(val OptString) {
	s.ID = val
}

// SetDeviceName sets the value of DeviceName.
func (s *GetCollaborationDeviceOK) SetDeviceName(val OptString) {
	s.DeviceName = val
}

// SetRoomName sets the value of RoomName.
func (s *GetCollaborationDeviceOK) SetRoomName(val OptString) {
	s.RoomName = val
}

// SetRoomUserID sets the value of RoomUserID.
func (s *GetCollaborationDeviceOK) SetRoomUserID(val OptString) {
	s.RoomUserID = val
}

// SetStatus sets the value of Status.
func (s *GetCollaborationDeviceOK) SetStatus(val OptString) {
	s.Status = val
}

// GetGroupLockSettingsOK represents sum type.
type GetGroupLockSettingsOK struct {
	Type                    GetGroupLockSettingsOKType // switch on this field
	GetGroupLockSettingsOK0 GetGroupLockSettingsOK0
	GetGroupLockSettingsOK1 GetGroupLockSettingsOK1
}

// GetGroupLockSettingsOKType is oneOf type of GetGroupLockSettingsOK.
type GetGroupLockSettingsOKType string

// Possible values for GetGroupLockSettingsOKType.
const (
	GetGroupLockSettingsOK0GetGroupLockSettingsOK GetGroupLockSettingsOKType = "GetGroupLockSettingsOK0"
	GetGroupLockSettingsOK1GetGroupLockSettingsOK GetGroupLockSettingsOKType = "GetGroupLockSettingsOK1"
)

// IsGetGroupLockSettingsOK0 reports whether GetGroupLockSettingsOK is GetGroupLockSettingsOK0.
func (s GetGroupLockSettingsOK) IsGetGroupLockSettingsOK0() bool {
	return s.Type == GetGroupLockSettingsOK0GetGroupLockSettingsOK
}

// IsGetGroupLockSettingsOK1 reports whether GetGroupLockSettingsOK is GetGroupLockSettingsOK1.
func (s GetGroupLockSettingsOK) IsGetGroupLockSettingsOK1() bool {
	return s.Type == GetGroupLockSettingsOK1GetGroupLockSettingsOK
}

// SetGetGroupLockSettingsOK0 sets GetGroupLockSettingsOK to GetGroupLockSettingsOK0.
func (s *GetGroupLockSettingsOK) SetGetGroupLockSettingsOK0(v GetGroupLockSettingsOK0) {
	s.Type = GetGroupLockSettingsOK0GetGroupLockSettingsOK
	s.GetGroupLockSettingsOK0 = v
}

// GetGetGroupLockSettingsOK0 returns GetGroupLockSettingsOK0 and true boolean if GetGroupLockSettingsOK is GetGroupLockSettingsOK0.
func (s GetGroupLockSettingsOK) GetGetGroupLockSettingsOK0() (v GetGroupLockSettingsOK0, ok bool) {
	if !s.IsGetGroupLockSettingsOK0() {
		return v, false
	}
	return s.GetGroupLockSettingsOK0, true
}

// NewGetGroupLockSettingsOK0GetGroupLockSettingsOK returns new GetGroupLockSettingsOK from GetGroupLockSettingsOK0.
func NewGetGroupLockSettingsOK0GetGroupLockSettingsOK(v GetGroupLockSettingsOK0) GetGroupLockSettingsOK {
	var s GetGroupLockSettingsOK
	s.SetGetGroupLockSettingsOK0(v)
	return s
}

// SetGetGroupLockSettingsOK1 sets GetGroupLockSettingsOK to GetGroupLockSettingsOK1.
func (s *GetGroupLockSettingsOK) SetGetGroupLockSettingsOK1(v GetGroupLockSettingsOK1) {
	s.Type = GetGroupLockSettingsOK1GetGroupLockSettingsOK
	s.GetGroupLockSettingsOK1 = v
}

// GetGetGroupLockSettingsOK1 returns GetGroupLockSettingsOK1 and true boolean if GetGroupLockSettingsOK is GetGroupLockSettingsOK1.
func (s GetGroupLockSettingsOK) GetGetGroupLockSettingsOK1() (v GetGroupLockSettingsOK1, ok bool) {
	if !s.IsGetGroupLockSettingsOK1() {
		return v, false
	}
	return s.GetGroupLockSettingsOK1, true
}

// NewGetGroupLockSettingsOK1GetGroupLockSettingsOK returns new GetGroupLockSettingsOK from GetGroupLockSettingsOK1.
func NewGetGroupLockSettingsOK1GetGroupLockSettingsOK(v GetGroupLockSettingsOK1) GetGroupLockSettingsOK {
	var s GetGroupLockSettingsOK
	s.SetGetGroupLockSettingsOK1(v)
	return s
}

type GetGroupLockSettingsOK0 struct {
	AudioConferencing OptGetGroupLockSettingsOK0AudioConferencing `json:"audio_conferencing"`
	EmailNotification OptGetGroupLockSettingsOK0EmailNotification `json:"email_notification"`
	InMeeting         OptGetGroupLockSettingsOK0InMeeting         `json:"in_meeting"`
	OtherOptions      OptGetGroupLockSettingsOK0OtherOptions      `json:"other_options"`
	Recording         OptGetGroupLockSettingsOK0Recording         `json:"recording"`
	ScheduleMeeting   OptGetGroupLockSettingsOK0ScheduleMeeting   `json:"schedule_meeting"`
	Telephony         OptGetGroupLockSettingsOK0Telephony         `json:"telephony"`
}

// GetAudioConferencing returns the value of AudioConferencing.
func (s *GetGroupLockSettingsOK0) GetAudioConferencing() OptGetGroupLockSettingsOK0AudioConferencing {
	return s.AudioConferencing
}

// GetEmailNotification returns the value of EmailNotification.
func (s *GetGroupLockSettingsOK0) GetEmailNotification() OptGetGroupLockSettingsOK0EmailNotification {
	return s.EmailNotification
}

// GetInMeeting returns the value of InMeeting.
func (s *GetGroupLockSettingsOK0) GetInMeeting() OptGetGroupLockSettingsOK0InMeeting {
	return s.InMeeting
}

// GetOtherOptions returns the value of OtherOptions.
func (s *GetGroupLockSettingsOK0) GetOtherOptions() OptGetGroupLockSettingsOK0OtherOptions {
	return s.OtherOptions
}

// GetRecording returns the value of Recording.
func (s *GetGroupLockSettingsOK0) GetRecording() OptGetGroupLockSettingsOK0Recording {
	return s.Recording
}

// GetScheduleMeeting returns the value of ScheduleMeeting.
func (s *GetGroupLockSettingsOK0) GetScheduleMeeting() OptGetGroupLockSettingsOK0ScheduleMeeting {
	return s.ScheduleMeeting
}

// GetTelephony returns the value of Telephony.
func (s *GetGroupLockSettingsOK0) GetTelephony() OptGetGroupLockSettingsOK0Telephony {
	return s.Telephony
}

// SetAudioConferencing sets the value of AudioConferencing.
func (s *GetGroupLockSettingsOK0) SetAudioConferencing(val OptGetGroupLockSettingsOK0AudioConferencing) {
	s.AudioConferencing = val
}

// SetEmailNotification sets the value of EmailNotification.
func (s *GetGroupLockSettingsOK0) SetEmailNotification(val OptGetGroupLockSettingsOK0EmailNotification) {
	s.EmailNotification = val
}

// SetInMeeting sets the value of InMeeting.
func (s *GetGroupLockSettingsOK0) SetInMeeting(val OptGetGroupLockSettingsOK0InMeeting) {
	s.InMeeting = val
}

// SetOtherOptions sets the value of OtherOptions.
func (s *GetGroupLockSettingsOK0) SetOtherOptions(val OptGetGroupLockSettingsOK0OtherOptions) {
	s.OtherOptions = val
}

// SetRecording sets the value of Recording.
func (s *GetGroupLockSettingsOK0) SetRecording(val OptGetGroupLockSettingsOK0Recording) {
	s.Recording = val
}

// SetScheduleMeeting sets the value of ScheduleMeeting.
func (s *GetGroupLockSettingsOK0) SetScheduleMeeting(val OptGetGroupLockSettingsOK0ScheduleMeeting) {
	s.ScheduleMeeting = val
}

// SetTelephony sets the value of Telephony.
func (s *GetGroupLockSettingsOK0) SetTelephony(val OptGetGroupLockSettingsOK0Telephony) {
	s.Telephony = val
}

type GetGroupLockSettingsOK0AudioConferencing struct {
	// Whether the group has the [**Toll-free and Fee-based Toll Call**](https://support.zoom.
	// us/hc/en-us/articles/360060950711-Enabling-Toll-free-and-Fee-based-Toll-Call) setting enabled.
	TollFreeAndFeeBasedTollCall OptBool `json:"toll_free_and_fee_based_toll_call"`
}

// GetTollFreeAndFeeBasedTollCall returns the value of TollFreeAndFeeBasedTollCall.
func (s *GetGroupLockSettingsOK0AudioConferencing) GetTollFreeAndFeeBasedTollCall() OptBool {
	return s.TollFreeAndFeeBasedTollCall
}

// SetTollFreeAndFeeBasedTollCall sets the value of TollFreeAndFeeBasedTollCall.
func (s *GetGroupLockSettingsOK0AudioConferencing) SetTollFreeAndFeeBasedTollCall(val OptBool) {
	s.TollFreeAndFeeBasedTollCall = val
}

type GetGroupLockSettingsOK0EmailNotification struct {
	// Notify the alternative host who is set or removed.
	AlternativeHostReminder OptBool `json:"alternative_host_reminder"`
	// Notify host and participants when the meeting is cancelled.
	//
	// Deprecated: schema marks this property as deprecated.
	CancelMeetingReminder OptBool `json:"cancel_meeting_reminder"`
	// Whether to notify the host when a cloud recording is available.
	CloudRecordingAvailableReminder OptBool `json:"cloud_recording_available_reminder"`
	// Notify host when participants join the meeting before them.
	JbhReminder OptBool `json:"jbh_reminder"`
	// Notify the host there is a meeting is scheduled, rescheduled, or cancelled.
	ScheduleForReminder OptBool `json:"schedule_for_reminder"`
}

// GetAlternativeHostReminder returns the value of AlternativeHostReminder.
func (s *GetGroupLockSettingsOK0EmailNotification) GetAlternativeHostReminder() OptBool {
	return s.AlternativeHostReminder
}

// GetCancelMeetingReminder returns the value of CancelMeetingReminder.
func (s *GetGroupLockSettingsOK0EmailNotification) GetCancelMeetingReminder() OptBool {
	return s.CancelMeetingReminder
}

// GetCloudRecordingAvailableReminder returns the value of CloudRecordingAvailableReminder.
func (s *GetGroupLockSettingsOK0EmailNotification) GetCloudRecordingAvailableReminder() OptBool {
	return s.CloudRecordingAvailableReminder
}

// GetJbhReminder returns the value of JbhReminder.
func (s *GetGroupLockSettingsOK0EmailNotification) GetJbhReminder() OptBool {
	return s.JbhReminder
}

// GetScheduleForReminder returns the value of ScheduleForReminder.
func (s *GetGroupLockSettingsOK0EmailNotification) GetScheduleForReminder() OptBool {
	return s.ScheduleForReminder
}

// SetAlternativeHostReminder sets the value of AlternativeHostReminder.
func (s *GetGroupLockSettingsOK0EmailNotification) SetAlternativeHostReminder(val OptBool) {
	s.AlternativeHostReminder = val
}

// SetCancelMeetingReminder sets the value of CancelMeetingReminder.
func (s *GetGroupLockSettingsOK0EmailNotification) SetCancelMeetingReminder(val OptBool) {
	s.CancelMeetingReminder = val
}

// SetCloudRecordingAvailableReminder sets the value of CloudRecordingAvailableReminder.
func (s *GetGroupLockSettingsOK0EmailNotification) SetCloudRecordingAvailableReminder(val OptBool) {
	s.CloudRecordingAvailableReminder = val
}

// SetJbhReminder sets the value of JbhReminder.
func (s *GetGroupLockSettingsOK0EmailNotification) SetJbhReminder(val OptBool) {
	s.JbhReminder = val
}

// SetScheduleForReminder sets the value of ScheduleForReminder.
func (s *GetGroupLockSettingsOK0EmailNotification) SetScheduleForReminder(val OptBool) {
	s.ScheduleForReminder = val
}

type GetGroupLockSettingsOK0InMeeting struct {
	// Allow participants who belong to your account to see that a guest (someone who does not belong to
	// your account) is participating in the meeting/webinar.
	AlertGuestJoin OptBool `json:"alert_guest_join"`
	// If the value of this field is set to `true`, allow users to delete messages in the in-meeting chat.
	AllowUsersToDeleteMessagesInMeetingChat OptBool `json:"allow_users_to_delete_messages_in_meeting_chat"`
	// Whether to allow livestreaming.
	AllowLiveStreaming OptBool `json:"allow_live_streaming"`
	// Show Zoom windows during screen share.
	AllowShowZoomWindows OptBool `json:"allow_show_zoom_windows"`
	// Allow participants to use annotation tools to add information to shared screens.
	Annotation OptBool `json:"annotation"`
	// Allow host to put attendee on hold.
	// **This field has been deprecated and is no longer supported.**.
	//
	// Deprecated: schema marks this property as deprecated.
	AttendeeOnHold OptBool `json:"attendee_on_hold"`
	// Enable users to see and add contacts to 'auto-answer group' in the contact list on chat. Any call
	// from members of this group will be automatically answered.
	AutoAnswer OptBool `json:"auto_answer"`
	// Whether to allow a live transcription service to transcribe meetings.
	AutoGeneratedCaptions OptBool `json:"auto_generated_captions"`
	// Automatically save all in-meeting chats.
	AutoSavingChat OptBool `json:"auto_saving_chat"`
	// Allow host to split meeting participants into separate, smaller rooms.
	BreakoutRoom OptBool `json:"breakout_room"`
	// Allow meeting participants to send chat message visible to all participants.
	Chat OptBool `json:"chat"`
	// Allow participants to ask questions for the host and participants to answer.
	MeetingQuestionAnswer OptBool `json:"meeting_question_answer"`
	// Allow host to type closed captions or assign a participant or third party device to add closed
	// captions.
	ClosedCaption OptBool `json:"closed_caption"`
	// Allow the host to add co-hosts. Co-hosts have the same in-meeting controls as the host.
	CoHost OptBool `json:"co_host"`
	// Displays whether or not custom [data center regions](https://support.zoom.
	// us/hc/en-us/articles/360042411451-Selecting-data-center-regions-for-hosted-meetings-and-webinars)
	// have been selected for meetings/webinars hosted by this group.
	CustomDataCenterRegions OptBool `json:"custom_data_center_regions"`
	// Whether the **Disable desktop screen sharing for meetings you host** setting is enabled.
	DisableScreenSharingForHostMeetings OptBool `json:"disable_screen_sharing_for_host_meetings"`
	// Whether the **Disable screen sharing when guests are in the meeting** setting is enabled.
	DisableScreenSharingForInMeetingGuests OptBool `json:"disable_screen_sharing_for_in_meeting_guests"`
	// Require that all meetings are encrypted using AES.
	E2eEncryption OptBool `json:"e2e_encryption"`
	// Play sound when participants join or leave.
	EntryExitChime OptString `json:"entry_exit_chime"`
	// Allow another user to take control of the camera during a meeting.
	FarEndCameraControl OptBool `json:"far_end_camera_control"`
	// Enable users to provide feedback to Zoom at the end of the meeting.
	Feedback OptBool `json:"feedback"`
	// Indicates whether [in-meeting file transfer](https://support.zoom.
	// us/hc/en-us/articles/209605493-In-meeting-file-transfer) setting has been enabled for the users in
	// the group or not.
	FileTransfer OptBool `json:"file_transfer"`
	// Whether to allow the viewing of full transcripts in the in-meeting side panel.
	FullTranscript OptBool `json:"full_transcript"`
	// Enable higher quality video for host and participants in a meeting. This will require more
	// bandwidth.
	GroupHd OptBool `json:"group_hd"`
	// Enable higher quality video for host and participants in a webinar. This will require more
	// bandwidth.
	WebinarGroupHd OptBool `json:"webinar_group_hd"`
	// Whether to allow hosts to assign participants as interpreters who can interpret one language into
	// another in real-time.
	LanguageInterpretation OptBool `json:"language_interpretation"`
	// Allow hosts to assign participants as sign language interpreters who can interpret one language
	// into sign language in real-time. Hosts can assign interpreters when scheduling, or during the
	// meeting itself. This feature is only available with version 5.11.3 or later.
	SignLanguageInterpretation OptBool `json:"sign_language_interpretation"`
	// Allow host to type closed captions or assign a participant or third party device to add closed
	// captions.
	ManualCaptions OptBool `json:"manual_captions"`
	// Whether meeting participants can [communicate using the emoji reactions](https://support.zoom.
	// us/hc/en-us/articles/115001286183-Nonverbal-feedback-and-meeting-reactions) located in the
	// **Reactions** menu in the meeting toolbar.
	MeetingReactions OptBool `json:"meeting_reactions"`
	// Set this field to true to use [webinar reactions](https://support.zoom.
	// us/hc/en-us/articles/4803536268429).
	WebinarReactions OptBool `json:"webinar_reactions"`
	// Whether the host can present a survey to participants once a meeting has ended. This feature is
	// only available in version 5.7.3 or higher.
	MeetingSurvey OptBool `json:"meeting_survey"`
	// Allow participants in a meeting can provide nonverbal feedback and express opinions by clicking on
	// icons in the Participants panel.
	NonVerbalFeedback OptBool `json:"non_verbal_feedback"`
	// Allow users to select original sound during a meeting.
	OriginalAudio OptBool `json:"original_audio"`
	// Add 'Polls' to the meeting controls. This allows the host to survey the attendees.
	Polling OptBool `json:"polling"`
	// Display end-of-meeting experience feedback survey.
	PostMeetingFeedback OptBool `json:"post_meeting_feedback"`
	// Allow meeting participants to send a private 1:1 message to another participant.
	PrivateChat OptBool `json:"private_chat"`
	// During screen sharing, allow the person who is sharing to let others control the shared content.
	RemoteControl OptBool `json:"remote_control"`
	// Allow meeting host to provide 1:1 remote support to another participant.
	RemoteSupport OptBool `json:"remote_support"`
	// Indicates whether the [**Request permission to unmute participants**](https://support.zoom.
	// us/hc/en-us/articles/203435537-Muting-and-unmuting-participants-in-a-meeting#h_01EGK4XFWS1SJGZ71MYGKF7260) option has been enabled and locked for the group or not.
	RequestPermissionToUnmuteParticipants OptBool `json:"request_permission_to_unmute_participants"`
	// Whether participants can save closed captions or transcripts.
	SaveCaption OptBool `json:"save_caption"`
	// Whether participants can save closed captions or transcripts.
	SaveCaptions OptBool `json:"save_captions"`
	// Allow host and participants to share their screen or content during meetings.
	ScreenSharing OptBool `json:"screen_sharing"`
	// Allow users to invite participants by email only by default.
	SendingDefaultEmailInvites OptBool `json:"sending_default_email_invites"`
	// Whether to allow participants to join a meeting directly from their browser and bypass the Zoom
	// application download process. This is useful for participants who cannot download, install, or run
	// applications. Note that the meeting experience from the browser is limited.
	ShowAJoinFromYourBrowserLink OptBool `json:"show_a_join_from_your_browser_link"`
	// Allow participants to join a meeting directly from their browser.
	ShowBrowserJoinLink OptBool `json:"show_browser_join_link"`
	// Always show meeting controls during a meeting.
	ShowMeetingControlToolbar OptBool `json:"show_meeting_control_toolbar"`
	// Whether the person sharing during a presentation can allow others to control the slide
	// presentation. This feature is only available in version 5.8.3 or higher.
	SlideControl OptBool `json:"slide_control"`
	// Allow users to select stereo audio during a meeting.
	StereoAudio OptBool `json:"stereo_audio"`
	// Allow HTML formatting instead of plain text for meeting invitations scheduled with the Outlook
	// plugin.
	UseHTMLFormatEmail OptBool `json:"use_html_format_email"`
	// Enable virtual backgrounds.
	VirtualBackground OptBool `json:"virtual_background"`
	// Attendees cannot join a meeting until a host admits them individually from the waiting room.
	WaitingRoom OptBool `json:"waiting_room"`
	// Whether to allow webinar participants to send chat messages.
	WebinarChat OptBool `json:"webinar_chat"`
	// Whether webinar livestreaming is enabled.
	WebinarLiveStreaming OptBool `json:"webinar_live_streaming"`
	// Whether the host can add polls before or during a webinar.
	WebinarPolling OptBool `json:"webinar_polling"`
	// Whether attendees can ask the host and panelists questions in the webinar.
	WebinarQuestionAnswer OptBool `json:"webinar_question_answer"`
	// Whether the host can present surveys to attendees once a webinar has ended.
	WebinarSurvey OptBool `json:"webinar_survey"`
	// Allow participants to share a whiteboard that includes annotation tools.
	Whiteboard OptBool `json:"whiteboard"`
}

// GetAlertGuestJoin returns the value of AlertGuestJoin.
func (s *GetGroupLockSettingsOK0InMeeting) GetAlertGuestJoin() OptBool {
	return s.AlertGuestJoin
}

// GetAllowUsersToDeleteMessagesInMeetingChat returns the value of AllowUsersToDeleteMessagesInMeetingChat.
func (s *GetGroupLockSettingsOK0InMeeting) GetAllowUsersToDeleteMessagesInMeetingChat() OptBool {
	return s.AllowUsersToDeleteMessagesInMeetingChat
}

// GetAllowLiveStreaming returns the value of AllowLiveStreaming.
func (s *GetGroupLockSettingsOK0InMeeting) GetAllowLiveStreaming() OptBool {
	return s.AllowLiveStreaming
}

// GetAllowShowZoomWindows returns the value of AllowShowZoomWindows.
func (s *GetGroupLockSettingsOK0InMeeting) GetAllowShowZoomWindows() OptBool {
	return s.AllowShowZoomWindows
}

// GetAnnotation returns the value of Annotation.
func (s *GetGroupLockSettingsOK0InMeeting) GetAnnotation() OptBool {
	return s.Annotation
}

// GetAttendeeOnHold returns the value of AttendeeOnHold.
func (s *GetGroupLockSettingsOK0InMeeting) GetAttendeeOnHold() OptBool {
	return s.AttendeeOnHold
}

// GetAutoAnswer returns the value of AutoAnswer.
func (s *GetGroupLockSettingsOK0InMeeting) GetAutoAnswer() OptBool {
	return s.AutoAnswer
}

// GetAutoGeneratedCaptions returns the value of AutoGeneratedCaptions.
func (s *GetGroupLockSettingsOK0InMeeting) GetAutoGeneratedCaptions() OptBool {
	return s.AutoGeneratedCaptions
}

// GetAutoSavingChat returns the value of AutoSavingChat.
func (s *GetGroupLockSettingsOK0InMeeting) GetAutoSavingChat() OptBool {
	return s.AutoSavingChat
}

// GetBreakoutRoom returns the value of BreakoutRoom.
func (s *GetGroupLockSettingsOK0InMeeting) GetBreakoutRoom() OptBool {
	return s.BreakoutRoom
}

// GetChat returns the value of Chat.
func (s *GetGroupLockSettingsOK0InMeeting) GetChat() OptBool {
	return s.Chat
}

// GetMeetingQuestionAnswer returns the value of MeetingQuestionAnswer.
func (s *GetGroupLockSettingsOK0InMeeting) GetMeetingQuestionAnswer() OptBool {
	return s.MeetingQuestionAnswer
}

// GetClosedCaption returns the value of ClosedCaption.
func (s *GetGroupLockSettingsOK0InMeeting) GetClosedCaption() OptBool {
	return s.ClosedCaption
}

// GetCoHost returns the value of CoHost.
func (s *GetGroupLockSettingsOK0InMeeting) GetCoHost() OptBool {
	return s.CoHost
}

// GetCustomDataCenterRegions returns the value of CustomDataCenterRegions.
func (s *GetGroupLockSettingsOK0InMeeting) GetCustomDataCenterRegions() OptBool {
	return s.CustomDataCenterRegions
}

// GetDisableScreenSharingForHostMeetings returns the value of DisableScreenSharingForHostMeetings.
func (s *GetGroupLockSettingsOK0InMeeting) GetDisableScreenSharingForHostMeetings() OptBool {
	return s.DisableScreenSharingForHostMeetings
}

// GetDisableScreenSharingForInMeetingGuests returns the value of DisableScreenSharingForInMeetingGuests.
func (s *GetGroupLockSettingsOK0InMeeting) GetDisableScreenSharingForInMeetingGuests() OptBool {
	return s.DisableScreenSharingForInMeetingGuests
}

// GetE2eEncryption returns the value of E2eEncryption.
func (s *GetGroupLockSettingsOK0InMeeting) GetE2eEncryption() OptBool {
	return s.E2eEncryption
}

// GetEntryExitChime returns the value of EntryExitChime.
func (s *GetGroupLockSettingsOK0InMeeting) GetEntryExitChime() OptString {
	return s.EntryExitChime
}

// GetFarEndCameraControl returns the value of FarEndCameraControl.
func (s *GetGroupLockSettingsOK0InMeeting) GetFarEndCameraControl() OptBool {
	return s.FarEndCameraControl
}

// GetFeedback returns the value of Feedback.
func (s *GetGroupLockSettingsOK0InMeeting) GetFeedback() OptBool {
	return s.Feedback
}

// GetFileTransfer returns the value of FileTransfer.
func (s *GetGroupLockSettingsOK0InMeeting) GetFileTransfer() OptBool {
	return s.FileTransfer
}

// GetFullTranscript returns the value of FullTranscript.
func (s *GetGroupLockSettingsOK0InMeeting) GetFullTranscript() OptBool {
	return s.FullTranscript
}

// GetGroupHd returns the value of GroupHd.
func (s *GetGroupLockSettingsOK0InMeeting) GetGroupHd() OptBool {
	return s.GroupHd
}

// GetWebinarGroupHd returns the value of WebinarGroupHd.
func (s *GetGroupLockSettingsOK0InMeeting) GetWebinarGroupHd() OptBool {
	return s.WebinarGroupHd
}

// GetLanguageInterpretation returns the value of LanguageInterpretation.
func (s *GetGroupLockSettingsOK0InMeeting) GetLanguageInterpretation() OptBool {
	return s.LanguageInterpretation
}

// GetSignLanguageInterpretation returns the value of SignLanguageInterpretation.
func (s *GetGroupLockSettingsOK0InMeeting) GetSignLanguageInterpretation() OptBool {
	return s.SignLanguageInterpretation
}

// GetManualCaptions returns the value of ManualCaptions.
func (s *GetGroupLockSettingsOK0InMeeting) GetManualCaptions() OptBool {
	return s.ManualCaptions
}

// GetMeetingReactions returns the value of MeetingReactions.
func (s *GetGroupLockSettingsOK0InMeeting) GetMeetingReactions() OptBool {
	return s.MeetingReactions
}

// GetWebinarReactions returns the value of WebinarReactions.
func (s *GetGroupLockSettingsOK0InMeeting) GetWebinarReactions() OptBool {
	return s.WebinarReactions
}

// GetMeetingSurvey returns the value of MeetingSurvey.
func (s *GetGroupLockSettingsOK0InMeeting) GetMeetingSurvey() OptBool {
	return s.MeetingSurvey
}

// GetNonVerbalFeedback returns the value of NonVerbalFeedback.
func (s *GetGroupLockSettingsOK0InMeeting) GetNonVerbalFeedback() OptBool {
	return s.NonVerbalFeedback
}

// GetOriginalAudio returns the value of OriginalAudio.
func (s *GetGroupLockSettingsOK0InMeeting) GetOriginalAudio() OptBool {
	return s.OriginalAudio
}

// GetPolling returns the value of Polling.
func (s *GetGroupLockSettingsOK0InMeeting) GetPolling() OptBool {
	return s.Polling
}

// GetPostMeetingFeedback returns the value of PostMeetingFeedback.
func (s *GetGroupLockSettingsOK0InMeeting) GetPostMeetingFeedback() OptBool {
	return s.PostMeetingFeedback
}

// GetPrivateChat returns the value of PrivateChat.
func (s *GetGroupLockSettingsOK0InMeeting) GetPrivateChat() OptBool {
	return s.PrivateChat
}

// GetRemoteControl returns the value of RemoteControl.
func (s *GetGroupLockSettingsOK0InMeeting) GetRemoteControl() OptBool {
	return s.RemoteControl
}

// GetRemoteSupport returns the value of RemoteSupport.
func (s *GetGroupLockSettingsOK0InMeeting) GetRemoteSupport() OptBool {
	return s.RemoteSupport
}

// GetRequestPermissionToUnmuteParticipants returns the value of RequestPermissionToUnmuteParticipants.
func (s *GetGroupLockSettingsOK0InMeeting) GetRequestPermissionToUnmuteParticipants() OptBool {
	return s.RequestPermissionToUnmuteParticipants
}

// GetSaveCaption returns the value of SaveCaption.
func (s *GetGroupLockSettingsOK0InMeeting) GetSaveCaption() OptBool {
	return s.SaveCaption
}

// GetSaveCaptions returns the value of SaveCaptions.
func (s *GetGroupLockSettingsOK0InMeeting) GetSaveCaptions() OptBool {
	return s.SaveCaptions
}

// GetScreenSharing returns the value of ScreenSharing.
func (s *GetGroupLockSettingsOK0InMeeting) GetScreenSharing() OptBool {
	return s.ScreenSharing
}

// GetSendingDefaultEmailInvites returns the value of SendingDefaultEmailInvites.
func (s *GetGroupLockSettingsOK0InMeeting) GetSendingDefaultEmailInvites() OptBool {
	return s.SendingDefaultEmailInvites
}

// GetShowAJoinFromYourBrowserLink returns the value of ShowAJoinFromYourBrowserLink.
func (s *GetGroupLockSettingsOK0InMeeting) GetShowAJoinFromYourBrowserLink() OptBool {
	return s.ShowAJoinFromYourBrowserLink
}

// GetShowBrowserJoinLink returns the value of ShowBrowserJoinLink.
func (s *GetGroupLockSettingsOK0InMeeting) GetShowBrowserJoinLink() OptBool {
	return s.ShowBrowserJoinLink
}

// GetShowMeetingControlToolbar returns the value of ShowMeetingControlToolbar.
func (s *GetGroupLockSettingsOK0InMeeting) GetShowMeetingControlToolbar() OptBool {
	return s.ShowMeetingControlToolbar
}

// GetSlideControl returns the value of SlideControl.
func (s *GetGroupLockSettingsOK0InMeeting) GetSlideControl() OptBool {
	return s.SlideControl
}

// GetStereoAudio returns the value of StereoAudio.
func (s *GetGroupLockSettingsOK0InMeeting) GetStereoAudio() OptBool {
	return s.StereoAudio
}

// GetUseHTMLFormatEmail returns the value of UseHTMLFormatEmail.
func (s *GetGroupLockSettingsOK0InMeeting) GetUseHTMLFormatEmail() OptBool {
	return s.UseHTMLFormatEmail
}

// GetVirtualBackground returns the value of VirtualBackground.
func (s *GetGroupLockSettingsOK0InMeeting) GetVirtualBackground() OptBool {
	return s.VirtualBackground
}

// GetWaitingRoom returns the value of WaitingRoom.
func (s *GetGroupLockSettingsOK0InMeeting) GetWaitingRoom() OptBool {
	return s.WaitingRoom
}

// GetWebinarChat returns the value of WebinarChat.
func (s *GetGroupLockSettingsOK0InMeeting) GetWebinarChat() OptBool {
	return s.WebinarChat
}

// GetWebinarLiveStreaming returns the value of WebinarLiveStreaming.
func (s *GetGroupLockSettingsOK0InMeeting) GetWebinarLiveStreaming() OptBool {
	return s.WebinarLiveStreaming
}

// GetWebinarPolling returns the value of WebinarPolling.
func (s *GetGroupLockSettingsOK0InMeeting) GetWebinarPolling() OptBool {
	return s.WebinarPolling
}

// GetWebinarQuestionAnswer returns the value of WebinarQuestionAnswer.
func (s *GetGroupLockSettingsOK0InMeeting) GetWebinarQuestionAnswer() OptBool {
	return s.WebinarQuestionAnswer
}

// GetWebinarSurvey returns the value of WebinarSurvey.
func (s *GetGroupLockSettingsOK0InMeeting) GetWebinarSurvey() OptBool {
	return s.WebinarSurvey
}

// GetWhiteboard returns the value of Whiteboard.
func (s *GetGroupLockSettingsOK0InMeeting) GetWhiteboard() OptBool {
	return s.Whiteboard
}

// SetAlertGuestJoin sets the value of AlertGuestJoin.
func (s *GetGroupLockSettingsOK0InMeeting) SetAlertGuestJoin(val OptBool) {
	s.AlertGuestJoin = val
}

// SetAllowUsersToDeleteMessagesInMeetingChat sets the value of AllowUsersToDeleteMessagesInMeetingChat.
func (s *GetGroupLockSettingsOK0InMeeting) SetAllowUsersToDeleteMessagesInMeetingChat(val OptBool) {
	s.AllowUsersToDeleteMessagesInMeetingChat = val
}

// SetAllowLiveStreaming sets the value of AllowLiveStreaming.
func (s *GetGroupLockSettingsOK0InMeeting) SetAllowLiveStreaming(val OptBool) {
	s.AllowLiveStreaming = val
}

// SetAllowShowZoomWindows sets the value of AllowShowZoomWindows.
func (s *GetGroupLockSettingsOK0InMeeting) SetAllowShowZoomWindows(val OptBool) {
	s.AllowShowZoomWindows = val
}

// SetAnnotation sets the value of Annotation.
func (s *GetGroupLockSettingsOK0InMeeting) SetAnnotation(val OptBool) {
	s.Annotation = val
}

// SetAttendeeOnHold sets the value of AttendeeOnHold.
func (s *GetGroupLockSettingsOK0InMeeting) SetAttendeeOnHold(val OptBool) {
	s.AttendeeOnHold = val
}

// SetAutoAnswer sets the value of AutoAnswer.
func (s *GetGroupLockSettingsOK0InMeeting) SetAutoAnswer(val OptBool) {
	s.AutoAnswer = val
}

// SetAutoGeneratedCaptions sets the value of AutoGeneratedCaptions.
func (s *GetGroupLockSettingsOK0InMeeting) SetAutoGeneratedCaptions(val OptBool) {
	s.AutoGeneratedCaptions = val
}

// SetAutoSavingChat sets the value of AutoSavingChat.
func (s *GetGroupLockSettingsOK0InMeeting) SetAutoSavingChat(val OptBool) {
	s.AutoSavingChat = val
}

// SetBreakoutRoom sets the value of BreakoutRoom.
func (s *GetGroupLockSettingsOK0InMeeting) SetBreakoutRoom(val OptBool) {
	s.BreakoutRoom = val
}

// SetChat sets the value of Chat.
func (s *GetGroupLockSettingsOK0InMeeting) SetChat(val OptBool) {
	s.Chat = val
}

// SetMeetingQuestionAnswer sets the value of MeetingQuestionAnswer.
func (s *GetGroupLockSettingsOK0InMeeting) SetMeetingQuestionAnswer(val OptBool) {
	s.MeetingQuestionAnswer = val
}

// SetClosedCaption sets the value of ClosedCaption.
func (s *GetGroupLockSettingsOK0InMeeting) SetClosedCaption(val OptBool) {
	s.ClosedCaption = val
}

// SetCoHost sets the value of CoHost.
func (s *GetGroupLockSettingsOK0InMeeting) SetCoHost(val OptBool) {
	s.CoHost = val
}

// SetCustomDataCenterRegions sets the value of CustomDataCenterRegions.
func (s *GetGroupLockSettingsOK0InMeeting) SetCustomDataCenterRegions(val OptBool) {
	s.CustomDataCenterRegions = val
}

// SetDisableScreenSharingForHostMeetings sets the value of DisableScreenSharingForHostMeetings.
func (s *GetGroupLockSettingsOK0InMeeting) SetDisableScreenSharingForHostMeetings(val OptBool) {
	s.DisableScreenSharingForHostMeetings = val
}

// SetDisableScreenSharingForInMeetingGuests sets the value of DisableScreenSharingForInMeetingGuests.
func (s *GetGroupLockSettingsOK0InMeeting) SetDisableScreenSharingForInMeetingGuests(val OptBool) {
	s.DisableScreenSharingForInMeetingGuests = val
}

// SetE2eEncryption sets the value of E2eEncryption.
func (s *GetGroupLockSettingsOK0InMeeting) SetE2eEncryption(val OptBool) {
	s.E2eEncryption = val
}

// SetEntryExitChime sets the value of EntryExitChime.
func (s *GetGroupLockSettingsOK0InMeeting) SetEntryExitChime(val OptString) {
	s.EntryExitChime = val
}

// SetFarEndCameraControl sets the value of FarEndCameraControl.
func (s *GetGroupLockSettingsOK0InMeeting) SetFarEndCameraControl(val OptBool) {
	s.FarEndCameraControl = val
}

// SetFeedback sets the value of Feedback.
func (s *GetGroupLockSettingsOK0InMeeting) SetFeedback(val OptBool) {
	s.Feedback = val
}

// SetFileTransfer sets the value of FileTransfer.
func (s *GetGroupLockSettingsOK0InMeeting) SetFileTransfer(val OptBool) {
	s.FileTransfer = val
}

// SetFullTranscript sets the value of FullTranscript.
func (s *GetGroupLockSettingsOK0InMeeting) SetFullTranscript(val OptBool) {
	s.FullTranscript = val
}

// SetGroupHd sets the value of GroupHd.
func (s *GetGroupLockSettingsOK0InMeeting) SetGroupHd(val OptBool) {
	s.GroupHd = val
}

// SetWebinarGroupHd sets the value of WebinarGroupHd.
func (s *GetGroupLockSettingsOK0InMeeting) SetWebinarGroupHd(val OptBool) {
	s.WebinarGroupHd = val
}

// SetLanguageInterpretation sets the value of LanguageInterpretation.
func (s *GetGroupLockSettingsOK0InMeeting) SetLanguageInterpretation(val OptBool) {
	s.LanguageInterpretation = val
}

// SetSignLanguageInterpretation sets the value of SignLanguageInterpretation.
func (s *GetGroupLockSettingsOK0InMeeting) SetSignLanguageInterpretation(val OptBool) {
	s.SignLanguageInterpretation = val
}

// SetManualCaptions sets the value of ManualCaptions.
func (s *GetGroupLockSettingsOK0InMeeting) SetManualCaptions(val OptBool) {
	s.ManualCaptions = val
}

// SetMeetingReactions sets the value of MeetingReactions.
func (s *GetGroupLockSettingsOK0InMeeting) SetMeetingReactions(val OptBool) {
	s.MeetingReactions = val
}

// SetWebinarReactions sets the value of WebinarReactions.
func (s *GetGroupLockSettingsOK0InMeeting) SetWebinarReactions(val OptBool) {
	s.WebinarReactions = val
}

// SetMeetingSurvey sets the value of MeetingSurvey.
func (s *GetGroupLockSettingsOK0InMeeting) SetMeetingSurvey(val OptBool) {
	s.MeetingSurvey = val
}

// SetNonVerbalFeedback sets the value of NonVerbalFeedback.
func (s *GetGroupLockSettingsOK0InMeeting) SetNonVerbalFeedback(val OptBool) {
	s.NonVerbalFeedback = val
}

// SetOriginalAudio sets the value of OriginalAudio.
func (s *GetGroupLockSettingsOK0InMeeting) SetOriginalAudio(val OptBool) {
	s.OriginalAudio = val
}

// SetPolling sets the value of Polling.
func (s *GetGroupLockSettingsOK0InMeeting) SetPolling(val OptBool) {
	s.Polling = val
}

// SetPostMeetingFeedback sets the value of PostMeetingFeedback.
func (s *GetGroupLockSettingsOK0InMeeting) SetPostMeetingFeedback(val OptBool) {
	s.PostMeetingFeedback = val
}

// SetPrivateChat sets the value of PrivateChat.
func (s *GetGroupLockSettingsOK0InMeeting) SetPrivateChat(val OptBool) {
	s.PrivateChat = val
}

// SetRemoteControl sets the value of RemoteControl.
func (s *GetGroupLockSettingsOK0InMeeting) SetRemoteControl(val OptBool) {
	s.RemoteControl = val
}

// SetRemoteSupport sets the value of RemoteSupport.
func (s *GetGroupLockSettingsOK0InMeeting) SetRemoteSupport(val OptBool) {
	s.RemoteSupport = val
}

// SetRequestPermissionToUnmuteParticipants sets the value of RequestPermissionToUnmuteParticipants.
func (s *GetGroupLockSettingsOK0InMeeting) SetRequestPermissionToUnmuteParticipants(val OptBool) {
	s.RequestPermissionToUnmuteParticipants = val
}

// SetSaveCaption sets the value of SaveCaption.
func (s *GetGroupLockSettingsOK0InMeeting) SetSaveCaption(val OptBool) {
	s.SaveCaption = val
}

// SetSaveCaptions sets the value of SaveCaptions.
func (s *GetGroupLockSettingsOK0InMeeting) SetSaveCaptions(val OptBool) {
	s.SaveCaptions = val
}

// SetScreenSharing sets the value of ScreenSharing.
func (s *GetGroupLockSettingsOK0InMeeting) SetScreenSharing(val OptBool) {
	s.ScreenSharing = val
}

// SetSendingDefaultEmailInvites sets the value of SendingDefaultEmailInvites.
func (s *GetGroupLockSettingsOK0InMeeting) SetSendingDefaultEmailInvites(val OptBool) {
	s.SendingDefaultEmailInvites = val
}

// SetShowAJoinFromYourBrowserLink sets the value of ShowAJoinFromYourBrowserLink.
func (s *GetGroupLockSettingsOK0InMeeting) SetShowAJoinFromYourBrowserLink(val OptBool) {
	s.ShowAJoinFromYourBrowserLink = val
}

// SetShowBrowserJoinLink sets the value of ShowBrowserJoinLink.
func (s *GetGroupLockSettingsOK0InMeeting) SetShowBrowserJoinLink(val OptBool) {
	s.ShowBrowserJoinLink = val
}

// SetShowMeetingControlToolbar sets the value of ShowMeetingControlToolbar.
func (s *GetGroupLockSettingsOK0InMeeting) SetShowMeetingControlToolbar(val OptBool) {
	s.ShowMeetingControlToolbar = val
}

// SetSlideControl sets the value of SlideControl.
func (s *GetGroupLockSettingsOK0InMeeting) SetSlideControl(val OptBool) {
	s.SlideControl = val
}

// SetStereoAudio sets the value of StereoAudio.
func (s *GetGroupLockSettingsOK0InMeeting) SetStereoAudio(val OptBool) {
	s.StereoAudio = val
}

// SetUseHTMLFormatEmail sets the value of UseHTMLFormatEmail.
func (s *GetGroupLockSettingsOK0InMeeting) SetUseHTMLFormatEmail(val OptBool) {
	s.UseHTMLFormatEmail = val
}

// SetVirtualBackground sets the value of VirtualBackground.
func (s *GetGroupLockSettingsOK0InMeeting) SetVirtualBackground(val OptBool) {
	s.VirtualBackground = val
}

// SetWaitingRoom sets the value of WaitingRoom.
func (s *GetGroupLockSettingsOK0InMeeting) SetWaitingRoom(val OptBool) {
	s.WaitingRoom = val
}

// SetWebinarChat sets the value of WebinarChat.
func (s *GetGroupLockSettingsOK0InMeeting) SetWebinarChat(val OptBool) {
	s.WebinarChat = val
}

// SetWebinarLiveStreaming sets the value of WebinarLiveStreaming.
func (s *GetGroupLockSettingsOK0InMeeting) SetWebinarLiveStreaming(val OptBool) {
	s.WebinarLiveStreaming = val
}

// SetWebinarPolling sets the value of WebinarPolling.
func (s *GetGroupLockSettingsOK0InMeeting) SetWebinarPolling(val OptBool) {
	s.WebinarPolling = val
}

// SetWebinarQuestionAnswer sets the value of WebinarQuestionAnswer.
func (s *GetGroupLockSettingsOK0InMeeting) SetWebinarQuestionAnswer(val OptBool) {
	s.WebinarQuestionAnswer = val
}

// SetWebinarSurvey sets the value of WebinarSurvey.
func (s *GetGroupLockSettingsOK0InMeeting) SetWebinarSurvey(val OptBool) {
	s.WebinarSurvey = val
}

// SetWhiteboard sets the value of Whiteboard.
func (s *GetGroupLockSettingsOK0InMeeting) SetWhiteboard(val OptBool) {
	s.Whiteboard = val
}

type GetGroupLockSettingsOK0OtherOptions struct {
	// If `true`, iOS blurs the screenshot in the task switcher when multiple apps are open. Android
	// hides the screenshot in the system-level list of recent apps.
	BlurSnapshot OptBool `json:"blur_snapshot"`
}

// GetBlurSnapshot returns the value of BlurSnapshot.
func (s *GetGroupLockSettingsOK0OtherOptions) GetBlurSnapshot() OptBool {
	return s.BlurSnapshot
}

// SetBlurSnapshot sets the value of BlurSnapshot.
func (s *GetGroupLockSettingsOK0OtherOptions) SetBlurSnapshot(val OptBool) {
	s.BlurSnapshot = val
}

type GetGroupLockSettingsOK0Recording struct {
	// Make cloud recordings accessible to account members only.
	AccountUserAccessRecording OptBool `json:"account_user_access_recording"`
	// Allow Zoom to automatically delete recordings permanently after a specified number of days.
	AutoDeleteCmr OptBool `json:"auto_delete_cmr"`
	// Record meetings automatically as they start.
	AutoRecording OptBool `json:"auto_recording"`
	// Allow hosts to record and save the meeting or webinar in the cloud.
	CloudRecording OptBool `json:"cloud_recording"`
	// Allow anyone with a link to the cloud recording to download.
	CloudRecordingDownload OptBool `json:"cloud_recording_download"`
	// Allow the host to delete the recordings. If this option is disabled, the recordings cannot be
	// deleted by the host and only admin can delete them.
	HostDeleteCloudRecording OptBool `json:"host_delete_cloud_recording"`
	// Setting to allow cloud recording access only from specific IP address ranges.
	IPAddressAccessControl OptGetGroupLockSettingsOK0RecordingIPAddressAccessControl `json:"ip_address_access_control"`
	// Allow hosts and participants to record the meeting to a local file.
	LocalRecording OptBool `json:"local_recording"`
	// If set to `true`, meeting hosts cannot view their meeting cloud recordings. Only the admins who
	// have recording management privilege can access them.
	PreventHostAccessRecording OptBool `json:"prevent_host_access_recording"`
	// Only authenticated users can view cloud recordings.
	RecordingAuthentication OptBool `json:"recording_authentication"`
	// [Archiving solution](https://support.zoom.
	// us/hc/en-us/articles/360050431572-Archiving-Meeting-and-Webinar-data) settings. This setting can
	// only be used if you have been granted archiving solution access by the Zoom support team.
	Archive OptBool `json:"archive"`
}

// GetAccountUserAccessRecording returns the value of AccountUserAccessRecording.
func (s *GetGroupLockSettingsOK0Recording) GetAccountUserAccessRecording() OptBool {
	return s.AccountUserAccessRecording
}

// GetAutoDeleteCmr returns the value of AutoDeleteCmr.
func (s *GetGroupLockSettingsOK0Recording) GetAutoDeleteCmr() OptBool {
	return s.AutoDeleteCmr
}

// GetAutoRecording returns the value of AutoRecording.
func (s *GetGroupLockSettingsOK0Recording) GetAutoRecording() OptBool {
	return s.AutoRecording
}

// GetCloudRecording returns the value of CloudRecording.
func (s *GetGroupLockSettingsOK0Recording) GetCloudRecording() OptBool {
	return s.CloudRecording
}

// GetCloudRecordingDownload returns the value of CloudRecordingDownload.
func (s *GetGroupLockSettingsOK0Recording) GetCloudRecordingDownload() OptBool {
	return s.CloudRecordingDownload
}

// GetHostDeleteCloudRecording returns the value of HostDeleteCloudRecording.
func (s *GetGroupLockSettingsOK0Recording) GetHostDeleteCloudRecording() OptBool {
	return s.HostDeleteCloudRecording
}

// GetIPAddressAccessControl returns the value of IPAddressAccessControl.
func (s *GetGroupLockSettingsOK0Recording) GetIPAddressAccessControl() OptGetGroupLockSettingsOK0RecordingIPAddressAccessControl {
	return s.IPAddressAccessControl
}

// GetLocalRecording returns the value of LocalRecording.
func (s *GetGroupLockSettingsOK0Recording) GetLocalRecording() OptBool {
	return s.LocalRecording
}

// GetPreventHostAccessRecording returns the value of PreventHostAccessRecording.
func (s *GetGroupLockSettingsOK0Recording) GetPreventHostAccessRecording() OptBool {
	return s.PreventHostAccessRecording
}

// GetRecordingAuthentication returns the value of RecordingAuthentication.
func (s *GetGroupLockSettingsOK0Recording) GetRecordingAuthentication() OptBool {
	return s.RecordingAuthentication
}

// GetArchive returns the value of Archive.
func (s *GetGroupLockSettingsOK0Recording) GetArchive() OptBool {
	return s.Archive
}

// SetAccountUserAccessRecording sets the value of AccountUserAccessRecording.
func (s *GetGroupLockSettingsOK0Recording) SetAccountUserAccessRecording(val OptBool) {
	s.AccountUserAccessRecording = val
}

// SetAutoDeleteCmr sets the value of AutoDeleteCmr.
func (s *GetGroupLockSettingsOK0Recording) SetAutoDeleteCmr(val OptBool) {
	s.AutoDeleteCmr = val
}

// SetAutoRecording sets the value of AutoRecording.
func (s *GetGroupLockSettingsOK0Recording) SetAutoRecording(val OptBool) {
	s.AutoRecording = val
}

// SetCloudRecording sets the value of CloudRecording.
func (s *GetGroupLockSettingsOK0Recording) SetCloudRecording(val OptBool) {
	s.CloudRecording = val
}

// SetCloudRecordingDownload sets the value of CloudRecordingDownload.
func (s *GetGroupLockSettingsOK0Recording) SetCloudRecordingDownload(val OptBool) {
	s.CloudRecordingDownload = val
}

// SetHostDeleteCloudRecording sets the value of HostDeleteCloudRecording.
func (s *GetGroupLockSettingsOK0Recording) SetHostDeleteCloudRecording(val OptBool) {
	s.HostDeleteCloudRecording = val
}

// SetIPAddressAccessControl sets the value of IPAddressAccessControl.
func (s *GetGroupLockSettingsOK0Recording) SetIPAddressAccessControl(val OptGetGroupLockSettingsOK0RecordingIPAddressAccessControl) {
	s.IPAddressAccessControl = val
}

// SetLocalRecording sets the value of LocalRecording.
func (s *GetGroupLockSettingsOK0Recording) SetLocalRecording(val OptBool) {
	s.LocalRecording = val
}

// SetPreventHostAccessRecording sets the value of PreventHostAccessRecording.
func (s *GetGroupLockSettingsOK0Recording) SetPreventHostAccessRecording(val OptBool) {
	s.PreventHostAccessRecording = val
}

// SetRecordingAuthentication sets the value of RecordingAuthentication.
func (s *GetGroupLockSettingsOK0Recording) SetRecordingAuthentication(val OptBool) {
	s.RecordingAuthentication = val
}

// SetArchive sets the value of Archive.
func (s *GetGroupLockSettingsOK0Recording) SetArchive(val OptBool) {
	s.Archive = val
}

// Setting to allow cloud recording access only from specific IP address ranges.
type GetGroupLockSettingsOK0RecordingIPAddressAccessControl struct {
	// If set to `true`, the cloud recordings of this account can only be accessed by the IP addresses
	// defined in the `ip_addresses_or_ranges` property.
	Enable OptBool `json:"enable"`
	// IP addresses or ranges that have access to the cloud recordings. Separate multiple IP ranges with
	// commas. Use `n.n.n.n, n.n.n.n/n` or `n.n.n.n - n.n.n.n` syntax where n is a number, such as `46.33.
	// 24.184, 48.99.100.2/25` or `200.181.108.17 - 220.181.108.157`.
	IPAddressesOrRanges OptString `json:"ip_addresses_or_ranges"`
}

// GetEnable returns the value of Enable.
func (s *GetGroupLockSettingsOK0RecordingIPAddressAccessControl) GetEnable() OptBool {
	return s.Enable
}

// GetIPAddressesOrRanges returns the value of IPAddressesOrRanges.
func (s *GetGroupLockSettingsOK0RecordingIPAddressAccessControl) GetIPAddressesOrRanges() OptString {
	return s.IPAddressesOrRanges
}

// SetEnable sets the value of Enable.
func (s *GetGroupLockSettingsOK0RecordingIPAddressAccessControl) SetEnable(val OptBool) {
	s.Enable = val
}

// SetIPAddressesOrRanges sets the value of IPAddressesOrRanges.
func (s *GetGroupLockSettingsOK0RecordingIPAddressAccessControl) SetIPAddressesOrRanges(val OptString) {
	s.IPAddressesOrRanges = val
}

type GetGroupLockSettingsOK0ScheduleMeeting struct {
	// Determine how participants can join the audio portion of the meeting.
	AudioType OptBool `json:"audio_type"`
	// If the value is set to `true`, the meeting passcode will be encrypted and included in the join
	// meeting link to allow participants to join with just one click without having to enter the
	// passcode.
	EmbedPasswordInJoinLink OptBool `json:"embed_password_in_join_link"`
	// If the join before host option is enabled for a personal meeting, then enforce passcode
	// requirement.
	ForcePmiJbhPassword OptBool `json:"force_pmi_jbh_password"`
	// Start meetings with host video on.
	HostVideo OptBool `json:"host_video"`
	// Allow participants to join the meeting before the host arrives.
	JoinBeforeHost OptBool `json:"join_before_host"`
	// Only authenticated users can join meetings.
	MeetingAuthentication OptBool `json:"meeting_authentication"`
	// Automatically mute all participants when they join the meeting.
	MuteUponEntry OptBool `json:"mute_upon_entry"`
	// Start meetings with participant video on.
	ParticipantVideo OptBool `json:"participant_video"`
	// Generate and send new passcodes for newly scheduled or edited meetings.
	PstnPasswordProtected OptBool `json:"pstn_password_protected"`
	// Require passcode for instant meetings. If you use personal meeting ID (PMI) for your instant
	// meetings, this option will be disabled.
	RequirePasswordForInstantMeetings OptBool `json:"require_password_for_instant_meetings"`
	// Require participants to enter passcode for PMI meetings.
	RequirePasswordForPmiMeetings OptBool `json:"require_password_for_pmi_meetings"`
	// This setting applies for regular meetings that do not use PMI. If enabled, a passcode will be
	// generated while a host schedules a new meeting and participants will be required to enter the
	// passcode before they can join the meeting.
	RequirePasswordForSchedulingNewMeetings OptBool `json:"require_password_for_scheduling_new_meetings"`
	// Receive desktop notification for upcoming meetings.
	UpcomingMeetingReminder OptBool `json:"upcoming_meeting_reminder"`
	// Whether to enable the [**Enable continuous meeting chat**] setting.
	ContinuousMeetingChat OptBool `json:"continuous_meeting_chat"`
}

// GetAudioType returns the value of AudioType.
func (s *GetGroupLockSettingsOK0ScheduleMeeting) GetAudioType() OptBool {
	return s.AudioType
}

// GetEmbedPasswordInJoinLink returns the value of EmbedPasswordInJoinLink.
func (s *GetGroupLockSettingsOK0ScheduleMeeting) GetEmbedPasswordInJoinLink() OptBool {
	return s.EmbedPasswordInJoinLink
}

// GetForcePmiJbhPassword returns the value of ForcePmiJbhPassword.
func (s *GetGroupLockSettingsOK0ScheduleMeeting) GetForcePmiJbhPassword() OptBool {
	return s.ForcePmiJbhPassword
}

// GetHostVideo returns the value of HostVideo.
func (s *GetGroupLockSettingsOK0ScheduleMeeting) GetHostVideo() OptBool {
	return s.HostVideo
}

// GetJoinBeforeHost returns the value of JoinBeforeHost.
func (s *GetGroupLockSettingsOK0ScheduleMeeting) GetJoinBeforeHost() OptBool {
	return s.JoinBeforeHost
}

// GetMeetingAuthentication returns the value of MeetingAuthentication.
func (s *GetGroupLockSettingsOK0ScheduleMeeting) GetMeetingAuthentication() OptBool {
	return s.MeetingAuthentication
}

// GetMuteUponEntry returns the value of MuteUponEntry.
func (s *GetGroupLockSettingsOK0ScheduleMeeting) GetMuteUponEntry() OptBool {
	return s.MuteUponEntry
}

// GetParticipantVideo returns the value of ParticipantVideo.
func (s *GetGroupLockSettingsOK0ScheduleMeeting) GetParticipantVideo() OptBool {
	return s.ParticipantVideo
}

// GetPstnPasswordProtected returns the value of PstnPasswordProtected.
func (s *GetGroupLockSettingsOK0ScheduleMeeting) GetPstnPasswordProtected() OptBool {
	return s.PstnPasswordProtected
}

// GetRequirePasswordForInstantMeetings returns the value of RequirePasswordForInstantMeetings.
func (s *GetGroupLockSettingsOK0ScheduleMeeting) GetRequirePasswordForInstantMeetings() OptBool {
	return s.RequirePasswordForInstantMeetings
}

// GetRequirePasswordForPmiMeetings returns the value of RequirePasswordForPmiMeetings.
func (s *GetGroupLockSettingsOK0ScheduleMeeting) GetRequirePasswordForPmiMeetings() OptBool {
	return s.RequirePasswordForPmiMeetings
}

// GetRequirePasswordForSchedulingNewMeetings returns the value of RequirePasswordForSchedulingNewMeetings.
func (s *GetGroupLockSettingsOK0ScheduleMeeting) GetRequirePasswordForSchedulingNewMeetings() OptBool {
	return s.RequirePasswordForSchedulingNewMeetings
}

// GetUpcomingMeetingReminder returns the value of UpcomingMeetingReminder.
func (s *GetGroupLockSettingsOK0ScheduleMeeting) GetUpcomingMeetingReminder() OptBool {
	return s.UpcomingMeetingReminder
}

// GetContinuousMeetingChat returns the value of ContinuousMeetingChat.
func (s *GetGroupLockSettingsOK0ScheduleMeeting) GetContinuousMeetingChat() OptBool {
	return s.ContinuousMeetingChat
}

// SetAudioType sets the value of AudioType.
func (s *GetGroupLockSettingsOK0ScheduleMeeting) SetAudioType(val OptBool) {
	s.AudioType = val
}

// SetEmbedPasswordInJoinLink sets the value of EmbedPasswordInJoinLink.
func (s *GetGroupLockSettingsOK0ScheduleMeeting) SetEmbedPasswordInJoinLink(val OptBool) {
	s.EmbedPasswordInJoinLink = val
}

// SetForcePmiJbhPassword sets the value of ForcePmiJbhPassword.
func (s *GetGroupLockSettingsOK0ScheduleMeeting) SetForcePmiJbhPassword(val OptBool) {
	s.ForcePmiJbhPassword = val
}

// SetHostVideo sets the value of HostVideo.
func (s *GetGroupLockSettingsOK0ScheduleMeeting) SetHostVideo(val OptBool) {
	s.HostVideo = val
}

// SetJoinBeforeHost sets the value of JoinBeforeHost.
func (s *GetGroupLockSettingsOK0ScheduleMeeting) SetJoinBeforeHost(val OptBool) {
	s.JoinBeforeHost = val
}

// SetMeetingAuthentication sets the value of MeetingAuthentication.
func (s *GetGroupLockSettingsOK0ScheduleMeeting) SetMeetingAuthentication(val OptBool) {
	s.MeetingAuthentication = val
}

// SetMuteUponEntry sets the value of MuteUponEntry.
func (s *GetGroupLockSettingsOK0ScheduleMeeting) SetMuteUponEntry(val OptBool) {
	s.MuteUponEntry = val
}

// SetParticipantVideo sets the value of ParticipantVideo.
func (s *GetGroupLockSettingsOK0ScheduleMeeting) SetParticipantVideo(val OptBool) {
	s.ParticipantVideo = val
}

// SetPstnPasswordProtected sets the value of PstnPasswordProtected.
func (s *GetGroupLockSettingsOK0ScheduleMeeting) SetPstnPasswordProtected(val OptBool) {
	s.PstnPasswordProtected = val
}

// SetRequirePasswordForInstantMeetings sets the value of RequirePasswordForInstantMeetings.
func (s *GetGroupLockSettingsOK0ScheduleMeeting) SetRequirePasswordForInstantMeetings(val OptBool) {
	s.RequirePasswordForInstantMeetings = val
}

// SetRequirePasswordForPmiMeetings sets the value of RequirePasswordForPmiMeetings.
func (s *GetGroupLockSettingsOK0ScheduleMeeting) SetRequirePasswordForPmiMeetings(val OptBool) {
	s.RequirePasswordForPmiMeetings = val
}

// SetRequirePasswordForSchedulingNewMeetings sets the value of RequirePasswordForSchedulingNewMeetings.
func (s *GetGroupLockSettingsOK0ScheduleMeeting) SetRequirePasswordForSchedulingNewMeetings(val OptBool) {
	s.RequirePasswordForSchedulingNewMeetings = val
}

// SetUpcomingMeetingReminder sets the value of UpcomingMeetingReminder.
func (s *GetGroupLockSettingsOK0ScheduleMeeting) SetUpcomingMeetingReminder(val OptBool) {
	s.UpcomingMeetingReminder = val
}

// SetContinuousMeetingChat sets the value of ContinuousMeetingChat.
func (s *GetGroupLockSettingsOK0ScheduleMeeting) SetContinuousMeetingChat(val OptBool) {
	s.ContinuousMeetingChat = val
}

type GetGroupLockSettingsOK0Telephony struct {
	TelephonyRegions OptBool `json:"telephony_regions"`
	// Allow users to join the meeting using the existing third party audio configuration.
	ThirdPartyAudio OptBool `json:"third_party_audio"`
}

// GetTelephonyRegions returns the value of TelephonyRegions.
func (s *GetGroupLockSettingsOK0Telephony) GetTelephonyRegions() OptBool {
	return s.TelephonyRegions
}

// GetThirdPartyAudio returns the value of ThirdPartyAudio.
func (s *GetGroupLockSettingsOK0Telephony) GetThirdPartyAudio() OptBool {
	return s.ThirdPartyAudio
}

// SetTelephonyRegions sets the value of TelephonyRegions.
func (s *GetGroupLockSettingsOK0Telephony) SetTelephonyRegions(val OptBool) {
	s.TelephonyRegions = val
}

// SetThirdPartyAudio sets the value of ThirdPartyAudio.
func (s *GetGroupLockSettingsOK0Telephony) SetThirdPartyAudio(val OptBool) {
	s.ThirdPartyAudio = val
}

// The group's locked meeting and webinar security settings.
type GetGroupLockSettingsOK1 struct {
	MeetingSecurity OptGetGroupLockSettingsOK1MeetingSecurity `json:"meeting_security"`
}

// GetMeetingSecurity returns the value of MeetingSecurity.
func (s *GetGroupLockSettingsOK1) GetMeetingSecurity() OptGetGroupLockSettingsOK1MeetingSecurity {
	return s.MeetingSecurity
}

// SetMeetingSecurity sets the value of MeetingSecurity.
func (s *GetGroupLockSettingsOK1) SetMeetingSecurity(val OptGetGroupLockSettingsOK1MeetingSecurity) {
	s.MeetingSecurity = val
}

type GetGroupLockSettingsOK1MeetingSecurity struct {
	// Whether the [**Approve or block entry for users from specific countries/regions**](https://support.
	// zoom.us/hc/en-us/articles/360060086231-Joining-from-specific-countries-regions) setting is enabled.
	ApprovedOrDeniedCountriesOrRegions OptBool `json:"approved_or_denied_countries_or_regions"`
	// Whether all meetings must be secured with at least one security option.
	// This setting can only be disabled by Enterprise, ISV, Business (with more than 100 licenses), and
	// Education accounts.
	AutoSecurity OptBool `json:"auto_security"`
	// Whether users in specific domains are blocked from joining meetings and webinars.
	BlockUserDomain OptBool `json:"block_user_domain"`
	// Whether the meeting passcode is encrypted and included in the invitation link. The provided link
	// will allow participants to join the meeting without having to enter the passcode.
	EmbedPasswordInJoinLink OptBool `json:"embed_password_in_join_link"`
	// The type of encryption used when starting a meeting.
	// * `enhanced_encryption` - Enhanced encryption. Encryption data is stored in the cloud.
	// * `e2ee` - End-to-end encryption. The encryption key is stored on the local device and cannot be
	// obtained by anyone else. Enabling E2EE also [**disables** certain features](https://support.zoom.
	// us/hc/en-us/articles/360048660871), such as cloud recording, live streaming, and allowing
	// participants to join before the host.
	EncryptionType OptString `json:"encryption_type"`
	// Whether end-to-end encryption is enabled for meetings.
	EndToEndEncryptedMeetings OptBool `json:"end_to_end_encrypted_meetings"`
	// Whether all instant and scheduled meetings that users can join via client or Zoom Rooms systems
	// are passcode-protected. [Personal meeting ID (PMI)](https://support.zoom.
	// us/hc/en-us/articles/203276937) meetings are **not** included in this setting.
	MeetingPassword OptBool `json:"meeting_password"`
	// Whether to specify that only authenticated users can join the meeting from the web client.
	OnlyAuthenticatedCanJoinFromWebclient OptBool `json:"only_authenticated_can_join_from_webclient"`
	// Whether passcodes are required for participants joining by phone.
	// If enabled and the meeting is passcode-protected, a numeric passcode is required for participants
	// to join by phone. For meetings with alphanumeric passcodes, a numeric passcode will be generated.
	PhonePassword OptBool `json:"phone_password"`
	// Whether all PMI meetings that users can join via client or Zoom Rooms systems are
	// passcode-protected.
	PmiPassword OptBool `json:"pmi_password"`
	// Whether participants are placed in the [**waiting room**](https://support.zoom.
	// us/hc/en-us/articles/115000332726-Waiting-Room) when they join a meeting.
	// If the **Waiting Room** feature is enabled, the [**Allow participants to join before
	// host**](https://support.zoom.
	// us/hc/en-us/articles/202828525-Allow-participants-to-join-before-host) setting is automatically
	// disabled.
	WaitingRoom OptBool `json:"waiting_room"`
	// Whether to generate a passcode when scheduling webinars. Participants must use the generated
	// passcode to join the scheduled webinar.
	WebinarPassword OptBool `json:"webinar_password"`
}

// GetApprovedOrDeniedCountriesOrRegions returns the value of ApprovedOrDeniedCountriesOrRegions.
func (s *GetGroupLockSettingsOK1MeetingSecurity) GetApprovedOrDeniedCountriesOrRegions() OptBool {
	return s.ApprovedOrDeniedCountriesOrRegions
}

// GetAutoSecurity returns the value of AutoSecurity.
func (s *GetGroupLockSettingsOK1MeetingSecurity) GetAutoSecurity() OptBool {
	return s.AutoSecurity
}

// GetBlockUserDomain returns the value of BlockUserDomain.
func (s *GetGroupLockSettingsOK1MeetingSecurity) GetBlockUserDomain() OptBool {
	return s.BlockUserDomain
}

// GetEmbedPasswordInJoinLink returns the value of EmbedPasswordInJoinLink.
func (s *GetGroupLockSettingsOK1MeetingSecurity) GetEmbedPasswordInJoinLink() OptBool {
	return s.EmbedPasswordInJoinLink
}

// GetEncryptionType returns the value of EncryptionType.
func (s *GetGroupLockSettingsOK1MeetingSecurity) GetEncryptionType() OptString {
	return s.EncryptionType
}

// GetEndToEndEncryptedMeetings returns the value of EndToEndEncryptedMeetings.
func (s *GetGroupLockSettingsOK1MeetingSecurity) GetEndToEndEncryptedMeetings() OptBool {
	return s.EndToEndEncryptedMeetings
}

// GetMeetingPassword returns the value of MeetingPassword.
func (s *GetGroupLockSettingsOK1MeetingSecurity) GetMeetingPassword() OptBool {
	return s.MeetingPassword
}

// GetOnlyAuthenticatedCanJoinFromWebclient returns the value of OnlyAuthenticatedCanJoinFromWebclient.
func (s *GetGroupLockSettingsOK1MeetingSecurity) GetOnlyAuthenticatedCanJoinFromWebclient() OptBool {
	return s.OnlyAuthenticatedCanJoinFromWebclient
}

// GetPhonePassword returns the value of PhonePassword.
func (s *GetGroupLockSettingsOK1MeetingSecurity) GetPhonePassword() OptBool {
	return s.PhonePassword
}

// GetPmiPassword returns the value of PmiPassword.
func (s *GetGroupLockSettingsOK1MeetingSecurity) GetPmiPassword() OptBool {
	return s.PmiPassword
}

// GetWaitingRoom returns the value of WaitingRoom.
func (s *GetGroupLockSettingsOK1MeetingSecurity) GetWaitingRoom() OptBool {
	return s.WaitingRoom
}

// GetWebinarPassword returns the value of WebinarPassword.
func (s *GetGroupLockSettingsOK1MeetingSecurity) GetWebinarPassword() OptBool {
	return s.WebinarPassword
}

// SetApprovedOrDeniedCountriesOrRegions sets the value of ApprovedOrDeniedCountriesOrRegions.
func (s *GetGroupLockSettingsOK1MeetingSecurity) SetApprovedOrDeniedCountriesOrRegions(val OptBool) {
	s.ApprovedOrDeniedCountriesOrRegions = val
}

// SetAutoSecurity sets the value of AutoSecurity.
func (s *GetGroupLockSettingsOK1MeetingSecurity) SetAutoSecurity(val OptBool) {
	s.AutoSecurity = val
}

// SetBlockUserDomain sets the value of BlockUserDomain.
func (s *GetGroupLockSettingsOK1MeetingSecurity) SetBlockUserDomain(val OptBool) {
	s.BlockUserDomain = val
}

// SetEmbedPasswordInJoinLink sets the value of EmbedPasswordInJoinLink.
func (s *GetGroupLockSettingsOK1MeetingSecurity) SetEmbedPasswordInJoinLink(val OptBool) {
	s.EmbedPasswordInJoinLink = val
}

// SetEncryptionType sets the value of EncryptionType.
func (s *GetGroupLockSettingsOK1MeetingSecurity) SetEncryptionType(val OptString) {
	s.EncryptionType = val
}

// SetEndToEndEncryptedMeetings sets the value of EndToEndEncryptedMeetings.
func (s *GetGroupLockSettingsOK1MeetingSecurity) SetEndToEndEncryptedMeetings(val OptBool) {
	s.EndToEndEncryptedMeetings = val
}

// SetMeetingPassword sets the value of MeetingPassword.
func (s *GetGroupLockSettingsOK1MeetingSecurity) SetMeetingPassword(val OptBool) {
	s.MeetingPassword = val
}

// SetOnlyAuthenticatedCanJoinFromWebclient sets the value of OnlyAuthenticatedCanJoinFromWebclient.
func (s *GetGroupLockSettingsOK1MeetingSecurity) SetOnlyAuthenticatedCanJoinFromWebclient(val OptBool) {
	s.OnlyAuthenticatedCanJoinFromWebclient = val
}

// SetPhonePassword sets the value of PhonePassword.
func (s *GetGroupLockSettingsOK1MeetingSecurity) SetPhonePassword(val OptBool) {
	s.PhonePassword = val
}

// SetPmiPassword sets the value of PmiPassword.
func (s *GetGroupLockSettingsOK1MeetingSecurity) SetPmiPassword(val OptBool) {
	s.PmiPassword = val
}

// SetWaitingRoom sets the value of WaitingRoom.
func (s *GetGroupLockSettingsOK1MeetingSecurity) SetWaitingRoom(val OptBool) {
	s.WaitingRoom = val
}

// SetWebinarPassword sets the value of WebinarPassword.
func (s *GetGroupLockSettingsOK1MeetingSecurity) SetWebinarPassword(val OptBool) {
	s.WebinarPassword = val
}

// GetGroupSettingsOK represents sum type.
type GetGroupSettingsOK struct {
	Type                GetGroupSettingsOKType // switch on this field
	GetGroupSettingsOK0 GetGroupSettingsOK0
	GetGroupSettingsOK1 GetGroupSettingsOK1
	GetGroupSettingsOK2 GetGroupSettingsOK2
	GetGroupSettingsOK3 GetGroupSettingsOK3
}

// GetGroupSettingsOKType is oneOf type of GetGroupSettingsOK.
type GetGroupSettingsOKType string

// Possible values for GetGroupSettingsOKType.
const (
	GetGroupSettingsOK0GetGroupSettingsOK GetGroupSettingsOKType = "GetGroupSettingsOK0"
	GetGroupSettingsOK1GetGroupSettingsOK GetGroupSettingsOKType = "GetGroupSettingsOK1"
	GetGroupSettingsOK2GetGroupSettingsOK GetGroupSettingsOKType = "GetGroupSettingsOK2"
	GetGroupSettingsOK3GetGroupSettingsOK GetGroupSettingsOKType = "GetGroupSettingsOK3"
)

// IsGetGroupSettingsOK0 reports whether GetGroupSettingsOK is GetGroupSettingsOK0.
func (s GetGroupSettingsOK) IsGetGroupSettingsOK0() bool {
	return s.Type == GetGroupSettingsOK0GetGroupSettingsOK
}

// IsGetGroupSettingsOK1 reports whether GetGroupSettingsOK is GetGroupSettingsOK1.
func (s GetGroupSettingsOK) IsGetGroupSettingsOK1() bool {
	return s.Type == GetGroupSettingsOK1GetGroupSettingsOK
}

// IsGetGroupSettingsOK2 reports whether GetGroupSettingsOK is GetGroupSettingsOK2.
func (s GetGroupSettingsOK) IsGetGroupSettingsOK2() bool {
	return s.Type == GetGroupSettingsOK2GetGroupSettingsOK
}

// IsGetGroupSettingsOK3 reports whether GetGroupSettingsOK is GetGroupSettingsOK3.
func (s GetGroupSettingsOK) IsGetGroupSettingsOK3() bool {
	return s.Type == GetGroupSettingsOK3GetGroupSettingsOK
}

// SetGetGroupSettingsOK0 sets GetGroupSettingsOK to GetGroupSettingsOK0.
func (s *GetGroupSettingsOK) SetGetGroupSettingsOK0(v GetGroupSettingsOK0) {
	s.Type = GetGroupSettingsOK0GetGroupSettingsOK
	s.GetGroupSettingsOK0 = v
}

// GetGetGroupSettingsOK0 returns GetGroupSettingsOK0 and true boolean if GetGroupSettingsOK is GetGroupSettingsOK0.
func (s GetGroupSettingsOK) GetGetGroupSettingsOK0() (v GetGroupSettingsOK0, ok bool) {
	if !s.IsGetGroupSettingsOK0() {
		return v, false
	}
	return s.GetGroupSettingsOK0, true
}

// NewGetGroupSettingsOK0GetGroupSettingsOK returns new GetGroupSettingsOK from GetGroupSettingsOK0.
func NewGetGroupSettingsOK0GetGroupSettingsOK(v GetGroupSettingsOK0) GetGroupSettingsOK {
	var s GetGroupSettingsOK
	s.SetGetGroupSettingsOK0(v)
	return s
}

// SetGetGroupSettingsOK1 sets GetGroupSettingsOK to GetGroupSettingsOK1.
func (s *GetGroupSettingsOK) SetGetGroupSettingsOK1(v GetGroupSettingsOK1) {
	s.Type = GetGroupSettingsOK1GetGroupSettingsOK
	s.GetGroupSettingsOK1 = v
}

// GetGetGroupSettingsOK1 returns GetGroupSettingsOK1 and true boolean if GetGroupSettingsOK is GetGroupSettingsOK1.
func (s GetGroupSettingsOK) GetGetGroupSettingsOK1() (v GetGroupSettingsOK1, ok bool) {
	if !s.IsGetGroupSettingsOK1() {
		return v, false
	}
	return s.GetGroupSettingsOK1, true
}

// NewGetGroupSettingsOK1GetGroupSettingsOK returns new GetGroupSettingsOK from GetGroupSettingsOK1.
func NewGetGroupSettingsOK1GetGroupSettingsOK(v GetGroupSettingsOK1) GetGroupSettingsOK {
	var s GetGroupSettingsOK
	s.SetGetGroupSettingsOK1(v)
	return s
}

// SetGetGroupSettingsOK2 sets GetGroupSettingsOK to GetGroupSettingsOK2.
func (s *GetGroupSettingsOK) SetGetGroupSettingsOK2(v GetGroupSettingsOK2) {
	s.Type = GetGroupSettingsOK2GetGroupSettingsOK
	s.GetGroupSettingsOK2 = v
}

// GetGetGroupSettingsOK2 returns GetGroupSettingsOK2 and true boolean if GetGroupSettingsOK is GetGroupSettingsOK2.
func (s GetGroupSettingsOK) GetGetGroupSettingsOK2() (v GetGroupSettingsOK2, ok bool) {
	if !s.IsGetGroupSettingsOK2() {
		return v, false
	}
	return s.GetGroupSettingsOK2, true
}

// NewGetGroupSettingsOK2GetGroupSettingsOK returns new GetGroupSettingsOK from GetGroupSettingsOK2.
func NewGetGroupSettingsOK2GetGroupSettingsOK(v GetGroupSettingsOK2) GetGroupSettingsOK {
	var s GetGroupSettingsOK
	s.SetGetGroupSettingsOK2(v)
	return s
}

// SetGetGroupSettingsOK3 sets GetGroupSettingsOK to GetGroupSettingsOK3.
func (s *GetGroupSettingsOK) SetGetGroupSettingsOK3(v GetGroupSettingsOK3) {
	s.Type = GetGroupSettingsOK3GetGroupSettingsOK
	s.GetGroupSettingsOK3 = v
}

// GetGetGroupSettingsOK3 returns GetGroupSettingsOK3 and true boolean if GetGroupSettingsOK is GetGroupSettingsOK3.
func (s GetGroupSettingsOK) GetGetGroupSettingsOK3() (v GetGroupSettingsOK3, ok bool) {
	if !s.IsGetGroupSettingsOK3() {
		return v, false
	}
	return s.GetGroupSettingsOK3, true
}

// NewGetGroupSettingsOK3GetGroupSettingsOK returns new GetGroupSettingsOK from GetGroupSettingsOK3.
func NewGetGroupSettingsOK3GetGroupSettingsOK(v GetGroupSettingsOK3) GetGroupSettingsOK {
	var s GetGroupSettingsOK
	s.SetGetGroupSettingsOK3(v)
	return s
}

type GetGroupSettingsOK0 struct {
	// The group's audio conference settings.
	AudioConferencing OptGetGroupSettingsOK0AudioConferencing `json:"audio_conferencing"`
	EmailNotification OptGetGroupSettingsOK0EmailNotification `json:"email_notification"`
	InMeeting         OptGetGroupSettingsOK0InMeeting         `json:"in_meeting"`
	OtherOptions      OptGetGroupSettingsOK0OtherOptions      `json:"other_options"`
	Profile           OptGetGroupSettingsOK0Profile           `json:"profile"`
	Recording         OptGetGroupSettingsOK0Recording         `json:"recording"`
	ScheduleMeeting   OptGetGroupSettingsOK0ScheduleMeeting   `json:"schedule_meeting"`
	Telephony         OptGetGroupSettingsOK0Telephony         `json:"telephony"`
	// The account's chat settings.
	Chat OptGetGroupSettingsOK0Chat `json:"chat"`
}

// GetAudioConferencing returns the value of AudioConferencing.
func (s *GetGroupSettingsOK0) GetAudioConferencing() OptGetGroupSettingsOK0AudioConferencing {
	return s.AudioConferencing
}

// GetEmailNotification returns the value of EmailNotification.
func (s *GetGroupSettingsOK0) GetEmailNotification() OptGetGroupSettingsOK0EmailNotification {
	return s.EmailNotification
}

// GetInMeeting returns the value of InMeeting.
func (s *GetGroupSettingsOK0) GetInMeeting() OptGetGroupSettingsOK0InMeeting {
	return s.InMeeting
}

// GetOtherOptions returns the value of OtherOptions.
func (s *GetGroupSettingsOK0) GetOtherOptions() OptGetGroupSettingsOK0OtherOptions {
	return s.OtherOptions
}

// GetProfile returns the value of Profile.
func (s *GetGroupSettingsOK0) GetProfile() OptGetGroupSettingsOK0Profile {
	return s.Profile
}

// GetRecording returns the value of Recording.
func (s *GetGroupSettingsOK0) GetRecording() OptGetGroupSettingsOK0Recording {
	return s.Recording
}

// GetScheduleMeeting returns the value of ScheduleMeeting.
func (s *GetGroupSettingsOK0) GetScheduleMeeting() OptGetGroupSettingsOK0ScheduleMeeting {
	return s.ScheduleMeeting
}

// GetTelephony returns the value of Telephony.
func (s *GetGroupSettingsOK0) GetTelephony() OptGetGroupSettingsOK0Telephony {
	return s.Telephony
}

// GetChat returns the value of Chat.
func (s *GetGroupSettingsOK0) GetChat() OptGetGroupSettingsOK0Chat {
	return s.Chat
}

// SetAudioConferencing sets the value of AudioConferencing.
func (s *GetGroupSettingsOK0) SetAudioConferencing(val OptGetGroupSettingsOK0AudioConferencing) {
	s.AudioConferencing = val
}

// SetEmailNotification sets the value of EmailNotification.
func (s *GetGroupSettingsOK0) SetEmailNotification(val OptGetGroupSettingsOK0EmailNotification) {
	s.EmailNotification = val
}

// SetInMeeting sets the value of InMeeting.
func (s *GetGroupSettingsOK0) SetInMeeting(val OptGetGroupSettingsOK0InMeeting) {
	s.InMeeting = val
}

// SetOtherOptions sets the value of OtherOptions.
func (s *GetGroupSettingsOK0) SetOtherOptions(val OptGetGroupSettingsOK0OtherOptions) {
	s.OtherOptions = val
}

// SetProfile sets the value of Profile.
func (s *GetGroupSettingsOK0) SetProfile(val OptGetGroupSettingsOK0Profile) {
	s.Profile = val
}

// SetRecording sets the value of Recording.
func (s *GetGroupSettingsOK0) SetRecording(val OptGetGroupSettingsOK0Recording) {
	s.Recording = val
}

// SetScheduleMeeting sets the value of ScheduleMeeting.
func (s *GetGroupSettingsOK0) SetScheduleMeeting(val OptGetGroupSettingsOK0ScheduleMeeting) {
	s.ScheduleMeeting = val
}

// SetTelephony sets the value of Telephony.
func (s *GetGroupSettingsOK0) SetTelephony(val OptGetGroupSettingsOK0Telephony) {
	s.Telephony = val
}

// SetChat sets the value of Chat.
func (s *GetGroupSettingsOK0) SetChat(val OptGetGroupSettingsOK0Chat) {
	s.Chat = val
}

// The group's audio conference settings.
type GetGroupSettingsOK0AudioConferencing struct {
	// The group's [**Toll-free and Fee-based Toll Call**](https://support.zoom.
	// us/hc/en-us/articles/360060950711-Enabling-Toll-free-and-Fee-based-Toll-Call#h_01F51844DRCX3K7BRTMZ40381R) settings.
	TollFreeAndFeeBasedTollCall OptGetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall `json:"toll_free_and_fee_based_toll_call"`
}

// GetTollFreeAndFeeBasedTollCall returns the value of TollFreeAndFeeBasedTollCall.
func (s *GetGroupSettingsOK0AudioConferencing) GetTollFreeAndFeeBasedTollCall() OptGetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall {
	return s.TollFreeAndFeeBasedTollCall
}

// SetTollFreeAndFeeBasedTollCall sets the value of TollFreeAndFeeBasedTollCall.
func (s *GetGroupSettingsOK0AudioConferencing) SetTollFreeAndFeeBasedTollCall(val OptGetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall) {
	s.TollFreeAndFeeBasedTollCall = val
}

// The group's [**Toll-free and Fee-based Toll Call**](https://support.zoom.
// us/hc/en-us/articles/360060950711-Enabling-Toll-free-and-Fee-based-Toll-Call#h_01F51844DRCX3K7BRTMZ40381R) settings.
type GetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall struct {
	// Whether webinar attendees can dial in through the account's **Toll-free and Fee-based Toll Call**
	// phone numbers. This feature is only available in version 5.2.2 and higher.
	AllowWebinarAttendeesDial OptBool `json:"allow_webinar_attendees_dial"`
	// Whether the group has the [**Toll-free and Fee-based Toll Call**](https://support.zoom.
	// us/hc/en-us/articles/360060950711-Enabling-Toll-free-and-Fee-based-Toll-Call#h_01F51844DRCX3K7BRTMZ40381R) setting enabled.
	Enable OptBool `json:"enable"`
	// The group's **Toll-free and Fee-based Toll Call** phone number information.
	Numbers []GetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem `json:"numbers"`
}

// GetAllowWebinarAttendeesDial returns the value of AllowWebinarAttendeesDial.
func (s *GetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall) GetAllowWebinarAttendeesDial() OptBool {
	return s.AllowWebinarAttendeesDial
}

// GetEnable returns the value of Enable.
func (s *GetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall) GetEnable() OptBool {
	return s.Enable
}

// GetNumbers returns the value of Numbers.
func (s *GetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall) GetNumbers() []GetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem {
	return s.Numbers
}

// SetAllowWebinarAttendeesDial sets the value of AllowWebinarAttendeesDial.
func (s *GetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall) SetAllowWebinarAttendeesDial(val OptBool) {
	s.AllowWebinarAttendeesDial = val
}

// SetEnable sets the value of Enable.
func (s *GetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall) SetEnable(val OptBool) {
	s.Enable = val
}

// SetNumbers sets the value of Numbers.
func (s *GetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall) SetNumbers(val []GetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem) {
	s.Numbers = val
}

type GetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem struct {
	// The phone number's [E.164 country calling code](https://en.wikipedia.
	// org/wiki/List_of_country_calling_codes).
	Code OptString `json:"code"`
	// The phone number's [country code](https://developers.zoom.
	// us/docs/api/rest/other-references/abbreviation-lists/#countries).
	CountryCode OptString `json:"country_code"`
	// The country name.
	CountryName OptString `json:"country_name"`
	// The phone number's display number.
	DisplayNumber OptString `json:"display_number"`
	// The phone number.
	Number OptString `json:"number"`
}

// GetCode returns the value of Code.
func (s *GetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem) GetCode() OptString {
	return s.Code
}

// GetCountryCode returns the value of CountryCode.
func (s *GetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem) GetCountryCode() OptString {
	return s.CountryCode
}

// GetCountryName returns the value of CountryName.
func (s *GetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem) GetCountryName() OptString {
	return s.CountryName
}

// GetDisplayNumber returns the value of DisplayNumber.
func (s *GetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem) GetDisplayNumber() OptString {
	return s.DisplayNumber
}

// GetNumber returns the value of Number.
func (s *GetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem) GetNumber() OptString {
	return s.Number
}

// SetCode sets the value of Code.
func (s *GetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem) SetCode(val OptString) {
	s.Code = val
}

// SetCountryCode sets the value of CountryCode.
func (s *GetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem) SetCountryCode(val OptString) {
	s.CountryCode = val
}

// SetCountryName sets the value of CountryName.
func (s *GetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem) SetCountryName(val OptString) {
	s.CountryName = val
}

// SetDisplayNumber sets the value of DisplayNumber.
func (s *GetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem) SetDisplayNumber(val OptString) {
	s.DisplayNumber = val
}

// SetNumber sets the value of Number.
func (s *GetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem) SetNumber(val OptString) {
	s.Number = val
}

// The account's chat settings.
type GetGroupSettingsOK0Chat struct {
	// Users can share files in chats and channels.
	ShareFiles OptGetGroupSettingsOK0ChatShareFiles `json:"share_files"`
	// Chat emojis.
	ChatEmojis OptGetGroupSettingsOK0ChatChatEmojis `json:"chat_emojis"`
	// Allow users to record voice messages that can be sent in direct messages or group conversations.
	RecordVoiceMessages OptBool `json:"record_voice_messages"`
	// Allow users to record video messages that can be sent in direct messages or group conversations.
	// If the file share setting is disabled, they will not be able to record and send video messages.
	RecordVideoMessages OptBool `json:"record_video_messages"`
	// Allow users to take and send screenshots in direct messages or group conversations.
	ScreenCapture OptBool `json:"screen_capture"`
	// Allow users to create public channels.
	CreatePublicChannels OptBool `json:"create_public_channels"`
	// Allow users to create private channels.
	CreatePrivateChannels OptBool `json:"create_private_channels"`
	// Share links to messages and channels in Team Chat.
	ShareLinksInChat OptBool `json:"share_links_in_chat"`
	// Schedule a meeting from chat or channel.
	ScheduleMeetingsInChat OptBool `json:"schedule_meetings_in_chat"`
	// Set retention period for messages and files in Zoom's cloud.
	SetRetentionPeriodInCloud OptGetGroupSettingsOK0ChatSetRetentionPeriodInCloud `json:"set_retention_period_in_cloud"`
	// Store messages on local devices, excluding personal channel messages.
	SetRetentionPeriodInLocal OptGetGroupSettingsOK0ChatSetRetentionPeriodInLocal `json:"set_retention_period_in_local"`
	// Allow users to search others, when selecting multiple items, separate them with commas.
	// * ''-none.
	// * '1' - In the same account.
	// * '2' - Under the same master account, including all sub acounts.
	// * '3' - Under the same organization.
	AllowUsersToSearchOthersOptions OptString `json:"allow_users_to_search_others_options"`
	// Allow users to add contacts.
	AllowUsersToAddContacts OptGetGroupSettingsOK0ChatAllowUsersToAddContacts `json:"allow_users_to_add_contacts"`
	// Allow users to chat with others.
	AllowUsersToChatWithOthers OptGetGroupSettingsOK0ChatAllowUsersToChatWithOthers `json:"allow_users_to_chat_with_others"`
	// Information about the Chat Etiquette tool.
	ChatEtiquetteTool OptGetGroupSettingsOK0ChatChatEtiquetteTool `json:"chat_etiquette_tool"`
	// Send data to third-party archiving service.
	SendDataToThirdPartyArchivingService OptGetGroupSettingsOK0ChatSendDataToThirdPartyArchivingService `json:"send_data_to_third_party_archiving_service"`
	// Allow users to translate team chat messages. [Learn more].(https://support.zoom.
	// us/hc/en-us/articles/12998089084685).
	TranslateMessages OptBool `json:"translate_messages"`
	// Allow users to search GIF images from GIPHY when they compose messages. See GIPHY's website for
	// more information about content ratings.
	SearchAndSendAnimatedGIFImages OptGetGroupSettingsOK0ChatSearchAndSendAnimatedGIFImages `json:"search_and_send_animated_gif_images"`
}

// GetShareFiles returns the value of ShareFiles.
func (s *GetGroupSettingsOK0Chat) GetShareFiles() OptGetGroupSettingsOK0ChatShareFiles {
	return s.ShareFiles
}

// GetChatEmojis returns the value of ChatEmojis.
func (s *GetGroupSettingsOK0Chat) GetChatEmojis() OptGetGroupSettingsOK0ChatChatEmojis {
	return s.ChatEmojis
}

// GetRecordVoiceMessages returns the value of RecordVoiceMessages.
func (s *GetGroupSettingsOK0Chat) GetRecordVoiceMessages() OptBool {
	return s.RecordVoiceMessages
}

// GetRecordVideoMessages returns the value of RecordVideoMessages.
func (s *GetGroupSettingsOK0Chat) GetRecordVideoMessages() OptBool {
	return s.RecordVideoMessages
}

// GetScreenCapture returns the value of ScreenCapture.
func (s *GetGroupSettingsOK0Chat) GetScreenCapture() OptBool {
	return s.ScreenCapture
}

// GetCreatePublicChannels returns the value of CreatePublicChannels.
func (s *GetGroupSettingsOK0Chat) GetCreatePublicChannels() OptBool {
	return s.CreatePublicChannels
}

// GetCreatePrivateChannels returns the value of CreatePrivateChannels.
func (s *GetGroupSettingsOK0Chat) GetCreatePrivateChannels() OptBool {
	return s.CreatePrivateChannels
}

// GetShareLinksInChat returns the value of ShareLinksInChat.
func (s *GetGroupSettingsOK0Chat) GetShareLinksInChat() OptBool {
	return s.ShareLinksInChat
}

// GetScheduleMeetingsInChat returns the value of ScheduleMeetingsInChat.
func (s *GetGroupSettingsOK0Chat) GetScheduleMeetingsInChat() OptBool {
	return s.ScheduleMeetingsInChat
}

// GetSetRetentionPeriodInCloud returns the value of SetRetentionPeriodInCloud.
func (s *GetGroupSettingsOK0Chat) GetSetRetentionPeriodInCloud() OptGetGroupSettingsOK0ChatSetRetentionPeriodInCloud {
	return s.SetRetentionPeriodInCloud
}

// GetSetRetentionPeriodInLocal returns the value of SetRetentionPeriodInLocal.
func (s *GetGroupSettingsOK0Chat) GetSetRetentionPeriodInLocal() OptGetGroupSettingsOK0ChatSetRetentionPeriodInLocal {
	return s.SetRetentionPeriodInLocal
}

// GetAllowUsersToSearchOthersOptions returns the value of AllowUsersToSearchOthersOptions.
func (s *GetGroupSettingsOK0Chat) GetAllowUsersToSearchOthersOptions() OptString {
	return s.AllowUsersToSearchOthersOptions
}

// GetAllowUsersToAddContacts returns the value of AllowUsersToAddContacts.
func (s *GetGroupSettingsOK0Chat) GetAllowUsersToAddContacts() OptGetGroupSettingsOK0ChatAllowUsersToAddContacts {
	return s.AllowUsersToAddContacts
}

// GetAllowUsersToChatWithOthers returns the value of AllowUsersToChatWithOthers.
func (s *GetGroupSettingsOK0Chat) GetAllowUsersToChatWithOthers() OptGetGroupSettingsOK0ChatAllowUsersToChatWithOthers {
	return s.AllowUsersToChatWithOthers
}

// GetChatEtiquetteTool returns the value of ChatEtiquetteTool.
func (s *GetGroupSettingsOK0Chat) GetChatEtiquetteTool() OptGetGroupSettingsOK0ChatChatEtiquetteTool {
	return s.ChatEtiquetteTool
}

// GetSendDataToThirdPartyArchivingService returns the value of SendDataToThirdPartyArchivingService.
func (s *GetGroupSettingsOK0Chat) GetSendDataToThirdPartyArchivingService() OptGetGroupSettingsOK0ChatSendDataToThirdPartyArchivingService {
	return s.SendDataToThirdPartyArchivingService
}

// GetTranslateMessages returns the value of TranslateMessages.
func (s *GetGroupSettingsOK0Chat) GetTranslateMessages() OptBool {
	return s.TranslateMessages
}

// GetSearchAndSendAnimatedGIFImages returns the value of SearchAndSendAnimatedGIFImages.
func (s *GetGroupSettingsOK0Chat) GetSearchAndSendAnimatedGIFImages() OptGetGroupSettingsOK0ChatSearchAndSendAnimatedGIFImages {
	return s.SearchAndSendAnimatedGIFImages
}

// SetShareFiles sets the value of ShareFiles.
func (s *GetGroupSettingsOK0Chat) SetShareFiles(val OptGetGroupSettingsOK0ChatShareFiles) {
	s.ShareFiles = val
}

// SetChatEmojis sets the value of ChatEmojis.
func (s *GetGroupSettingsOK0Chat) SetChatEmojis(val OptGetGroupSettingsOK0ChatChatEmojis) {
	s.ChatEmojis = val
}

// SetRecordVoiceMessages sets the value of RecordVoiceMessages.
func (s *GetGroupSettingsOK0Chat) SetRecordVoiceMessages(val OptBool) {
	s.RecordVoiceMessages = val
}

// SetRecordVideoMessages sets the value of RecordVideoMessages.
func (s *GetGroupSettingsOK0Chat) SetRecordVideoMessages(val OptBool) {
	s.RecordVideoMessages = val
}

// SetScreenCapture sets the value of ScreenCapture.
func (s *GetGroupSettingsOK0Chat) SetScreenCapture(val OptBool) {
	s.ScreenCapture = val
}

// SetCreatePublicChannels sets the value of CreatePublicChannels.
func (s *GetGroupSettingsOK0Chat) SetCreatePublicChannels(val OptBool) {
	s.CreatePublicChannels = val
}

// SetCreatePrivateChannels sets the value of CreatePrivateChannels.
func (s *GetGroupSettingsOK0Chat) SetCreatePrivateChannels(val OptBool) {
	s.CreatePrivateChannels = val
}

// SetShareLinksInChat sets the value of ShareLinksInChat.
func (s *GetGroupSettingsOK0Chat) SetShareLinksInChat(val OptBool) {
	s.ShareLinksInChat = val
}

// SetScheduleMeetingsInChat sets the value of ScheduleMeetingsInChat.
func (s *GetGroupSettingsOK0Chat) SetScheduleMeetingsInChat(val OptBool) {
	s.ScheduleMeetingsInChat = val
}

// SetSetRetentionPeriodInCloud sets the value of SetRetentionPeriodInCloud.
func (s *GetGroupSettingsOK0Chat) SetSetRetentionPeriodInCloud(val OptGetGroupSettingsOK0ChatSetRetentionPeriodInCloud) {
	s.SetRetentionPeriodInCloud = val
}

// SetSetRetentionPeriodInLocal sets the value of SetRetentionPeriodInLocal.
func (s *GetGroupSettingsOK0Chat) SetSetRetentionPeriodInLocal(val OptGetGroupSettingsOK0ChatSetRetentionPeriodInLocal) {
	s.SetRetentionPeriodInLocal = val
}

// SetAllowUsersToSearchOthersOptions sets the value of AllowUsersToSearchOthersOptions.
func (s *GetGroupSettingsOK0Chat) SetAllowUsersToSearchOthersOptions(val OptString) {
	s.AllowUsersToSearchOthersOptions = val
}

// SetAllowUsersToAddContacts sets the value of AllowUsersToAddContacts.
func (s *GetGroupSettingsOK0Chat) SetAllowUsersToAddContacts(val OptGetGroupSettingsOK0ChatAllowUsersToAddContacts) {
	s.AllowUsersToAddContacts = val
}

// SetAllowUsersToChatWithOthers sets the value of AllowUsersToChatWithOthers.
func (s *GetGroupSettingsOK0Chat) SetAllowUsersToChatWithOthers(val OptGetGroupSettingsOK0ChatAllowUsersToChatWithOthers) {
	s.AllowUsersToChatWithOthers = val
}

// SetChatEtiquetteTool sets the value of ChatEtiquetteTool.
func (s *GetGroupSettingsOK0Chat) SetChatEtiquetteTool(val OptGetGroupSettingsOK0ChatChatEtiquetteTool) {
	s.ChatEtiquetteTool = val
}

// SetSendDataToThirdPartyArchivingService sets the value of SendDataToThirdPartyArchivingService.
func (s *GetGroupSettingsOK0Chat) SetSendDataToThirdPartyArchivingService(val OptGetGroupSettingsOK0ChatSendDataToThirdPartyArchivingService) {
	s.SendDataToThirdPartyArchivingService = val
}

// SetTranslateMessages sets the value of TranslateMessages.
func (s *GetGroupSettingsOK0Chat) SetTranslateMessages(val OptBool) {
	s.TranslateMessages = val
}

// SetSearchAndSendAnimatedGIFImages sets the value of SearchAndSendAnimatedGIFImages.
func (s *GetGroupSettingsOK0Chat) SetSearchAndSendAnimatedGIFImages(val OptGetGroupSettingsOK0ChatSearchAndSendAnimatedGIFImages) {
	s.SearchAndSendAnimatedGIFImages = val
}

// Allow users to add contacts.
type GetGroupSettingsOK0ChatAllowUsersToAddContacts struct {
	// By disabling this setting, users will not be able to add contacts.
	Enable OptBool `json:"enable"`
	// The type of allowing users to add contacts.
	// * 1 - Anyone, either internal and external contacts.
	// * 2 - In the same organization.
	// * 3 - In the same organization and specified domains.
	// * 4 - In the same organization and specified users.
	SelectedOption OptInt `json:"selected_option"`
	// The domains or emails, internal or external.
	// * When the `selected_option` field value is `3`, the value is internal or external domains. Use a
	// comma to separate multiple domains.
	// * When the `selected_option` field value is `4`, the value is internal or external email addresses.
	//  Use a comma to separate multiple emails.
	UserEmailAddresses OptString `json:"user_email_addresses"`
}

// GetEnable returns the value of Enable.
func (s *GetGroupSettingsOK0ChatAllowUsersToAddContacts) GetEnable() OptBool {
	return s.Enable
}

// GetSelectedOption returns the value of SelectedOption.
func (s *GetGroupSettingsOK0ChatAllowUsersToAddContacts) GetSelectedOption() OptInt {
	return s.SelectedOption
}

// GetUserEmailAddresses returns the value of UserEmailAddresses.
func (s *GetGroupSettingsOK0ChatAllowUsersToAddContacts) GetUserEmailAddresses() OptString {
	return s.UserEmailAddresses
}

// SetEnable sets the value of Enable.
func (s *GetGroupSettingsOK0ChatAllowUsersToAddContacts) SetEnable(val OptBool) {
	s.Enable = val
}

// SetSelectedOption sets the value of SelectedOption.
func (s *GetGroupSettingsOK0ChatAllowUsersToAddContacts) SetSelectedOption(val OptInt) {
	s.SelectedOption = val
}

// SetUserEmailAddresses sets the value of UserEmailAddresses.
func (s *GetGroupSettingsOK0ChatAllowUsersToAddContacts) SetUserEmailAddresses(val OptString) {
	s.UserEmailAddresses = val
}

// Allow users to chat with others.
type GetGroupSettingsOK0ChatAllowUsersToChatWithOthers struct {
	// If you select 'In the same organization', users may still be able to chat with external users if
	// they are added to channels or group chats with external users.
	Enable OptBool `json:"enable"`
	// The type of allowing users to add contacts.
	// * 1 - Anyone (internal and external contacts).
	// * 2 - In the same organization.
	// * 3 - In the same organization and specified domains.
	// * 4 - In the same organization and specified users.
	SelectedOption OptInt `json:"selected_option"`
	// The domains or emails, either internal or external.
	// * When the `selected_option` field value is `3`, the value is internal or external domains. Use a
	// comma to separate multiple domains.
	// * When the `selected_option` field value is `4`, the value is internal or external email addresses.
	//  Use a comma to separate multiple emails.
	UserEmailAddresses OptString `json:"user_email_addresses"`
}

// GetEnable returns the value of Enable.
func (s *GetGroupSettingsOK0ChatAllowUsersToChatWithOthers) GetEnable() OptBool {
	return s.Enable
}

// GetSelectedOption returns the value of SelectedOption.
func (s *GetGroupSettingsOK0ChatAllowUsersToChatWithOthers) GetSelectedOption() OptInt {
	return s.SelectedOption
}

// GetUserEmailAddresses returns the value of UserEmailAddresses.
func (s *GetGroupSettingsOK0ChatAllowUsersToChatWithOthers) GetUserEmailAddresses() OptString {
	return s.UserEmailAddresses
}

// SetEnable sets the value of Enable.
func (s *GetGroupSettingsOK0ChatAllowUsersToChatWithOthers) SetEnable(val OptBool) {
	s.Enable = val
}

// SetSelectedOption sets the value of SelectedOption.
func (s *GetGroupSettingsOK0ChatAllowUsersToChatWithOthers) SetSelectedOption(val OptInt) {
	s.SelectedOption = val
}

// SetUserEmailAddresses sets the value of UserEmailAddresses.
func (s *GetGroupSettingsOK0ChatAllowUsersToChatWithOthers) SetUserEmailAddresses(val OptString) {
	s.UserEmailAddresses = val
}

// Chat emojis.
type GetGroupSettingsOK0ChatChatEmojis struct {
	// Allow users to use the emoji library in direct messages or group conversations. Choose between
	// allowing users to use any emoji in the library, or choose to allow only pre-selected emojis. If
	// the setting is disabled, users can still use keyboard shortcuts to add emojis. Users can change
	// their emoji skin tone in Settings.
	Enable       OptBool   `json:"enable"`
	EmojisOption OptString `json:"emojis_option"`
}

// GetEnable returns the value of Enable.
func (s *GetGroupSettingsOK0ChatChatEmojis) GetEnable() OptBool {
	return s.Enable
}

// GetEmojisOption returns the value of EmojisOption.
func (s *GetGroupSettingsOK0ChatChatEmojis) GetEmojisOption() OptString {
	return s.EmojisOption
}

// SetEnable sets the value of Enable.
func (s *GetGroupSettingsOK0ChatChatEmojis) SetEnable(val OptBool) {
	s.Enable = val
}

// SetEmojisOption sets the value of EmojisOption.
func (s *GetGroupSettingsOK0ChatChatEmojis) SetEmojisOption(val OptString) {
	s.EmojisOption = val
}

// Information about the Chat Etiquette tool.
type GetGroupSettingsOK0ChatChatEtiquetteTool struct {
	// Whether the **Chat Etiquette Tool** is enabled.
	Enable OptBool `json:"enable"`
	// Information about the defined **Chat Etiquette Tool** policies.
	Policies []GetGroupSettingsOK0ChatChatEtiquetteToolPoliciesItem `json:"policies"`
}

// GetEnable returns the value of Enable.
func (s *GetGroupSettingsOK0ChatChatEtiquetteTool) GetEnable() OptBool {
	return s.Enable
}

// GetPolicies returns the value of Policies.
func (s *GetGroupSettingsOK0ChatChatEtiquetteTool) GetPolicies() []GetGroupSettingsOK0ChatChatEtiquetteToolPoliciesItem {
	return s.Policies
}

// SetEnable sets the value of Enable.
func (s *GetGroupSettingsOK0ChatChatEtiquetteTool) SetEnable(val OptBool) {
	s.Enable = val
}

// SetPolicies sets the value of Policies.
func (s *GetGroupSettingsOK0ChatChatEtiquetteTool) SetPolicies(val []GetGroupSettingsOK0ChatChatEtiquetteToolPoliciesItem) {
	s.Policies = val
}

type GetGroupSettingsOK0ChatChatEtiquetteToolPoliciesItem struct {
	// The policy's description.
	Description OptString `json:"description"`
	// The policy ID.
	ID OptString `json:"id"`
	// Whether the policy is locked by an account-level user. When it is locked, users cannot update the
	// policy.
	IsLocked OptBool `json:"is_locked"`
	// A list of defined rule keywords.
	Keywords []string `json:"keywords"`
	// The policy name.
	Name OptString `json:"name"`
	// The regular expression to match to the content of chat messages.
	RegularExpression OptString `json:"regular_expression"`
	// The policy's current status.
	// * `activated` - Activated.
	// * `deactivated` - Deactivated.
	Status OptString `json:"status"`
	// The policy's trigger action.
	// * `1` - Ask the user to confirm before they send the message.
	// * `2` - Block the user's message.
	TriggerAction OptInt `json:"trigger_action"`
}

// GetDescription returns the value of Description.
func (s *GetGroupSettingsOK0ChatChatEtiquetteToolPoliciesItem) GetDescription() OptString {
	return s.Description
}

// GetID returns the value of ID.
func (s *GetGroupSettingsOK0ChatChatEtiquetteToolPoliciesItem) GetID() OptString {
	return s.ID
}

// GetIsLocked returns the value of IsLocked.
func (s *GetGroupSettingsOK0ChatChatEtiquetteToolPoliciesItem) GetIsLocked() OptBool {
	return s.IsLocked
}

// GetKeywords returns the value of Keywords.
func (s *GetGroupSettingsOK0ChatChatEtiquetteToolPoliciesItem) GetKeywords() []string {
	return s.Keywords
}

// GetName returns the value of Name.
func (s *GetGroupSettingsOK0ChatChatEtiquetteToolPoliciesItem) GetName() OptString {
	return s.Name
}

// GetRegularExpression returns the value of RegularExpression.
func (s *GetGroupSettingsOK0ChatChatEtiquetteToolPoliciesItem) GetRegularExpression() OptString {
	return s.RegularExpression
}

// GetStatus returns the value of Status.
func (s *GetGroupSettingsOK0ChatChatEtiquetteToolPoliciesItem) GetStatus() OptString {
	return s.Status
}

// GetTriggerAction returns the value of TriggerAction.
func (s *GetGroupSettingsOK0ChatChatEtiquetteToolPoliciesItem) GetTriggerAction() OptInt {
	return s.TriggerAction
}

// SetDescription sets the value of Description.
func (s *GetGroupSettingsOK0ChatChatEtiquetteToolPoliciesItem) SetDescription(val OptString) {
	s.Description = val
}

// SetID sets the value of ID.
func (s *GetGroupSettingsOK0ChatChatEtiquetteToolPoliciesItem) SetID(val OptString) {
	s.ID = val
}

// SetIsLocked sets the value of IsLocked.
func (s *GetGroupSettingsOK0ChatChatEtiquetteToolPoliciesItem) SetIsLocked(val OptBool) {
	s.IsLocked = val
}

// SetKeywords sets the value of Keywords.
func (s *GetGroupSettingsOK0ChatChatEtiquetteToolPoliciesItem) SetKeywords(val []string) {
	s.Keywords = val
}

// SetName sets the value of Name.
func (s *GetGroupSettingsOK0ChatChatEtiquetteToolPoliciesItem) SetName(val OptString) {
	s.Name = val
}

// SetRegularExpression sets the value of RegularExpression.
func (s *GetGroupSettingsOK0ChatChatEtiquetteToolPoliciesItem) SetRegularExpression(val OptString) {
	s.RegularExpression = val
}

// SetStatus sets the value of Status.
func (s *GetGroupSettingsOK0ChatChatEtiquetteToolPoliciesItem) SetStatus(val OptString) {
	s.Status = val
}

// SetTriggerAction sets the value of TriggerAction.
func (s *GetGroupSettingsOK0ChatChatEtiquetteToolPoliciesItem) SetTriggerAction(val OptInt) {
	s.TriggerAction = val
}

// Allow users to search GIF images from GIPHY when they compose messages. See GIPHY's website for
// more information about content ratings.
type GetGroupSettingsOK0ChatSearchAndSendAnimatedGIFImages struct {
	// Whether to allow users to search GIF images from GIPHY when they compose messages.
	Enable OptBool `json:"enable"`
}

// GetEnable returns the value of Enable.
func (s *GetGroupSettingsOK0ChatSearchAndSendAnimatedGIFImages) GetEnable() OptBool {
	return s.Enable
}

// SetEnable sets the value of Enable.
func (s *GetGroupSettingsOK0ChatSearchAndSendAnimatedGIFImages) SetEnable(val OptBool) {
	s.Enable = val
}

// Send data to third-party archiving service.
type GetGroupSettingsOK0ChatSendDataToThirdPartyArchivingService struct {
	// Allow users to send data to third-party archiving service.
	Enable OptBool `json:"enable"`
}

// GetEnable returns the value of Enable.
func (s *GetGroupSettingsOK0ChatSendDataToThirdPartyArchivingService) GetEnable() OptBool {
	return s.Enable
}

// SetEnable sets the value of Enable.
func (s *GetGroupSettingsOK0ChatSendDataToThirdPartyArchivingService) SetEnable(val OptBool) {
	s.Enable = val
}

// Set retention period for messages and files in Zoom's cloud.
type GetGroupSettingsOK0ChatSetRetentionPeriodInCloud struct {
	// By default, messages and files are stored in Zoom's cloud. Enable this setting to specify when
	// they are deleted. When retention is disabled, messages sent by offline users can be received
	// within 7 days before they are deleted.
	Enable OptBool `json:"enable"`
	// Delete direct messages and group conversations after retention period. 'y' - year, 'm' - month,
	// 'd' - day.
	RetentionPeriodOfDirectMessagesAndGroupConversation OptString `json:"retention_period_of_direct_messages_and_group_conversation"`
	// Delete data in channels after retention period. 'y' - year, 'm' - month, 'd' - day.
	RetentionPeriodOfChannels OptString `json:"retention_period_of_channels"`
}

// GetEnable returns the value of Enable.
func (s *GetGroupSettingsOK0ChatSetRetentionPeriodInCloud) GetEnable() OptBool {
	return s.Enable
}

// GetRetentionPeriodOfDirectMessagesAndGroupConversation returns the value of RetentionPeriodOfDirectMessagesAndGroupConversation.
func (s *GetGroupSettingsOK0ChatSetRetentionPeriodInCloud) GetRetentionPeriodOfDirectMessagesAndGroupConversation() OptString {
	return s.RetentionPeriodOfDirectMessagesAndGroupConversation
}

// GetRetentionPeriodOfChannels returns the value of RetentionPeriodOfChannels.
func (s *GetGroupSettingsOK0ChatSetRetentionPeriodInCloud) GetRetentionPeriodOfChannels() OptString {
	return s.RetentionPeriodOfChannels
}

// SetEnable sets the value of Enable.
func (s *GetGroupSettingsOK0ChatSetRetentionPeriodInCloud) SetEnable(val OptBool) {
	s.Enable = val
}

// SetRetentionPeriodOfDirectMessagesAndGroupConversation sets the value of RetentionPeriodOfDirectMessagesAndGroupConversation.
func (s *GetGroupSettingsOK0ChatSetRetentionPeriodInCloud) SetRetentionPeriodOfDirectMessagesAndGroupConversation(val OptString) {
	s.RetentionPeriodOfDirectMessagesAndGroupConversation = val
}

// SetRetentionPeriodOfChannels sets the value of RetentionPeriodOfChannels.
func (s *GetGroupSettingsOK0ChatSetRetentionPeriodInCloud) SetRetentionPeriodOfChannels(val OptString) {
	s.RetentionPeriodOfChannels = val
}

// Store messages on local devices, excluding personal channel messages.
type GetGroupSettingsOK0ChatSetRetentionPeriodInLocal struct {
	// Specify how long your messages are saved on local devices. If this setting is disabled, messages
	// are never deleted locally.
	Enable OptBool `json:"enable"`
	// Delete direct messages and group conversations after retention period. 'y' - year, 'm' - month,
	// 'd' - day.
	RetentionPeriodOfDirectMessagesAndGroupConversation OptString `json:"retention_period_of_direct_messages_and_group_conversation"`
	// Delete data in channels after retention period. 'y' - year, 'm' - month, 'd' - day.
	RetentionPeriodOfChannels OptString `json:"retention_period_of_channels"`
}

// GetEnable returns the value of Enable.
func (s *GetGroupSettingsOK0ChatSetRetentionPeriodInLocal) GetEnable() OptBool {
	return s.Enable
}

// GetRetentionPeriodOfDirectMessagesAndGroupConversation returns the value of RetentionPeriodOfDirectMessagesAndGroupConversation.
func (s *GetGroupSettingsOK0ChatSetRetentionPeriodInLocal) GetRetentionPeriodOfDirectMessagesAndGroupConversation() OptString {
	return s.RetentionPeriodOfDirectMessagesAndGroupConversation
}

// GetRetentionPeriodOfChannels returns the value of RetentionPeriodOfChannels.
func (s *GetGroupSettingsOK0ChatSetRetentionPeriodInLocal) GetRetentionPeriodOfChannels() OptString {
	return s.RetentionPeriodOfChannels
}

// SetEnable sets the value of Enable.
func (s *GetGroupSettingsOK0ChatSetRetentionPeriodInLocal) SetEnable(val OptBool) {
	s.Enable = val
}

// SetRetentionPeriodOfDirectMessagesAndGroupConversation sets the value of RetentionPeriodOfDirectMessagesAndGroupConversation.
func (s *GetGroupSettingsOK0ChatSetRetentionPeriodInLocal) SetRetentionPeriodOfDirectMessagesAndGroupConversation(val OptString) {
	s.RetentionPeriodOfDirectMessagesAndGroupConversation = val
}

// SetRetentionPeriodOfChannels sets the value of RetentionPeriodOfChannels.
func (s *GetGroupSettingsOK0ChatSetRetentionPeriodInLocal) SetRetentionPeriodOfChannels(val OptString) {
	s.RetentionPeriodOfChannels = val
}

// Users can share files in chats and channels.
type GetGroupSettingsOK0ChatShareFiles struct {
	// Allow users of this account to send and receive files in chats and channels. When disabled, users
	// can still take and share screenshots.
	Enable OptBool `json:"enable"`
	// Allow users of this account to send and receive files in chats and channels. When disabled, users
	// can still take and share screenshots.
	ShareOption OptString `json:"share_option"`
}

// GetEnable returns the value of Enable.
func (s *GetGroupSettingsOK0ChatShareFiles) GetEnable() OptBool {
	return s.Enable
}

// GetShareOption returns the value of ShareOption.
func (s *GetGroupSettingsOK0ChatShareFiles) GetShareOption() OptString {
	return s.ShareOption
}

// SetEnable sets the value of Enable.
func (s *GetGroupSettingsOK0ChatShareFiles) SetEnable(val OptBool) {
	s.Enable = val
}

// SetShareOption sets the value of ShareOption.
func (s *GetGroupSettingsOK0ChatShareFiles) SetShareOption(val OptString) {
	s.ShareOption = val
}

type GetGroupSettingsOK0EmailNotification struct {
	// Notify the alternative host who is set or removed.
	AlternativeHostReminder OptBool `json:"alternative_host_reminder"`
	// Notify host and participants when the meeting is cancelled.
	CancelMeetingReminder OptBool `json:"cancel_meeting_reminder"`
	// Whether to notify the host when a cloud recording is available.
	CloudRecordingAvailableReminder OptBool `json:"cloud_recording_available_reminder"`
	// Notify host when participants join the meeting before them.
	JbhReminder OptBool `json:"jbh_reminder"`
	// Whether to notify any alternative hosts when a cloud recording is available.
	RecordingAvailableReminderAlternativeHosts OptBool `json:"recording_available_reminder_alternative_hosts"`
	// Whether to notify the person who scheduled the meeting or webinar for the host when a cloud
	// recording is available.
	RecordingAvailableReminderSchedulers OptBool `json:"recording_available_reminder_schedulers"`
	// Notify the host there is a meeting is scheduled, rescheduled, or cancelled.
	ScheduleForReminder OptBool `json:"schedule_for_reminder"`
}

// GetAlternativeHostReminder returns the value of AlternativeHostReminder.
func (s *GetGroupSettingsOK0EmailNotification) GetAlternativeHostReminder() OptBool {
	return s.AlternativeHostReminder
}

// GetCancelMeetingReminder returns the value of CancelMeetingReminder.
func (s *GetGroupSettingsOK0EmailNotification) GetCancelMeetingReminder() OptBool {
	return s.CancelMeetingReminder
}

// GetCloudRecordingAvailableReminder returns the value of CloudRecordingAvailableReminder.
func (s *GetGroupSettingsOK0EmailNotification) GetCloudRecordingAvailableReminder() OptBool {
	return s.CloudRecordingAvailableReminder
}

// GetJbhReminder returns the value of JbhReminder.
func (s *GetGroupSettingsOK0EmailNotification) GetJbhReminder() OptBool {
	return s.JbhReminder
}

// GetRecordingAvailableReminderAlternativeHosts returns the value of RecordingAvailableReminderAlternativeHosts.
func (s *GetGroupSettingsOK0EmailNotification) GetRecordingAvailableReminderAlternativeHosts() OptBool {
	return s.RecordingAvailableReminderAlternativeHosts
}

// GetRecordingAvailableReminderSchedulers returns the value of RecordingAvailableReminderSchedulers.
func (s *GetGroupSettingsOK0EmailNotification) GetRecordingAvailableReminderSchedulers() OptBool {
	return s.RecordingAvailableReminderSchedulers
}

// GetScheduleForReminder returns the value of ScheduleForReminder.
func (s *GetGroupSettingsOK0EmailNotification) GetScheduleForReminder() OptBool {
	return s.ScheduleForReminder
}

// SetAlternativeHostReminder sets the value of AlternativeHostReminder.
func (s *GetGroupSettingsOK0EmailNotification) SetAlternativeHostReminder(val OptBool) {
	s.AlternativeHostReminder = val
}

// SetCancelMeetingReminder sets the value of CancelMeetingReminder.
func (s *GetGroupSettingsOK0EmailNotification) SetCancelMeetingReminder(val OptBool) {
	s.CancelMeetingReminder = val
}

// SetCloudRecordingAvailableReminder sets the value of CloudRecordingAvailableReminder.
func (s *GetGroupSettingsOK0EmailNotification) SetCloudRecordingAvailableReminder(val OptBool) {
	s.CloudRecordingAvailableReminder = val
}

// SetJbhReminder sets the value of JbhReminder.
func (s *GetGroupSettingsOK0EmailNotification) SetJbhReminder(val OptBool) {
	s.JbhReminder = val
}

// SetRecordingAvailableReminderAlternativeHosts sets the value of RecordingAvailableReminderAlternativeHosts.
func (s *GetGroupSettingsOK0EmailNotification) SetRecordingAvailableReminderAlternativeHosts(val OptBool) {
	s.RecordingAvailableReminderAlternativeHosts = val
}

// SetRecordingAvailableReminderSchedulers sets the value of RecordingAvailableReminderSchedulers.
func (s *GetGroupSettingsOK0EmailNotification) SetRecordingAvailableReminderSchedulers(val OptBool) {
	s.RecordingAvailableReminderSchedulers = val
}

// SetScheduleForReminder sets the value of ScheduleForReminder.
func (s *GetGroupSettingsOK0EmailNotification) SetScheduleForReminder(val OptBool) {
	s.ScheduleForReminder = val
}

type GetGroupSettingsOK0InMeeting struct {
	// Allow participants who belong to your account to see that a guest (someone who does not belong to
	// your account) is participating in the meeting or webinar.
	AlertGuestJoin OptBool `json:"alert_guest_join"`
	// If the value of this field is set to `true`, allow users to delete messages in the in-meeting chat.
	AllowUsersToDeleteMessagesInMeetingChat OptBool `json:"allow_users_to_delete_messages_in_meeting_chat"`
	// Whether livestreaming is enabled.
	AllowLiveStreaming OptBool `json:"allow_live_streaming"`
	// Whether to allow participants to only chat with certain groups.
	// * `1` - The participant cannot use chat.
	// * `2` - Host and co-hosts only.
	// * `3` - The participant can chat with other participants publicly.
	// * `4` - The participant can chat with other participants publicly and privately.
	// **Note:** This setting is only available with client versions 5.7.3 and above.
	AllowParticipantsChatWith OptInt `json:"allow_participants_chat_with"`
	// Show Zoom windows during screen share.
	AllowShowZoomWindows OptBool `json:"allow_show_zoom_windows"`
	// Whether to allow participants to save meeting chats.
	// * `1` - Participants cannot save meeting chats.
	// * `2` - Participants can only save host and co-host meeting chats.
	// * `3` - Participants can save all meeting chats.
	AllowUsersSaveChats OptInt `json:"allow_users_save_chats"`
	// Allow participants to use annotation tools to add information to shared screens.
	Annotation OptBool `json:"annotation"`
	// Allow the host to put an attendee on hold.
	// **This field has been deprecated and is no longer supported.**.
	AttendeeOnHold OptBool `json:"attendee_on_hold"`
	// Enable users to see and add contacts to 'auto-answer group' in the contact list on chat. Any call
	// from members of this group will be automatically answered.
	AutoAnswer OptBool `json:"auto_answer"`
	// Automatically save all in-meeting chats.
	AutoSavingChat OptBool `json:"auto_saving_chat"`
	// Allow the host to split meeting participants into separate, smaller rooms.
	BreakoutRoom OptBool `json:"breakout_room"`
	// Whether the host can assign participants to breakout rooms when scheduling. This feature is
	// **only** available in version 4.5.0 or higher.
	BreakoutRoomSchedule OptBool `json:"breakout_room_schedule"`
	// Allow meeting participants to send chat message visible to all participants.
	Chat OptBool `json:"chat"`
	// Allow participants to ask questions for the host and participants to answer.
	MeetingQuestionAnswer OptBool `json:"meeting_question_answer"`
	// Allow the host to type closed captions or assign a participant/third party device to add closed
	// captions.
	ClosedCaption OptBool `json:"closed_caption"`
	// Information about the group's closed captioning settings.
	ClosedCaptioning OptGetGroupSettingsOK0InMeetingClosedCaptioning `json:"closed_captioning"`
	// Allow the host to add co-hosts. Co-hosts have the same in-meeting controls as the host.
	CoHost OptBool `json:"co_host"`
	// If set to `true`, you can [select data center regions](https://support.zoom.
	// us/hc/en-us/articles/360042411451-Selecting-data-center-regions-for-hosted-meetings-and-webinars)
	// to be used by this group for hosting their real-time meeting and webinar traffic. These regions
	// can be provided in the `data_center_regions` field. If set to `false`, the regions cannot be
	// customized and the default regions will be used.
	CustomDataCenterRegions OptBool `json:"custom_data_center_regions"`
	// Whether custom livestreaming is enabled.
	CustomLiveStreamingService OptBool `json:"custom_live_streaming_service"`
	// The specific instructions to allow your account's meeting hosts to configure a custom livestream.
	CustomServiceInstructions OptString `json:"custom_service_instructions"`
	// If the value of `custom_data_center_regions` is `true`, a comma-separated list of these [data
	// center regions](https://support.zoom.
	// us/hc/en-us/articles/360059254691-Datacenter-abbreviation-list) to opt in to.
	// * `AU` - Australia.
	// * `LA` - Latin America.
	// * `CA` - Canada.
	// * `CN` - China.
	// * `DE` - Germany.
	// * `HK` - Hong Kong SAR.
	// * `IN` - India.
	// * `IE` - Ireland.
	// * `TY` - Japan.
	// * `MX` - Mexico.
	// * `NL` - Netherlands.
	// * `SG` - Singapore.
	// * `US` - United States.
	DataCenterRegions []string `json:"data_center_regions"`
	// Whether the **Disable desktop screen sharing for meetings you host** setting is enabled.
	DisableScreenSharingForHostMeetings OptBool `json:"disable_screen_sharing_for_host_meetings"`
	// Whether the **Disable screen sharing when guests are in the meeting** setting is enabled.
	DisableScreenSharingForInMeetingGuests OptBool `json:"disable_screen_sharing_for_in_meeting_guests"`
	// Require that all meetings are encrypted using AES.
	E2eEncryption OptBool `json:"e2e_encryption"`
	// Play sound when participants join or leave.
	EntryExitChime OptString `json:"entry_exit_chime"`
	// Allow another user to take control of the camera during a meeting.
	FarEndCameraControl OptBool `json:"far_end_camera_control"`
	// Enable users to provide feedback to Zoom at the end of the meeting.
	Feedback OptBool `json:"feedback"`
	// Indicates whether [in-meeting file transfer](https://support.zoom.
	// us/hc/en-us/articles/209605493-In-meeting-file-transfer) setting has been enabled for the users in
	// the group or not.
	FileTransfer OptBool `json:"file_transfer"`
	// Enable higher quality video for host and participants in the meeting. This requires more bandwidth.
	GroupHd OptBool `json:"group_hd"`
	// Enable higher quality video for host and participants in the webianr. This requires more bandwidth.
	WebinarGroupHd OptBool `json:"webinar_group_hd"`
	// Whether to allow participants to join a meeting directly from their desktop browser. Note that the
	// meeting experience from the desktop browser is limited.
	JoinFromDesktop OptBool `json:"join_from_desktop"`
	// Whether to allow participants to join a meeting directly from their mobile browser. Note that the
	// meeting experience from the mobile browser is limited.
	JoinFromMobile OptBool `json:"join_from_mobile"`
	// Information about the [Translate captions](https://support.zoom.
	// us/hc/en-us/articles/8158738379917-Managing-automated-captions-) settings in meetings.
	AutoGeneratedTranslation OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslation `json:"auto_generated_translation"`
	// Information about the [language interpretation](https://support.zoom.
	// us/hc/en-us/articles/360034919791-Using-Language-Interpretation-in-your-meeting-or-webinar)
	// settings.
	LanguageInterpretation OptGetGroupSettingsOK0InMeetingLanguageInterpretation `json:"language_interpretation"`
	// Allow hosts to assign participants as sign language interpreters who can interpret one language
	// into sign language in real-time. Hosts can assign interpreters when scheduling, or during the
	// meeting itself. This feature is only available with version 5.11.3 or later.
	SignLanguageInterpretation OptGetGroupSettingsOK0InMeetingSignLanguageInterpretation `json:"sign_language_interpretation"`
	// Whether Facebook livestreaming is enabled.
	LiveStreamingFacebook OptBool `json:"live_streaming_facebook"`
	// Whether YouTube livestreaming is enabled.
	LiveStreamingYoutube OptBool `json:"live_streaming_youtube"`
	// Information about manual captioning settings.
	ManualCaptioning OptGetGroupSettingsOK0InMeetingManualCaptioning `json:"manual_captioning"`
	// Whether meeting participants can [communicate using the emoji reactions](https://support.zoom.
	// us/hc/en-us/articles/115001286183-Nonverbal-feedback-and-meeting-reactions) located in the
	// **Reactions** menu in the meeting toolbar.
	MeetingReactions OptBool `json:"meeting_reactions"`
	// Choose from the following meeting reaction options.
	// * `all` - All emojis: Allow meeting participants to use any emoji available in Zoom chat as a
	// reaction in a meeting.
	// * `selected` - Selected emojis: Allow meeting participants to use the 6 standard meeting reaction
	// emojis: Clapping Hands, Thumbs Up, Heart, Tears of Joy, Open Mouth, Party Popper (Tada,
	// Celebration).
	MeetingReactionsEmojis OptString `json:"meeting_reactions_emojis"`
	// Whether to allow hosts and panelists to use audible clap.
	AllowHostPanelistsToUseAudibleClap OptBool `json:"allow_host_panelists_to_use_audible_clap"`
	// Set this field to `true` to use [webinar reactions](https://support.zoom.
	// us/hc/en-us/articles/4803536268429).
	WebinarReactions OptBool `json:"webinar_reactions"`
	// Whether to allow the host to present a survey to participants once a meeting has ended. This
	// feature is only available in version 5.7.3 or higher.
	MeetingSurvey OptBool `json:"meeting_survey"`
	// Allow participants in a meeting to provide nonverbal feedback and express opinions by clicking on
	// icons in the participants panel.
	NonVerbalFeedback OptBool `json:"non_verbal_feedback"`
	// Show the list of H.323/SIP devices only to the host.
	OnlyHostViewDeviceList OptBool `json:"only_host_view_device_list"`
	// Allow users to select original sound during a meeting.
	OriginalAudio OptBool `json:"original_audio"`
	// Add 'Polls' to the meeting controls. This allows the host to survey the attendees.
	Polling OptBool `json:"polling"`
	// Display end-of-meeting experience feedback survey.
	PostMeetingFeedback OptBool `json:"post_meeting_feedback"`
	// Allow meeting participants to send a private 1:1 message to another participant.
	PrivateChat OptBool `json:"private_chat"`
	// When each participant joins by telephone, allow the option to record and play their own voice as
	// entry and exit chimes.
	RecordPlayOwnVoice OptBool `json:"record_play_own_voice"`
	// During screen sharing, allow the person who is sharing to let others control the shared content.
	RemoteControl OptBool `json:"remote_control"`
	// Allow meeting host to provide 1:1 remote support to another participant.
	RemoteSupport OptBool `json:"remote_support"`
	// Indicates whether the [**Request permission to unmute participants**](https://support.zoom.
	// us/hc/en-us/articles/203435537-Muting-and-unmuting-participants-in-a-meeting#h_01EGK4XFWS1SJGZ71MYGKF7260) option has been enabled for the group or not.
	RequestPermissionToUnmuteParticipants OptBool `json:"request_permission_to_unmute_participants"`
	// Allow host and participants to share their screen or content during meetings.
	ScreenSharing OptBool `json:"screen_sharing"`
	// Allow users to invite participants by email only by default.
	SendingDefaultEmailInvites OptBool `json:"sending_default_email_invites"`
	// Whether to allow participants to join a meeting directly from their browser and bypass the Zoom
	// application download process. This is useful for participants who cannot download, install, or run
	// applications. Note that the meeting experience from the browser is limited.
	ShowAJoinFromYourBrowserLink OptBool `json:"show_a_join_from_your_browser_link"`
	// Allow participants to join a meeting directly from their browser.
	ShowBrowserJoinLink OptBool `json:"show_browser_join_link"`
	// Show the list of H.323/SIP devices.
	ShowDeviceList OptBool `json:"show_device_list"`
	// Always show meeting controls during a meeting.
	ShowMeetingControlToolbar OptBool `json:"show_meeting_control_toolbar"`
	// Whether the person sharing during a presentation can allow others to control the slide
	// presentation. This feature is only available in version 5.8.3 or higher.
	SlideControl OptBool `json:"slide_control"`
	// Allow users to select stereo audio during a meeting.
	StereoAudio OptBool `json:"stereo_audio"`
	// If the value of `custom_data_center_regions` is `true`, a comma-separated list of these [data
	// center regions](https://support.zoom.
	// us/hc/en-us/articles/360059254691-Datacenter-abbreviation-list) to **not** opt in to.
	// * `EU` - Europe.
	// * `HK` - Hong Kong.
	// * `AU` - Australia.
	// * `IN` - India.
	// * `LA` - Latin America.
	// * `TY` - Tokyo.
	// * `CN` - China.
	// * `US` - United States.
	// * `CA` - Canada.
	UncheckedDataCenterRegions []string `json:"unchecked_data_center_regions"`
	// Allow HTML formatting instead of plain text for meeting invitations scheduled with the Outlook
	// plugin.
	UseHTMLFormatEmail OptBool `json:"use_html_format_email"`
	// Enable virtual backgrounds.
	VirtualBackground OptBool `json:"virtual_background"`
	// Settings to manage virtual background.
	VirtualBackgroundSettings OptGetGroupSettingsOK0InMeetingVirtualBackgroundSettings `json:"virtual_background_settings"`
	// Attendees can't join a meeting until a host admits them individually from the waiting room.
	WaitingRoom          OptBool                                             `json:"waiting_room"`
	WebinarChat          OptGetGroupSettingsOK0InMeetingWebinarChat          `json:"webinar_chat"`
	WebinarLiveStreaming OptGetGroupSettingsOK0InMeetingWebinarLiveStreaming `json:"webinar_live_streaming"`
	// Information about the account's meeting polling settings.
	MeetingPolling OptGetGroupSettingsOK0InMeetingMeetingPolling `json:"meeting_polling"`
	WebinarPolling OptGetGroupSettingsOK0InMeetingWebinarPolling `json:"webinar_polling"`
	// Whether attendees can ask the host and panelists questions in the webinar.
	WebinarQuestionAnswer OptBool `json:"webinar_question_answer"`
	// Whether to allow the host to present surveys to attendees once a webinar has ended.
	WebinarSurvey OptBool `json:"webinar_survey"`
	// Allow participants to share a whiteboard that includes annotation tools.
	Whiteboard OptBool `json:"whiteboard"`
	// Indicates who can share their screen or content during meetings. The value can be one of the
	// following:
	// `host`: Only host can share the screen.
	// `all`: Both hosts and attendees can share their screen during meetings. For Webinar, the hosts and
	// panelists can start screen sharing, but not the attendees.
	WhoCanShareScreen OptString `json:"who_can_share_screen"`
	// Indicates who is allowed to start sharing screen when someone else in the meeting is sharing their
	// screen. The value can be one of the following:
	// `host`: Only a host can share the screen when someone else is sharing.
	// `all`: Anyone in the meeting is allowed to start sharing their screen when someone else is sharing.
	//  For Webinar, the hosts and panelists can start screen sharing, but not the attendees.
	WhoCanShareScreenWhenSomeoneIsSharing OptString `json:"who_can_share_screen_when_someone_is_sharing"`
	// Indicates how many participants can share at the same time. The value can be one of the following:
	// `one`: Only one participant can share at a time
	// .
	// `multiple`: Multiple participants can share simultaneously (dual monitors recommended)
	// . For Webinar, the hosts and panelists can start screen sharing, but not the attendees.
	ParticipantsShareSimultaneously OptString `json:"participants_share_simultaneously"`
	// Whether Workplace by Facebook is enabled.
	WorkplaceByFacebook OptBool `json:"workplace_by_facebook"`
}

// GetAlertGuestJoin returns the value of AlertGuestJoin.
func (s *GetGroupSettingsOK0InMeeting) GetAlertGuestJoin() OptBool {
	return s.AlertGuestJoin
}

// GetAllowUsersToDeleteMessagesInMeetingChat returns the value of AllowUsersToDeleteMessagesInMeetingChat.
func (s *GetGroupSettingsOK0InMeeting) GetAllowUsersToDeleteMessagesInMeetingChat() OptBool {
	return s.AllowUsersToDeleteMessagesInMeetingChat
}

// GetAllowLiveStreaming returns the value of AllowLiveStreaming.
func (s *GetGroupSettingsOK0InMeeting) GetAllowLiveStreaming() OptBool {
	return s.AllowLiveStreaming
}

// GetAllowParticipantsChatWith returns the value of AllowParticipantsChatWith.
func (s *GetGroupSettingsOK0InMeeting) GetAllowParticipantsChatWith() OptInt {
	return s.AllowParticipantsChatWith
}

// GetAllowShowZoomWindows returns the value of AllowShowZoomWindows.
func (s *GetGroupSettingsOK0InMeeting) GetAllowShowZoomWindows() OptBool {
	return s.AllowShowZoomWindows
}

// GetAllowUsersSaveChats returns the value of AllowUsersSaveChats.
func (s *GetGroupSettingsOK0InMeeting) GetAllowUsersSaveChats() OptInt {
	return s.AllowUsersSaveChats
}

// GetAnnotation returns the value of Annotation.
func (s *GetGroupSettingsOK0InMeeting) GetAnnotation() OptBool {
	return s.Annotation
}

// GetAttendeeOnHold returns the value of AttendeeOnHold.
func (s *GetGroupSettingsOK0InMeeting) GetAttendeeOnHold() OptBool {
	return s.AttendeeOnHold
}

// GetAutoAnswer returns the value of AutoAnswer.
func (s *GetGroupSettingsOK0InMeeting) GetAutoAnswer() OptBool {
	return s.AutoAnswer
}

// GetAutoSavingChat returns the value of AutoSavingChat.
func (s *GetGroupSettingsOK0InMeeting) GetAutoSavingChat() OptBool {
	return s.AutoSavingChat
}

// GetBreakoutRoom returns the value of BreakoutRoom.
func (s *GetGroupSettingsOK0InMeeting) GetBreakoutRoom() OptBool {
	return s.BreakoutRoom
}

// GetBreakoutRoomSchedule returns the value of BreakoutRoomSchedule.
func (s *GetGroupSettingsOK0InMeeting) GetBreakoutRoomSchedule() OptBool {
	return s.BreakoutRoomSchedule
}

// GetChat returns the value of Chat.
func (s *GetGroupSettingsOK0InMeeting) GetChat() OptBool {
	return s.Chat
}

// GetMeetingQuestionAnswer returns the value of MeetingQuestionAnswer.
func (s *GetGroupSettingsOK0InMeeting) GetMeetingQuestionAnswer() OptBool {
	return s.MeetingQuestionAnswer
}

// GetClosedCaption returns the value of ClosedCaption.
func (s *GetGroupSettingsOK0InMeeting) GetClosedCaption() OptBool {
	return s.ClosedCaption
}

// GetClosedCaptioning returns the value of ClosedCaptioning.
func (s *GetGroupSettingsOK0InMeeting) GetClosedCaptioning() OptGetGroupSettingsOK0InMeetingClosedCaptioning {
	return s.ClosedCaptioning
}

// GetCoHost returns the value of CoHost.
func (s *GetGroupSettingsOK0InMeeting) GetCoHost() OptBool {
	return s.CoHost
}

// GetCustomDataCenterRegions returns the value of CustomDataCenterRegions.
func (s *GetGroupSettingsOK0InMeeting) GetCustomDataCenterRegions() OptBool {
	return s.CustomDataCenterRegions
}

// GetCustomLiveStreamingService returns the value of CustomLiveStreamingService.
func (s *GetGroupSettingsOK0InMeeting) GetCustomLiveStreamingService() OptBool {
	return s.CustomLiveStreamingService
}

// GetCustomServiceInstructions returns the value of CustomServiceInstructions.
func (s *GetGroupSettingsOK0InMeeting) GetCustomServiceInstructions() OptString {
	return s.CustomServiceInstructions
}

// GetDataCenterRegions returns the value of DataCenterRegions.
func (s *GetGroupSettingsOK0InMeeting) GetDataCenterRegions() []string {
	return s.DataCenterRegions
}

// GetDisableScreenSharingForHostMeetings returns the value of DisableScreenSharingForHostMeetings.
func (s *GetGroupSettingsOK0InMeeting) GetDisableScreenSharingForHostMeetings() OptBool {
	return s.DisableScreenSharingForHostMeetings
}

// GetDisableScreenSharingForInMeetingGuests returns the value of DisableScreenSharingForInMeetingGuests.
func (s *GetGroupSettingsOK0InMeeting) GetDisableScreenSharingForInMeetingGuests() OptBool {
	return s.DisableScreenSharingForInMeetingGuests
}

// GetE2eEncryption returns the value of E2eEncryption.
func (s *GetGroupSettingsOK0InMeeting) GetE2eEncryption() OptBool {
	return s.E2eEncryption
}

// GetEntryExitChime returns the value of EntryExitChime.
func (s *GetGroupSettingsOK0InMeeting) GetEntryExitChime() OptString {
	return s.EntryExitChime
}

// GetFarEndCameraControl returns the value of FarEndCameraControl.
func (s *GetGroupSettingsOK0InMeeting) GetFarEndCameraControl() OptBool {
	return s.FarEndCameraControl
}

// GetFeedback returns the value of Feedback.
func (s *GetGroupSettingsOK0InMeeting) GetFeedback() OptBool {
	return s.Feedback
}

// GetFileTransfer returns the value of FileTransfer.
func (s *GetGroupSettingsOK0InMeeting) GetFileTransfer() OptBool {
	return s.FileTransfer
}

// GetGroupHd returns the value of GroupHd.
func (s *GetGroupSettingsOK0InMeeting) GetGroupHd() OptBool {
	return s.GroupHd
}

// GetWebinarGroupHd returns the value of WebinarGroupHd.
func (s *GetGroupSettingsOK0InMeeting) GetWebinarGroupHd() OptBool {
	return s.WebinarGroupHd
}

// GetJoinFromDesktop returns the value of JoinFromDesktop.
func (s *GetGroupSettingsOK0InMeeting) GetJoinFromDesktop() OptBool {
	return s.JoinFromDesktop
}

// GetJoinFromMobile returns the value of JoinFromMobile.
func (s *GetGroupSettingsOK0InMeeting) GetJoinFromMobile() OptBool {
	return s.JoinFromMobile
}

// GetAutoGeneratedTranslation returns the value of AutoGeneratedTranslation.
func (s *GetGroupSettingsOK0InMeeting) GetAutoGeneratedTranslation() OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslation {
	return s.AutoGeneratedTranslation
}

// GetLanguageInterpretation returns the value of LanguageInterpretation.
func (s *GetGroupSettingsOK0InMeeting) GetLanguageInterpretation() OptGetGroupSettingsOK0InMeetingLanguageInterpretation {
	return s.LanguageInterpretation
}

// GetSignLanguageInterpretation returns the value of SignLanguageInterpretation.
func (s *GetGroupSettingsOK0InMeeting) GetSignLanguageInterpretation() OptGetGroupSettingsOK0InMeetingSignLanguageInterpretation {
	return s.SignLanguageInterpretation
}

// GetLiveStreamingFacebook returns the value of LiveStreamingFacebook.
func (s *GetGroupSettingsOK0InMeeting) GetLiveStreamingFacebook() OptBool {
	return s.LiveStreamingFacebook
}

// GetLiveStreamingYoutube returns the value of LiveStreamingYoutube.
func (s *GetGroupSettingsOK0InMeeting) GetLiveStreamingYoutube() OptBool {
	return s.LiveStreamingYoutube
}

// GetManualCaptioning returns the value of ManualCaptioning.
func (s *GetGroupSettingsOK0InMeeting) GetManualCaptioning() OptGetGroupSettingsOK0InMeetingManualCaptioning {
	return s.ManualCaptioning
}

// GetMeetingReactions returns the value of MeetingReactions.
func (s *GetGroupSettingsOK0InMeeting) GetMeetingReactions() OptBool {
	return s.MeetingReactions
}

// GetMeetingReactionsEmojis returns the value of MeetingReactionsEmojis.
func (s *GetGroupSettingsOK0InMeeting) GetMeetingReactionsEmojis() OptString {
	return s.MeetingReactionsEmojis
}

// GetAllowHostPanelistsToUseAudibleClap returns the value of AllowHostPanelistsToUseAudibleClap.
func (s *GetGroupSettingsOK0InMeeting) GetAllowHostPanelistsToUseAudibleClap() OptBool {
	return s.AllowHostPanelistsToUseAudibleClap
}

// GetWebinarReactions returns the value of WebinarReactions.
func (s *GetGroupSettingsOK0InMeeting) GetWebinarReactions() OptBool {
	return s.WebinarReactions
}

// GetMeetingSurvey returns the value of MeetingSurvey.
func (s *GetGroupSettingsOK0InMeeting) GetMeetingSurvey() OptBool {
	return s.MeetingSurvey
}

// GetNonVerbalFeedback returns the value of NonVerbalFeedback.
func (s *GetGroupSettingsOK0InMeeting) GetNonVerbalFeedback() OptBool {
	return s.NonVerbalFeedback
}

// GetOnlyHostViewDeviceList returns the value of OnlyHostViewDeviceList.
func (s *GetGroupSettingsOK0InMeeting) GetOnlyHostViewDeviceList() OptBool {
	return s.OnlyHostViewDeviceList
}

// GetOriginalAudio returns the value of OriginalAudio.
func (s *GetGroupSettingsOK0InMeeting) GetOriginalAudio() OptBool {
	return s.OriginalAudio
}

// GetPolling returns the value of Polling.
func (s *GetGroupSettingsOK0InMeeting) GetPolling() OptBool {
	return s.Polling
}

// GetPostMeetingFeedback returns the value of PostMeetingFeedback.
func (s *GetGroupSettingsOK0InMeeting) GetPostMeetingFeedback() OptBool {
	return s.PostMeetingFeedback
}

// GetPrivateChat returns the value of PrivateChat.
func (s *GetGroupSettingsOK0InMeeting) GetPrivateChat() OptBool {
	return s.PrivateChat
}

// GetRecordPlayOwnVoice returns the value of RecordPlayOwnVoice.
func (s *GetGroupSettingsOK0InMeeting) GetRecordPlayOwnVoice() OptBool {
	return s.RecordPlayOwnVoice
}

// GetRemoteControl returns the value of RemoteControl.
func (s *GetGroupSettingsOK0InMeeting) GetRemoteControl() OptBool {
	return s.RemoteControl
}

// GetRemoteSupport returns the value of RemoteSupport.
func (s *GetGroupSettingsOK0InMeeting) GetRemoteSupport() OptBool {
	return s.RemoteSupport
}

// GetRequestPermissionToUnmuteParticipants returns the value of RequestPermissionToUnmuteParticipants.
func (s *GetGroupSettingsOK0InMeeting) GetRequestPermissionToUnmuteParticipants() OptBool {
	return s.RequestPermissionToUnmuteParticipants
}

// GetScreenSharing returns the value of ScreenSharing.
func (s *GetGroupSettingsOK0InMeeting) GetScreenSharing() OptBool {
	return s.ScreenSharing
}

// GetSendingDefaultEmailInvites returns the value of SendingDefaultEmailInvites.
func (s *GetGroupSettingsOK0InMeeting) GetSendingDefaultEmailInvites() OptBool {
	return s.SendingDefaultEmailInvites
}

// GetShowAJoinFromYourBrowserLink returns the value of ShowAJoinFromYourBrowserLink.
func (s *GetGroupSettingsOK0InMeeting) GetShowAJoinFromYourBrowserLink() OptBool {
	return s.ShowAJoinFromYourBrowserLink
}

// GetShowBrowserJoinLink returns the value of ShowBrowserJoinLink.
func (s *GetGroupSettingsOK0InMeeting) GetShowBrowserJoinLink() OptBool {
	return s.ShowBrowserJoinLink
}

// GetShowDeviceList returns the value of ShowDeviceList.
func (s *GetGroupSettingsOK0InMeeting) GetShowDeviceList() OptBool {
	return s.ShowDeviceList
}

// GetShowMeetingControlToolbar returns the value of ShowMeetingControlToolbar.
func (s *GetGroupSettingsOK0InMeeting) GetShowMeetingControlToolbar() OptBool {
	return s.ShowMeetingControlToolbar
}

// GetSlideControl returns the value of SlideControl.
func (s *GetGroupSettingsOK0InMeeting) GetSlideControl() OptBool {
	return s.SlideControl
}

// GetStereoAudio returns the value of StereoAudio.
func (s *GetGroupSettingsOK0InMeeting) GetStereoAudio() OptBool {
	return s.StereoAudio
}

// GetUncheckedDataCenterRegions returns the value of UncheckedDataCenterRegions.
func (s *GetGroupSettingsOK0InMeeting) GetUncheckedDataCenterRegions() []string {
	return s.UncheckedDataCenterRegions
}

// GetUseHTMLFormatEmail returns the value of UseHTMLFormatEmail.
func (s *GetGroupSettingsOK0InMeeting) GetUseHTMLFormatEmail() OptBool {
	return s.UseHTMLFormatEmail
}

// GetVirtualBackground returns the value of VirtualBackground.
func (s *GetGroupSettingsOK0InMeeting) GetVirtualBackground() OptBool {
	return s.VirtualBackground
}

// GetVirtualBackgroundSettings returns the value of VirtualBackgroundSettings.
func (s *GetGroupSettingsOK0InMeeting) GetVirtualBackgroundSettings() OptGetGroupSettingsOK0InMeetingVirtualBackgroundSettings {
	return s.VirtualBackgroundSettings
}

// GetWaitingRoom returns the value of WaitingRoom.
func (s *GetGroupSettingsOK0InMeeting) GetWaitingRoom() OptBool {
	return s.WaitingRoom
}

// GetWebinarChat returns the value of WebinarChat.
func (s *GetGroupSettingsOK0InMeeting) GetWebinarChat() OptGetGroupSettingsOK0InMeetingWebinarChat {
	return s.WebinarChat
}

// GetWebinarLiveStreaming returns the value of WebinarLiveStreaming.
func (s *GetGroupSettingsOK0InMeeting) GetWebinarLiveStreaming() OptGetGroupSettingsOK0InMeetingWebinarLiveStreaming {
	return s.WebinarLiveStreaming
}

// GetMeetingPolling returns the value of MeetingPolling.
func (s *GetGroupSettingsOK0InMeeting) GetMeetingPolling() OptGetGroupSettingsOK0InMeetingMeetingPolling {
	return s.MeetingPolling
}

// GetWebinarPolling returns the value of WebinarPolling.
func (s *GetGroupSettingsOK0InMeeting) GetWebinarPolling() OptGetGroupSettingsOK0InMeetingWebinarPolling {
	return s.WebinarPolling
}

// GetWebinarQuestionAnswer returns the value of WebinarQuestionAnswer.
func (s *GetGroupSettingsOK0InMeeting) GetWebinarQuestionAnswer() OptBool {
	return s.WebinarQuestionAnswer
}

// GetWebinarSurvey returns the value of WebinarSurvey.
func (s *GetGroupSettingsOK0InMeeting) GetWebinarSurvey() OptBool {
	return s.WebinarSurvey
}

// GetWhiteboard returns the value of Whiteboard.
func (s *GetGroupSettingsOK0InMeeting) GetWhiteboard() OptBool {
	return s.Whiteboard
}

// GetWhoCanShareScreen returns the value of WhoCanShareScreen.
func (s *GetGroupSettingsOK0InMeeting) GetWhoCanShareScreen() OptString {
	return s.WhoCanShareScreen
}

// GetWhoCanShareScreenWhenSomeoneIsSharing returns the value of WhoCanShareScreenWhenSomeoneIsSharing.
func (s *GetGroupSettingsOK0InMeeting) GetWhoCanShareScreenWhenSomeoneIsSharing() OptString {
	return s.WhoCanShareScreenWhenSomeoneIsSharing
}

// GetParticipantsShareSimultaneously returns the value of ParticipantsShareSimultaneously.
func (s *GetGroupSettingsOK0InMeeting) GetParticipantsShareSimultaneously() OptString {
	return s.ParticipantsShareSimultaneously
}

// GetWorkplaceByFacebook returns the value of WorkplaceByFacebook.
func (s *GetGroupSettingsOK0InMeeting) GetWorkplaceByFacebook() OptBool {
	return s.WorkplaceByFacebook
}

// SetAlertGuestJoin sets the value of AlertGuestJoin.
func (s *GetGroupSettingsOK0InMeeting) SetAlertGuestJoin(val OptBool) {
	s.AlertGuestJoin = val
}

// SetAllowUsersToDeleteMessagesInMeetingChat sets the value of AllowUsersToDeleteMessagesInMeetingChat.
func (s *GetGroupSettingsOK0InMeeting) SetAllowUsersToDeleteMessagesInMeetingChat(val OptBool) {
	s.AllowUsersToDeleteMessagesInMeetingChat = val
}

// SetAllowLiveStreaming sets the value of AllowLiveStreaming.
func (s *GetGroupSettingsOK0InMeeting) SetAllowLiveStreaming(val OptBool) {
	s.AllowLiveStreaming = val
}

// SetAllowParticipantsChatWith sets the value of AllowParticipantsChatWith.
func (s *GetGroupSettingsOK0InMeeting) SetAllowParticipantsChatWith(val OptInt) {
	s.AllowParticipantsChatWith = val
}

// SetAllowShowZoomWindows sets the value of AllowShowZoomWindows.
func (s *GetGroupSettingsOK0InMeeting) SetAllowShowZoomWindows(val OptBool) {
	s.AllowShowZoomWindows = val
}

// SetAllowUsersSaveChats sets the value of AllowUsersSaveChats.
func (s *GetGroupSettingsOK0InMeeting) SetAllowUsersSaveChats(val OptInt) {
	s.AllowUsersSaveChats = val
}

// SetAnnotation sets the value of Annotation.
func (s *GetGroupSettingsOK0InMeeting) SetAnnotation(val OptBool) {
	s.Annotation = val
}

// SetAttendeeOnHold sets the value of AttendeeOnHold.
func (s *GetGroupSettingsOK0InMeeting) SetAttendeeOnHold(val OptBool) {
	s.AttendeeOnHold = val
}

// SetAutoAnswer sets the value of AutoAnswer.
func (s *GetGroupSettingsOK0InMeeting) SetAutoAnswer(val OptBool) {
	s.AutoAnswer = val
}

// SetAutoSavingChat sets the value of AutoSavingChat.
func (s *GetGroupSettingsOK0InMeeting) SetAutoSavingChat(val OptBool) {
	s.AutoSavingChat = val
}

// SetBreakoutRoom sets the value of BreakoutRoom.
func (s *GetGroupSettingsOK0InMeeting) SetBreakoutRoom(val OptBool) {
	s.BreakoutRoom = val
}

// SetBreakoutRoomSchedule sets the value of BreakoutRoomSchedule.
func (s *GetGroupSettingsOK0InMeeting) SetBreakoutRoomSchedule(val OptBool) {
	s.BreakoutRoomSchedule = val
}

// SetChat sets the value of Chat.
func (s *GetGroupSettingsOK0InMeeting) SetChat(val OptBool) {
	s.Chat = val
}

// SetMeetingQuestionAnswer sets the value of MeetingQuestionAnswer.
func (s *GetGroupSettingsOK0InMeeting) SetMeetingQuestionAnswer(val OptBool) {
	s.MeetingQuestionAnswer = val
}

// SetClosedCaption sets the value of ClosedCaption.
func (s *GetGroupSettingsOK0InMeeting) SetClosedCaption(val OptBool) {
	s.ClosedCaption = val
}

// SetClosedCaptioning sets the value of ClosedCaptioning.
func (s *GetGroupSettingsOK0InMeeting) SetClosedCaptioning(val OptGetGroupSettingsOK0InMeetingClosedCaptioning) {
	s.ClosedCaptioning = val
}

// SetCoHost sets the value of CoHost.
func (s *GetGroupSettingsOK0InMeeting) SetCoHost(val OptBool) {
	s.CoHost = val
}

// SetCustomDataCenterRegions sets the value of CustomDataCenterRegions.
func (s *GetGroupSettingsOK0InMeeting) SetCustomDataCenterRegions(val OptBool) {
	s.CustomDataCenterRegions = val
}

// SetCustomLiveStreamingService sets the value of CustomLiveStreamingService.
func (s *GetGroupSettingsOK0InMeeting) SetCustomLiveStreamingService(val OptBool) {
	s.CustomLiveStreamingService = val
}

// SetCustomServiceInstructions sets the value of CustomServiceInstructions.
func (s *GetGroupSettingsOK0InMeeting) SetCustomServiceInstructions(val OptString) {
	s.CustomServiceInstructions = val
}

// SetDataCenterRegions sets the value of DataCenterRegions.
func (s *GetGroupSettingsOK0InMeeting) SetDataCenterRegions(val []string) {
	s.DataCenterRegions = val
}

// SetDisableScreenSharingForHostMeetings sets the value of DisableScreenSharingForHostMeetings.
func (s *GetGroupSettingsOK0InMeeting) SetDisableScreenSharingForHostMeetings(val OptBool) {
	s.DisableScreenSharingForHostMeetings = val
}

// SetDisableScreenSharingForInMeetingGuests sets the value of DisableScreenSharingForInMeetingGuests.
func (s *GetGroupSettingsOK0InMeeting) SetDisableScreenSharingForInMeetingGuests(val OptBool) {
	s.DisableScreenSharingForInMeetingGuests = val
}

// SetE2eEncryption sets the value of E2eEncryption.
func (s *GetGroupSettingsOK0InMeeting) SetE2eEncryption(val OptBool) {
	s.E2eEncryption = val
}

// SetEntryExitChime sets the value of EntryExitChime.
func (s *GetGroupSettingsOK0InMeeting) SetEntryExitChime(val OptString) {
	s.EntryExitChime = val
}

// SetFarEndCameraControl sets the value of FarEndCameraControl.
func (s *GetGroupSettingsOK0InMeeting) SetFarEndCameraControl(val OptBool) {
	s.FarEndCameraControl = val
}

// SetFeedback sets the value of Feedback.
func (s *GetGroupSettingsOK0InMeeting) SetFeedback(val OptBool) {
	s.Feedback = val
}

// SetFileTransfer sets the value of FileTransfer.
func (s *GetGroupSettingsOK0InMeeting) SetFileTransfer(val OptBool) {
	s.FileTransfer = val
}

// SetGroupHd sets the value of GroupHd.
func (s *GetGroupSettingsOK0InMeeting) SetGroupHd(val OptBool) {
	s.GroupHd = val
}

// SetWebinarGroupHd sets the value of WebinarGroupHd.
func (s *GetGroupSettingsOK0InMeeting) SetWebinarGroupHd(val OptBool) {
	s.WebinarGroupHd = val
}

// SetJoinFromDesktop sets the value of JoinFromDesktop.
func (s *GetGroupSettingsOK0InMeeting) SetJoinFromDesktop(val OptBool) {
	s.JoinFromDesktop = val
}

// SetJoinFromMobile sets the value of JoinFromMobile.
func (s *GetGroupSettingsOK0InMeeting) SetJoinFromMobile(val OptBool) {
	s.JoinFromMobile = val
}

// SetAutoGeneratedTranslation sets the value of AutoGeneratedTranslation.
func (s *GetGroupSettingsOK0InMeeting) SetAutoGeneratedTranslation(val OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslation) {
	s.AutoGeneratedTranslation = val
}

// SetLanguageInterpretation sets the value of LanguageInterpretation.
func (s *GetGroupSettingsOK0InMeeting) SetLanguageInterpretation(val OptGetGroupSettingsOK0InMeetingLanguageInterpretation) {
	s.LanguageInterpretation = val
}

// SetSignLanguageInterpretation sets the value of SignLanguageInterpretation.
func (s *GetGroupSettingsOK0InMeeting) SetSignLanguageInterpretation(val OptGetGroupSettingsOK0InMeetingSignLanguageInterpretation) {
	s.SignLanguageInterpretation = val
}

// SetLiveStreamingFacebook sets the value of LiveStreamingFacebook.
func (s *GetGroupSettingsOK0InMeeting) SetLiveStreamingFacebook(val OptBool) {
	s.LiveStreamingFacebook = val
}

// SetLiveStreamingYoutube sets the value of LiveStreamingYoutube.
func (s *GetGroupSettingsOK0InMeeting) SetLiveStreamingYoutube(val OptBool) {
	s.LiveStreamingYoutube = val
}

// SetManualCaptioning sets the value of ManualCaptioning.
func (s *GetGroupSettingsOK0InMeeting) SetManualCaptioning(val OptGetGroupSettingsOK0InMeetingManualCaptioning) {
	s.ManualCaptioning = val
}

// SetMeetingReactions sets the value of MeetingReactions.
func (s *GetGroupSettingsOK0InMeeting) SetMeetingReactions(val OptBool) {
	s.MeetingReactions = val
}

// SetMeetingReactionsEmojis sets the value of MeetingReactionsEmojis.
func (s *GetGroupSettingsOK0InMeeting) SetMeetingReactionsEmojis(val OptString) {
	s.MeetingReactionsEmojis = val
}

// SetAllowHostPanelistsToUseAudibleClap sets the value of AllowHostPanelistsToUseAudibleClap.
func (s *GetGroupSettingsOK0InMeeting) SetAllowHostPanelistsToUseAudibleClap(val OptBool) {
	s.AllowHostPanelistsToUseAudibleClap = val
}

// SetWebinarReactions sets the value of WebinarReactions.
func (s *GetGroupSettingsOK0InMeeting) SetWebinarReactions(val OptBool) {
	s.WebinarReactions = val
}

// SetMeetingSurvey sets the value of MeetingSurvey.
func (s *GetGroupSettingsOK0InMeeting) SetMeetingSurvey(val OptBool) {
	s.MeetingSurvey = val
}

// SetNonVerbalFeedback sets the value of NonVerbalFeedback.
func (s *GetGroupSettingsOK0InMeeting) SetNonVerbalFeedback(val OptBool) {
	s.NonVerbalFeedback = val
}

// SetOnlyHostViewDeviceList sets the value of OnlyHostViewDeviceList.
func (s *GetGroupSettingsOK0InMeeting) SetOnlyHostViewDeviceList(val OptBool) {
	s.OnlyHostViewDeviceList = val
}

// SetOriginalAudio sets the value of OriginalAudio.
func (s *GetGroupSettingsOK0InMeeting) SetOriginalAudio(val OptBool) {
	s.OriginalAudio = val
}

// SetPolling sets the value of Polling.
func (s *GetGroupSettingsOK0InMeeting) SetPolling(val OptBool) {
	s.Polling = val
}

// SetPostMeetingFeedback sets the value of PostMeetingFeedback.
func (s *GetGroupSettingsOK0InMeeting) SetPostMeetingFeedback(val OptBool) {
	s.PostMeetingFeedback = val
}

// SetPrivateChat sets the value of PrivateChat.
func (s *GetGroupSettingsOK0InMeeting) SetPrivateChat(val OptBool) {
	s.PrivateChat = val
}

// SetRecordPlayOwnVoice sets the value of RecordPlayOwnVoice.
func (s *GetGroupSettingsOK0InMeeting) SetRecordPlayOwnVoice(val OptBool) {
	s.RecordPlayOwnVoice = val
}

// SetRemoteControl sets the value of RemoteControl.
func (s *GetGroupSettingsOK0InMeeting) SetRemoteControl(val OptBool) {
	s.RemoteControl = val
}

// SetRemoteSupport sets the value of RemoteSupport.
func (s *GetGroupSettingsOK0InMeeting) SetRemoteSupport(val OptBool) {
	s.RemoteSupport = val
}

// SetRequestPermissionToUnmuteParticipants sets the value of RequestPermissionToUnmuteParticipants.
func (s *GetGroupSettingsOK0InMeeting) SetRequestPermissionToUnmuteParticipants(val OptBool) {
	s.RequestPermissionToUnmuteParticipants = val
}

// SetScreenSharing sets the value of ScreenSharing.
func (s *GetGroupSettingsOK0InMeeting) SetScreenSharing(val OptBool) {
	s.ScreenSharing = val
}

// SetSendingDefaultEmailInvites sets the value of SendingDefaultEmailInvites.
func (s *GetGroupSettingsOK0InMeeting) SetSendingDefaultEmailInvites(val OptBool) {
	s.SendingDefaultEmailInvites = val
}

// SetShowAJoinFromYourBrowserLink sets the value of ShowAJoinFromYourBrowserLink.
func (s *GetGroupSettingsOK0InMeeting) SetShowAJoinFromYourBrowserLink(val OptBool) {
	s.ShowAJoinFromYourBrowserLink = val
}

// SetShowBrowserJoinLink sets the value of ShowBrowserJoinLink.
func (s *GetGroupSettingsOK0InMeeting) SetShowBrowserJoinLink(val OptBool) {
	s.ShowBrowserJoinLink = val
}

// SetShowDeviceList sets the value of ShowDeviceList.
func (s *GetGroupSettingsOK0InMeeting) SetShowDeviceList(val OptBool) {
	s.ShowDeviceList = val
}

// SetShowMeetingControlToolbar sets the value of ShowMeetingControlToolbar.
func (s *GetGroupSettingsOK0InMeeting) SetShowMeetingControlToolbar(val OptBool) {
	s.ShowMeetingControlToolbar = val
}

// SetSlideControl sets the value of SlideControl.
func (s *GetGroupSettingsOK0InMeeting) SetSlideControl(val OptBool) {
	s.SlideControl = val
}

// SetStereoAudio sets the value of StereoAudio.
func (s *GetGroupSettingsOK0InMeeting) SetStereoAudio(val OptBool) {
	s.StereoAudio = val
}

// SetUncheckedDataCenterRegions sets the value of UncheckedDataCenterRegions.
func (s *GetGroupSettingsOK0InMeeting) SetUncheckedDataCenterRegions(val []string) {
	s.UncheckedDataCenterRegions = val
}

// SetUseHTMLFormatEmail sets the value of UseHTMLFormatEmail.
func (s *GetGroupSettingsOK0InMeeting) SetUseHTMLFormatEmail(val OptBool) {
	s.UseHTMLFormatEmail = val
}

// SetVirtualBackground sets the value of VirtualBackground.
func (s *GetGroupSettingsOK0InMeeting) SetVirtualBackground(val OptBool) {
	s.VirtualBackground = val
}

// SetVirtualBackgroundSettings sets the value of VirtualBackgroundSettings.
func (s *GetGroupSettingsOK0InMeeting) SetVirtualBackgroundSettings(val OptGetGroupSettingsOK0InMeetingVirtualBackgroundSettings) {
	s.VirtualBackgroundSettings = val
}

// SetWaitingRoom sets the value of WaitingRoom.
func (s *GetGroupSettingsOK0InMeeting) SetWaitingRoom(val OptBool) {
	s.WaitingRoom = val
}

// SetWebinarChat sets the value of WebinarChat.
func (s *GetGroupSettingsOK0InMeeting) SetWebinarChat(val OptGetGroupSettingsOK0InMeetingWebinarChat) {
	s.WebinarChat = val
}

// SetWebinarLiveStreaming sets the value of WebinarLiveStreaming.
func (s *GetGroupSettingsOK0InMeeting) SetWebinarLiveStreaming(val OptGetGroupSettingsOK0InMeetingWebinarLiveStreaming) {
	s.WebinarLiveStreaming = val
}

// SetMeetingPolling sets the value of MeetingPolling.
func (s *GetGroupSettingsOK0InMeeting) SetMeetingPolling(val OptGetGroupSettingsOK0InMeetingMeetingPolling) {
	s.MeetingPolling = val
}

// SetWebinarPolling sets the value of WebinarPolling.
func (s *GetGroupSettingsOK0InMeeting) SetWebinarPolling(val OptGetGroupSettingsOK0InMeetingWebinarPolling) {
	s.WebinarPolling = val
}

// SetWebinarQuestionAnswer sets the value of WebinarQuestionAnswer.
func (s *GetGroupSettingsOK0InMeeting) SetWebinarQuestionAnswer(val OptBool) {
	s.WebinarQuestionAnswer = val
}

// SetWebinarSurvey sets the value of WebinarSurvey.
func (s *GetGroupSettingsOK0InMeeting) SetWebinarSurvey(val OptBool) {
	s.WebinarSurvey = val
}

// SetWhiteboard sets the value of Whiteboard.
func (s *GetGroupSettingsOK0InMeeting) SetWhiteboard(val OptBool) {
	s.Whiteboard = val
}

// SetWhoCanShareScreen sets the value of WhoCanShareScreen.
func (s *GetGroupSettingsOK0InMeeting) SetWhoCanShareScreen(val OptString) {
	s.WhoCanShareScreen = val
}

// SetWhoCanShareScreenWhenSomeoneIsSharing sets the value of WhoCanShareScreenWhenSomeoneIsSharing.
func (s *GetGroupSettingsOK0InMeeting) SetWhoCanShareScreenWhenSomeoneIsSharing(val OptString) {
	s.WhoCanShareScreenWhenSomeoneIsSharing = val
}

// SetParticipantsShareSimultaneously sets the value of ParticipantsShareSimultaneously.
func (s *GetGroupSettingsOK0InMeeting) SetParticipantsShareSimultaneously(val OptString) {
	s.ParticipantsShareSimultaneously = val
}

// SetWorkplaceByFacebook sets the value of WorkplaceByFacebook.
func (s *GetGroupSettingsOK0InMeeting) SetWorkplaceByFacebook(val OptBool) {
	s.WorkplaceByFacebook = val
}

// Information about the [Translate captions](https://support.zoom.
// us/hc/en-us/articles/8158738379917-Managing-automated-captions-) settings in meetings.
type GetGroupSettingsOK0InMeetingAutoGeneratedTranslation struct {
	// Information about all spoken languages and translation languages in meetings.
	LanguageItemPairList OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairList `json:"language_item_pairList"`
	// Whether to allow users to enable automated translated captions in these language pairs in meetings.
	Enable OptBool `json:"enable"`
}

// GetLanguageItemPairList returns the value of LanguageItemPairList.
func (s *GetGroupSettingsOK0InMeetingAutoGeneratedTranslation) GetLanguageItemPairList() OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairList {
	return s.LanguageItemPairList
}

// GetEnable returns the value of Enable.
func (s *GetGroupSettingsOK0InMeetingAutoGeneratedTranslation) GetEnable() OptBool {
	return s.Enable
}

// SetLanguageItemPairList sets the value of LanguageItemPairList.
func (s *GetGroupSettingsOK0InMeetingAutoGeneratedTranslation) SetLanguageItemPairList(val OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairList) {
	s.LanguageItemPairList = val
}

// SetEnable sets the value of Enable.
func (s *GetGroupSettingsOK0InMeetingAutoGeneratedTranslation) SetEnable(val OptBool) {
	s.Enable = val
}

// Information about all spoken languages and translation languages in meetings.
type GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairList struct {
	// A list of spoken languages and translation languages.
	TransLangConfig []GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItem `json:"trans_lang_config"`
	// Whether to select all spoken languages and translation languages.
	All OptBool `json:"all"`
}

// GetTransLangConfig returns the value of TransLangConfig.
func (s *GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairList) GetTransLangConfig() []GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItem {
	return s.TransLangConfig
}

// GetAll returns the value of All.
func (s *GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairList) GetAll() OptBool {
	return s.All
}

// SetTransLangConfig sets the value of TransLangConfig.
func (s *GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairList) SetTransLangConfig(val []GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItem) {
	s.TransLangConfig = val
}

// SetAll sets the value of All.
func (s *GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairList) SetAll(val OptBool) {
	s.All = val
}

// A item of spoken language and translation languages in meetings.
type GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItem struct {
	// The language used in meetings.
	SpeakLanguage OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage `json:"speak_language"`
	// Information about all the translation languages.
	TranslateTo OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo `json:"translate_to"`
}

// GetSpeakLanguage returns the value of SpeakLanguage.
func (s *GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItem) GetSpeakLanguage() OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage {
	return s.SpeakLanguage
}

// GetTranslateTo returns the value of TranslateTo.
func (s *GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItem) GetTranslateTo() OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo {
	return s.TranslateTo
}

// SetSpeakLanguage sets the value of SpeakLanguage.
func (s *GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItem) SetSpeakLanguage(val OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage) {
	s.SpeakLanguage = val
}

// SetTranslateTo sets the value of TranslateTo.
func (s *GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItem) SetTranslateTo(val OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo) {
	s.TranslateTo = val
}

// The language used in meetings.
type GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage struct {
	// The language's name.
	Name OptString `json:"name"`
	// The code for the language.
	Code OptString `json:"code"`
}

// GetName returns the value of Name.
func (s *GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage) GetName() OptString {
	return s.Name
}

// GetCode returns the value of Code.
func (s *GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage) GetCode() OptString {
	return s.Code
}

// SetName sets the value of Name.
func (s *GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage) SetName(val OptString) {
	s.Name = val
}

// SetCode sets the value of Code.
func (s *GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage) SetCode(val OptString) {
	s.Code = val
}

// Information about all the translation languages.
type GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo struct {
	// Whether to select all the translation languages.
	All OptBool `json:"all"`
	// A list of the translation languages.
	LanguageConfig []GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateToLanguageConfigItem `json:"language_config"`
}

// GetAll returns the value of All.
func (s *GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo) GetAll() OptBool {
	return s.All
}

// GetLanguageConfig returns the value of LanguageConfig.
func (s *GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo) GetLanguageConfig() []GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateToLanguageConfigItem {
	return s.LanguageConfig
}

// SetAll sets the value of All.
func (s *GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo) SetAll(val OptBool) {
	s.All = val
}

// SetLanguageConfig sets the value of LanguageConfig.
func (s *GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo) SetLanguageConfig(val []GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateToLanguageConfigItem) {
	s.LanguageConfig = val
}

// A item of translation languages.
type GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateToLanguageConfigItem struct {
	// The translation language's name.
	Name OptString `json:"name"`
	// The translation language's code.
	Code OptString `json:"code"`
}

// GetName returns the value of Name.
func (s *GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateToLanguageConfigItem) GetName() OptString {
	return s.Name
}

// GetCode returns the value of Code.
func (s *GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateToLanguageConfigItem) GetCode() OptString {
	return s.Code
}

// SetName sets the value of Name.
func (s *GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateToLanguageConfigItem) SetName(val OptString) {
	s.Name = val
}

// SetCode sets the value of Code.
func (s *GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateToLanguageConfigItem) SetCode(val OptString) {
	s.Code = val
}

// Information about the group's closed captioning settings.
type GetGroupSettingsOK0InMeetingClosedCaptioning struct {
	// Whether to allow a live transcription service to transcribe meetings.
	AutoTranscribing OptBool `json:"auto_transcribing"`
	// Whether to allow the host to type closed captions or assign a participant or 3rd-party service to
	// provide closed captioning.
	Enable OptBool `json:"enable"`
	// Whether to allow participants to save closed captions or transcripts.
	SaveCaption OptBool `json:"save_caption"`
	// Whether to allow the use of an API token to integrate with 3rd-party closed captioning services.
	ThirdPartyCaptioningService OptBool `json:"third_party_captioning_service"`
	// Whether to allow the viewing of full transcripts in the in-meeting side panel.
	ViewFullTranscript OptBool `json:"view_full_transcript"`
}

// GetAutoTranscribing returns the value of AutoTranscribing.
func (s *GetGroupSettingsOK0InMeetingClosedCaptioning) GetAutoTranscribing() OptBool {
	return s.AutoTranscribing
}

// GetEnable returns the value of Enable.
func (s *GetGroupSettingsOK0InMeetingClosedCaptioning) GetEnable() OptBool {
	return s.Enable
}

// GetSaveCaption returns the value of SaveCaption.
func (s *GetGroupSettingsOK0InMeetingClosedCaptioning) GetSaveCaption() OptBool {
	return s.SaveCaption
}

// GetThirdPartyCaptioningService returns the value of ThirdPartyCaptioningService.
func (s *GetGroupSettingsOK0InMeetingClosedCaptioning) GetThirdPartyCaptioningService() OptBool {
	return s.ThirdPartyCaptioningService
}

// GetViewFullTranscript returns the value of ViewFullTranscript.
func (s *GetGroupSettingsOK0InMeetingClosedCaptioning) GetViewFullTranscript() OptBool {
	return s.ViewFullTranscript
}

// SetAutoTranscribing sets the value of AutoTranscribing.
func (s *GetGroupSettingsOK0InMeetingClosedCaptioning) SetAutoTranscribing(val OptBool) {
	s.AutoTranscribing = val
}

// SetEnable sets the value of Enable.
func (s *GetGroupSettingsOK0InMeetingClosedCaptioning) SetEnable(val OptBool) {
	s.Enable = val
}

// SetSaveCaption sets the value of SaveCaption.
func (s *GetGroupSettingsOK0InMeetingClosedCaptioning) SetSaveCaption(val OptBool) {
	s.SaveCaption = val
}

// SetThirdPartyCaptioningService sets the value of ThirdPartyCaptioningService.
func (s *GetGroupSettingsOK0InMeetingClosedCaptioning) SetThirdPartyCaptioningService(val OptBool) {
	s.ThirdPartyCaptioningService = val
}

// SetViewFullTranscript sets the value of ViewFullTranscript.
func (s *GetGroupSettingsOK0InMeetingClosedCaptioning) SetViewFullTranscript(val OptBool) {
	s.ViewFullTranscript = val
}

// Information about the [language interpretation](https://support.zoom.
// us/hc/en-us/articles/360034919791-Using-Language-Interpretation-in-your-meeting-or-webinar)
// settings.
type GetGroupSettingsOK0InMeetingLanguageInterpretation struct {
	// A list of user-defined supported languages.
	CustomLanguages []string `json:"custom_languages"`
	// Whether to enable language interpretation by default.
	EnableLanguageInterpretationByDefault OptBool `json:"enable_language_interpretation_by_default"`
	// Whether to allow participants to speak in listening channel.
	AllowParticipantsToSpeakInListeningChannel OptBool `json:"allow_participants_to_speak_in_listening_channel"`
	// Whether to allow up to 25 custom languages when scheduling meetings.
	AllowUpTo25CustomLanguagesWhenSchedulingMeetings OptBool `json:"allow_up_to_25_custom_languages_when_scheduling_meetings"`
	// Whether to allow hosts to assign participants as interpreters who can interpret one language into
	// another in real-time.
	Enable OptBool `json:"enable"`
	// A list of system-supported languages.
	Languages []string `json:"languages"`
}

// GetCustomLanguages returns the value of CustomLanguages.
func (s *GetGroupSettingsOK0InMeetingLanguageInterpretation) GetCustomLanguages() []string {
	return s.CustomLanguages
}

// GetEnableLanguageInterpretationByDefault returns the value of EnableLanguageInterpretationByDefault.
func (s *GetGroupSettingsOK0InMeetingLanguageInterpretation) GetEnableLanguageInterpretationByDefault() OptBool {
	return s.EnableLanguageInterpretationByDefault
}

// GetAllowParticipantsToSpeakInListeningChannel returns the value of AllowParticipantsToSpeakInListeningChannel.
func (s *GetGroupSettingsOK0InMeetingLanguageInterpretation) GetAllowParticipantsToSpeakInListeningChannel() OptBool {
	return s.AllowParticipantsToSpeakInListeningChannel
}

// GetAllowUpTo25CustomLanguagesWhenSchedulingMeetings returns the value of AllowUpTo25CustomLanguagesWhenSchedulingMeetings.
func (s *GetGroupSettingsOK0InMeetingLanguageInterpretation) GetAllowUpTo25CustomLanguagesWhenSchedulingMeetings() OptBool {
	return s.AllowUpTo25CustomLanguagesWhenSchedulingMeetings
}

// GetEnable returns the value of Enable.
func (s *GetGroupSettingsOK0InMeetingLanguageInterpretation) GetEnable() OptBool {
	return s.Enable
}

// GetLanguages returns the value of Languages.
func (s *GetGroupSettingsOK0InMeetingLanguageInterpretation) GetLanguages() []string {
	return s.Languages
}

// SetCustomLanguages sets the value of CustomLanguages.
func (s *GetGroupSettingsOK0InMeetingLanguageInterpretation) SetCustomLanguages(val []string) {
	s.CustomLanguages = val
}

// SetEnableLanguageInterpretationByDefault sets the value of EnableLanguageInterpretationByDefault.
func (s *GetGroupSettingsOK0InMeetingLanguageInterpretation) SetEnableLanguageInterpretationByDefault(val OptBool) {
	s.EnableLanguageInterpretationByDefault = val
}

// SetAllowParticipantsToSpeakInListeningChannel sets the value of AllowParticipantsToSpeakInListeningChannel.
func (s *GetGroupSettingsOK0InMeetingLanguageInterpretation) SetAllowParticipantsToSpeakInListeningChannel(val OptBool) {
	s.AllowParticipantsToSpeakInListeningChannel = val
}

// SetAllowUpTo25CustomLanguagesWhenSchedulingMeetings sets the value of AllowUpTo25CustomLanguagesWhenSchedulingMeetings.
func (s *GetGroupSettingsOK0InMeetingLanguageInterpretation) SetAllowUpTo25CustomLanguagesWhenSchedulingMeetings(val OptBool) {
	s.AllowUpTo25CustomLanguagesWhenSchedulingMeetings = val
}

// SetEnable sets the value of Enable.
func (s *GetGroupSettingsOK0InMeetingLanguageInterpretation) SetEnable(val OptBool) {
	s.Enable = val
}

// SetLanguages sets the value of Languages.
func (s *GetGroupSettingsOK0InMeetingLanguageInterpretation) SetLanguages(val []string) {
	s.Languages = val
}

// Information about manual captioning settings.
type GetGroupSettingsOK0InMeetingManualCaptioning struct {
	// Whether to allow the host to manually caption or let the host assign a participant to provide
	// manual captioning.
	AllowToType OptBool `json:"allow_to_type"`
	// Whether to enable Zoom's [live transcription feature](https://support.zoom.
	// us/hc/en-us/articles/207279736-Managing-closed-captioning-and-live-transcription#h_01FHGGHYJ4457H4GSZY0KM3NSB).
	AutoGeneratedCaptions OptBool `json:"auto_generated_captions"`
	// Whether to enable the viewing of full transcripts in the in-meeting side panel.
	FullTranscript OptBool `json:"full_transcript"`
	// Whether to [enable manual closed captioning](https://support.zoom.
	// us/hc/en-us/articles/207279736-Managing-closed-captioning-and-live-transcription).
	ManualCaptions OptBool `json:"manual_captions"`
	// Whether to allow participants to [save closed captions or transcripts](https://support.zoom.
	// us/hc/en-us/articles/360060958752).
	// **Note:** If the `full_transcript` field is set to `false`, participants **cannot** save captions.
	SaveCaptions OptBool `json:"save_captions"`
	// Whether to allow the use of an API token to integrate with a [3rd-party device](https://support.
	// zoom.us/hc/en-us/articles/115002212983) to provide closed captioning.
	ThirdPartyCaptioningService OptBool `json:"third_party_captioning_service"`
}

// GetAllowToType returns the value of AllowToType.
func (s *GetGroupSettingsOK0InMeetingManualCaptioning) GetAllowToType() OptBool {
	return s.AllowToType
}

// GetAutoGeneratedCaptions returns the value of AutoGeneratedCaptions.
func (s *GetGroupSettingsOK0InMeetingManualCaptioning) GetAutoGeneratedCaptions() OptBool {
	return s.AutoGeneratedCaptions
}

// GetFullTranscript returns the value of FullTranscript.
func (s *GetGroupSettingsOK0InMeetingManualCaptioning) GetFullTranscript() OptBool {
	return s.FullTranscript
}

// GetManualCaptions returns the value of ManualCaptions.
func (s *GetGroupSettingsOK0InMeetingManualCaptioning) GetManualCaptions() OptBool {
	return s.ManualCaptions
}

// GetSaveCaptions returns the value of SaveCaptions.
func (s *GetGroupSettingsOK0InMeetingManualCaptioning) GetSaveCaptions() OptBool {
	return s.SaveCaptions
}

// GetThirdPartyCaptioningService returns the value of ThirdPartyCaptioningService.
func (s *GetGroupSettingsOK0InMeetingManualCaptioning) GetThirdPartyCaptioningService() OptBool {
	return s.ThirdPartyCaptioningService
}

// SetAllowToType sets the value of AllowToType.
func (s *GetGroupSettingsOK0InMeetingManualCaptioning) SetAllowToType(val OptBool) {
	s.AllowToType = val
}

// SetAutoGeneratedCaptions sets the value of AutoGeneratedCaptions.
func (s *GetGroupSettingsOK0InMeetingManualCaptioning) SetAutoGeneratedCaptions(val OptBool) {
	s.AutoGeneratedCaptions = val
}

// SetFullTranscript sets the value of FullTranscript.
func (s *GetGroupSettingsOK0InMeetingManualCaptioning) SetFullTranscript(val OptBool) {
	s.FullTranscript = val
}

// SetManualCaptions sets the value of ManualCaptions.
func (s *GetGroupSettingsOK0InMeetingManualCaptioning) SetManualCaptions(val OptBool) {
	s.ManualCaptions = val
}

// SetSaveCaptions sets the value of SaveCaptions.
func (s *GetGroupSettingsOK0InMeetingManualCaptioning) SetSaveCaptions(val OptBool) {
	s.SaveCaptions = val
}

// SetThirdPartyCaptioningService sets the value of ThirdPartyCaptioningService.
func (s *GetGroupSettingsOK0InMeetingManualCaptioning) SetThirdPartyCaptioningService(val OptBool) {
	s.ThirdPartyCaptioningService = val
}

// Information about the account's meeting polling settings.
type GetGroupSettingsOK0InMeetingMeetingPolling struct {
	// Whether to allow the host to add polls before or during a meeting.
	Enable OptBool `json:"enable"`
	// Whether to allow the host to create advanced polls and quizzes. Advanced polls and quizzes include
	// single choice, multiple choice, drop down, matching, short answer, long answer, rank order, and
	// fill-in-the-blank questions. Hosts can also set the correct answers for quizzes they create.
	AdvancedPolls OptBool `json:"advanced_polls"`
	// Whether to allow users to manage saved polls and quizzes from Meetings.
	ManageSavedPollsAndQuizzes OptBool `json:"manage_saved_polls_and_quizzes"`
	// Whether to require answers to be anonymous.
	RequireAnswersToBeAnonymous OptBool `json:"require_answers_to_be_anonymous"`
	// Whether to allow alternative hosts to add or edit polls and quizzes.
	AllowAlternativeHostToAddEdit OptBool `json:"allow_alternative_host_to_add_edit"`
	// Whether to allow the host to upload an image for each question.
	AllowHostToUploadImage OptBool `json:"allow_host_to_upload_image"`
}

// GetEnable returns the value of Enable.
func (s *GetGroupSettingsOK0InMeetingMeetingPolling) GetEnable() OptBool {
	return s.Enable
}

// GetAdvancedPolls returns the value of AdvancedPolls.
func (s *GetGroupSettingsOK0InMeetingMeetingPolling) GetAdvancedPolls() OptBool {
	return s.AdvancedPolls
}

// GetManageSavedPollsAndQuizzes returns the value of ManageSavedPollsAndQuizzes.
func (s *GetGroupSettingsOK0InMeetingMeetingPolling) GetManageSavedPollsAndQuizzes() OptBool {
	return s.ManageSavedPollsAndQuizzes
}

// GetRequireAnswersToBeAnonymous returns the value of RequireAnswersToBeAnonymous.
func (s *GetGroupSettingsOK0InMeetingMeetingPolling) GetRequireAnswersToBeAnonymous() OptBool {
	return s.RequireAnswersToBeAnonymous
}

// GetAllowAlternativeHostToAddEdit returns the value of AllowAlternativeHostToAddEdit.
func (s *GetGroupSettingsOK0InMeetingMeetingPolling) GetAllowAlternativeHostToAddEdit() OptBool {
	return s.AllowAlternativeHostToAddEdit
}

// GetAllowHostToUploadImage returns the value of AllowHostToUploadImage.
func (s *GetGroupSettingsOK0InMeetingMeetingPolling) GetAllowHostToUploadImage() OptBool {
	return s.AllowHostToUploadImage
}

// SetEnable sets the value of Enable.
func (s *GetGroupSettingsOK0InMeetingMeetingPolling) SetEnable(val OptBool) {
	s.Enable = val
}

// SetAdvancedPolls sets the value of AdvancedPolls.
func (s *GetGroupSettingsOK0InMeetingMeetingPolling) SetAdvancedPolls(val OptBool) {
	s.AdvancedPolls = val
}

// SetManageSavedPollsAndQuizzes sets the value of ManageSavedPollsAndQuizzes.
func (s *GetGroupSettingsOK0InMeetingMeetingPolling) SetManageSavedPollsAndQuizzes(val OptBool) {
	s.ManageSavedPollsAndQuizzes = val
}

// SetRequireAnswersToBeAnonymous sets the value of RequireAnswersToBeAnonymous.
func (s *GetGroupSettingsOK0InMeetingMeetingPolling) SetRequireAnswersToBeAnonymous(val OptBool) {
	s.RequireAnswersToBeAnonymous = val
}

// SetAllowAlternativeHostToAddEdit sets the value of AllowAlternativeHostToAddEdit.
func (s *GetGroupSettingsOK0InMeetingMeetingPolling) SetAllowAlternativeHostToAddEdit(val OptBool) {
	s.AllowAlternativeHostToAddEdit = val
}

// SetAllowHostToUploadImage sets the value of AllowHostToUploadImage.
func (s *GetGroupSettingsOK0InMeetingMeetingPolling) SetAllowHostToUploadImage(val OptBool) {
	s.AllowHostToUploadImage = val
}

// Allow hosts to assign participants as sign language interpreters who can interpret one language
// into sign language in real-time. Hosts can assign interpreters when scheduling, or during the
// meeting itself. This feature is only available with version 5.11.3 or later.
type GetGroupSettingsOK0InMeetingSignLanguageInterpretation struct {
	// Whether to allow hosts to assign participants as sign language interpreters who can interpret one
	// language into another in real-time.
	Enable OptBool `json:"enable"`
	// Whether to enable sign language interpretation view by default in scheduler.
	EnableSignLanguageInterpretationByDefault OptBool `json:"enable_sign_language_interpretation_by_default"`
	// A list of system-supported languages.
	Languages []string `json:"languages"`
	// A list of user-defined supported languages.
	CustomLanguages []string `json:"custom_languages"`
}

// GetEnable returns the value of Enable.
func (s *GetGroupSettingsOK0InMeetingSignLanguageInterpretation) GetEnable() OptBool {
	return s.Enable
}

// GetEnableSignLanguageInterpretationByDefault returns the value of EnableSignLanguageInterpretationByDefault.
func (s *GetGroupSettingsOK0InMeetingSignLanguageInterpretation) GetEnableSignLanguageInterpretationByDefault() OptBool {
	return s.EnableSignLanguageInterpretationByDefault
}

// GetLanguages returns the value of Languages.
func (s *GetGroupSettingsOK0InMeetingSignLanguageInterpretation) GetLanguages() []string {
	return s.Languages
}

// GetCustomLanguages returns the value of CustomLanguages.
func (s *GetGroupSettingsOK0InMeetingSignLanguageInterpretation) GetCustomLanguages() []string {
	return s.CustomLanguages
}

// SetEnable sets the value of Enable.
func (s *GetGroupSettingsOK0InMeetingSignLanguageInterpretation) SetEnable(val OptBool) {
	s.Enable = val
}

// SetEnableSignLanguageInterpretationByDefault sets the value of EnableSignLanguageInterpretationByDefault.
func (s *GetGroupSettingsOK0InMeetingSignLanguageInterpretation) SetEnableSignLanguageInterpretationByDefault(val OptBool) {
	s.EnableSignLanguageInterpretationByDefault = val
}

// SetLanguages sets the value of Languages.
func (s *GetGroupSettingsOK0InMeetingSignLanguageInterpretation) SetLanguages(val []string) {
	s.Languages = val
}

// SetCustomLanguages sets the value of CustomLanguages.
func (s *GetGroupSettingsOK0InMeetingSignLanguageInterpretation) SetCustomLanguages(val []string) {
	s.CustomLanguages = val
}

// Settings to manage virtual background.
type GetGroupSettingsOK0InMeetingVirtualBackgroundSettings struct {
	// Allow users to upload custom backgrounds.
	AllowUploadCustom OptBool `json:"allow_upload_custom"`
	// Allow use of videos for virtual backgrounds.
	AllowVideos OptBool `json:"allow_videos"`
	// Enable virtual backgrounds.
	Enable OptBool                                                          `json:"enable"`
	Files  []GetGroupSettingsOK0InMeetingVirtualBackgroundSettingsFilesItem `json:"files"`
}

// GetAllowUploadCustom returns the value of AllowUploadCustom.
func (s *GetGroupSettingsOK0InMeetingVirtualBackgroundSettings) GetAllowUploadCustom() OptBool {
	return s.AllowUploadCustom
}

// GetAllowVideos returns the value of AllowVideos.
func (s *GetGroupSettingsOK0InMeetingVirtualBackgroundSettings) GetAllowVideos() OptBool {
	return s.AllowVideos
}

// GetEnable returns the value of Enable.
func (s *GetGroupSettingsOK0InMeetingVirtualBackgroundSettings) GetEnable() OptBool {
	return s.Enable
}

// GetFiles returns the value of Files.
func (s *GetGroupSettingsOK0InMeetingVirtualBackgroundSettings) GetFiles() []GetGroupSettingsOK0InMeetingVirtualBackgroundSettingsFilesItem {
	return s.Files
}

// SetAllowUploadCustom sets the value of AllowUploadCustom.
func (s *GetGroupSettingsOK0InMeetingVirtualBackgroundSettings) SetAllowUploadCustom(val OptBool) {
	s.AllowUploadCustom = val
}

// SetAllowVideos sets the value of AllowVideos.
func (s *GetGroupSettingsOK0InMeetingVirtualBackgroundSettings) SetAllowVideos(val OptBool) {
	s.AllowVideos = val
}

// SetEnable sets the value of Enable.
func (s *GetGroupSettingsOK0InMeetingVirtualBackgroundSettings) SetEnable(val OptBool) {
	s.Enable = val
}

// SetFiles sets the value of Files.
func (s *GetGroupSettingsOK0InMeetingVirtualBackgroundSettings) SetFiles(val []GetGroupSettingsOK0InMeetingVirtualBackgroundSettingsFilesItem) {
	s.Files = val
}

type GetGroupSettingsOK0InMeetingVirtualBackgroundSettingsFilesItem struct {
	// The file's unique identifier.
	ID OptString `json:"id"`
	// Indicates whether or not this file is the default virtual background file.
	IsDefault OptBool `json:"is_default"`
	// File name.
	Name OptString `json:"name"`
	// File size.
	Size OptInt `json:"size"`
	// File type.
	Type OptString `json:"type"`
}

// GetID returns the value of ID.
func (s *GetGroupSettingsOK0InMeetingVirtualBackgroundSettingsFilesItem) GetID() OptString {
	return s.ID
}

// GetIsDefault returns the value of IsDefault.
func (s *GetGroupSettingsOK0InMeetingVirtualBackgroundSettingsFilesItem) GetIsDefault() OptBool {
	return s.IsDefault
}

// GetName returns the value of Name.
func (s *GetGroupSettingsOK0InMeetingVirtualBackgroundSettingsFilesItem) GetName() OptString {
	return s.Name
}

// GetSize returns the value of Size.
func (s *GetGroupSettingsOK0InMeetingVirtualBackgroundSettingsFilesItem) GetSize() OptInt {
	return s.Size
}

// GetType returns the value of Type.
func (s *GetGroupSettingsOK0InMeetingVirtualBackgroundSettingsFilesItem) GetType() OptString {
	return s.Type
}

// SetID sets the value of ID.
func (s *GetGroupSettingsOK0InMeetingVirtualBackgroundSettingsFilesItem) SetID(val OptString) {
	s.ID = val
}

// SetIsDefault sets the value of IsDefault.
func (s *GetGroupSettingsOK0InMeetingVirtualBackgroundSettingsFilesItem) SetIsDefault(val OptBool) {
	s.IsDefault = val
}

// SetName sets the value of Name.
func (s *GetGroupSettingsOK0InMeetingVirtualBackgroundSettingsFilesItem) SetName(val OptString) {
	s.Name = val
}

// SetSize sets the value of Size.
func (s *GetGroupSettingsOK0InMeetingVirtualBackgroundSettingsFilesItem) SetSize(val OptInt) {
	s.Size = val
}

// SetType sets the value of Type.
func (s *GetGroupSettingsOK0InMeetingVirtualBackgroundSettingsFilesItem) SetType(val OptString) {
	s.Type = val
}

type GetGroupSettingsOK0InMeetingWebinarChat struct {
	// Allow webinar attendees to chat with other attendees.
	// * `1` - No one.
	// * `2` - Host and all panelists.
	// * `3` - Everyone.
	AllowAttendeesChatWith OptInt `json:"allow_attendees_chat_with"`
	// Whether to automatically save chat messages to a local file on the host's computer when the
	// webinar ends.
	AllowAutoSaveLocalChatFile OptBool `json:"allow_auto_save_local_chat_file"`
	// Allow webinar panelists to chat with other attendees.
	// * `1` - Host and all panelists.
	// * `2` - Everyone.
	AllowPanelistsChatWith OptInt `json:"allow_panelists_chat_with"`
	// Whether to allow webinar panelists to send direct messages to other panelists.
	AllowPanelistsSendDirectMessage OptBool `json:"allow_panelists_send_direct_message"`
	// Whether to allow webinar attendees to save chats.
	// * `0` - Attendees cannot save chats.
	// * `1` - Attendees can only save host and panelist chats.
	// * `2` - Attendees can save all chats.
	AllowUsersSaveChats OptInt `json:"allow_users_save_chats"`
	// By default, allow webinar attendees to chat with.
	// * `1` - Host and all panelists.
	// * `2` - Everyone.
	DefaultAttendeesChatWith OptInt `json:"default_attendees_chat_with"`
	// Whether to allow webinar participants to send chat messages.
	Enable OptBool `json:"enable"`
}

// GetAllowAttendeesChatWith returns the value of AllowAttendeesChatWith.
func (s *GetGroupSettingsOK0InMeetingWebinarChat) GetAllowAttendeesChatWith() OptInt {
	return s.AllowAttendeesChatWith
}

// GetAllowAutoSaveLocalChatFile returns the value of AllowAutoSaveLocalChatFile.
func (s *GetGroupSettingsOK0InMeetingWebinarChat) GetAllowAutoSaveLocalChatFile() OptBool {
	return s.AllowAutoSaveLocalChatFile
}

// GetAllowPanelistsChatWith returns the value of AllowPanelistsChatWith.
func (s *GetGroupSettingsOK0InMeetingWebinarChat) GetAllowPanelistsChatWith() OptInt {
	return s.AllowPanelistsChatWith
}

// GetAllowPanelistsSendDirectMessage returns the value of AllowPanelistsSendDirectMessage.
func (s *GetGroupSettingsOK0InMeetingWebinarChat) GetAllowPanelistsSendDirectMessage() OptBool {
	return s.AllowPanelistsSendDirectMessage
}

// GetAllowUsersSaveChats returns the value of AllowUsersSaveChats.
func (s *GetGroupSettingsOK0InMeetingWebinarChat) GetAllowUsersSaveChats() OptInt {
	return s.AllowUsersSaveChats
}

// GetDefaultAttendeesChatWith returns the value of DefaultAttendeesChatWith.
func (s *GetGroupSettingsOK0InMeetingWebinarChat) GetDefaultAttendeesChatWith() OptInt {
	return s.DefaultAttendeesChatWith
}

// GetEnable returns the value of Enable.
func (s *GetGroupSettingsOK0InMeetingWebinarChat) GetEnable() OptBool {
	return s.Enable
}

// SetAllowAttendeesChatWith sets the value of AllowAttendeesChatWith.
func (s *GetGroupSettingsOK0InMeetingWebinarChat) SetAllowAttendeesChatWith(val OptInt) {
	s.AllowAttendeesChatWith = val
}

// SetAllowAutoSaveLocalChatFile sets the value of AllowAutoSaveLocalChatFile.
func (s *GetGroupSettingsOK0InMeetingWebinarChat) SetAllowAutoSaveLocalChatFile(val OptBool) {
	s.AllowAutoSaveLocalChatFile = val
}

// SetAllowPanelistsChatWith sets the value of AllowPanelistsChatWith.
func (s *GetGroupSettingsOK0InMeetingWebinarChat) SetAllowPanelistsChatWith(val OptInt) {
	s.AllowPanelistsChatWith = val
}

// SetAllowPanelistsSendDirectMessage sets the value of AllowPanelistsSendDirectMessage.
func (s *GetGroupSettingsOK0InMeetingWebinarChat) SetAllowPanelistsSendDirectMessage(val OptBool) {
	s.AllowPanelistsSendDirectMessage = val
}

// SetAllowUsersSaveChats sets the value of AllowUsersSaveChats.
func (s *GetGroupSettingsOK0InMeetingWebinarChat) SetAllowUsersSaveChats(val OptInt) {
	s.AllowUsersSaveChats = val
}

// SetDefaultAttendeesChatWith sets the value of DefaultAttendeesChatWith.
func (s *GetGroupSettingsOK0InMeetingWebinarChat) SetDefaultAttendeesChatWith(val OptInt) {
	s.DefaultAttendeesChatWith = val
}

// SetEnable sets the value of Enable.
func (s *GetGroupSettingsOK0InMeetingWebinarChat) SetEnable(val OptBool) {
	s.Enable = val
}

type GetGroupSettingsOK0InMeetingWebinarLiveStreaming struct {
	// The specific instructions to allow your account's meeting hosts to configure a custom livestream.
	CustomServiceInstructions OptString `json:"custom_service_instructions"`
	// Whether webinar livestreaming is enabled.
	Enable OptBool `json:"enable"`
	// Whether to notify users to watch the livestream. This does not apply to custom real-time messaging
	// protocol (RTMP).
	LiveStreamingReminder OptBool `json:"live_streaming_reminder"`
	// The available livestreaming services.
	// * `facebook`
	// * `workplace_by_facebook`
	// * `youtube`
	// * `custom_live_streaming_service`.
	LiveStreamingService []string `json:"live_streaming_service"`
}

// GetCustomServiceInstructions returns the value of CustomServiceInstructions.
func (s *GetGroupSettingsOK0InMeetingWebinarLiveStreaming) GetCustomServiceInstructions() OptString {
	return s.CustomServiceInstructions
}

// GetEnable returns the value of Enable.
func (s *GetGroupSettingsOK0InMeetingWebinarLiveStreaming) GetEnable() OptBool {
	return s.Enable
}

// GetLiveStreamingReminder returns the value of LiveStreamingReminder.
func (s *GetGroupSettingsOK0InMeetingWebinarLiveStreaming) GetLiveStreamingReminder() OptBool {
	return s.LiveStreamingReminder
}

// GetLiveStreamingService returns the value of LiveStreamingService.
func (s *GetGroupSettingsOK0InMeetingWebinarLiveStreaming) GetLiveStreamingService() []string {
	return s.LiveStreamingService
}

// SetCustomServiceInstructions sets the value of CustomServiceInstructions.
func (s *GetGroupSettingsOK0InMeetingWebinarLiveStreaming) SetCustomServiceInstructions(val OptString) {
	s.CustomServiceInstructions = val
}

// SetEnable sets the value of Enable.
func (s *GetGroupSettingsOK0InMeetingWebinarLiveStreaming) SetEnable(val OptBool) {
	s.Enable = val
}

// SetLiveStreamingReminder sets the value of LiveStreamingReminder.
func (s *GetGroupSettingsOK0InMeetingWebinarLiveStreaming) SetLiveStreamingReminder(val OptBool) {
	s.LiveStreamingReminder = val
}

// SetLiveStreamingService sets the value of LiveStreamingService.
func (s *GetGroupSettingsOK0InMeetingWebinarLiveStreaming) SetLiveStreamingService(val []string) {
	s.LiveStreamingService = val
}

type GetGroupSettingsOK0InMeetingWebinarPolling struct {
	// Whether to allow the host to add polls before or during a webinar.
	Enable OptBool `json:"enable"`
	// Whether to allow the host to create advanced polls and quizzes. Advanced polls and quizzes include
	// single choice, multiple choice, drop down, matching, short answer, long answer, rank order, and
	// fill-in-the-blank questions. Hosts can also set the correct answers for quizzes they create.
	AdvancedPolls OptBool `json:"advanced_polls"`
	// Whether to allow users to manage saved polls and quizzes from Meetings.
	ManageSavedPollsAndQuizzes OptBool `json:"manage_saved_polls_and_quizzes"`
	// Whether to require answers to be anonymous.
	RequireAnswersToBeAnonymous OptBool `json:"require_answers_to_be_anonymous"`
	// Whether to allow the host to upload an image for each question.
	AllowHostToUploadImage OptBool `json:"allow_host_to_upload_image"`
	// Whether to allow alternative hosts to add or edit polls and quizzes.
	AllowAlternativeHostToAddEdit OptBool `json:"allow_alternative_host_to_add_edit"`
}

// GetEnable returns the value of Enable.
func (s *GetGroupSettingsOK0InMeetingWebinarPolling) GetEnable() OptBool {
	return s.Enable
}

// GetAdvancedPolls returns the value of AdvancedPolls.
func (s *GetGroupSettingsOK0InMeetingWebinarPolling) GetAdvancedPolls() OptBool {
	return s.AdvancedPolls
}

// GetManageSavedPollsAndQuizzes returns the value of ManageSavedPollsAndQuizzes.
func (s *GetGroupSettingsOK0InMeetingWebinarPolling) GetManageSavedPollsAndQuizzes() OptBool {
	return s.ManageSavedPollsAndQuizzes
}

// GetRequireAnswersToBeAnonymous returns the value of RequireAnswersToBeAnonymous.
func (s *GetGroupSettingsOK0InMeetingWebinarPolling) GetRequireAnswersToBeAnonymous() OptBool {
	return s.RequireAnswersToBeAnonymous
}

// GetAllowHostToUploadImage returns the value of AllowHostToUploadImage.
func (s *GetGroupSettingsOK0InMeetingWebinarPolling) GetAllowHostToUploadImage() OptBool {
	return s.AllowHostToUploadImage
}

// GetAllowAlternativeHostToAddEdit returns the value of AllowAlternativeHostToAddEdit.
func (s *GetGroupSettingsOK0InMeetingWebinarPolling) GetAllowAlternativeHostToAddEdit() OptBool {
	return s.AllowAlternativeHostToAddEdit
}

// SetEnable sets the value of Enable.
func (s *GetGroupSettingsOK0InMeetingWebinarPolling) SetEnable(val OptBool) {
	s.Enable = val
}

// SetAdvancedPolls sets the value of AdvancedPolls.
func (s *GetGroupSettingsOK0InMeetingWebinarPolling) SetAdvancedPolls(val OptBool) {
	s.AdvancedPolls = val
}

// SetManageSavedPollsAndQuizzes sets the value of ManageSavedPollsAndQuizzes.
func (s *GetGroupSettingsOK0InMeetingWebinarPolling) SetManageSavedPollsAndQuizzes(val OptBool) {
	s.ManageSavedPollsAndQuizzes = val
}

// SetRequireAnswersToBeAnonymous sets the value of RequireAnswersToBeAnonymous.
func (s *GetGroupSettingsOK0InMeetingWebinarPolling) SetRequireAnswersToBeAnonymous(val OptBool) {
	s.RequireAnswersToBeAnonymous = val
}

// SetAllowHostToUploadImage sets the value of AllowHostToUploadImage.
func (s *GetGroupSettingsOK0InMeetingWebinarPolling) SetAllowHostToUploadImage(val OptBool) {
	s.AllowHostToUploadImage = val
}

// SetAllowAlternativeHostToAddEdit sets the value of AllowAlternativeHostToAddEdit.
func (s *GetGroupSettingsOK0InMeetingWebinarPolling) SetAllowAlternativeHostToAddEdit(val OptBool) {
	s.AllowAlternativeHostToAddEdit = val
}

type GetGroupSettingsOK0OtherOptions struct {
	// Whether to display the Zoom help badge on the bottom-right of the page.
	AllowUsersContactSupportViaChat OptBool `json:"allow_users_contact_support_via_chat"`
	// Whether iOS blurs the screenshot in the task switcher when multiple apps are open. Android hides
	// the screenshot in the system-level list of recent apps.
	BlurSnapshot OptBool `json:"blur_snapshot"`
	// Webinar registration options.
	WebinarRegistrationOptions OptGetGroupSettingsOK0OtherOptionsWebinarRegistrationOptions `json:"webinar_registration_options"`
}

// GetAllowUsersContactSupportViaChat returns the value of AllowUsersContactSupportViaChat.
func (s *GetGroupSettingsOK0OtherOptions) GetAllowUsersContactSupportViaChat() OptBool {
	return s.AllowUsersContactSupportViaChat
}

// GetBlurSnapshot returns the value of BlurSnapshot.
func (s *GetGroupSettingsOK0OtherOptions) GetBlurSnapshot() OptBool {
	return s.BlurSnapshot
}

// GetWebinarRegistrationOptions returns the value of WebinarRegistrationOptions.
func (s *GetGroupSettingsOK0OtherOptions) GetWebinarRegistrationOptions() OptGetGroupSettingsOK0OtherOptionsWebinarRegistrationOptions {
	return s.WebinarRegistrationOptions
}

// SetAllowUsersContactSupportViaChat sets the value of AllowUsersContactSupportViaChat.
func (s *GetGroupSettingsOK0OtherOptions) SetAllowUsersContactSupportViaChat(val OptBool) {
	s.AllowUsersContactSupportViaChat = val
}

// SetBlurSnapshot sets the value of BlurSnapshot.
func (s *GetGroupSettingsOK0OtherOptions) SetBlurSnapshot(val OptBool) {
	s.BlurSnapshot = val
}

// SetWebinarRegistrationOptions sets the value of WebinarRegistrationOptions.
func (s *GetGroupSettingsOK0OtherOptions) SetWebinarRegistrationOptions(val OptGetGroupSettingsOK0OtherOptionsWebinarRegistrationOptions) {
	s.WebinarRegistrationOptions = val
}

// Webinar registration options.
type GetGroupSettingsOK0OtherOptionsWebinarRegistrationOptions struct {
	// Allow host to enable **Show join info on registration confirmation page**.
	AllowHostToEnableJoinInfo OptBool `json:"allow_host_to_enable_join_info"`
	// Allow host to enable **Show social share buttons on registration page**.
	AllowHostToEnableSocialShareButtons OptBool `json:"allow_host_to_enable_social_share_buttons"`
	// Enable custom questions.
	EnableCustomQuestions OptBool `json:"enable_custom_questions"`
}

// GetAllowHostToEnableJoinInfo returns the value of AllowHostToEnableJoinInfo.
func (s *GetGroupSettingsOK0OtherOptionsWebinarRegistrationOptions) GetAllowHostToEnableJoinInfo() OptBool {
	return s.AllowHostToEnableJoinInfo
}

// GetAllowHostToEnableSocialShareButtons returns the value of AllowHostToEnableSocialShareButtons.
func (s *GetGroupSettingsOK0OtherOptionsWebinarRegistrationOptions) GetAllowHostToEnableSocialShareButtons() OptBool {
	return s.AllowHostToEnableSocialShareButtons
}

// GetEnableCustomQuestions returns the value of EnableCustomQuestions.
func (s *GetGroupSettingsOK0OtherOptionsWebinarRegistrationOptions) GetEnableCustomQuestions() OptBool {
	return s.EnableCustomQuestions
}

// SetAllowHostToEnableJoinInfo sets the value of AllowHostToEnableJoinInfo.
func (s *GetGroupSettingsOK0OtherOptionsWebinarRegistrationOptions) SetAllowHostToEnableJoinInfo(val OptBool) {
	s.AllowHostToEnableJoinInfo = val
}

// SetAllowHostToEnableSocialShareButtons sets the value of AllowHostToEnableSocialShareButtons.
func (s *GetGroupSettingsOK0OtherOptionsWebinarRegistrationOptions) SetAllowHostToEnableSocialShareButtons(val OptBool) {
	s.AllowHostToEnableSocialShareButtons = val
}

// SetEnableCustomQuestions sets the value of EnableCustomQuestions.
func (s *GetGroupSettingsOK0OtherOptionsWebinarRegistrationOptions) SetEnableCustomQuestions(val OptBool) {
	s.EnableCustomQuestions = val
}

type GetGroupSettingsOK0Profile struct {
	RecordingStorageLocation OptGetGroupSettingsOK0ProfileRecordingStorageLocation `json:"recording_storage_location"`
}

// GetRecordingStorageLocation returns the value of RecordingStorageLocation.
func (s *GetGroupSettingsOK0Profile) GetRecordingStorageLocation() OptGetGroupSettingsOK0ProfileRecordingStorageLocation {
	return s.RecordingStorageLocation
}

// SetRecordingStorageLocation sets the value of RecordingStorageLocation.
func (s *GetGroupSettingsOK0Profile) SetRecordingStorageLocation(val OptGetGroupSettingsOK0ProfileRecordingStorageLocation) {
	s.RecordingStorageLocation = val
}

type GetGroupSettingsOK0ProfileRecordingStorageLocation struct {
	// Users can choose the country to store their recorded content. Content can include meeting, webinar,
	//  and phone recordings, as well as voicemail, transcripts, and custom greeting prompts. See
	// [Managing the Communications Content storage location](https://support.zoom.
	// us/hc/en-us/articles/360050781131) for details.
	// Provide abbreviated country codes as the value for this field. See the [Countries abbreviation
	// list](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#countries) for
	// details.
	AllowedValues []string `json:"allowed_values"`
	// Abbreviated country code.
	Value OptString `json:"value"`
}

// GetAllowedValues returns the value of AllowedValues.
func (s *GetGroupSettingsOK0ProfileRecordingStorageLocation) GetAllowedValues() []string {
	return s.AllowedValues
}

// GetValue returns the value of Value.
func (s *GetGroupSettingsOK0ProfileRecordingStorageLocation) GetValue() OptString {
	return s.Value
}

// SetAllowedValues sets the value of AllowedValues.
func (s *GetGroupSettingsOK0ProfileRecordingStorageLocation) SetAllowedValues(val []string) {
	s.AllowedValues = val
}

// SetValue sets the value of Value.
func (s *GetGroupSettingsOK0ProfileRecordingStorageLocation) SetValue(val OptString) {
	s.Value = val
}

type GetGroupSettingsOK0Recording struct {
	// Make cloud recordings accessible to account members only.
	AccountUserAccessRecording OptBool `json:"account_user_access_recording"`
	// [Archiving solution](https://support.zoom.
	// us/hc/en-us/articles/360050431572-Archiving-Meeting-and-Webinar-data) settings. This setting can
	// only be used if you have been granted archiving solution access by the Zoom Support team.
	Archive OptGetGroupSettingsOK0RecordingArchive `json:"archive"`
	// Record meetings automatically as they start.
	AutoRecording OptString `json:"auto_recording"`
	// Allow hosts to record and save the meeting or webinar in the cloud.
	CloudRecording OptBool `json:"cloud_recording"`
	// Allow anyone with a link to the cloud recording to download.
	CloudRecordingDownload OptBool `json:"cloud_recording_download"`
	// Allow only the host with a link to the cloud recording to download.
	CloudRecordingDownloadHost OptBool `json:"cloud_recording_download_host"`
	// Allow the host to delete the recordings. If this option is disabled, the recordings cannot be
	// deleted by the host and only admin can delete them.
	HostDeleteCloudRecording OptBool `json:"host_delete_cloud_recording"`
	// The account's [**Record active speaker, gallery view and shared screen
	// separately**](https://support.zoom.
	// us/hc/en-us/articles/360060316092-Changing-basic-and-advanced-cloud-recording-settings#h_01F4CYJTCTXNS2MXH00W9EFG6R) settings.
	RecordFilesSeparately OptGetGroupSettingsOK0RecordingRecordFilesSeparately `json:"record_files_separately"`
	// Whether participants' names display in the recording.
	DisplayParticipantName OptBool `json:"display_participant_name"`
	// Whether thumbnails of the presenter are recorded when they are sharing their screen.
	RecordingThumbnails OptBool `json:"recording_thumbnails"`
	// Whether recordings will be optimized for a 3rd party video editor. This can increase the file size
	// and the time it takes to generate recording files.
	OptimizeRecordingFor3rdPartyVideoEditor OptBool `json:"optimize_recording_for_3rd_party_video_editor"`
	// Whether the [recording highlights](https://support.zoom.us/hc/en-us/articles/360060802432) feature
	// is enabled.
	RecordingHighlight OptBool `json:"recording_highlight"`
	// Whether panelist chats are saved to the recording.
	SavePanelistChat OptBool `json:"save_panelist_chat"`
	// Whether poll results shared during the meeting or webinar are saved. This also includes poll
	// results shared during the meeting or webinar.
	SavePollResults OptBool `json:"save_poll_results"`
	// Whether [closed captions](https://support.zoom.us/hc/en-us/articles/207279736) are saved as a VTT
	// (Video Track Text) file.
	SaveCloseCaption OptBool `json:"save_close_caption"`
	// Setting to allow cloud recording access only from specific IP address ranges.
	IPAddressAccessControl OptGetGroupSettingsOK0RecordingIPAddressAccessControl `json:"ip_address_access_control"`
	// Allow hosts and participants to record the meeting to a local file.
	LocalRecording OptBool `json:"local_recording"`
	// If set to `true`, meeting hosts cannot view their meeting cloud recordings. Only the admins who
	// have recording management privilege can access them.
	PreventHostAccessRecording OptBool `json:"prevent_host_access_recording"`
	// Whether to record one audio file for all participants.
	RecordAudioFile OptBool `json:"record_audio_file"`
	// When someone is sharing their screen, active speaker will show on the top right corner of the
	// shared screen.
	RecordGalleryView OptBool `json:"record_gallery_view"`
	// Record active speaker with shared screen.
	RecordSpeakerView OptBool `json:"record_speaker_view"`
	// Automatically transcribe the audio of a meeting or webinar for cloud recordings.
	RecordingAudioTranscript OptBool `json:"recording_audio_transcript"`
	// By selecting this option, your recording will have meeting smart chapters, and next steps. You are
	// directing Zoom to access, process, and use your account's recording data for the purpose of
	// analysis and insights.
	SmartRecording OptGetGroupSettingsOK0RecordingSmartRecording `json:"smart_recording"`
	// Save chat messages from the meeting or webinar.
	SaveChatText OptBool `json:"save_chat_text"`
	// Add a timestamp to the recording.
	ShowTimestamp OptBool `json:"show_timestamp"`
}

// GetAccountUserAccessRecording returns the value of AccountUserAccessRecording.
func (s *GetGroupSettingsOK0Recording) GetAccountUserAccessRecording() OptBool {
	return s.AccountUserAccessRecording
}

// GetArchive returns the value of Archive.
func (s *GetGroupSettingsOK0Recording) GetArchive() OptGetGroupSettingsOK0RecordingArchive {
	return s.Archive
}

// GetAutoRecording returns the value of AutoRecording.
func (s *GetGroupSettingsOK0Recording) GetAutoRecording() OptString {
	return s.AutoRecording
}

// GetCloudRecording returns the value of CloudRecording.
func (s *GetGroupSettingsOK0Recording) GetCloudRecording() OptBool {
	return s.CloudRecording
}

// GetCloudRecordingDownload returns the value of CloudRecordingDownload.
func (s *GetGroupSettingsOK0Recording) GetCloudRecordingDownload() OptBool {
	return s.CloudRecordingDownload
}

// GetCloudRecordingDownloadHost returns the value of CloudRecordingDownloadHost.
func (s *GetGroupSettingsOK0Recording) GetCloudRecordingDownloadHost() OptBool {
	return s.CloudRecordingDownloadHost
}

// GetHostDeleteCloudRecording returns the value of HostDeleteCloudRecording.
func (s *GetGroupSettingsOK0Recording) GetHostDeleteCloudRecording() OptBool {
	return s.HostDeleteCloudRecording
}

// GetRecordFilesSeparately returns the value of RecordFilesSeparately.
func (s *GetGroupSettingsOK0Recording) GetRecordFilesSeparately() OptGetGroupSettingsOK0RecordingRecordFilesSeparately {
	return s.RecordFilesSeparately
}

// GetDisplayParticipantName returns the value of DisplayParticipantName.
func (s *GetGroupSettingsOK0Recording) GetDisplayParticipantName() OptBool {
	return s.DisplayParticipantName
}

// GetRecordingThumbnails returns the value of RecordingThumbnails.
func (s *GetGroupSettingsOK0Recording) GetRecordingThumbnails() OptBool {
	return s.RecordingThumbnails
}

// GetOptimizeRecordingFor3rdPartyVideoEditor returns the value of OptimizeRecordingFor3rdPartyVideoEditor.
func (s *GetGroupSettingsOK0Recording) GetOptimizeRecordingFor3rdPartyVideoEditor() OptBool {
	return s.OptimizeRecordingFor3rdPartyVideoEditor
}

// GetRecordingHighlight returns the value of RecordingHighlight.
func (s *GetGroupSettingsOK0Recording) GetRecordingHighlight() OptBool {
	return s.RecordingHighlight
}

// GetSavePanelistChat returns the value of SavePanelistChat.
func (s *GetGroupSettingsOK0Recording) GetSavePanelistChat() OptBool {
	return s.SavePanelistChat
}

// GetSavePollResults returns the value of SavePollResults.
func (s *GetGroupSettingsOK0Recording) GetSavePollResults() OptBool {
	return s.SavePollResults
}

// GetSaveCloseCaption returns the value of SaveCloseCaption.
func (s *GetGroupSettingsOK0Recording) GetSaveCloseCaption() OptBool {
	return s.SaveCloseCaption
}

// GetIPAddressAccessControl returns the value of IPAddressAccessControl.
func (s *GetGroupSettingsOK0Recording) GetIPAddressAccessControl() OptGetGroupSettingsOK0RecordingIPAddressAccessControl {
	return s.IPAddressAccessControl
}

// GetLocalRecording returns the value of LocalRecording.
func (s *GetGroupSettingsOK0Recording) GetLocalRecording() OptBool {
	return s.LocalRecording
}

// GetPreventHostAccessRecording returns the value of PreventHostAccessRecording.
func (s *GetGroupSettingsOK0Recording) GetPreventHostAccessRecording() OptBool {
	return s.PreventHostAccessRecording
}

// GetRecordAudioFile returns the value of RecordAudioFile.
func (s *GetGroupSettingsOK0Recording) GetRecordAudioFile() OptBool {
	return s.RecordAudioFile
}

// GetRecordGalleryView returns the value of RecordGalleryView.
func (s *GetGroupSettingsOK0Recording) GetRecordGalleryView() OptBool {
	return s.RecordGalleryView
}

// GetRecordSpeakerView returns the value of RecordSpeakerView.
func (s *GetGroupSettingsOK0Recording) GetRecordSpeakerView() OptBool {
	return s.RecordSpeakerView
}

// GetRecordingAudioTranscript returns the value of RecordingAudioTranscript.
func (s *GetGroupSettingsOK0Recording) GetRecordingAudioTranscript() OptBool {
	return s.RecordingAudioTranscript
}

// GetSmartRecording returns the value of SmartRecording.
func (s *GetGroupSettingsOK0Recording) GetSmartRecording() OptGetGroupSettingsOK0RecordingSmartRecording {
	return s.SmartRecording
}

// GetSaveChatText returns the value of SaveChatText.
func (s *GetGroupSettingsOK0Recording) GetSaveChatText() OptBool {
	return s.SaveChatText
}

// GetShowTimestamp returns the value of ShowTimestamp.
func (s *GetGroupSettingsOK0Recording) GetShowTimestamp() OptBool {
	return s.ShowTimestamp
}

// SetAccountUserAccessRecording sets the value of AccountUserAccessRecording.
func (s *GetGroupSettingsOK0Recording) SetAccountUserAccessRecording(val OptBool) {
	s.AccountUserAccessRecording = val
}

// SetArchive sets the value of Archive.
func (s *GetGroupSettingsOK0Recording) SetArchive(val OptGetGroupSettingsOK0RecordingArchive) {
	s.Archive = val
}

// SetAutoRecording sets the value of AutoRecording.
func (s *GetGroupSettingsOK0Recording) SetAutoRecording(val OptString) {
	s.AutoRecording = val
}

// SetCloudRecording sets the value of CloudRecording.
func (s *GetGroupSettingsOK0Recording) SetCloudRecording(val OptBool) {
	s.CloudRecording = val
}

// SetCloudRecordingDownload sets the value of CloudRecordingDownload.
func (s *GetGroupSettingsOK0Recording) SetCloudRecordingDownload(val OptBool) {
	s.CloudRecordingDownload = val
}

// SetCloudRecordingDownloadHost sets the value of CloudRecordingDownloadHost.
func (s *GetGroupSettingsOK0Recording) SetCloudRecordingDownloadHost(val OptBool) {
	s.CloudRecordingDownloadHost = val
}

// SetHostDeleteCloudRecording sets the value of HostDeleteCloudRecording.
func (s *GetGroupSettingsOK0Recording) SetHostDeleteCloudRecording(val OptBool) {
	s.HostDeleteCloudRecording = val
}

// SetRecordFilesSeparately sets the value of RecordFilesSeparately.
func (s *GetGroupSettingsOK0Recording) SetRecordFilesSeparately(val OptGetGroupSettingsOK0RecordingRecordFilesSeparately) {
	s.RecordFilesSeparately = val
}

// SetDisplayParticipantName sets the value of DisplayParticipantName.
func (s *GetGroupSettingsOK0Recording) SetDisplayParticipantName(val OptBool) {
	s.DisplayParticipantName = val
}

// SetRecordingThumbnails sets the value of RecordingThumbnails.
func (s *GetGroupSettingsOK0Recording) SetRecordingThumbnails(val OptBool) {
	s.RecordingThumbnails = val
}

// SetOptimizeRecordingFor3rdPartyVideoEditor sets the value of OptimizeRecordingFor3rdPartyVideoEditor.
func (s *GetGroupSettingsOK0Recording) SetOptimizeRecordingFor3rdPartyVideoEditor(val OptBool) {
	s.OptimizeRecordingFor3rdPartyVideoEditor = val
}

// SetRecordingHighlight sets the value of RecordingHighlight.
func (s *GetGroupSettingsOK0Recording) SetRecordingHighlight(val OptBool) {
	s.RecordingHighlight = val
}

// SetSavePanelistChat sets the value of SavePanelistChat.
func (s *GetGroupSettingsOK0Recording) SetSavePanelistChat(val OptBool) {
	s.SavePanelistChat = val
}

// SetSavePollResults sets the value of SavePollResults.
func (s *GetGroupSettingsOK0Recording) SetSavePollResults(val OptBool) {
	s.SavePollResults = val
}

// SetSaveCloseCaption sets the value of SaveCloseCaption.
func (s *GetGroupSettingsOK0Recording) SetSaveCloseCaption(val OptBool) {
	s.SaveCloseCaption = val
}

// SetIPAddressAccessControl sets the value of IPAddressAccessControl.
func (s *GetGroupSettingsOK0Recording) SetIPAddressAccessControl(val OptGetGroupSettingsOK0RecordingIPAddressAccessControl) {
	s.IPAddressAccessControl = val
}

// SetLocalRecording sets the value of LocalRecording.
func (s *GetGroupSettingsOK0Recording) SetLocalRecording(val OptBool) {
	s.LocalRecording = val
}

// SetPreventHostAccessRecording sets the value of PreventHostAccessRecording.
func (s *GetGroupSettingsOK0Recording) SetPreventHostAccessRecording(val OptBool) {
	s.PreventHostAccessRecording = val
}

// SetRecordAudioFile sets the value of RecordAudioFile.
func (s *GetGroupSettingsOK0Recording) SetRecordAudioFile(val OptBool) {
	s.RecordAudioFile = val
}

// SetRecordGalleryView sets the value of RecordGalleryView.
func (s *GetGroupSettingsOK0Recording) SetRecordGalleryView(val OptBool) {
	s.RecordGalleryView = val
}

// SetRecordSpeakerView sets the value of RecordSpeakerView.
func (s *GetGroupSettingsOK0Recording) SetRecordSpeakerView(val OptBool) {
	s.RecordSpeakerView = val
}

// SetRecordingAudioTranscript sets the value of RecordingAudioTranscript.
func (s *GetGroupSettingsOK0Recording) SetRecordingAudioTranscript(val OptBool) {
	s.RecordingAudioTranscript = val
}

// SetSmartRecording sets the value of SmartRecording.
func (s *GetGroupSettingsOK0Recording) SetSmartRecording(val OptGetGroupSettingsOK0RecordingSmartRecording) {
	s.SmartRecording = val
}

// SetSaveChatText sets the value of SaveChatText.
func (s *GetGroupSettingsOK0Recording) SetSaveChatText(val OptBool) {
	s.SaveChatText = val
}

// SetShowTimestamp sets the value of ShowTimestamp.
func (s *GetGroupSettingsOK0Recording) SetShowTimestamp(val OptBool) {
	s.ShowTimestamp = val
}

// [Archiving solution](https://support.zoom.
// us/hc/en-us/articles/360050431572-Archiving-Meeting-and-Webinar-data) settings. This setting can
// only be used if you have been granted archiving solution access by the Zoom Support team.
type GetGroupSettingsOK0RecordingArchive struct {
	// Enable the archiving feature.
	Enable   OptBool                                        `json:"enable"`
	Settings OptGetGroupSettingsOK0RecordingArchiveSettings `json:"settings"`
	// Archive types.
	// * `1` - Only meetings are archived.
	// * `2` - Only webinars are archived.
	// * `3` - Both meetings and webinars are archived.
	Type OptInt `json:"type"`
}

// GetEnable returns the value of Enable.
func (s *GetGroupSettingsOK0RecordingArchive) GetEnable() OptBool {
	return s.Enable
}

// GetSettings returns the value of Settings.
func (s *GetGroupSettingsOK0RecordingArchive) GetSettings() OptGetGroupSettingsOK0RecordingArchiveSettings {
	return s.Settings
}

// GetType returns the value of Type.
func (s *GetGroupSettingsOK0RecordingArchive) GetType() OptInt {
	return s.Type
}

// SetEnable sets the value of Enable.
func (s *GetGroupSettingsOK0RecordingArchive) SetEnable(val OptBool) {
	s.Enable = val
}

// SetSettings sets the value of Settings.
func (s *GetGroupSettingsOK0RecordingArchive) SetSettings(val OptGetGroupSettingsOK0RecordingArchiveSettings) {
	s.Settings = val
}

// SetType sets the value of Type.
func (s *GetGroupSettingsOK0RecordingArchive) SetType(val OptInt) {
	s.Type = val
}

type GetGroupSettingsOK0RecordingArchiveSettings struct {
	// Include in-meeting or in-webinar audio in the archive.
	AudioFile OptBool `json:"audio_file"`
	// Include closed caption or transcript in the archive.
	CcTranscriptFile OptBool `json:"cc_transcript_file"`
	// Include in-meeting chat in the archive.
	ChatFile OptBool `json:"chat_file"`
	// Include user email in in-meeting chat file.
	ChatWithSenderEmail OptBool `json:"chat_with_sender_email"`
	// Include in-meeting or in-webinar video in the archive.
	VideoFile OptBool `json:"video_file"`
	// Include direct message in in-meeting chat file.
	ChatWithDirectMessage OptBool `json:"chat_with_direct_message"`
	// The retention period for archiving content, in days.
	ArchiveRetention OptInt `json:"archive_retention"`
	// Perform the action when meetings or webinars cannot be archived.
	// `1` - Participants can stay in the meeting and will receive a notification.
	// `2` - Nobody can join or stay in the meeting.
	ActionWhenArchiveFailed OptInt `json:"action_when_archive_failed"`
	// Show notification when video or audio archiving starts.
	// `1` - Participants can stay in the meeting and will receive a notification.
	// `2` - Nobody can join or stay in the meeting.
	NotificationWhenArchivingStarts OptString `json:"notification_when_archiving_starts"`
	// Play voice prompt when video or audio archiving starts.
	// `1` - Participants can stay in the meeting and will receive a notification.
	// `2` - Nobody can join or stay in the meeting.
	PlayVoicePromptWhenArchivingStarts OptString `json:"play_voice_prompt_when_archiving_starts"`
}

// GetAudioFile returns the value of AudioFile.
func (s *GetGroupSettingsOK0RecordingArchiveSettings) GetAudioFile() OptBool {
	return s.AudioFile
}

// GetCcTranscriptFile returns the value of CcTranscriptFile.
func (s *GetGroupSettingsOK0RecordingArchiveSettings) GetCcTranscriptFile() OptBool {
	return s.CcTranscriptFile
}

// GetChatFile returns the value of ChatFile.
func (s *GetGroupSettingsOK0RecordingArchiveSettings) GetChatFile() OptBool {
	return s.ChatFile
}

// GetChatWithSenderEmail returns the value of ChatWithSenderEmail.
func (s *GetGroupSettingsOK0RecordingArchiveSettings) GetChatWithSenderEmail() OptBool {
	return s.ChatWithSenderEmail
}

// GetVideoFile returns the value of VideoFile.
func (s *GetGroupSettingsOK0RecordingArchiveSettings) GetVideoFile() OptBool {
	return s.VideoFile
}

// GetChatWithDirectMessage returns the value of ChatWithDirectMessage.
func (s *GetGroupSettingsOK0RecordingArchiveSettings) GetChatWithDirectMessage() OptBool {
	return s.ChatWithDirectMessage
}

// GetArchiveRetention returns the value of ArchiveRetention.
func (s *GetGroupSettingsOK0RecordingArchiveSettings) GetArchiveRetention() OptInt {
	return s.ArchiveRetention
}

// GetActionWhenArchiveFailed returns the value of ActionWhenArchiveFailed.
func (s *GetGroupSettingsOK0RecordingArchiveSettings) GetActionWhenArchiveFailed() OptInt {
	return s.ActionWhenArchiveFailed
}

// GetNotificationWhenArchivingStarts returns the value of NotificationWhenArchivingStarts.
func (s *GetGroupSettingsOK0RecordingArchiveSettings) GetNotificationWhenArchivingStarts() OptString {
	return s.NotificationWhenArchivingStarts
}

// GetPlayVoicePromptWhenArchivingStarts returns the value of PlayVoicePromptWhenArchivingStarts.
func (s *GetGroupSettingsOK0RecordingArchiveSettings) GetPlayVoicePromptWhenArchivingStarts() OptString {
	return s.PlayVoicePromptWhenArchivingStarts
}

// SetAudioFile sets the value of AudioFile.
func (s *GetGroupSettingsOK0RecordingArchiveSettings) SetAudioFile(val OptBool) {
	s.AudioFile = val
}

// SetCcTranscriptFile sets the value of CcTranscriptFile.
func (s *GetGroupSettingsOK0RecordingArchiveSettings) SetCcTranscriptFile(val OptBool) {
	s.CcTranscriptFile = val
}

// SetChatFile sets the value of ChatFile.
func (s *GetGroupSettingsOK0RecordingArchiveSettings) SetChatFile(val OptBool) {
	s.ChatFile = val
}

// SetChatWithSenderEmail sets the value of ChatWithSenderEmail.
func (s *GetGroupSettingsOK0RecordingArchiveSettings) SetChatWithSenderEmail(val OptBool) {
	s.ChatWithSenderEmail = val
}

// SetVideoFile sets the value of VideoFile.
func (s *GetGroupSettingsOK0RecordingArchiveSettings) SetVideoFile(val OptBool) {
	s.VideoFile = val
}

// SetChatWithDirectMessage sets the value of ChatWithDirectMessage.
func (s *GetGroupSettingsOK0RecordingArchiveSettings) SetChatWithDirectMessage(val OptBool) {
	s.ChatWithDirectMessage = val
}

// SetArchiveRetention sets the value of ArchiveRetention.
func (s *GetGroupSettingsOK0RecordingArchiveSettings) SetArchiveRetention(val OptInt) {
	s.ArchiveRetention = val
}

// SetActionWhenArchiveFailed sets the value of ActionWhenArchiveFailed.
func (s *GetGroupSettingsOK0RecordingArchiveSettings) SetActionWhenArchiveFailed(val OptInt) {
	s.ActionWhenArchiveFailed = val
}

// SetNotificationWhenArchivingStarts sets the value of NotificationWhenArchivingStarts.
func (s *GetGroupSettingsOK0RecordingArchiveSettings) SetNotificationWhenArchivingStarts(val OptString) {
	s.NotificationWhenArchivingStarts = val
}

// SetPlayVoicePromptWhenArchivingStarts sets the value of PlayVoicePromptWhenArchivingStarts.
func (s *GetGroupSettingsOK0RecordingArchiveSettings) SetPlayVoicePromptWhenArchivingStarts(val OptString) {
	s.PlayVoicePromptWhenArchivingStarts = val
}

// Setting to allow cloud recording access only from specific IP address ranges.
type GetGroupSettingsOK0RecordingIPAddressAccessControl struct {
	// If set to `true`, the cloud recordings of this account can only be accessed by the IP addresses
	// defined in the `ip_addresses_or_ranges` property.
	Enable OptBool `json:"enable"`
	// IP addresses or ranges that have access to the cloud recordings. Separate multiple IP ranges with
	// comma. Use n.n.n.n, n.n.n.n/n or n.n.n.n - n.n.n.n syntax where n is a number.
	// Example: `46.33.24.184, 48.99.100.2/25` or `200.181.108.17 - 220.181.108.157`.
	IPAddressesOrRanges OptString `json:"ip_addresses_or_ranges"`
}

// GetEnable returns the value of Enable.
func (s *GetGroupSettingsOK0RecordingIPAddressAccessControl) GetEnable() OptBool {
	return s.Enable
}

// GetIPAddressesOrRanges returns the value of IPAddressesOrRanges.
func (s *GetGroupSettingsOK0RecordingIPAddressAccessControl) GetIPAddressesOrRanges() OptString {
	return s.IPAddressesOrRanges
}

// SetEnable sets the value of Enable.
func (s *GetGroupSettingsOK0RecordingIPAddressAccessControl) SetEnable(val OptBool) {
	s.Enable = val
}

// SetIPAddressesOrRanges sets the value of IPAddressesOrRanges.
func (s *GetGroupSettingsOK0RecordingIPAddressAccessControl) SetIPAddressesOrRanges(val OptString) {
	s.IPAddressesOrRanges = val
}

// The account's [**Record active speaker, gallery view and shared screen
// separately**](https://support.zoom.
// us/hc/en-us/articles/360060316092-Changing-basic-and-advanced-cloud-recording-settings#h_01F4CYJTCTXNS2MXH00W9EFG6R) settings.
type GetGroupSettingsOK0RecordingRecordFilesSeparately struct {
	// Whether recording only the active speaker is enabled.
	ActiveSpeaker OptBool `json:"active_speaker"`
	// Whether recording only the gallery view is enabled.
	GalleryView OptBool `json:"gallery_view"`
	// Whether recording only shared screen is enabled.
	SharedScreen OptBool `json:"shared_screen"`
}

// GetActiveSpeaker returns the value of ActiveSpeaker.
func (s *GetGroupSettingsOK0RecordingRecordFilesSeparately) GetActiveSpeaker() OptBool {
	return s.ActiveSpeaker
}

// GetGalleryView returns the value of GalleryView.
func (s *GetGroupSettingsOK0RecordingRecordFilesSeparately) GetGalleryView() OptBool {
	return s.GalleryView
}

// GetSharedScreen returns the value of SharedScreen.
func (s *GetGroupSettingsOK0RecordingRecordFilesSeparately) GetSharedScreen() OptBool {
	return s.SharedScreen
}

// SetActiveSpeaker sets the value of ActiveSpeaker.
func (s *GetGroupSettingsOK0RecordingRecordFilesSeparately) SetActiveSpeaker(val OptBool) {
	s.ActiveSpeaker = val
}

// SetGalleryView sets the value of GalleryView.
func (s *GetGroupSettingsOK0RecordingRecordFilesSeparately) SetGalleryView(val OptBool) {
	s.GalleryView = val
}

// SetSharedScreen sets the value of SharedScreen.
func (s *GetGroupSettingsOK0RecordingRecordFilesSeparately) SetSharedScreen(val OptBool) {
	s.SharedScreen = val
}

// By selecting this option, your recording will have meeting smart chapters, and next steps. You are
// directing Zoom to access, process, and use your account's recording data for the purpose of
// analysis and insights.
type GetGroupSettingsOK0RecordingSmartRecording struct {
	// By selecting this option, meeting details in the audio transcript will be highlighted. Hosts can
	// modify highlighted sections and generate a video summary (highlighted sections may have a 3-second
	// offset) based on these sections. The summary is for informational purposes only and may not be
	// complete.
	CreateRecordingHighlights OptBool `json:"create_recording_highlights"`
	// By selecting this option, your recording will have chapters with overview. Hosts can edit the
	// chapters.
	CreateSmartChapters OptBool `json:"create_smart_chapters"`
	// By selecting this option, there will be a summary of actions to take after the recorded meeting.
	CreateNextSteps OptBool `json:"create_next_steps"`
}

// GetCreateRecordingHighlights returns the value of CreateRecordingHighlights.
func (s *GetGroupSettingsOK0RecordingSmartRecording) GetCreateRecordingHighlights() OptBool {
	return s.CreateRecordingHighlights
}

// GetCreateSmartChapters returns the value of CreateSmartChapters.
func (s *GetGroupSettingsOK0RecordingSmartRecording) GetCreateSmartChapters() OptBool {
	return s.CreateSmartChapters
}

// GetCreateNextSteps returns the value of CreateNextSteps.
func (s *GetGroupSettingsOK0RecordingSmartRecording) GetCreateNextSteps() OptBool {
	return s.CreateNextSteps
}

// SetCreateRecordingHighlights sets the value of CreateRecordingHighlights.
func (s *GetGroupSettingsOK0RecordingSmartRecording) SetCreateRecordingHighlights(val OptBool) {
	s.CreateRecordingHighlights = val
}

// SetCreateSmartChapters sets the value of CreateSmartChapters.
func (s *GetGroupSettingsOK0RecordingSmartRecording) SetCreateSmartChapters(val OptBool) {
	s.CreateSmartChapters = val
}

// SetCreateNextSteps sets the value of CreateNextSteps.
func (s *GetGroupSettingsOK0RecordingSmartRecording) SetCreateNextSteps(val OptBool) {
	s.CreateNextSteps = val
}

type GetGroupSettingsOK0ScheduleMeeting struct {
	// Determine how participants can join the audio portion of the meeting.
	AudioType OptString `json:"audio_type"`
	// If the value is set to `true`, the meeting passcode will be encrypted and included in the join
	// meeting link to allow participants to join with just one click without having to enter the
	// passcode.
	EmbedPasswordInJoinLink OptBool `json:"embed_password_in_join_link"`
	// If join before host option is enabled for a personal meeting, then enforce passcode requirement.
	// **This field will be deprecated in near future.** If you would like to enable this setting, we
	// highly encourage you to use the `require_password_for_pmi_meetings` field.
	//
	// Deprecated: schema marks this property as deprecated.
	ForcePmiJbhPassword OptBool `json:"force_pmi_jbh_password"`
	// Start meetings with host video on.
	HostVideo OptBool `json:"host_video"`
	// Allow participants to join the meeting before the host arrives.
	JoinBeforeHost OptBool `json:"join_before_host"`
	// Automatically mute all participants when they join the meeting.
	MuteUponEntry OptBool `json:"mute_upon_entry"`
	// Start meetings with participant video on.
	ParticipantVideo OptBool `json:"participant_video"`
	// Personal meeting setting.
	// n
	// `true` - Indicates that the **Enable Personal Meeting ID** setting is turned on. Users can choose
	// to use personal meeting ID for their meetings.
	// `false` - Indicates that the **Enable Personal Meeting ID** setting is [turned
	// off](https://support.zoom.
	// us/hc/en-us/articles/201362843-Personal-meeting-ID-PMI-and-personal-link#h_aa0335c8-3b06-41bc-bc1f-a8b84ef17f2a). If this setting is disabled, meetings that were scheduled with PMI will be invalid. Scheduled meetings will need to be manually updated.
	// For Zoom Phone only:If a user has been assigned a desk phone, **Elevate to Zoom Meeting** on desk
	// phone will be disabled.
	PersonalMeeting OptBool `json:"personal_meeting"`
	// Generate and send new passcodes for newly scheduled or edited meetings.
	PstnPasswordProtected OptBool `json:"pstn_password_protected"`
	// If enabled, a random passcode will be generated on the user's end who starts the instant meeting.
	// Other participants will have to enter the password to join the meeting. If you use PMI for your
	// instant meetings, this option will be disabled.
	RequirePasswordForInstantMeetings OptBool `json:"require_password_for_instant_meetings"`
	// Indicates whether a passcode is required for [PMI](https://support.zoom.
	// us/hc/en-us/articles/203276937-Using-Personal-Meeting-ID-PMI-) meetings or not.
	// `none` - Do not require password for PMI meetings.
	// `all` - Require participants to enter password for all PMI enabled meetings.
	// `jbh_only` - Require password only for meetings where the **join before host** setting is enabled.
	RequirePasswordForPmiMeetings OptString `json:"require_password_for_pmi_meetings"`
	// Require a passcode for meetings which have already been scheduled.
	RequirePasswordForScheduledMeetings OptBool `json:"require_password_for_scheduled_meetings"`
	// This setting applies for regular meetings that do not use a PMI. If enabled, a password will be
	// generated while a host schedules a new meeting and participants will be required to enter the
	// password before they can join the meeting.
	RequirePasswordForSchedulingNewMeetings OptBool `json:"require_password_for_scheduling_new_meetings"`
	// Receive desktop notification for upcoming meetings.
	UpcomingMeetingReminder OptBool `json:"upcoming_meeting_reminder"`
	// Indicates whether PMI is enabled for all instant meetings or not.
	UsePmiForInstantMeetings OptBool `json:"use_pmi_for_instant_meetings"`
	// Indicates whether PMI is enabled for all scheduled meetings or not.
	UsePmiForScheduleMeetings OptBool `json:"use_pmi_for_schedule_meetings"`
	// Information about the [**Always display `Zoom Meeting` as the meeting topic**](https://support.
	// zoom.us/hc/en-us/articles/201363253-Changing-account-settings#h_01EG9BJ646V2WJK1S3H2MP6YV6)
	// setting.
	AlwaysDisplayZoomMeetingAsTopic OptGetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic `json:"always_display_zoom_meeting_as_topic"`
	// Information about the [**Always show `Zoom Webinar` as the webinar topic**](https://support.zoom.
	// us/hc/en-us/articles/201363253-Changing-account-settings#h_01EG9BJ646V2WJK1S3H2MP6YV6) setting.
	AlwaysDisplayZoomWebinarAsTopic OptGetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic `json:"always_display_zoom_webinar_as_topic"`
	// Information about the **Enable continuous meeting chat** feature.
	ContinuousMeetingChat OptGetGroupSettingsOK0ScheduleMeetingContinuousMeetingChat `json:"continuous_meeting_chat"`
}

// GetAudioType returns the value of AudioType.
func (s *GetGroupSettingsOK0ScheduleMeeting) GetAudioType() OptString {
	return s.AudioType
}

// GetEmbedPasswordInJoinLink returns the value of EmbedPasswordInJoinLink.
func (s *GetGroupSettingsOK0ScheduleMeeting) GetEmbedPasswordInJoinLink() OptBool {
	return s.EmbedPasswordInJoinLink
}

// GetForcePmiJbhPassword returns the value of ForcePmiJbhPassword.
func (s *GetGroupSettingsOK0ScheduleMeeting) GetForcePmiJbhPassword() OptBool {
	return s.ForcePmiJbhPassword
}

// GetHostVideo returns the value of HostVideo.
func (s *GetGroupSettingsOK0ScheduleMeeting) GetHostVideo() OptBool {
	return s.HostVideo
}

// GetJoinBeforeHost returns the value of JoinBeforeHost.
func (s *GetGroupSettingsOK0ScheduleMeeting) GetJoinBeforeHost() OptBool {
	return s.JoinBeforeHost
}

// GetMuteUponEntry returns the value of MuteUponEntry.
func (s *GetGroupSettingsOK0ScheduleMeeting) GetMuteUponEntry() OptBool {
	return s.MuteUponEntry
}

// GetParticipantVideo returns the value of ParticipantVideo.
func (s *GetGroupSettingsOK0ScheduleMeeting) GetParticipantVideo() OptBool {
	return s.ParticipantVideo
}

// GetPersonalMeeting returns the value of PersonalMeeting.
func (s *GetGroupSettingsOK0ScheduleMeeting) GetPersonalMeeting() OptBool {
	return s.PersonalMeeting
}

// GetPstnPasswordProtected returns the value of PstnPasswordProtected.
func (s *GetGroupSettingsOK0ScheduleMeeting) GetPstnPasswordProtected() OptBool {
	return s.PstnPasswordProtected
}

// GetRequirePasswordForInstantMeetings returns the value of RequirePasswordForInstantMeetings.
func (s *GetGroupSettingsOK0ScheduleMeeting) GetRequirePasswordForInstantMeetings() OptBool {
	return s.RequirePasswordForInstantMeetings
}

// GetRequirePasswordForPmiMeetings returns the value of RequirePasswordForPmiMeetings.
func (s *GetGroupSettingsOK0ScheduleMeeting) GetRequirePasswordForPmiMeetings() OptString {
	return s.RequirePasswordForPmiMeetings
}

// GetRequirePasswordForScheduledMeetings returns the value of RequirePasswordForScheduledMeetings.
func (s *GetGroupSettingsOK0ScheduleMeeting) GetRequirePasswordForScheduledMeetings() OptBool {
	return s.RequirePasswordForScheduledMeetings
}

// GetRequirePasswordForSchedulingNewMeetings returns the value of RequirePasswordForSchedulingNewMeetings.
func (s *GetGroupSettingsOK0ScheduleMeeting) GetRequirePasswordForSchedulingNewMeetings() OptBool {
	return s.RequirePasswordForSchedulingNewMeetings
}

// GetUpcomingMeetingReminder returns the value of UpcomingMeetingReminder.
func (s *GetGroupSettingsOK0ScheduleMeeting) GetUpcomingMeetingReminder() OptBool {
	return s.UpcomingMeetingReminder
}

// GetUsePmiForInstantMeetings returns the value of UsePmiForInstantMeetings.
func (s *GetGroupSettingsOK0ScheduleMeeting) GetUsePmiForInstantMeetings() OptBool {
	return s.UsePmiForInstantMeetings
}

// GetUsePmiForScheduleMeetings returns the value of UsePmiForScheduleMeetings.
func (s *GetGroupSettingsOK0ScheduleMeeting) GetUsePmiForScheduleMeetings() OptBool {
	return s.UsePmiForScheduleMeetings
}

// GetAlwaysDisplayZoomMeetingAsTopic returns the value of AlwaysDisplayZoomMeetingAsTopic.
func (s *GetGroupSettingsOK0ScheduleMeeting) GetAlwaysDisplayZoomMeetingAsTopic() OptGetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic {
	return s.AlwaysDisplayZoomMeetingAsTopic
}

// GetAlwaysDisplayZoomWebinarAsTopic returns the value of AlwaysDisplayZoomWebinarAsTopic.
func (s *GetGroupSettingsOK0ScheduleMeeting) GetAlwaysDisplayZoomWebinarAsTopic() OptGetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic {
	return s.AlwaysDisplayZoomWebinarAsTopic
}

// GetContinuousMeetingChat returns the value of ContinuousMeetingChat.
func (s *GetGroupSettingsOK0ScheduleMeeting) GetContinuousMeetingChat() OptGetGroupSettingsOK0ScheduleMeetingContinuousMeetingChat {
	return s.ContinuousMeetingChat
}

// SetAudioType sets the value of AudioType.
func (s *GetGroupSettingsOK0ScheduleMeeting) SetAudioType(val OptString) {
	s.AudioType = val
}

// SetEmbedPasswordInJoinLink sets the value of EmbedPasswordInJoinLink.
func (s *GetGroupSettingsOK0ScheduleMeeting) SetEmbedPasswordInJoinLink(val OptBool) {
	s.EmbedPasswordInJoinLink = val
}

// SetForcePmiJbhPassword sets the value of ForcePmiJbhPassword.
func (s *GetGroupSettingsOK0ScheduleMeeting) SetForcePmiJbhPassword(val OptBool) {
	s.ForcePmiJbhPassword = val
}

// SetHostVideo sets the value of HostVideo.
func (s *GetGroupSettingsOK0ScheduleMeeting) SetHostVideo(val OptBool) {
	s.HostVideo = val
}

// SetJoinBeforeHost sets the value of JoinBeforeHost.
func (s *GetGroupSettingsOK0ScheduleMeeting) SetJoinBeforeHost(val OptBool) {
	s.JoinBeforeHost = val
}

// SetMuteUponEntry sets the value of MuteUponEntry.
func (s *GetGroupSettingsOK0ScheduleMeeting) SetMuteUponEntry(val OptBool) {
	s.MuteUponEntry = val
}

// SetParticipantVideo sets the value of ParticipantVideo.
func (s *GetGroupSettingsOK0ScheduleMeeting) SetParticipantVideo(val OptBool) {
	s.ParticipantVideo = val
}

// SetPersonalMeeting sets the value of PersonalMeeting.
func (s *GetGroupSettingsOK0ScheduleMeeting) SetPersonalMeeting(val OptBool) {
	s.PersonalMeeting = val
}

// SetPstnPasswordProtected sets the value of PstnPasswordProtected.
func (s *GetGroupSettingsOK0ScheduleMeeting) SetPstnPasswordProtected(val OptBool) {
	s.PstnPasswordProtected = val
}

// SetRequirePasswordForInstantMeetings sets the value of RequirePasswordForInstantMeetings.
func (s *GetGroupSettingsOK0ScheduleMeeting) SetRequirePasswordForInstantMeetings(val OptBool) {
	s.RequirePasswordForInstantMeetings = val
}

// SetRequirePasswordForPmiMeetings sets the value of RequirePasswordForPmiMeetings.
func (s *GetGroupSettingsOK0ScheduleMeeting) SetRequirePasswordForPmiMeetings(val OptString) {
	s.RequirePasswordForPmiMeetings = val
}

// SetRequirePasswordForScheduledMeetings sets the value of RequirePasswordForScheduledMeetings.
func (s *GetGroupSettingsOK0ScheduleMeeting) SetRequirePasswordForScheduledMeetings(val OptBool) {
	s.RequirePasswordForScheduledMeetings = val
}

// SetRequirePasswordForSchedulingNewMeetings sets the value of RequirePasswordForSchedulingNewMeetings.
func (s *GetGroupSettingsOK0ScheduleMeeting) SetRequirePasswordForSchedulingNewMeetings(val OptBool) {
	s.RequirePasswordForSchedulingNewMeetings = val
}

// SetUpcomingMeetingReminder sets the value of UpcomingMeetingReminder.
func (s *GetGroupSettingsOK0ScheduleMeeting) SetUpcomingMeetingReminder(val OptBool) {
	s.UpcomingMeetingReminder = val
}

// SetUsePmiForInstantMeetings sets the value of UsePmiForInstantMeetings.
func (s *GetGroupSettingsOK0ScheduleMeeting) SetUsePmiForInstantMeetings(val OptBool) {
	s.UsePmiForInstantMeetings = val
}

// SetUsePmiForScheduleMeetings sets the value of UsePmiForScheduleMeetings.
func (s *GetGroupSettingsOK0ScheduleMeeting) SetUsePmiForScheduleMeetings(val OptBool) {
	s.UsePmiForScheduleMeetings = val
}

// SetAlwaysDisplayZoomMeetingAsTopic sets the value of AlwaysDisplayZoomMeetingAsTopic.
func (s *GetGroupSettingsOK0ScheduleMeeting) SetAlwaysDisplayZoomMeetingAsTopic(val OptGetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic) {
	s.AlwaysDisplayZoomMeetingAsTopic = val
}

// SetAlwaysDisplayZoomWebinarAsTopic sets the value of AlwaysDisplayZoomWebinarAsTopic.
func (s *GetGroupSettingsOK0ScheduleMeeting) SetAlwaysDisplayZoomWebinarAsTopic(val OptGetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic) {
	s.AlwaysDisplayZoomWebinarAsTopic = val
}

// SetContinuousMeetingChat sets the value of ContinuousMeetingChat.
func (s *GetGroupSettingsOK0ScheduleMeeting) SetContinuousMeetingChat(val OptGetGroupSettingsOK0ScheduleMeetingContinuousMeetingChat) {
	s.ContinuousMeetingChat = val
}

// Information about the [**Always display `Zoom Meeting` as the meeting topic**](https://support.
// zoom.us/hc/en-us/articles/201363253-Changing-account-settings#h_01EG9BJ646V2WJK1S3H2MP6YV6)
// setting.
type GetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic struct {
	// Whether the **Always display `Zoom Meeting` as the meeting topic** setting is enabled.
	Enable OptBool `json:"enable"`
	// Whether to display **Zoom Meeting** as the topic for already-scheduled meetings.
	DisplayTopicForScheduledMeetings OptBool `json:"display_topic_for_scheduled_meetings"`
}

// GetEnable returns the value of Enable.
func (s *GetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic) GetEnable() OptBool {
	return s.Enable
}

// GetDisplayTopicForScheduledMeetings returns the value of DisplayTopicForScheduledMeetings.
func (s *GetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic) GetDisplayTopicForScheduledMeetings() OptBool {
	return s.DisplayTopicForScheduledMeetings
}

// SetEnable sets the value of Enable.
func (s *GetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic) SetEnable(val OptBool) {
	s.Enable = val
}

// SetDisplayTopicForScheduledMeetings sets the value of DisplayTopicForScheduledMeetings.
func (s *GetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic) SetDisplayTopicForScheduledMeetings(val OptBool) {
	s.DisplayTopicForScheduledMeetings = val
}

// Information about the [**Always show `Zoom Webinar` as the webinar topic**](https://support.zoom.
// us/hc/en-us/articles/201363253-Changing-account-settings#h_01EG9BJ646V2WJK1S3H2MP6YV6) setting.
type GetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic struct {
	// Whether the **Always show `Zoom Webinar` as the webinar topic** setting is enabled.
	Enable OptBool `json:"enable"`
	// Whether to display **Zoom Webinar** as the topic for already-scheduled meetings.
	DisplayTopicForScheduledWebinars OptBool `json:"display_topic_for_scheduled_webinars"`
}

// GetEnable returns the value of Enable.
func (s *GetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic) GetEnable() OptBool {
	return s.Enable
}

// GetDisplayTopicForScheduledWebinars returns the value of DisplayTopicForScheduledWebinars.
func (s *GetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic) GetDisplayTopicForScheduledWebinars() OptBool {
	return s.DisplayTopicForScheduledWebinars
}

// SetEnable sets the value of Enable.
func (s *GetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic) SetEnable(val OptBool) {
	s.Enable = val
}

// SetDisplayTopicForScheduledWebinars sets the value of DisplayTopicForScheduledWebinars.
func (s *GetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic) SetDisplayTopicForScheduledWebinars(val OptBool) {
	s.DisplayTopicForScheduledWebinars = val
}

// Information about the **Enable continuous meeting chat** feature.
type GetGroupSettingsOK0ScheduleMeetingContinuousMeetingChat struct {
	// Whether to enable the **Enable continuous meeting chat** setting.
	Enable OptBool `json:"enable"`
	// Whether to enable the **External users can be added** setting.
	CanAddExternalUsers OptBool `json:"can_add_external_users"`
	// Whether to enable the **Automatically add invited external users** setting.
	AutoAddInvitedExternalUsers OptBool `json:"auto_add_invited_external_users"`
}

// GetEnable returns the value of Enable.
func (s *GetGroupSettingsOK0ScheduleMeetingContinuousMeetingChat) GetEnable() OptBool {
	return s.Enable
}

// GetCanAddExternalUsers returns the value of CanAddExternalUsers.
func (s *GetGroupSettingsOK0ScheduleMeetingContinuousMeetingChat) GetCanAddExternalUsers() OptBool {
	return s.CanAddExternalUsers
}

// GetAutoAddInvitedExternalUsers returns the value of AutoAddInvitedExternalUsers.
func (s *GetGroupSettingsOK0ScheduleMeetingContinuousMeetingChat) GetAutoAddInvitedExternalUsers() OptBool {
	return s.AutoAddInvitedExternalUsers
}

// SetEnable sets the value of Enable.
func (s *GetGroupSettingsOK0ScheduleMeetingContinuousMeetingChat) SetEnable(val OptBool) {
	s.Enable = val
}

// SetCanAddExternalUsers sets the value of CanAddExternalUsers.
func (s *GetGroupSettingsOK0ScheduleMeetingContinuousMeetingChat) SetCanAddExternalUsers(val OptBool) {
	s.CanAddExternalUsers = val
}

// SetAutoAddInvitedExternalUsers sets the value of AutoAddInvitedExternalUsers.
func (s *GetGroupSettingsOK0ScheduleMeetingContinuousMeetingChat) SetAutoAddInvitedExternalUsers(val OptBool) {
	s.AutoAddInvitedExternalUsers = val
}

type GetGroupSettingsOK0Telephony struct {
	AudioConferenceInfo OptString `json:"audio_conference_info"`
	// Indicates where most of the participants call into or call from during a meeting.
	TelephonyRegions OptGetGroupSettingsOK0TelephonyTelephonyRegions `json:"telephony_regions"`
	// Allow users to join the meeting using the existing 3rd party audio configuration.
	ThirdPartyAudio OptBool `json:"third_party_audio"`
}

// GetAudioConferenceInfo returns the value of AudioConferenceInfo.
func (s *GetGroupSettingsOK0Telephony) GetAudioConferenceInfo() OptString {
	return s.AudioConferenceInfo
}

// GetTelephonyRegions returns the value of TelephonyRegions.
func (s *GetGroupSettingsOK0Telephony) GetTelephonyRegions() OptGetGroupSettingsOK0TelephonyTelephonyRegions {
	return s.TelephonyRegions
}

// GetThirdPartyAudio returns the value of ThirdPartyAudio.
func (s *GetGroupSettingsOK0Telephony) GetThirdPartyAudio() OptBool {
	return s.ThirdPartyAudio
}

// SetAudioConferenceInfo sets the value of AudioConferenceInfo.
func (s *GetGroupSettingsOK0Telephony) SetAudioConferenceInfo(val OptString) {
	s.AudioConferenceInfo = val
}

// SetTelephonyRegions sets the value of TelephonyRegions.
func (s *GetGroupSettingsOK0Telephony) SetTelephonyRegions(val OptGetGroupSettingsOK0TelephonyTelephonyRegions) {
	s.TelephonyRegions = val
}

// SetThirdPartyAudio sets the value of ThirdPartyAudio.
func (s *GetGroupSettingsOK0Telephony) SetThirdPartyAudio(val OptBool) {
	s.ThirdPartyAudio = val
}

// Indicates where most of the participants call into or call from during a meeting.
type GetGroupSettingsOK0TelephonyTelephonyRegions struct {
	// The account's selected telephony regions that indicate where most participants call into or call
	// from during a meeting.
	SelectionValues OptString `json:"selection_values"`
}

// GetSelectionValues returns the value of SelectionValues.
func (s *GetGroupSettingsOK0TelephonyTelephonyRegions) GetSelectionValues() OptString {
	return s.SelectionValues
}

// SetSelectionValues sets the value of SelectionValues.
func (s *GetGroupSettingsOK0TelephonyTelephonyRegions) SetSelectionValues(val OptString) {
	s.SelectionValues = val
}

type GetGroupSettingsOK1 struct {
	// Whether the [**Allow authentication exception**](https://support.zoom.
	// us/hc/en-us/articles/360037117472#h_01F13A9N1FQFNVESC9C21NRHXY) setting is enabled. This lets
	// hosts invite users who can bypass authentication.
	AllowAuthenticationException OptBool `json:"allow_authentication_exception"`
	// Meeting Authentication Options.
	AuthenticationOptions []GetGroupSettingsOK1AuthenticationOptionsItem `json:"authentication_options"`
	// Only authenticated users can join meetings.
	MeetingAuthentication OptBool `json:"meeting_authentication"`
}

// GetAllowAuthenticationException returns the value of AllowAuthenticationException.
func (s *GetGroupSettingsOK1) GetAllowAuthenticationException() OptBool {
	return s.AllowAuthenticationException
}

// GetAuthenticationOptions returns the value of AuthenticationOptions.
func (s *GetGroupSettingsOK1) GetAuthenticationOptions() []GetGroupSettingsOK1AuthenticationOptionsItem {
	return s.AuthenticationOptions
}

// GetMeetingAuthentication returns the value of MeetingAuthentication.
func (s *GetGroupSettingsOK1) GetMeetingAuthentication() OptBool {
	return s.MeetingAuthentication
}

// SetAllowAuthenticationException sets the value of AllowAuthenticationException.
func (s *GetGroupSettingsOK1) SetAllowAuthenticationException(val OptBool) {
	s.AllowAuthenticationException = val
}

// SetAuthenticationOptions sets the value of AuthenticationOptions.
func (s *GetGroupSettingsOK1) SetAuthenticationOptions(val []GetGroupSettingsOK1AuthenticationOptionsItem) {
	s.AuthenticationOptions = val
}

// SetMeetingAuthentication sets the value of MeetingAuthentication.
func (s *GetGroupSettingsOK1) SetMeetingAuthentication(val OptBool) {
	s.MeetingAuthentication = val
}

type GetGroupSettingsOK1AuthenticationOptionsItem struct {
	// Authentication default option.
	DefaultOption OptBool `json:"default_option"`
	// Authentication domains.
	Domains OptString `json:"domains"`
	// Authentication id.
	ID OptString `json:"id"`
	// Authentication name.
	Name OptString `json:"name"`
	// Authentication type. Specify one of the following authentication types for the authentication
	// profile:
	// * `enforce_login`: This option allows any users to join the meeting or webinar, as long as they
	// are signed into their Zoom account.
	// * `enforce_login_with_domains`: This option, allows you to specify a rule so that only those Zoom
	// users whose email addresses contain a certain domain, can join the meeting or webinar. You can
	// either add multiple domains using a comma in between and/or use a wildcard for listing domains.
	// * `enforce_login_with_same_account`: This option allows users to join the meeting or webinar with
	// the same Zoom account.
	Type OptString `json:"type"`
	// Authentication visible.
	Visible OptBool `json:"visible"`
}

// GetDefaultOption returns the value of DefaultOption.
func (s *GetGroupSettingsOK1AuthenticationOptionsItem) GetDefaultOption() OptBool {
	return s.DefaultOption
}

// GetDomains returns the value of Domains.
func (s *GetGroupSettingsOK1AuthenticationOptionsItem) GetDomains() OptString {
	return s.Domains
}

// GetID returns the value of ID.
func (s *GetGroupSettingsOK1AuthenticationOptionsItem) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *GetGroupSettingsOK1AuthenticationOptionsItem) GetName() OptString {
	return s.Name
}

// GetType returns the value of Type.
func (s *GetGroupSettingsOK1AuthenticationOptionsItem) GetType() OptString {
	return s.Type
}

// GetVisible returns the value of Visible.
func (s *GetGroupSettingsOK1AuthenticationOptionsItem) GetVisible() OptBool {
	return s.Visible
}

// SetDefaultOption sets the value of DefaultOption.
func (s *GetGroupSettingsOK1AuthenticationOptionsItem) SetDefaultOption(val OptBool) {
	s.DefaultOption = val
}

// SetDomains sets the value of Domains.
func (s *GetGroupSettingsOK1AuthenticationOptionsItem) SetDomains(val OptString) {
	s.Domains = val
}

// SetID sets the value of ID.
func (s *GetGroupSettingsOK1AuthenticationOptionsItem) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *GetGroupSettingsOK1AuthenticationOptionsItem) SetName(val OptString) {
	s.Name = val
}

// SetType sets the value of Type.
func (s *GetGroupSettingsOK1AuthenticationOptionsItem) SetType(val OptString) {
	s.Type = val
}

// SetVisible sets the value of Visible.
func (s *GetGroupSettingsOK1AuthenticationOptionsItem) SetVisible(val OptBool) {
	s.Visible = val
}

type GetGroupSettingsOK2 struct {
	// Authentication Options.
	AuthenticationOptions []GetGroupSettingsOK2AuthenticationOptionsItem `json:"authentication_options"`
	// Only authenticated users can view cloud recordings.
	RecordingAuthentication OptBool `json:"recording_authentication"`
}

// GetAuthenticationOptions returns the value of AuthenticationOptions.
func (s *GetGroupSettingsOK2) GetAuthenticationOptions() []GetGroupSettingsOK2AuthenticationOptionsItem {
	return s.AuthenticationOptions
}

// GetRecordingAuthentication returns the value of RecordingAuthentication.
func (s *GetGroupSettingsOK2) GetRecordingAuthentication() OptBool {
	return s.RecordingAuthentication
}

// SetAuthenticationOptions sets the value of AuthenticationOptions.
func (s *GetGroupSettingsOK2) SetAuthenticationOptions(val []GetGroupSettingsOK2AuthenticationOptionsItem) {
	s.AuthenticationOptions = val
}

// SetRecordingAuthentication sets the value of RecordingAuthentication.
func (s *GetGroupSettingsOK2) SetRecordingAuthentication(val OptBool) {
	s.RecordingAuthentication = val
}

type GetGroupSettingsOK2AuthenticationOptionsItem struct {
	// Authentication default option.
	DefaultOption OptBool `json:"default_option"`
	// Authentication domains.
	Domains OptString `json:"domains"`
	// Authentication id.
	ID OptString `json:"id"`
	// Authentication name.
	Name OptString `json:"name"`
	// Authentication type.
	Type OptString `json:"type"`
	// Authentication visible.
	Visible OptBool `json:"visible"`
}

// GetDefaultOption returns the value of DefaultOption.
func (s *GetGroupSettingsOK2AuthenticationOptionsItem) GetDefaultOption() OptBool {
	return s.DefaultOption
}

// GetDomains returns the value of Domains.
func (s *GetGroupSettingsOK2AuthenticationOptionsItem) GetDomains() OptString {
	return s.Domains
}

// GetID returns the value of ID.
func (s *GetGroupSettingsOK2AuthenticationOptionsItem) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *GetGroupSettingsOK2AuthenticationOptionsItem) GetName() OptString {
	return s.Name
}

// GetType returns the value of Type.
func (s *GetGroupSettingsOK2AuthenticationOptionsItem) GetType() OptString {
	return s.Type
}

// GetVisible returns the value of Visible.
func (s *GetGroupSettingsOK2AuthenticationOptionsItem) GetVisible() OptBool {
	return s.Visible
}

// SetDefaultOption sets the value of DefaultOption.
func (s *GetGroupSettingsOK2AuthenticationOptionsItem) SetDefaultOption(val OptBool) {
	s.DefaultOption = val
}

// SetDomains sets the value of Domains.
func (s *GetGroupSettingsOK2AuthenticationOptionsItem) SetDomains(val OptString) {
	s.Domains = val
}

// SetID sets the value of ID.
func (s *GetGroupSettingsOK2AuthenticationOptionsItem) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *GetGroupSettingsOK2AuthenticationOptionsItem) SetName(val OptString) {
	s.Name = val
}

// SetType sets the value of Type.
func (s *GetGroupSettingsOK2AuthenticationOptionsItem) SetType(val OptString) {
	s.Type = val
}

// SetVisible sets the value of Visible.
func (s *GetGroupSettingsOK2AuthenticationOptionsItem) SetVisible(val OptBool) {
	s.Visible = val
}

// The group's meeting and webinar security settings.
type GetGroupSettingsOK3 struct {
	MeetingSecurity OptGetGroupSettingsOK3MeetingSecurity `json:"meeting_security"`
}

// GetMeetingSecurity returns the value of MeetingSecurity.
func (s *GetGroupSettingsOK3) GetMeetingSecurity() OptGetGroupSettingsOK3MeetingSecurity {
	return s.MeetingSecurity
}

// SetMeetingSecurity sets the value of MeetingSecurity.
func (s *GetGroupSettingsOK3) SetMeetingSecurity(val OptGetGroupSettingsOK3MeetingSecurity) {
	s.MeetingSecurity = val
}

type GetGroupSettingsOK3MeetingSecurity struct {
	// Whether all meetings are required to be secured with at least one security option.
	// This setting can only be disabled by Enterprise, ISV, Business (with more than 100 licenses), and
	// Education accounts.
	AutoSecurity OptBool `json:"auto_security"`
	// Whether users in specific domains are blocked from joining meetings and webinars.
	BlockUserDomain OptBool `json:"block_user_domain"`
	// A list of blocked domains.
	BlockUserDomainList []string `json:"block_user_domain_list"`
	// Information about the Chat Etiquette Tool.
	ChatEtiquetteTool OptGetGroupSettingsOK3MeetingSecurityChatEtiquetteTool `json:"chat_etiquette_tool"`
	// Whether the meeting password will be encrypted and included in the invitation link. The provided
	// link will allow participants to join the meeting without having to enter the password.
	EmbedPasswordInJoinLink OptBool `json:"embed_password_in_join_link"`
	// The type of encryption used to start a meeting.
	// * `enhanced_encryption` - Enhanced encryption. Encryption data is stored in the cloud.
	// * `e2ee` - End-to-end encryption. The encryption key is stored on the local device and cannot be
	// obtained by anyone else. E2EE also [**disables** certain features](https://support.zoom.
	// us/hc/en-us/articles/360048660871), such as cloud recording, live streaming, and allowing
	// participants to join before the host.
	EncryptionType OptString `json:"encryption_type"`
	// Whether end-to-end encryption is enabled for meetings.
	EndToEndEncryptedMeetings OptBool `json:"end_to_end_encrypted_meetings"`
	// Whether all instant and scheduled meetings that users can join via client or Zoom Rooms systems
	// are password-protected. [Personal meeting ID (PMI)](https://support.zoom.
	// us/hc/en-us/articles/203276937) meetings are **not** included in this setting.
	MeetingPassword OptBool `json:"meeting_password"`
	// Information about the meeting and webinar [password requirements](https://support.zoom.
	// us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
	MeetingPasswordRequirement OptGetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement `json:"meeting_password_requirement"`
	// Whether to specify that only authenticated users can join the meeting from the web client.
	OnlyAuthenticatedCanJoinFromWebclient OptBool `json:"only_authenticated_can_join_from_webclient"`
	// Whether a password is required for participants joining by phone.
	// If enabled and the meeting is password-protected, a numeric password is required for participants
	// to join by phone. For meetings with alphanumeric passwords, a numeric password will be generated.
	PhonePassword OptBool `json:"phone_password"`
	// Whether all Personal Meeting ID (PMI) meetings that users can join via client or Zoom Rooms
	// systems are password-protected.
	PmiPassword OptBool `json:"pmi_password"`
	// Whether a password is required for meetings that have already been scheduled.
	RequirePasswordForScheduledMeeting OptBool `json:"require_password_for_scheduled_meeting"`
	// Whether a password is required for webinars that have already been scheduled.
	RequirePasswordForScheduledWebinar OptBool `json:"require_password_for_scheduled_webinar"`
	// Whether participants are placed in the [**Waiting Room**](https://support.zoom.
	// us/hc/en-us/articles/115000332726-Waiting-Room) when they join a meeting.
	// When the **Waiting Room** feature is enabled, the [**Allow participants to join before
	// host**](https://support.zoom.
	// us/hc/en-us/articles/202828525-Allow-participants-to-join-before-host) setting is disabled.
	WaitingRoom OptBool `json:"waiting_room"`
	// Information about the waiting room settings.
	WaitingRoomSettings OptGetGroupSettingsOK3MeetingSecurityWaitingRoomSettings `json:"waiting_room_settings"`
	// Whether a password is generated when scheduling webinars. Participants must use the generated
	// password to join the scheduled webinar.
	WebinarPassword OptBool `json:"webinar_password"`
}

// GetAutoSecurity returns the value of AutoSecurity.
func (s *GetGroupSettingsOK3MeetingSecurity) GetAutoSecurity() OptBool {
	return s.AutoSecurity
}

// GetBlockUserDomain returns the value of BlockUserDomain.
func (s *GetGroupSettingsOK3MeetingSecurity) GetBlockUserDomain() OptBool {
	return s.BlockUserDomain
}

// GetBlockUserDomainList returns the value of BlockUserDomainList.
func (s *GetGroupSettingsOK3MeetingSecurity) GetBlockUserDomainList() []string {
	return s.BlockUserDomainList
}

// GetChatEtiquetteTool returns the value of ChatEtiquetteTool.
func (s *GetGroupSettingsOK3MeetingSecurity) GetChatEtiquetteTool() OptGetGroupSettingsOK3MeetingSecurityChatEtiquetteTool {
	return s.ChatEtiquetteTool
}

// GetEmbedPasswordInJoinLink returns the value of EmbedPasswordInJoinLink.
func (s *GetGroupSettingsOK3MeetingSecurity) GetEmbedPasswordInJoinLink() OptBool {
	return s.EmbedPasswordInJoinLink
}

// GetEncryptionType returns the value of EncryptionType.
func (s *GetGroupSettingsOK3MeetingSecurity) GetEncryptionType() OptString {
	return s.EncryptionType
}

// GetEndToEndEncryptedMeetings returns the value of EndToEndEncryptedMeetings.
func (s *GetGroupSettingsOK3MeetingSecurity) GetEndToEndEncryptedMeetings() OptBool {
	return s.EndToEndEncryptedMeetings
}

// GetMeetingPassword returns the value of MeetingPassword.
func (s *GetGroupSettingsOK3MeetingSecurity) GetMeetingPassword() OptBool {
	return s.MeetingPassword
}

// GetMeetingPasswordRequirement returns the value of MeetingPasswordRequirement.
func (s *GetGroupSettingsOK3MeetingSecurity) GetMeetingPasswordRequirement() OptGetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement {
	return s.MeetingPasswordRequirement
}

// GetOnlyAuthenticatedCanJoinFromWebclient returns the value of OnlyAuthenticatedCanJoinFromWebclient.
func (s *GetGroupSettingsOK3MeetingSecurity) GetOnlyAuthenticatedCanJoinFromWebclient() OptBool {
	return s.OnlyAuthenticatedCanJoinFromWebclient
}

// GetPhonePassword returns the value of PhonePassword.
func (s *GetGroupSettingsOK3MeetingSecurity) GetPhonePassword() OptBool {
	return s.PhonePassword
}

// GetPmiPassword returns the value of PmiPassword.
func (s *GetGroupSettingsOK3MeetingSecurity) GetPmiPassword() OptBool {
	return s.PmiPassword
}

// GetRequirePasswordForScheduledMeeting returns the value of RequirePasswordForScheduledMeeting.
func (s *GetGroupSettingsOK3MeetingSecurity) GetRequirePasswordForScheduledMeeting() OptBool {
	return s.RequirePasswordForScheduledMeeting
}

// GetRequirePasswordForScheduledWebinar returns the value of RequirePasswordForScheduledWebinar.
func (s *GetGroupSettingsOK3MeetingSecurity) GetRequirePasswordForScheduledWebinar() OptBool {
	return s.RequirePasswordForScheduledWebinar
}

// GetWaitingRoom returns the value of WaitingRoom.
func (s *GetGroupSettingsOK3MeetingSecurity) GetWaitingRoom() OptBool {
	return s.WaitingRoom
}

// GetWaitingRoomSettings returns the value of WaitingRoomSettings.
func (s *GetGroupSettingsOK3MeetingSecurity) GetWaitingRoomSettings() OptGetGroupSettingsOK3MeetingSecurityWaitingRoomSettings {
	return s.WaitingRoomSettings
}

// GetWebinarPassword returns the value of WebinarPassword.
func (s *GetGroupSettingsOK3MeetingSecurity) GetWebinarPassword() OptBool {
	return s.WebinarPassword
}

// SetAutoSecurity sets the value of AutoSecurity.
func (s *GetGroupSettingsOK3MeetingSecurity) SetAutoSecurity(val OptBool) {
	s.AutoSecurity = val
}

// SetBlockUserDomain sets the value of BlockUserDomain.
func (s *GetGroupSettingsOK3MeetingSecurity) SetBlockUserDomain(val OptBool) {
	s.BlockUserDomain = val
}

// SetBlockUserDomainList sets the value of BlockUserDomainList.
func (s *GetGroupSettingsOK3MeetingSecurity) SetBlockUserDomainList(val []string) {
	s.BlockUserDomainList = val
}

// SetChatEtiquetteTool sets the value of ChatEtiquetteTool.
func (s *GetGroupSettingsOK3MeetingSecurity) SetChatEtiquetteTool(val OptGetGroupSettingsOK3MeetingSecurityChatEtiquetteTool) {
	s.ChatEtiquetteTool = val
}

// SetEmbedPasswordInJoinLink sets the value of EmbedPasswordInJoinLink.
func (s *GetGroupSettingsOK3MeetingSecurity) SetEmbedPasswordInJoinLink(val OptBool) {
	s.EmbedPasswordInJoinLink = val
}

// SetEncryptionType sets the value of EncryptionType.
func (s *GetGroupSettingsOK3MeetingSecurity) SetEncryptionType(val OptString) {
	s.EncryptionType = val
}

// SetEndToEndEncryptedMeetings sets the value of EndToEndEncryptedMeetings.
func (s *GetGroupSettingsOK3MeetingSecurity) SetEndToEndEncryptedMeetings(val OptBool) {
	s.EndToEndEncryptedMeetings = val
}

// SetMeetingPassword sets the value of MeetingPassword.
func (s *GetGroupSettingsOK3MeetingSecurity) SetMeetingPassword(val OptBool) {
	s.MeetingPassword = val
}

// SetMeetingPasswordRequirement sets the value of MeetingPasswordRequirement.
func (s *GetGroupSettingsOK3MeetingSecurity) SetMeetingPasswordRequirement(val OptGetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement) {
	s.MeetingPasswordRequirement = val
}

// SetOnlyAuthenticatedCanJoinFromWebclient sets the value of OnlyAuthenticatedCanJoinFromWebclient.
func (s *GetGroupSettingsOK3MeetingSecurity) SetOnlyAuthenticatedCanJoinFromWebclient(val OptBool) {
	s.OnlyAuthenticatedCanJoinFromWebclient = val
}

// SetPhonePassword sets the value of PhonePassword.
func (s *GetGroupSettingsOK3MeetingSecurity) SetPhonePassword(val OptBool) {
	s.PhonePassword = val
}

// SetPmiPassword sets the value of PmiPassword.
func (s *GetGroupSettingsOK3MeetingSecurity) SetPmiPassword(val OptBool) {
	s.PmiPassword = val
}

// SetRequirePasswordForScheduledMeeting sets the value of RequirePasswordForScheduledMeeting.
func (s *GetGroupSettingsOK3MeetingSecurity) SetRequirePasswordForScheduledMeeting(val OptBool) {
	s.RequirePasswordForScheduledMeeting = val
}

// SetRequirePasswordForScheduledWebinar sets the value of RequirePasswordForScheduledWebinar.
func (s *GetGroupSettingsOK3MeetingSecurity) SetRequirePasswordForScheduledWebinar(val OptBool) {
	s.RequirePasswordForScheduledWebinar = val
}

// SetWaitingRoom sets the value of WaitingRoom.
func (s *GetGroupSettingsOK3MeetingSecurity) SetWaitingRoom(val OptBool) {
	s.WaitingRoom = val
}

// SetWaitingRoomSettings sets the value of WaitingRoomSettings.
func (s *GetGroupSettingsOK3MeetingSecurity) SetWaitingRoomSettings(val OptGetGroupSettingsOK3MeetingSecurityWaitingRoomSettings) {
	s.WaitingRoomSettings = val
}

// SetWebinarPassword sets the value of WebinarPassword.
func (s *GetGroupSettingsOK3MeetingSecurity) SetWebinarPassword(val OptBool) {
	s.WebinarPassword = val
}

// Information about the Chat Etiquette Tool.
type GetGroupSettingsOK3MeetingSecurityChatEtiquetteTool struct {
	// Whether the **Chat Etiquette Tool** is enabled.
	Enable OptBool `json:"enable"`
	// Information about the defined **Chat Etiquette Tool** policies.
	Policies []GetGroupSettingsOK3MeetingSecurityChatEtiquetteToolPoliciesItem `json:"policies"`
}

// GetEnable returns the value of Enable.
func (s *GetGroupSettingsOK3MeetingSecurityChatEtiquetteTool) GetEnable() OptBool {
	return s.Enable
}

// GetPolicies returns the value of Policies.
func (s *GetGroupSettingsOK3MeetingSecurityChatEtiquetteTool) GetPolicies() []GetGroupSettingsOK3MeetingSecurityChatEtiquetteToolPoliciesItem {
	return s.Policies
}

// SetEnable sets the value of Enable.
func (s *GetGroupSettingsOK3MeetingSecurityChatEtiquetteTool) SetEnable(val OptBool) {
	s.Enable = val
}

// SetPolicies sets the value of Policies.
func (s *GetGroupSettingsOK3MeetingSecurityChatEtiquetteTool) SetPolicies(val []GetGroupSettingsOK3MeetingSecurityChatEtiquetteToolPoliciesItem) {
	s.Policies = val
}

type GetGroupSettingsOK3MeetingSecurityChatEtiquetteToolPoliciesItem struct {
	// The policy's description.
	Description OptString `json:"description"`
	// The policy ID.
	ID OptString `json:"id"`
	// Whether the policy is locked by an account-level user. When it is locked, users cannot update the
	// policy.
	IsLocked OptBool `json:"is_locked"`
	// A list of defined rule keywords.
	Keywords []string `json:"keywords"`
	// The policy name.
	Name OptString `json:"name"`
	// The regular expression to match to the content of chat messages.
	RegularExpression OptString `json:"regular_expression"`
	// The policy's current status.
	// * `activated` - Activated.
	// * `deactivated` - Deactivated.
	Status OptString `json:"status"`
	// The policy's trigger action.
	// * `1` - Ask the user to confirm before they send the message.
	// * `2` - Block the user's message.
	TriggerAction OptInt `json:"trigger_action"`
}

// GetDescription returns the value of Description.
func (s *GetGroupSettingsOK3MeetingSecurityChatEtiquetteToolPoliciesItem) GetDescription() OptString {
	return s.Description
}

// GetID returns the value of ID.
func (s *GetGroupSettingsOK3MeetingSecurityChatEtiquetteToolPoliciesItem) GetID() OptString {
	return s.ID
}

// GetIsLocked returns the value of IsLocked.
func (s *GetGroupSettingsOK3MeetingSecurityChatEtiquetteToolPoliciesItem) GetIsLocked() OptBool {
	return s.IsLocked
}

// GetKeywords returns the value of Keywords.
func (s *GetGroupSettingsOK3MeetingSecurityChatEtiquetteToolPoliciesItem) GetKeywords() []string {
	return s.Keywords
}

// GetName returns the value of Name.
func (s *GetGroupSettingsOK3MeetingSecurityChatEtiquetteToolPoliciesItem) GetName() OptString {
	return s.Name
}

// GetRegularExpression returns the value of RegularExpression.
func (s *GetGroupSettingsOK3MeetingSecurityChatEtiquetteToolPoliciesItem) GetRegularExpression() OptString {
	return s.RegularExpression
}

// GetStatus returns the value of Status.
func (s *GetGroupSettingsOK3MeetingSecurityChatEtiquetteToolPoliciesItem) GetStatus() OptString {
	return s.Status
}

// GetTriggerAction returns the value of TriggerAction.
func (s *GetGroupSettingsOK3MeetingSecurityChatEtiquetteToolPoliciesItem) GetTriggerAction() OptInt {
	return s.TriggerAction
}

// SetDescription sets the value of Description.
func (s *GetGroupSettingsOK3MeetingSecurityChatEtiquetteToolPoliciesItem) SetDescription(val OptString) {
	s.Description = val
}

// SetID sets the value of ID.
func (s *GetGroupSettingsOK3MeetingSecurityChatEtiquetteToolPoliciesItem) SetID(val OptString) {
	s.ID = val
}

// SetIsLocked sets the value of IsLocked.
func (s *GetGroupSettingsOK3MeetingSecurityChatEtiquetteToolPoliciesItem) SetIsLocked(val OptBool) {
	s.IsLocked = val
}

// SetKeywords sets the value of Keywords.
func (s *GetGroupSettingsOK3MeetingSecurityChatEtiquetteToolPoliciesItem) SetKeywords(val []string) {
	s.Keywords = val
}

// SetName sets the value of Name.
func (s *GetGroupSettingsOK3MeetingSecurityChatEtiquetteToolPoliciesItem) SetName(val OptString) {
	s.Name = val
}

// SetRegularExpression sets the value of RegularExpression.
func (s *GetGroupSettingsOK3MeetingSecurityChatEtiquetteToolPoliciesItem) SetRegularExpression(val OptString) {
	s.RegularExpression = val
}

// SetStatus sets the value of Status.
func (s *GetGroupSettingsOK3MeetingSecurityChatEtiquetteToolPoliciesItem) SetStatus(val OptString) {
	s.Status = val
}

// SetTriggerAction sets the value of TriggerAction.
func (s *GetGroupSettingsOK3MeetingSecurityChatEtiquetteToolPoliciesItem) SetTriggerAction(val OptInt) {
	s.TriggerAction = val
}

// Information about the meeting and webinar [password requirements](https://support.zoom.
// us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
type GetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement struct {
	// The maximum length of consecutive characters, like `abcdef`, allowed in a password.
	// * `4` through `8` - The maximum consecutive characters length. The length is `n` minus `1`, where
	// `n` is the provided value. For example, if you provide the `4` value, there can only be a maximum
	// of `3` consecutive characters in a password (for example, `abc1x@8fdh`).
	// * `0` - Do not apply a consecutive character restriction.
	ConsecutiveCharactersLength OptInt `json:"consecutive_characters_length"`
	// Whether the password must contain at least one letter character.
	HaveLetter OptBool `json:"have_letter"`
	// Whether the password must contain at least one numeric character.
	HaveNumber OptBool `json:"have_number"`
	// Whether the password must contain at least one special character. For example, `!`, `@`, and/or
	// `#` characters.
	HaveSpecialCharacter OptBool `json:"have_special_character"`
	// Whether the password must include uppercase and lowercase characters.
	HaveUpperAndLowerCharacters OptBool `json:"have_upper_and_lower_characters"`
	// The password's minimum length.
	Length OptInt `json:"length"`
	// Whether the password must contain **only** numeric characters.
	OnlyAllowNumeric OptBool `json:"only_allow_numeric"`
	// Whether users will be informed when the provided password is weak.
	WeakEnhanceDetection OptBool `json:"weak_enhance_detection"`
}

// GetConsecutiveCharactersLength returns the value of ConsecutiveCharactersLength.
func (s *GetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement) GetConsecutiveCharactersLength() OptInt {
	return s.ConsecutiveCharactersLength
}

// GetHaveLetter returns the value of HaveLetter.
func (s *GetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement) GetHaveLetter() OptBool {
	return s.HaveLetter
}

// GetHaveNumber returns the value of HaveNumber.
func (s *GetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement) GetHaveNumber() OptBool {
	return s.HaveNumber
}

// GetHaveSpecialCharacter returns the value of HaveSpecialCharacter.
func (s *GetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement) GetHaveSpecialCharacter() OptBool {
	return s.HaveSpecialCharacter
}

// GetHaveUpperAndLowerCharacters returns the value of HaveUpperAndLowerCharacters.
func (s *GetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement) GetHaveUpperAndLowerCharacters() OptBool {
	return s.HaveUpperAndLowerCharacters
}

// GetLength returns the value of Length.
func (s *GetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement) GetLength() OptInt {
	return s.Length
}

// GetOnlyAllowNumeric returns the value of OnlyAllowNumeric.
func (s *GetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement) GetOnlyAllowNumeric() OptBool {
	return s.OnlyAllowNumeric
}

// GetWeakEnhanceDetection returns the value of WeakEnhanceDetection.
func (s *GetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement) GetWeakEnhanceDetection() OptBool {
	return s.WeakEnhanceDetection
}

// SetConsecutiveCharactersLength sets the value of ConsecutiveCharactersLength.
func (s *GetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement) SetConsecutiveCharactersLength(val OptInt) {
	s.ConsecutiveCharactersLength = val
}

// SetHaveLetter sets the value of HaveLetter.
func (s *GetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement) SetHaveLetter(val OptBool) {
	s.HaveLetter = val
}

// SetHaveNumber sets the value of HaveNumber.
func (s *GetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement) SetHaveNumber(val OptBool) {
	s.HaveNumber = val
}

// SetHaveSpecialCharacter sets the value of HaveSpecialCharacter.
func (s *GetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement) SetHaveSpecialCharacter(val OptBool) {
	s.HaveSpecialCharacter = val
}

// SetHaveUpperAndLowerCharacters sets the value of HaveUpperAndLowerCharacters.
func (s *GetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement) SetHaveUpperAndLowerCharacters(val OptBool) {
	s.HaveUpperAndLowerCharacters = val
}

// SetLength sets the value of Length.
func (s *GetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement) SetLength(val OptInt) {
	s.Length = val
}

// SetOnlyAllowNumeric sets the value of OnlyAllowNumeric.
func (s *GetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement) SetOnlyAllowNumeric(val OptBool) {
	s.OnlyAllowNumeric = val
}

// SetWeakEnhanceDetection sets the value of WeakEnhanceDetection.
func (s *GetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement) SetWeakEnhanceDetection(val OptBool) {
	s.WeakEnhanceDetection = val
}

// Information about the waiting room settings.
type GetGroupSettingsOK3MeetingSecurityWaitingRoomSettings struct {
	// The type of participants to be admitted to the waiting room.
	// * `0` - All attendees.
	// * `1` - Users who are not in your account.
	// * `2` - Users who are not in your account and are not part of your [allowed domains
	// list](https://support.zoom.
	// us/hc/en-us/articles/360037117472-Configuring-authentication-profiles#h_e3cf0d5f-eec7-4c2a-ad29-ef2a5079a7da).
	ParticipantsToPlaceInWaitingRoom OptInt `json:"participants_to_place_in_waiting_room"`
	// The users who can admit participants from the waiting room.
	// * `0` - Host and co-hosts only.
	// * `1` - Host, co-hosts, and anyone who bypassed the Waiting Room if the host and co-hosts are not
	// present.
	UsersWhoCanAdmitParticipantsFromWaitingRoom OptInt `json:"users_who_can_admit_participants_from_waiting_room"`
	// If the `participants_to_place_in_waiting_room` field is `2`, a comma-separated list of the domains
	// that can bypass the waiting room (`example.com,example2.com`).
	WhitelistedDomainsForWaitingRoom OptString `json:"whitelisted_domains_for_waiting_room"`
}

// GetParticipantsToPlaceInWaitingRoom returns the value of ParticipantsToPlaceInWaitingRoom.
func (s *GetGroupSettingsOK3MeetingSecurityWaitingRoomSettings) GetParticipantsToPlaceInWaitingRoom() OptInt {
	return s.ParticipantsToPlaceInWaitingRoom
}

// GetUsersWhoCanAdmitParticipantsFromWaitingRoom returns the value of UsersWhoCanAdmitParticipantsFromWaitingRoom.
func (s *GetGroupSettingsOK3MeetingSecurityWaitingRoomSettings) GetUsersWhoCanAdmitParticipantsFromWaitingRoom() OptInt {
	return s.UsersWhoCanAdmitParticipantsFromWaitingRoom
}

// GetWhitelistedDomainsForWaitingRoom returns the value of WhitelistedDomainsForWaitingRoom.
func (s *GetGroupSettingsOK3MeetingSecurityWaitingRoomSettings) GetWhitelistedDomainsForWaitingRoom() OptString {
	return s.WhitelistedDomainsForWaitingRoom
}

// SetParticipantsToPlaceInWaitingRoom sets the value of ParticipantsToPlaceInWaitingRoom.
func (s *GetGroupSettingsOK3MeetingSecurityWaitingRoomSettings) SetParticipantsToPlaceInWaitingRoom(val OptInt) {
	s.ParticipantsToPlaceInWaitingRoom = val
}

// SetUsersWhoCanAdmitParticipantsFromWaitingRoom sets the value of UsersWhoCanAdmitParticipantsFromWaitingRoom.
func (s *GetGroupSettingsOK3MeetingSecurityWaitingRoomSettings) SetUsersWhoCanAdmitParticipantsFromWaitingRoom(val OptInt) {
	s.UsersWhoCanAdmitParticipantsFromWaitingRoom = val
}

// SetWhitelistedDomainsForWaitingRoom sets the value of WhitelistedDomainsForWaitingRoom.
func (s *GetGroupSettingsOK3MeetingSecurityWaitingRoomSettings) SetWhitelistedDomainsForWaitingRoom(val OptString) {
	s.WhitelistedDomainsForWaitingRoom = val
}

type GetUserMeetingTemplatesOK struct {
	// Meeting template ID.
	ID OptString `json:"id"`
	// Meeting template name.
	Name OptString `json:"name"`
	// Meeting Template settings.
	Settings OptGetUserMeetingTemplatesOKSettings `json:"settings"`
}

// GetID returns the value of ID.
func (s *GetUserMeetingTemplatesOK) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *GetUserMeetingTemplatesOK) GetName() OptString {
	return s.Name
}

// GetSettings returns the value of Settings.
func (s *GetUserMeetingTemplatesOK) GetSettings() OptGetUserMeetingTemplatesOKSettings {
	return s.Settings
}

// SetID sets the value of ID.
func (s *GetUserMeetingTemplatesOK) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *GetUserMeetingTemplatesOK) SetName(val OptString) {
	s.Name = val
}

// SetSettings sets the value of Settings.
func (s *GetUserMeetingTemplatesOK) SetSettings(val OptGetUserMeetingTemplatesOKSettings) {
	s.Settings = val
}

// Meeting Template settings.
type GetUserMeetingTemplatesOKSettings struct {
	InMeeting       OptGetUserMeetingTemplatesOKSettingsInMeeting       `json:"in_meeting"`
	Recording       OptGetUserMeetingTemplatesOKSettingsRecording       `json:"recording"`
	ScheduleMeeting OptGetUserMeetingTemplatesOKSettingsScheduleMeeting `json:"schedule_meeting"`
	MeetingSecurity OptGetUserMeetingTemplatesOKSettingsMeetingSecurity `json:"meeting_security"`
}

// GetInMeeting returns the value of InMeeting.
func (s *GetUserMeetingTemplatesOKSettings) GetInMeeting() OptGetUserMeetingTemplatesOKSettingsInMeeting {
	return s.InMeeting
}

// GetRecording returns the value of Recording.
func (s *GetUserMeetingTemplatesOKSettings) GetRecording() OptGetUserMeetingTemplatesOKSettingsRecording {
	return s.Recording
}

// GetScheduleMeeting returns the value of ScheduleMeeting.
func (s *GetUserMeetingTemplatesOKSettings) GetScheduleMeeting() OptGetUserMeetingTemplatesOKSettingsScheduleMeeting {
	return s.ScheduleMeeting
}

// GetMeetingSecurity returns the value of MeetingSecurity.
func (s *GetUserMeetingTemplatesOKSettings) GetMeetingSecurity() OptGetUserMeetingTemplatesOKSettingsMeetingSecurity {
	return s.MeetingSecurity
}

// SetInMeeting sets the value of InMeeting.
func (s *GetUserMeetingTemplatesOKSettings) SetInMeeting(val OptGetUserMeetingTemplatesOKSettingsInMeeting) {
	s.InMeeting = val
}

// SetRecording sets the value of Recording.
func (s *GetUserMeetingTemplatesOKSettings) SetRecording(val OptGetUserMeetingTemplatesOKSettingsRecording) {
	s.Recording = val
}

// SetScheduleMeeting sets the value of ScheduleMeeting.
func (s *GetUserMeetingTemplatesOKSettings) SetScheduleMeeting(val OptGetUserMeetingTemplatesOKSettingsScheduleMeeting) {
	s.ScheduleMeeting = val
}

// SetMeetingSecurity sets the value of MeetingSecurity.
func (s *GetUserMeetingTemplatesOKSettings) SetMeetingSecurity(val OptGetUserMeetingTemplatesOKSettingsMeetingSecurity) {
	s.MeetingSecurity = val
}

type GetUserMeetingTemplatesOKSettingsInMeeting struct {
	// Play sound when participants join or leave.
	// `host` - Heard by host only.
	// `all` - Heard by host and all attendees.
	// `none` - Disable.
	EntryExitChime OptString `json:"entry_exit_chime"`
	// Add a **Feedback** tab to the Windows Settings or Mac Preferences dialog. Enable users to provide
	// feedback to Zoom at the end of the meeting.
	Feedback OptBool `json:"feedback"`
	// Add 'Polls' to the meeting controls. This allows the host to survey the attendees.
	Polling OptBool `json:"polling"`
	// Whether to display a thumbs up or thumbs down feedback survey at the end of each meeting.
	PostMeetingFeedback OptBool `json:"post_meeting_feedback"`
	// Whether to allow hosts and participants to share their screen or content during meetings.
	ScreenSharing OptBool `json:"screen_sharing"`
	// The type of user who can share their screen or content during meetings.
	// * `host` - Only hosts can screen share.
	// * `all` - Both hosts and participants can screen share.
	WhoCanShareScreen OptString `json:"who_can_share_screen"`
	// Indicates who is allowed to start sharing screen when someone else in the meeting is sharing their
	// screen. The value can be one of the following:
	// `host`: Only a host can share the screen when someone else is sharing.
	// `all`: Anyone in the meeting is allowed to start sharing their screen when someone else is sharing.
	//  For Webinar, the hosts and panelists can start screen sharing, but not the attendees.
	WhoCanShareScreenWhenSomeoneIsSharing OptString `json:"who_can_share_screen_when_someone_is_sharing"`
	// Whether the **Disable desktop screen sharing for meetings you host** setting is enabled.
	DisableScreenSharingForHostMeetings OptBool `json:"disable_screen_sharing_for_host_meetings"`
	// Allow participants to use annotation tools to add information to shared screens.
	Annotation OptBool `json:"annotation"`
	// Allow participants to share a whiteboard that includes annotation tools.
	Whiteboard OptBool `json:"whiteboard"`
	// Whether to enable the [**Remote control**](https://support.zoom.
	// us/hc/en-us/articles/201362673-Requesting-or-giving-remote-control) setting.
	RemoteControl OptBool `json:"remote_control"`
	// Allow participants in a meeting to provide nonverbal feedback and express opinions by clicking on
	// icons in the Participants panel.
	NonVerbalFeedback OptBool `json:"non_verbal_feedback"`
	// If the value of this field is set to `true`, meeting participants and webinar panelists are
	// allowed to rename themselves during a meeting or a webinar.
	AllowParticipantsToRename OptBool `json:"allow_participants_to_rename"`
	// Allow the meeting host to split meeting participants into separate breakout rooms.
	BreakoutRoom OptBool `json:"breakout_room"`
	// Allow meeting host to provide 1:1 remote support to another participant.
	RemoteSupport OptBool `json:"remote_support"`
	// Information about manual captioning settings.
	ManualCaptioning OptGetUserMeetingTemplatesOKSettingsInMeetingManualCaptioning `json:"manual_captioning"`
	// Information about closed captioning settings.
	ClosedCaptioning OptGetUserMeetingTemplatesOKSettingsInMeetingClosedCaptioning `json:"closed_captioning"`
}

// GetEntryExitChime returns the value of EntryExitChime.
func (s *GetUserMeetingTemplatesOKSettingsInMeeting) GetEntryExitChime() OptString {
	return s.EntryExitChime
}

// GetFeedback returns the value of Feedback.
func (s *GetUserMeetingTemplatesOKSettingsInMeeting) GetFeedback() OptBool {
	return s.Feedback
}

// GetPolling returns the value of Polling.
func (s *GetUserMeetingTemplatesOKSettingsInMeeting) GetPolling() OptBool {
	return s.Polling
}

// GetPostMeetingFeedback returns the value of PostMeetingFeedback.
func (s *GetUserMeetingTemplatesOKSettingsInMeeting) GetPostMeetingFeedback() OptBool {
	return s.PostMeetingFeedback
}

// GetScreenSharing returns the value of ScreenSharing.
func (s *GetUserMeetingTemplatesOKSettingsInMeeting) GetScreenSharing() OptBool {
	return s.ScreenSharing
}

// GetWhoCanShareScreen returns the value of WhoCanShareScreen.
func (s *GetUserMeetingTemplatesOKSettingsInMeeting) GetWhoCanShareScreen() OptString {
	return s.WhoCanShareScreen
}

// GetWhoCanShareScreenWhenSomeoneIsSharing returns the value of WhoCanShareScreenWhenSomeoneIsSharing.
func (s *GetUserMeetingTemplatesOKSettingsInMeeting) GetWhoCanShareScreenWhenSomeoneIsSharing() OptString {
	return s.WhoCanShareScreenWhenSomeoneIsSharing
}

// GetDisableScreenSharingForHostMeetings returns the value of DisableScreenSharingForHostMeetings.
func (s *GetUserMeetingTemplatesOKSettingsInMeeting) GetDisableScreenSharingForHostMeetings() OptBool {
	return s.DisableScreenSharingForHostMeetings
}

// GetAnnotation returns the value of Annotation.
func (s *GetUserMeetingTemplatesOKSettingsInMeeting) GetAnnotation() OptBool {
	return s.Annotation
}

// GetWhiteboard returns the value of Whiteboard.
func (s *GetUserMeetingTemplatesOKSettingsInMeeting) GetWhiteboard() OptBool {
	return s.Whiteboard
}

// GetRemoteControl returns the value of RemoteControl.
func (s *GetUserMeetingTemplatesOKSettingsInMeeting) GetRemoteControl() OptBool {
	return s.RemoteControl
}

// GetNonVerbalFeedback returns the value of NonVerbalFeedback.
func (s *GetUserMeetingTemplatesOKSettingsInMeeting) GetNonVerbalFeedback() OptBool {
	return s.NonVerbalFeedback
}

// GetAllowParticipantsToRename returns the value of AllowParticipantsToRename.
func (s *GetUserMeetingTemplatesOKSettingsInMeeting) GetAllowParticipantsToRename() OptBool {
	return s.AllowParticipantsToRename
}

// GetBreakoutRoom returns the value of BreakoutRoom.
func (s *GetUserMeetingTemplatesOKSettingsInMeeting) GetBreakoutRoom() OptBool {
	return s.BreakoutRoom
}

// GetRemoteSupport returns the value of RemoteSupport.
func (s *GetUserMeetingTemplatesOKSettingsInMeeting) GetRemoteSupport() OptBool {
	return s.RemoteSupport
}

// GetManualCaptioning returns the value of ManualCaptioning.
func (s *GetUserMeetingTemplatesOKSettingsInMeeting) GetManualCaptioning() OptGetUserMeetingTemplatesOKSettingsInMeetingManualCaptioning {
	return s.ManualCaptioning
}

// GetClosedCaptioning returns the value of ClosedCaptioning.
func (s *GetUserMeetingTemplatesOKSettingsInMeeting) GetClosedCaptioning() OptGetUserMeetingTemplatesOKSettingsInMeetingClosedCaptioning {
	return s.ClosedCaptioning
}

// SetEntryExitChime sets the value of EntryExitChime.
func (s *GetUserMeetingTemplatesOKSettingsInMeeting) SetEntryExitChime(val OptString) {
	s.EntryExitChime = val
}

// SetFeedback sets the value of Feedback.
func (s *GetUserMeetingTemplatesOKSettingsInMeeting) SetFeedback(val OptBool) {
	s.Feedback = val
}

// SetPolling sets the value of Polling.
func (s *GetUserMeetingTemplatesOKSettingsInMeeting) SetPolling(val OptBool) {
	s.Polling = val
}

// SetPostMeetingFeedback sets the value of PostMeetingFeedback.
func (s *GetUserMeetingTemplatesOKSettingsInMeeting) SetPostMeetingFeedback(val OptBool) {
	s.PostMeetingFeedback = val
}

// SetScreenSharing sets the value of ScreenSharing.
func (s *GetUserMeetingTemplatesOKSettingsInMeeting) SetScreenSharing(val OptBool) {
	s.ScreenSharing = val
}

// SetWhoCanShareScreen sets the value of WhoCanShareScreen.
func (s *GetUserMeetingTemplatesOKSettingsInMeeting) SetWhoCanShareScreen(val OptString) {
	s.WhoCanShareScreen = val
}

// SetWhoCanShareScreenWhenSomeoneIsSharing sets the value of WhoCanShareScreenWhenSomeoneIsSharing.
func (s *GetUserMeetingTemplatesOKSettingsInMeeting) SetWhoCanShareScreenWhenSomeoneIsSharing(val OptString) {
	s.WhoCanShareScreenWhenSomeoneIsSharing = val
}

// SetDisableScreenSharingForHostMeetings sets the value of DisableScreenSharingForHostMeetings.
func (s *GetUserMeetingTemplatesOKSettingsInMeeting) SetDisableScreenSharingForHostMeetings(val OptBool) {
	s.DisableScreenSharingForHostMeetings = val
}

// SetAnnotation sets the value of Annotation.
func (s *GetUserMeetingTemplatesOKSettingsInMeeting) SetAnnotation(val OptBool) {
	s.Annotation = val
}

// SetWhiteboard sets the value of Whiteboard.
func (s *GetUserMeetingTemplatesOKSettingsInMeeting) SetWhiteboard(val OptBool) {
	s.Whiteboard = val
}

// SetRemoteControl sets the value of RemoteControl.
func (s *GetUserMeetingTemplatesOKSettingsInMeeting) SetRemoteControl(val OptBool) {
	s.RemoteControl = val
}

// SetNonVerbalFeedback sets the value of NonVerbalFeedback.
func (s *GetUserMeetingTemplatesOKSettingsInMeeting) SetNonVerbalFeedback(val OptBool) {
	s.NonVerbalFeedback = val
}

// SetAllowParticipantsToRename sets the value of AllowParticipantsToRename.
func (s *GetUserMeetingTemplatesOKSettingsInMeeting) SetAllowParticipantsToRename(val OptBool) {
	s.AllowParticipantsToRename = val
}

// SetBreakoutRoom sets the value of BreakoutRoom.
func (s *GetUserMeetingTemplatesOKSettingsInMeeting) SetBreakoutRoom(val OptBool) {
	s.BreakoutRoom = val
}

// SetRemoteSupport sets the value of RemoteSupport.
func (s *GetUserMeetingTemplatesOKSettingsInMeeting) SetRemoteSupport(val OptBool) {
	s.RemoteSupport = val
}

// SetManualCaptioning sets the value of ManualCaptioning.
func (s *GetUserMeetingTemplatesOKSettingsInMeeting) SetManualCaptioning(val OptGetUserMeetingTemplatesOKSettingsInMeetingManualCaptioning) {
	s.ManualCaptioning = val
}

// SetClosedCaptioning sets the value of ClosedCaptioning.
func (s *GetUserMeetingTemplatesOKSettingsInMeeting) SetClosedCaptioning(val OptGetUserMeetingTemplatesOKSettingsInMeetingClosedCaptioning) {
	s.ClosedCaptioning = val
}

// Information about closed captioning settings.
type GetUserMeetingTemplatesOKSettingsInMeetingClosedCaptioning struct {
	// Whether to allow live transcription service to transcribe meeting automatically.
	AutoTranscribing OptBool `json:"auto_transcribing"`
	// Whether to allow the host to type closed captions or assign a participant or 3rd-party service to
	// provide closed captioning.
	Enable OptBool `json:"enable"`
	// Whether to allow participants to save closed captions or transcripts.
	SaveCaption OptBool `json:"save_caption"`
}

// GetAutoTranscribing returns the value of AutoTranscribing.
func (s *GetUserMeetingTemplatesOKSettingsInMeetingClosedCaptioning) GetAutoTranscribing() OptBool {
	return s.AutoTranscribing
}

// GetEnable returns the value of Enable.
func (s *GetUserMeetingTemplatesOKSettingsInMeetingClosedCaptioning) GetEnable() OptBool {
	return s.Enable
}

// GetSaveCaption returns the value of SaveCaption.
func (s *GetUserMeetingTemplatesOKSettingsInMeetingClosedCaptioning) GetSaveCaption() OptBool {
	return s.SaveCaption
}

// SetAutoTranscribing sets the value of AutoTranscribing.
func (s *GetUserMeetingTemplatesOKSettingsInMeetingClosedCaptioning) SetAutoTranscribing(val OptBool) {
	s.AutoTranscribing = val
}

// SetEnable sets the value of Enable.
func (s *GetUserMeetingTemplatesOKSettingsInMeetingClosedCaptioning) SetEnable(val OptBool) {
	s.Enable = val
}

// SetSaveCaption sets the value of SaveCaption.
func (s *GetUserMeetingTemplatesOKSettingsInMeetingClosedCaptioning) SetSaveCaption(val OptBool) {
	s.SaveCaption = val
}

// Information about manual captioning settings.
type GetUserMeetingTemplatesOKSettingsInMeetingManualCaptioning struct {
	// Whether to enable Zoom's [live transcription feature](https://support.zoom.
	// us/hc/en-us/articles/207279736-Managing-closed-captioning-and-live-transcription#h_01FHGGHYJ4457H4GSZY0KM3NSB).
	AutoGeneratedCaptions OptBool `json:"auto_generated_captions"`
	// Whether the host can manually caption or let the host assign a participant to provide manual
	// captioning.
	AllowToType OptBool `json:"allow_to_type"`
	// Whether to [enable manual closed captioning](https://support.zoom.
	// us/hc/en-us/articles/207279736-Managing-closed-captioning-and-live-transcription).
	ManualCaptions OptBool `json:"manual_captions"`
	// Allow participants to save closed captions.
	SaveCaptions OptBool `json:"save_captions"`
}

// GetAutoGeneratedCaptions returns the value of AutoGeneratedCaptions.
func (s *GetUserMeetingTemplatesOKSettingsInMeetingManualCaptioning) GetAutoGeneratedCaptions() OptBool {
	return s.AutoGeneratedCaptions
}

// GetAllowToType returns the value of AllowToType.
func (s *GetUserMeetingTemplatesOKSettingsInMeetingManualCaptioning) GetAllowToType() OptBool {
	return s.AllowToType
}

// GetManualCaptions returns the value of ManualCaptions.
func (s *GetUserMeetingTemplatesOKSettingsInMeetingManualCaptioning) GetManualCaptions() OptBool {
	return s.ManualCaptions
}

// GetSaveCaptions returns the value of SaveCaptions.
func (s *GetUserMeetingTemplatesOKSettingsInMeetingManualCaptioning) GetSaveCaptions() OptBool {
	return s.SaveCaptions
}

// SetAutoGeneratedCaptions sets the value of AutoGeneratedCaptions.
func (s *GetUserMeetingTemplatesOKSettingsInMeetingManualCaptioning) SetAutoGeneratedCaptions(val OptBool) {
	s.AutoGeneratedCaptions = val
}

// SetAllowToType sets the value of AllowToType.
func (s *GetUserMeetingTemplatesOKSettingsInMeetingManualCaptioning) SetAllowToType(val OptBool) {
	s.AllowToType = val
}

// SetManualCaptions sets the value of ManualCaptions.
func (s *GetUserMeetingTemplatesOKSettingsInMeetingManualCaptioning) SetManualCaptions(val OptBool) {
	s.ManualCaptions = val
}

// SetSaveCaptions sets the value of SaveCaptions.
func (s *GetUserMeetingTemplatesOKSettingsInMeetingManualCaptioning) SetSaveCaptions(val OptBool) {
	s.SaveCaptions = val
}

type GetUserMeetingTemplatesOKSettingsMeetingSecurity struct {
	// Whether participants are placed in the [**Waiting Room**](https://support.zoom.
	// us/hc/en-us/articles/115000332726-Waiting-Room) when they join a meeting.
	// When the **Waiting Room** feature is enabled, the [**Allow participants to join before
	// host**](https://support.zoom.
	// us/hc/en-us/articles/202828525-Allow-participants-to-join-before-host) setting is disabled.
	WaitingRoom OptBool `json:"waiting_room"`
}

// GetWaitingRoom returns the value of WaitingRoom.
func (s *GetUserMeetingTemplatesOKSettingsMeetingSecurity) GetWaitingRoom() OptBool {
	return s.WaitingRoom
}

// SetWaitingRoom sets the value of WaitingRoom.
func (s *GetUserMeetingTemplatesOKSettingsMeetingSecurity) SetWaitingRoom(val OptBool) {
	s.WaitingRoom = val
}

type GetUserMeetingTemplatesOKSettingsRecording struct {
	// Automatic recording:
	// `local` - Record on local.
	// `cloud` -  Record on cloud.
	// `none` - Disabled.
	AutoRecording OptString `json:"auto_recording"`
}

// GetAutoRecording returns the value of AutoRecording.
func (s *GetUserMeetingTemplatesOKSettingsRecording) GetAutoRecording() OptString {
	return s.AutoRecording
}

// SetAutoRecording sets the value of AutoRecording.
func (s *GetUserMeetingTemplatesOKSettingsRecording) SetAutoRecording(val OptString) {
	s.AutoRecording = val
}

type GetUserMeetingTemplatesOKSettingsScheduleMeeting struct {
	// Start meetings with host video on.
	HostVideo OptBool `json:"host_video"`
	// Start meetings with the participant video on. Participants can change this setting during the
	// meeting.
	ParticipantVideo OptBool `json:"participant_video"`
	// Mute participants upon entry.
	MuteUponEntry OptBool `json:"mute_upon_entry"`
}

// GetHostVideo returns the value of HostVideo.
func (s *GetUserMeetingTemplatesOKSettingsScheduleMeeting) GetHostVideo() OptBool {
	return s.HostVideo
}

// GetParticipantVideo returns the value of ParticipantVideo.
func (s *GetUserMeetingTemplatesOKSettingsScheduleMeeting) GetParticipantVideo() OptBool {
	return s.ParticipantVideo
}

// GetMuteUponEntry returns the value of MuteUponEntry.
func (s *GetUserMeetingTemplatesOKSettingsScheduleMeeting) GetMuteUponEntry() OptBool {
	return s.MuteUponEntry
}

// SetHostVideo sets the value of HostVideo.
func (s *GetUserMeetingTemplatesOKSettingsScheduleMeeting) SetHostVideo(val OptBool) {
	s.HostVideo = val
}

// SetParticipantVideo sets the value of ParticipantVideo.
func (s *GetUserMeetingTemplatesOKSettingsScheduleMeeting) SetParticipantVideo(val OptBool) {
	s.ParticipantVideo = val
}

// SetMuteUponEntry sets the value of MuteUponEntry.
func (s *GetUserMeetingTemplatesOKSettingsScheduleMeeting) SetMuteUponEntry(val OptBool) {
	s.MuteUponEntry = val
}

// The presence status object.
// GetUserPresenceStatusOK represents sum type.
type GetUserPresenceStatusOK struct {
	Type                     GetUserPresenceStatusOKType // switch on this field
	GetUserPresenceStatusOK0 GetUserPresenceStatusOK0
	GetUserPresenceStatusOK1 GetUserPresenceStatusOK1
}

// GetUserPresenceStatusOKType is oneOf type of GetUserPresenceStatusOK.
type GetUserPresenceStatusOKType string

// Possible values for GetUserPresenceStatusOKType.
const (
	GetUserPresenceStatusOK0GetUserPresenceStatusOK GetUserPresenceStatusOKType = "GetUserPresenceStatusOK0"
	GetUserPresenceStatusOK1GetUserPresenceStatusOK GetUserPresenceStatusOKType = "GetUserPresenceStatusOK1"
)

// IsGetUserPresenceStatusOK0 reports whether GetUserPresenceStatusOK is GetUserPresenceStatusOK0.
func (s GetUserPresenceStatusOK) IsGetUserPresenceStatusOK0() bool {
	return s.Type == GetUserPresenceStatusOK0GetUserPresenceStatusOK
}

// IsGetUserPresenceStatusOK1 reports whether GetUserPresenceStatusOK is GetUserPresenceStatusOK1.
func (s GetUserPresenceStatusOK) IsGetUserPresenceStatusOK1() bool {
	return s.Type == GetUserPresenceStatusOK1GetUserPresenceStatusOK
}

// SetGetUserPresenceStatusOK0 sets GetUserPresenceStatusOK to GetUserPresenceStatusOK0.
func (s *GetUserPresenceStatusOK) SetGetUserPresenceStatusOK0(v GetUserPresenceStatusOK0) {
	s.Type = GetUserPresenceStatusOK0GetUserPresenceStatusOK
	s.GetUserPresenceStatusOK0 = v
}

// GetGetUserPresenceStatusOK0 returns GetUserPresenceStatusOK0 and true boolean if GetUserPresenceStatusOK is GetUserPresenceStatusOK0.
func (s GetUserPresenceStatusOK) GetGetUserPresenceStatusOK0() (v GetUserPresenceStatusOK0, ok bool) {
	if !s.IsGetUserPresenceStatusOK0() {
		return v, false
	}
	return s.GetUserPresenceStatusOK0, true
}

// NewGetUserPresenceStatusOK0GetUserPresenceStatusOK returns new GetUserPresenceStatusOK from GetUserPresenceStatusOK0.
func NewGetUserPresenceStatusOK0GetUserPresenceStatusOK(v GetUserPresenceStatusOK0) GetUserPresenceStatusOK {
	var s GetUserPresenceStatusOK
	s.SetGetUserPresenceStatusOK0(v)
	return s
}

// SetGetUserPresenceStatusOK1 sets GetUserPresenceStatusOK to GetUserPresenceStatusOK1.
func (s *GetUserPresenceStatusOK) SetGetUserPresenceStatusOK1(v GetUserPresenceStatusOK1) {
	s.Type = GetUserPresenceStatusOK1GetUserPresenceStatusOK
	s.GetUserPresenceStatusOK1 = v
}

// GetGetUserPresenceStatusOK1 returns GetUserPresenceStatusOK1 and true boolean if GetUserPresenceStatusOK is GetUserPresenceStatusOK1.
func (s GetUserPresenceStatusOK) GetGetUserPresenceStatusOK1() (v GetUserPresenceStatusOK1, ok bool) {
	if !s.IsGetUserPresenceStatusOK1() {
		return v, false
	}
	return s.GetUserPresenceStatusOK1, true
}

// NewGetUserPresenceStatusOK1GetUserPresenceStatusOK returns new GetUserPresenceStatusOK from GetUserPresenceStatusOK1.
func NewGetUserPresenceStatusOK1GetUserPresenceStatusOK(v GetUserPresenceStatusOK1) GetUserPresenceStatusOK {
	var s GetUserPresenceStatusOK
	s.SetGetUserPresenceStatusOK1(v)
	return s
}

// For the case that the user queries for self and presence status is `Do_Not_Disturb`.
type GetUserPresenceStatusOK0 struct {
	// The user's presence status in the Zoom Chat client. The status has to be `Do_Not_Disturb`.
	Status string `json:"status"`
	// The Do_Not_Disturb end date and time (UTC Time Zone).
	EndTime string `json:"end_time"`
	// The remaining time for `Do_Not_Disturb` status to end in seconds.
	RemainingTime float64 `json:"remaining_time"`
}

// GetStatus returns the value of Status.
func (s *GetUserPresenceStatusOK0) GetStatus() string {
	return s.Status
}

// GetEndTime returns the value of EndTime.
func (s *GetUserPresenceStatusOK0) GetEndTime() string {
	return s.EndTime
}

// GetRemainingTime returns the value of RemainingTime.
func (s *GetUserPresenceStatusOK0) GetRemainingTime() float64 {
	return s.RemainingTime
}

// SetStatus sets the value of Status.
func (s *GetUserPresenceStatusOK0) SetStatus(val string) {
	s.Status = val
}

// SetEndTime sets the value of EndTime.
func (s *GetUserPresenceStatusOK0) SetEndTime(val string) {
	s.EndTime = val
}

// SetRemainingTime sets the value of RemainingTime.
func (s *GetUserPresenceStatusOK0) SetRemainingTime(val float64) {
	s.RemainingTime = val
}

// For the following cases: 1) if the user queries for self and the presence status is not
// `Do_Not_Disturb`; or 2) if user queries for other users.
type GetUserPresenceStatusOK1 struct {
	// The user's presence status in the Zoom Chat client. The status can be one of the following:
	// `Away`    `Available`    `Offline`    `In_A_Meeting`    `In_A_Call`    `In_A_Calendar_Event`
	// `Presenting`    `Out_of_Office`    `Busy`    `Do_Not_Disturb`.
	Status string `json:"status"`
}

// GetStatus returns the value of Status.
func (s *GetUserPresenceStatusOK1) GetStatus() string {
	return s.Status
}

// SetStatus sets the value of Status.
func (s *GetUserPresenceStatusOK1) SetStatus(val string) {
	s.Status = val
}

type GroupAdminsCreateCreated struct {
	// The timestamp at which the administrator was added to the group.
	AddedAt OptDateTime `json:"added_at"`
	// The administrator IDs.
	Ids OptString `json:"ids"`
}

// GetAddedAt returns the value of AddedAt.
func (s *GroupAdminsCreateCreated) GetAddedAt() OptDateTime {
	return s.AddedAt
}

// GetIds returns the value of Ids.
func (s *GroupAdminsCreateCreated) GetIds() OptString {
	return s.Ids
}

// SetAddedAt sets the value of AddedAt.
func (s *GroupAdminsCreateCreated) SetAddedAt(val OptDateTime) {
	s.AddedAt = val
}

// SetIds sets the value of Ids.
func (s *GroupAdminsCreateCreated) SetIds(val OptString) {
	s.Ids = val
}

func (*GroupAdminsCreateCreated) groupAdminsCreateRes() {}

// GroupAdminsCreateOK is response for GroupAdminsCreate operation.
type GroupAdminsCreateOK struct{}

func (*GroupAdminsCreateOK) groupAdminsCreateRes() {}

type GroupAdminsCreateReq struct {
	// A list of the administrators to add to a group.
	Admins []GroupAdminsCreateReqAdminsItem `json:"admins"`
}

// GetAdmins returns the value of Admins.
func (s *GroupAdminsCreateReq) GetAdmins() []GroupAdminsCreateReqAdminsItem {
	return s.Admins
}

// SetAdmins sets the value of Admins.
func (s *GroupAdminsCreateReq) SetAdmins(val []GroupAdminsCreateReqAdminsItem) {
	s.Admins = val
}

type GroupAdminsCreateReqAdminsItem struct {
	// The user's email. Use this value if you do not have the user's ID.
	// If you pass the `id` value, the API ignores this parameter.
	Email OptString `json:"email"`
	// The user's ID.
	ID OptString `json:"id"`
}

// GetEmail returns the value of Email.
func (s *GroupAdminsCreateReqAdminsItem) GetEmail() OptString {
	return s.Email
}

// GetID returns the value of ID.
func (s *GroupAdminsCreateReqAdminsItem) GetID() OptString {
	return s.ID
}

// SetEmail sets the value of Email.
func (s *GroupAdminsCreateReqAdminsItem) SetEmail(val OptString) {
	s.Email = val
}

// SetID sets the value of ID.
func (s *GroupAdminsCreateReqAdminsItem) SetID(val OptString) {
	s.ID = val
}

// GroupAdminsDeleteNoContent is response for GroupAdminsDelete operation.
type GroupAdminsDeleteNoContent struct{}

func (*GroupAdminsDeleteNoContent) groupAdminsDeleteRes() {}

// GroupAdminsDeleteOK is response for GroupAdminsDelete operation.
type GroupAdminsDeleteOK struct{}

func (*GroupAdminsDeleteOK) groupAdminsDeleteRes() {}

type GroupAdminsOK struct {
	Admins []GroupAdminsOKAdminsItem `json:"admins"`
	// The next page token is used to paginate through large result sets. A next page token is returned
	// when the set of available results exceeds the current page size. The expiration period for this
	// token is 15 minutes.
	NextPageToken OptString `json:"next_page_token"`
	// The number of records returned in a single API call.
	PageSize OptInt `json:"page_size"`
	// The total number of records available across all pages.
	TotalRecords OptInt `json:"total_records"`
}

// GetAdmins returns the value of Admins.
func (s *GroupAdminsOK) GetAdmins() []GroupAdminsOKAdminsItem {
	return s.Admins
}

// GetNextPageToken returns the value of NextPageToken.
func (s *GroupAdminsOK) GetNextPageToken() OptString {
	return s.NextPageToken
}

// GetPageSize returns the value of PageSize.
func (s *GroupAdminsOK) GetPageSize() OptInt {
	return s.PageSize
}

// GetTotalRecords returns the value of TotalRecords.
func (s *GroupAdminsOK) GetTotalRecords() OptInt {
	return s.TotalRecords
}

// SetAdmins sets the value of Admins.
func (s *GroupAdminsOK) SetAdmins(val []GroupAdminsOKAdminsItem) {
	s.Admins = val
}

// SetNextPageToken sets the value of NextPageToken.
func (s *GroupAdminsOK) SetNextPageToken(val OptString) {
	s.NextPageToken = val
}

// SetPageSize sets the value of PageSize.
func (s *GroupAdminsOK) SetPageSize(val OptInt) {
	s.PageSize = val
}

// SetTotalRecords sets the value of TotalRecords.
func (s *GroupAdminsOK) SetTotalRecords(val OptInt) {
	s.TotalRecords = val
}

type GroupAdminsOKAdminsItem struct {
	// The user's email address.
	Email OptString `json:"email"`
	// The user's display name.
	Name OptString `json:"name"`
}

// GetEmail returns the value of Email.
func (s *GroupAdminsOKAdminsItem) GetEmail() OptString {
	return s.Email
}

// GetName returns the value of Name.
func (s *GroupAdminsOKAdminsItem) GetName() OptString {
	return s.Name
}

// SetEmail sets the value of Email.
func (s *GroupAdminsOKAdminsItem) SetEmail(val OptString) {
	s.Email = val
}

// SetName sets the value of Name.
func (s *GroupAdminsOKAdminsItem) SetName(val OptString) {
	s.Name = val
}

type GroupChannelsOK struct {
	// The channels in a group.
	Channels []GroupChannelsOKChannelsItem `json:"channels"`
	// The unique identifier of the group.
	GroupID string `json:"group_id"`
}

// GetChannels returns the value of Channels.
func (s *GroupChannelsOK) GetChannels() []GroupChannelsOKChannelsItem {
	return s.Channels
}

// GetGroupID returns the value of GroupID.
func (s *GroupChannelsOK) GetGroupID() string {
	return s.GroupID
}

// SetChannels sets the value of Channels.
func (s *GroupChannelsOK) SetChannels(val []GroupChannelsOKChannelsItem) {
	s.Channels = val
}

// SetGroupID sets the value of GroupID.
func (s *GroupChannelsOK) SetGroupID(val string) {
	s.GroupID = val
}

type GroupChannelsOKChannelsItem struct {
	// The unique identifier of the channel.
	ChannelID string `json:"channel_id"`
	// The name of the channel.
	ChannelName string `json:"channel_name"`
	// The member number of the channel.
	MemberCount int `json:"member_count"`
}

// GetChannelID returns the value of ChannelID.
func (s *GroupChannelsOKChannelsItem) GetChannelID() string {
	return s.ChannelID
}

// GetChannelName returns the value of ChannelName.
func (s *GroupChannelsOKChannelsItem) GetChannelName() string {
	return s.ChannelName
}

// GetMemberCount returns the value of MemberCount.
func (s *GroupChannelsOKChannelsItem) GetMemberCount() int {
	return s.MemberCount
}

// SetChannelID sets the value of ChannelID.
func (s *GroupChannelsOKChannelsItem) SetChannelID(val string) {
	s.ChannelID = val
}

// SetChannelName sets the value of ChannelName.
func (s *GroupChannelsOKChannelsItem) SetChannelName(val string) {
	s.ChannelName = val
}

// SetMemberCount sets the value of MemberCount.
func (s *GroupChannelsOKChannelsItem) SetMemberCount(val int) {
	s.MemberCount = val
}

type GroupCreateCreated struct {
	// The group ID.
	ID OptString `json:"id"`
	// The group's name.
	Name OptString `json:"name"`
	// The group's total member count.
	TotalMembers OptInt `json:"total_members"`
}

// GetID returns the value of ID.
func (s *GroupCreateCreated) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *GroupCreateCreated) GetName() OptString {
	return s.Name
}

// GetTotalMembers returns the value of TotalMembers.
func (s *GroupCreateCreated) GetTotalMembers() OptInt {
	return s.TotalMembers
}

// SetID sets the value of ID.
func (s *GroupCreateCreated) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *GroupCreateCreated) SetName(val OptString) {
	s.Name = val
}

// SetTotalMembers sets the value of TotalMembers.
func (s *GroupCreateCreated) SetTotalMembers(val OptInt) {
	s.TotalMembers = val
}

func (*GroupCreateCreated) groupCreateRes() {}

// GroupCreateOK is response for GroupCreate operation.
type GroupCreateOK struct{}

func (*GroupCreateOK) groupCreateRes() {}

type GroupCreateReq struct {
	// The group's name.
	Name OptString `json:"name"`
}

// GetName returns the value of Name.
func (s *GroupCreateReq) GetName() OptString {
	return s.Name
}

// SetName sets the value of Name.
func (s *GroupCreateReq) SetName(val OptString) {
	s.Name = val
}

// GroupDeleteNoContent is response for GroupDelete operation.
type GroupDeleteNoContent struct{}

// GroupLockedSettingsNoContent is response for GroupLockedSettings operation.
type GroupLockedSettingsNoContent struct{}

// GroupLockedSettingsReq represents sum type.
type GroupLockedSettingsReq struct {
	Type                    GroupLockedSettingsReqType // switch on this field
	GroupLockedSettingsReq0 GroupLockedSettingsReq0
	GroupLockedSettingsReq1 GroupLockedSettingsReq1
}

// GroupLockedSettingsReqType is oneOf type of GroupLockedSettingsReq.
type GroupLockedSettingsReqType string

// Possible values for GroupLockedSettingsReqType.
const (
	GroupLockedSettingsReq0GroupLockedSettingsReq GroupLockedSettingsReqType = "GroupLockedSettingsReq0"
	GroupLockedSettingsReq1GroupLockedSettingsReq GroupLockedSettingsReqType = "GroupLockedSettingsReq1"
)

// IsGroupLockedSettingsReq0 reports whether GroupLockedSettingsReq is GroupLockedSettingsReq0.
func (s GroupLockedSettingsReq) IsGroupLockedSettingsReq0() bool {
	return s.Type == GroupLockedSettingsReq0GroupLockedSettingsReq
}

// IsGroupLockedSettingsReq1 reports whether GroupLockedSettingsReq is GroupLockedSettingsReq1.
func (s GroupLockedSettingsReq) IsGroupLockedSettingsReq1() bool {
	return s.Type == GroupLockedSettingsReq1GroupLockedSettingsReq
}

// SetGroupLockedSettingsReq0 sets GroupLockedSettingsReq to GroupLockedSettingsReq0.
func (s *GroupLockedSettingsReq) SetGroupLockedSettingsReq0(v GroupLockedSettingsReq0) {
	s.Type = GroupLockedSettingsReq0GroupLockedSettingsReq
	s.GroupLockedSettingsReq0 = v
}

// GetGroupLockedSettingsReq0 returns GroupLockedSettingsReq0 and true boolean if GroupLockedSettingsReq is GroupLockedSettingsReq0.
func (s GroupLockedSettingsReq) GetGroupLockedSettingsReq0() (v GroupLockedSettingsReq0, ok bool) {
	if !s.IsGroupLockedSettingsReq0() {
		return v, false
	}
	return s.GroupLockedSettingsReq0, true
}

// NewGroupLockedSettingsReq0GroupLockedSettingsReq returns new GroupLockedSettingsReq from GroupLockedSettingsReq0.
func NewGroupLockedSettingsReq0GroupLockedSettingsReq(v GroupLockedSettingsReq0) GroupLockedSettingsReq {
	var s GroupLockedSettingsReq
	s.SetGroupLockedSettingsReq0(v)
	return s
}

// SetGroupLockedSettingsReq1 sets GroupLockedSettingsReq to GroupLockedSettingsReq1.
func (s *GroupLockedSettingsReq) SetGroupLockedSettingsReq1(v GroupLockedSettingsReq1) {
	s.Type = GroupLockedSettingsReq1GroupLockedSettingsReq
	s.GroupLockedSettingsReq1 = v
}

// GetGroupLockedSettingsReq1 returns GroupLockedSettingsReq1 and true boolean if GroupLockedSettingsReq is GroupLockedSettingsReq1.
func (s GroupLockedSettingsReq) GetGroupLockedSettingsReq1() (v GroupLockedSettingsReq1, ok bool) {
	if !s.IsGroupLockedSettingsReq1() {
		return v, false
	}
	return s.GroupLockedSettingsReq1, true
}

// NewGroupLockedSettingsReq1GroupLockedSettingsReq returns new GroupLockedSettingsReq from GroupLockedSettingsReq1.
func NewGroupLockedSettingsReq1GroupLockedSettingsReq(v GroupLockedSettingsReq1) GroupLockedSettingsReq {
	var s GroupLockedSettingsReq
	s.SetGroupLockedSettingsReq1(v)
	return s
}

type GroupLockedSettingsReq0 struct {
	AudioConferencing OptGroupLockedSettingsReq0AudioConferencing `json:"audio_conferencing"`
	EmailNotification OptGroupLockedSettingsReq0EmailNotification `json:"email_notification"`
	InMeeting         OptGroupLockedSettingsReq0InMeeting         `json:"in_meeting"`
	OtherOptions      OptGroupLockedSettingsReq0OtherOptions      `json:"other_options"`
	Recording         OptGroupLockedSettingsReq0Recording         `json:"recording"`
	ScheduleMeeting   OptGroupLockedSettingsReq0ScheduleMeeting   `json:"schedule_meeting"`
	Telephony         OptGroupLockedSettingsReq0Telephony         `json:"telephony"`
}

// GetAudioConferencing returns the value of AudioConferencing.
func (s *GroupLockedSettingsReq0) GetAudioConferencing() OptGroupLockedSettingsReq0AudioConferencing {
	return s.AudioConferencing
}

// GetEmailNotification returns the value of EmailNotification.
func (s *GroupLockedSettingsReq0) GetEmailNotification() OptGroupLockedSettingsReq0EmailNotification {
	return s.EmailNotification
}

// GetInMeeting returns the value of InMeeting.
func (s *GroupLockedSettingsReq0) GetInMeeting() OptGroupLockedSettingsReq0InMeeting {
	return s.InMeeting
}

// GetOtherOptions returns the value of OtherOptions.
func (s *GroupLockedSettingsReq0) GetOtherOptions() OptGroupLockedSettingsReq0OtherOptions {
	return s.OtherOptions
}

// GetRecording returns the value of Recording.
func (s *GroupLockedSettingsReq0) GetRecording() OptGroupLockedSettingsReq0Recording {
	return s.Recording
}

// GetScheduleMeeting returns the value of ScheduleMeeting.
func (s *GroupLockedSettingsReq0) GetScheduleMeeting() OptGroupLockedSettingsReq0ScheduleMeeting {
	return s.ScheduleMeeting
}

// GetTelephony returns the value of Telephony.
func (s *GroupLockedSettingsReq0) GetTelephony() OptGroupLockedSettingsReq0Telephony {
	return s.Telephony
}

// SetAudioConferencing sets the value of AudioConferencing.
func (s *GroupLockedSettingsReq0) SetAudioConferencing(val OptGroupLockedSettingsReq0AudioConferencing) {
	s.AudioConferencing = val
}

// SetEmailNotification sets the value of EmailNotification.
func (s *GroupLockedSettingsReq0) SetEmailNotification(val OptGroupLockedSettingsReq0EmailNotification) {
	s.EmailNotification = val
}

// SetInMeeting sets the value of InMeeting.
func (s *GroupLockedSettingsReq0) SetInMeeting(val OptGroupLockedSettingsReq0InMeeting) {
	s.InMeeting = val
}

// SetOtherOptions sets the value of OtherOptions.
func (s *GroupLockedSettingsReq0) SetOtherOptions(val OptGroupLockedSettingsReq0OtherOptions) {
	s.OtherOptions = val
}

// SetRecording sets the value of Recording.
func (s *GroupLockedSettingsReq0) SetRecording(val OptGroupLockedSettingsReq0Recording) {
	s.Recording = val
}

// SetScheduleMeeting sets the value of ScheduleMeeting.
func (s *GroupLockedSettingsReq0) SetScheduleMeeting(val OptGroupLockedSettingsReq0ScheduleMeeting) {
	s.ScheduleMeeting = val
}

// SetTelephony sets the value of Telephony.
func (s *GroupLockedSettingsReq0) SetTelephony(val OptGroupLockedSettingsReq0Telephony) {
	s.Telephony = val
}

type GroupLockedSettingsReq0AudioConferencing struct {
	// Whether the group has the [**Toll-free and Fee-based Toll Call**](https://support.zoom.
	// us/hc/en-us/articles/360060950711-Enabling-Toll-free-and-Fee-based-Toll-Call#h_01F51844DRCX3K7BRTMZ40381R) setting enabled.
	TollFreeAndFeeBasedTollCall OptBool `json:"toll_free_and_fee_based_toll_call"`
}

// GetTollFreeAndFeeBasedTollCall returns the value of TollFreeAndFeeBasedTollCall.
func (s *GroupLockedSettingsReq0AudioConferencing) GetTollFreeAndFeeBasedTollCall() OptBool {
	return s.TollFreeAndFeeBasedTollCall
}

// SetTollFreeAndFeeBasedTollCall sets the value of TollFreeAndFeeBasedTollCall.
func (s *GroupLockedSettingsReq0AudioConferencing) SetTollFreeAndFeeBasedTollCall(val OptBool) {
	s.TollFreeAndFeeBasedTollCall = val
}

type GroupLockedSettingsReq0EmailNotification struct {
	// Notify the alternative host who is set or removed.
	AlternativeHostReminder OptBool `json:"alternative_host_reminder"`
	// Notify host and participants when the meeting is cancelled.
	CancelMeetingReminder OptBool `json:"cancel_meeting_reminder"`
	// Whether to notify the host when a cloud recording is available.
	CloudRecordingAvailableReminder OptBool `json:"cloud_recording_available_reminder"`
	// Notify the host when participants join the meeting before them.
	JbhReminder OptBool `json:"jbh_reminder"`
	// Notify the host there is a meeting is scheduled, rescheduled, or cancelled.
	ScheduleForReminder OptBool `json:"schedule_for_reminder"`
}

// GetAlternativeHostReminder returns the value of AlternativeHostReminder.
func (s *GroupLockedSettingsReq0EmailNotification) GetAlternativeHostReminder() OptBool {
	return s.AlternativeHostReminder
}

// GetCancelMeetingReminder returns the value of CancelMeetingReminder.
func (s *GroupLockedSettingsReq0EmailNotification) GetCancelMeetingReminder() OptBool {
	return s.CancelMeetingReminder
}

// GetCloudRecordingAvailableReminder returns the value of CloudRecordingAvailableReminder.
func (s *GroupLockedSettingsReq0EmailNotification) GetCloudRecordingAvailableReminder() OptBool {
	return s.CloudRecordingAvailableReminder
}

// GetJbhReminder returns the value of JbhReminder.
func (s *GroupLockedSettingsReq0EmailNotification) GetJbhReminder() OptBool {
	return s.JbhReminder
}

// GetScheduleForReminder returns the value of ScheduleForReminder.
func (s *GroupLockedSettingsReq0EmailNotification) GetScheduleForReminder() OptBool {
	return s.ScheduleForReminder
}

// SetAlternativeHostReminder sets the value of AlternativeHostReminder.
func (s *GroupLockedSettingsReq0EmailNotification) SetAlternativeHostReminder(val OptBool) {
	s.AlternativeHostReminder = val
}

// SetCancelMeetingReminder sets the value of CancelMeetingReminder.
func (s *GroupLockedSettingsReq0EmailNotification) SetCancelMeetingReminder(val OptBool) {
	s.CancelMeetingReminder = val
}

// SetCloudRecordingAvailableReminder sets the value of CloudRecordingAvailableReminder.
func (s *GroupLockedSettingsReq0EmailNotification) SetCloudRecordingAvailableReminder(val OptBool) {
	s.CloudRecordingAvailableReminder = val
}

// SetJbhReminder sets the value of JbhReminder.
func (s *GroupLockedSettingsReq0EmailNotification) SetJbhReminder(val OptBool) {
	s.JbhReminder = val
}

// SetScheduleForReminder sets the value of ScheduleForReminder.
func (s *GroupLockedSettingsReq0EmailNotification) SetScheduleForReminder(val OptBool) {
	s.ScheduleForReminder = val
}

type GroupLockedSettingsReq0InMeeting struct {
	// Allow participants who belong to your account to see that a guest (someone who does not belong to
	// your account) is participating in the meeting/webinar.
	AlertGuestJoin OptBool `json:"alert_guest_join"`
	// If the value of this field is set to `true`,  allow users to delete messages in the in-meeting
	// chat.
	AllowUsersToDeleteMessagesInMeetingChat OptBool `json:"allow_users_to_delete_messages_in_meeting_chat"`
	// Whether to allow livestreaming.
	AllowLiveStreaming OptBool `json:"allow_live_streaming"`
	// Show Zoom windows during screen share.
	AllowShowZoomWindows OptBool `json:"allow_show_zoom_windows"`
	// Allow participants to use annotation tools to add information to shared screens.
	Annotation OptBool `json:"annotation"`
	// Allow host to put attendee on hold.
	// **This field has been deprecated and is no longer supported.**.
	AttendeeOnHold OptBool `json:"attendee_on_hold"`
	// Enable users to see and add contacts to 'auto-answer group' in the contact list on chat. Any call
	// from members of this group will be automatically answered.
	AutoAnswer OptBool `json:"auto_answer"`
	// Whether to allow a live transcription service to transcribe meetings.
	AutoGeneratedCaptions OptBool `json:"auto_generated_captions"`
	// Automatically save all in-meeting chats.
	AutoSavingChat OptBool `json:"auto_saving_chat"`
	// Allow host to split meeting participants into separate, smaller rooms.
	BreakoutRoom OptBool `json:"breakout_room"`
	// Allow meeting participants to send chat message visible to all participants.
	Chat OptBool `json:"chat"`
	// Allow participants to ask questions for the host and participants to answer.
	MeetingQuestionAnswer OptBool `json:"meeting_question_answer"`
	// Allow host to type closed captions or assign a participant/third party device to add closed
	// captions.
	ClosedCaption OptBool `json:"closed_caption"`
	// Allow the host to add co-hosts. Co-hosts have the same in-meeting controls as the host.
	CoHost OptBool `json:"co_host"`
	// Displays whether or not custom [data center regions](https://support.zoom.
	// us/hc/en-us/articles/360042411451-Selecting-data-center-regions-for-hosted-meetings-and-webinars)
	// have been selected for meetings/webinars hosted by this group.
	CustomDataCenterRegions OptBool `json:"custom_data_center_regions"`
	// Whether to enable the **Disable desktop screen sharing for meetings you host** setting.
	DisableScreenSharingForHostMeetings OptBool `json:"disable_screen_sharing_for_host_meetings"`
	// Whether to enable the **Disable screen sharing when guests are in the meeting** setting.
	DisableScreenSharingForInMeetingGuests OptBool `json:"disable_screen_sharing_for_in_meeting_guests"`
	// Require that all meetings are encrypted using AES.
	E2eEncryption OptBool `json:"e2e_encryption"`
	// Play sound when participants join or leave.
	EntryExitChime OptString `json:"entry_exit_chime"`
	// Allow another user to take control of the camera during a meeting.
	FarEndCameraControl OptBool `json:"far_end_camera_control"`
	// Enable users to provide feedback to Zoom at the end of the meeting.
	Feedback OptBool `json:"feedback"`
	// Indicates whether [in-meeting file transfer](https://support.zoom.
	// us/hc/en-us/articles/209605493-In-meeting-file-transfer) setting has been enabled for the users in
	// the group or not.
	FileTransfer OptBool `json:"file_transfer"`
	// Whether to allow the viewing of full transcripts in the in-meeting side panel.
	FullTranscript OptBool `json:"full_transcript"`
	// Enable higher quality video for host and participants in the meeting. This will require more
	// bandwidth.
	GroupHd OptBool `json:"group_hd"`
	// Enable higher quality video for host and participants in the webinar. This will require more
	// bandwidth.
	WebinarGroupHd OptBool `json:"webinar_group_hd"`
	// Whether to allow hosts to assign participants as interpreters who can interpret one language into
	// another in real-time.
	LanguageInterpretation OptBool `json:"language_interpretation"`
	// Allow hosts to assign participants as sign language interpreters who can interpret one language
	// into sign language in real-time. Hosts can assign interpreters when scheduling, or during the
	// meeting itself. This feature is only available with version 5.11.3 or later.
	SignLanguageInterpretation OptBool `json:"sign_language_interpretation"`
	// Set this field to true to use [webinar reactions](https://support.zoom.
	// us/hc/en-us/articles/4803536268429).
	WebinarReactions OptBool `json:"webinar_reactions"`
	// Whether to allow the host to present a survey to participants once a meeting has ended. This
	// feature is only available in version 5.7.3 or higher.
	MeetingSurvey OptBool `json:"meeting_survey"`
	// Allow participants in a meeting can provide nonverbal feedback and express opinions by clicking on
	// icons in the Participants panel.
	NonVerbalFeedback OptBool `json:"non_verbal_feedback"`
	// Allow users to select original sound during a meeting.
	OriginalAudio OptBool `json:"original_audio"`
	// Add 'Polls' to the meeting controls. This allows the host to survey the attendees.
	Polling OptBool `json:"polling"`
	// Display end-of-meeting experience feedback survey.
	PostMeetingFeedback OptBool `json:"post_meeting_feedback"`
	// Allow meeting participants to send a private 1:1 message to another participant.
	PrivateChat OptBool `json:"private_chat"`
	// During screen sharing, allow the person who is sharing to let others control the shared content.
	RemoteControl OptBool `json:"remote_control"`
	// Allow meeting host to provide 1:1 remote support to another participant.
	RemoteSupport OptBool `json:"remote_support"`
	// Indicate whether the [**Request permission to unmute participants**](https://support.zoom.
	// us/hc/en-us/articles/203435537-Muting-and-unmuting-participants-in-a-meeting#h_01EGK4XFWS1SJGZ71MYGKF7260) option should be enabled and locked for the group or not.
	RequestPermissionToUnmuteParticipants OptBool `json:"request_permission_to_unmute_participants"`
	// Whether to allow participants to save closed captions or transcripts.
	SaveCaption OptBool `json:"save_caption"`
	// Whether participants can save closed captions or transcripts.
	SaveCaptions OptBool `json:"save_captions"`
	// Allow host and participants to share their screen or content during meetings.
	ScreenSharing OptBool `json:"screen_sharing"`
	// Allow users to invite participants by email only by default.
	SendingDefaultEmailInvites OptBool `json:"sending_default_email_invites"`
	// Whether to allow participants to join a meeting directly from their browser and bypass the Zoom
	// application download process. This is useful for participants who cannot download, install, or run
	// applications. Note that the meeting experience from the browser is limited.
	ShowAJoinFromYourBrowserLink OptBool `json:"show_a_join_from_your_browser_link"`
	// Allow participants to join a meeting directly from their browser.
	ShowBrowserJoinLink OptBool `json:"show_browser_join_link"`
	// Always show meeting controls during a meeting.
	ShowMeetingControlToolbar OptBool `json:"show_meeting_control_toolbar"`
	// Whether the person sharing during a presentation can allow others to control the slide
	// presentation. This feature is only available in version 5.8.3 or higher.
	SlideControl OptBool `json:"slide_control"`
	// Allow users to select stereo audio during a meeting.
	StereoAudio OptBool `json:"stereo_audio"`
	// Allow  HTML formatting instead of plain text for meeting invitations scheduled with the Outlook
	// plugin.
	UseHTMLFormatEmail OptBool `json:"use_html_format_email"`
	// Enable virtual background.
	VirtualBackground OptBool `json:"virtual_background"`
	// Attendees cannot join a meeting until a host admits them individually from the waiting room.
	WaitingRoom OptBool `json:"waiting_room"`
	// Whether to allow webinar participants to send chat messages.
	WebinarChat OptBool `json:"webinar_chat"`
	// Whether webinar livestreaming is enabled.
	WebinarLiveStreaming OptBool `json:"webinar_live_streaming"`
	// Whether to allow the host to add polls before or during a webinar.
	WebinarPolling OptBool `json:"webinar_polling"`
	// Whether attendees can ask the host and panelists questions in the webinar.
	WebinarQuestionAnswer OptBool `json:"webinar_question_answer"`
	// Whether to allow the host to present surveys to attendees once a webinar has ended.
	WebinarSurvey OptBool `json:"webinar_survey"`
	// Allow participants to share a whiteboard that includes annotation tools.
	Whiteboard OptBool `json:"whiteboard"`
}

// GetAlertGuestJoin returns the value of AlertGuestJoin.
func (s *GroupLockedSettingsReq0InMeeting) GetAlertGuestJoin() OptBool {
	return s.AlertGuestJoin
}

// GetAllowUsersToDeleteMessagesInMeetingChat returns the value of AllowUsersToDeleteMessagesInMeetingChat.
func (s *GroupLockedSettingsReq0InMeeting) GetAllowUsersToDeleteMessagesInMeetingChat() OptBool {
	return s.AllowUsersToDeleteMessagesInMeetingChat
}

// GetAllowLiveStreaming returns the value of AllowLiveStreaming.
func (s *GroupLockedSettingsReq0InMeeting) GetAllowLiveStreaming() OptBool {
	return s.AllowLiveStreaming
}

// GetAllowShowZoomWindows returns the value of AllowShowZoomWindows.
func (s *GroupLockedSettingsReq0InMeeting) GetAllowShowZoomWindows() OptBool {
	return s.AllowShowZoomWindows
}

// GetAnnotation returns the value of Annotation.
func (s *GroupLockedSettingsReq0InMeeting) GetAnnotation() OptBool {
	return s.Annotation
}

// GetAttendeeOnHold returns the value of AttendeeOnHold.
func (s *GroupLockedSettingsReq0InMeeting) GetAttendeeOnHold() OptBool {
	return s.AttendeeOnHold
}

// GetAutoAnswer returns the value of AutoAnswer.
func (s *GroupLockedSettingsReq0InMeeting) GetAutoAnswer() OptBool {
	return s.AutoAnswer
}

// GetAutoGeneratedCaptions returns the value of AutoGeneratedCaptions.
func (s *GroupLockedSettingsReq0InMeeting) GetAutoGeneratedCaptions() OptBool {
	return s.AutoGeneratedCaptions
}

// GetAutoSavingChat returns the value of AutoSavingChat.
func (s *GroupLockedSettingsReq0InMeeting) GetAutoSavingChat() OptBool {
	return s.AutoSavingChat
}

// GetBreakoutRoom returns the value of BreakoutRoom.
func (s *GroupLockedSettingsReq0InMeeting) GetBreakoutRoom() OptBool {
	return s.BreakoutRoom
}

// GetChat returns the value of Chat.
func (s *GroupLockedSettingsReq0InMeeting) GetChat() OptBool {
	return s.Chat
}

// GetMeetingQuestionAnswer returns the value of MeetingQuestionAnswer.
func (s *GroupLockedSettingsReq0InMeeting) GetMeetingQuestionAnswer() OptBool {
	return s.MeetingQuestionAnswer
}

// GetClosedCaption returns the value of ClosedCaption.
func (s *GroupLockedSettingsReq0InMeeting) GetClosedCaption() OptBool {
	return s.ClosedCaption
}

// GetCoHost returns the value of CoHost.
func (s *GroupLockedSettingsReq0InMeeting) GetCoHost() OptBool {
	return s.CoHost
}

// GetCustomDataCenterRegions returns the value of CustomDataCenterRegions.
func (s *GroupLockedSettingsReq0InMeeting) GetCustomDataCenterRegions() OptBool {
	return s.CustomDataCenterRegions
}

// GetDisableScreenSharingForHostMeetings returns the value of DisableScreenSharingForHostMeetings.
func (s *GroupLockedSettingsReq0InMeeting) GetDisableScreenSharingForHostMeetings() OptBool {
	return s.DisableScreenSharingForHostMeetings
}

// GetDisableScreenSharingForInMeetingGuests returns the value of DisableScreenSharingForInMeetingGuests.
func (s *GroupLockedSettingsReq0InMeeting) GetDisableScreenSharingForInMeetingGuests() OptBool {
	return s.DisableScreenSharingForInMeetingGuests
}

// GetE2eEncryption returns the value of E2eEncryption.
func (s *GroupLockedSettingsReq0InMeeting) GetE2eEncryption() OptBool {
	return s.E2eEncryption
}

// GetEntryExitChime returns the value of EntryExitChime.
func (s *GroupLockedSettingsReq0InMeeting) GetEntryExitChime() OptString {
	return s.EntryExitChime
}

// GetFarEndCameraControl returns the value of FarEndCameraControl.
func (s *GroupLockedSettingsReq0InMeeting) GetFarEndCameraControl() OptBool {
	return s.FarEndCameraControl
}

// GetFeedback returns the value of Feedback.
func (s *GroupLockedSettingsReq0InMeeting) GetFeedback() OptBool {
	return s.Feedback
}

// GetFileTransfer returns the value of FileTransfer.
func (s *GroupLockedSettingsReq0InMeeting) GetFileTransfer() OptBool {
	return s.FileTransfer
}

// GetFullTranscript returns the value of FullTranscript.
func (s *GroupLockedSettingsReq0InMeeting) GetFullTranscript() OptBool {
	return s.FullTranscript
}

// GetGroupHd returns the value of GroupHd.
func (s *GroupLockedSettingsReq0InMeeting) GetGroupHd() OptBool {
	return s.GroupHd
}

// GetWebinarGroupHd returns the value of WebinarGroupHd.
func (s *GroupLockedSettingsReq0InMeeting) GetWebinarGroupHd() OptBool {
	return s.WebinarGroupHd
}

// GetLanguageInterpretation returns the value of LanguageInterpretation.
func (s *GroupLockedSettingsReq0InMeeting) GetLanguageInterpretation() OptBool {
	return s.LanguageInterpretation
}

// GetSignLanguageInterpretation returns the value of SignLanguageInterpretation.
func (s *GroupLockedSettingsReq0InMeeting) GetSignLanguageInterpretation() OptBool {
	return s.SignLanguageInterpretation
}

// GetWebinarReactions returns the value of WebinarReactions.
func (s *GroupLockedSettingsReq0InMeeting) GetWebinarReactions() OptBool {
	return s.WebinarReactions
}

// GetMeetingSurvey returns the value of MeetingSurvey.
func (s *GroupLockedSettingsReq0InMeeting) GetMeetingSurvey() OptBool {
	return s.MeetingSurvey
}

// GetNonVerbalFeedback returns the value of NonVerbalFeedback.
func (s *GroupLockedSettingsReq0InMeeting) GetNonVerbalFeedback() OptBool {
	return s.NonVerbalFeedback
}

// GetOriginalAudio returns the value of OriginalAudio.
func (s *GroupLockedSettingsReq0InMeeting) GetOriginalAudio() OptBool {
	return s.OriginalAudio
}

// GetPolling returns the value of Polling.
func (s *GroupLockedSettingsReq0InMeeting) GetPolling() OptBool {
	return s.Polling
}

// GetPostMeetingFeedback returns the value of PostMeetingFeedback.
func (s *GroupLockedSettingsReq0InMeeting) GetPostMeetingFeedback() OptBool {
	return s.PostMeetingFeedback
}

// GetPrivateChat returns the value of PrivateChat.
func (s *GroupLockedSettingsReq0InMeeting) GetPrivateChat() OptBool {
	return s.PrivateChat
}

// GetRemoteControl returns the value of RemoteControl.
func (s *GroupLockedSettingsReq0InMeeting) GetRemoteControl() OptBool {
	return s.RemoteControl
}

// GetRemoteSupport returns the value of RemoteSupport.
func (s *GroupLockedSettingsReq0InMeeting) GetRemoteSupport() OptBool {
	return s.RemoteSupport
}

// GetRequestPermissionToUnmuteParticipants returns the value of RequestPermissionToUnmuteParticipants.
func (s *GroupLockedSettingsReq0InMeeting) GetRequestPermissionToUnmuteParticipants() OptBool {
	return s.RequestPermissionToUnmuteParticipants
}

// GetSaveCaption returns the value of SaveCaption.
func (s *GroupLockedSettingsReq0InMeeting) GetSaveCaption() OptBool {
	return s.SaveCaption
}

// GetSaveCaptions returns the value of SaveCaptions.
func (s *GroupLockedSettingsReq0InMeeting) GetSaveCaptions() OptBool {
	return s.SaveCaptions
}

// GetScreenSharing returns the value of ScreenSharing.
func (s *GroupLockedSettingsReq0InMeeting) GetScreenSharing() OptBool {
	return s.ScreenSharing
}

// GetSendingDefaultEmailInvites returns the value of SendingDefaultEmailInvites.
func (s *GroupLockedSettingsReq0InMeeting) GetSendingDefaultEmailInvites() OptBool {
	return s.SendingDefaultEmailInvites
}

// GetShowAJoinFromYourBrowserLink returns the value of ShowAJoinFromYourBrowserLink.
func (s *GroupLockedSettingsReq0InMeeting) GetShowAJoinFromYourBrowserLink() OptBool {
	return s.ShowAJoinFromYourBrowserLink
}

// GetShowBrowserJoinLink returns the value of ShowBrowserJoinLink.
func (s *GroupLockedSettingsReq0InMeeting) GetShowBrowserJoinLink() OptBool {
	return s.ShowBrowserJoinLink
}

// GetShowMeetingControlToolbar returns the value of ShowMeetingControlToolbar.
func (s *GroupLockedSettingsReq0InMeeting) GetShowMeetingControlToolbar() OptBool {
	return s.ShowMeetingControlToolbar
}

// GetSlideControl returns the value of SlideControl.
func (s *GroupLockedSettingsReq0InMeeting) GetSlideControl() OptBool {
	return s.SlideControl
}

// GetStereoAudio returns the value of StereoAudio.
func (s *GroupLockedSettingsReq0InMeeting) GetStereoAudio() OptBool {
	return s.StereoAudio
}

// GetUseHTMLFormatEmail returns the value of UseHTMLFormatEmail.
func (s *GroupLockedSettingsReq0InMeeting) GetUseHTMLFormatEmail() OptBool {
	return s.UseHTMLFormatEmail
}

// GetVirtualBackground returns the value of VirtualBackground.
func (s *GroupLockedSettingsReq0InMeeting) GetVirtualBackground() OptBool {
	return s.VirtualBackground
}

// GetWaitingRoom returns the value of WaitingRoom.
func (s *GroupLockedSettingsReq0InMeeting) GetWaitingRoom() OptBool {
	return s.WaitingRoom
}

// GetWebinarChat returns the value of WebinarChat.
func (s *GroupLockedSettingsReq0InMeeting) GetWebinarChat() OptBool {
	return s.WebinarChat
}

// GetWebinarLiveStreaming returns the value of WebinarLiveStreaming.
func (s *GroupLockedSettingsReq0InMeeting) GetWebinarLiveStreaming() OptBool {
	return s.WebinarLiveStreaming
}

// GetWebinarPolling returns the value of WebinarPolling.
func (s *GroupLockedSettingsReq0InMeeting) GetWebinarPolling() OptBool {
	return s.WebinarPolling
}

// GetWebinarQuestionAnswer returns the value of WebinarQuestionAnswer.
func (s *GroupLockedSettingsReq0InMeeting) GetWebinarQuestionAnswer() OptBool {
	return s.WebinarQuestionAnswer
}

// GetWebinarSurvey returns the value of WebinarSurvey.
func (s *GroupLockedSettingsReq0InMeeting) GetWebinarSurvey() OptBool {
	return s.WebinarSurvey
}

// GetWhiteboard returns the value of Whiteboard.
func (s *GroupLockedSettingsReq0InMeeting) GetWhiteboard() OptBool {
	return s.Whiteboard
}

// SetAlertGuestJoin sets the value of AlertGuestJoin.
func (s *GroupLockedSettingsReq0InMeeting) SetAlertGuestJoin(val OptBool) {
	s.AlertGuestJoin = val
}

// SetAllowUsersToDeleteMessagesInMeetingChat sets the value of AllowUsersToDeleteMessagesInMeetingChat.
func (s *GroupLockedSettingsReq0InMeeting) SetAllowUsersToDeleteMessagesInMeetingChat(val OptBool) {
	s.AllowUsersToDeleteMessagesInMeetingChat = val
}

// SetAllowLiveStreaming sets the value of AllowLiveStreaming.
func (s *GroupLockedSettingsReq0InMeeting) SetAllowLiveStreaming(val OptBool) {
	s.AllowLiveStreaming = val
}

// SetAllowShowZoomWindows sets the value of AllowShowZoomWindows.
func (s *GroupLockedSettingsReq0InMeeting) SetAllowShowZoomWindows(val OptBool) {
	s.AllowShowZoomWindows = val
}

// SetAnnotation sets the value of Annotation.
func (s *GroupLockedSettingsReq0InMeeting) SetAnnotation(val OptBool) {
	s.Annotation = val
}

// SetAttendeeOnHold sets the value of AttendeeOnHold.
func (s *GroupLockedSettingsReq0InMeeting) SetAttendeeOnHold(val OptBool) {
	s.AttendeeOnHold = val
}

// SetAutoAnswer sets the value of AutoAnswer.
func (s *GroupLockedSettingsReq0InMeeting) SetAutoAnswer(val OptBool) {
	s.AutoAnswer = val
}

// SetAutoGeneratedCaptions sets the value of AutoGeneratedCaptions.
func (s *GroupLockedSettingsReq0InMeeting) SetAutoGeneratedCaptions(val OptBool) {
	s.AutoGeneratedCaptions = val
}

// SetAutoSavingChat sets the value of AutoSavingChat.
func (s *GroupLockedSettingsReq0InMeeting) SetAutoSavingChat(val OptBool) {
	s.AutoSavingChat = val
}

// SetBreakoutRoom sets the value of BreakoutRoom.
func (s *GroupLockedSettingsReq0InMeeting) SetBreakoutRoom(val OptBool) {
	s.BreakoutRoom = val
}

// SetChat sets the value of Chat.
func (s *GroupLockedSettingsReq0InMeeting) SetChat(val OptBool) {
	s.Chat = val
}

// SetMeetingQuestionAnswer sets the value of MeetingQuestionAnswer.
func (s *GroupLockedSettingsReq0InMeeting) SetMeetingQuestionAnswer(val OptBool) {
	s.MeetingQuestionAnswer = val
}

// SetClosedCaption sets the value of ClosedCaption.
func (s *GroupLockedSettingsReq0InMeeting) SetClosedCaption(val OptBool) {
	s.ClosedCaption = val
}

// SetCoHost sets the value of CoHost.
func (s *GroupLockedSettingsReq0InMeeting) SetCoHost(val OptBool) {
	s.CoHost = val
}

// SetCustomDataCenterRegions sets the value of CustomDataCenterRegions.
func (s *GroupLockedSettingsReq0InMeeting) SetCustomDataCenterRegions(val OptBool) {
	s.CustomDataCenterRegions = val
}

// SetDisableScreenSharingForHostMeetings sets the value of DisableScreenSharingForHostMeetings.
func (s *GroupLockedSettingsReq0InMeeting) SetDisableScreenSharingForHostMeetings(val OptBool) {
	s.DisableScreenSharingForHostMeetings = val
}

// SetDisableScreenSharingForInMeetingGuests sets the value of DisableScreenSharingForInMeetingGuests.
func (s *GroupLockedSettingsReq0InMeeting) SetDisableScreenSharingForInMeetingGuests(val OptBool) {
	s.DisableScreenSharingForInMeetingGuests = val
}

// SetE2eEncryption sets the value of E2eEncryption.
func (s *GroupLockedSettingsReq0InMeeting) SetE2eEncryption(val OptBool) {
	s.E2eEncryption = val
}

// SetEntryExitChime sets the value of EntryExitChime.
func (s *GroupLockedSettingsReq0InMeeting) SetEntryExitChime(val OptString) {
	s.EntryExitChime = val
}

// SetFarEndCameraControl sets the value of FarEndCameraControl.
func (s *GroupLockedSettingsReq0InMeeting) SetFarEndCameraControl(val OptBool) {
	s.FarEndCameraControl = val
}

// SetFeedback sets the value of Feedback.
func (s *GroupLockedSettingsReq0InMeeting) SetFeedback(val OptBool) {
	s.Feedback = val
}

// SetFileTransfer sets the value of FileTransfer.
func (s *GroupLockedSettingsReq0InMeeting) SetFileTransfer(val OptBool) {
	s.FileTransfer = val
}

// SetFullTranscript sets the value of FullTranscript.
func (s *GroupLockedSettingsReq0InMeeting) SetFullTranscript(val OptBool) {
	s.FullTranscript = val
}

// SetGroupHd sets the value of GroupHd.
func (s *GroupLockedSettingsReq0InMeeting) SetGroupHd(val OptBool) {
	s.GroupHd = val
}

// SetWebinarGroupHd sets the value of WebinarGroupHd.
func (s *GroupLockedSettingsReq0InMeeting) SetWebinarGroupHd(val OptBool) {
	s.WebinarGroupHd = val
}

// SetLanguageInterpretation sets the value of LanguageInterpretation.
func (s *GroupLockedSettingsReq0InMeeting) SetLanguageInterpretation(val OptBool) {
	s.LanguageInterpretation = val
}

// SetSignLanguageInterpretation sets the value of SignLanguageInterpretation.
func (s *GroupLockedSettingsReq0InMeeting) SetSignLanguageInterpretation(val OptBool) {
	s.SignLanguageInterpretation = val
}

// SetWebinarReactions sets the value of WebinarReactions.
func (s *GroupLockedSettingsReq0InMeeting) SetWebinarReactions(val OptBool) {
	s.WebinarReactions = val
}

// SetMeetingSurvey sets the value of MeetingSurvey.
func (s *GroupLockedSettingsReq0InMeeting) SetMeetingSurvey(val OptBool) {
	s.MeetingSurvey = val
}

// SetNonVerbalFeedback sets the value of NonVerbalFeedback.
func (s *GroupLockedSettingsReq0InMeeting) SetNonVerbalFeedback(val OptBool) {
	s.NonVerbalFeedback = val
}

// SetOriginalAudio sets the value of OriginalAudio.
func (s *GroupLockedSettingsReq0InMeeting) SetOriginalAudio(val OptBool) {
	s.OriginalAudio = val
}

// SetPolling sets the value of Polling.
func (s *GroupLockedSettingsReq0InMeeting) SetPolling(val OptBool) {
	s.Polling = val
}

// SetPostMeetingFeedback sets the value of PostMeetingFeedback.
func (s *GroupLockedSettingsReq0InMeeting) SetPostMeetingFeedback(val OptBool) {
	s.PostMeetingFeedback = val
}

// SetPrivateChat sets the value of PrivateChat.
func (s *GroupLockedSettingsReq0InMeeting) SetPrivateChat(val OptBool) {
	s.PrivateChat = val
}

// SetRemoteControl sets the value of RemoteControl.
func (s *GroupLockedSettingsReq0InMeeting) SetRemoteControl(val OptBool) {
	s.RemoteControl = val
}

// SetRemoteSupport sets the value of RemoteSupport.
func (s *GroupLockedSettingsReq0InMeeting) SetRemoteSupport(val OptBool) {
	s.RemoteSupport = val
}

// SetRequestPermissionToUnmuteParticipants sets the value of RequestPermissionToUnmuteParticipants.
func (s *GroupLockedSettingsReq0InMeeting) SetRequestPermissionToUnmuteParticipants(val OptBool) {
	s.RequestPermissionToUnmuteParticipants = val
}

// SetSaveCaption sets the value of SaveCaption.
func (s *GroupLockedSettingsReq0InMeeting) SetSaveCaption(val OptBool) {
	s.SaveCaption = val
}

// SetSaveCaptions sets the value of SaveCaptions.
func (s *GroupLockedSettingsReq0InMeeting) SetSaveCaptions(val OptBool) {
	s.SaveCaptions = val
}

// SetScreenSharing sets the value of ScreenSharing.
func (s *GroupLockedSettingsReq0InMeeting) SetScreenSharing(val OptBool) {
	s.ScreenSharing = val
}

// SetSendingDefaultEmailInvites sets the value of SendingDefaultEmailInvites.
func (s *GroupLockedSettingsReq0InMeeting) SetSendingDefaultEmailInvites(val OptBool) {
	s.SendingDefaultEmailInvites = val
}

// SetShowAJoinFromYourBrowserLink sets the value of ShowAJoinFromYourBrowserLink.
func (s *GroupLockedSettingsReq0InMeeting) SetShowAJoinFromYourBrowserLink(val OptBool) {
	s.ShowAJoinFromYourBrowserLink = val
}

// SetShowBrowserJoinLink sets the value of ShowBrowserJoinLink.
func (s *GroupLockedSettingsReq0InMeeting) SetShowBrowserJoinLink(val OptBool) {
	s.ShowBrowserJoinLink = val
}

// SetShowMeetingControlToolbar sets the value of ShowMeetingControlToolbar.
func (s *GroupLockedSettingsReq0InMeeting) SetShowMeetingControlToolbar(val OptBool) {
	s.ShowMeetingControlToolbar = val
}

// SetSlideControl sets the value of SlideControl.
func (s *GroupLockedSettingsReq0InMeeting) SetSlideControl(val OptBool) {
	s.SlideControl = val
}

// SetStereoAudio sets the value of StereoAudio.
func (s *GroupLockedSettingsReq0InMeeting) SetStereoAudio(val OptBool) {
	s.StereoAudio = val
}

// SetUseHTMLFormatEmail sets the value of UseHTMLFormatEmail.
func (s *GroupLockedSettingsReq0InMeeting) SetUseHTMLFormatEmail(val OptBool) {
	s.UseHTMLFormatEmail = val
}

// SetVirtualBackground sets the value of VirtualBackground.
func (s *GroupLockedSettingsReq0InMeeting) SetVirtualBackground(val OptBool) {
	s.VirtualBackground = val
}

// SetWaitingRoom sets the value of WaitingRoom.
func (s *GroupLockedSettingsReq0InMeeting) SetWaitingRoom(val OptBool) {
	s.WaitingRoom = val
}

// SetWebinarChat sets the value of WebinarChat.
func (s *GroupLockedSettingsReq0InMeeting) SetWebinarChat(val OptBool) {
	s.WebinarChat = val
}

// SetWebinarLiveStreaming sets the value of WebinarLiveStreaming.
func (s *GroupLockedSettingsReq0InMeeting) SetWebinarLiveStreaming(val OptBool) {
	s.WebinarLiveStreaming = val
}

// SetWebinarPolling sets the value of WebinarPolling.
func (s *GroupLockedSettingsReq0InMeeting) SetWebinarPolling(val OptBool) {
	s.WebinarPolling = val
}

// SetWebinarQuestionAnswer sets the value of WebinarQuestionAnswer.
func (s *GroupLockedSettingsReq0InMeeting) SetWebinarQuestionAnswer(val OptBool) {
	s.WebinarQuestionAnswer = val
}

// SetWebinarSurvey sets the value of WebinarSurvey.
func (s *GroupLockedSettingsReq0InMeeting) SetWebinarSurvey(val OptBool) {
	s.WebinarSurvey = val
}

// SetWhiteboard sets the value of Whiteboard.
func (s *GroupLockedSettingsReq0InMeeting) SetWhiteboard(val OptBool) {
	s.Whiteboard = val
}

type GroupLockedSettingsReq0OtherOptions struct {
	// If `true`, iOS blurs the screenshot in the task switcher when multiple apps are open. Android
	// hides the screenshot in the system-level list of recent apps.
	BlurSnapshot OptBool `json:"blur_snapshot"`
}

// GetBlurSnapshot returns the value of BlurSnapshot.
func (s *GroupLockedSettingsReq0OtherOptions) GetBlurSnapshot() OptBool {
	return s.BlurSnapshot
}

// SetBlurSnapshot sets the value of BlurSnapshot.
func (s *GroupLockedSettingsReq0OtherOptions) SetBlurSnapshot(val OptBool) {
	s.BlurSnapshot = val
}

type GroupLockedSettingsReq0Recording struct {
	// Make cloud recordings accessible to account members only.
	AccountUserAccessRecording OptBool `json:"account_user_access_recording"`
	// Allow Zoom to automatically delete recordings permanently after a specified number of days.
	AutoDeleteCmr OptBool `json:"auto_delete_cmr"`
	// Record meetings automatically as they start.
	AutoRecording OptBool `json:"auto_recording"`
	// Allow hosts to record and save the meeting or webinar in the cloud.
	CloudRecording OptBool `json:"cloud_recording"`
	// Allow anyone with a link to the cloud recording to download.
	CloudRecordingDownload OptBool `json:"cloud_recording_download"`
	// Allow the host to delete the recordings. If this option is disabled, the recordings cannot be
	// deleted by the host and only admin can delete them.
	HostDeleteCloudRecording OptBool `json:"host_delete_cloud_recording"`
	// Setting to allow cloud recording access only from specific IP address ranges.
	IPAddressAccessControl OptGroupLockedSettingsReq0RecordingIPAddressAccessControl `json:"ip_address_access_control"`
	// Allow hosts and participants to record the meeting to a local file.
	LocalRecording          OptBool `json:"local_recording"`
	RecordingAuthentication OptBool `json:"recording_authentication"`
	// [Archiving solution](https://support.zoom.
	// us/hc/en-us/articles/360050431572-Archiving-Meeting-and-Webinar-data) settings. This setting can
	// only be used if you have been granted archiving solution access by the Zoom support team.
	Archive OptBool `json:"archive"`
}

// GetAccountUserAccessRecording returns the value of AccountUserAccessRecording.
func (s *GroupLockedSettingsReq0Recording) GetAccountUserAccessRecording() OptBool {
	return s.AccountUserAccessRecording
}

// GetAutoDeleteCmr returns the value of AutoDeleteCmr.
func (s *GroupLockedSettingsReq0Recording) GetAutoDeleteCmr() OptBool {
	return s.AutoDeleteCmr
}

// GetAutoRecording returns the value of AutoRecording.
func (s *GroupLockedSettingsReq0Recording) GetAutoRecording() OptBool {
	return s.AutoRecording
}

// GetCloudRecording returns the value of CloudRecording.
func (s *GroupLockedSettingsReq0Recording) GetCloudRecording() OptBool {
	return s.CloudRecording
}

// GetCloudRecordingDownload returns the value of CloudRecordingDownload.
func (s *GroupLockedSettingsReq0Recording) GetCloudRecordingDownload() OptBool {
	return s.CloudRecordingDownload
}

// GetHostDeleteCloudRecording returns the value of HostDeleteCloudRecording.
func (s *GroupLockedSettingsReq0Recording) GetHostDeleteCloudRecording() OptBool {
	return s.HostDeleteCloudRecording
}

// GetIPAddressAccessControl returns the value of IPAddressAccessControl.
func (s *GroupLockedSettingsReq0Recording) GetIPAddressAccessControl() OptGroupLockedSettingsReq0RecordingIPAddressAccessControl {
	return s.IPAddressAccessControl
}

// GetLocalRecording returns the value of LocalRecording.
func (s *GroupLockedSettingsReq0Recording) GetLocalRecording() OptBool {
	return s.LocalRecording
}

// GetRecordingAuthentication returns the value of RecordingAuthentication.
func (s *GroupLockedSettingsReq0Recording) GetRecordingAuthentication() OptBool {
	return s.RecordingAuthentication
}

// GetArchive returns the value of Archive.
func (s *GroupLockedSettingsReq0Recording) GetArchive() OptBool {
	return s.Archive
}

// SetAccountUserAccessRecording sets the value of AccountUserAccessRecording.
func (s *GroupLockedSettingsReq0Recording) SetAccountUserAccessRecording(val OptBool) {
	s.AccountUserAccessRecording = val
}

// SetAutoDeleteCmr sets the value of AutoDeleteCmr.
func (s *GroupLockedSettingsReq0Recording) SetAutoDeleteCmr(val OptBool) {
	s.AutoDeleteCmr = val
}

// SetAutoRecording sets the value of AutoRecording.
func (s *GroupLockedSettingsReq0Recording) SetAutoRecording(val OptBool) {
	s.AutoRecording = val
}

// SetCloudRecording sets the value of CloudRecording.
func (s *GroupLockedSettingsReq0Recording) SetCloudRecording(val OptBool) {
	s.CloudRecording = val
}

// SetCloudRecordingDownload sets the value of CloudRecordingDownload.
func (s *GroupLockedSettingsReq0Recording) SetCloudRecordingDownload(val OptBool) {
	s.CloudRecordingDownload = val
}

// SetHostDeleteCloudRecording sets the value of HostDeleteCloudRecording.
func (s *GroupLockedSettingsReq0Recording) SetHostDeleteCloudRecording(val OptBool) {
	s.HostDeleteCloudRecording = val
}

// SetIPAddressAccessControl sets the value of IPAddressAccessControl.
func (s *GroupLockedSettingsReq0Recording) SetIPAddressAccessControl(val OptGroupLockedSettingsReq0RecordingIPAddressAccessControl) {
	s.IPAddressAccessControl = val
}

// SetLocalRecording sets the value of LocalRecording.
func (s *GroupLockedSettingsReq0Recording) SetLocalRecording(val OptBool) {
	s.LocalRecording = val
}

// SetRecordingAuthentication sets the value of RecordingAuthentication.
func (s *GroupLockedSettingsReq0Recording) SetRecordingAuthentication(val OptBool) {
	s.RecordingAuthentication = val
}

// SetArchive sets the value of Archive.
func (s *GroupLockedSettingsReq0Recording) SetArchive(val OptBool) {
	s.Archive = val
}

// Setting to allow cloud recording access only from specific IP address ranges.
type GroupLockedSettingsReq0RecordingIPAddressAccessControl struct {
	// If set to `true`, the cloud recordings of this account can only be accessed by the IP addresses
	// defined in the `ip_addresses_or_ranges` property.
	Enable OptBool `json:"enable"`
	// IP addresses or ranges that have access to the cloud recordings. Separate multiple IP ranges with
	// comma. Use n.n.n.n, n.n.n.n/n or n.n.n.n - n.n.n.n syntax where n is a number.
	// Example: `46.33.24.184, 48.99.100.2/25` or `200.181.108.17 - 220.181.108.157`.
	IPAddressesOrRanges OptString `json:"ip_addresses_or_ranges"`
}

// GetEnable returns the value of Enable.
func (s *GroupLockedSettingsReq0RecordingIPAddressAccessControl) GetEnable() OptBool {
	return s.Enable
}

// GetIPAddressesOrRanges returns the value of IPAddressesOrRanges.
func (s *GroupLockedSettingsReq0RecordingIPAddressAccessControl) GetIPAddressesOrRanges() OptString {
	return s.IPAddressesOrRanges
}

// SetEnable sets the value of Enable.
func (s *GroupLockedSettingsReq0RecordingIPAddressAccessControl) SetEnable(val OptBool) {
	s.Enable = val
}

// SetIPAddressesOrRanges sets the value of IPAddressesOrRanges.
func (s *GroupLockedSettingsReq0RecordingIPAddressAccessControl) SetIPAddressesOrRanges(val OptString) {
	s.IPAddressesOrRanges = val
}

type GroupLockedSettingsReq0ScheduleMeeting struct {
	// Determine how participants can join the audio portion of the meeting.
	AudioType OptBool `json:"audio_type"`
	// If the value is set to `true`, the meeting passcode will be encrypted and included in the join
	// meeting link to allow participants to join with just one click without having to enter the
	// passcode.
	EmbedPasswordInJoinLink OptBool `json:"embed_password_in_join_link"`
	// If join before host option is enabled for a personal meeting, then enforce passcode requirement.
	//
	// Deprecated: schema marks this property as deprecated.
	ForcePmiJbhPassword OptBool `json:"force_pmi_jbh_password"`
	// Start meetings with host video on.
	HostVideo OptBool `json:"host_video"`
	// Allow participants to join the meeting before the host arrives.
	JoinBeforeHost OptBool `json:"join_before_host"`
	// Only authenticated users can join meetings.
	MeetingAuthentication OptBool `json:"meeting_authentication"`
	// Automatically mute all participants when they join the meeting.
	MuteUponEntry OptBool `json:"mute_upon_entry"`
	// Start meetings with participant video on.
	ParticipantVideo OptBool `json:"participant_video"`
	// Turn the lock setting on or off for the **Enable Personal Meeting ID** setting for a group.
	// `true` - Turn the **Enable Personal Meeting ID** setting **on** for all users in the group. Users
	// can choose to use personal meeting ID for their meetings.
	// `false` - Turn **off** the **Enable Personal Meeting ID** setting. **If this setting is
	// [disabled](https://support.zoom.
	// us/hc/en-us/articles/201362843-Personal-meeting-ID-PMI-and-personal-link?flash_digest=eb7ac62d8c7fb4daf285916e3e15d87537806133#h_aa0335c8-3b06-41bc-bc1f-a8b84ef17f2a), meetings that were scheduled with PMI by this group members will be invalid. Users will have to update previously scheduled PMI meetings.**
	// For Zoom Phone only: If a user has been assigned a desk phone, **Elevate to Zoom Meeting** on desk
	// phone will be disabled.
	PersonalMeeting OptBool `json:"personal_meeting"`
	// Generate and send new passcodes for newly scheduled or edited meetings.
	PstnPasswordProtected OptBool `json:"pstn_password_protected"`
	// Require passcode for instant meetings. If you use PMI for your instant meetings, this option is
	// disabled.
	RequirePasswordForInstantMeetings OptBool `json:"require_password_for_instant_meetings"`
	// Require participants to enter passcode for PMI meetings.
	RequirePasswordForPmiMeetings OptBool `json:"require_password_for_pmi_meetings"`
	// This setting applies for regular meetings that do not use PMI. If enabled, a passcode is generated
	// while a host schedules a new meeting and participants will be required to enter the passcode
	// before they can join the meeting.
	RequirePasswordForSchedulingNewMeetings OptBool `json:"require_password_for_scheduling_new_meetings"`
	// Receive desktop notification for upcoming meetings.
	UpcomingMeetingReminder OptBool `json:"upcoming_meeting_reminder"`
	// Whether to enable the [**Enable continuous meeting chat**] setting.
	ContinuousMeetingChat OptBool `json:"continuous_meeting_chat"`
}

// GetAudioType returns the value of AudioType.
func (s *GroupLockedSettingsReq0ScheduleMeeting) GetAudioType() OptBool {
	return s.AudioType
}

// GetEmbedPasswordInJoinLink returns the value of EmbedPasswordInJoinLink.
func (s *GroupLockedSettingsReq0ScheduleMeeting) GetEmbedPasswordInJoinLink() OptBool {
	return s.EmbedPasswordInJoinLink
}

// GetForcePmiJbhPassword returns the value of ForcePmiJbhPassword.
func (s *GroupLockedSettingsReq0ScheduleMeeting) GetForcePmiJbhPassword() OptBool {
	return s.ForcePmiJbhPassword
}

// GetHostVideo returns the value of HostVideo.
func (s *GroupLockedSettingsReq0ScheduleMeeting) GetHostVideo() OptBool {
	return s.HostVideo
}

// GetJoinBeforeHost returns the value of JoinBeforeHost.
func (s *GroupLockedSettingsReq0ScheduleMeeting) GetJoinBeforeHost() OptBool {
	return s.JoinBeforeHost
}

// GetMeetingAuthentication returns the value of MeetingAuthentication.
func (s *GroupLockedSettingsReq0ScheduleMeeting) GetMeetingAuthentication() OptBool {
	return s.MeetingAuthentication
}

// GetMuteUponEntry returns the value of MuteUponEntry.
func (s *GroupLockedSettingsReq0ScheduleMeeting) GetMuteUponEntry() OptBool {
	return s.MuteUponEntry
}

// GetParticipantVideo returns the value of ParticipantVideo.
func (s *GroupLockedSettingsReq0ScheduleMeeting) GetParticipantVideo() OptBool {
	return s.ParticipantVideo
}

// GetPersonalMeeting returns the value of PersonalMeeting.
func (s *GroupLockedSettingsReq0ScheduleMeeting) GetPersonalMeeting() OptBool {
	return s.PersonalMeeting
}

// GetPstnPasswordProtected returns the value of PstnPasswordProtected.
func (s *GroupLockedSettingsReq0ScheduleMeeting) GetPstnPasswordProtected() OptBool {
	return s.PstnPasswordProtected
}

// GetRequirePasswordForInstantMeetings returns the value of RequirePasswordForInstantMeetings.
func (s *GroupLockedSettingsReq0ScheduleMeeting) GetRequirePasswordForInstantMeetings() OptBool {
	return s.RequirePasswordForInstantMeetings
}

// GetRequirePasswordForPmiMeetings returns the value of RequirePasswordForPmiMeetings.
func (s *GroupLockedSettingsReq0ScheduleMeeting) GetRequirePasswordForPmiMeetings() OptBool {
	return s.RequirePasswordForPmiMeetings
}

// GetRequirePasswordForSchedulingNewMeetings returns the value of RequirePasswordForSchedulingNewMeetings.
func (s *GroupLockedSettingsReq0ScheduleMeeting) GetRequirePasswordForSchedulingNewMeetings() OptBool {
	return s.RequirePasswordForSchedulingNewMeetings
}

// GetUpcomingMeetingReminder returns the value of UpcomingMeetingReminder.
func (s *GroupLockedSettingsReq0ScheduleMeeting) GetUpcomingMeetingReminder() OptBool {
	return s.UpcomingMeetingReminder
}

// GetContinuousMeetingChat returns the value of ContinuousMeetingChat.
func (s *GroupLockedSettingsReq0ScheduleMeeting) GetContinuousMeetingChat() OptBool {
	return s.ContinuousMeetingChat
}

// SetAudioType sets the value of AudioType.
func (s *GroupLockedSettingsReq0ScheduleMeeting) SetAudioType(val OptBool) {
	s.AudioType = val
}

// SetEmbedPasswordInJoinLink sets the value of EmbedPasswordInJoinLink.
func (s *GroupLockedSettingsReq0ScheduleMeeting) SetEmbedPasswordInJoinLink(val OptBool) {
	s.EmbedPasswordInJoinLink = val
}

// SetForcePmiJbhPassword sets the value of ForcePmiJbhPassword.
func (s *GroupLockedSettingsReq0ScheduleMeeting) SetForcePmiJbhPassword(val OptBool) {
	s.ForcePmiJbhPassword = val
}

// SetHostVideo sets the value of HostVideo.
func (s *GroupLockedSettingsReq0ScheduleMeeting) SetHostVideo(val OptBool) {
	s.HostVideo = val
}

// SetJoinBeforeHost sets the value of JoinBeforeHost.
func (s *GroupLockedSettingsReq0ScheduleMeeting) SetJoinBeforeHost(val OptBool) {
	s.JoinBeforeHost = val
}

// SetMeetingAuthentication sets the value of MeetingAuthentication.
func (s *GroupLockedSettingsReq0ScheduleMeeting) SetMeetingAuthentication(val OptBool) {
	s.MeetingAuthentication = val
}

// SetMuteUponEntry sets the value of MuteUponEntry.
func (s *GroupLockedSettingsReq0ScheduleMeeting) SetMuteUponEntry(val OptBool) {
	s.MuteUponEntry = val
}

// SetParticipantVideo sets the value of ParticipantVideo.
func (s *GroupLockedSettingsReq0ScheduleMeeting) SetParticipantVideo(val OptBool) {
	s.ParticipantVideo = val
}

// SetPersonalMeeting sets the value of PersonalMeeting.
func (s *GroupLockedSettingsReq0ScheduleMeeting) SetPersonalMeeting(val OptBool) {
	s.PersonalMeeting = val
}

// SetPstnPasswordProtected sets the value of PstnPasswordProtected.
func (s *GroupLockedSettingsReq0ScheduleMeeting) SetPstnPasswordProtected(val OptBool) {
	s.PstnPasswordProtected = val
}

// SetRequirePasswordForInstantMeetings sets the value of RequirePasswordForInstantMeetings.
func (s *GroupLockedSettingsReq0ScheduleMeeting) SetRequirePasswordForInstantMeetings(val OptBool) {
	s.RequirePasswordForInstantMeetings = val
}

// SetRequirePasswordForPmiMeetings sets the value of RequirePasswordForPmiMeetings.
func (s *GroupLockedSettingsReq0ScheduleMeeting) SetRequirePasswordForPmiMeetings(val OptBool) {
	s.RequirePasswordForPmiMeetings = val
}

// SetRequirePasswordForSchedulingNewMeetings sets the value of RequirePasswordForSchedulingNewMeetings.
func (s *GroupLockedSettingsReq0ScheduleMeeting) SetRequirePasswordForSchedulingNewMeetings(val OptBool) {
	s.RequirePasswordForSchedulingNewMeetings = val
}

// SetUpcomingMeetingReminder sets the value of UpcomingMeetingReminder.
func (s *GroupLockedSettingsReq0ScheduleMeeting) SetUpcomingMeetingReminder(val OptBool) {
	s.UpcomingMeetingReminder = val
}

// SetContinuousMeetingChat sets the value of ContinuousMeetingChat.
func (s *GroupLockedSettingsReq0ScheduleMeeting) SetContinuousMeetingChat(val OptBool) {
	s.ContinuousMeetingChat = val
}

type GroupLockedSettingsReq0Telephony struct {
	TelephonyRegions OptBool `json:"telephony_regions"`
	// Allow users to join the meeting using the existing 3rd party audio configuration.
	ThirdPartyAudio OptBool `json:"third_party_audio"`
}

// GetTelephonyRegions returns the value of TelephonyRegions.
func (s *GroupLockedSettingsReq0Telephony) GetTelephonyRegions() OptBool {
	return s.TelephonyRegions
}

// GetThirdPartyAudio returns the value of ThirdPartyAudio.
func (s *GroupLockedSettingsReq0Telephony) GetThirdPartyAudio() OptBool {
	return s.ThirdPartyAudio
}

// SetTelephonyRegions sets the value of TelephonyRegions.
func (s *GroupLockedSettingsReq0Telephony) SetTelephonyRegions(val OptBool) {
	s.TelephonyRegions = val
}

// SetThirdPartyAudio sets the value of ThirdPartyAudio.
func (s *GroupLockedSettingsReq0Telephony) SetThirdPartyAudio(val OptBool) {
	s.ThirdPartyAudio = val
}

// The group's updated locked meeting and webinar security settings.
type GroupLockedSettingsReq1 struct {
	MeetingSecurity OptGroupLockedSettingsReq1MeetingSecurity `json:"meeting_security"`
}

// GetMeetingSecurity returns the value of MeetingSecurity.
func (s *GroupLockedSettingsReq1) GetMeetingSecurity() OptGroupLockedSettingsReq1MeetingSecurity {
	return s.MeetingSecurity
}

// SetMeetingSecurity sets the value of MeetingSecurity.
func (s *GroupLockedSettingsReq1) SetMeetingSecurity(val OptGroupLockedSettingsReq1MeetingSecurity) {
	s.MeetingSecurity = val
}

type GroupLockedSettingsReq1MeetingSecurity struct {
	// Whether to enable the [**Approve or block entry for users from specific countries or
	// regions**](https://support.zoom.
	// us/hc/en-us/articles/360060086231-Joining-from-specific-countries-regions) setting.
	ApprovedOrDeniedCountriesOrRegions OptBool `json:"approved_or_denied_countries_or_regions"`
	// Whether to require that all meetings are secured with at least one security option.
	// This setting can only be disabled by Enterprise, ISV, Business (with more than 100 licenses), and
	// Education accounts.
	AutoSecurity OptBool `json:"auto_security"`
	// Whether to block users in specific domains from joining meetings and webinars.
	BlockUserDomain OptBool `json:"block_user_domain"`
	// Whether the meeting passcode will be encrypted and included in the invitation link. The provided
	// link will allow participants to join the meeting without having to enter the passcode.
	EmbedPasswordInJoinLink OptBool `json:"embed_password_in_join_link"`
	// The type of encryption to use when starting a meeting.
	// * `enhanced_encryption` - Use enhanced encryption. Encryption data is stored in the cloud.
	// * `e2ee` &mdash; End-to-end encryption. The encryption key is stored on the local device and
	// cannot be obtained by anyone else. Enabling E2EE also [**disables** certain
	// features](https://support.zoom.us/hc/en-us/articles/360048660871), such as cloud recording, live
	// streaming, and allowing participants to join before the host.
	EncryptionType OptString `json:"encryption_type"`
	// Whether to enable end-to-end encryption for meetings. If enabled, you can specify the type of
	// encryption in the `encryption_type` field.
	EndToEndEncryptedMeetings OptBool `json:"end_to_end_encrypted_meetings"`
	// Whether all instant and scheduled meetings that users can join via client or Zoom Rooms systems
	// are passcode-protected. [Personal Meeting ID (PMI)](https://support.zoom.
	// us/hc/en-us/articles/203276937) meetings are **not** included in this setting.
	MeetingPassword OptBool `json:"meeting_password"`
	// Whether to specify that only authenticated users can join the meeting from the web client.
	OnlyAuthenticatedCanJoinFromWebclient OptBool `json:"only_authenticated_can_join_from_webclient"`
	// Whether to require a passcode for participants joining by phone.
	// If enabled and the meeting is passcode-protected, a numeric passcode is required for participants
	// to join by phone. For meetings with alphanumeric passcodes, a numeric passcode will be generated.
	PhonePassword OptBool `json:"phone_password"`
	// Whether all personal meeting ID (PMI) meetings that users can join via client or Zoom Rooms
	// systems are passcode-protected.
	PmiPassword OptBool `json:"pmi_password"`
	// Whether participants are placed in the [**Waiting Room**](https://support.zoom.
	// us/hc/en-us/articles/115000332726-Waiting-Room) when they join a meeting.
	// If the **Waiting Room** feature is enabled, the [**Allow participants to join before
	// host**](https://support.zoom.
	// us/hc/en-us/articles/202828525-Allow-participants-to-join-before-host) setting is automatically
	// disabled.
	WaitingRoom OptBool `json:"waiting_room"`
	// Whether to generate a passcode when scheduling webinars. Participants must use the generated
	// passcode to join the scheduled webinar.
	WebinarPassword OptBool `json:"webinar_password"`
}

// GetApprovedOrDeniedCountriesOrRegions returns the value of ApprovedOrDeniedCountriesOrRegions.
func (s *GroupLockedSettingsReq1MeetingSecurity) GetApprovedOrDeniedCountriesOrRegions() OptBool {
	return s.ApprovedOrDeniedCountriesOrRegions
}

// GetAutoSecurity returns the value of AutoSecurity.
func (s *GroupLockedSettingsReq1MeetingSecurity) GetAutoSecurity() OptBool {
	return s.AutoSecurity
}

// GetBlockUserDomain returns the value of BlockUserDomain.
func (s *GroupLockedSettingsReq1MeetingSecurity) GetBlockUserDomain() OptBool {
	return s.BlockUserDomain
}

// GetEmbedPasswordInJoinLink returns the value of EmbedPasswordInJoinLink.
func (s *GroupLockedSettingsReq1MeetingSecurity) GetEmbedPasswordInJoinLink() OptBool {
	return s.EmbedPasswordInJoinLink
}

// GetEncryptionType returns the value of EncryptionType.
func (s *GroupLockedSettingsReq1MeetingSecurity) GetEncryptionType() OptString {
	return s.EncryptionType
}

// GetEndToEndEncryptedMeetings returns the value of EndToEndEncryptedMeetings.
func (s *GroupLockedSettingsReq1MeetingSecurity) GetEndToEndEncryptedMeetings() OptBool {
	return s.EndToEndEncryptedMeetings
}

// GetMeetingPassword returns the value of MeetingPassword.
func (s *GroupLockedSettingsReq1MeetingSecurity) GetMeetingPassword() OptBool {
	return s.MeetingPassword
}

// GetOnlyAuthenticatedCanJoinFromWebclient returns the value of OnlyAuthenticatedCanJoinFromWebclient.
func (s *GroupLockedSettingsReq1MeetingSecurity) GetOnlyAuthenticatedCanJoinFromWebclient() OptBool {
	return s.OnlyAuthenticatedCanJoinFromWebclient
}

// GetPhonePassword returns the value of PhonePassword.
func (s *GroupLockedSettingsReq1MeetingSecurity) GetPhonePassword() OptBool {
	return s.PhonePassword
}

// GetPmiPassword returns the value of PmiPassword.
func (s *GroupLockedSettingsReq1MeetingSecurity) GetPmiPassword() OptBool {
	return s.PmiPassword
}

// GetWaitingRoom returns the value of WaitingRoom.
func (s *GroupLockedSettingsReq1MeetingSecurity) GetWaitingRoom() OptBool {
	return s.WaitingRoom
}

// GetWebinarPassword returns the value of WebinarPassword.
func (s *GroupLockedSettingsReq1MeetingSecurity) GetWebinarPassword() OptBool {
	return s.WebinarPassword
}

// SetApprovedOrDeniedCountriesOrRegions sets the value of ApprovedOrDeniedCountriesOrRegions.
func (s *GroupLockedSettingsReq1MeetingSecurity) SetApprovedOrDeniedCountriesOrRegions(val OptBool) {
	s.ApprovedOrDeniedCountriesOrRegions = val
}

// SetAutoSecurity sets the value of AutoSecurity.
func (s *GroupLockedSettingsReq1MeetingSecurity) SetAutoSecurity(val OptBool) {
	s.AutoSecurity = val
}

// SetBlockUserDomain sets the value of BlockUserDomain.
func (s *GroupLockedSettingsReq1MeetingSecurity) SetBlockUserDomain(val OptBool) {
	s.BlockUserDomain = val
}

// SetEmbedPasswordInJoinLink sets the value of EmbedPasswordInJoinLink.
func (s *GroupLockedSettingsReq1MeetingSecurity) SetEmbedPasswordInJoinLink(val OptBool) {
	s.EmbedPasswordInJoinLink = val
}

// SetEncryptionType sets the value of EncryptionType.
func (s *GroupLockedSettingsReq1MeetingSecurity) SetEncryptionType(val OptString) {
	s.EncryptionType = val
}

// SetEndToEndEncryptedMeetings sets the value of EndToEndEncryptedMeetings.
func (s *GroupLockedSettingsReq1MeetingSecurity) SetEndToEndEncryptedMeetings(val OptBool) {
	s.EndToEndEncryptedMeetings = val
}

// SetMeetingPassword sets the value of MeetingPassword.
func (s *GroupLockedSettingsReq1MeetingSecurity) SetMeetingPassword(val OptBool) {
	s.MeetingPassword = val
}

// SetOnlyAuthenticatedCanJoinFromWebclient sets the value of OnlyAuthenticatedCanJoinFromWebclient.
func (s *GroupLockedSettingsReq1MeetingSecurity) SetOnlyAuthenticatedCanJoinFromWebclient(val OptBool) {
	s.OnlyAuthenticatedCanJoinFromWebclient = val
}

// SetPhonePassword sets the value of PhonePassword.
func (s *GroupLockedSettingsReq1MeetingSecurity) SetPhonePassword(val OptBool) {
	s.PhonePassword = val
}

// SetPmiPassword sets the value of PmiPassword.
func (s *GroupLockedSettingsReq1MeetingSecurity) SetPmiPassword(val OptBool) {
	s.PmiPassword = val
}

// SetWaitingRoom sets the value of WaitingRoom.
func (s *GroupLockedSettingsReq1MeetingSecurity) SetWaitingRoom(val OptBool) {
	s.WaitingRoom = val
}

// SetWebinarPassword sets the value of WebinarPassword.
func (s *GroupLockedSettingsReq1MeetingSecurity) SetWebinarPassword(val OptBool) {
	s.WebinarPassword = val
}

type GroupMembersCreateCreated struct {
	AddedAt OptDateTime `json:"added_at"`
	Ids     OptString   `json:"ids"`
}

// GetAddedAt returns the value of AddedAt.
func (s *GroupMembersCreateCreated) GetAddedAt() OptDateTime {
	return s.AddedAt
}

// GetIds returns the value of Ids.
func (s *GroupMembersCreateCreated) GetIds() OptString {
	return s.Ids
}

// SetAddedAt sets the value of AddedAt.
func (s *GroupMembersCreateCreated) SetAddedAt(val OptDateTime) {
	s.AddedAt = val
}

// SetIds sets the value of Ids.
func (s *GroupMembersCreateCreated) SetIds(val OptString) {
	s.Ids = val
}

func (*GroupMembersCreateCreated) groupMembersCreateRes() {}

// GroupMembersCreateOK is response for GroupMembersCreate operation.
type GroupMembersCreateOK struct{}

func (*GroupMembersCreateOK) groupMembersCreateRes() {}

type GroupMembersCreateReq struct {
	// List of Group members.
	Members []GroupMembersCreateReqMembersItem `json:"members"`
}

// GetMembers returns the value of Members.
func (s *GroupMembersCreateReq) GetMembers() []GroupMembersCreateReqMembersItem {
	return s.Members
}

// SetMembers sets the value of Members.
func (s *GroupMembersCreateReq) SetMembers(val []GroupMembersCreateReqMembersItem) {
	s.Members = val
}

type GroupMembersCreateReqMembersItem struct {
	// User email. If the user ID is given then the user email should be ignored.
	Email OptString `json:"email"`
	// User ID.
	ID OptString `json:"id"`
}

// GetEmail returns the value of Email.
func (s *GroupMembersCreateReqMembersItem) GetEmail() OptString {
	return s.Email
}

// GetID returns the value of ID.
func (s *GroupMembersCreateReqMembersItem) GetID() OptString {
	return s.ID
}

// SetEmail sets the value of Email.
func (s *GroupMembersCreateReqMembersItem) SetEmail(val OptString) {
	s.Email = val
}

// SetID sets the value of ID.
func (s *GroupMembersCreateReqMembersItem) SetID(val OptString) {
	s.ID = val
}

// GroupMembersDeleteNoContent is response for GroupMembersDelete operation.
type GroupMembersDeleteNoContent struct{}

func (*GroupMembersDeleteNoContent) groupMembersDeleteRes() {}

// GroupMembersDeleteOK is response for GroupMembersDelete operation.
type GroupMembersDeleteOK struct{}

func (*GroupMembersDeleteOK) groupMembersDeleteRes() {}

type GroupMembersOK struct {
	Members []GroupMembersOKMembersItem `json:"members"`
	// The next page token is used to paginate through large result sets. A next page token will be
	// returned whenever the set of available results exceeds the current page size. The expiration
	// period for this token is 15 minutes.
	NextPageToken OptString `json:"next_page_token"`
	// The number of pages returned from this request.
	PageCount OptInt `json:"page_count"`
	// The page number of the current results.
	PageNumber OptInt `json:"page_number"`
	// The number of records returned from a single API call.
	PageSize OptInt `json:"page_size"`
	// The total number of records available across all pages.
	TotalRecords OptInt `json:"total_records"`
}

// GetMembers returns the value of Members.
func (s *GroupMembersOK) GetMembers() []GroupMembersOKMembersItem {
	return s.Members
}

// GetNextPageToken returns the value of NextPageToken.
func (s *GroupMembersOK) GetNextPageToken() OptString {
	return s.NextPageToken
}

// GetPageCount returns the value of PageCount.
func (s *GroupMembersOK) GetPageCount() OptInt {
	return s.PageCount
}

// GetPageNumber returns the value of PageNumber.
func (s *GroupMembersOK) GetPageNumber() OptInt {
	return s.PageNumber
}

// GetPageSize returns the value of PageSize.
func (s *GroupMembersOK) GetPageSize() OptInt {
	return s.PageSize
}

// GetTotalRecords returns the value of TotalRecords.
func (s *GroupMembersOK) GetTotalRecords() OptInt {
	return s.TotalRecords
}

// SetMembers sets the value of Members.
func (s *GroupMembersOK) SetMembers(val []GroupMembersOKMembersItem) {
	s.Members = val
}

// SetNextPageToken sets the value of NextPageToken.
func (s *GroupMembersOK) SetNextPageToken(val OptString) {
	s.NextPageToken = val
}

// SetPageCount sets the value of PageCount.
func (s *GroupMembersOK) SetPageCount(val OptInt) {
	s.PageCount = val
}

// SetPageNumber sets the value of PageNumber.
func (s *GroupMembersOK) SetPageNumber(val OptInt) {
	s.PageNumber = val
}

// SetPageSize sets the value of PageSize.
func (s *GroupMembersOK) SetPageSize(val OptInt) {
	s.PageSize = val
}

// SetTotalRecords sets the value of TotalRecords.
func (s *GroupMembersOK) SetTotalRecords(val OptInt) {
	s.TotalRecords = val
}

type GroupMembersOKMembersItem struct {
	// User's email address.
	Email OptString `json:"email"`
	// First name of the user.
	FirstName OptString `json:"first_name"`
	// Unique Identifier of the user.
	ID OptString `json:"id"`
	// Last name of the user.
	LastName OptString `json:"last_name"`
	// User type:
	// `1` - Basic
	// `2` - Licensed.
	Type OptInt `json:"type"`
}

// GetEmail returns the value of Email.
func (s *GroupMembersOKMembersItem) GetEmail() OptString {
	return s.Email
}

// GetFirstName returns the value of FirstName.
func (s *GroupMembersOKMembersItem) GetFirstName() OptString {
	return s.FirstName
}

// GetID returns the value of ID.
func (s *GroupMembersOKMembersItem) GetID() OptString {
	return s.ID
}

// GetLastName returns the value of LastName.
func (s *GroupMembersOKMembersItem) GetLastName() OptString {
	return s.LastName
}

// GetType returns the value of Type.
func (s *GroupMembersOKMembersItem) GetType() OptInt {
	return s.Type
}

// SetEmail sets the value of Email.
func (s *GroupMembersOKMembersItem) SetEmail(val OptString) {
	s.Email = val
}

// SetFirstName sets the value of FirstName.
func (s *GroupMembersOKMembersItem) SetFirstName(val OptString) {
	s.FirstName = val
}

// SetID sets the value of ID.
func (s *GroupMembersOKMembersItem) SetID(val OptString) {
	s.ID = val
}

// SetLastName sets the value of LastName.
func (s *GroupMembersOKMembersItem) SetLastName(val OptString) {
	s.LastName = val
}

// SetType sets the value of Type.
func (s *GroupMembersOKMembersItem) SetType(val OptInt) {
	s.Type = val
}

type GroupOK struct {
	// Group ID.
	ID OptString `json:"id"`
	// Group name.
	Name OptString `json:"name"`
	// Total count of members in the group.
	TotalMembers OptInt `json:"total_members"`
}

// GetID returns the value of ID.
func (s *GroupOK) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *GroupOK) GetName() OptString {
	return s.Name
}

// GetTotalMembers returns the value of TotalMembers.
func (s *GroupOK) GetTotalMembers() OptInt {
	return s.TotalMembers
}

// SetID sets the value of ID.
func (s *GroupOK) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *GroupOK) SetName(val OptString) {
	s.Name = val
}

// SetTotalMembers sets the value of TotalMembers.
func (s *GroupOK) SetTotalMembers(val OptInt) {
	s.TotalMembers = val
}

type GroupSettingsRegistrationOK struct {
	// When participants submit registration, do something.
	Options OptGroupSettingsRegistrationOKOptions `json:"options"`
	// Array of Registrant Questions.
	Questions []GroupSettingsRegistrationOKQuestionsItem `json:"questions"`
	// Approval type for the registration.
	ApproveType OptInt `json:"approve_type"`
	// Array of Registrant Custom Questions.
	CustomQuestions []GroupSettingsRegistrationOKCustomQuestionsItem `json:"custom_questions"`
}

// GetOptions returns the value of Options.
func (s *GroupSettingsRegistrationOK) GetOptions() OptGroupSettingsRegistrationOKOptions {
	return s.Options
}

// GetQuestions returns the value of Questions.
func (s *GroupSettingsRegistrationOK) GetQuestions() []GroupSettingsRegistrationOKQuestionsItem {
	return s.Questions
}

// GetApproveType returns the value of ApproveType.
func (s *GroupSettingsRegistrationOK) GetApproveType() OptInt {
	return s.ApproveType
}

// GetCustomQuestions returns the value of CustomQuestions.
func (s *GroupSettingsRegistrationOK) GetCustomQuestions() []GroupSettingsRegistrationOKCustomQuestionsItem {
	return s.CustomQuestions
}

// SetOptions sets the value of Options.
func (s *GroupSettingsRegistrationOK) SetOptions(val OptGroupSettingsRegistrationOKOptions) {
	s.Options = val
}

// SetQuestions sets the value of Questions.
func (s *GroupSettingsRegistrationOK) SetQuestions(val []GroupSettingsRegistrationOKQuestionsItem) {
	s.Questions = val
}

// SetApproveType sets the value of ApproveType.
func (s *GroupSettingsRegistrationOK) SetApproveType(val OptInt) {
	s.ApproveType = val
}

// SetCustomQuestions sets the value of CustomQuestions.
func (s *GroupSettingsRegistrationOK) SetCustomQuestions(val []GroupSettingsRegistrationOKCustomQuestionsItem) {
	s.CustomQuestions = val
}

type GroupSettingsRegistrationOKCustomQuestionsItem struct {
	// Title of the custom question.
	Title OptString `json:"title"`
	// Type of the question being asked.
	Type OptString `json:"type"`
	// Decide whether this field are required.
	Required OptBool `json:"required"`
	// Indicates whether or not the custom question is required to be answered by participants or not.
	Selected OptBool `json:"selected"`
	// Answer choices for the custom question. Can not be used for `short` question type as this type of
	// question requires registrants to type out the answer.
	Answers []string `json:"answers"`
}

// GetTitle returns the value of Title.
func (s *GroupSettingsRegistrationOKCustomQuestionsItem) GetTitle() OptString {
	return s.Title
}

// GetType returns the value of Type.
func (s *GroupSettingsRegistrationOKCustomQuestionsItem) GetType() OptString {
	return s.Type
}

// GetRequired returns the value of Required.
func (s *GroupSettingsRegistrationOKCustomQuestionsItem) GetRequired() OptBool {
	return s.Required
}

// GetSelected returns the value of Selected.
func (s *GroupSettingsRegistrationOKCustomQuestionsItem) GetSelected() OptBool {
	return s.Selected
}

// GetAnswers returns the value of Answers.
func (s *GroupSettingsRegistrationOKCustomQuestionsItem) GetAnswers() []string {
	return s.Answers
}

// SetTitle sets the value of Title.
func (s *GroupSettingsRegistrationOKCustomQuestionsItem) SetTitle(val OptString) {
	s.Title = val
}

// SetType sets the value of Type.
func (s *GroupSettingsRegistrationOKCustomQuestionsItem) SetType(val OptString) {
	s.Type = val
}

// SetRequired sets the value of Required.
func (s *GroupSettingsRegistrationOKCustomQuestionsItem) SetRequired(val OptBool) {
	s.Required = val
}

// SetSelected sets the value of Selected.
func (s *GroupSettingsRegistrationOKCustomQuestionsItem) SetSelected(val OptBool) {
	s.Selected = val
}

// SetAnswers sets the value of Answers.
func (s *GroupSettingsRegistrationOKCustomQuestionsItem) SetAnswers(val []string) {
	s.Answers = val
}

// When participants submit registration, do something.
type GroupSettingsRegistrationOKOptions struct {
	// Send an email to host when someone registers.
	HostEmailNotification OptBool `json:"host_email_notification"`
	// Close registration after event date.
	CloseRegistration OptBool `json:"close_registration"`
	// Allow participants to join from multiple devices.
	AllowParticipantsToJoinFromMultipleDevices OptBool `json:"allow_participants_to_join_from_multiple_devices"`
	// Show social share buttons on registration page.
	ShowSocialShareButtons OptBool `json:"show_social_share_buttons"`
}

// GetHostEmailNotification returns the value of HostEmailNotification.
func (s *GroupSettingsRegistrationOKOptions) GetHostEmailNotification() OptBool {
	return s.HostEmailNotification
}

// GetCloseRegistration returns the value of CloseRegistration.
func (s *GroupSettingsRegistrationOKOptions) GetCloseRegistration() OptBool {
	return s.CloseRegistration
}

// GetAllowParticipantsToJoinFromMultipleDevices returns the value of AllowParticipantsToJoinFromMultipleDevices.
func (s *GroupSettingsRegistrationOKOptions) GetAllowParticipantsToJoinFromMultipleDevices() OptBool {
	return s.AllowParticipantsToJoinFromMultipleDevices
}

// GetShowSocialShareButtons returns the value of ShowSocialShareButtons.
func (s *GroupSettingsRegistrationOKOptions) GetShowSocialShareButtons() OptBool {
	return s.ShowSocialShareButtons
}

// SetHostEmailNotification sets the value of HostEmailNotification.
func (s *GroupSettingsRegistrationOKOptions) SetHostEmailNotification(val OptBool) {
	s.HostEmailNotification = val
}

// SetCloseRegistration sets the value of CloseRegistration.
func (s *GroupSettingsRegistrationOKOptions) SetCloseRegistration(val OptBool) {
	s.CloseRegistration = val
}

// SetAllowParticipantsToJoinFromMultipleDevices sets the value of AllowParticipantsToJoinFromMultipleDevices.
func (s *GroupSettingsRegistrationOKOptions) SetAllowParticipantsToJoinFromMultipleDevices(val OptBool) {
	s.AllowParticipantsToJoinFromMultipleDevices = val
}

// SetShowSocialShareButtons sets the value of ShowSocialShareButtons.
func (s *GroupSettingsRegistrationOKOptions) SetShowSocialShareButtons(val OptBool) {
	s.ShowSocialShareButtons = val
}

type GroupSettingsRegistrationOKQuestionsItem struct {
	// Field name of the question.
	FieldName OptString `json:"field_name"`
	// Decide whether this field are required.
	Required OptBool `json:"required"`
	// Indicates whether or not the displayed fields are required to be filled out by registrants.
	Selected OptBool `json:"selected"`
}

// GetFieldName returns the value of FieldName.
func (s *GroupSettingsRegistrationOKQuestionsItem) GetFieldName() OptString {
	return s.FieldName
}

// GetRequired returns the value of Required.
func (s *GroupSettingsRegistrationOKQuestionsItem) GetRequired() OptBool {
	return s.Required
}

// GetSelected returns the value of Selected.
func (s *GroupSettingsRegistrationOKQuestionsItem) GetSelected() OptBool {
	return s.Selected
}

// SetFieldName sets the value of FieldName.
func (s *GroupSettingsRegistrationOKQuestionsItem) SetFieldName(val OptString) {
	s.FieldName = val
}

// SetRequired sets the value of Required.
func (s *GroupSettingsRegistrationOKQuestionsItem) SetRequired(val OptBool) {
	s.Required = val
}

// SetSelected sets the value of Selected.
func (s *GroupSettingsRegistrationOKQuestionsItem) SetSelected(val OptBool) {
	s.Selected = val
}

// GroupSettingsRegistrationUpdateNoContent is response for GroupSettingsRegistrationUpdate operation.
type GroupSettingsRegistrationUpdateNoContent struct{}

func (*GroupSettingsRegistrationUpdateNoContent) groupSettingsRegistrationUpdateRes() {}

// GroupSettingsRegistrationUpdateOK is response for GroupSettingsRegistrationUpdate operation.
type GroupSettingsRegistrationUpdateOK struct{}

func (*GroupSettingsRegistrationUpdateOK) groupSettingsRegistrationUpdateRes() {}

type GroupSettingsRegistrationUpdateReq struct {
	// When participants submit registration, do something.
	Options OptGroupSettingsRegistrationUpdateReqOptions `json:"options"`
	// Array of Registrant Questions.
	Questions []GroupSettingsRegistrationUpdateReqQuestionsItem `json:"questions"`
	// Approval type for the registration.
	ApproveType OptInt `json:"approve_type"`
	// Array of Registrant Custom Questions.
	CustomQuestions []GroupSettingsRegistrationUpdateReqCustomQuestionsItem `json:"custom_questions"`
}

// GetOptions returns the value of Options.
func (s *GroupSettingsRegistrationUpdateReq) GetOptions() OptGroupSettingsRegistrationUpdateReqOptions {
	return s.Options
}

// GetQuestions returns the value of Questions.
func (s *GroupSettingsRegistrationUpdateReq) GetQuestions() []GroupSettingsRegistrationUpdateReqQuestionsItem {
	return s.Questions
}

// GetApproveType returns the value of ApproveType.
func (s *GroupSettingsRegistrationUpdateReq) GetApproveType() OptInt {
	return s.ApproveType
}

// GetCustomQuestions returns the value of CustomQuestions.
func (s *GroupSettingsRegistrationUpdateReq) GetCustomQuestions() []GroupSettingsRegistrationUpdateReqCustomQuestionsItem {
	return s.CustomQuestions
}

// SetOptions sets the value of Options.
func (s *GroupSettingsRegistrationUpdateReq) SetOptions(val OptGroupSettingsRegistrationUpdateReqOptions) {
	s.Options = val
}

// SetQuestions sets the value of Questions.
func (s *GroupSettingsRegistrationUpdateReq) SetQuestions(val []GroupSettingsRegistrationUpdateReqQuestionsItem) {
	s.Questions = val
}

// SetApproveType sets the value of ApproveType.
func (s *GroupSettingsRegistrationUpdateReq) SetApproveType(val OptInt) {
	s.ApproveType = val
}

// SetCustomQuestions sets the value of CustomQuestions.
func (s *GroupSettingsRegistrationUpdateReq) SetCustomQuestions(val []GroupSettingsRegistrationUpdateReqCustomQuestionsItem) {
	s.CustomQuestions = val
}

type GroupSettingsRegistrationUpdateReqCustomQuestionsItem struct {
	// Title of the custom question.
	Title OptString `json:"title"`
	// Type of the question being asked.
	Type OptString `json:"type"`
	// Decide whether this field are required.
	Required OptBool `json:"required"`
	// Indicates whether or not the custom question is required to be answered by participants or not.
	Selected OptBool `json:"selected"`
	// Answer choices for the custom question. Can not be used for `short` question type as this type of
	// question requires registrants to type out the answer.
	Answers []string `json:"answers"`
}

// GetTitle returns the value of Title.
func (s *GroupSettingsRegistrationUpdateReqCustomQuestionsItem) GetTitle() OptString {
	return s.Title
}

// GetType returns the value of Type.
func (s *GroupSettingsRegistrationUpdateReqCustomQuestionsItem) GetType() OptString {
	return s.Type
}

// GetRequired returns the value of Required.
func (s *GroupSettingsRegistrationUpdateReqCustomQuestionsItem) GetRequired() OptBool {
	return s.Required
}

// GetSelected returns the value of Selected.
func (s *GroupSettingsRegistrationUpdateReqCustomQuestionsItem) GetSelected() OptBool {
	return s.Selected
}

// GetAnswers returns the value of Answers.
func (s *GroupSettingsRegistrationUpdateReqCustomQuestionsItem) GetAnswers() []string {
	return s.Answers
}

// SetTitle sets the value of Title.
func (s *GroupSettingsRegistrationUpdateReqCustomQuestionsItem) SetTitle(val OptString) {
	s.Title = val
}

// SetType sets the value of Type.
func (s *GroupSettingsRegistrationUpdateReqCustomQuestionsItem) SetType(val OptString) {
	s.Type = val
}

// SetRequired sets the value of Required.
func (s *GroupSettingsRegistrationUpdateReqCustomQuestionsItem) SetRequired(val OptBool) {
	s.Required = val
}

// SetSelected sets the value of Selected.
func (s *GroupSettingsRegistrationUpdateReqCustomQuestionsItem) SetSelected(val OptBool) {
	s.Selected = val
}

// SetAnswers sets the value of Answers.
func (s *GroupSettingsRegistrationUpdateReqCustomQuestionsItem) SetAnswers(val []string) {
	s.Answers = val
}

// When participants submit registration, do something.
type GroupSettingsRegistrationUpdateReqOptions struct {
	// Send an email to host when someone registers.
	HostEmailNotification OptBool `json:"host_email_notification"`
	// Close registration after event date.
	CloseRegistration OptBool `json:"close_registration"`
	// Allow participants to join from multiple devices.
	AllowParticipantsToJoinFromMultipleDevices OptBool `json:"allow_participants_to_join_from_multiple_devices"`
	// Show social share buttons on registration page.
	ShowSocialShareButtons OptBool `json:"show_social_share_buttons"`
}

// GetHostEmailNotification returns the value of HostEmailNotification.
func (s *GroupSettingsRegistrationUpdateReqOptions) GetHostEmailNotification() OptBool {
	return s.HostEmailNotification
}

// GetCloseRegistration returns the value of CloseRegistration.
func (s *GroupSettingsRegistrationUpdateReqOptions) GetCloseRegistration() OptBool {
	return s.CloseRegistration
}

// GetAllowParticipantsToJoinFromMultipleDevices returns the value of AllowParticipantsToJoinFromMultipleDevices.
func (s *GroupSettingsRegistrationUpdateReqOptions) GetAllowParticipantsToJoinFromMultipleDevices() OptBool {
	return s.AllowParticipantsToJoinFromMultipleDevices
}

// GetShowSocialShareButtons returns the value of ShowSocialShareButtons.
func (s *GroupSettingsRegistrationUpdateReqOptions) GetShowSocialShareButtons() OptBool {
	return s.ShowSocialShareButtons
}

// SetHostEmailNotification sets the value of HostEmailNotification.
func (s *GroupSettingsRegistrationUpdateReqOptions) SetHostEmailNotification(val OptBool) {
	s.HostEmailNotification = val
}

// SetCloseRegistration sets the value of CloseRegistration.
func (s *GroupSettingsRegistrationUpdateReqOptions) SetCloseRegistration(val OptBool) {
	s.CloseRegistration = val
}

// SetAllowParticipantsToJoinFromMultipleDevices sets the value of AllowParticipantsToJoinFromMultipleDevices.
func (s *GroupSettingsRegistrationUpdateReqOptions) SetAllowParticipantsToJoinFromMultipleDevices(val OptBool) {
	s.AllowParticipantsToJoinFromMultipleDevices = val
}

// SetShowSocialShareButtons sets the value of ShowSocialShareButtons.
func (s *GroupSettingsRegistrationUpdateReqOptions) SetShowSocialShareButtons(val OptBool) {
	s.ShowSocialShareButtons = val
}

type GroupSettingsRegistrationUpdateReqQuestionsItem struct {
	// Field name of the question.
	FieldName OptString `json:"field_name"`
	// Decide whether this field are required.
	Required OptBool `json:"required"`
	// Indicates whether or not the displayed fields are required to be filled out by registrants.
	Selected OptBool `json:"selected"`
}

// GetFieldName returns the value of FieldName.
func (s *GroupSettingsRegistrationUpdateReqQuestionsItem) GetFieldName() OptString {
	return s.FieldName
}

// GetRequired returns the value of Required.
func (s *GroupSettingsRegistrationUpdateReqQuestionsItem) GetRequired() OptBool {
	return s.Required
}

// GetSelected returns the value of Selected.
func (s *GroupSettingsRegistrationUpdateReqQuestionsItem) GetSelected() OptBool {
	return s.Selected
}

// SetFieldName sets the value of FieldName.
func (s *GroupSettingsRegistrationUpdateReqQuestionsItem) SetFieldName(val OptString) {
	s.FieldName = val
}

// SetRequired sets the value of Required.
func (s *GroupSettingsRegistrationUpdateReqQuestionsItem) SetRequired(val OptBool) {
	s.Required = val
}

// SetSelected sets the value of Selected.
func (s *GroupSettingsRegistrationUpdateReqQuestionsItem) SetSelected(val OptBool) {
	s.Selected = val
}

// GroupUpdateNoContent is response for GroupUpdate operation.
type GroupUpdateNoContent struct{}

func (*GroupUpdateNoContent) groupUpdateRes() {}

// GroupUpdateOK is response for GroupUpdate operation.
type GroupUpdateOK struct{}

func (*GroupUpdateOK) groupUpdateRes() {}

type GroupUpdateReq struct {
	// Group name. It must be unique to one account and less than 128 characters.
	Name OptString `json:"name"`
}

// GetName returns the value of Name.
func (s *GroupUpdateReq) GetName() OptString {
	return s.Name
}

// SetName sets the value of Name.
func (s *GroupUpdateReq) SetName(val OptString) {
	s.Name = val
}

// List of Groups.
type GroupsOK struct {
	// List of Group objects.
	Groups []GroupsOKGroupsItem `json:"groups"`
	// Total records.
	TotalRecords OptInt `json:"total_records"`
}

// GetGroups returns the value of Groups.
func (s *GroupsOK) GetGroups() []GroupsOKGroupsItem {
	return s.Groups
}

// GetTotalRecords returns the value of TotalRecords.
func (s *GroupsOK) GetTotalRecords() OptInt {
	return s.TotalRecords
}

// SetGroups sets the value of Groups.
func (s *GroupsOK) SetGroups(val []GroupsOKGroupsItem) {
	s.Groups = val
}

// SetTotalRecords sets the value of TotalRecords.
func (s *GroupsOK) SetTotalRecords(val OptInt) {
	s.TotalRecords = val
}

// Merged schema.
type GroupsOKGroupsItem struct {
	// Group ID.
	ID OptString `json:"id"`
	// Group name.
	Name OptString `json:"name"`
	// Total number of members in this group.
	TotalMembers OptInt `json:"total_members"`
}

// GetID returns the value of ID.
func (s *GroupsOKGroupsItem) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *GroupsOKGroupsItem) GetName() OptString {
	return s.Name
}

// GetTotalMembers returns the value of TotalMembers.
func (s *GroupsOKGroupsItem) GetTotalMembers() OptInt {
	return s.TotalMembers
}

// SetID sets the value of ID.
func (s *GroupsOKGroupsItem) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *GroupsOKGroupsItem) SetName(val OptString) {
	s.Name = val
}

// SetTotalMembers sets the value of TotalMembers.
func (s *GroupsOKGroupsItem) SetTotalMembers(val OptInt) {
	s.TotalMembers = val
}

type ListCollaborationDevicesOK struct {
	// Total number of records returned.
	TotalRecords         OptInt                                               `json:"total_records"`
	CollaborationDevices []ListCollaborationDevicesOKCollaborationDevicesItem `json:"collaboration_devices"`
}

// GetTotalRecords returns the value of TotalRecords.
func (s *ListCollaborationDevicesOK) GetTotalRecords() OptInt {
	return s.TotalRecords
}

// GetCollaborationDevices returns the value of CollaborationDevices.
func (s *ListCollaborationDevicesOK) GetCollaborationDevices() []ListCollaborationDevicesOKCollaborationDevicesItem {
	return s.CollaborationDevices
}

// SetTotalRecords sets the value of TotalRecords.
func (s *ListCollaborationDevicesOK) SetTotalRecords(val OptInt) {
	s.TotalRecords = val
}

// SetCollaborationDevices sets the value of CollaborationDevices.
func (s *ListCollaborationDevicesOK) SetCollaborationDevices(val []ListCollaborationDevicesOKCollaborationDevicesItem) {
	s.CollaborationDevices = val
}

// Information about the collaboration device detail.
type ListCollaborationDevicesOKCollaborationDevicesItem struct {
	// The device's unique identifier.
	ID OptString `json:"id"`
	// Name of the Personal Zoom Room's device.
	DeviceName OptString `json:"device_name"`
	// Name of the Personal Zoom Room.
	RoomName OptString `json:"room_name"`
	// The device's unique identifier.
	RoomUserID OptString `json:"room_user_id"`
	// The device's status. The value can be either `Online` or `Offline`.
	Status OptString `json:"status"`
}

// GetID returns the value of ID.
func (s *ListCollaborationDevicesOKCollaborationDevicesItem) GetID() OptString {
	return s.ID
}

// GetDeviceName returns the value of DeviceName.
func (s *ListCollaborationDevicesOKCollaborationDevicesItem) GetDeviceName() OptString {
	return s.DeviceName
}

// GetRoomName returns the value of RoomName.
func (s *ListCollaborationDevicesOKCollaborationDevicesItem) GetRoomName() OptString {
	return s.RoomName
}

// GetRoomUserID returns the value of RoomUserID.
func (s *ListCollaborationDevicesOKCollaborationDevicesItem) GetRoomUserID() OptString {
	return s.RoomUserID
}

// GetStatus returns the value of Status.
func (s *ListCollaborationDevicesOKCollaborationDevicesItem) GetStatus() OptString {
	return s.Status
}

// SetID sets the value of ID.
func (s *ListCollaborationDevicesOKCollaborationDevicesItem) SetID(val OptString) {
	s.ID = val
}

// SetDeviceName sets the value of DeviceName.
func (s *ListCollaborationDevicesOKCollaborationDevicesItem) SetDeviceName(val OptString) {
	s.DeviceName = val
}

// SetRoomName sets the value of RoomName.
func (s *ListCollaborationDevicesOKCollaborationDevicesItem) SetRoomName(val OptString) {
	s.RoomName = val
}

// SetRoomUserID sets the value of RoomUserID.
func (s *ListCollaborationDevicesOKCollaborationDevicesItem) SetRoomUserID(val OptString) {
	s.RoomUserID = val
}

// SetStatus sets the value of Status.
func (s *ListCollaborationDevicesOKCollaborationDevicesItem) SetStatus(val OptString) {
	s.Status = val
}

type OpenapiAuthorization struct {
	APIKey string
}

// GetAPIKey returns the value of APIKey.
func (s *OpenapiAuthorization) GetAPIKey() string {
	return s.APIKey
}

// SetAPIKey sets the value of APIKey.
func (s *OpenapiAuthorization) SetAPIKey(val string) {
	s.APIKey = val
}

type OpenapiOAuth struct {
	Token  string
	Scopes []string
}

// GetToken returns the value of Token.
func (s *OpenapiOAuth) GetToken() string {
	return s.Token
}

// GetScopes returns the value of Scopes.
func (s *OpenapiOAuth) GetScopes() []string {
	return s.Scopes
}

// SetToken sets the value of Token.
func (s *OpenapiOAuth) SetToken(val string) {
	s.Token = val
}

// SetScopes sets the value of Scopes.
func (s *OpenapiOAuth) SetScopes(val []string) {
	s.Scopes = val
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBulkUpdateFeatureReq returns new OptBulkUpdateFeatureReq with value set to v.
func NewOptBulkUpdateFeatureReq(v BulkUpdateFeatureReq) OptBulkUpdateFeatureReq {
	return OptBulkUpdateFeatureReq{
		Value: v,
		Set:   true,
	}
}

// OptBulkUpdateFeatureReq is optional BulkUpdateFeatureReq.
type OptBulkUpdateFeatureReq struct {
	Value BulkUpdateFeatureReq
	Set   bool
}

// IsSet returns true if OptBulkUpdateFeatureReq was set.
func (o OptBulkUpdateFeatureReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBulkUpdateFeatureReq) Reset() {
	var v BulkUpdateFeatureReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBulkUpdateFeatureReq) SetTo(v BulkUpdateFeatureReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBulkUpdateFeatureReq) Get() (v BulkUpdateFeatureReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBulkUpdateFeatureReq) Or(d BulkUpdateFeatureReq) BulkUpdateFeatureReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContactGroupCreateReq returns new OptContactGroupCreateReq with value set to v.
func NewOptContactGroupCreateReq(v ContactGroupCreateReq) OptContactGroupCreateReq {
	return OptContactGroupCreateReq{
		Value: v,
		Set:   true,
	}
}

// OptContactGroupCreateReq is optional ContactGroupCreateReq.
type OptContactGroupCreateReq struct {
	Value ContactGroupCreateReq
	Set   bool
}

// IsSet returns true if OptContactGroupCreateReq was set.
func (o OptContactGroupCreateReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContactGroupCreateReq) Reset() {
	var v ContactGroupCreateReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContactGroupCreateReq) SetTo(v ContactGroupCreateReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContactGroupCreateReq) Get() (v ContactGroupCreateReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContactGroupCreateReq) Or(d ContactGroupCreateReq) ContactGroupCreateReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContactGroupMemberAddReq returns new OptContactGroupMemberAddReq with value set to v.
func NewOptContactGroupMemberAddReq(v ContactGroupMemberAddReq) OptContactGroupMemberAddReq {
	return OptContactGroupMemberAddReq{
		Value: v,
		Set:   true,
	}
}

// OptContactGroupMemberAddReq is optional ContactGroupMemberAddReq.
type OptContactGroupMemberAddReq struct {
	Value ContactGroupMemberAddReq
	Set   bool
}

// IsSet returns true if OptContactGroupMemberAddReq was set.
func (o OptContactGroupMemberAddReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContactGroupMemberAddReq) Reset() {
	var v ContactGroupMemberAddReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContactGroupMemberAddReq) SetTo(v ContactGroupMemberAddReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContactGroupMemberAddReq) Get() (v ContactGroupMemberAddReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContactGroupMemberAddReq) Or(d ContactGroupMemberAddReq) ContactGroupMemberAddReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContactGroupUpdateReq returns new OptContactGroupUpdateReq with value set to v.
func NewOptContactGroupUpdateReq(v ContactGroupUpdateReq) OptContactGroupUpdateReq {
	return OptContactGroupUpdateReq{
		Value: v,
		Set:   true,
	}
}

// OptContactGroupUpdateReq is optional ContactGroupUpdateReq.
type OptContactGroupUpdateReq struct {
	Value ContactGroupUpdateReq
	Set   bool
}

// IsSet returns true if OptContactGroupUpdateReq was set.
func (o OptContactGroupUpdateReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContactGroupUpdateReq) Reset() {
	var v ContactGroupUpdateReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContactGroupUpdateReq) SetTo(v ContactGroupUpdateReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContactGroupUpdateReq) Get() (v ContactGroupUpdateReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContactGroupUpdateReq) Or(d ContactGroupUpdateReq) ContactGroupUpdateReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupLockSettingsOK0AudioConferencing returns new OptGetGroupLockSettingsOK0AudioConferencing with value set to v.
func NewOptGetGroupLockSettingsOK0AudioConferencing(v GetGroupLockSettingsOK0AudioConferencing) OptGetGroupLockSettingsOK0AudioConferencing {
	return OptGetGroupLockSettingsOK0AudioConferencing{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupLockSettingsOK0AudioConferencing is optional GetGroupLockSettingsOK0AudioConferencing.
type OptGetGroupLockSettingsOK0AudioConferencing struct {
	Value GetGroupLockSettingsOK0AudioConferencing
	Set   bool
}

// IsSet returns true if OptGetGroupLockSettingsOK0AudioConferencing was set.
func (o OptGetGroupLockSettingsOK0AudioConferencing) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetGroupLockSettingsOK0AudioConferencing) Reset() {
	var v GetGroupLockSettingsOK0AudioConferencing
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupLockSettingsOK0AudioConferencing) SetTo(v GetGroupLockSettingsOK0AudioConferencing) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupLockSettingsOK0AudioConferencing) Get() (v GetGroupLockSettingsOK0AudioConferencing, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupLockSettingsOK0AudioConferencing) Or(d GetGroupLockSettingsOK0AudioConferencing) GetGroupLockSettingsOK0AudioConferencing {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupLockSettingsOK0EmailNotification returns new OptGetGroupLockSettingsOK0EmailNotification with value set to v.
func NewOptGetGroupLockSettingsOK0EmailNotification(v GetGroupLockSettingsOK0EmailNotification) OptGetGroupLockSettingsOK0EmailNotification {
	return OptGetGroupLockSettingsOK0EmailNotification{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupLockSettingsOK0EmailNotification is optional GetGroupLockSettingsOK0EmailNotification.
type OptGetGroupLockSettingsOK0EmailNotification struct {
	Value GetGroupLockSettingsOK0EmailNotification
	Set   bool
}

// IsSet returns true if OptGetGroupLockSettingsOK0EmailNotification was set.
func (o OptGetGroupLockSettingsOK0EmailNotification) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetGroupLockSettingsOK0EmailNotification) Reset() {
	var v GetGroupLockSettingsOK0EmailNotification
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupLockSettingsOK0EmailNotification) SetTo(v GetGroupLockSettingsOK0EmailNotification) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupLockSettingsOK0EmailNotification) Get() (v GetGroupLockSettingsOK0EmailNotification, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupLockSettingsOK0EmailNotification) Or(d GetGroupLockSettingsOK0EmailNotification) GetGroupLockSettingsOK0EmailNotification {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupLockSettingsOK0InMeeting returns new OptGetGroupLockSettingsOK0InMeeting with value set to v.
func NewOptGetGroupLockSettingsOK0InMeeting(v GetGroupLockSettingsOK0InMeeting) OptGetGroupLockSettingsOK0InMeeting {
	return OptGetGroupLockSettingsOK0InMeeting{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupLockSettingsOK0InMeeting is optional GetGroupLockSettingsOK0InMeeting.
type OptGetGroupLockSettingsOK0InMeeting struct {
	Value GetGroupLockSettingsOK0InMeeting
	Set   bool
}

// IsSet returns true if OptGetGroupLockSettingsOK0InMeeting was set.
func (o OptGetGroupLockSettingsOK0InMeeting) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetGroupLockSettingsOK0InMeeting) Reset() {
	var v GetGroupLockSettingsOK0InMeeting
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupLockSettingsOK0InMeeting) SetTo(v GetGroupLockSettingsOK0InMeeting) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupLockSettingsOK0InMeeting) Get() (v GetGroupLockSettingsOK0InMeeting, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupLockSettingsOK0InMeeting) Or(d GetGroupLockSettingsOK0InMeeting) GetGroupLockSettingsOK0InMeeting {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupLockSettingsOK0OtherOptions returns new OptGetGroupLockSettingsOK0OtherOptions with value set to v.
func NewOptGetGroupLockSettingsOK0OtherOptions(v GetGroupLockSettingsOK0OtherOptions) OptGetGroupLockSettingsOK0OtherOptions {
	return OptGetGroupLockSettingsOK0OtherOptions{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupLockSettingsOK0OtherOptions is optional GetGroupLockSettingsOK0OtherOptions.
type OptGetGroupLockSettingsOK0OtherOptions struct {
	Value GetGroupLockSettingsOK0OtherOptions
	Set   bool
}

// IsSet returns true if OptGetGroupLockSettingsOK0OtherOptions was set.
func (o OptGetGroupLockSettingsOK0OtherOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetGroupLockSettingsOK0OtherOptions) Reset() {
	var v GetGroupLockSettingsOK0OtherOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupLockSettingsOK0OtherOptions) SetTo(v GetGroupLockSettingsOK0OtherOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupLockSettingsOK0OtherOptions) Get() (v GetGroupLockSettingsOK0OtherOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupLockSettingsOK0OtherOptions) Or(d GetGroupLockSettingsOK0OtherOptions) GetGroupLockSettingsOK0OtherOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupLockSettingsOK0Recording returns new OptGetGroupLockSettingsOK0Recording with value set to v.
func NewOptGetGroupLockSettingsOK0Recording(v GetGroupLockSettingsOK0Recording) OptGetGroupLockSettingsOK0Recording {
	return OptGetGroupLockSettingsOK0Recording{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupLockSettingsOK0Recording is optional GetGroupLockSettingsOK0Recording.
type OptGetGroupLockSettingsOK0Recording struct {
	Value GetGroupLockSettingsOK0Recording
	Set   bool
}

// IsSet returns true if OptGetGroupLockSettingsOK0Recording was set.
func (o OptGetGroupLockSettingsOK0Recording) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetGroupLockSettingsOK0Recording) Reset() {
	var v GetGroupLockSettingsOK0Recording
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupLockSettingsOK0Recording) SetTo(v GetGroupLockSettingsOK0Recording) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupLockSettingsOK0Recording) Get() (v GetGroupLockSettingsOK0Recording, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupLockSettingsOK0Recording) Or(d GetGroupLockSettingsOK0Recording) GetGroupLockSettingsOK0Recording {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupLockSettingsOK0RecordingIPAddressAccessControl returns new OptGetGroupLockSettingsOK0RecordingIPAddressAccessControl with value set to v.
func NewOptGetGroupLockSettingsOK0RecordingIPAddressAccessControl(v GetGroupLockSettingsOK0RecordingIPAddressAccessControl) OptGetGroupLockSettingsOK0RecordingIPAddressAccessControl {
	return OptGetGroupLockSettingsOK0RecordingIPAddressAccessControl{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupLockSettingsOK0RecordingIPAddressAccessControl is optional GetGroupLockSettingsOK0RecordingIPAddressAccessControl.
type OptGetGroupLockSettingsOK0RecordingIPAddressAccessControl struct {
	Value GetGroupLockSettingsOK0RecordingIPAddressAccessControl
	Set   bool
}

// IsSet returns true if OptGetGroupLockSettingsOK0RecordingIPAddressAccessControl was set.
func (o OptGetGroupLockSettingsOK0RecordingIPAddressAccessControl) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetGroupLockSettingsOK0RecordingIPAddressAccessControl) Reset() {
	var v GetGroupLockSettingsOK0RecordingIPAddressAccessControl
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupLockSettingsOK0RecordingIPAddressAccessControl) SetTo(v GetGroupLockSettingsOK0RecordingIPAddressAccessControl) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupLockSettingsOK0RecordingIPAddressAccessControl) Get() (v GetGroupLockSettingsOK0RecordingIPAddressAccessControl, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupLockSettingsOK0RecordingIPAddressAccessControl) Or(d GetGroupLockSettingsOK0RecordingIPAddressAccessControl) GetGroupLockSettingsOK0RecordingIPAddressAccessControl {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupLockSettingsOK0ScheduleMeeting returns new OptGetGroupLockSettingsOK0ScheduleMeeting with value set to v.
func NewOptGetGroupLockSettingsOK0ScheduleMeeting(v GetGroupLockSettingsOK0ScheduleMeeting) OptGetGroupLockSettingsOK0ScheduleMeeting {
	return OptGetGroupLockSettingsOK0ScheduleMeeting{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupLockSettingsOK0ScheduleMeeting is optional GetGroupLockSettingsOK0ScheduleMeeting.
type OptGetGroupLockSettingsOK0ScheduleMeeting struct {
	Value GetGroupLockSettingsOK0ScheduleMeeting
	Set   bool
}

// IsSet returns true if OptGetGroupLockSettingsOK0ScheduleMeeting was set.
func (o OptGetGroupLockSettingsOK0ScheduleMeeting) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetGroupLockSettingsOK0ScheduleMeeting) Reset() {
	var v GetGroupLockSettingsOK0ScheduleMeeting
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupLockSettingsOK0ScheduleMeeting) SetTo(v GetGroupLockSettingsOK0ScheduleMeeting) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupLockSettingsOK0ScheduleMeeting) Get() (v GetGroupLockSettingsOK0ScheduleMeeting, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupLockSettingsOK0ScheduleMeeting) Or(d GetGroupLockSettingsOK0ScheduleMeeting) GetGroupLockSettingsOK0ScheduleMeeting {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupLockSettingsOK0Telephony returns new OptGetGroupLockSettingsOK0Telephony with value set to v.
func NewOptGetGroupLockSettingsOK0Telephony(v GetGroupLockSettingsOK0Telephony) OptGetGroupLockSettingsOK0Telephony {
	return OptGetGroupLockSettingsOK0Telephony{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupLockSettingsOK0Telephony is optional GetGroupLockSettingsOK0Telephony.
type OptGetGroupLockSettingsOK0Telephony struct {
	Value GetGroupLockSettingsOK0Telephony
	Set   bool
}

// IsSet returns true if OptGetGroupLockSettingsOK0Telephony was set.
func (o OptGetGroupLockSettingsOK0Telephony) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetGroupLockSettingsOK0Telephony) Reset() {
	var v GetGroupLockSettingsOK0Telephony
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupLockSettingsOK0Telephony) SetTo(v GetGroupLockSettingsOK0Telephony) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupLockSettingsOK0Telephony) Get() (v GetGroupLockSettingsOK0Telephony, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupLockSettingsOK0Telephony) Or(d GetGroupLockSettingsOK0Telephony) GetGroupLockSettingsOK0Telephony {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupLockSettingsOK1MeetingSecurity returns new OptGetGroupLockSettingsOK1MeetingSecurity with value set to v.
func NewOptGetGroupLockSettingsOK1MeetingSecurity(v GetGroupLockSettingsOK1MeetingSecurity) OptGetGroupLockSettingsOK1MeetingSecurity {
	return OptGetGroupLockSettingsOK1MeetingSecurity{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupLockSettingsOK1MeetingSecurity is optional GetGroupLockSettingsOK1MeetingSecurity.
type OptGetGroupLockSettingsOK1MeetingSecurity struct {
	Value GetGroupLockSettingsOK1MeetingSecurity
	Set   bool
}

// IsSet returns true if OptGetGroupLockSettingsOK1MeetingSecurity was set.
func (o OptGetGroupLockSettingsOK1MeetingSecurity) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetGroupLockSettingsOK1MeetingSecurity) Reset() {
	var v GetGroupLockSettingsOK1MeetingSecurity
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupLockSettingsOK1MeetingSecurity) SetTo(v GetGroupLockSettingsOK1MeetingSecurity) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupLockSettingsOK1MeetingSecurity) Get() (v GetGroupLockSettingsOK1MeetingSecurity, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupLockSettingsOK1MeetingSecurity) Or(d GetGroupLockSettingsOK1MeetingSecurity) GetGroupLockSettingsOK1MeetingSecurity {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupSettingsOK0AudioConferencing returns new OptGetGroupSettingsOK0AudioConferencing with value set to v.
func NewOptGetGroupSettingsOK0AudioConferencing(v GetGroupSettingsOK0AudioConferencing) OptGetGroupSettingsOK0AudioConferencing {
	return OptGetGroupSettingsOK0AudioConferencing{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupSettingsOK0AudioConferencing is optional GetGroupSettingsOK0AudioConferencing.
type OptGetGroupSettingsOK0AudioConferencing struct {
	Value GetGroupSettingsOK0AudioConferencing
	Set   bool
}

// IsSet returns true if OptGetGroupSettingsOK0AudioConferencing was set.
func (o OptGetGroupSettingsOK0AudioConferencing) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetGroupSettingsOK0AudioConferencing) Reset() {
	var v GetGroupSettingsOK0AudioConferencing
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupSettingsOK0AudioConferencing) SetTo(v GetGroupSettingsOK0AudioConferencing) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupSettingsOK0AudioConferencing) Get() (v GetGroupSettingsOK0AudioConferencing, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupSettingsOK0AudioConferencing) Or(d GetGroupSettingsOK0AudioConferencing) GetGroupSettingsOK0AudioConferencing {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall returns new OptGetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall with value set to v.
func NewOptGetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall(v GetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall) OptGetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall {
	return OptGetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall is optional GetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall.
type OptGetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall struct {
	Value GetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall
	Set   bool
}

// IsSet returns true if OptGetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall was set.
func (o OptGetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptGetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall) Reset() {
	var v GetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall) SetTo(v GetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall) Get() (v GetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall) Or(d GetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall) GetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupSettingsOK0Chat returns new OptGetGroupSettingsOK0Chat with value set to v.
func NewOptGetGroupSettingsOK0Chat(v GetGroupSettingsOK0Chat) OptGetGroupSettingsOK0Chat {
	return OptGetGroupSettingsOK0Chat{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupSettingsOK0Chat is optional GetGroupSettingsOK0Chat.
type OptGetGroupSettingsOK0Chat struct {
	Value GetGroupSettingsOK0Chat
	Set   bool
}

// IsSet returns true if OptGetGroupSettingsOK0Chat was set.
func (o OptGetGroupSettingsOK0Chat) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetGroupSettingsOK0Chat) Reset() {
	var v GetGroupSettingsOK0Chat
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupSettingsOK0Chat) SetTo(v GetGroupSettingsOK0Chat) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupSettingsOK0Chat) Get() (v GetGroupSettingsOK0Chat, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupSettingsOK0Chat) Or(d GetGroupSettingsOK0Chat) GetGroupSettingsOK0Chat {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupSettingsOK0ChatAllowUsersToAddContacts returns new OptGetGroupSettingsOK0ChatAllowUsersToAddContacts with value set to v.
func NewOptGetGroupSettingsOK0ChatAllowUsersToAddContacts(v GetGroupSettingsOK0ChatAllowUsersToAddContacts) OptGetGroupSettingsOK0ChatAllowUsersToAddContacts {
	return OptGetGroupSettingsOK0ChatAllowUsersToAddContacts{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupSettingsOK0ChatAllowUsersToAddContacts is optional GetGroupSettingsOK0ChatAllowUsersToAddContacts.
type OptGetGroupSettingsOK0ChatAllowUsersToAddContacts struct {
	Value GetGroupSettingsOK0ChatAllowUsersToAddContacts
	Set   bool
}

// IsSet returns true if OptGetGroupSettingsOK0ChatAllowUsersToAddContacts was set.
func (o OptGetGroupSettingsOK0ChatAllowUsersToAddContacts) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetGroupSettingsOK0ChatAllowUsersToAddContacts) Reset() {
	var v GetGroupSettingsOK0ChatAllowUsersToAddContacts
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupSettingsOK0ChatAllowUsersToAddContacts) SetTo(v GetGroupSettingsOK0ChatAllowUsersToAddContacts) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupSettingsOK0ChatAllowUsersToAddContacts) Get() (v GetGroupSettingsOK0ChatAllowUsersToAddContacts, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupSettingsOK0ChatAllowUsersToAddContacts) Or(d GetGroupSettingsOK0ChatAllowUsersToAddContacts) GetGroupSettingsOK0ChatAllowUsersToAddContacts {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupSettingsOK0ChatAllowUsersToChatWithOthers returns new OptGetGroupSettingsOK0ChatAllowUsersToChatWithOthers with value set to v.
func NewOptGetGroupSettingsOK0ChatAllowUsersToChatWithOthers(v GetGroupSettingsOK0ChatAllowUsersToChatWithOthers) OptGetGroupSettingsOK0ChatAllowUsersToChatWithOthers {
	return OptGetGroupSettingsOK0ChatAllowUsersToChatWithOthers{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupSettingsOK0ChatAllowUsersToChatWithOthers is optional GetGroupSettingsOK0ChatAllowUsersToChatWithOthers.
type OptGetGroupSettingsOK0ChatAllowUsersToChatWithOthers struct {
	Value GetGroupSettingsOK0ChatAllowUsersToChatWithOthers
	Set   bool
}

// IsSet returns true if OptGetGroupSettingsOK0ChatAllowUsersToChatWithOthers was set.
func (o OptGetGroupSettingsOK0ChatAllowUsersToChatWithOthers) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetGroupSettingsOK0ChatAllowUsersToChatWithOthers) Reset() {
	var v GetGroupSettingsOK0ChatAllowUsersToChatWithOthers
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupSettingsOK0ChatAllowUsersToChatWithOthers) SetTo(v GetGroupSettingsOK0ChatAllowUsersToChatWithOthers) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupSettingsOK0ChatAllowUsersToChatWithOthers) Get() (v GetGroupSettingsOK0ChatAllowUsersToChatWithOthers, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupSettingsOK0ChatAllowUsersToChatWithOthers) Or(d GetGroupSettingsOK0ChatAllowUsersToChatWithOthers) GetGroupSettingsOK0ChatAllowUsersToChatWithOthers {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupSettingsOK0ChatChatEmojis returns new OptGetGroupSettingsOK0ChatChatEmojis with value set to v.
func NewOptGetGroupSettingsOK0ChatChatEmojis(v GetGroupSettingsOK0ChatChatEmojis) OptGetGroupSettingsOK0ChatChatEmojis {
	return OptGetGroupSettingsOK0ChatChatEmojis{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupSettingsOK0ChatChatEmojis is optional GetGroupSettingsOK0ChatChatEmojis.
type OptGetGroupSettingsOK0ChatChatEmojis struct {
	Value GetGroupSettingsOK0ChatChatEmojis
	Set   bool
}

// IsSet returns true if OptGetGroupSettingsOK0ChatChatEmojis was set.
func (o OptGetGroupSettingsOK0ChatChatEmojis) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetGroupSettingsOK0ChatChatEmojis) Reset() {
	var v GetGroupSettingsOK0ChatChatEmojis
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupSettingsOK0ChatChatEmojis) SetTo(v GetGroupSettingsOK0ChatChatEmojis) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupSettingsOK0ChatChatEmojis) Get() (v GetGroupSettingsOK0ChatChatEmojis, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupSettingsOK0ChatChatEmojis) Or(d GetGroupSettingsOK0ChatChatEmojis) GetGroupSettingsOK0ChatChatEmojis {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupSettingsOK0ChatChatEtiquetteTool returns new OptGetGroupSettingsOK0ChatChatEtiquetteTool with value set to v.
func NewOptGetGroupSettingsOK0ChatChatEtiquetteTool(v GetGroupSettingsOK0ChatChatEtiquetteTool) OptGetGroupSettingsOK0ChatChatEtiquetteTool {
	return OptGetGroupSettingsOK0ChatChatEtiquetteTool{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupSettingsOK0ChatChatEtiquetteTool is optional GetGroupSettingsOK0ChatChatEtiquetteTool.
type OptGetGroupSettingsOK0ChatChatEtiquetteTool struct {
	Value GetGroupSettingsOK0ChatChatEtiquetteTool
	Set   bool
}

// IsSet returns true if OptGetGroupSettingsOK0ChatChatEtiquetteTool was set.
func (o OptGetGroupSettingsOK0ChatChatEtiquetteTool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetGroupSettingsOK0ChatChatEtiquetteTool) Reset() {
	var v GetGroupSettingsOK0ChatChatEtiquetteTool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupSettingsOK0ChatChatEtiquetteTool) SetTo(v GetGroupSettingsOK0ChatChatEtiquetteTool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupSettingsOK0ChatChatEtiquetteTool) Get() (v GetGroupSettingsOK0ChatChatEtiquetteTool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupSettingsOK0ChatChatEtiquetteTool) Or(d GetGroupSettingsOK0ChatChatEtiquetteTool) GetGroupSettingsOK0ChatChatEtiquetteTool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupSettingsOK0ChatSearchAndSendAnimatedGIFImages returns new OptGetGroupSettingsOK0ChatSearchAndSendAnimatedGIFImages with value set to v.
func NewOptGetGroupSettingsOK0ChatSearchAndSendAnimatedGIFImages(v GetGroupSettingsOK0ChatSearchAndSendAnimatedGIFImages) OptGetGroupSettingsOK0ChatSearchAndSendAnimatedGIFImages {
	return OptGetGroupSettingsOK0ChatSearchAndSendAnimatedGIFImages{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupSettingsOK0ChatSearchAndSendAnimatedGIFImages is optional GetGroupSettingsOK0ChatSearchAndSendAnimatedGIFImages.
type OptGetGroupSettingsOK0ChatSearchAndSendAnimatedGIFImages struct {
	Value GetGroupSettingsOK0ChatSearchAndSendAnimatedGIFImages
	Set   bool
}

// IsSet returns true if OptGetGroupSettingsOK0ChatSearchAndSendAnimatedGIFImages was set.
func (o OptGetGroupSettingsOK0ChatSearchAndSendAnimatedGIFImages) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetGroupSettingsOK0ChatSearchAndSendAnimatedGIFImages) Reset() {
	var v GetGroupSettingsOK0ChatSearchAndSendAnimatedGIFImages
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupSettingsOK0ChatSearchAndSendAnimatedGIFImages) SetTo(v GetGroupSettingsOK0ChatSearchAndSendAnimatedGIFImages) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupSettingsOK0ChatSearchAndSendAnimatedGIFImages) Get() (v GetGroupSettingsOK0ChatSearchAndSendAnimatedGIFImages, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupSettingsOK0ChatSearchAndSendAnimatedGIFImages) Or(d GetGroupSettingsOK0ChatSearchAndSendAnimatedGIFImages) GetGroupSettingsOK0ChatSearchAndSendAnimatedGIFImages {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupSettingsOK0ChatSendDataToThirdPartyArchivingService returns new OptGetGroupSettingsOK0ChatSendDataToThirdPartyArchivingService with value set to v.
func NewOptGetGroupSettingsOK0ChatSendDataToThirdPartyArchivingService(v GetGroupSettingsOK0ChatSendDataToThirdPartyArchivingService) OptGetGroupSettingsOK0ChatSendDataToThirdPartyArchivingService {
	return OptGetGroupSettingsOK0ChatSendDataToThirdPartyArchivingService{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupSettingsOK0ChatSendDataToThirdPartyArchivingService is optional GetGroupSettingsOK0ChatSendDataToThirdPartyArchivingService.
type OptGetGroupSettingsOK0ChatSendDataToThirdPartyArchivingService struct {
	Value GetGroupSettingsOK0ChatSendDataToThirdPartyArchivingService
	Set   bool
}

// IsSet returns true if OptGetGroupSettingsOK0ChatSendDataToThirdPartyArchivingService was set.
func (o OptGetGroupSettingsOK0ChatSendDataToThirdPartyArchivingService) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetGroupSettingsOK0ChatSendDataToThirdPartyArchivingService) Reset() {
	var v GetGroupSettingsOK0ChatSendDataToThirdPartyArchivingService
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupSettingsOK0ChatSendDataToThirdPartyArchivingService) SetTo(v GetGroupSettingsOK0ChatSendDataToThirdPartyArchivingService) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupSettingsOK0ChatSendDataToThirdPartyArchivingService) Get() (v GetGroupSettingsOK0ChatSendDataToThirdPartyArchivingService, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupSettingsOK0ChatSendDataToThirdPartyArchivingService) Or(d GetGroupSettingsOK0ChatSendDataToThirdPartyArchivingService) GetGroupSettingsOK0ChatSendDataToThirdPartyArchivingService {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupSettingsOK0ChatSetRetentionPeriodInCloud returns new OptGetGroupSettingsOK0ChatSetRetentionPeriodInCloud with value set to v.
func NewOptGetGroupSettingsOK0ChatSetRetentionPeriodInCloud(v GetGroupSettingsOK0ChatSetRetentionPeriodInCloud) OptGetGroupSettingsOK0ChatSetRetentionPeriodInCloud {
	return OptGetGroupSettingsOK0ChatSetRetentionPeriodInCloud{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupSettingsOK0ChatSetRetentionPeriodInCloud is optional GetGroupSettingsOK0ChatSetRetentionPeriodInCloud.
type OptGetGroupSettingsOK0ChatSetRetentionPeriodInCloud struct {
	Value GetGroupSettingsOK0ChatSetRetentionPeriodInCloud
	Set   bool
}

// IsSet returns true if OptGetGroupSettingsOK0ChatSetRetentionPeriodInCloud was set.
func (o OptGetGroupSettingsOK0ChatSetRetentionPeriodInCloud) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetGroupSettingsOK0ChatSetRetentionPeriodInCloud) Reset() {
	var v GetGroupSettingsOK0ChatSetRetentionPeriodInCloud
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupSettingsOK0ChatSetRetentionPeriodInCloud) SetTo(v GetGroupSettingsOK0ChatSetRetentionPeriodInCloud) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupSettingsOK0ChatSetRetentionPeriodInCloud) Get() (v GetGroupSettingsOK0ChatSetRetentionPeriodInCloud, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupSettingsOK0ChatSetRetentionPeriodInCloud) Or(d GetGroupSettingsOK0ChatSetRetentionPeriodInCloud) GetGroupSettingsOK0ChatSetRetentionPeriodInCloud {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupSettingsOK0ChatSetRetentionPeriodInLocal returns new OptGetGroupSettingsOK0ChatSetRetentionPeriodInLocal with value set to v.
func NewOptGetGroupSettingsOK0ChatSetRetentionPeriodInLocal(v GetGroupSettingsOK0ChatSetRetentionPeriodInLocal) OptGetGroupSettingsOK0ChatSetRetentionPeriodInLocal {
	return OptGetGroupSettingsOK0ChatSetRetentionPeriodInLocal{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupSettingsOK0ChatSetRetentionPeriodInLocal is optional GetGroupSettingsOK0ChatSetRetentionPeriodInLocal.
type OptGetGroupSettingsOK0ChatSetRetentionPeriodInLocal struct {
	Value GetGroupSettingsOK0ChatSetRetentionPeriodInLocal
	Set   bool
}

// IsSet returns true if OptGetGroupSettingsOK0ChatSetRetentionPeriodInLocal was set.
func (o OptGetGroupSettingsOK0ChatSetRetentionPeriodInLocal) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetGroupSettingsOK0ChatSetRetentionPeriodInLocal) Reset() {
	var v GetGroupSettingsOK0ChatSetRetentionPeriodInLocal
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupSettingsOK0ChatSetRetentionPeriodInLocal) SetTo(v GetGroupSettingsOK0ChatSetRetentionPeriodInLocal) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupSettingsOK0ChatSetRetentionPeriodInLocal) Get() (v GetGroupSettingsOK0ChatSetRetentionPeriodInLocal, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupSettingsOK0ChatSetRetentionPeriodInLocal) Or(d GetGroupSettingsOK0ChatSetRetentionPeriodInLocal) GetGroupSettingsOK0ChatSetRetentionPeriodInLocal {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupSettingsOK0ChatShareFiles returns new OptGetGroupSettingsOK0ChatShareFiles with value set to v.
func NewOptGetGroupSettingsOK0ChatShareFiles(v GetGroupSettingsOK0ChatShareFiles) OptGetGroupSettingsOK0ChatShareFiles {
	return OptGetGroupSettingsOK0ChatShareFiles{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupSettingsOK0ChatShareFiles is optional GetGroupSettingsOK0ChatShareFiles.
type OptGetGroupSettingsOK0ChatShareFiles struct {
	Value GetGroupSettingsOK0ChatShareFiles
	Set   bool
}

// IsSet returns true if OptGetGroupSettingsOK0ChatShareFiles was set.
func (o OptGetGroupSettingsOK0ChatShareFiles) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetGroupSettingsOK0ChatShareFiles) Reset() {
	var v GetGroupSettingsOK0ChatShareFiles
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupSettingsOK0ChatShareFiles) SetTo(v GetGroupSettingsOK0ChatShareFiles) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupSettingsOK0ChatShareFiles) Get() (v GetGroupSettingsOK0ChatShareFiles, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupSettingsOK0ChatShareFiles) Or(d GetGroupSettingsOK0ChatShareFiles) GetGroupSettingsOK0ChatShareFiles {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupSettingsOK0EmailNotification returns new OptGetGroupSettingsOK0EmailNotification with value set to v.
func NewOptGetGroupSettingsOK0EmailNotification(v GetGroupSettingsOK0EmailNotification) OptGetGroupSettingsOK0EmailNotification {
	return OptGetGroupSettingsOK0EmailNotification{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupSettingsOK0EmailNotification is optional GetGroupSettingsOK0EmailNotification.
type OptGetGroupSettingsOK0EmailNotification struct {
	Value GetGroupSettingsOK0EmailNotification
	Set   bool
}

// IsSet returns true if OptGetGroupSettingsOK0EmailNotification was set.
func (o OptGetGroupSettingsOK0EmailNotification) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetGroupSettingsOK0EmailNotification) Reset() {
	var v GetGroupSettingsOK0EmailNotification
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupSettingsOK0EmailNotification) SetTo(v GetGroupSettingsOK0EmailNotification) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupSettingsOK0EmailNotification) Get() (v GetGroupSettingsOK0EmailNotification, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupSettingsOK0EmailNotification) Or(d GetGroupSettingsOK0EmailNotification) GetGroupSettingsOK0EmailNotification {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupSettingsOK0InMeeting returns new OptGetGroupSettingsOK0InMeeting with value set to v.
func NewOptGetGroupSettingsOK0InMeeting(v GetGroupSettingsOK0InMeeting) OptGetGroupSettingsOK0InMeeting {
	return OptGetGroupSettingsOK0InMeeting{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupSettingsOK0InMeeting is optional GetGroupSettingsOK0InMeeting.
type OptGetGroupSettingsOK0InMeeting struct {
	Value GetGroupSettingsOK0InMeeting
	Set   bool
}

// IsSet returns true if OptGetGroupSettingsOK0InMeeting was set.
func (o OptGetGroupSettingsOK0InMeeting) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetGroupSettingsOK0InMeeting) Reset() {
	var v GetGroupSettingsOK0InMeeting
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupSettingsOK0InMeeting) SetTo(v GetGroupSettingsOK0InMeeting) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupSettingsOK0InMeeting) Get() (v GetGroupSettingsOK0InMeeting, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupSettingsOK0InMeeting) Or(d GetGroupSettingsOK0InMeeting) GetGroupSettingsOK0InMeeting {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupSettingsOK0InMeetingAutoGeneratedTranslation returns new OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslation with value set to v.
func NewOptGetGroupSettingsOK0InMeetingAutoGeneratedTranslation(v GetGroupSettingsOK0InMeetingAutoGeneratedTranslation) OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslation {
	return OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslation{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslation is optional GetGroupSettingsOK0InMeetingAutoGeneratedTranslation.
type OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslation struct {
	Value GetGroupSettingsOK0InMeetingAutoGeneratedTranslation
	Set   bool
}

// IsSet returns true if OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslation was set.
func (o OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslation) Reset() {
	var v GetGroupSettingsOK0InMeetingAutoGeneratedTranslation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslation) SetTo(v GetGroupSettingsOK0InMeetingAutoGeneratedTranslation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslation) Get() (v GetGroupSettingsOK0InMeetingAutoGeneratedTranslation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslation) Or(d GetGroupSettingsOK0InMeetingAutoGeneratedTranslation) GetGroupSettingsOK0InMeetingAutoGeneratedTranslation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairList returns new OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairList with value set to v.
func NewOptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairList(v GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairList) OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairList {
	return OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairList{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairList is optional GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairList.
type OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairList struct {
	Value GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairList
	Set   bool
}

// IsSet returns true if OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairList was set.
func (o OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairList) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairList) Reset() {
	var v GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairList
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairList) SetTo(v GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairList) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairList) Get() (v GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairList, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairList) Or(d GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairList) GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairList {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage returns new OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage with value set to v.
func NewOptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage(v GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage) OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage {
	return OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage is optional GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage.
type OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage struct {
	Value GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage
	Set   bool
}

// IsSet returns true if OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage was set.
func (o OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage) Reset() {
	var v GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage) SetTo(v GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage) Get() (v GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage) Or(d GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage) GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo returns new OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo with value set to v.
func NewOptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo(v GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo) OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo {
	return OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo is optional GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo.
type OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo struct {
	Value GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo
	Set   bool
}

// IsSet returns true if OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo was set.
func (o OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo) Reset() {
	var v GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo) SetTo(v GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo) Get() (v GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo) Or(d GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo) GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupSettingsOK0InMeetingClosedCaptioning returns new OptGetGroupSettingsOK0InMeetingClosedCaptioning with value set to v.
func NewOptGetGroupSettingsOK0InMeetingClosedCaptioning(v GetGroupSettingsOK0InMeetingClosedCaptioning) OptGetGroupSettingsOK0InMeetingClosedCaptioning {
	return OptGetGroupSettingsOK0InMeetingClosedCaptioning{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupSettingsOK0InMeetingClosedCaptioning is optional GetGroupSettingsOK0InMeetingClosedCaptioning.
type OptGetGroupSettingsOK0InMeetingClosedCaptioning struct {
	Value GetGroupSettingsOK0InMeetingClosedCaptioning
	Set   bool
}

// IsSet returns true if OptGetGroupSettingsOK0InMeetingClosedCaptioning was set.
func (o OptGetGroupSettingsOK0InMeetingClosedCaptioning) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetGroupSettingsOK0InMeetingClosedCaptioning) Reset() {
	var v GetGroupSettingsOK0InMeetingClosedCaptioning
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupSettingsOK0InMeetingClosedCaptioning) SetTo(v GetGroupSettingsOK0InMeetingClosedCaptioning) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupSettingsOK0InMeetingClosedCaptioning) Get() (v GetGroupSettingsOK0InMeetingClosedCaptioning, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupSettingsOK0InMeetingClosedCaptioning) Or(d GetGroupSettingsOK0InMeetingClosedCaptioning) GetGroupSettingsOK0InMeetingClosedCaptioning {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupSettingsOK0InMeetingLanguageInterpretation returns new OptGetGroupSettingsOK0InMeetingLanguageInterpretation with value set to v.
func NewOptGetGroupSettingsOK0InMeetingLanguageInterpretation(v GetGroupSettingsOK0InMeetingLanguageInterpretation) OptGetGroupSettingsOK0InMeetingLanguageInterpretation {
	return OptGetGroupSettingsOK0InMeetingLanguageInterpretation{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupSettingsOK0InMeetingLanguageInterpretation is optional GetGroupSettingsOK0InMeetingLanguageInterpretation.
type OptGetGroupSettingsOK0InMeetingLanguageInterpretation struct {
	Value GetGroupSettingsOK0InMeetingLanguageInterpretation
	Set   bool
}

// IsSet returns true if OptGetGroupSettingsOK0InMeetingLanguageInterpretation was set.
func (o OptGetGroupSettingsOK0InMeetingLanguageInterpretation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetGroupSettingsOK0InMeetingLanguageInterpretation) Reset() {
	var v GetGroupSettingsOK0InMeetingLanguageInterpretation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupSettingsOK0InMeetingLanguageInterpretation) SetTo(v GetGroupSettingsOK0InMeetingLanguageInterpretation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupSettingsOK0InMeetingLanguageInterpretation) Get() (v GetGroupSettingsOK0InMeetingLanguageInterpretation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupSettingsOK0InMeetingLanguageInterpretation) Or(d GetGroupSettingsOK0InMeetingLanguageInterpretation) GetGroupSettingsOK0InMeetingLanguageInterpretation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupSettingsOK0InMeetingManualCaptioning returns new OptGetGroupSettingsOK0InMeetingManualCaptioning with value set to v.
func NewOptGetGroupSettingsOK0InMeetingManualCaptioning(v GetGroupSettingsOK0InMeetingManualCaptioning) OptGetGroupSettingsOK0InMeetingManualCaptioning {
	return OptGetGroupSettingsOK0InMeetingManualCaptioning{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupSettingsOK0InMeetingManualCaptioning is optional GetGroupSettingsOK0InMeetingManualCaptioning.
type OptGetGroupSettingsOK0InMeetingManualCaptioning struct {
	Value GetGroupSettingsOK0InMeetingManualCaptioning
	Set   bool
}

// IsSet returns true if OptGetGroupSettingsOK0InMeetingManualCaptioning was set.
func (o OptGetGroupSettingsOK0InMeetingManualCaptioning) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetGroupSettingsOK0InMeetingManualCaptioning) Reset() {
	var v GetGroupSettingsOK0InMeetingManualCaptioning
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupSettingsOK0InMeetingManualCaptioning) SetTo(v GetGroupSettingsOK0InMeetingManualCaptioning) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupSettingsOK0InMeetingManualCaptioning) Get() (v GetGroupSettingsOK0InMeetingManualCaptioning, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupSettingsOK0InMeetingManualCaptioning) Or(d GetGroupSettingsOK0InMeetingManualCaptioning) GetGroupSettingsOK0InMeetingManualCaptioning {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupSettingsOK0InMeetingMeetingPolling returns new OptGetGroupSettingsOK0InMeetingMeetingPolling with value set to v.
func NewOptGetGroupSettingsOK0InMeetingMeetingPolling(v GetGroupSettingsOK0InMeetingMeetingPolling) OptGetGroupSettingsOK0InMeetingMeetingPolling {
	return OptGetGroupSettingsOK0InMeetingMeetingPolling{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupSettingsOK0InMeetingMeetingPolling is optional GetGroupSettingsOK0InMeetingMeetingPolling.
type OptGetGroupSettingsOK0InMeetingMeetingPolling struct {
	Value GetGroupSettingsOK0InMeetingMeetingPolling
	Set   bool
}

// IsSet returns true if OptGetGroupSettingsOK0InMeetingMeetingPolling was set.
func (o OptGetGroupSettingsOK0InMeetingMeetingPolling) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetGroupSettingsOK0InMeetingMeetingPolling) Reset() {
	var v GetGroupSettingsOK0InMeetingMeetingPolling
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupSettingsOK0InMeetingMeetingPolling) SetTo(v GetGroupSettingsOK0InMeetingMeetingPolling) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupSettingsOK0InMeetingMeetingPolling) Get() (v GetGroupSettingsOK0InMeetingMeetingPolling, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupSettingsOK0InMeetingMeetingPolling) Or(d GetGroupSettingsOK0InMeetingMeetingPolling) GetGroupSettingsOK0InMeetingMeetingPolling {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupSettingsOK0InMeetingSignLanguageInterpretation returns new OptGetGroupSettingsOK0InMeetingSignLanguageInterpretation with value set to v.
func NewOptGetGroupSettingsOK0InMeetingSignLanguageInterpretation(v GetGroupSettingsOK0InMeetingSignLanguageInterpretation) OptGetGroupSettingsOK0InMeetingSignLanguageInterpretation {
	return OptGetGroupSettingsOK0InMeetingSignLanguageInterpretation{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupSettingsOK0InMeetingSignLanguageInterpretation is optional GetGroupSettingsOK0InMeetingSignLanguageInterpretation.
type OptGetGroupSettingsOK0InMeetingSignLanguageInterpretation struct {
	Value GetGroupSettingsOK0InMeetingSignLanguageInterpretation
	Set   bool
}

// IsSet returns true if OptGetGroupSettingsOK0InMeetingSignLanguageInterpretation was set.
func (o OptGetGroupSettingsOK0InMeetingSignLanguageInterpretation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetGroupSettingsOK0InMeetingSignLanguageInterpretation) Reset() {
	var v GetGroupSettingsOK0InMeetingSignLanguageInterpretation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupSettingsOK0InMeetingSignLanguageInterpretation) SetTo(v GetGroupSettingsOK0InMeetingSignLanguageInterpretation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupSettingsOK0InMeetingSignLanguageInterpretation) Get() (v GetGroupSettingsOK0InMeetingSignLanguageInterpretation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupSettingsOK0InMeetingSignLanguageInterpretation) Or(d GetGroupSettingsOK0InMeetingSignLanguageInterpretation) GetGroupSettingsOK0InMeetingSignLanguageInterpretation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupSettingsOK0InMeetingVirtualBackgroundSettings returns new OptGetGroupSettingsOK0InMeetingVirtualBackgroundSettings with value set to v.
func NewOptGetGroupSettingsOK0InMeetingVirtualBackgroundSettings(v GetGroupSettingsOK0InMeetingVirtualBackgroundSettings) OptGetGroupSettingsOK0InMeetingVirtualBackgroundSettings {
	return OptGetGroupSettingsOK0InMeetingVirtualBackgroundSettings{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupSettingsOK0InMeetingVirtualBackgroundSettings is optional GetGroupSettingsOK0InMeetingVirtualBackgroundSettings.
type OptGetGroupSettingsOK0InMeetingVirtualBackgroundSettings struct {
	Value GetGroupSettingsOK0InMeetingVirtualBackgroundSettings
	Set   bool
}

// IsSet returns true if OptGetGroupSettingsOK0InMeetingVirtualBackgroundSettings was set.
func (o OptGetGroupSettingsOK0InMeetingVirtualBackgroundSettings) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetGroupSettingsOK0InMeetingVirtualBackgroundSettings) Reset() {
	var v GetGroupSettingsOK0InMeetingVirtualBackgroundSettings
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupSettingsOK0InMeetingVirtualBackgroundSettings) SetTo(v GetGroupSettingsOK0InMeetingVirtualBackgroundSettings) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupSettingsOK0InMeetingVirtualBackgroundSettings) Get() (v GetGroupSettingsOK0InMeetingVirtualBackgroundSettings, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupSettingsOK0InMeetingVirtualBackgroundSettings) Or(d GetGroupSettingsOK0InMeetingVirtualBackgroundSettings) GetGroupSettingsOK0InMeetingVirtualBackgroundSettings {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupSettingsOK0InMeetingWebinarChat returns new OptGetGroupSettingsOK0InMeetingWebinarChat with value set to v.
func NewOptGetGroupSettingsOK0InMeetingWebinarChat(v GetGroupSettingsOK0InMeetingWebinarChat) OptGetGroupSettingsOK0InMeetingWebinarChat {
	return OptGetGroupSettingsOK0InMeetingWebinarChat{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupSettingsOK0InMeetingWebinarChat is optional GetGroupSettingsOK0InMeetingWebinarChat.
type OptGetGroupSettingsOK0InMeetingWebinarChat struct {
	Value GetGroupSettingsOK0InMeetingWebinarChat
	Set   bool
}

// IsSet returns true if OptGetGroupSettingsOK0InMeetingWebinarChat was set.
func (o OptGetGroupSettingsOK0InMeetingWebinarChat) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetGroupSettingsOK0InMeetingWebinarChat) Reset() {
	var v GetGroupSettingsOK0InMeetingWebinarChat
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupSettingsOK0InMeetingWebinarChat) SetTo(v GetGroupSettingsOK0InMeetingWebinarChat) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupSettingsOK0InMeetingWebinarChat) Get() (v GetGroupSettingsOK0InMeetingWebinarChat, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupSettingsOK0InMeetingWebinarChat) Or(d GetGroupSettingsOK0InMeetingWebinarChat) GetGroupSettingsOK0InMeetingWebinarChat {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupSettingsOK0InMeetingWebinarLiveStreaming returns new OptGetGroupSettingsOK0InMeetingWebinarLiveStreaming with value set to v.
func NewOptGetGroupSettingsOK0InMeetingWebinarLiveStreaming(v GetGroupSettingsOK0InMeetingWebinarLiveStreaming) OptGetGroupSettingsOK0InMeetingWebinarLiveStreaming {
	return OptGetGroupSettingsOK0InMeetingWebinarLiveStreaming{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupSettingsOK0InMeetingWebinarLiveStreaming is optional GetGroupSettingsOK0InMeetingWebinarLiveStreaming.
type OptGetGroupSettingsOK0InMeetingWebinarLiveStreaming struct {
	Value GetGroupSettingsOK0InMeetingWebinarLiveStreaming
	Set   bool
}

// IsSet returns true if OptGetGroupSettingsOK0InMeetingWebinarLiveStreaming was set.
func (o OptGetGroupSettingsOK0InMeetingWebinarLiveStreaming) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetGroupSettingsOK0InMeetingWebinarLiveStreaming) Reset() {
	var v GetGroupSettingsOK0InMeetingWebinarLiveStreaming
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupSettingsOK0InMeetingWebinarLiveStreaming) SetTo(v GetGroupSettingsOK0InMeetingWebinarLiveStreaming) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupSettingsOK0InMeetingWebinarLiveStreaming) Get() (v GetGroupSettingsOK0InMeetingWebinarLiveStreaming, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupSettingsOK0InMeetingWebinarLiveStreaming) Or(d GetGroupSettingsOK0InMeetingWebinarLiveStreaming) GetGroupSettingsOK0InMeetingWebinarLiveStreaming {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupSettingsOK0InMeetingWebinarPolling returns new OptGetGroupSettingsOK0InMeetingWebinarPolling with value set to v.
func NewOptGetGroupSettingsOK0InMeetingWebinarPolling(v GetGroupSettingsOK0InMeetingWebinarPolling) OptGetGroupSettingsOK0InMeetingWebinarPolling {
	return OptGetGroupSettingsOK0InMeetingWebinarPolling{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupSettingsOK0InMeetingWebinarPolling is optional GetGroupSettingsOK0InMeetingWebinarPolling.
type OptGetGroupSettingsOK0InMeetingWebinarPolling struct {
	Value GetGroupSettingsOK0InMeetingWebinarPolling
	Set   bool
}

// IsSet returns true if OptGetGroupSettingsOK0InMeetingWebinarPolling was set.
func (o OptGetGroupSettingsOK0InMeetingWebinarPolling) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetGroupSettingsOK0InMeetingWebinarPolling) Reset() {
	var v GetGroupSettingsOK0InMeetingWebinarPolling
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupSettingsOK0InMeetingWebinarPolling) SetTo(v GetGroupSettingsOK0InMeetingWebinarPolling) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupSettingsOK0InMeetingWebinarPolling) Get() (v GetGroupSettingsOK0InMeetingWebinarPolling, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupSettingsOK0InMeetingWebinarPolling) Or(d GetGroupSettingsOK0InMeetingWebinarPolling) GetGroupSettingsOK0InMeetingWebinarPolling {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupSettingsOK0OtherOptions returns new OptGetGroupSettingsOK0OtherOptions with value set to v.
func NewOptGetGroupSettingsOK0OtherOptions(v GetGroupSettingsOK0OtherOptions) OptGetGroupSettingsOK0OtherOptions {
	return OptGetGroupSettingsOK0OtherOptions{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupSettingsOK0OtherOptions is optional GetGroupSettingsOK0OtherOptions.
type OptGetGroupSettingsOK0OtherOptions struct {
	Value GetGroupSettingsOK0OtherOptions
	Set   bool
}

// IsSet returns true if OptGetGroupSettingsOK0OtherOptions was set.
func (o OptGetGroupSettingsOK0OtherOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetGroupSettingsOK0OtherOptions) Reset() {
	var v GetGroupSettingsOK0OtherOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupSettingsOK0OtherOptions) SetTo(v GetGroupSettingsOK0OtherOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupSettingsOK0OtherOptions) Get() (v GetGroupSettingsOK0OtherOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupSettingsOK0OtherOptions) Or(d GetGroupSettingsOK0OtherOptions) GetGroupSettingsOK0OtherOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupSettingsOK0OtherOptionsWebinarRegistrationOptions returns new OptGetGroupSettingsOK0OtherOptionsWebinarRegistrationOptions with value set to v.
func NewOptGetGroupSettingsOK0OtherOptionsWebinarRegistrationOptions(v GetGroupSettingsOK0OtherOptionsWebinarRegistrationOptions) OptGetGroupSettingsOK0OtherOptionsWebinarRegistrationOptions {
	return OptGetGroupSettingsOK0OtherOptionsWebinarRegistrationOptions{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupSettingsOK0OtherOptionsWebinarRegistrationOptions is optional GetGroupSettingsOK0OtherOptionsWebinarRegistrationOptions.
type OptGetGroupSettingsOK0OtherOptionsWebinarRegistrationOptions struct {
	Value GetGroupSettingsOK0OtherOptionsWebinarRegistrationOptions
	Set   bool
}

// IsSet returns true if OptGetGroupSettingsOK0OtherOptionsWebinarRegistrationOptions was set.
func (o OptGetGroupSettingsOK0OtherOptionsWebinarRegistrationOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetGroupSettingsOK0OtherOptionsWebinarRegistrationOptions) Reset() {
	var v GetGroupSettingsOK0OtherOptionsWebinarRegistrationOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupSettingsOK0OtherOptionsWebinarRegistrationOptions) SetTo(v GetGroupSettingsOK0OtherOptionsWebinarRegistrationOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupSettingsOK0OtherOptionsWebinarRegistrationOptions) Get() (v GetGroupSettingsOK0OtherOptionsWebinarRegistrationOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupSettingsOK0OtherOptionsWebinarRegistrationOptions) Or(d GetGroupSettingsOK0OtherOptionsWebinarRegistrationOptions) GetGroupSettingsOK0OtherOptionsWebinarRegistrationOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupSettingsOK0Profile returns new OptGetGroupSettingsOK0Profile with value set to v.
func NewOptGetGroupSettingsOK0Profile(v GetGroupSettingsOK0Profile) OptGetGroupSettingsOK0Profile {
	return OptGetGroupSettingsOK0Profile{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupSettingsOK0Profile is optional GetGroupSettingsOK0Profile.
type OptGetGroupSettingsOK0Profile struct {
	Value GetGroupSettingsOK0Profile
	Set   bool
}

// IsSet returns true if OptGetGroupSettingsOK0Profile was set.
func (o OptGetGroupSettingsOK0Profile) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetGroupSettingsOK0Profile) Reset() {
	var v GetGroupSettingsOK0Profile
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupSettingsOK0Profile) SetTo(v GetGroupSettingsOK0Profile) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupSettingsOK0Profile) Get() (v GetGroupSettingsOK0Profile, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupSettingsOK0Profile) Or(d GetGroupSettingsOK0Profile) GetGroupSettingsOK0Profile {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupSettingsOK0ProfileRecordingStorageLocation returns new OptGetGroupSettingsOK0ProfileRecordingStorageLocation with value set to v.
func NewOptGetGroupSettingsOK0ProfileRecordingStorageLocation(v GetGroupSettingsOK0ProfileRecordingStorageLocation) OptGetGroupSettingsOK0ProfileRecordingStorageLocation {
	return OptGetGroupSettingsOK0ProfileRecordingStorageLocation{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupSettingsOK0ProfileRecordingStorageLocation is optional GetGroupSettingsOK0ProfileRecordingStorageLocation.
type OptGetGroupSettingsOK0ProfileRecordingStorageLocation struct {
	Value GetGroupSettingsOK0ProfileRecordingStorageLocation
	Set   bool
}

// IsSet returns true if OptGetGroupSettingsOK0ProfileRecordingStorageLocation was set.
func (o OptGetGroupSettingsOK0ProfileRecordingStorageLocation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetGroupSettingsOK0ProfileRecordingStorageLocation) Reset() {
	var v GetGroupSettingsOK0ProfileRecordingStorageLocation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupSettingsOK0ProfileRecordingStorageLocation) SetTo(v GetGroupSettingsOK0ProfileRecordingStorageLocation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupSettingsOK0ProfileRecordingStorageLocation) Get() (v GetGroupSettingsOK0ProfileRecordingStorageLocation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupSettingsOK0ProfileRecordingStorageLocation) Or(d GetGroupSettingsOK0ProfileRecordingStorageLocation) GetGroupSettingsOK0ProfileRecordingStorageLocation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupSettingsOK0Recording returns new OptGetGroupSettingsOK0Recording with value set to v.
func NewOptGetGroupSettingsOK0Recording(v GetGroupSettingsOK0Recording) OptGetGroupSettingsOK0Recording {
	return OptGetGroupSettingsOK0Recording{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupSettingsOK0Recording is optional GetGroupSettingsOK0Recording.
type OptGetGroupSettingsOK0Recording struct {
	Value GetGroupSettingsOK0Recording
	Set   bool
}

// IsSet returns true if OptGetGroupSettingsOK0Recording was set.
func (o OptGetGroupSettingsOK0Recording) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetGroupSettingsOK0Recording) Reset() {
	var v GetGroupSettingsOK0Recording
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupSettingsOK0Recording) SetTo(v GetGroupSettingsOK0Recording) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupSettingsOK0Recording) Get() (v GetGroupSettingsOK0Recording, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupSettingsOK0Recording) Or(d GetGroupSettingsOK0Recording) GetGroupSettingsOK0Recording {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupSettingsOK0RecordingArchive returns new OptGetGroupSettingsOK0RecordingArchive with value set to v.
func NewOptGetGroupSettingsOK0RecordingArchive(v GetGroupSettingsOK0RecordingArchive) OptGetGroupSettingsOK0RecordingArchive {
	return OptGetGroupSettingsOK0RecordingArchive{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupSettingsOK0RecordingArchive is optional GetGroupSettingsOK0RecordingArchive.
type OptGetGroupSettingsOK0RecordingArchive struct {
	Value GetGroupSettingsOK0RecordingArchive
	Set   bool
}

// IsSet returns true if OptGetGroupSettingsOK0RecordingArchive was set.
func (o OptGetGroupSettingsOK0RecordingArchive) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetGroupSettingsOK0RecordingArchive) Reset() {
	var v GetGroupSettingsOK0RecordingArchive
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupSettingsOK0RecordingArchive) SetTo(v GetGroupSettingsOK0RecordingArchive) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupSettingsOK0RecordingArchive) Get() (v GetGroupSettingsOK0RecordingArchive, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupSettingsOK0RecordingArchive) Or(d GetGroupSettingsOK0RecordingArchive) GetGroupSettingsOK0RecordingArchive {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupSettingsOK0RecordingArchiveSettings returns new OptGetGroupSettingsOK0RecordingArchiveSettings with value set to v.
func NewOptGetGroupSettingsOK0RecordingArchiveSettings(v GetGroupSettingsOK0RecordingArchiveSettings) OptGetGroupSettingsOK0RecordingArchiveSettings {
	return OptGetGroupSettingsOK0RecordingArchiveSettings{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupSettingsOK0RecordingArchiveSettings is optional GetGroupSettingsOK0RecordingArchiveSettings.
type OptGetGroupSettingsOK0RecordingArchiveSettings struct {
	Value GetGroupSettingsOK0RecordingArchiveSettings
	Set   bool
}

// IsSet returns true if OptGetGroupSettingsOK0RecordingArchiveSettings was set.
func (o OptGetGroupSettingsOK0RecordingArchiveSettings) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetGroupSettingsOK0RecordingArchiveSettings) Reset() {
	var v GetGroupSettingsOK0RecordingArchiveSettings
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupSettingsOK0RecordingArchiveSettings) SetTo(v GetGroupSettingsOK0RecordingArchiveSettings) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupSettingsOK0RecordingArchiveSettings) Get() (v GetGroupSettingsOK0RecordingArchiveSettings, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupSettingsOK0RecordingArchiveSettings) Or(d GetGroupSettingsOK0RecordingArchiveSettings) GetGroupSettingsOK0RecordingArchiveSettings {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupSettingsOK0RecordingIPAddressAccessControl returns new OptGetGroupSettingsOK0RecordingIPAddressAccessControl with value set to v.
func NewOptGetGroupSettingsOK0RecordingIPAddressAccessControl(v GetGroupSettingsOK0RecordingIPAddressAccessControl) OptGetGroupSettingsOK0RecordingIPAddressAccessControl {
	return OptGetGroupSettingsOK0RecordingIPAddressAccessControl{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupSettingsOK0RecordingIPAddressAccessControl is optional GetGroupSettingsOK0RecordingIPAddressAccessControl.
type OptGetGroupSettingsOK0RecordingIPAddressAccessControl struct {
	Value GetGroupSettingsOK0RecordingIPAddressAccessControl
	Set   bool
}

// IsSet returns true if OptGetGroupSettingsOK0RecordingIPAddressAccessControl was set.
func (o OptGetGroupSettingsOK0RecordingIPAddressAccessControl) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetGroupSettingsOK0RecordingIPAddressAccessControl) Reset() {
	var v GetGroupSettingsOK0RecordingIPAddressAccessControl
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupSettingsOK0RecordingIPAddressAccessControl) SetTo(v GetGroupSettingsOK0RecordingIPAddressAccessControl) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupSettingsOK0RecordingIPAddressAccessControl) Get() (v GetGroupSettingsOK0RecordingIPAddressAccessControl, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupSettingsOK0RecordingIPAddressAccessControl) Or(d GetGroupSettingsOK0RecordingIPAddressAccessControl) GetGroupSettingsOK0RecordingIPAddressAccessControl {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupSettingsOK0RecordingRecordFilesSeparately returns new OptGetGroupSettingsOK0RecordingRecordFilesSeparately with value set to v.
func NewOptGetGroupSettingsOK0RecordingRecordFilesSeparately(v GetGroupSettingsOK0RecordingRecordFilesSeparately) OptGetGroupSettingsOK0RecordingRecordFilesSeparately {
	return OptGetGroupSettingsOK0RecordingRecordFilesSeparately{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupSettingsOK0RecordingRecordFilesSeparately is optional GetGroupSettingsOK0RecordingRecordFilesSeparately.
type OptGetGroupSettingsOK0RecordingRecordFilesSeparately struct {
	Value GetGroupSettingsOK0RecordingRecordFilesSeparately
	Set   bool
}

// IsSet returns true if OptGetGroupSettingsOK0RecordingRecordFilesSeparately was set.
func (o OptGetGroupSettingsOK0RecordingRecordFilesSeparately) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetGroupSettingsOK0RecordingRecordFilesSeparately) Reset() {
	var v GetGroupSettingsOK0RecordingRecordFilesSeparately
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupSettingsOK0RecordingRecordFilesSeparately) SetTo(v GetGroupSettingsOK0RecordingRecordFilesSeparately) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupSettingsOK0RecordingRecordFilesSeparately) Get() (v GetGroupSettingsOK0RecordingRecordFilesSeparately, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupSettingsOK0RecordingRecordFilesSeparately) Or(d GetGroupSettingsOK0RecordingRecordFilesSeparately) GetGroupSettingsOK0RecordingRecordFilesSeparately {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupSettingsOK0RecordingSmartRecording returns new OptGetGroupSettingsOK0RecordingSmartRecording with value set to v.
func NewOptGetGroupSettingsOK0RecordingSmartRecording(v GetGroupSettingsOK0RecordingSmartRecording) OptGetGroupSettingsOK0RecordingSmartRecording {
	return OptGetGroupSettingsOK0RecordingSmartRecording{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupSettingsOK0RecordingSmartRecording is optional GetGroupSettingsOK0RecordingSmartRecording.
type OptGetGroupSettingsOK0RecordingSmartRecording struct {
	Value GetGroupSettingsOK0RecordingSmartRecording
	Set   bool
}

// IsSet returns true if OptGetGroupSettingsOK0RecordingSmartRecording was set.
func (o OptGetGroupSettingsOK0RecordingSmartRecording) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetGroupSettingsOK0RecordingSmartRecording) Reset() {
	var v GetGroupSettingsOK0RecordingSmartRecording
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupSettingsOK0RecordingSmartRecording) SetTo(v GetGroupSettingsOK0RecordingSmartRecording) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupSettingsOK0RecordingSmartRecording) Get() (v GetGroupSettingsOK0RecordingSmartRecording, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupSettingsOK0RecordingSmartRecording) Or(d GetGroupSettingsOK0RecordingSmartRecording) GetGroupSettingsOK0RecordingSmartRecording {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupSettingsOK0ScheduleMeeting returns new OptGetGroupSettingsOK0ScheduleMeeting with value set to v.
func NewOptGetGroupSettingsOK0ScheduleMeeting(v GetGroupSettingsOK0ScheduleMeeting) OptGetGroupSettingsOK0ScheduleMeeting {
	return OptGetGroupSettingsOK0ScheduleMeeting{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupSettingsOK0ScheduleMeeting is optional GetGroupSettingsOK0ScheduleMeeting.
type OptGetGroupSettingsOK0ScheduleMeeting struct {
	Value GetGroupSettingsOK0ScheduleMeeting
	Set   bool
}

// IsSet returns true if OptGetGroupSettingsOK0ScheduleMeeting was set.
func (o OptGetGroupSettingsOK0ScheduleMeeting) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetGroupSettingsOK0ScheduleMeeting) Reset() {
	var v GetGroupSettingsOK0ScheduleMeeting
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupSettingsOK0ScheduleMeeting) SetTo(v GetGroupSettingsOK0ScheduleMeeting) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupSettingsOK0ScheduleMeeting) Get() (v GetGroupSettingsOK0ScheduleMeeting, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupSettingsOK0ScheduleMeeting) Or(d GetGroupSettingsOK0ScheduleMeeting) GetGroupSettingsOK0ScheduleMeeting {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic returns new OptGetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic with value set to v.
func NewOptGetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic(v GetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic) OptGetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic {
	return OptGetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic is optional GetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic.
type OptGetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic struct {
	Value GetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic
	Set   bool
}

// IsSet returns true if OptGetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic was set.
func (o OptGetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptGetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic) Reset() {
	var v GetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic) SetTo(v GetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic) Get() (v GetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic) Or(d GetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic) GetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic returns new OptGetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic with value set to v.
func NewOptGetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic(v GetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic) OptGetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic {
	return OptGetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic is optional GetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic.
type OptGetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic struct {
	Value GetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic
	Set   bool
}

// IsSet returns true if OptGetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic was set.
func (o OptGetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptGetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic) Reset() {
	var v GetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic) SetTo(v GetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic) Get() (v GetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic) Or(d GetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic) GetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupSettingsOK0ScheduleMeetingContinuousMeetingChat returns new OptGetGroupSettingsOK0ScheduleMeetingContinuousMeetingChat with value set to v.
func NewOptGetGroupSettingsOK0ScheduleMeetingContinuousMeetingChat(v GetGroupSettingsOK0ScheduleMeetingContinuousMeetingChat) OptGetGroupSettingsOK0ScheduleMeetingContinuousMeetingChat {
	return OptGetGroupSettingsOK0ScheduleMeetingContinuousMeetingChat{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupSettingsOK0ScheduleMeetingContinuousMeetingChat is optional GetGroupSettingsOK0ScheduleMeetingContinuousMeetingChat.
type OptGetGroupSettingsOK0ScheduleMeetingContinuousMeetingChat struct {
	Value GetGroupSettingsOK0ScheduleMeetingContinuousMeetingChat
	Set   bool
}

// IsSet returns true if OptGetGroupSettingsOK0ScheduleMeetingContinuousMeetingChat was set.
func (o OptGetGroupSettingsOK0ScheduleMeetingContinuousMeetingChat) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetGroupSettingsOK0ScheduleMeetingContinuousMeetingChat) Reset() {
	var v GetGroupSettingsOK0ScheduleMeetingContinuousMeetingChat
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupSettingsOK0ScheduleMeetingContinuousMeetingChat) SetTo(v GetGroupSettingsOK0ScheduleMeetingContinuousMeetingChat) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupSettingsOK0ScheduleMeetingContinuousMeetingChat) Get() (v GetGroupSettingsOK0ScheduleMeetingContinuousMeetingChat, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupSettingsOK0ScheduleMeetingContinuousMeetingChat) Or(d GetGroupSettingsOK0ScheduleMeetingContinuousMeetingChat) GetGroupSettingsOK0ScheduleMeetingContinuousMeetingChat {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupSettingsOK0Telephony returns new OptGetGroupSettingsOK0Telephony with value set to v.
func NewOptGetGroupSettingsOK0Telephony(v GetGroupSettingsOK0Telephony) OptGetGroupSettingsOK0Telephony {
	return OptGetGroupSettingsOK0Telephony{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupSettingsOK0Telephony is optional GetGroupSettingsOK0Telephony.
type OptGetGroupSettingsOK0Telephony struct {
	Value GetGroupSettingsOK0Telephony
	Set   bool
}

// IsSet returns true if OptGetGroupSettingsOK0Telephony was set.
func (o OptGetGroupSettingsOK0Telephony) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetGroupSettingsOK0Telephony) Reset() {
	var v GetGroupSettingsOK0Telephony
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupSettingsOK0Telephony) SetTo(v GetGroupSettingsOK0Telephony) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupSettingsOK0Telephony) Get() (v GetGroupSettingsOK0Telephony, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupSettingsOK0Telephony) Or(d GetGroupSettingsOK0Telephony) GetGroupSettingsOK0Telephony {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupSettingsOK0TelephonyTelephonyRegions returns new OptGetGroupSettingsOK0TelephonyTelephonyRegions with value set to v.
func NewOptGetGroupSettingsOK0TelephonyTelephonyRegions(v GetGroupSettingsOK0TelephonyTelephonyRegions) OptGetGroupSettingsOK0TelephonyTelephonyRegions {
	return OptGetGroupSettingsOK0TelephonyTelephonyRegions{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupSettingsOK0TelephonyTelephonyRegions is optional GetGroupSettingsOK0TelephonyTelephonyRegions.
type OptGetGroupSettingsOK0TelephonyTelephonyRegions struct {
	Value GetGroupSettingsOK0TelephonyTelephonyRegions
	Set   bool
}

// IsSet returns true if OptGetGroupSettingsOK0TelephonyTelephonyRegions was set.
func (o OptGetGroupSettingsOK0TelephonyTelephonyRegions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetGroupSettingsOK0TelephonyTelephonyRegions) Reset() {
	var v GetGroupSettingsOK0TelephonyTelephonyRegions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupSettingsOK0TelephonyTelephonyRegions) SetTo(v GetGroupSettingsOK0TelephonyTelephonyRegions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupSettingsOK0TelephonyTelephonyRegions) Get() (v GetGroupSettingsOK0TelephonyTelephonyRegions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupSettingsOK0TelephonyTelephonyRegions) Or(d GetGroupSettingsOK0TelephonyTelephonyRegions) GetGroupSettingsOK0TelephonyTelephonyRegions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupSettingsOK3MeetingSecurity returns new OptGetGroupSettingsOK3MeetingSecurity with value set to v.
func NewOptGetGroupSettingsOK3MeetingSecurity(v GetGroupSettingsOK3MeetingSecurity) OptGetGroupSettingsOK3MeetingSecurity {
	return OptGetGroupSettingsOK3MeetingSecurity{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupSettingsOK3MeetingSecurity is optional GetGroupSettingsOK3MeetingSecurity.
type OptGetGroupSettingsOK3MeetingSecurity struct {
	Value GetGroupSettingsOK3MeetingSecurity
	Set   bool
}

// IsSet returns true if OptGetGroupSettingsOK3MeetingSecurity was set.
func (o OptGetGroupSettingsOK3MeetingSecurity) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetGroupSettingsOK3MeetingSecurity) Reset() {
	var v GetGroupSettingsOK3MeetingSecurity
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupSettingsOK3MeetingSecurity) SetTo(v GetGroupSettingsOK3MeetingSecurity) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupSettingsOK3MeetingSecurity) Get() (v GetGroupSettingsOK3MeetingSecurity, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupSettingsOK3MeetingSecurity) Or(d GetGroupSettingsOK3MeetingSecurity) GetGroupSettingsOK3MeetingSecurity {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupSettingsOK3MeetingSecurityChatEtiquetteTool returns new OptGetGroupSettingsOK3MeetingSecurityChatEtiquetteTool with value set to v.
func NewOptGetGroupSettingsOK3MeetingSecurityChatEtiquetteTool(v GetGroupSettingsOK3MeetingSecurityChatEtiquetteTool) OptGetGroupSettingsOK3MeetingSecurityChatEtiquetteTool {
	return OptGetGroupSettingsOK3MeetingSecurityChatEtiquetteTool{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupSettingsOK3MeetingSecurityChatEtiquetteTool is optional GetGroupSettingsOK3MeetingSecurityChatEtiquetteTool.
type OptGetGroupSettingsOK3MeetingSecurityChatEtiquetteTool struct {
	Value GetGroupSettingsOK3MeetingSecurityChatEtiquetteTool
	Set   bool
}

// IsSet returns true if OptGetGroupSettingsOK3MeetingSecurityChatEtiquetteTool was set.
func (o OptGetGroupSettingsOK3MeetingSecurityChatEtiquetteTool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetGroupSettingsOK3MeetingSecurityChatEtiquetteTool) Reset() {
	var v GetGroupSettingsOK3MeetingSecurityChatEtiquetteTool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupSettingsOK3MeetingSecurityChatEtiquetteTool) SetTo(v GetGroupSettingsOK3MeetingSecurityChatEtiquetteTool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupSettingsOK3MeetingSecurityChatEtiquetteTool) Get() (v GetGroupSettingsOK3MeetingSecurityChatEtiquetteTool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupSettingsOK3MeetingSecurityChatEtiquetteTool) Or(d GetGroupSettingsOK3MeetingSecurityChatEtiquetteTool) GetGroupSettingsOK3MeetingSecurityChatEtiquetteTool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement returns new OptGetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement with value set to v.
func NewOptGetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement(v GetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement) OptGetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement {
	return OptGetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement is optional GetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement.
type OptGetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement struct {
	Value GetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement
	Set   bool
}

// IsSet returns true if OptGetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement was set.
func (o OptGetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement) Reset() {
	var v GetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement) SetTo(v GetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement) Get() (v GetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement) Or(d GetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement) GetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetGroupSettingsOK3MeetingSecurityWaitingRoomSettings returns new OptGetGroupSettingsOK3MeetingSecurityWaitingRoomSettings with value set to v.
func NewOptGetGroupSettingsOK3MeetingSecurityWaitingRoomSettings(v GetGroupSettingsOK3MeetingSecurityWaitingRoomSettings) OptGetGroupSettingsOK3MeetingSecurityWaitingRoomSettings {
	return OptGetGroupSettingsOK3MeetingSecurityWaitingRoomSettings{
		Value: v,
		Set:   true,
	}
}

// OptGetGroupSettingsOK3MeetingSecurityWaitingRoomSettings is optional GetGroupSettingsOK3MeetingSecurityWaitingRoomSettings.
type OptGetGroupSettingsOK3MeetingSecurityWaitingRoomSettings struct {
	Value GetGroupSettingsOK3MeetingSecurityWaitingRoomSettings
	Set   bool
}

// IsSet returns true if OptGetGroupSettingsOK3MeetingSecurityWaitingRoomSettings was set.
func (o OptGetGroupSettingsOK3MeetingSecurityWaitingRoomSettings) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetGroupSettingsOK3MeetingSecurityWaitingRoomSettings) Reset() {
	var v GetGroupSettingsOK3MeetingSecurityWaitingRoomSettings
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetGroupSettingsOK3MeetingSecurityWaitingRoomSettings) SetTo(v GetGroupSettingsOK3MeetingSecurityWaitingRoomSettings) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetGroupSettingsOK3MeetingSecurityWaitingRoomSettings) Get() (v GetGroupSettingsOK3MeetingSecurityWaitingRoomSettings, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetGroupSettingsOK3MeetingSecurityWaitingRoomSettings) Or(d GetGroupSettingsOK3MeetingSecurityWaitingRoomSettings) GetGroupSettingsOK3MeetingSecurityWaitingRoomSettings {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetUserMeetingTemplatesOKSettings returns new OptGetUserMeetingTemplatesOKSettings with value set to v.
func NewOptGetUserMeetingTemplatesOKSettings(v GetUserMeetingTemplatesOKSettings) OptGetUserMeetingTemplatesOKSettings {
	return OptGetUserMeetingTemplatesOKSettings{
		Value: v,
		Set:   true,
	}
}

// OptGetUserMeetingTemplatesOKSettings is optional GetUserMeetingTemplatesOKSettings.
type OptGetUserMeetingTemplatesOKSettings struct {
	Value GetUserMeetingTemplatesOKSettings
	Set   bool
}

// IsSet returns true if OptGetUserMeetingTemplatesOKSettings was set.
func (o OptGetUserMeetingTemplatesOKSettings) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetUserMeetingTemplatesOKSettings) Reset() {
	var v GetUserMeetingTemplatesOKSettings
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetUserMeetingTemplatesOKSettings) SetTo(v GetUserMeetingTemplatesOKSettings) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetUserMeetingTemplatesOKSettings) Get() (v GetUserMeetingTemplatesOKSettings, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetUserMeetingTemplatesOKSettings) Or(d GetUserMeetingTemplatesOKSettings) GetUserMeetingTemplatesOKSettings {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetUserMeetingTemplatesOKSettingsInMeeting returns new OptGetUserMeetingTemplatesOKSettingsInMeeting with value set to v.
func NewOptGetUserMeetingTemplatesOKSettingsInMeeting(v GetUserMeetingTemplatesOKSettingsInMeeting) OptGetUserMeetingTemplatesOKSettingsInMeeting {
	return OptGetUserMeetingTemplatesOKSettingsInMeeting{
		Value: v,
		Set:   true,
	}
}

// OptGetUserMeetingTemplatesOKSettingsInMeeting is optional GetUserMeetingTemplatesOKSettingsInMeeting.
type OptGetUserMeetingTemplatesOKSettingsInMeeting struct {
	Value GetUserMeetingTemplatesOKSettingsInMeeting
	Set   bool
}

// IsSet returns true if OptGetUserMeetingTemplatesOKSettingsInMeeting was set.
func (o OptGetUserMeetingTemplatesOKSettingsInMeeting) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetUserMeetingTemplatesOKSettingsInMeeting) Reset() {
	var v GetUserMeetingTemplatesOKSettingsInMeeting
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetUserMeetingTemplatesOKSettingsInMeeting) SetTo(v GetUserMeetingTemplatesOKSettingsInMeeting) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetUserMeetingTemplatesOKSettingsInMeeting) Get() (v GetUserMeetingTemplatesOKSettingsInMeeting, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetUserMeetingTemplatesOKSettingsInMeeting) Or(d GetUserMeetingTemplatesOKSettingsInMeeting) GetUserMeetingTemplatesOKSettingsInMeeting {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetUserMeetingTemplatesOKSettingsInMeetingClosedCaptioning returns new OptGetUserMeetingTemplatesOKSettingsInMeetingClosedCaptioning with value set to v.
func NewOptGetUserMeetingTemplatesOKSettingsInMeetingClosedCaptioning(v GetUserMeetingTemplatesOKSettingsInMeetingClosedCaptioning) OptGetUserMeetingTemplatesOKSettingsInMeetingClosedCaptioning {
	return OptGetUserMeetingTemplatesOKSettingsInMeetingClosedCaptioning{
		Value: v,
		Set:   true,
	}
}

// OptGetUserMeetingTemplatesOKSettingsInMeetingClosedCaptioning is optional GetUserMeetingTemplatesOKSettingsInMeetingClosedCaptioning.
type OptGetUserMeetingTemplatesOKSettingsInMeetingClosedCaptioning struct {
	Value GetUserMeetingTemplatesOKSettingsInMeetingClosedCaptioning
	Set   bool
}

// IsSet returns true if OptGetUserMeetingTemplatesOKSettingsInMeetingClosedCaptioning was set.
func (o OptGetUserMeetingTemplatesOKSettingsInMeetingClosedCaptioning) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetUserMeetingTemplatesOKSettingsInMeetingClosedCaptioning) Reset() {
	var v GetUserMeetingTemplatesOKSettingsInMeetingClosedCaptioning
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetUserMeetingTemplatesOKSettingsInMeetingClosedCaptioning) SetTo(v GetUserMeetingTemplatesOKSettingsInMeetingClosedCaptioning) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetUserMeetingTemplatesOKSettingsInMeetingClosedCaptioning) Get() (v GetUserMeetingTemplatesOKSettingsInMeetingClosedCaptioning, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetUserMeetingTemplatesOKSettingsInMeetingClosedCaptioning) Or(d GetUserMeetingTemplatesOKSettingsInMeetingClosedCaptioning) GetUserMeetingTemplatesOKSettingsInMeetingClosedCaptioning {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetUserMeetingTemplatesOKSettingsInMeetingManualCaptioning returns new OptGetUserMeetingTemplatesOKSettingsInMeetingManualCaptioning with value set to v.
func NewOptGetUserMeetingTemplatesOKSettingsInMeetingManualCaptioning(v GetUserMeetingTemplatesOKSettingsInMeetingManualCaptioning) OptGetUserMeetingTemplatesOKSettingsInMeetingManualCaptioning {
	return OptGetUserMeetingTemplatesOKSettingsInMeetingManualCaptioning{
		Value: v,
		Set:   true,
	}
}

// OptGetUserMeetingTemplatesOKSettingsInMeetingManualCaptioning is optional GetUserMeetingTemplatesOKSettingsInMeetingManualCaptioning.
type OptGetUserMeetingTemplatesOKSettingsInMeetingManualCaptioning struct {
	Value GetUserMeetingTemplatesOKSettingsInMeetingManualCaptioning
	Set   bool
}

// IsSet returns true if OptGetUserMeetingTemplatesOKSettingsInMeetingManualCaptioning was set.
func (o OptGetUserMeetingTemplatesOKSettingsInMeetingManualCaptioning) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetUserMeetingTemplatesOKSettingsInMeetingManualCaptioning) Reset() {
	var v GetUserMeetingTemplatesOKSettingsInMeetingManualCaptioning
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetUserMeetingTemplatesOKSettingsInMeetingManualCaptioning) SetTo(v GetUserMeetingTemplatesOKSettingsInMeetingManualCaptioning) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetUserMeetingTemplatesOKSettingsInMeetingManualCaptioning) Get() (v GetUserMeetingTemplatesOKSettingsInMeetingManualCaptioning, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetUserMeetingTemplatesOKSettingsInMeetingManualCaptioning) Or(d GetUserMeetingTemplatesOKSettingsInMeetingManualCaptioning) GetUserMeetingTemplatesOKSettingsInMeetingManualCaptioning {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetUserMeetingTemplatesOKSettingsMeetingSecurity returns new OptGetUserMeetingTemplatesOKSettingsMeetingSecurity with value set to v.
func NewOptGetUserMeetingTemplatesOKSettingsMeetingSecurity(v GetUserMeetingTemplatesOKSettingsMeetingSecurity) OptGetUserMeetingTemplatesOKSettingsMeetingSecurity {
	return OptGetUserMeetingTemplatesOKSettingsMeetingSecurity{
		Value: v,
		Set:   true,
	}
}

// OptGetUserMeetingTemplatesOKSettingsMeetingSecurity is optional GetUserMeetingTemplatesOKSettingsMeetingSecurity.
type OptGetUserMeetingTemplatesOKSettingsMeetingSecurity struct {
	Value GetUserMeetingTemplatesOKSettingsMeetingSecurity
	Set   bool
}

// IsSet returns true if OptGetUserMeetingTemplatesOKSettingsMeetingSecurity was set.
func (o OptGetUserMeetingTemplatesOKSettingsMeetingSecurity) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetUserMeetingTemplatesOKSettingsMeetingSecurity) Reset() {
	var v GetUserMeetingTemplatesOKSettingsMeetingSecurity
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetUserMeetingTemplatesOKSettingsMeetingSecurity) SetTo(v GetUserMeetingTemplatesOKSettingsMeetingSecurity) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetUserMeetingTemplatesOKSettingsMeetingSecurity) Get() (v GetUserMeetingTemplatesOKSettingsMeetingSecurity, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetUserMeetingTemplatesOKSettingsMeetingSecurity) Or(d GetUserMeetingTemplatesOKSettingsMeetingSecurity) GetUserMeetingTemplatesOKSettingsMeetingSecurity {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetUserMeetingTemplatesOKSettingsRecording returns new OptGetUserMeetingTemplatesOKSettingsRecording with value set to v.
func NewOptGetUserMeetingTemplatesOKSettingsRecording(v GetUserMeetingTemplatesOKSettingsRecording) OptGetUserMeetingTemplatesOKSettingsRecording {
	return OptGetUserMeetingTemplatesOKSettingsRecording{
		Value: v,
		Set:   true,
	}
}

// OptGetUserMeetingTemplatesOKSettingsRecording is optional GetUserMeetingTemplatesOKSettingsRecording.
type OptGetUserMeetingTemplatesOKSettingsRecording struct {
	Value GetUserMeetingTemplatesOKSettingsRecording
	Set   bool
}

// IsSet returns true if OptGetUserMeetingTemplatesOKSettingsRecording was set.
func (o OptGetUserMeetingTemplatesOKSettingsRecording) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetUserMeetingTemplatesOKSettingsRecording) Reset() {
	var v GetUserMeetingTemplatesOKSettingsRecording
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetUserMeetingTemplatesOKSettingsRecording) SetTo(v GetUserMeetingTemplatesOKSettingsRecording) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetUserMeetingTemplatesOKSettingsRecording) Get() (v GetUserMeetingTemplatesOKSettingsRecording, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetUserMeetingTemplatesOKSettingsRecording) Or(d GetUserMeetingTemplatesOKSettingsRecording) GetUserMeetingTemplatesOKSettingsRecording {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetUserMeetingTemplatesOKSettingsScheduleMeeting returns new OptGetUserMeetingTemplatesOKSettingsScheduleMeeting with value set to v.
func NewOptGetUserMeetingTemplatesOKSettingsScheduleMeeting(v GetUserMeetingTemplatesOKSettingsScheduleMeeting) OptGetUserMeetingTemplatesOKSettingsScheduleMeeting {
	return OptGetUserMeetingTemplatesOKSettingsScheduleMeeting{
		Value: v,
		Set:   true,
	}
}

// OptGetUserMeetingTemplatesOKSettingsScheduleMeeting is optional GetUserMeetingTemplatesOKSettingsScheduleMeeting.
type OptGetUserMeetingTemplatesOKSettingsScheduleMeeting struct {
	Value GetUserMeetingTemplatesOKSettingsScheduleMeeting
	Set   bool
}

// IsSet returns true if OptGetUserMeetingTemplatesOKSettingsScheduleMeeting was set.
func (o OptGetUserMeetingTemplatesOKSettingsScheduleMeeting) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetUserMeetingTemplatesOKSettingsScheduleMeeting) Reset() {
	var v GetUserMeetingTemplatesOKSettingsScheduleMeeting
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetUserMeetingTemplatesOKSettingsScheduleMeeting) SetTo(v GetUserMeetingTemplatesOKSettingsScheduleMeeting) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetUserMeetingTemplatesOKSettingsScheduleMeeting) Get() (v GetUserMeetingTemplatesOKSettingsScheduleMeeting, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetUserMeetingTemplatesOKSettingsScheduleMeeting) Or(d GetUserMeetingTemplatesOKSettingsScheduleMeeting) GetUserMeetingTemplatesOKSettingsScheduleMeeting {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGroupAdminsCreateReq returns new OptGroupAdminsCreateReq with value set to v.
func NewOptGroupAdminsCreateReq(v GroupAdminsCreateReq) OptGroupAdminsCreateReq {
	return OptGroupAdminsCreateReq{
		Value: v,
		Set:   true,
	}
}

// OptGroupAdminsCreateReq is optional GroupAdminsCreateReq.
type OptGroupAdminsCreateReq struct {
	Value GroupAdminsCreateReq
	Set   bool
}

// IsSet returns true if OptGroupAdminsCreateReq was set.
func (o OptGroupAdminsCreateReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGroupAdminsCreateReq) Reset() {
	var v GroupAdminsCreateReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGroupAdminsCreateReq) SetTo(v GroupAdminsCreateReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGroupAdminsCreateReq) Get() (v GroupAdminsCreateReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGroupAdminsCreateReq) Or(d GroupAdminsCreateReq) GroupAdminsCreateReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGroupCreateReq returns new OptGroupCreateReq with value set to v.
func NewOptGroupCreateReq(v GroupCreateReq) OptGroupCreateReq {
	return OptGroupCreateReq{
		Value: v,
		Set:   true,
	}
}

// OptGroupCreateReq is optional GroupCreateReq.
type OptGroupCreateReq struct {
	Value GroupCreateReq
	Set   bool
}

// IsSet returns true if OptGroupCreateReq was set.
func (o OptGroupCreateReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGroupCreateReq) Reset() {
	var v GroupCreateReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGroupCreateReq) SetTo(v GroupCreateReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGroupCreateReq) Get() (v GroupCreateReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGroupCreateReq) Or(d GroupCreateReq) GroupCreateReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGroupLockedSettingsReq returns new OptGroupLockedSettingsReq with value set to v.
func NewOptGroupLockedSettingsReq(v GroupLockedSettingsReq) OptGroupLockedSettingsReq {
	return OptGroupLockedSettingsReq{
		Value: v,
		Set:   true,
	}
}

// OptGroupLockedSettingsReq is optional GroupLockedSettingsReq.
type OptGroupLockedSettingsReq struct {
	Value GroupLockedSettingsReq
	Set   bool
}

// IsSet returns true if OptGroupLockedSettingsReq was set.
func (o OptGroupLockedSettingsReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGroupLockedSettingsReq) Reset() {
	var v GroupLockedSettingsReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGroupLockedSettingsReq) SetTo(v GroupLockedSettingsReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGroupLockedSettingsReq) Get() (v GroupLockedSettingsReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGroupLockedSettingsReq) Or(d GroupLockedSettingsReq) GroupLockedSettingsReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGroupLockedSettingsReq0AudioConferencing returns new OptGroupLockedSettingsReq0AudioConferencing with value set to v.
func NewOptGroupLockedSettingsReq0AudioConferencing(v GroupLockedSettingsReq0AudioConferencing) OptGroupLockedSettingsReq0AudioConferencing {
	return OptGroupLockedSettingsReq0AudioConferencing{
		Value: v,
		Set:   true,
	}
}

// OptGroupLockedSettingsReq0AudioConferencing is optional GroupLockedSettingsReq0AudioConferencing.
type OptGroupLockedSettingsReq0AudioConferencing struct {
	Value GroupLockedSettingsReq0AudioConferencing
	Set   bool
}

// IsSet returns true if OptGroupLockedSettingsReq0AudioConferencing was set.
func (o OptGroupLockedSettingsReq0AudioConferencing) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGroupLockedSettingsReq0AudioConferencing) Reset() {
	var v GroupLockedSettingsReq0AudioConferencing
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGroupLockedSettingsReq0AudioConferencing) SetTo(v GroupLockedSettingsReq0AudioConferencing) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGroupLockedSettingsReq0AudioConferencing) Get() (v GroupLockedSettingsReq0AudioConferencing, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGroupLockedSettingsReq0AudioConferencing) Or(d GroupLockedSettingsReq0AudioConferencing) GroupLockedSettingsReq0AudioConferencing {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGroupLockedSettingsReq0EmailNotification returns new OptGroupLockedSettingsReq0EmailNotification with value set to v.
func NewOptGroupLockedSettingsReq0EmailNotification(v GroupLockedSettingsReq0EmailNotification) OptGroupLockedSettingsReq0EmailNotification {
	return OptGroupLockedSettingsReq0EmailNotification{
		Value: v,
		Set:   true,
	}
}

// OptGroupLockedSettingsReq0EmailNotification is optional GroupLockedSettingsReq0EmailNotification.
type OptGroupLockedSettingsReq0EmailNotification struct {
	Value GroupLockedSettingsReq0EmailNotification
	Set   bool
}

// IsSet returns true if OptGroupLockedSettingsReq0EmailNotification was set.
func (o OptGroupLockedSettingsReq0EmailNotification) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGroupLockedSettingsReq0EmailNotification) Reset() {
	var v GroupLockedSettingsReq0EmailNotification
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGroupLockedSettingsReq0EmailNotification) SetTo(v GroupLockedSettingsReq0EmailNotification) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGroupLockedSettingsReq0EmailNotification) Get() (v GroupLockedSettingsReq0EmailNotification, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGroupLockedSettingsReq0EmailNotification) Or(d GroupLockedSettingsReq0EmailNotification) GroupLockedSettingsReq0EmailNotification {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGroupLockedSettingsReq0InMeeting returns new OptGroupLockedSettingsReq0InMeeting with value set to v.
func NewOptGroupLockedSettingsReq0InMeeting(v GroupLockedSettingsReq0InMeeting) OptGroupLockedSettingsReq0InMeeting {
	return OptGroupLockedSettingsReq0InMeeting{
		Value: v,
		Set:   true,
	}
}

// OptGroupLockedSettingsReq0InMeeting is optional GroupLockedSettingsReq0InMeeting.
type OptGroupLockedSettingsReq0InMeeting struct {
	Value GroupLockedSettingsReq0InMeeting
	Set   bool
}

// IsSet returns true if OptGroupLockedSettingsReq0InMeeting was set.
func (o OptGroupLockedSettingsReq0InMeeting) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGroupLockedSettingsReq0InMeeting) Reset() {
	var v GroupLockedSettingsReq0InMeeting
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGroupLockedSettingsReq0InMeeting) SetTo(v GroupLockedSettingsReq0InMeeting) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGroupLockedSettingsReq0InMeeting) Get() (v GroupLockedSettingsReq0InMeeting, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGroupLockedSettingsReq0InMeeting) Or(d GroupLockedSettingsReq0InMeeting) GroupLockedSettingsReq0InMeeting {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGroupLockedSettingsReq0OtherOptions returns new OptGroupLockedSettingsReq0OtherOptions with value set to v.
func NewOptGroupLockedSettingsReq0OtherOptions(v GroupLockedSettingsReq0OtherOptions) OptGroupLockedSettingsReq0OtherOptions {
	return OptGroupLockedSettingsReq0OtherOptions{
		Value: v,
		Set:   true,
	}
}

// OptGroupLockedSettingsReq0OtherOptions is optional GroupLockedSettingsReq0OtherOptions.
type OptGroupLockedSettingsReq0OtherOptions struct {
	Value GroupLockedSettingsReq0OtherOptions
	Set   bool
}

// IsSet returns true if OptGroupLockedSettingsReq0OtherOptions was set.
func (o OptGroupLockedSettingsReq0OtherOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGroupLockedSettingsReq0OtherOptions) Reset() {
	var v GroupLockedSettingsReq0OtherOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGroupLockedSettingsReq0OtherOptions) SetTo(v GroupLockedSettingsReq0OtherOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGroupLockedSettingsReq0OtherOptions) Get() (v GroupLockedSettingsReq0OtherOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGroupLockedSettingsReq0OtherOptions) Or(d GroupLockedSettingsReq0OtherOptions) GroupLockedSettingsReq0OtherOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGroupLockedSettingsReq0Recording returns new OptGroupLockedSettingsReq0Recording with value set to v.
func NewOptGroupLockedSettingsReq0Recording(v GroupLockedSettingsReq0Recording) OptGroupLockedSettingsReq0Recording {
	return OptGroupLockedSettingsReq0Recording{
		Value: v,
		Set:   true,
	}
}

// OptGroupLockedSettingsReq0Recording is optional GroupLockedSettingsReq0Recording.
type OptGroupLockedSettingsReq0Recording struct {
	Value GroupLockedSettingsReq0Recording
	Set   bool
}

// IsSet returns true if OptGroupLockedSettingsReq0Recording was set.
func (o OptGroupLockedSettingsReq0Recording) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGroupLockedSettingsReq0Recording) Reset() {
	var v GroupLockedSettingsReq0Recording
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGroupLockedSettingsReq0Recording) SetTo(v GroupLockedSettingsReq0Recording) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGroupLockedSettingsReq0Recording) Get() (v GroupLockedSettingsReq0Recording, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGroupLockedSettingsReq0Recording) Or(d GroupLockedSettingsReq0Recording) GroupLockedSettingsReq0Recording {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGroupLockedSettingsReq0RecordingIPAddressAccessControl returns new OptGroupLockedSettingsReq0RecordingIPAddressAccessControl with value set to v.
func NewOptGroupLockedSettingsReq0RecordingIPAddressAccessControl(v GroupLockedSettingsReq0RecordingIPAddressAccessControl) OptGroupLockedSettingsReq0RecordingIPAddressAccessControl {
	return OptGroupLockedSettingsReq0RecordingIPAddressAccessControl{
		Value: v,
		Set:   true,
	}
}

// OptGroupLockedSettingsReq0RecordingIPAddressAccessControl is optional GroupLockedSettingsReq0RecordingIPAddressAccessControl.
type OptGroupLockedSettingsReq0RecordingIPAddressAccessControl struct {
	Value GroupLockedSettingsReq0RecordingIPAddressAccessControl
	Set   bool
}

// IsSet returns true if OptGroupLockedSettingsReq0RecordingIPAddressAccessControl was set.
func (o OptGroupLockedSettingsReq0RecordingIPAddressAccessControl) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGroupLockedSettingsReq0RecordingIPAddressAccessControl) Reset() {
	var v GroupLockedSettingsReq0RecordingIPAddressAccessControl
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGroupLockedSettingsReq0RecordingIPAddressAccessControl) SetTo(v GroupLockedSettingsReq0RecordingIPAddressAccessControl) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGroupLockedSettingsReq0RecordingIPAddressAccessControl) Get() (v GroupLockedSettingsReq0RecordingIPAddressAccessControl, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGroupLockedSettingsReq0RecordingIPAddressAccessControl) Or(d GroupLockedSettingsReq0RecordingIPAddressAccessControl) GroupLockedSettingsReq0RecordingIPAddressAccessControl {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGroupLockedSettingsReq0ScheduleMeeting returns new OptGroupLockedSettingsReq0ScheduleMeeting with value set to v.
func NewOptGroupLockedSettingsReq0ScheduleMeeting(v GroupLockedSettingsReq0ScheduleMeeting) OptGroupLockedSettingsReq0ScheduleMeeting {
	return OptGroupLockedSettingsReq0ScheduleMeeting{
		Value: v,
		Set:   true,
	}
}

// OptGroupLockedSettingsReq0ScheduleMeeting is optional GroupLockedSettingsReq0ScheduleMeeting.
type OptGroupLockedSettingsReq0ScheduleMeeting struct {
	Value GroupLockedSettingsReq0ScheduleMeeting
	Set   bool
}

// IsSet returns true if OptGroupLockedSettingsReq0ScheduleMeeting was set.
func (o OptGroupLockedSettingsReq0ScheduleMeeting) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGroupLockedSettingsReq0ScheduleMeeting) Reset() {
	var v GroupLockedSettingsReq0ScheduleMeeting
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGroupLockedSettingsReq0ScheduleMeeting) SetTo(v GroupLockedSettingsReq0ScheduleMeeting) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGroupLockedSettingsReq0ScheduleMeeting) Get() (v GroupLockedSettingsReq0ScheduleMeeting, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGroupLockedSettingsReq0ScheduleMeeting) Or(d GroupLockedSettingsReq0ScheduleMeeting) GroupLockedSettingsReq0ScheduleMeeting {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGroupLockedSettingsReq0Telephony returns new OptGroupLockedSettingsReq0Telephony with value set to v.
func NewOptGroupLockedSettingsReq0Telephony(v GroupLockedSettingsReq0Telephony) OptGroupLockedSettingsReq0Telephony {
	return OptGroupLockedSettingsReq0Telephony{
		Value: v,
		Set:   true,
	}
}

// OptGroupLockedSettingsReq0Telephony is optional GroupLockedSettingsReq0Telephony.
type OptGroupLockedSettingsReq0Telephony struct {
	Value GroupLockedSettingsReq0Telephony
	Set   bool
}

// IsSet returns true if OptGroupLockedSettingsReq0Telephony was set.
func (o OptGroupLockedSettingsReq0Telephony) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGroupLockedSettingsReq0Telephony) Reset() {
	var v GroupLockedSettingsReq0Telephony
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGroupLockedSettingsReq0Telephony) SetTo(v GroupLockedSettingsReq0Telephony) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGroupLockedSettingsReq0Telephony) Get() (v GroupLockedSettingsReq0Telephony, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGroupLockedSettingsReq0Telephony) Or(d GroupLockedSettingsReq0Telephony) GroupLockedSettingsReq0Telephony {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGroupLockedSettingsReq1MeetingSecurity returns new OptGroupLockedSettingsReq1MeetingSecurity with value set to v.
func NewOptGroupLockedSettingsReq1MeetingSecurity(v GroupLockedSettingsReq1MeetingSecurity) OptGroupLockedSettingsReq1MeetingSecurity {
	return OptGroupLockedSettingsReq1MeetingSecurity{
		Value: v,
		Set:   true,
	}
}

// OptGroupLockedSettingsReq1MeetingSecurity is optional GroupLockedSettingsReq1MeetingSecurity.
type OptGroupLockedSettingsReq1MeetingSecurity struct {
	Value GroupLockedSettingsReq1MeetingSecurity
	Set   bool
}

// IsSet returns true if OptGroupLockedSettingsReq1MeetingSecurity was set.
func (o OptGroupLockedSettingsReq1MeetingSecurity) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGroupLockedSettingsReq1MeetingSecurity) Reset() {
	var v GroupLockedSettingsReq1MeetingSecurity
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGroupLockedSettingsReq1MeetingSecurity) SetTo(v GroupLockedSettingsReq1MeetingSecurity) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGroupLockedSettingsReq1MeetingSecurity) Get() (v GroupLockedSettingsReq1MeetingSecurity, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGroupLockedSettingsReq1MeetingSecurity) Or(d GroupLockedSettingsReq1MeetingSecurity) GroupLockedSettingsReq1MeetingSecurity {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGroupMembersCreateReq returns new OptGroupMembersCreateReq with value set to v.
func NewOptGroupMembersCreateReq(v GroupMembersCreateReq) OptGroupMembersCreateReq {
	return OptGroupMembersCreateReq{
		Value: v,
		Set:   true,
	}
}

// OptGroupMembersCreateReq is optional GroupMembersCreateReq.
type OptGroupMembersCreateReq struct {
	Value GroupMembersCreateReq
	Set   bool
}

// IsSet returns true if OptGroupMembersCreateReq was set.
func (o OptGroupMembersCreateReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGroupMembersCreateReq) Reset() {
	var v GroupMembersCreateReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGroupMembersCreateReq) SetTo(v GroupMembersCreateReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGroupMembersCreateReq) Get() (v GroupMembersCreateReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGroupMembersCreateReq) Or(d GroupMembersCreateReq) GroupMembersCreateReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGroupSettingsRegistrationOKOptions returns new OptGroupSettingsRegistrationOKOptions with value set to v.
func NewOptGroupSettingsRegistrationOKOptions(v GroupSettingsRegistrationOKOptions) OptGroupSettingsRegistrationOKOptions {
	return OptGroupSettingsRegistrationOKOptions{
		Value: v,
		Set:   true,
	}
}

// OptGroupSettingsRegistrationOKOptions is optional GroupSettingsRegistrationOKOptions.
type OptGroupSettingsRegistrationOKOptions struct {
	Value GroupSettingsRegistrationOKOptions
	Set   bool
}

// IsSet returns true if OptGroupSettingsRegistrationOKOptions was set.
func (o OptGroupSettingsRegistrationOKOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGroupSettingsRegistrationOKOptions) Reset() {
	var v GroupSettingsRegistrationOKOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGroupSettingsRegistrationOKOptions) SetTo(v GroupSettingsRegistrationOKOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGroupSettingsRegistrationOKOptions) Get() (v GroupSettingsRegistrationOKOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGroupSettingsRegistrationOKOptions) Or(d GroupSettingsRegistrationOKOptions) GroupSettingsRegistrationOKOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGroupSettingsRegistrationUpdateReq returns new OptGroupSettingsRegistrationUpdateReq with value set to v.
func NewOptGroupSettingsRegistrationUpdateReq(v GroupSettingsRegistrationUpdateReq) OptGroupSettingsRegistrationUpdateReq {
	return OptGroupSettingsRegistrationUpdateReq{
		Value: v,
		Set:   true,
	}
}

// OptGroupSettingsRegistrationUpdateReq is optional GroupSettingsRegistrationUpdateReq.
type OptGroupSettingsRegistrationUpdateReq struct {
	Value GroupSettingsRegistrationUpdateReq
	Set   bool
}

// IsSet returns true if OptGroupSettingsRegistrationUpdateReq was set.
func (o OptGroupSettingsRegistrationUpdateReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGroupSettingsRegistrationUpdateReq) Reset() {
	var v GroupSettingsRegistrationUpdateReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGroupSettingsRegistrationUpdateReq) SetTo(v GroupSettingsRegistrationUpdateReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGroupSettingsRegistrationUpdateReq) Get() (v GroupSettingsRegistrationUpdateReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGroupSettingsRegistrationUpdateReq) Or(d GroupSettingsRegistrationUpdateReq) GroupSettingsRegistrationUpdateReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGroupSettingsRegistrationUpdateReqOptions returns new OptGroupSettingsRegistrationUpdateReqOptions with value set to v.
func NewOptGroupSettingsRegistrationUpdateReqOptions(v GroupSettingsRegistrationUpdateReqOptions) OptGroupSettingsRegistrationUpdateReqOptions {
	return OptGroupSettingsRegistrationUpdateReqOptions{
		Value: v,
		Set:   true,
	}
}

// OptGroupSettingsRegistrationUpdateReqOptions is optional GroupSettingsRegistrationUpdateReqOptions.
type OptGroupSettingsRegistrationUpdateReqOptions struct {
	Value GroupSettingsRegistrationUpdateReqOptions
	Set   bool
}

// IsSet returns true if OptGroupSettingsRegistrationUpdateReqOptions was set.
func (o OptGroupSettingsRegistrationUpdateReqOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGroupSettingsRegistrationUpdateReqOptions) Reset() {
	var v GroupSettingsRegistrationUpdateReqOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGroupSettingsRegistrationUpdateReqOptions) SetTo(v GroupSettingsRegistrationUpdateReqOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGroupSettingsRegistrationUpdateReqOptions) Get() (v GroupSettingsRegistrationUpdateReqOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGroupSettingsRegistrationUpdateReqOptions) Or(d GroupSettingsRegistrationUpdateReqOptions) GroupSettingsRegistrationUpdateReqOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGroupUpdateReq returns new OptGroupUpdateReq with value set to v.
func NewOptGroupUpdateReq(v GroupUpdateReq) OptGroupUpdateReq {
	return OptGroupUpdateReq{
		Value: v,
		Set:   true,
	}
}

// OptGroupUpdateReq is optional GroupUpdateReq.
type OptGroupUpdateReq struct {
	Value GroupUpdateReq
	Set   bool
}

// IsSet returns true if OptGroupUpdateReq was set.
func (o OptGroupUpdateReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGroupUpdateReq) Reset() {
	var v GroupUpdateReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGroupUpdateReq) SetTo(v GroupUpdateReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGroupUpdateReq) Get() (v GroupUpdateReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGroupUpdateReq) Or(d GroupUpdateReq) GroupUpdateReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateAGroupMemberReq returns new OptUpdateAGroupMemberReq with value set to v.
func NewOptUpdateAGroupMemberReq(v UpdateAGroupMemberReq) OptUpdateAGroupMemberReq {
	return OptUpdateAGroupMemberReq{
		Value: v,
		Set:   true,
	}
}

// OptUpdateAGroupMemberReq is optional UpdateAGroupMemberReq.
type OptUpdateAGroupMemberReq struct {
	Value UpdateAGroupMemberReq
	Set   bool
}

// IsSet returns true if OptUpdateAGroupMemberReq was set.
func (o OptUpdateAGroupMemberReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateAGroupMemberReq) Reset() {
	var v UpdateAGroupMemberReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateAGroupMemberReq) SetTo(v UpdateAGroupMemberReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateAGroupMemberReq) Get() (v UpdateAGroupMemberReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateAGroupMemberReq) Or(d UpdateAGroupMemberReq) UpdateAGroupMemberReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateGroupSettingsReq returns new OptUpdateGroupSettingsReq with value set to v.
func NewOptUpdateGroupSettingsReq(v UpdateGroupSettingsReq) OptUpdateGroupSettingsReq {
	return OptUpdateGroupSettingsReq{
		Value: v,
		Set:   true,
	}
}

// OptUpdateGroupSettingsReq is optional UpdateGroupSettingsReq.
type OptUpdateGroupSettingsReq struct {
	Value UpdateGroupSettingsReq
	Set   bool
}

// IsSet returns true if OptUpdateGroupSettingsReq was set.
func (o OptUpdateGroupSettingsReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateGroupSettingsReq) Reset() {
	var v UpdateGroupSettingsReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateGroupSettingsReq) SetTo(v UpdateGroupSettingsReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateGroupSettingsReq) Get() (v UpdateGroupSettingsReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateGroupSettingsReq) Or(d UpdateGroupSettingsReq) UpdateGroupSettingsReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateGroupSettingsReq0AudioConferencing returns new OptUpdateGroupSettingsReq0AudioConferencing with value set to v.
func NewOptUpdateGroupSettingsReq0AudioConferencing(v UpdateGroupSettingsReq0AudioConferencing) OptUpdateGroupSettingsReq0AudioConferencing {
	return OptUpdateGroupSettingsReq0AudioConferencing{
		Value: v,
		Set:   true,
	}
}

// OptUpdateGroupSettingsReq0AudioConferencing is optional UpdateGroupSettingsReq0AudioConferencing.
type OptUpdateGroupSettingsReq0AudioConferencing struct {
	Value UpdateGroupSettingsReq0AudioConferencing
	Set   bool
}

// IsSet returns true if OptUpdateGroupSettingsReq0AudioConferencing was set.
func (o OptUpdateGroupSettingsReq0AudioConferencing) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateGroupSettingsReq0AudioConferencing) Reset() {
	var v UpdateGroupSettingsReq0AudioConferencing
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateGroupSettingsReq0AudioConferencing) SetTo(v UpdateGroupSettingsReq0AudioConferencing) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateGroupSettingsReq0AudioConferencing) Get() (v UpdateGroupSettingsReq0AudioConferencing, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateGroupSettingsReq0AudioConferencing) Or(d UpdateGroupSettingsReq0AudioConferencing) UpdateGroupSettingsReq0AudioConferencing {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCall returns new OptUpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCall with value set to v.
func NewOptUpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCall(v UpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCall) OptUpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCall {
	return OptUpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCall{
		Value: v,
		Set:   true,
	}
}

// OptUpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCall is optional UpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCall.
type OptUpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCall struct {
	Value UpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCall
	Set   bool
}

// IsSet returns true if OptUpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCall was set.
func (o OptUpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCall) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptUpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCall) Reset() {
	var v UpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCall
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCall) SetTo(v UpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCall) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCall) Get() (v UpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCall, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCall) Or(d UpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCall) UpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCall {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateGroupSettingsReq0Chat returns new OptUpdateGroupSettingsReq0Chat with value set to v.
func NewOptUpdateGroupSettingsReq0Chat(v UpdateGroupSettingsReq0Chat) OptUpdateGroupSettingsReq0Chat {
	return OptUpdateGroupSettingsReq0Chat{
		Value: v,
		Set:   true,
	}
}

// OptUpdateGroupSettingsReq0Chat is optional UpdateGroupSettingsReq0Chat.
type OptUpdateGroupSettingsReq0Chat struct {
	Value UpdateGroupSettingsReq0Chat
	Set   bool
}

// IsSet returns true if OptUpdateGroupSettingsReq0Chat was set.
func (o OptUpdateGroupSettingsReq0Chat) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateGroupSettingsReq0Chat) Reset() {
	var v UpdateGroupSettingsReq0Chat
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateGroupSettingsReq0Chat) SetTo(v UpdateGroupSettingsReq0Chat) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateGroupSettingsReq0Chat) Get() (v UpdateGroupSettingsReq0Chat, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateGroupSettingsReq0Chat) Or(d UpdateGroupSettingsReq0Chat) UpdateGroupSettingsReq0Chat {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateGroupSettingsReq0ChatAllowUsersToAddContacts returns new OptUpdateGroupSettingsReq0ChatAllowUsersToAddContacts with value set to v.
func NewOptUpdateGroupSettingsReq0ChatAllowUsersToAddContacts(v UpdateGroupSettingsReq0ChatAllowUsersToAddContacts) OptUpdateGroupSettingsReq0ChatAllowUsersToAddContacts {
	return OptUpdateGroupSettingsReq0ChatAllowUsersToAddContacts{
		Value: v,
		Set:   true,
	}
}

// OptUpdateGroupSettingsReq0ChatAllowUsersToAddContacts is optional UpdateGroupSettingsReq0ChatAllowUsersToAddContacts.
type OptUpdateGroupSettingsReq0ChatAllowUsersToAddContacts struct {
	Value UpdateGroupSettingsReq0ChatAllowUsersToAddContacts
	Set   bool
}

// IsSet returns true if OptUpdateGroupSettingsReq0ChatAllowUsersToAddContacts was set.
func (o OptUpdateGroupSettingsReq0ChatAllowUsersToAddContacts) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateGroupSettingsReq0ChatAllowUsersToAddContacts) Reset() {
	var v UpdateGroupSettingsReq0ChatAllowUsersToAddContacts
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateGroupSettingsReq0ChatAllowUsersToAddContacts) SetTo(v UpdateGroupSettingsReq0ChatAllowUsersToAddContacts) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateGroupSettingsReq0ChatAllowUsersToAddContacts) Get() (v UpdateGroupSettingsReq0ChatAllowUsersToAddContacts, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateGroupSettingsReq0ChatAllowUsersToAddContacts) Or(d UpdateGroupSettingsReq0ChatAllowUsersToAddContacts) UpdateGroupSettingsReq0ChatAllowUsersToAddContacts {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateGroupSettingsReq0ChatAllowUsersToChatWithOthers returns new OptUpdateGroupSettingsReq0ChatAllowUsersToChatWithOthers with value set to v.
func NewOptUpdateGroupSettingsReq0ChatAllowUsersToChatWithOthers(v UpdateGroupSettingsReq0ChatAllowUsersToChatWithOthers) OptUpdateGroupSettingsReq0ChatAllowUsersToChatWithOthers {
	return OptUpdateGroupSettingsReq0ChatAllowUsersToChatWithOthers{
		Value: v,
		Set:   true,
	}
}

// OptUpdateGroupSettingsReq0ChatAllowUsersToChatWithOthers is optional UpdateGroupSettingsReq0ChatAllowUsersToChatWithOthers.
type OptUpdateGroupSettingsReq0ChatAllowUsersToChatWithOthers struct {
	Value UpdateGroupSettingsReq0ChatAllowUsersToChatWithOthers
	Set   bool
}

// IsSet returns true if OptUpdateGroupSettingsReq0ChatAllowUsersToChatWithOthers was set.
func (o OptUpdateGroupSettingsReq0ChatAllowUsersToChatWithOthers) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateGroupSettingsReq0ChatAllowUsersToChatWithOthers) Reset() {
	var v UpdateGroupSettingsReq0ChatAllowUsersToChatWithOthers
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateGroupSettingsReq0ChatAllowUsersToChatWithOthers) SetTo(v UpdateGroupSettingsReq0ChatAllowUsersToChatWithOthers) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateGroupSettingsReq0ChatAllowUsersToChatWithOthers) Get() (v UpdateGroupSettingsReq0ChatAllowUsersToChatWithOthers, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateGroupSettingsReq0ChatAllowUsersToChatWithOthers) Or(d UpdateGroupSettingsReq0ChatAllowUsersToChatWithOthers) UpdateGroupSettingsReq0ChatAllowUsersToChatWithOthers {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateGroupSettingsReq0ChatChatEmojis returns new OptUpdateGroupSettingsReq0ChatChatEmojis with value set to v.
func NewOptUpdateGroupSettingsReq0ChatChatEmojis(v UpdateGroupSettingsReq0ChatChatEmojis) OptUpdateGroupSettingsReq0ChatChatEmojis {
	return OptUpdateGroupSettingsReq0ChatChatEmojis{
		Value: v,
		Set:   true,
	}
}

// OptUpdateGroupSettingsReq0ChatChatEmojis is optional UpdateGroupSettingsReq0ChatChatEmojis.
type OptUpdateGroupSettingsReq0ChatChatEmojis struct {
	Value UpdateGroupSettingsReq0ChatChatEmojis
	Set   bool
}

// IsSet returns true if OptUpdateGroupSettingsReq0ChatChatEmojis was set.
func (o OptUpdateGroupSettingsReq0ChatChatEmojis) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateGroupSettingsReq0ChatChatEmojis) Reset() {
	var v UpdateGroupSettingsReq0ChatChatEmojis
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateGroupSettingsReq0ChatChatEmojis) SetTo(v UpdateGroupSettingsReq0ChatChatEmojis) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateGroupSettingsReq0ChatChatEmojis) Get() (v UpdateGroupSettingsReq0ChatChatEmojis, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateGroupSettingsReq0ChatChatEmojis) Or(d UpdateGroupSettingsReq0ChatChatEmojis) UpdateGroupSettingsReq0ChatChatEmojis {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateGroupSettingsReq0ChatChatEtiquetteTool returns new OptUpdateGroupSettingsReq0ChatChatEtiquetteTool with value set to v.
func NewOptUpdateGroupSettingsReq0ChatChatEtiquetteTool(v UpdateGroupSettingsReq0ChatChatEtiquetteTool) OptUpdateGroupSettingsReq0ChatChatEtiquetteTool {
	return OptUpdateGroupSettingsReq0ChatChatEtiquetteTool{
		Value: v,
		Set:   true,
	}
}

// OptUpdateGroupSettingsReq0ChatChatEtiquetteTool is optional UpdateGroupSettingsReq0ChatChatEtiquetteTool.
type OptUpdateGroupSettingsReq0ChatChatEtiquetteTool struct {
	Value UpdateGroupSettingsReq0ChatChatEtiquetteTool
	Set   bool
}

// IsSet returns true if OptUpdateGroupSettingsReq0ChatChatEtiquetteTool was set.
func (o OptUpdateGroupSettingsReq0ChatChatEtiquetteTool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateGroupSettingsReq0ChatChatEtiquetteTool) Reset() {
	var v UpdateGroupSettingsReq0ChatChatEtiquetteTool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateGroupSettingsReq0ChatChatEtiquetteTool) SetTo(v UpdateGroupSettingsReq0ChatChatEtiquetteTool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateGroupSettingsReq0ChatChatEtiquetteTool) Get() (v UpdateGroupSettingsReq0ChatChatEtiquetteTool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateGroupSettingsReq0ChatChatEtiquetteTool) Or(d UpdateGroupSettingsReq0ChatChatEtiquetteTool) UpdateGroupSettingsReq0ChatChatEtiquetteTool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateGroupSettingsReq0ChatSearchAndSendAnimatedGIFImages returns new OptUpdateGroupSettingsReq0ChatSearchAndSendAnimatedGIFImages with value set to v.
func NewOptUpdateGroupSettingsReq0ChatSearchAndSendAnimatedGIFImages(v UpdateGroupSettingsReq0ChatSearchAndSendAnimatedGIFImages) OptUpdateGroupSettingsReq0ChatSearchAndSendAnimatedGIFImages {
	return OptUpdateGroupSettingsReq0ChatSearchAndSendAnimatedGIFImages{
		Value: v,
		Set:   true,
	}
}

// OptUpdateGroupSettingsReq0ChatSearchAndSendAnimatedGIFImages is optional UpdateGroupSettingsReq0ChatSearchAndSendAnimatedGIFImages.
type OptUpdateGroupSettingsReq0ChatSearchAndSendAnimatedGIFImages struct {
	Value UpdateGroupSettingsReq0ChatSearchAndSendAnimatedGIFImages
	Set   bool
}

// IsSet returns true if OptUpdateGroupSettingsReq0ChatSearchAndSendAnimatedGIFImages was set.
func (o OptUpdateGroupSettingsReq0ChatSearchAndSendAnimatedGIFImages) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateGroupSettingsReq0ChatSearchAndSendAnimatedGIFImages) Reset() {
	var v UpdateGroupSettingsReq0ChatSearchAndSendAnimatedGIFImages
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateGroupSettingsReq0ChatSearchAndSendAnimatedGIFImages) SetTo(v UpdateGroupSettingsReq0ChatSearchAndSendAnimatedGIFImages) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateGroupSettingsReq0ChatSearchAndSendAnimatedGIFImages) Get() (v UpdateGroupSettingsReq0ChatSearchAndSendAnimatedGIFImages, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateGroupSettingsReq0ChatSearchAndSendAnimatedGIFImages) Or(d UpdateGroupSettingsReq0ChatSearchAndSendAnimatedGIFImages) UpdateGroupSettingsReq0ChatSearchAndSendAnimatedGIFImages {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateGroupSettingsReq0ChatSendDataToThirdPartyArchivingService returns new OptUpdateGroupSettingsReq0ChatSendDataToThirdPartyArchivingService with value set to v.
func NewOptUpdateGroupSettingsReq0ChatSendDataToThirdPartyArchivingService(v UpdateGroupSettingsReq0ChatSendDataToThirdPartyArchivingService) OptUpdateGroupSettingsReq0ChatSendDataToThirdPartyArchivingService {
	return OptUpdateGroupSettingsReq0ChatSendDataToThirdPartyArchivingService{
		Value: v,
		Set:   true,
	}
}

// OptUpdateGroupSettingsReq0ChatSendDataToThirdPartyArchivingService is optional UpdateGroupSettingsReq0ChatSendDataToThirdPartyArchivingService.
type OptUpdateGroupSettingsReq0ChatSendDataToThirdPartyArchivingService struct {
	Value UpdateGroupSettingsReq0ChatSendDataToThirdPartyArchivingService
	Set   bool
}

// IsSet returns true if OptUpdateGroupSettingsReq0ChatSendDataToThirdPartyArchivingService was set.
func (o OptUpdateGroupSettingsReq0ChatSendDataToThirdPartyArchivingService) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptUpdateGroupSettingsReq0ChatSendDataToThirdPartyArchivingService) Reset() {
	var v UpdateGroupSettingsReq0ChatSendDataToThirdPartyArchivingService
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateGroupSettingsReq0ChatSendDataToThirdPartyArchivingService) SetTo(v UpdateGroupSettingsReq0ChatSendDataToThirdPartyArchivingService) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateGroupSettingsReq0ChatSendDataToThirdPartyArchivingService) Get() (v UpdateGroupSettingsReq0ChatSendDataToThirdPartyArchivingService, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateGroupSettingsReq0ChatSendDataToThirdPartyArchivingService) Or(d UpdateGroupSettingsReq0ChatSendDataToThirdPartyArchivingService) UpdateGroupSettingsReq0ChatSendDataToThirdPartyArchivingService {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateGroupSettingsReq0ChatSetRetentionPeriodInCloud returns new OptUpdateGroupSettingsReq0ChatSetRetentionPeriodInCloud with value set to v.
func NewOptUpdateGroupSettingsReq0ChatSetRetentionPeriodInCloud(v UpdateGroupSettingsReq0ChatSetRetentionPeriodInCloud) OptUpdateGroupSettingsReq0ChatSetRetentionPeriodInCloud {
	return OptUpdateGroupSettingsReq0ChatSetRetentionPeriodInCloud{
		Value: v,
		Set:   true,
	}
}

// OptUpdateGroupSettingsReq0ChatSetRetentionPeriodInCloud is optional UpdateGroupSettingsReq0ChatSetRetentionPeriodInCloud.
type OptUpdateGroupSettingsReq0ChatSetRetentionPeriodInCloud struct {
	Value UpdateGroupSettingsReq0ChatSetRetentionPeriodInCloud
	Set   bool
}

// IsSet returns true if OptUpdateGroupSettingsReq0ChatSetRetentionPeriodInCloud was set.
func (o OptUpdateGroupSettingsReq0ChatSetRetentionPeriodInCloud) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateGroupSettingsReq0ChatSetRetentionPeriodInCloud) Reset() {
	var v UpdateGroupSettingsReq0ChatSetRetentionPeriodInCloud
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateGroupSettingsReq0ChatSetRetentionPeriodInCloud) SetTo(v UpdateGroupSettingsReq0ChatSetRetentionPeriodInCloud) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateGroupSettingsReq0ChatSetRetentionPeriodInCloud) Get() (v UpdateGroupSettingsReq0ChatSetRetentionPeriodInCloud, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateGroupSettingsReq0ChatSetRetentionPeriodInCloud) Or(d UpdateGroupSettingsReq0ChatSetRetentionPeriodInCloud) UpdateGroupSettingsReq0ChatSetRetentionPeriodInCloud {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateGroupSettingsReq0ChatSetRetentionPeriodInLocal returns new OptUpdateGroupSettingsReq0ChatSetRetentionPeriodInLocal with value set to v.
func NewOptUpdateGroupSettingsReq0ChatSetRetentionPeriodInLocal(v UpdateGroupSettingsReq0ChatSetRetentionPeriodInLocal) OptUpdateGroupSettingsReq0ChatSetRetentionPeriodInLocal {
	return OptUpdateGroupSettingsReq0ChatSetRetentionPeriodInLocal{
		Value: v,
		Set:   true,
	}
}

// OptUpdateGroupSettingsReq0ChatSetRetentionPeriodInLocal is optional UpdateGroupSettingsReq0ChatSetRetentionPeriodInLocal.
type OptUpdateGroupSettingsReq0ChatSetRetentionPeriodInLocal struct {
	Value UpdateGroupSettingsReq0ChatSetRetentionPeriodInLocal
	Set   bool
}

// IsSet returns true if OptUpdateGroupSettingsReq0ChatSetRetentionPeriodInLocal was set.
func (o OptUpdateGroupSettingsReq0ChatSetRetentionPeriodInLocal) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateGroupSettingsReq0ChatSetRetentionPeriodInLocal) Reset() {
	var v UpdateGroupSettingsReq0ChatSetRetentionPeriodInLocal
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateGroupSettingsReq0ChatSetRetentionPeriodInLocal) SetTo(v UpdateGroupSettingsReq0ChatSetRetentionPeriodInLocal) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateGroupSettingsReq0ChatSetRetentionPeriodInLocal) Get() (v UpdateGroupSettingsReq0ChatSetRetentionPeriodInLocal, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateGroupSettingsReq0ChatSetRetentionPeriodInLocal) Or(d UpdateGroupSettingsReq0ChatSetRetentionPeriodInLocal) UpdateGroupSettingsReq0ChatSetRetentionPeriodInLocal {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateGroupSettingsReq0ChatShareFiles returns new OptUpdateGroupSettingsReq0ChatShareFiles with value set to v.
func NewOptUpdateGroupSettingsReq0ChatShareFiles(v UpdateGroupSettingsReq0ChatShareFiles) OptUpdateGroupSettingsReq0ChatShareFiles {
	return OptUpdateGroupSettingsReq0ChatShareFiles{
		Value: v,
		Set:   true,
	}
}

// OptUpdateGroupSettingsReq0ChatShareFiles is optional UpdateGroupSettingsReq0ChatShareFiles.
type OptUpdateGroupSettingsReq0ChatShareFiles struct {
	Value UpdateGroupSettingsReq0ChatShareFiles
	Set   bool
}

// IsSet returns true if OptUpdateGroupSettingsReq0ChatShareFiles was set.
func (o OptUpdateGroupSettingsReq0ChatShareFiles) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateGroupSettingsReq0ChatShareFiles) Reset() {
	var v UpdateGroupSettingsReq0ChatShareFiles
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateGroupSettingsReq0ChatShareFiles) SetTo(v UpdateGroupSettingsReq0ChatShareFiles) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateGroupSettingsReq0ChatShareFiles) Get() (v UpdateGroupSettingsReq0ChatShareFiles, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateGroupSettingsReq0ChatShareFiles) Or(d UpdateGroupSettingsReq0ChatShareFiles) UpdateGroupSettingsReq0ChatShareFiles {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateGroupSettingsReq0EmailNotification returns new OptUpdateGroupSettingsReq0EmailNotification with value set to v.
func NewOptUpdateGroupSettingsReq0EmailNotification(v UpdateGroupSettingsReq0EmailNotification) OptUpdateGroupSettingsReq0EmailNotification {
	return OptUpdateGroupSettingsReq0EmailNotification{
		Value: v,
		Set:   true,
	}
}

// OptUpdateGroupSettingsReq0EmailNotification is optional UpdateGroupSettingsReq0EmailNotification.
type OptUpdateGroupSettingsReq0EmailNotification struct {
	Value UpdateGroupSettingsReq0EmailNotification
	Set   bool
}

// IsSet returns true if OptUpdateGroupSettingsReq0EmailNotification was set.
func (o OptUpdateGroupSettingsReq0EmailNotification) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateGroupSettingsReq0EmailNotification) Reset() {
	var v UpdateGroupSettingsReq0EmailNotification
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateGroupSettingsReq0EmailNotification) SetTo(v UpdateGroupSettingsReq0EmailNotification) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateGroupSettingsReq0EmailNotification) Get() (v UpdateGroupSettingsReq0EmailNotification, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateGroupSettingsReq0EmailNotification) Or(d UpdateGroupSettingsReq0EmailNotification) UpdateGroupSettingsReq0EmailNotification {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateGroupSettingsReq0InMeeting returns new OptUpdateGroupSettingsReq0InMeeting with value set to v.
func NewOptUpdateGroupSettingsReq0InMeeting(v UpdateGroupSettingsReq0InMeeting) OptUpdateGroupSettingsReq0InMeeting {
	return OptUpdateGroupSettingsReq0InMeeting{
		Value: v,
		Set:   true,
	}
}

// OptUpdateGroupSettingsReq0InMeeting is optional UpdateGroupSettingsReq0InMeeting.
type OptUpdateGroupSettingsReq0InMeeting struct {
	Value UpdateGroupSettingsReq0InMeeting
	Set   bool
}

// IsSet returns true if OptUpdateGroupSettingsReq0InMeeting was set.
func (o OptUpdateGroupSettingsReq0InMeeting) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateGroupSettingsReq0InMeeting) Reset() {
	var v UpdateGroupSettingsReq0InMeeting
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateGroupSettingsReq0InMeeting) SetTo(v UpdateGroupSettingsReq0InMeeting) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateGroupSettingsReq0InMeeting) Get() (v UpdateGroupSettingsReq0InMeeting, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateGroupSettingsReq0InMeeting) Or(d UpdateGroupSettingsReq0InMeeting) UpdateGroupSettingsReq0InMeeting {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslation returns new OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslation with value set to v.
func NewOptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslation(v UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslation) OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslation {
	return OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslation{
		Value: v,
		Set:   true,
	}
}

// OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslation is optional UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslation.
type OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslation struct {
	Value UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslation
	Set   bool
}

// IsSet returns true if OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslation was set.
func (o OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslation) Reset() {
	var v UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslation) SetTo(v UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslation) Get() (v UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslation) Or(d UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslation) UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairList returns new OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairList with value set to v.
func NewOptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairList(v UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairList) OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairList {
	return OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairList{
		Value: v,
		Set:   true,
	}
}

// OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairList is optional UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairList.
type OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairList struct {
	Value UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairList
	Set   bool
}

// IsSet returns true if OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairList was set.
func (o OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairList) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairList) Reset() {
	var v UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairList
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairList) SetTo(v UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairList) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairList) Get() (v UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairList, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairList) Or(d UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairList) UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairList {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage returns new OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage with value set to v.
func NewOptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage(v UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage) OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage {
	return OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage{
		Value: v,
		Set:   true,
	}
}

// OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage is optional UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage.
type OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage struct {
	Value UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage
	Set   bool
}

// IsSet returns true if OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage was set.
func (o OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage) Reset() {
	var v UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage) SetTo(v UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage) Get() (v UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage) Or(d UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage) UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo returns new OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo with value set to v.
func NewOptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo(v UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo) OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo {
	return OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo{
		Value: v,
		Set:   true,
	}
}

// OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo is optional UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo.
type OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo struct {
	Value UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo
	Set   bool
}

// IsSet returns true if OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo was set.
func (o OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo) Reset() {
	var v UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo) SetTo(v UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo) Get() (v UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo) Or(d UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo) UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateGroupSettingsReq0InMeetingClosedCaptioning returns new OptUpdateGroupSettingsReq0InMeetingClosedCaptioning with value set to v.
func NewOptUpdateGroupSettingsReq0InMeetingClosedCaptioning(v UpdateGroupSettingsReq0InMeetingClosedCaptioning) OptUpdateGroupSettingsReq0InMeetingClosedCaptioning {
	return OptUpdateGroupSettingsReq0InMeetingClosedCaptioning{
		Value: v,
		Set:   true,
	}
}

// OptUpdateGroupSettingsReq0InMeetingClosedCaptioning is optional UpdateGroupSettingsReq0InMeetingClosedCaptioning.
type OptUpdateGroupSettingsReq0InMeetingClosedCaptioning struct {
	Value UpdateGroupSettingsReq0InMeetingClosedCaptioning
	Set   bool
}

// IsSet returns true if OptUpdateGroupSettingsReq0InMeetingClosedCaptioning was set.
func (o OptUpdateGroupSettingsReq0InMeetingClosedCaptioning) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateGroupSettingsReq0InMeetingClosedCaptioning) Reset() {
	var v UpdateGroupSettingsReq0InMeetingClosedCaptioning
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateGroupSettingsReq0InMeetingClosedCaptioning) SetTo(v UpdateGroupSettingsReq0InMeetingClosedCaptioning) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateGroupSettingsReq0InMeetingClosedCaptioning) Get() (v UpdateGroupSettingsReq0InMeetingClosedCaptioning, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateGroupSettingsReq0InMeetingClosedCaptioning) Or(d UpdateGroupSettingsReq0InMeetingClosedCaptioning) UpdateGroupSettingsReq0InMeetingClosedCaptioning {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateGroupSettingsReq0InMeetingLanguageInterpretation returns new OptUpdateGroupSettingsReq0InMeetingLanguageInterpretation with value set to v.
func NewOptUpdateGroupSettingsReq0InMeetingLanguageInterpretation(v UpdateGroupSettingsReq0InMeetingLanguageInterpretation) OptUpdateGroupSettingsReq0InMeetingLanguageInterpretation {
	return OptUpdateGroupSettingsReq0InMeetingLanguageInterpretation{
		Value: v,
		Set:   true,
	}
}

// OptUpdateGroupSettingsReq0InMeetingLanguageInterpretation is optional UpdateGroupSettingsReq0InMeetingLanguageInterpretation.
type OptUpdateGroupSettingsReq0InMeetingLanguageInterpretation struct {
	Value UpdateGroupSettingsReq0InMeetingLanguageInterpretation
	Set   bool
}

// IsSet returns true if OptUpdateGroupSettingsReq0InMeetingLanguageInterpretation was set.
func (o OptUpdateGroupSettingsReq0InMeetingLanguageInterpretation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateGroupSettingsReq0InMeetingLanguageInterpretation) Reset() {
	var v UpdateGroupSettingsReq0InMeetingLanguageInterpretation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateGroupSettingsReq0InMeetingLanguageInterpretation) SetTo(v UpdateGroupSettingsReq0InMeetingLanguageInterpretation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateGroupSettingsReq0InMeetingLanguageInterpretation) Get() (v UpdateGroupSettingsReq0InMeetingLanguageInterpretation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateGroupSettingsReq0InMeetingLanguageInterpretation) Or(d UpdateGroupSettingsReq0InMeetingLanguageInterpretation) UpdateGroupSettingsReq0InMeetingLanguageInterpretation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateGroupSettingsReq0InMeetingManualCaptioning returns new OptUpdateGroupSettingsReq0InMeetingManualCaptioning with value set to v.
func NewOptUpdateGroupSettingsReq0InMeetingManualCaptioning(v UpdateGroupSettingsReq0InMeetingManualCaptioning) OptUpdateGroupSettingsReq0InMeetingManualCaptioning {
	return OptUpdateGroupSettingsReq0InMeetingManualCaptioning{
		Value: v,
		Set:   true,
	}
}

// OptUpdateGroupSettingsReq0InMeetingManualCaptioning is optional UpdateGroupSettingsReq0InMeetingManualCaptioning.
type OptUpdateGroupSettingsReq0InMeetingManualCaptioning struct {
	Value UpdateGroupSettingsReq0InMeetingManualCaptioning
	Set   bool
}

// IsSet returns true if OptUpdateGroupSettingsReq0InMeetingManualCaptioning was set.
func (o OptUpdateGroupSettingsReq0InMeetingManualCaptioning) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateGroupSettingsReq0InMeetingManualCaptioning) Reset() {
	var v UpdateGroupSettingsReq0InMeetingManualCaptioning
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateGroupSettingsReq0InMeetingManualCaptioning) SetTo(v UpdateGroupSettingsReq0InMeetingManualCaptioning) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateGroupSettingsReq0InMeetingManualCaptioning) Get() (v UpdateGroupSettingsReq0InMeetingManualCaptioning, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateGroupSettingsReq0InMeetingManualCaptioning) Or(d UpdateGroupSettingsReq0InMeetingManualCaptioning) UpdateGroupSettingsReq0InMeetingManualCaptioning {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateGroupSettingsReq0InMeetingMeetingPolling returns new OptUpdateGroupSettingsReq0InMeetingMeetingPolling with value set to v.
func NewOptUpdateGroupSettingsReq0InMeetingMeetingPolling(v UpdateGroupSettingsReq0InMeetingMeetingPolling) OptUpdateGroupSettingsReq0InMeetingMeetingPolling {
	return OptUpdateGroupSettingsReq0InMeetingMeetingPolling{
		Value: v,
		Set:   true,
	}
}

// OptUpdateGroupSettingsReq0InMeetingMeetingPolling is optional UpdateGroupSettingsReq0InMeetingMeetingPolling.
type OptUpdateGroupSettingsReq0InMeetingMeetingPolling struct {
	Value UpdateGroupSettingsReq0InMeetingMeetingPolling
	Set   bool
}

// IsSet returns true if OptUpdateGroupSettingsReq0InMeetingMeetingPolling was set.
func (o OptUpdateGroupSettingsReq0InMeetingMeetingPolling) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateGroupSettingsReq0InMeetingMeetingPolling) Reset() {
	var v UpdateGroupSettingsReq0InMeetingMeetingPolling
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateGroupSettingsReq0InMeetingMeetingPolling) SetTo(v UpdateGroupSettingsReq0InMeetingMeetingPolling) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateGroupSettingsReq0InMeetingMeetingPolling) Get() (v UpdateGroupSettingsReq0InMeetingMeetingPolling, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateGroupSettingsReq0InMeetingMeetingPolling) Or(d UpdateGroupSettingsReq0InMeetingMeetingPolling) UpdateGroupSettingsReq0InMeetingMeetingPolling {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateGroupSettingsReq0InMeetingSignLanguageInterpretation returns new OptUpdateGroupSettingsReq0InMeetingSignLanguageInterpretation with value set to v.
func NewOptUpdateGroupSettingsReq0InMeetingSignLanguageInterpretation(v UpdateGroupSettingsReq0InMeetingSignLanguageInterpretation) OptUpdateGroupSettingsReq0InMeetingSignLanguageInterpretation {
	return OptUpdateGroupSettingsReq0InMeetingSignLanguageInterpretation{
		Value: v,
		Set:   true,
	}
}

// OptUpdateGroupSettingsReq0InMeetingSignLanguageInterpretation is optional UpdateGroupSettingsReq0InMeetingSignLanguageInterpretation.
type OptUpdateGroupSettingsReq0InMeetingSignLanguageInterpretation struct {
	Value UpdateGroupSettingsReq0InMeetingSignLanguageInterpretation
	Set   bool
}

// IsSet returns true if OptUpdateGroupSettingsReq0InMeetingSignLanguageInterpretation was set.
func (o OptUpdateGroupSettingsReq0InMeetingSignLanguageInterpretation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateGroupSettingsReq0InMeetingSignLanguageInterpretation) Reset() {
	var v UpdateGroupSettingsReq0InMeetingSignLanguageInterpretation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateGroupSettingsReq0InMeetingSignLanguageInterpretation) SetTo(v UpdateGroupSettingsReq0InMeetingSignLanguageInterpretation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateGroupSettingsReq0InMeetingSignLanguageInterpretation) Get() (v UpdateGroupSettingsReq0InMeetingSignLanguageInterpretation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateGroupSettingsReq0InMeetingSignLanguageInterpretation) Or(d UpdateGroupSettingsReq0InMeetingSignLanguageInterpretation) UpdateGroupSettingsReq0InMeetingSignLanguageInterpretation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateGroupSettingsReq0InMeetingWebinarChat returns new OptUpdateGroupSettingsReq0InMeetingWebinarChat with value set to v.
func NewOptUpdateGroupSettingsReq0InMeetingWebinarChat(v UpdateGroupSettingsReq0InMeetingWebinarChat) OptUpdateGroupSettingsReq0InMeetingWebinarChat {
	return OptUpdateGroupSettingsReq0InMeetingWebinarChat{
		Value: v,
		Set:   true,
	}
}

// OptUpdateGroupSettingsReq0InMeetingWebinarChat is optional UpdateGroupSettingsReq0InMeetingWebinarChat.
type OptUpdateGroupSettingsReq0InMeetingWebinarChat struct {
	Value UpdateGroupSettingsReq0InMeetingWebinarChat
	Set   bool
}

// IsSet returns true if OptUpdateGroupSettingsReq0InMeetingWebinarChat was set.
func (o OptUpdateGroupSettingsReq0InMeetingWebinarChat) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateGroupSettingsReq0InMeetingWebinarChat) Reset() {
	var v UpdateGroupSettingsReq0InMeetingWebinarChat
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateGroupSettingsReq0InMeetingWebinarChat) SetTo(v UpdateGroupSettingsReq0InMeetingWebinarChat) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateGroupSettingsReq0InMeetingWebinarChat) Get() (v UpdateGroupSettingsReq0InMeetingWebinarChat, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateGroupSettingsReq0InMeetingWebinarChat) Or(d UpdateGroupSettingsReq0InMeetingWebinarChat) UpdateGroupSettingsReq0InMeetingWebinarChat {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateGroupSettingsReq0InMeetingWebinarLiveStreaming returns new OptUpdateGroupSettingsReq0InMeetingWebinarLiveStreaming with value set to v.
func NewOptUpdateGroupSettingsReq0InMeetingWebinarLiveStreaming(v UpdateGroupSettingsReq0InMeetingWebinarLiveStreaming) OptUpdateGroupSettingsReq0InMeetingWebinarLiveStreaming {
	return OptUpdateGroupSettingsReq0InMeetingWebinarLiveStreaming{
		Value: v,
		Set:   true,
	}
}

// OptUpdateGroupSettingsReq0InMeetingWebinarLiveStreaming is optional UpdateGroupSettingsReq0InMeetingWebinarLiveStreaming.
type OptUpdateGroupSettingsReq0InMeetingWebinarLiveStreaming struct {
	Value UpdateGroupSettingsReq0InMeetingWebinarLiveStreaming
	Set   bool
}

// IsSet returns true if OptUpdateGroupSettingsReq0InMeetingWebinarLiveStreaming was set.
func (o OptUpdateGroupSettingsReq0InMeetingWebinarLiveStreaming) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateGroupSettingsReq0InMeetingWebinarLiveStreaming) Reset() {
	var v UpdateGroupSettingsReq0InMeetingWebinarLiveStreaming
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateGroupSettingsReq0InMeetingWebinarLiveStreaming) SetTo(v UpdateGroupSettingsReq0InMeetingWebinarLiveStreaming) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateGroupSettingsReq0InMeetingWebinarLiveStreaming) Get() (v UpdateGroupSettingsReq0InMeetingWebinarLiveStreaming, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateGroupSettingsReq0InMeetingWebinarLiveStreaming) Or(d UpdateGroupSettingsReq0InMeetingWebinarLiveStreaming) UpdateGroupSettingsReq0InMeetingWebinarLiveStreaming {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateGroupSettingsReq0InMeetingWebinarPolling returns new OptUpdateGroupSettingsReq0InMeetingWebinarPolling with value set to v.
func NewOptUpdateGroupSettingsReq0InMeetingWebinarPolling(v UpdateGroupSettingsReq0InMeetingWebinarPolling) OptUpdateGroupSettingsReq0InMeetingWebinarPolling {
	return OptUpdateGroupSettingsReq0InMeetingWebinarPolling{
		Value: v,
		Set:   true,
	}
}

// OptUpdateGroupSettingsReq0InMeetingWebinarPolling is optional UpdateGroupSettingsReq0InMeetingWebinarPolling.
type OptUpdateGroupSettingsReq0InMeetingWebinarPolling struct {
	Value UpdateGroupSettingsReq0InMeetingWebinarPolling
	Set   bool
}

// IsSet returns true if OptUpdateGroupSettingsReq0InMeetingWebinarPolling was set.
func (o OptUpdateGroupSettingsReq0InMeetingWebinarPolling) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateGroupSettingsReq0InMeetingWebinarPolling) Reset() {
	var v UpdateGroupSettingsReq0InMeetingWebinarPolling
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateGroupSettingsReq0InMeetingWebinarPolling) SetTo(v UpdateGroupSettingsReq0InMeetingWebinarPolling) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateGroupSettingsReq0InMeetingWebinarPolling) Get() (v UpdateGroupSettingsReq0InMeetingWebinarPolling, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateGroupSettingsReq0InMeetingWebinarPolling) Or(d UpdateGroupSettingsReq0InMeetingWebinarPolling) UpdateGroupSettingsReq0InMeetingWebinarPolling {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateGroupSettingsReq0OtherOptions returns new OptUpdateGroupSettingsReq0OtherOptions with value set to v.
func NewOptUpdateGroupSettingsReq0OtherOptions(v UpdateGroupSettingsReq0OtherOptions) OptUpdateGroupSettingsReq0OtherOptions {
	return OptUpdateGroupSettingsReq0OtherOptions{
		Value: v,
		Set:   true,
	}
}

// OptUpdateGroupSettingsReq0OtherOptions is optional UpdateGroupSettingsReq0OtherOptions.
type OptUpdateGroupSettingsReq0OtherOptions struct {
	Value UpdateGroupSettingsReq0OtherOptions
	Set   bool
}

// IsSet returns true if OptUpdateGroupSettingsReq0OtherOptions was set.
func (o OptUpdateGroupSettingsReq0OtherOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateGroupSettingsReq0OtherOptions) Reset() {
	var v UpdateGroupSettingsReq0OtherOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateGroupSettingsReq0OtherOptions) SetTo(v UpdateGroupSettingsReq0OtherOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateGroupSettingsReq0OtherOptions) Get() (v UpdateGroupSettingsReq0OtherOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateGroupSettingsReq0OtherOptions) Or(d UpdateGroupSettingsReq0OtherOptions) UpdateGroupSettingsReq0OtherOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateGroupSettingsReq0OtherOptionsWebinarRegistrationOptions returns new OptUpdateGroupSettingsReq0OtherOptionsWebinarRegistrationOptions with value set to v.
func NewOptUpdateGroupSettingsReq0OtherOptionsWebinarRegistrationOptions(v UpdateGroupSettingsReq0OtherOptionsWebinarRegistrationOptions) OptUpdateGroupSettingsReq0OtherOptionsWebinarRegistrationOptions {
	return OptUpdateGroupSettingsReq0OtherOptionsWebinarRegistrationOptions{
		Value: v,
		Set:   true,
	}
}

// OptUpdateGroupSettingsReq0OtherOptionsWebinarRegistrationOptions is optional UpdateGroupSettingsReq0OtherOptionsWebinarRegistrationOptions.
type OptUpdateGroupSettingsReq0OtherOptionsWebinarRegistrationOptions struct {
	Value UpdateGroupSettingsReq0OtherOptionsWebinarRegistrationOptions
	Set   bool
}

// IsSet returns true if OptUpdateGroupSettingsReq0OtherOptionsWebinarRegistrationOptions was set.
func (o OptUpdateGroupSettingsReq0OtherOptionsWebinarRegistrationOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateGroupSettingsReq0OtherOptionsWebinarRegistrationOptions) Reset() {
	var v UpdateGroupSettingsReq0OtherOptionsWebinarRegistrationOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateGroupSettingsReq0OtherOptionsWebinarRegistrationOptions) SetTo(v UpdateGroupSettingsReq0OtherOptionsWebinarRegistrationOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateGroupSettingsReq0OtherOptionsWebinarRegistrationOptions) Get() (v UpdateGroupSettingsReq0OtherOptionsWebinarRegistrationOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateGroupSettingsReq0OtherOptionsWebinarRegistrationOptions) Or(d UpdateGroupSettingsReq0OtherOptionsWebinarRegistrationOptions) UpdateGroupSettingsReq0OtherOptionsWebinarRegistrationOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateGroupSettingsReq0Profile returns new OptUpdateGroupSettingsReq0Profile with value set to v.
func NewOptUpdateGroupSettingsReq0Profile(v UpdateGroupSettingsReq0Profile) OptUpdateGroupSettingsReq0Profile {
	return OptUpdateGroupSettingsReq0Profile{
		Value: v,
		Set:   true,
	}
}

// OptUpdateGroupSettingsReq0Profile is optional UpdateGroupSettingsReq0Profile.
type OptUpdateGroupSettingsReq0Profile struct {
	Value UpdateGroupSettingsReq0Profile
	Set   bool
}

// IsSet returns true if OptUpdateGroupSettingsReq0Profile was set.
func (o OptUpdateGroupSettingsReq0Profile) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateGroupSettingsReq0Profile) Reset() {
	var v UpdateGroupSettingsReq0Profile
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateGroupSettingsReq0Profile) SetTo(v UpdateGroupSettingsReq0Profile) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateGroupSettingsReq0Profile) Get() (v UpdateGroupSettingsReq0Profile, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateGroupSettingsReq0Profile) Or(d UpdateGroupSettingsReq0Profile) UpdateGroupSettingsReq0Profile {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateGroupSettingsReq0ProfileRecordingStorageLocation returns new OptUpdateGroupSettingsReq0ProfileRecordingStorageLocation with value set to v.
func NewOptUpdateGroupSettingsReq0ProfileRecordingStorageLocation(v UpdateGroupSettingsReq0ProfileRecordingStorageLocation) OptUpdateGroupSettingsReq0ProfileRecordingStorageLocation {
	return OptUpdateGroupSettingsReq0ProfileRecordingStorageLocation{
		Value: v,
		Set:   true,
	}
}

// OptUpdateGroupSettingsReq0ProfileRecordingStorageLocation is optional UpdateGroupSettingsReq0ProfileRecordingStorageLocation.
type OptUpdateGroupSettingsReq0ProfileRecordingStorageLocation struct {
	Value UpdateGroupSettingsReq0ProfileRecordingStorageLocation
	Set   bool
}

// IsSet returns true if OptUpdateGroupSettingsReq0ProfileRecordingStorageLocation was set.
func (o OptUpdateGroupSettingsReq0ProfileRecordingStorageLocation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateGroupSettingsReq0ProfileRecordingStorageLocation) Reset() {
	var v UpdateGroupSettingsReq0ProfileRecordingStorageLocation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateGroupSettingsReq0ProfileRecordingStorageLocation) SetTo(v UpdateGroupSettingsReq0ProfileRecordingStorageLocation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateGroupSettingsReq0ProfileRecordingStorageLocation) Get() (v UpdateGroupSettingsReq0ProfileRecordingStorageLocation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateGroupSettingsReq0ProfileRecordingStorageLocation) Or(d UpdateGroupSettingsReq0ProfileRecordingStorageLocation) UpdateGroupSettingsReq0ProfileRecordingStorageLocation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateGroupSettingsReq0Recording returns new OptUpdateGroupSettingsReq0Recording with value set to v.
func NewOptUpdateGroupSettingsReq0Recording(v UpdateGroupSettingsReq0Recording) OptUpdateGroupSettingsReq0Recording {
	return OptUpdateGroupSettingsReq0Recording{
		Value: v,
		Set:   true,
	}
}

// OptUpdateGroupSettingsReq0Recording is optional UpdateGroupSettingsReq0Recording.
type OptUpdateGroupSettingsReq0Recording struct {
	Value UpdateGroupSettingsReq0Recording
	Set   bool
}

// IsSet returns true if OptUpdateGroupSettingsReq0Recording was set.
func (o OptUpdateGroupSettingsReq0Recording) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateGroupSettingsReq0Recording) Reset() {
	var v UpdateGroupSettingsReq0Recording
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateGroupSettingsReq0Recording) SetTo(v UpdateGroupSettingsReq0Recording) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateGroupSettingsReq0Recording) Get() (v UpdateGroupSettingsReq0Recording, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateGroupSettingsReq0Recording) Or(d UpdateGroupSettingsReq0Recording) UpdateGroupSettingsReq0Recording {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateGroupSettingsReq0RecordingArchive returns new OptUpdateGroupSettingsReq0RecordingArchive with value set to v.
func NewOptUpdateGroupSettingsReq0RecordingArchive(v UpdateGroupSettingsReq0RecordingArchive) OptUpdateGroupSettingsReq0RecordingArchive {
	return OptUpdateGroupSettingsReq0RecordingArchive{
		Value: v,
		Set:   true,
	}
}

// OptUpdateGroupSettingsReq0RecordingArchive is optional UpdateGroupSettingsReq0RecordingArchive.
type OptUpdateGroupSettingsReq0RecordingArchive struct {
	Value UpdateGroupSettingsReq0RecordingArchive
	Set   bool
}

// IsSet returns true if OptUpdateGroupSettingsReq0RecordingArchive was set.
func (o OptUpdateGroupSettingsReq0RecordingArchive) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateGroupSettingsReq0RecordingArchive) Reset() {
	var v UpdateGroupSettingsReq0RecordingArchive
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateGroupSettingsReq0RecordingArchive) SetTo(v UpdateGroupSettingsReq0RecordingArchive) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateGroupSettingsReq0RecordingArchive) Get() (v UpdateGroupSettingsReq0RecordingArchive, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateGroupSettingsReq0RecordingArchive) Or(d UpdateGroupSettingsReq0RecordingArchive) UpdateGroupSettingsReq0RecordingArchive {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateGroupSettingsReq0RecordingArchiveSettings returns new OptUpdateGroupSettingsReq0RecordingArchiveSettings with value set to v.
func NewOptUpdateGroupSettingsReq0RecordingArchiveSettings(v UpdateGroupSettingsReq0RecordingArchiveSettings) OptUpdateGroupSettingsReq0RecordingArchiveSettings {
	return OptUpdateGroupSettingsReq0RecordingArchiveSettings{
		Value: v,
		Set:   true,
	}
}

// OptUpdateGroupSettingsReq0RecordingArchiveSettings is optional UpdateGroupSettingsReq0RecordingArchiveSettings.
type OptUpdateGroupSettingsReq0RecordingArchiveSettings struct {
	Value UpdateGroupSettingsReq0RecordingArchiveSettings
	Set   bool
}

// IsSet returns true if OptUpdateGroupSettingsReq0RecordingArchiveSettings was set.
func (o OptUpdateGroupSettingsReq0RecordingArchiveSettings) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateGroupSettingsReq0RecordingArchiveSettings) Reset() {
	var v UpdateGroupSettingsReq0RecordingArchiveSettings
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateGroupSettingsReq0RecordingArchiveSettings) SetTo(v UpdateGroupSettingsReq0RecordingArchiveSettings) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateGroupSettingsReq0RecordingArchiveSettings) Get() (v UpdateGroupSettingsReq0RecordingArchiveSettings, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateGroupSettingsReq0RecordingArchiveSettings) Or(d UpdateGroupSettingsReq0RecordingArchiveSettings) UpdateGroupSettingsReq0RecordingArchiveSettings {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateGroupSettingsReq0RecordingIPAddressAccessControl returns new OptUpdateGroupSettingsReq0RecordingIPAddressAccessControl with value set to v.
func NewOptUpdateGroupSettingsReq0RecordingIPAddressAccessControl(v UpdateGroupSettingsReq0RecordingIPAddressAccessControl) OptUpdateGroupSettingsReq0RecordingIPAddressAccessControl {
	return OptUpdateGroupSettingsReq0RecordingIPAddressAccessControl{
		Value: v,
		Set:   true,
	}
}

// OptUpdateGroupSettingsReq0RecordingIPAddressAccessControl is optional UpdateGroupSettingsReq0RecordingIPAddressAccessControl.
type OptUpdateGroupSettingsReq0RecordingIPAddressAccessControl struct {
	Value UpdateGroupSettingsReq0RecordingIPAddressAccessControl
	Set   bool
}

// IsSet returns true if OptUpdateGroupSettingsReq0RecordingIPAddressAccessControl was set.
func (o OptUpdateGroupSettingsReq0RecordingIPAddressAccessControl) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateGroupSettingsReq0RecordingIPAddressAccessControl) Reset() {
	var v UpdateGroupSettingsReq0RecordingIPAddressAccessControl
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateGroupSettingsReq0RecordingIPAddressAccessControl) SetTo(v UpdateGroupSettingsReq0RecordingIPAddressAccessControl) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateGroupSettingsReq0RecordingIPAddressAccessControl) Get() (v UpdateGroupSettingsReq0RecordingIPAddressAccessControl, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateGroupSettingsReq0RecordingIPAddressAccessControl) Or(d UpdateGroupSettingsReq0RecordingIPAddressAccessControl) UpdateGroupSettingsReq0RecordingIPAddressAccessControl {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateGroupSettingsReq0RecordingRecordFilesSeparately returns new OptUpdateGroupSettingsReq0RecordingRecordFilesSeparately with value set to v.
func NewOptUpdateGroupSettingsReq0RecordingRecordFilesSeparately(v UpdateGroupSettingsReq0RecordingRecordFilesSeparately) OptUpdateGroupSettingsReq0RecordingRecordFilesSeparately {
	return OptUpdateGroupSettingsReq0RecordingRecordFilesSeparately{
		Value: v,
		Set:   true,
	}
}

// OptUpdateGroupSettingsReq0RecordingRecordFilesSeparately is optional UpdateGroupSettingsReq0RecordingRecordFilesSeparately.
type OptUpdateGroupSettingsReq0RecordingRecordFilesSeparately struct {
	Value UpdateGroupSettingsReq0RecordingRecordFilesSeparately
	Set   bool
}

// IsSet returns true if OptUpdateGroupSettingsReq0RecordingRecordFilesSeparately was set.
func (o OptUpdateGroupSettingsReq0RecordingRecordFilesSeparately) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateGroupSettingsReq0RecordingRecordFilesSeparately) Reset() {
	var v UpdateGroupSettingsReq0RecordingRecordFilesSeparately
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateGroupSettingsReq0RecordingRecordFilesSeparately) SetTo(v UpdateGroupSettingsReq0RecordingRecordFilesSeparately) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateGroupSettingsReq0RecordingRecordFilesSeparately) Get() (v UpdateGroupSettingsReq0RecordingRecordFilesSeparately, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateGroupSettingsReq0RecordingRecordFilesSeparately) Or(d UpdateGroupSettingsReq0RecordingRecordFilesSeparately) UpdateGroupSettingsReq0RecordingRecordFilesSeparately {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateGroupSettingsReq0RecordingSmartRecording returns new OptUpdateGroupSettingsReq0RecordingSmartRecording with value set to v.
func NewOptUpdateGroupSettingsReq0RecordingSmartRecording(v UpdateGroupSettingsReq0RecordingSmartRecording) OptUpdateGroupSettingsReq0RecordingSmartRecording {
	return OptUpdateGroupSettingsReq0RecordingSmartRecording{
		Value: v,
		Set:   true,
	}
}

// OptUpdateGroupSettingsReq0RecordingSmartRecording is optional UpdateGroupSettingsReq0RecordingSmartRecording.
type OptUpdateGroupSettingsReq0RecordingSmartRecording struct {
	Value UpdateGroupSettingsReq0RecordingSmartRecording
	Set   bool
}

// IsSet returns true if OptUpdateGroupSettingsReq0RecordingSmartRecording was set.
func (o OptUpdateGroupSettingsReq0RecordingSmartRecording) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateGroupSettingsReq0RecordingSmartRecording) Reset() {
	var v UpdateGroupSettingsReq0RecordingSmartRecording
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateGroupSettingsReq0RecordingSmartRecording) SetTo(v UpdateGroupSettingsReq0RecordingSmartRecording) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateGroupSettingsReq0RecordingSmartRecording) Get() (v UpdateGroupSettingsReq0RecordingSmartRecording, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateGroupSettingsReq0RecordingSmartRecording) Or(d UpdateGroupSettingsReq0RecordingSmartRecording) UpdateGroupSettingsReq0RecordingSmartRecording {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateGroupSettingsReq0ScheduleMeeting returns new OptUpdateGroupSettingsReq0ScheduleMeeting with value set to v.
func NewOptUpdateGroupSettingsReq0ScheduleMeeting(v UpdateGroupSettingsReq0ScheduleMeeting) OptUpdateGroupSettingsReq0ScheduleMeeting {
	return OptUpdateGroupSettingsReq0ScheduleMeeting{
		Value: v,
		Set:   true,
	}
}

// OptUpdateGroupSettingsReq0ScheduleMeeting is optional UpdateGroupSettingsReq0ScheduleMeeting.
type OptUpdateGroupSettingsReq0ScheduleMeeting struct {
	Value UpdateGroupSettingsReq0ScheduleMeeting
	Set   bool
}

// IsSet returns true if OptUpdateGroupSettingsReq0ScheduleMeeting was set.
func (o OptUpdateGroupSettingsReq0ScheduleMeeting) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateGroupSettingsReq0ScheduleMeeting) Reset() {
	var v UpdateGroupSettingsReq0ScheduleMeeting
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateGroupSettingsReq0ScheduleMeeting) SetTo(v UpdateGroupSettingsReq0ScheduleMeeting) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateGroupSettingsReq0ScheduleMeeting) Get() (v UpdateGroupSettingsReq0ScheduleMeeting, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateGroupSettingsReq0ScheduleMeeting) Or(d UpdateGroupSettingsReq0ScheduleMeeting) UpdateGroupSettingsReq0ScheduleMeeting {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic returns new OptUpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic with value set to v.
func NewOptUpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic(v UpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic) OptUpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic {
	return OptUpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic{
		Value: v,
		Set:   true,
	}
}

// OptUpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic is optional UpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic.
type OptUpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic struct {
	Value UpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic
	Set   bool
}

// IsSet returns true if OptUpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic was set.
func (o OptUpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptUpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic) Reset() {
	var v UpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic) SetTo(v UpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic) Get() (v UpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic) Or(d UpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic) UpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic returns new OptUpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic with value set to v.
func NewOptUpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic(v UpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic) OptUpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic {
	return OptUpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic{
		Value: v,
		Set:   true,
	}
}

// OptUpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic is optional UpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic.
type OptUpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic struct {
	Value UpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic
	Set   bool
}

// IsSet returns true if OptUpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic was set.
func (o OptUpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptUpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic) Reset() {
	var v UpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic) SetTo(v UpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic) Get() (v UpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic) Or(d UpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic) UpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateGroupSettingsReq0ScheduleMeetingContinuousMeetingChat returns new OptUpdateGroupSettingsReq0ScheduleMeetingContinuousMeetingChat with value set to v.
func NewOptUpdateGroupSettingsReq0ScheduleMeetingContinuousMeetingChat(v UpdateGroupSettingsReq0ScheduleMeetingContinuousMeetingChat) OptUpdateGroupSettingsReq0ScheduleMeetingContinuousMeetingChat {
	return OptUpdateGroupSettingsReq0ScheduleMeetingContinuousMeetingChat{
		Value: v,
		Set:   true,
	}
}

// OptUpdateGroupSettingsReq0ScheduleMeetingContinuousMeetingChat is optional UpdateGroupSettingsReq0ScheduleMeetingContinuousMeetingChat.
type OptUpdateGroupSettingsReq0ScheduleMeetingContinuousMeetingChat struct {
	Value UpdateGroupSettingsReq0ScheduleMeetingContinuousMeetingChat
	Set   bool
}

// IsSet returns true if OptUpdateGroupSettingsReq0ScheduleMeetingContinuousMeetingChat was set.
func (o OptUpdateGroupSettingsReq0ScheduleMeetingContinuousMeetingChat) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateGroupSettingsReq0ScheduleMeetingContinuousMeetingChat) Reset() {
	var v UpdateGroupSettingsReq0ScheduleMeetingContinuousMeetingChat
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateGroupSettingsReq0ScheduleMeetingContinuousMeetingChat) SetTo(v UpdateGroupSettingsReq0ScheduleMeetingContinuousMeetingChat) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateGroupSettingsReq0ScheduleMeetingContinuousMeetingChat) Get() (v UpdateGroupSettingsReq0ScheduleMeetingContinuousMeetingChat, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateGroupSettingsReq0ScheduleMeetingContinuousMeetingChat) Or(d UpdateGroupSettingsReq0ScheduleMeetingContinuousMeetingChat) UpdateGroupSettingsReq0ScheduleMeetingContinuousMeetingChat {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateGroupSettingsReq0Telephony returns new OptUpdateGroupSettingsReq0Telephony with value set to v.
func NewOptUpdateGroupSettingsReq0Telephony(v UpdateGroupSettingsReq0Telephony) OptUpdateGroupSettingsReq0Telephony {
	return OptUpdateGroupSettingsReq0Telephony{
		Value: v,
		Set:   true,
	}
}

// OptUpdateGroupSettingsReq0Telephony is optional UpdateGroupSettingsReq0Telephony.
type OptUpdateGroupSettingsReq0Telephony struct {
	Value UpdateGroupSettingsReq0Telephony
	Set   bool
}

// IsSet returns true if OptUpdateGroupSettingsReq0Telephony was set.
func (o OptUpdateGroupSettingsReq0Telephony) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateGroupSettingsReq0Telephony) Reset() {
	var v UpdateGroupSettingsReq0Telephony
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateGroupSettingsReq0Telephony) SetTo(v UpdateGroupSettingsReq0Telephony) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateGroupSettingsReq0Telephony) Get() (v UpdateGroupSettingsReq0Telephony, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateGroupSettingsReq0Telephony) Or(d UpdateGroupSettingsReq0Telephony) UpdateGroupSettingsReq0Telephony {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateGroupSettingsReq1AuthenticationOption returns new OptUpdateGroupSettingsReq1AuthenticationOption with value set to v.
func NewOptUpdateGroupSettingsReq1AuthenticationOption(v UpdateGroupSettingsReq1AuthenticationOption) OptUpdateGroupSettingsReq1AuthenticationOption {
	return OptUpdateGroupSettingsReq1AuthenticationOption{
		Value: v,
		Set:   true,
	}
}

// OptUpdateGroupSettingsReq1AuthenticationOption is optional UpdateGroupSettingsReq1AuthenticationOption.
type OptUpdateGroupSettingsReq1AuthenticationOption struct {
	Value UpdateGroupSettingsReq1AuthenticationOption
	Set   bool
}

// IsSet returns true if OptUpdateGroupSettingsReq1AuthenticationOption was set.
func (o OptUpdateGroupSettingsReq1AuthenticationOption) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateGroupSettingsReq1AuthenticationOption) Reset() {
	var v UpdateGroupSettingsReq1AuthenticationOption
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateGroupSettingsReq1AuthenticationOption) SetTo(v UpdateGroupSettingsReq1AuthenticationOption) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateGroupSettingsReq1AuthenticationOption) Get() (v UpdateGroupSettingsReq1AuthenticationOption, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateGroupSettingsReq1AuthenticationOption) Or(d UpdateGroupSettingsReq1AuthenticationOption) UpdateGroupSettingsReq1AuthenticationOption {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateGroupSettingsReq2AuthenticationOption returns new OptUpdateGroupSettingsReq2AuthenticationOption with value set to v.
func NewOptUpdateGroupSettingsReq2AuthenticationOption(v UpdateGroupSettingsReq2AuthenticationOption) OptUpdateGroupSettingsReq2AuthenticationOption {
	return OptUpdateGroupSettingsReq2AuthenticationOption{
		Value: v,
		Set:   true,
	}
}

// OptUpdateGroupSettingsReq2AuthenticationOption is optional UpdateGroupSettingsReq2AuthenticationOption.
type OptUpdateGroupSettingsReq2AuthenticationOption struct {
	Value UpdateGroupSettingsReq2AuthenticationOption
	Set   bool
}

// IsSet returns true if OptUpdateGroupSettingsReq2AuthenticationOption was set.
func (o OptUpdateGroupSettingsReq2AuthenticationOption) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateGroupSettingsReq2AuthenticationOption) Reset() {
	var v UpdateGroupSettingsReq2AuthenticationOption
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateGroupSettingsReq2AuthenticationOption) SetTo(v UpdateGroupSettingsReq2AuthenticationOption) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateGroupSettingsReq2AuthenticationOption) Get() (v UpdateGroupSettingsReq2AuthenticationOption, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateGroupSettingsReq2AuthenticationOption) Or(d UpdateGroupSettingsReq2AuthenticationOption) UpdateGroupSettingsReq2AuthenticationOption {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateGroupSettingsReq3MeetingSecurity returns new OptUpdateGroupSettingsReq3MeetingSecurity with value set to v.
func NewOptUpdateGroupSettingsReq3MeetingSecurity(v UpdateGroupSettingsReq3MeetingSecurity) OptUpdateGroupSettingsReq3MeetingSecurity {
	return OptUpdateGroupSettingsReq3MeetingSecurity{
		Value: v,
		Set:   true,
	}
}

// OptUpdateGroupSettingsReq3MeetingSecurity is optional UpdateGroupSettingsReq3MeetingSecurity.
type OptUpdateGroupSettingsReq3MeetingSecurity struct {
	Value UpdateGroupSettingsReq3MeetingSecurity
	Set   bool
}

// IsSet returns true if OptUpdateGroupSettingsReq3MeetingSecurity was set.
func (o OptUpdateGroupSettingsReq3MeetingSecurity) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateGroupSettingsReq3MeetingSecurity) Reset() {
	var v UpdateGroupSettingsReq3MeetingSecurity
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateGroupSettingsReq3MeetingSecurity) SetTo(v UpdateGroupSettingsReq3MeetingSecurity) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateGroupSettingsReq3MeetingSecurity) Get() (v UpdateGroupSettingsReq3MeetingSecurity, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateGroupSettingsReq3MeetingSecurity) Or(d UpdateGroupSettingsReq3MeetingSecurity) UpdateGroupSettingsReq3MeetingSecurity {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateGroupSettingsReq3MeetingSecurityChatEtiquetteTool returns new OptUpdateGroupSettingsReq3MeetingSecurityChatEtiquetteTool with value set to v.
func NewOptUpdateGroupSettingsReq3MeetingSecurityChatEtiquetteTool(v UpdateGroupSettingsReq3MeetingSecurityChatEtiquetteTool) OptUpdateGroupSettingsReq3MeetingSecurityChatEtiquetteTool {
	return OptUpdateGroupSettingsReq3MeetingSecurityChatEtiquetteTool{
		Value: v,
		Set:   true,
	}
}

// OptUpdateGroupSettingsReq3MeetingSecurityChatEtiquetteTool is optional UpdateGroupSettingsReq3MeetingSecurityChatEtiquetteTool.
type OptUpdateGroupSettingsReq3MeetingSecurityChatEtiquetteTool struct {
	Value UpdateGroupSettingsReq3MeetingSecurityChatEtiquetteTool
	Set   bool
}

// IsSet returns true if OptUpdateGroupSettingsReq3MeetingSecurityChatEtiquetteTool was set.
func (o OptUpdateGroupSettingsReq3MeetingSecurityChatEtiquetteTool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateGroupSettingsReq3MeetingSecurityChatEtiquetteTool) Reset() {
	var v UpdateGroupSettingsReq3MeetingSecurityChatEtiquetteTool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateGroupSettingsReq3MeetingSecurityChatEtiquetteTool) SetTo(v UpdateGroupSettingsReq3MeetingSecurityChatEtiquetteTool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateGroupSettingsReq3MeetingSecurityChatEtiquetteTool) Get() (v UpdateGroupSettingsReq3MeetingSecurityChatEtiquetteTool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateGroupSettingsReq3MeetingSecurityChatEtiquetteTool) Or(d UpdateGroupSettingsReq3MeetingSecurityChatEtiquetteTool) UpdateGroupSettingsReq3MeetingSecurityChatEtiquetteTool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement returns new OptUpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement with value set to v.
func NewOptUpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement(v UpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement) OptUpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement {
	return OptUpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement{
		Value: v,
		Set:   true,
	}
}

// OptUpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement is optional UpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement.
type OptUpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement struct {
	Value UpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement
	Set   bool
}

// IsSet returns true if OptUpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement was set.
func (o OptUpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptUpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement) Reset() {
	var v UpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement) SetTo(v UpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement) Get() (v UpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement) Or(d UpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement) UpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateGroupSettingsReq3MeetingSecurityWaitingRoomSettings returns new OptUpdateGroupSettingsReq3MeetingSecurityWaitingRoomSettings with value set to v.
func NewOptUpdateGroupSettingsReq3MeetingSecurityWaitingRoomSettings(v UpdateGroupSettingsReq3MeetingSecurityWaitingRoomSettings) OptUpdateGroupSettingsReq3MeetingSecurityWaitingRoomSettings {
	return OptUpdateGroupSettingsReq3MeetingSecurityWaitingRoomSettings{
		Value: v,
		Set:   true,
	}
}

// OptUpdateGroupSettingsReq3MeetingSecurityWaitingRoomSettings is optional UpdateGroupSettingsReq3MeetingSecurityWaitingRoomSettings.
type OptUpdateGroupSettingsReq3MeetingSecurityWaitingRoomSettings struct {
	Value UpdateGroupSettingsReq3MeetingSecurityWaitingRoomSettings
	Set   bool
}

// IsSet returns true if OptUpdateGroupSettingsReq3MeetingSecurityWaitingRoomSettings was set.
func (o OptUpdateGroupSettingsReq3MeetingSecurityWaitingRoomSettings) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateGroupSettingsReq3MeetingSecurityWaitingRoomSettings) Reset() {
	var v UpdateGroupSettingsReq3MeetingSecurityWaitingRoomSettings
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateGroupSettingsReq3MeetingSecurityWaitingRoomSettings) SetTo(v UpdateGroupSettingsReq3MeetingSecurityWaitingRoomSettings) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateGroupSettingsReq3MeetingSecurityWaitingRoomSettings) Get() (v UpdateGroupSettingsReq3MeetingSecurityWaitingRoomSettings, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateGroupSettingsReq3MeetingSecurityWaitingRoomSettings) Or(d UpdateGroupSettingsReq3MeetingSecurityWaitingRoomSettings) UpdateGroupSettingsReq3MeetingSecurityWaitingRoomSettings {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdatePresenceStatusReq returns new OptUpdatePresenceStatusReq with value set to v.
func NewOptUpdatePresenceStatusReq(v UpdatePresenceStatusReq) OptUpdatePresenceStatusReq {
	return OptUpdatePresenceStatusReq{
		Value: v,
		Set:   true,
	}
}

// OptUpdatePresenceStatusReq is optional UpdatePresenceStatusReq.
type OptUpdatePresenceStatusReq struct {
	Value UpdatePresenceStatusReq
	Set   bool
}

// IsSet returns true if OptUpdatePresenceStatusReq was set.
func (o OptUpdatePresenceStatusReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdatePresenceStatusReq) Reset() {
	var v UpdatePresenceStatusReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdatePresenceStatusReq) SetTo(v UpdatePresenceStatusReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdatePresenceStatusReq) Get() (v UpdatePresenceStatusReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdatePresenceStatusReq) Or(d UpdatePresenceStatusReq) UpdatePresenceStatusReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUploadGroupVBReq returns new OptUploadGroupVBReq with value set to v.
func NewOptUploadGroupVBReq(v UploadGroupVBReq) OptUploadGroupVBReq {
	return OptUploadGroupVBReq{
		Value: v,
		Set:   true,
	}
}

// OptUploadGroupVBReq is optional UploadGroupVBReq.
type OptUploadGroupVBReq struct {
	Value UploadGroupVBReq
	Set   bool
}

// IsSet returns true if OptUploadGroupVBReq was set.
func (o OptUploadGroupVBReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUploadGroupVBReq) Reset() {
	var v UploadGroupVBReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUploadGroupVBReq) SetTo(v UploadGroupVBReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUploadGroupVBReq) Get() (v UploadGroupVBReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUploadGroupVBReq) Or(d UploadGroupVBReq) UploadGroupVBReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUploadVBuserReq returns new OptUploadVBuserReq with value set to v.
func NewOptUploadVBuserReq(v UploadVBuserReq) OptUploadVBuserReq {
	return OptUploadVBuserReq{
		Value: v,
		Set:   true,
	}
}

// OptUploadVBuserReq is optional UploadVBuserReq.
type OptUploadVBuserReq struct {
	Value UploadVBuserReq
	Set   bool
}

// IsSet returns true if OptUploadVBuserReq was set.
func (o OptUploadVBuserReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUploadVBuserReq) Reset() {
	var v UploadVBuserReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUploadVBuserReq) SetTo(v UploadVBuserReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUploadVBuserReq) Get() (v UploadVBuserReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUploadVBuserReq) Or(d UploadVBuserReq) UploadVBuserReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserAssistantCreateReq returns new OptUserAssistantCreateReq with value set to v.
func NewOptUserAssistantCreateReq(v UserAssistantCreateReq) OptUserAssistantCreateReq {
	return OptUserAssistantCreateReq{
		Value: v,
		Set:   true,
	}
}

// OptUserAssistantCreateReq is optional UserAssistantCreateReq.
type OptUserAssistantCreateReq struct {
	Value UserAssistantCreateReq
	Set   bool
}

// IsSet returns true if OptUserAssistantCreateReq was set.
func (o OptUserAssistantCreateReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserAssistantCreateReq) Reset() {
	var v UserAssistantCreateReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserAssistantCreateReq) SetTo(v UserAssistantCreateReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserAssistantCreateReq) Get() (v UserAssistantCreateReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserAssistantCreateReq) Or(d UserAssistantCreateReq) UserAssistantCreateReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserCreateReq returns new OptUserCreateReq with value set to v.
func NewOptUserCreateReq(v UserCreateReq) OptUserCreateReq {
	return OptUserCreateReq{
		Value: v,
		Set:   true,
	}
}

// OptUserCreateReq is optional UserCreateReq.
type OptUserCreateReq struct {
	Value UserCreateReq
	Set   bool
}

// IsSet returns true if OptUserCreateReq was set.
func (o OptUserCreateReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserCreateReq) Reset() {
	var v UserCreateReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserCreateReq) SetTo(v UserCreateReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserCreateReq) Get() (v UserCreateReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserCreateReq) Or(d UserCreateReq) UserCreateReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserCreateReqUserInfo returns new OptUserCreateReqUserInfo with value set to v.
func NewOptUserCreateReqUserInfo(v UserCreateReqUserInfo) OptUserCreateReqUserInfo {
	return OptUserCreateReqUserInfo{
		Value: v,
		Set:   true,
	}
}

// OptUserCreateReqUserInfo is optional UserCreateReqUserInfo.
type OptUserCreateReqUserInfo struct {
	Value UserCreateReqUserInfo
	Set   bool
}

// IsSet returns true if OptUserCreateReqUserInfo was set.
func (o OptUserCreateReqUserInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserCreateReqUserInfo) Reset() {
	var v UserCreateReqUserInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserCreateReqUserInfo) SetTo(v UserCreateReqUserInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserCreateReqUserInfo) Get() (v UserCreateReqUserInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserCreateReqUserInfo) Or(d UserCreateReqUserInfo) UserCreateReqUserInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserCreateReqUserInfoFeature returns new OptUserCreateReqUserInfoFeature with value set to v.
func NewOptUserCreateReqUserInfoFeature(v UserCreateReqUserInfoFeature) OptUserCreateReqUserInfoFeature {
	return OptUserCreateReqUserInfoFeature{
		Value: v,
		Set:   true,
	}
}

// OptUserCreateReqUserInfoFeature is optional UserCreateReqUserInfoFeature.
type OptUserCreateReqUserInfoFeature struct {
	Value UserCreateReqUserInfoFeature
	Set   bool
}

// IsSet returns true if OptUserCreateReqUserInfoFeature was set.
func (o OptUserCreateReqUserInfoFeature) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserCreateReqUserInfoFeature) Reset() {
	var v UserCreateReqUserInfoFeature
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserCreateReqUserInfoFeature) SetTo(v UserCreateReqUserInfoFeature) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserCreateReqUserInfoFeature) Get() (v UserCreateReqUserInfoFeature, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserCreateReqUserInfoFeature) Or(d UserCreateReqUserInfoFeature) UserCreateReqUserInfoFeature {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserEmailUpdateReq returns new OptUserEmailUpdateReq with value set to v.
func NewOptUserEmailUpdateReq(v UserEmailUpdateReq) OptUserEmailUpdateReq {
	return OptUserEmailUpdateReq{
		Value: v,
		Set:   true,
	}
}

// OptUserEmailUpdateReq is optional UserEmailUpdateReq.
type OptUserEmailUpdateReq struct {
	Value UserEmailUpdateReq
	Set   bool
}

// IsSet returns true if OptUserEmailUpdateReq was set.
func (o OptUserEmailUpdateReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserEmailUpdateReq) Reset() {
	var v UserEmailUpdateReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserEmailUpdateReq) SetTo(v UserEmailUpdateReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserEmailUpdateReq) Get() (v UserEmailUpdateReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserEmailUpdateReq) Or(d UserEmailUpdateReq) UserEmailUpdateReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserPasswordReq returns new OptUserPasswordReq with value set to v.
func NewOptUserPasswordReq(v UserPasswordReq) OptUserPasswordReq {
	return OptUserPasswordReq{
		Value: v,
		Set:   true,
	}
}

// OptUserPasswordReq is optional UserPasswordReq.
type OptUserPasswordReq struct {
	Value UserPasswordReq
	Set   bool
}

// IsSet returns true if OptUserPasswordReq was set.
func (o OptUserPasswordReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserPasswordReq) Reset() {
	var v UserPasswordReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserPasswordReq) SetTo(v UserPasswordReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserPasswordReq) Get() (v UserPasswordReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserPasswordReq) Or(d UserPasswordReq) UserPasswordReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserPictureReq returns new OptUserPictureReq with value set to v.
func NewOptUserPictureReq(v UserPictureReq) OptUserPictureReq {
	return OptUserPictureReq{
		Value: v,
		Set:   true,
	}
}

// OptUserPictureReq is optional UserPictureReq.
type OptUserPictureReq struct {
	Value UserPictureReq
	Set   bool
}

// IsSet returns true if OptUserPictureReq was set.
func (o OptUserPictureReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserPictureReq) Reset() {
	var v UserPictureReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserPictureReq) SetTo(v UserPictureReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserPictureReq) Get() (v UserPictureReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserPictureReq) Or(d UserPictureReq) UserPictureReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsOK0AudioConferencing returns new OptUserSettingsOK0AudioConferencing with value set to v.
func NewOptUserSettingsOK0AudioConferencing(v UserSettingsOK0AudioConferencing) OptUserSettingsOK0AudioConferencing {
	return OptUserSettingsOK0AudioConferencing{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsOK0AudioConferencing is optional UserSettingsOK0AudioConferencing.
type OptUserSettingsOK0AudioConferencing struct {
	Value UserSettingsOK0AudioConferencing
	Set   bool
}

// IsSet returns true if OptUserSettingsOK0AudioConferencing was set.
func (o OptUserSettingsOK0AudioConferencing) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsOK0AudioConferencing) Reset() {
	var v UserSettingsOK0AudioConferencing
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsOK0AudioConferencing) SetTo(v UserSettingsOK0AudioConferencing) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsOK0AudioConferencing) Get() (v UserSettingsOK0AudioConferencing, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsOK0AudioConferencing) Or(d UserSettingsOK0AudioConferencing) UserSettingsOK0AudioConferencing {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall returns new OptUserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall with value set to v.
func NewOptUserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall(v UserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall) OptUserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall {
	return OptUserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall is optional UserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall.
type OptUserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall struct {
	Value UserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall
	Set   bool
}

// IsSet returns true if OptUserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall was set.
func (o OptUserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall) Reset() {
	var v UserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall) SetTo(v UserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall) Get() (v UserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall) Or(d UserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall) UserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsOK0EmailNotification returns new OptUserSettingsOK0EmailNotification with value set to v.
func NewOptUserSettingsOK0EmailNotification(v UserSettingsOK0EmailNotification) OptUserSettingsOK0EmailNotification {
	return OptUserSettingsOK0EmailNotification{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsOK0EmailNotification is optional UserSettingsOK0EmailNotification.
type OptUserSettingsOK0EmailNotification struct {
	Value UserSettingsOK0EmailNotification
	Set   bool
}

// IsSet returns true if OptUserSettingsOK0EmailNotification was set.
func (o OptUserSettingsOK0EmailNotification) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsOK0EmailNotification) Reset() {
	var v UserSettingsOK0EmailNotification
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsOK0EmailNotification) SetTo(v UserSettingsOK0EmailNotification) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsOK0EmailNotification) Get() (v UserSettingsOK0EmailNotification, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsOK0EmailNotification) Or(d UserSettingsOK0EmailNotification) UserSettingsOK0EmailNotification {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsOK0Feature returns new OptUserSettingsOK0Feature with value set to v.
func NewOptUserSettingsOK0Feature(v UserSettingsOK0Feature) OptUserSettingsOK0Feature {
	return OptUserSettingsOK0Feature{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsOK0Feature is optional UserSettingsOK0Feature.
type OptUserSettingsOK0Feature struct {
	Value UserSettingsOK0Feature
	Set   bool
}

// IsSet returns true if OptUserSettingsOK0Feature was set.
func (o OptUserSettingsOK0Feature) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsOK0Feature) Reset() {
	var v UserSettingsOK0Feature
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsOK0Feature) SetTo(v UserSettingsOK0Feature) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsOK0Feature) Get() (v UserSettingsOK0Feature, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsOK0Feature) Or(d UserSettingsOK0Feature) UserSettingsOK0Feature {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsOK0InMeeting returns new OptUserSettingsOK0InMeeting with value set to v.
func NewOptUserSettingsOK0InMeeting(v UserSettingsOK0InMeeting) OptUserSettingsOK0InMeeting {
	return OptUserSettingsOK0InMeeting{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsOK0InMeeting is optional UserSettingsOK0InMeeting.
type OptUserSettingsOK0InMeeting struct {
	Value UserSettingsOK0InMeeting
	Set   bool
}

// IsSet returns true if OptUserSettingsOK0InMeeting was set.
func (o OptUserSettingsOK0InMeeting) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsOK0InMeeting) Reset() {
	var v UserSettingsOK0InMeeting
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsOK0InMeeting) SetTo(v UserSettingsOK0InMeeting) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsOK0InMeeting) Get() (v UserSettingsOK0InMeeting, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsOK0InMeeting) Or(d UserSettingsOK0InMeeting) UserSettingsOK0InMeeting {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsOK0InMeetingClosedCaptioning returns new OptUserSettingsOK0InMeetingClosedCaptioning with value set to v.
func NewOptUserSettingsOK0InMeetingClosedCaptioning(v UserSettingsOK0InMeetingClosedCaptioning) OptUserSettingsOK0InMeetingClosedCaptioning {
	return OptUserSettingsOK0InMeetingClosedCaptioning{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsOK0InMeetingClosedCaptioning is optional UserSettingsOK0InMeetingClosedCaptioning.
type OptUserSettingsOK0InMeetingClosedCaptioning struct {
	Value UserSettingsOK0InMeetingClosedCaptioning
	Set   bool
}

// IsSet returns true if OptUserSettingsOK0InMeetingClosedCaptioning was set.
func (o OptUserSettingsOK0InMeetingClosedCaptioning) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsOK0InMeetingClosedCaptioning) Reset() {
	var v UserSettingsOK0InMeetingClosedCaptioning
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsOK0InMeetingClosedCaptioning) SetTo(v UserSettingsOK0InMeetingClosedCaptioning) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsOK0InMeetingClosedCaptioning) Get() (v UserSettingsOK0InMeetingClosedCaptioning, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsOK0InMeetingClosedCaptioning) Or(d UserSettingsOK0InMeetingClosedCaptioning) UserSettingsOK0InMeetingClosedCaptioning {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsOK0InMeetingLanguageInterpretation returns new OptUserSettingsOK0InMeetingLanguageInterpretation with value set to v.
func NewOptUserSettingsOK0InMeetingLanguageInterpretation(v UserSettingsOK0InMeetingLanguageInterpretation) OptUserSettingsOK0InMeetingLanguageInterpretation {
	return OptUserSettingsOK0InMeetingLanguageInterpretation{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsOK0InMeetingLanguageInterpretation is optional UserSettingsOK0InMeetingLanguageInterpretation.
type OptUserSettingsOK0InMeetingLanguageInterpretation struct {
	Value UserSettingsOK0InMeetingLanguageInterpretation
	Set   bool
}

// IsSet returns true if OptUserSettingsOK0InMeetingLanguageInterpretation was set.
func (o OptUserSettingsOK0InMeetingLanguageInterpretation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsOK0InMeetingLanguageInterpretation) Reset() {
	var v UserSettingsOK0InMeetingLanguageInterpretation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsOK0InMeetingLanguageInterpretation) SetTo(v UserSettingsOK0InMeetingLanguageInterpretation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsOK0InMeetingLanguageInterpretation) Get() (v UserSettingsOK0InMeetingLanguageInterpretation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsOK0InMeetingLanguageInterpretation) Or(d UserSettingsOK0InMeetingLanguageInterpretation) UserSettingsOK0InMeetingLanguageInterpretation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsOK0InMeetingManualCaptioning returns new OptUserSettingsOK0InMeetingManualCaptioning with value set to v.
func NewOptUserSettingsOK0InMeetingManualCaptioning(v UserSettingsOK0InMeetingManualCaptioning) OptUserSettingsOK0InMeetingManualCaptioning {
	return OptUserSettingsOK0InMeetingManualCaptioning{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsOK0InMeetingManualCaptioning is optional UserSettingsOK0InMeetingManualCaptioning.
type OptUserSettingsOK0InMeetingManualCaptioning struct {
	Value UserSettingsOK0InMeetingManualCaptioning
	Set   bool
}

// IsSet returns true if OptUserSettingsOK0InMeetingManualCaptioning was set.
func (o OptUserSettingsOK0InMeetingManualCaptioning) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsOK0InMeetingManualCaptioning) Reset() {
	var v UserSettingsOK0InMeetingManualCaptioning
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsOK0InMeetingManualCaptioning) SetTo(v UserSettingsOK0InMeetingManualCaptioning) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsOK0InMeetingManualCaptioning) Get() (v UserSettingsOK0InMeetingManualCaptioning, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsOK0InMeetingManualCaptioning) Or(d UserSettingsOK0InMeetingManualCaptioning) UserSettingsOK0InMeetingManualCaptioning {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsOK0InMeetingMeetingPolling returns new OptUserSettingsOK0InMeetingMeetingPolling with value set to v.
func NewOptUserSettingsOK0InMeetingMeetingPolling(v UserSettingsOK0InMeetingMeetingPolling) OptUserSettingsOK0InMeetingMeetingPolling {
	return OptUserSettingsOK0InMeetingMeetingPolling{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsOK0InMeetingMeetingPolling is optional UserSettingsOK0InMeetingMeetingPolling.
type OptUserSettingsOK0InMeetingMeetingPolling struct {
	Value UserSettingsOK0InMeetingMeetingPolling
	Set   bool
}

// IsSet returns true if OptUserSettingsOK0InMeetingMeetingPolling was set.
func (o OptUserSettingsOK0InMeetingMeetingPolling) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsOK0InMeetingMeetingPolling) Reset() {
	var v UserSettingsOK0InMeetingMeetingPolling
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsOK0InMeetingMeetingPolling) SetTo(v UserSettingsOK0InMeetingMeetingPolling) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsOK0InMeetingMeetingPolling) Get() (v UserSettingsOK0InMeetingMeetingPolling, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsOK0InMeetingMeetingPolling) Or(d UserSettingsOK0InMeetingMeetingPolling) UserSettingsOK0InMeetingMeetingPolling {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsOK0InMeetingSignLanguageInterpretation returns new OptUserSettingsOK0InMeetingSignLanguageInterpretation with value set to v.
func NewOptUserSettingsOK0InMeetingSignLanguageInterpretation(v UserSettingsOK0InMeetingSignLanguageInterpretation) OptUserSettingsOK0InMeetingSignLanguageInterpretation {
	return OptUserSettingsOK0InMeetingSignLanguageInterpretation{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsOK0InMeetingSignLanguageInterpretation is optional UserSettingsOK0InMeetingSignLanguageInterpretation.
type OptUserSettingsOK0InMeetingSignLanguageInterpretation struct {
	Value UserSettingsOK0InMeetingSignLanguageInterpretation
	Set   bool
}

// IsSet returns true if OptUserSettingsOK0InMeetingSignLanguageInterpretation was set.
func (o OptUserSettingsOK0InMeetingSignLanguageInterpretation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsOK0InMeetingSignLanguageInterpretation) Reset() {
	var v UserSettingsOK0InMeetingSignLanguageInterpretation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsOK0InMeetingSignLanguageInterpretation) SetTo(v UserSettingsOK0InMeetingSignLanguageInterpretation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsOK0InMeetingSignLanguageInterpretation) Get() (v UserSettingsOK0InMeetingSignLanguageInterpretation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsOK0InMeetingSignLanguageInterpretation) Or(d UserSettingsOK0InMeetingSignLanguageInterpretation) UserSettingsOK0InMeetingSignLanguageInterpretation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsOK0InMeetingVirtualBackgroundSettings returns new OptUserSettingsOK0InMeetingVirtualBackgroundSettings with value set to v.
func NewOptUserSettingsOK0InMeetingVirtualBackgroundSettings(v UserSettingsOK0InMeetingVirtualBackgroundSettings) OptUserSettingsOK0InMeetingVirtualBackgroundSettings {
	return OptUserSettingsOK0InMeetingVirtualBackgroundSettings{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsOK0InMeetingVirtualBackgroundSettings is optional UserSettingsOK0InMeetingVirtualBackgroundSettings.
type OptUserSettingsOK0InMeetingVirtualBackgroundSettings struct {
	Value UserSettingsOK0InMeetingVirtualBackgroundSettings
	Set   bool
}

// IsSet returns true if OptUserSettingsOK0InMeetingVirtualBackgroundSettings was set.
func (o OptUserSettingsOK0InMeetingVirtualBackgroundSettings) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsOK0InMeetingVirtualBackgroundSettings) Reset() {
	var v UserSettingsOK0InMeetingVirtualBackgroundSettings
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsOK0InMeetingVirtualBackgroundSettings) SetTo(v UserSettingsOK0InMeetingVirtualBackgroundSettings) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsOK0InMeetingVirtualBackgroundSettings) Get() (v UserSettingsOK0InMeetingVirtualBackgroundSettings, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsOK0InMeetingVirtualBackgroundSettings) Or(d UserSettingsOK0InMeetingVirtualBackgroundSettings) UserSettingsOK0InMeetingVirtualBackgroundSettings {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsOK0InMeetingWebinarChat returns new OptUserSettingsOK0InMeetingWebinarChat with value set to v.
func NewOptUserSettingsOK0InMeetingWebinarChat(v UserSettingsOK0InMeetingWebinarChat) OptUserSettingsOK0InMeetingWebinarChat {
	return OptUserSettingsOK0InMeetingWebinarChat{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsOK0InMeetingWebinarChat is optional UserSettingsOK0InMeetingWebinarChat.
type OptUserSettingsOK0InMeetingWebinarChat struct {
	Value UserSettingsOK0InMeetingWebinarChat
	Set   bool
}

// IsSet returns true if OptUserSettingsOK0InMeetingWebinarChat was set.
func (o OptUserSettingsOK0InMeetingWebinarChat) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsOK0InMeetingWebinarChat) Reset() {
	var v UserSettingsOK0InMeetingWebinarChat
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsOK0InMeetingWebinarChat) SetTo(v UserSettingsOK0InMeetingWebinarChat) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsOK0InMeetingWebinarChat) Get() (v UserSettingsOK0InMeetingWebinarChat, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsOK0InMeetingWebinarChat) Or(d UserSettingsOK0InMeetingWebinarChat) UserSettingsOK0InMeetingWebinarChat {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsOK0InMeetingWebinarLiveStreaming returns new OptUserSettingsOK0InMeetingWebinarLiveStreaming with value set to v.
func NewOptUserSettingsOK0InMeetingWebinarLiveStreaming(v UserSettingsOK0InMeetingWebinarLiveStreaming) OptUserSettingsOK0InMeetingWebinarLiveStreaming {
	return OptUserSettingsOK0InMeetingWebinarLiveStreaming{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsOK0InMeetingWebinarLiveStreaming is optional UserSettingsOK0InMeetingWebinarLiveStreaming.
type OptUserSettingsOK0InMeetingWebinarLiveStreaming struct {
	Value UserSettingsOK0InMeetingWebinarLiveStreaming
	Set   bool
}

// IsSet returns true if OptUserSettingsOK0InMeetingWebinarLiveStreaming was set.
func (o OptUserSettingsOK0InMeetingWebinarLiveStreaming) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsOK0InMeetingWebinarLiveStreaming) Reset() {
	var v UserSettingsOK0InMeetingWebinarLiveStreaming
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsOK0InMeetingWebinarLiveStreaming) SetTo(v UserSettingsOK0InMeetingWebinarLiveStreaming) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsOK0InMeetingWebinarLiveStreaming) Get() (v UserSettingsOK0InMeetingWebinarLiveStreaming, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsOK0InMeetingWebinarLiveStreaming) Or(d UserSettingsOK0InMeetingWebinarLiveStreaming) UserSettingsOK0InMeetingWebinarLiveStreaming {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsOK0InMeetingWebinarPolling returns new OptUserSettingsOK0InMeetingWebinarPolling with value set to v.
func NewOptUserSettingsOK0InMeetingWebinarPolling(v UserSettingsOK0InMeetingWebinarPolling) OptUserSettingsOK0InMeetingWebinarPolling {
	return OptUserSettingsOK0InMeetingWebinarPolling{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsOK0InMeetingWebinarPolling is optional UserSettingsOK0InMeetingWebinarPolling.
type OptUserSettingsOK0InMeetingWebinarPolling struct {
	Value UserSettingsOK0InMeetingWebinarPolling
	Set   bool
}

// IsSet returns true if OptUserSettingsOK0InMeetingWebinarPolling was set.
func (o OptUserSettingsOK0InMeetingWebinarPolling) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsOK0InMeetingWebinarPolling) Reset() {
	var v UserSettingsOK0InMeetingWebinarPolling
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsOK0InMeetingWebinarPolling) SetTo(v UserSettingsOK0InMeetingWebinarPolling) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsOK0InMeetingWebinarPolling) Get() (v UserSettingsOK0InMeetingWebinarPolling, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsOK0InMeetingWebinarPolling) Or(d UserSettingsOK0InMeetingWebinarPolling) UserSettingsOK0InMeetingWebinarPolling {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsOK0Profile returns new OptUserSettingsOK0Profile with value set to v.
func NewOptUserSettingsOK0Profile(v UserSettingsOK0Profile) OptUserSettingsOK0Profile {
	return OptUserSettingsOK0Profile{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsOK0Profile is optional UserSettingsOK0Profile.
type OptUserSettingsOK0Profile struct {
	Value UserSettingsOK0Profile
	Set   bool
}

// IsSet returns true if OptUserSettingsOK0Profile was set.
func (o OptUserSettingsOK0Profile) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsOK0Profile) Reset() {
	var v UserSettingsOK0Profile
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsOK0Profile) SetTo(v UserSettingsOK0Profile) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsOK0Profile) Get() (v UserSettingsOK0Profile, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsOK0Profile) Or(d UserSettingsOK0Profile) UserSettingsOK0Profile {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsOK0ProfileRecordingStorageLocation returns new OptUserSettingsOK0ProfileRecordingStorageLocation with value set to v.
func NewOptUserSettingsOK0ProfileRecordingStorageLocation(v UserSettingsOK0ProfileRecordingStorageLocation) OptUserSettingsOK0ProfileRecordingStorageLocation {
	return OptUserSettingsOK0ProfileRecordingStorageLocation{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsOK0ProfileRecordingStorageLocation is optional UserSettingsOK0ProfileRecordingStorageLocation.
type OptUserSettingsOK0ProfileRecordingStorageLocation struct {
	Value UserSettingsOK0ProfileRecordingStorageLocation
	Set   bool
}

// IsSet returns true if OptUserSettingsOK0ProfileRecordingStorageLocation was set.
func (o OptUserSettingsOK0ProfileRecordingStorageLocation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsOK0ProfileRecordingStorageLocation) Reset() {
	var v UserSettingsOK0ProfileRecordingStorageLocation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsOK0ProfileRecordingStorageLocation) SetTo(v UserSettingsOK0ProfileRecordingStorageLocation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsOK0ProfileRecordingStorageLocation) Get() (v UserSettingsOK0ProfileRecordingStorageLocation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsOK0ProfileRecordingStorageLocation) Or(d UserSettingsOK0ProfileRecordingStorageLocation) UserSettingsOK0ProfileRecordingStorageLocation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsOK0Recording returns new OptUserSettingsOK0Recording with value set to v.
func NewOptUserSettingsOK0Recording(v UserSettingsOK0Recording) OptUserSettingsOK0Recording {
	return OptUserSettingsOK0Recording{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsOK0Recording is optional UserSettingsOK0Recording.
type OptUserSettingsOK0Recording struct {
	Value UserSettingsOK0Recording
	Set   bool
}

// IsSet returns true if OptUserSettingsOK0Recording was set.
func (o OptUserSettingsOK0Recording) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsOK0Recording) Reset() {
	var v UserSettingsOK0Recording
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsOK0Recording) SetTo(v UserSettingsOK0Recording) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsOK0Recording) Get() (v UserSettingsOK0Recording, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsOK0Recording) Or(d UserSettingsOK0Recording) UserSettingsOK0Recording {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsOK0RecordingIPAddressAccessControl returns new OptUserSettingsOK0RecordingIPAddressAccessControl with value set to v.
func NewOptUserSettingsOK0RecordingIPAddressAccessControl(v UserSettingsOK0RecordingIPAddressAccessControl) OptUserSettingsOK0RecordingIPAddressAccessControl {
	return OptUserSettingsOK0RecordingIPAddressAccessControl{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsOK0RecordingIPAddressAccessControl is optional UserSettingsOK0RecordingIPAddressAccessControl.
type OptUserSettingsOK0RecordingIPAddressAccessControl struct {
	Value UserSettingsOK0RecordingIPAddressAccessControl
	Set   bool
}

// IsSet returns true if OptUserSettingsOK0RecordingIPAddressAccessControl was set.
func (o OptUserSettingsOK0RecordingIPAddressAccessControl) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsOK0RecordingIPAddressAccessControl) Reset() {
	var v UserSettingsOK0RecordingIPAddressAccessControl
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsOK0RecordingIPAddressAccessControl) SetTo(v UserSettingsOK0RecordingIPAddressAccessControl) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsOK0RecordingIPAddressAccessControl) Get() (v UserSettingsOK0RecordingIPAddressAccessControl, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsOK0RecordingIPAddressAccessControl) Or(d UserSettingsOK0RecordingIPAddressAccessControl) UserSettingsOK0RecordingIPAddressAccessControl {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsOK0RecordingRecordFilesSeparately returns new OptUserSettingsOK0RecordingRecordFilesSeparately with value set to v.
func NewOptUserSettingsOK0RecordingRecordFilesSeparately(v UserSettingsOK0RecordingRecordFilesSeparately) OptUserSettingsOK0RecordingRecordFilesSeparately {
	return OptUserSettingsOK0RecordingRecordFilesSeparately{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsOK0RecordingRecordFilesSeparately is optional UserSettingsOK0RecordingRecordFilesSeparately.
type OptUserSettingsOK0RecordingRecordFilesSeparately struct {
	Value UserSettingsOK0RecordingRecordFilesSeparately
	Set   bool
}

// IsSet returns true if OptUserSettingsOK0RecordingRecordFilesSeparately was set.
func (o OptUserSettingsOK0RecordingRecordFilesSeparately) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsOK0RecordingRecordFilesSeparately) Reset() {
	var v UserSettingsOK0RecordingRecordFilesSeparately
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsOK0RecordingRecordFilesSeparately) SetTo(v UserSettingsOK0RecordingRecordFilesSeparately) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsOK0RecordingRecordFilesSeparately) Get() (v UserSettingsOK0RecordingRecordFilesSeparately, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsOK0RecordingRecordFilesSeparately) Or(d UserSettingsOK0RecordingRecordFilesSeparately) UserSettingsOK0RecordingRecordFilesSeparately {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsOK0RecordingRecordingPasswordRequirement returns new OptUserSettingsOK0RecordingRecordingPasswordRequirement with value set to v.
func NewOptUserSettingsOK0RecordingRecordingPasswordRequirement(v UserSettingsOK0RecordingRecordingPasswordRequirement) OptUserSettingsOK0RecordingRecordingPasswordRequirement {
	return OptUserSettingsOK0RecordingRecordingPasswordRequirement{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsOK0RecordingRecordingPasswordRequirement is optional UserSettingsOK0RecordingRecordingPasswordRequirement.
type OptUserSettingsOK0RecordingRecordingPasswordRequirement struct {
	Value UserSettingsOK0RecordingRecordingPasswordRequirement
	Set   bool
}

// IsSet returns true if OptUserSettingsOK0RecordingRecordingPasswordRequirement was set.
func (o OptUserSettingsOK0RecordingRecordingPasswordRequirement) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsOK0RecordingRecordingPasswordRequirement) Reset() {
	var v UserSettingsOK0RecordingRecordingPasswordRequirement
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsOK0RecordingRecordingPasswordRequirement) SetTo(v UserSettingsOK0RecordingRecordingPasswordRequirement) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsOK0RecordingRecordingPasswordRequirement) Get() (v UserSettingsOK0RecordingRecordingPasswordRequirement, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsOK0RecordingRecordingPasswordRequirement) Or(d UserSettingsOK0RecordingRecordingPasswordRequirement) UserSettingsOK0RecordingRecordingPasswordRequirement {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsOK0RecordingSmartRecording returns new OptUserSettingsOK0RecordingSmartRecording with value set to v.
func NewOptUserSettingsOK0RecordingSmartRecording(v UserSettingsOK0RecordingSmartRecording) OptUserSettingsOK0RecordingSmartRecording {
	return OptUserSettingsOK0RecordingSmartRecording{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsOK0RecordingSmartRecording is optional UserSettingsOK0RecordingSmartRecording.
type OptUserSettingsOK0RecordingSmartRecording struct {
	Value UserSettingsOK0RecordingSmartRecording
	Set   bool
}

// IsSet returns true if OptUserSettingsOK0RecordingSmartRecording was set.
func (o OptUserSettingsOK0RecordingSmartRecording) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsOK0RecordingSmartRecording) Reset() {
	var v UserSettingsOK0RecordingSmartRecording
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsOK0RecordingSmartRecording) SetTo(v UserSettingsOK0RecordingSmartRecording) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsOK0RecordingSmartRecording) Get() (v UserSettingsOK0RecordingSmartRecording, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsOK0RecordingSmartRecording) Or(d UserSettingsOK0RecordingSmartRecording) UserSettingsOK0RecordingSmartRecording {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsOK0ScheduleMeeting returns new OptUserSettingsOK0ScheduleMeeting with value set to v.
func NewOptUserSettingsOK0ScheduleMeeting(v UserSettingsOK0ScheduleMeeting) OptUserSettingsOK0ScheduleMeeting {
	return OptUserSettingsOK0ScheduleMeeting{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsOK0ScheduleMeeting is optional UserSettingsOK0ScheduleMeeting.
type OptUserSettingsOK0ScheduleMeeting struct {
	Value UserSettingsOK0ScheduleMeeting
	Set   bool
}

// IsSet returns true if OptUserSettingsOK0ScheduleMeeting was set.
func (o OptUserSettingsOK0ScheduleMeeting) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsOK0ScheduleMeeting) Reset() {
	var v UserSettingsOK0ScheduleMeeting
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsOK0ScheduleMeeting) SetTo(v UserSettingsOK0ScheduleMeeting) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsOK0ScheduleMeeting) Get() (v UserSettingsOK0ScheduleMeeting, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsOK0ScheduleMeeting) Or(d UserSettingsOK0ScheduleMeeting) UserSettingsOK0ScheduleMeeting {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsOK0ScheduleMeetingContinuousMeetingChat returns new OptUserSettingsOK0ScheduleMeetingContinuousMeetingChat with value set to v.
func NewOptUserSettingsOK0ScheduleMeetingContinuousMeetingChat(v UserSettingsOK0ScheduleMeetingContinuousMeetingChat) OptUserSettingsOK0ScheduleMeetingContinuousMeetingChat {
	return OptUserSettingsOK0ScheduleMeetingContinuousMeetingChat{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsOK0ScheduleMeetingContinuousMeetingChat is optional UserSettingsOK0ScheduleMeetingContinuousMeetingChat.
type OptUserSettingsOK0ScheduleMeetingContinuousMeetingChat struct {
	Value UserSettingsOK0ScheduleMeetingContinuousMeetingChat
	Set   bool
}

// IsSet returns true if OptUserSettingsOK0ScheduleMeetingContinuousMeetingChat was set.
func (o OptUserSettingsOK0ScheduleMeetingContinuousMeetingChat) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsOK0ScheduleMeetingContinuousMeetingChat) Reset() {
	var v UserSettingsOK0ScheduleMeetingContinuousMeetingChat
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsOK0ScheduleMeetingContinuousMeetingChat) SetTo(v UserSettingsOK0ScheduleMeetingContinuousMeetingChat) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsOK0ScheduleMeetingContinuousMeetingChat) Get() (v UserSettingsOK0ScheduleMeetingContinuousMeetingChat, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsOK0ScheduleMeetingContinuousMeetingChat) Or(d UserSettingsOK0ScheduleMeetingContinuousMeetingChat) UserSettingsOK0ScheduleMeetingContinuousMeetingChat {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsOK0ScheduleMeetingMeetingPasswordRequirement returns new OptUserSettingsOK0ScheduleMeetingMeetingPasswordRequirement with value set to v.
func NewOptUserSettingsOK0ScheduleMeetingMeetingPasswordRequirement(v UserSettingsOK0ScheduleMeetingMeetingPasswordRequirement) OptUserSettingsOK0ScheduleMeetingMeetingPasswordRequirement {
	return OptUserSettingsOK0ScheduleMeetingMeetingPasswordRequirement{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsOK0ScheduleMeetingMeetingPasswordRequirement is optional UserSettingsOK0ScheduleMeetingMeetingPasswordRequirement.
type OptUserSettingsOK0ScheduleMeetingMeetingPasswordRequirement struct {
	Value UserSettingsOK0ScheduleMeetingMeetingPasswordRequirement
	Set   bool
}

// IsSet returns true if OptUserSettingsOK0ScheduleMeetingMeetingPasswordRequirement was set.
func (o OptUserSettingsOK0ScheduleMeetingMeetingPasswordRequirement) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsOK0ScheduleMeetingMeetingPasswordRequirement) Reset() {
	var v UserSettingsOK0ScheduleMeetingMeetingPasswordRequirement
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsOK0ScheduleMeetingMeetingPasswordRequirement) SetTo(v UserSettingsOK0ScheduleMeetingMeetingPasswordRequirement) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsOK0ScheduleMeetingMeetingPasswordRequirement) Get() (v UserSettingsOK0ScheduleMeetingMeetingPasswordRequirement, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsOK0ScheduleMeetingMeetingPasswordRequirement) Or(d UserSettingsOK0ScheduleMeetingMeetingPasswordRequirement) UserSettingsOK0ScheduleMeetingMeetingPasswordRequirement {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsOK0Telephony returns new OptUserSettingsOK0Telephony with value set to v.
func NewOptUserSettingsOK0Telephony(v UserSettingsOK0Telephony) OptUserSettingsOK0Telephony {
	return OptUserSettingsOK0Telephony{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsOK0Telephony is optional UserSettingsOK0Telephony.
type OptUserSettingsOK0Telephony struct {
	Value UserSettingsOK0Telephony
	Set   bool
}

// IsSet returns true if OptUserSettingsOK0Telephony was set.
func (o OptUserSettingsOK0Telephony) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsOK0Telephony) Reset() {
	var v UserSettingsOK0Telephony
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsOK0Telephony) SetTo(v UserSettingsOK0Telephony) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsOK0Telephony) Get() (v UserSettingsOK0Telephony, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsOK0Telephony) Or(d UserSettingsOK0Telephony) UserSettingsOK0Telephony {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsOK0TelephonyTelephonyRegions returns new OptUserSettingsOK0TelephonyTelephonyRegions with value set to v.
func NewOptUserSettingsOK0TelephonyTelephonyRegions(v UserSettingsOK0TelephonyTelephonyRegions) OptUserSettingsOK0TelephonyTelephonyRegions {
	return OptUserSettingsOK0TelephonyTelephonyRegions{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsOK0TelephonyTelephonyRegions is optional UserSettingsOK0TelephonyTelephonyRegions.
type OptUserSettingsOK0TelephonyTelephonyRegions struct {
	Value UserSettingsOK0TelephonyTelephonyRegions
	Set   bool
}

// IsSet returns true if OptUserSettingsOK0TelephonyTelephonyRegions was set.
func (o OptUserSettingsOK0TelephonyTelephonyRegions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsOK0TelephonyTelephonyRegions) Reset() {
	var v UserSettingsOK0TelephonyTelephonyRegions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsOK0TelephonyTelephonyRegions) SetTo(v UserSettingsOK0TelephonyTelephonyRegions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsOK0TelephonyTelephonyRegions) Get() (v UserSettingsOK0TelephonyTelephonyRegions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsOK0TelephonyTelephonyRegions) Or(d UserSettingsOK0TelephonyTelephonyRegions) UserSettingsOK0TelephonyTelephonyRegions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsOK0Tsp returns new OptUserSettingsOK0Tsp with value set to v.
func NewOptUserSettingsOK0Tsp(v UserSettingsOK0Tsp) OptUserSettingsOK0Tsp {
	return OptUserSettingsOK0Tsp{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsOK0Tsp is optional UserSettingsOK0Tsp.
type OptUserSettingsOK0Tsp struct {
	Value UserSettingsOK0Tsp
	Set   bool
}

// IsSet returns true if OptUserSettingsOK0Tsp was set.
func (o OptUserSettingsOK0Tsp) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsOK0Tsp) Reset() {
	var v UserSettingsOK0Tsp
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsOK0Tsp) SetTo(v UserSettingsOK0Tsp) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsOK0Tsp) Get() (v UserSettingsOK0Tsp, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsOK0Tsp) Or(d UserSettingsOK0Tsp) UserSettingsOK0Tsp {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsOK0Whiteboard returns new OptUserSettingsOK0Whiteboard with value set to v.
func NewOptUserSettingsOK0Whiteboard(v UserSettingsOK0Whiteboard) OptUserSettingsOK0Whiteboard {
	return OptUserSettingsOK0Whiteboard{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsOK0Whiteboard is optional UserSettingsOK0Whiteboard.
type OptUserSettingsOK0Whiteboard struct {
	Value UserSettingsOK0Whiteboard
	Set   bool
}

// IsSet returns true if OptUserSettingsOK0Whiteboard was set.
func (o OptUserSettingsOK0Whiteboard) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsOK0Whiteboard) Reset() {
	var v UserSettingsOK0Whiteboard
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsOK0Whiteboard) SetTo(v UserSettingsOK0Whiteboard) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsOK0Whiteboard) Get() (v UserSettingsOK0Whiteboard, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsOK0Whiteboard) Or(d UserSettingsOK0Whiteboard) UserSettingsOK0Whiteboard {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsOK1AuthenticationOptions returns new OptUserSettingsOK1AuthenticationOptions with value set to v.
func NewOptUserSettingsOK1AuthenticationOptions(v UserSettingsOK1AuthenticationOptions) OptUserSettingsOK1AuthenticationOptions {
	return OptUserSettingsOK1AuthenticationOptions{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsOK1AuthenticationOptions is optional UserSettingsOK1AuthenticationOptions.
type OptUserSettingsOK1AuthenticationOptions struct {
	Value UserSettingsOK1AuthenticationOptions
	Set   bool
}

// IsSet returns true if OptUserSettingsOK1AuthenticationOptions was set.
func (o OptUserSettingsOK1AuthenticationOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsOK1AuthenticationOptions) Reset() {
	var v UserSettingsOK1AuthenticationOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsOK1AuthenticationOptions) SetTo(v UserSettingsOK1AuthenticationOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsOK1AuthenticationOptions) Get() (v UserSettingsOK1AuthenticationOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsOK1AuthenticationOptions) Or(d UserSettingsOK1AuthenticationOptions) UserSettingsOK1AuthenticationOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsOK1AuthenticationOptionsMeetingAuthentication returns new OptUserSettingsOK1AuthenticationOptionsMeetingAuthentication with value set to v.
func NewOptUserSettingsOK1AuthenticationOptionsMeetingAuthentication(v UserSettingsOK1AuthenticationOptionsMeetingAuthentication) OptUserSettingsOK1AuthenticationOptionsMeetingAuthentication {
	return OptUserSettingsOK1AuthenticationOptionsMeetingAuthentication{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsOK1AuthenticationOptionsMeetingAuthentication is optional UserSettingsOK1AuthenticationOptionsMeetingAuthentication.
type OptUserSettingsOK1AuthenticationOptionsMeetingAuthentication struct {
	Value UserSettingsOK1AuthenticationOptionsMeetingAuthentication
	Set   bool
}

// IsSet returns true if OptUserSettingsOK1AuthenticationOptionsMeetingAuthentication was set.
func (o OptUserSettingsOK1AuthenticationOptionsMeetingAuthentication) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsOK1AuthenticationOptionsMeetingAuthentication) Reset() {
	var v UserSettingsOK1AuthenticationOptionsMeetingAuthentication
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsOK1AuthenticationOptionsMeetingAuthentication) SetTo(v UserSettingsOK1AuthenticationOptionsMeetingAuthentication) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsOK1AuthenticationOptionsMeetingAuthentication) Get() (v UserSettingsOK1AuthenticationOptionsMeetingAuthentication, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsOK1AuthenticationOptionsMeetingAuthentication) Or(d UserSettingsOK1AuthenticationOptionsMeetingAuthentication) UserSettingsOK1AuthenticationOptionsMeetingAuthentication {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsOK1AuthenticationOptionsRecordingAuthentication returns new OptUserSettingsOK1AuthenticationOptionsRecordingAuthentication with value set to v.
func NewOptUserSettingsOK1AuthenticationOptionsRecordingAuthentication(v UserSettingsOK1AuthenticationOptionsRecordingAuthentication) OptUserSettingsOK1AuthenticationOptionsRecordingAuthentication {
	return OptUserSettingsOK1AuthenticationOptionsRecordingAuthentication{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsOK1AuthenticationOptionsRecordingAuthentication is optional UserSettingsOK1AuthenticationOptionsRecordingAuthentication.
type OptUserSettingsOK1AuthenticationOptionsRecordingAuthentication struct {
	Value UserSettingsOK1AuthenticationOptionsRecordingAuthentication
	Set   bool
}

// IsSet returns true if OptUserSettingsOK1AuthenticationOptionsRecordingAuthentication was set.
func (o OptUserSettingsOK1AuthenticationOptionsRecordingAuthentication) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsOK1AuthenticationOptionsRecordingAuthentication) Reset() {
	var v UserSettingsOK1AuthenticationOptionsRecordingAuthentication
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsOK1AuthenticationOptionsRecordingAuthentication) SetTo(v UserSettingsOK1AuthenticationOptionsRecordingAuthentication) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsOK1AuthenticationOptionsRecordingAuthentication) Get() (v UserSettingsOK1AuthenticationOptionsRecordingAuthentication, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsOK1AuthenticationOptionsRecordingAuthentication) Or(d UserSettingsOK1AuthenticationOptionsRecordingAuthentication) UserSettingsOK1AuthenticationOptionsRecordingAuthentication {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsOK4MeetingSecurity returns new OptUserSettingsOK4MeetingSecurity with value set to v.
func NewOptUserSettingsOK4MeetingSecurity(v UserSettingsOK4MeetingSecurity) OptUserSettingsOK4MeetingSecurity {
	return OptUserSettingsOK4MeetingSecurity{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsOK4MeetingSecurity is optional UserSettingsOK4MeetingSecurity.
type OptUserSettingsOK4MeetingSecurity struct {
	Value UserSettingsOK4MeetingSecurity
	Set   bool
}

// IsSet returns true if OptUserSettingsOK4MeetingSecurity was set.
func (o OptUserSettingsOK4MeetingSecurity) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsOK4MeetingSecurity) Reset() {
	var v UserSettingsOK4MeetingSecurity
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsOK4MeetingSecurity) SetTo(v UserSettingsOK4MeetingSecurity) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsOK4MeetingSecurity) Get() (v UserSettingsOK4MeetingSecurity, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsOK4MeetingSecurity) Or(d UserSettingsOK4MeetingSecurity) UserSettingsOK4MeetingSecurity {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsOK4MeetingSecurityMeetingPasswordRequirement returns new OptUserSettingsOK4MeetingSecurityMeetingPasswordRequirement with value set to v.
func NewOptUserSettingsOK4MeetingSecurityMeetingPasswordRequirement(v UserSettingsOK4MeetingSecurityMeetingPasswordRequirement) OptUserSettingsOK4MeetingSecurityMeetingPasswordRequirement {
	return OptUserSettingsOK4MeetingSecurityMeetingPasswordRequirement{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsOK4MeetingSecurityMeetingPasswordRequirement is optional UserSettingsOK4MeetingSecurityMeetingPasswordRequirement.
type OptUserSettingsOK4MeetingSecurityMeetingPasswordRequirement struct {
	Value UserSettingsOK4MeetingSecurityMeetingPasswordRequirement
	Set   bool
}

// IsSet returns true if OptUserSettingsOK4MeetingSecurityMeetingPasswordRequirement was set.
func (o OptUserSettingsOK4MeetingSecurityMeetingPasswordRequirement) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsOK4MeetingSecurityMeetingPasswordRequirement) Reset() {
	var v UserSettingsOK4MeetingSecurityMeetingPasswordRequirement
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsOK4MeetingSecurityMeetingPasswordRequirement) SetTo(v UserSettingsOK4MeetingSecurityMeetingPasswordRequirement) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsOK4MeetingSecurityMeetingPasswordRequirement) Get() (v UserSettingsOK4MeetingSecurityMeetingPasswordRequirement, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsOK4MeetingSecurityMeetingPasswordRequirement) Or(d UserSettingsOK4MeetingSecurityMeetingPasswordRequirement) UserSettingsOK4MeetingSecurityMeetingPasswordRequirement {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsOK4MeetingSecurityWaitingRoomSettings returns new OptUserSettingsOK4MeetingSecurityWaitingRoomSettings with value set to v.
func NewOptUserSettingsOK4MeetingSecurityWaitingRoomSettings(v UserSettingsOK4MeetingSecurityWaitingRoomSettings) OptUserSettingsOK4MeetingSecurityWaitingRoomSettings {
	return OptUserSettingsOK4MeetingSecurityWaitingRoomSettings{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsOK4MeetingSecurityWaitingRoomSettings is optional UserSettingsOK4MeetingSecurityWaitingRoomSettings.
type OptUserSettingsOK4MeetingSecurityWaitingRoomSettings struct {
	Value UserSettingsOK4MeetingSecurityWaitingRoomSettings
	Set   bool
}

// IsSet returns true if OptUserSettingsOK4MeetingSecurityWaitingRoomSettings was set.
func (o OptUserSettingsOK4MeetingSecurityWaitingRoomSettings) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsOK4MeetingSecurityWaitingRoomSettings) Reset() {
	var v UserSettingsOK4MeetingSecurityWaitingRoomSettings
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsOK4MeetingSecurityWaitingRoomSettings) SetTo(v UserSettingsOK4MeetingSecurityWaitingRoomSettings) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsOK4MeetingSecurityWaitingRoomSettings) Get() (v UserSettingsOK4MeetingSecurityWaitingRoomSettings, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsOK4MeetingSecurityWaitingRoomSettings) Or(d UserSettingsOK4MeetingSecurityWaitingRoomSettings) UserSettingsOK4MeetingSecurityWaitingRoomSettings {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsUpdateReq returns new OptUserSettingsUpdateReq with value set to v.
func NewOptUserSettingsUpdateReq(v UserSettingsUpdateReq) OptUserSettingsUpdateReq {
	return OptUserSettingsUpdateReq{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsUpdateReq is optional UserSettingsUpdateReq.
type OptUserSettingsUpdateReq struct {
	Value UserSettingsUpdateReq
	Set   bool
}

// IsSet returns true if OptUserSettingsUpdateReq was set.
func (o OptUserSettingsUpdateReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsUpdateReq) Reset() {
	var v UserSettingsUpdateReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsUpdateReq) SetTo(v UserSettingsUpdateReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsUpdateReq) Get() (v UserSettingsUpdateReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsUpdateReq) Or(d UserSettingsUpdateReq) UserSettingsUpdateReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsUpdateReq0EmailNotification returns new OptUserSettingsUpdateReq0EmailNotification with value set to v.
func NewOptUserSettingsUpdateReq0EmailNotification(v UserSettingsUpdateReq0EmailNotification) OptUserSettingsUpdateReq0EmailNotification {
	return OptUserSettingsUpdateReq0EmailNotification{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsUpdateReq0EmailNotification is optional UserSettingsUpdateReq0EmailNotification.
type OptUserSettingsUpdateReq0EmailNotification struct {
	Value UserSettingsUpdateReq0EmailNotification
	Set   bool
}

// IsSet returns true if OptUserSettingsUpdateReq0EmailNotification was set.
func (o OptUserSettingsUpdateReq0EmailNotification) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsUpdateReq0EmailNotification) Reset() {
	var v UserSettingsUpdateReq0EmailNotification
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsUpdateReq0EmailNotification) SetTo(v UserSettingsUpdateReq0EmailNotification) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsUpdateReq0EmailNotification) Get() (v UserSettingsUpdateReq0EmailNotification, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsUpdateReq0EmailNotification) Or(d UserSettingsUpdateReq0EmailNotification) UserSettingsUpdateReq0EmailNotification {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsUpdateReq0Feature returns new OptUserSettingsUpdateReq0Feature with value set to v.
func NewOptUserSettingsUpdateReq0Feature(v UserSettingsUpdateReq0Feature) OptUserSettingsUpdateReq0Feature {
	return OptUserSettingsUpdateReq0Feature{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsUpdateReq0Feature is optional UserSettingsUpdateReq0Feature.
type OptUserSettingsUpdateReq0Feature struct {
	Value UserSettingsUpdateReq0Feature
	Set   bool
}

// IsSet returns true if OptUserSettingsUpdateReq0Feature was set.
func (o OptUserSettingsUpdateReq0Feature) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsUpdateReq0Feature) Reset() {
	var v UserSettingsUpdateReq0Feature
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsUpdateReq0Feature) SetTo(v UserSettingsUpdateReq0Feature) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsUpdateReq0Feature) Get() (v UserSettingsUpdateReq0Feature, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsUpdateReq0Feature) Or(d UserSettingsUpdateReq0Feature) UserSettingsUpdateReq0Feature {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsUpdateReq0InMeeting returns new OptUserSettingsUpdateReq0InMeeting with value set to v.
func NewOptUserSettingsUpdateReq0InMeeting(v UserSettingsUpdateReq0InMeeting) OptUserSettingsUpdateReq0InMeeting {
	return OptUserSettingsUpdateReq0InMeeting{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsUpdateReq0InMeeting is optional UserSettingsUpdateReq0InMeeting.
type OptUserSettingsUpdateReq0InMeeting struct {
	Value UserSettingsUpdateReq0InMeeting
	Set   bool
}

// IsSet returns true if OptUserSettingsUpdateReq0InMeeting was set.
func (o OptUserSettingsUpdateReq0InMeeting) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsUpdateReq0InMeeting) Reset() {
	var v UserSettingsUpdateReq0InMeeting
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsUpdateReq0InMeeting) SetTo(v UserSettingsUpdateReq0InMeeting) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsUpdateReq0InMeeting) Get() (v UserSettingsUpdateReq0InMeeting, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsUpdateReq0InMeeting) Or(d UserSettingsUpdateReq0InMeeting) UserSettingsUpdateReq0InMeeting {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsUpdateReq0InMeetingClosedCaptioning returns new OptUserSettingsUpdateReq0InMeetingClosedCaptioning with value set to v.
func NewOptUserSettingsUpdateReq0InMeetingClosedCaptioning(v UserSettingsUpdateReq0InMeetingClosedCaptioning) OptUserSettingsUpdateReq0InMeetingClosedCaptioning {
	return OptUserSettingsUpdateReq0InMeetingClosedCaptioning{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsUpdateReq0InMeetingClosedCaptioning is optional UserSettingsUpdateReq0InMeetingClosedCaptioning.
type OptUserSettingsUpdateReq0InMeetingClosedCaptioning struct {
	Value UserSettingsUpdateReq0InMeetingClosedCaptioning
	Set   bool
}

// IsSet returns true if OptUserSettingsUpdateReq0InMeetingClosedCaptioning was set.
func (o OptUserSettingsUpdateReq0InMeetingClosedCaptioning) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsUpdateReq0InMeetingClosedCaptioning) Reset() {
	var v UserSettingsUpdateReq0InMeetingClosedCaptioning
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsUpdateReq0InMeetingClosedCaptioning) SetTo(v UserSettingsUpdateReq0InMeetingClosedCaptioning) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsUpdateReq0InMeetingClosedCaptioning) Get() (v UserSettingsUpdateReq0InMeetingClosedCaptioning, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsUpdateReq0InMeetingClosedCaptioning) Or(d UserSettingsUpdateReq0InMeetingClosedCaptioning) UserSettingsUpdateReq0InMeetingClosedCaptioning {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsUpdateReq0InMeetingLanguageInterpretation returns new OptUserSettingsUpdateReq0InMeetingLanguageInterpretation with value set to v.
func NewOptUserSettingsUpdateReq0InMeetingLanguageInterpretation(v UserSettingsUpdateReq0InMeetingLanguageInterpretation) OptUserSettingsUpdateReq0InMeetingLanguageInterpretation {
	return OptUserSettingsUpdateReq0InMeetingLanguageInterpretation{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsUpdateReq0InMeetingLanguageInterpretation is optional UserSettingsUpdateReq0InMeetingLanguageInterpretation.
type OptUserSettingsUpdateReq0InMeetingLanguageInterpretation struct {
	Value UserSettingsUpdateReq0InMeetingLanguageInterpretation
	Set   bool
}

// IsSet returns true if OptUserSettingsUpdateReq0InMeetingLanguageInterpretation was set.
func (o OptUserSettingsUpdateReq0InMeetingLanguageInterpretation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsUpdateReq0InMeetingLanguageInterpretation) Reset() {
	var v UserSettingsUpdateReq0InMeetingLanguageInterpretation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsUpdateReq0InMeetingLanguageInterpretation) SetTo(v UserSettingsUpdateReq0InMeetingLanguageInterpretation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsUpdateReq0InMeetingLanguageInterpretation) Get() (v UserSettingsUpdateReq0InMeetingLanguageInterpretation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsUpdateReq0InMeetingLanguageInterpretation) Or(d UserSettingsUpdateReq0InMeetingLanguageInterpretation) UserSettingsUpdateReq0InMeetingLanguageInterpretation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsUpdateReq0InMeetingManualCaptioning returns new OptUserSettingsUpdateReq0InMeetingManualCaptioning with value set to v.
func NewOptUserSettingsUpdateReq0InMeetingManualCaptioning(v UserSettingsUpdateReq0InMeetingManualCaptioning) OptUserSettingsUpdateReq0InMeetingManualCaptioning {
	return OptUserSettingsUpdateReq0InMeetingManualCaptioning{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsUpdateReq0InMeetingManualCaptioning is optional UserSettingsUpdateReq0InMeetingManualCaptioning.
type OptUserSettingsUpdateReq0InMeetingManualCaptioning struct {
	Value UserSettingsUpdateReq0InMeetingManualCaptioning
	Set   bool
}

// IsSet returns true if OptUserSettingsUpdateReq0InMeetingManualCaptioning was set.
func (o OptUserSettingsUpdateReq0InMeetingManualCaptioning) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsUpdateReq0InMeetingManualCaptioning) Reset() {
	var v UserSettingsUpdateReq0InMeetingManualCaptioning
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsUpdateReq0InMeetingManualCaptioning) SetTo(v UserSettingsUpdateReq0InMeetingManualCaptioning) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsUpdateReq0InMeetingManualCaptioning) Get() (v UserSettingsUpdateReq0InMeetingManualCaptioning, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsUpdateReq0InMeetingManualCaptioning) Or(d UserSettingsUpdateReq0InMeetingManualCaptioning) UserSettingsUpdateReq0InMeetingManualCaptioning {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsUpdateReq0InMeetingMeetingPolling returns new OptUserSettingsUpdateReq0InMeetingMeetingPolling with value set to v.
func NewOptUserSettingsUpdateReq0InMeetingMeetingPolling(v UserSettingsUpdateReq0InMeetingMeetingPolling) OptUserSettingsUpdateReq0InMeetingMeetingPolling {
	return OptUserSettingsUpdateReq0InMeetingMeetingPolling{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsUpdateReq0InMeetingMeetingPolling is optional UserSettingsUpdateReq0InMeetingMeetingPolling.
type OptUserSettingsUpdateReq0InMeetingMeetingPolling struct {
	Value UserSettingsUpdateReq0InMeetingMeetingPolling
	Set   bool
}

// IsSet returns true if OptUserSettingsUpdateReq0InMeetingMeetingPolling was set.
func (o OptUserSettingsUpdateReq0InMeetingMeetingPolling) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsUpdateReq0InMeetingMeetingPolling) Reset() {
	var v UserSettingsUpdateReq0InMeetingMeetingPolling
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsUpdateReq0InMeetingMeetingPolling) SetTo(v UserSettingsUpdateReq0InMeetingMeetingPolling) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsUpdateReq0InMeetingMeetingPolling) Get() (v UserSettingsUpdateReq0InMeetingMeetingPolling, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsUpdateReq0InMeetingMeetingPolling) Or(d UserSettingsUpdateReq0InMeetingMeetingPolling) UserSettingsUpdateReq0InMeetingMeetingPolling {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsUpdateReq0InMeetingSignLanguageInterpretation returns new OptUserSettingsUpdateReq0InMeetingSignLanguageInterpretation with value set to v.
func NewOptUserSettingsUpdateReq0InMeetingSignLanguageInterpretation(v UserSettingsUpdateReq0InMeetingSignLanguageInterpretation) OptUserSettingsUpdateReq0InMeetingSignLanguageInterpretation {
	return OptUserSettingsUpdateReq0InMeetingSignLanguageInterpretation{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsUpdateReq0InMeetingSignLanguageInterpretation is optional UserSettingsUpdateReq0InMeetingSignLanguageInterpretation.
type OptUserSettingsUpdateReq0InMeetingSignLanguageInterpretation struct {
	Value UserSettingsUpdateReq0InMeetingSignLanguageInterpretation
	Set   bool
}

// IsSet returns true if OptUserSettingsUpdateReq0InMeetingSignLanguageInterpretation was set.
func (o OptUserSettingsUpdateReq0InMeetingSignLanguageInterpretation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsUpdateReq0InMeetingSignLanguageInterpretation) Reset() {
	var v UserSettingsUpdateReq0InMeetingSignLanguageInterpretation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsUpdateReq0InMeetingSignLanguageInterpretation) SetTo(v UserSettingsUpdateReq0InMeetingSignLanguageInterpretation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsUpdateReq0InMeetingSignLanguageInterpretation) Get() (v UserSettingsUpdateReq0InMeetingSignLanguageInterpretation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsUpdateReq0InMeetingSignLanguageInterpretation) Or(d UserSettingsUpdateReq0InMeetingSignLanguageInterpretation) UserSettingsUpdateReq0InMeetingSignLanguageInterpretation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsUpdateReq0InMeetingVirtualBackgroundSettings returns new OptUserSettingsUpdateReq0InMeetingVirtualBackgroundSettings with value set to v.
func NewOptUserSettingsUpdateReq0InMeetingVirtualBackgroundSettings(v UserSettingsUpdateReq0InMeetingVirtualBackgroundSettings) OptUserSettingsUpdateReq0InMeetingVirtualBackgroundSettings {
	return OptUserSettingsUpdateReq0InMeetingVirtualBackgroundSettings{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsUpdateReq0InMeetingVirtualBackgroundSettings is optional UserSettingsUpdateReq0InMeetingVirtualBackgroundSettings.
type OptUserSettingsUpdateReq0InMeetingVirtualBackgroundSettings struct {
	Value UserSettingsUpdateReq0InMeetingVirtualBackgroundSettings
	Set   bool
}

// IsSet returns true if OptUserSettingsUpdateReq0InMeetingVirtualBackgroundSettings was set.
func (o OptUserSettingsUpdateReq0InMeetingVirtualBackgroundSettings) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsUpdateReq0InMeetingVirtualBackgroundSettings) Reset() {
	var v UserSettingsUpdateReq0InMeetingVirtualBackgroundSettings
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsUpdateReq0InMeetingVirtualBackgroundSettings) SetTo(v UserSettingsUpdateReq0InMeetingVirtualBackgroundSettings) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsUpdateReq0InMeetingVirtualBackgroundSettings) Get() (v UserSettingsUpdateReq0InMeetingVirtualBackgroundSettings, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsUpdateReq0InMeetingVirtualBackgroundSettings) Or(d UserSettingsUpdateReq0InMeetingVirtualBackgroundSettings) UserSettingsUpdateReq0InMeetingVirtualBackgroundSettings {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsUpdateReq0InMeetingWebinarChat returns new OptUserSettingsUpdateReq0InMeetingWebinarChat with value set to v.
func NewOptUserSettingsUpdateReq0InMeetingWebinarChat(v UserSettingsUpdateReq0InMeetingWebinarChat) OptUserSettingsUpdateReq0InMeetingWebinarChat {
	return OptUserSettingsUpdateReq0InMeetingWebinarChat{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsUpdateReq0InMeetingWebinarChat is optional UserSettingsUpdateReq0InMeetingWebinarChat.
type OptUserSettingsUpdateReq0InMeetingWebinarChat struct {
	Value UserSettingsUpdateReq0InMeetingWebinarChat
	Set   bool
}

// IsSet returns true if OptUserSettingsUpdateReq0InMeetingWebinarChat was set.
func (o OptUserSettingsUpdateReq0InMeetingWebinarChat) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsUpdateReq0InMeetingWebinarChat) Reset() {
	var v UserSettingsUpdateReq0InMeetingWebinarChat
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsUpdateReq0InMeetingWebinarChat) SetTo(v UserSettingsUpdateReq0InMeetingWebinarChat) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsUpdateReq0InMeetingWebinarChat) Get() (v UserSettingsUpdateReq0InMeetingWebinarChat, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsUpdateReq0InMeetingWebinarChat) Or(d UserSettingsUpdateReq0InMeetingWebinarChat) UserSettingsUpdateReq0InMeetingWebinarChat {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsUpdateReq0InMeetingWebinarLiveStreaming returns new OptUserSettingsUpdateReq0InMeetingWebinarLiveStreaming with value set to v.
func NewOptUserSettingsUpdateReq0InMeetingWebinarLiveStreaming(v UserSettingsUpdateReq0InMeetingWebinarLiveStreaming) OptUserSettingsUpdateReq0InMeetingWebinarLiveStreaming {
	return OptUserSettingsUpdateReq0InMeetingWebinarLiveStreaming{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsUpdateReq0InMeetingWebinarLiveStreaming is optional UserSettingsUpdateReq0InMeetingWebinarLiveStreaming.
type OptUserSettingsUpdateReq0InMeetingWebinarLiveStreaming struct {
	Value UserSettingsUpdateReq0InMeetingWebinarLiveStreaming
	Set   bool
}

// IsSet returns true if OptUserSettingsUpdateReq0InMeetingWebinarLiveStreaming was set.
func (o OptUserSettingsUpdateReq0InMeetingWebinarLiveStreaming) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsUpdateReq0InMeetingWebinarLiveStreaming) Reset() {
	var v UserSettingsUpdateReq0InMeetingWebinarLiveStreaming
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsUpdateReq0InMeetingWebinarLiveStreaming) SetTo(v UserSettingsUpdateReq0InMeetingWebinarLiveStreaming) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsUpdateReq0InMeetingWebinarLiveStreaming) Get() (v UserSettingsUpdateReq0InMeetingWebinarLiveStreaming, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsUpdateReq0InMeetingWebinarLiveStreaming) Or(d UserSettingsUpdateReq0InMeetingWebinarLiveStreaming) UserSettingsUpdateReq0InMeetingWebinarLiveStreaming {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsUpdateReq0InMeetingWebinarPolling returns new OptUserSettingsUpdateReq0InMeetingWebinarPolling with value set to v.
func NewOptUserSettingsUpdateReq0InMeetingWebinarPolling(v UserSettingsUpdateReq0InMeetingWebinarPolling) OptUserSettingsUpdateReq0InMeetingWebinarPolling {
	return OptUserSettingsUpdateReq0InMeetingWebinarPolling{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsUpdateReq0InMeetingWebinarPolling is optional UserSettingsUpdateReq0InMeetingWebinarPolling.
type OptUserSettingsUpdateReq0InMeetingWebinarPolling struct {
	Value UserSettingsUpdateReq0InMeetingWebinarPolling
	Set   bool
}

// IsSet returns true if OptUserSettingsUpdateReq0InMeetingWebinarPolling was set.
func (o OptUserSettingsUpdateReq0InMeetingWebinarPolling) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsUpdateReq0InMeetingWebinarPolling) Reset() {
	var v UserSettingsUpdateReq0InMeetingWebinarPolling
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsUpdateReq0InMeetingWebinarPolling) SetTo(v UserSettingsUpdateReq0InMeetingWebinarPolling) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsUpdateReq0InMeetingWebinarPolling) Get() (v UserSettingsUpdateReq0InMeetingWebinarPolling, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsUpdateReq0InMeetingWebinarPolling) Or(d UserSettingsUpdateReq0InMeetingWebinarPolling) UserSettingsUpdateReq0InMeetingWebinarPolling {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsUpdateReq0Profile returns new OptUserSettingsUpdateReq0Profile with value set to v.
func NewOptUserSettingsUpdateReq0Profile(v UserSettingsUpdateReq0Profile) OptUserSettingsUpdateReq0Profile {
	return OptUserSettingsUpdateReq0Profile{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsUpdateReq0Profile is optional UserSettingsUpdateReq0Profile.
type OptUserSettingsUpdateReq0Profile struct {
	Value UserSettingsUpdateReq0Profile
	Set   bool
}

// IsSet returns true if OptUserSettingsUpdateReq0Profile was set.
func (o OptUserSettingsUpdateReq0Profile) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsUpdateReq0Profile) Reset() {
	var v UserSettingsUpdateReq0Profile
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsUpdateReq0Profile) SetTo(v UserSettingsUpdateReq0Profile) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsUpdateReq0Profile) Get() (v UserSettingsUpdateReq0Profile, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsUpdateReq0Profile) Or(d UserSettingsUpdateReq0Profile) UserSettingsUpdateReq0Profile {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsUpdateReq0ProfileRecordingStorageLocation returns new OptUserSettingsUpdateReq0ProfileRecordingStorageLocation with value set to v.
func NewOptUserSettingsUpdateReq0ProfileRecordingStorageLocation(v UserSettingsUpdateReq0ProfileRecordingStorageLocation) OptUserSettingsUpdateReq0ProfileRecordingStorageLocation {
	return OptUserSettingsUpdateReq0ProfileRecordingStorageLocation{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsUpdateReq0ProfileRecordingStorageLocation is optional UserSettingsUpdateReq0ProfileRecordingStorageLocation.
type OptUserSettingsUpdateReq0ProfileRecordingStorageLocation struct {
	Value UserSettingsUpdateReq0ProfileRecordingStorageLocation
	Set   bool
}

// IsSet returns true if OptUserSettingsUpdateReq0ProfileRecordingStorageLocation was set.
func (o OptUserSettingsUpdateReq0ProfileRecordingStorageLocation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsUpdateReq0ProfileRecordingStorageLocation) Reset() {
	var v UserSettingsUpdateReq0ProfileRecordingStorageLocation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsUpdateReq0ProfileRecordingStorageLocation) SetTo(v UserSettingsUpdateReq0ProfileRecordingStorageLocation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsUpdateReq0ProfileRecordingStorageLocation) Get() (v UserSettingsUpdateReq0ProfileRecordingStorageLocation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsUpdateReq0ProfileRecordingStorageLocation) Or(d UserSettingsUpdateReq0ProfileRecordingStorageLocation) UserSettingsUpdateReq0ProfileRecordingStorageLocation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsUpdateReq0Recording returns new OptUserSettingsUpdateReq0Recording with value set to v.
func NewOptUserSettingsUpdateReq0Recording(v UserSettingsUpdateReq0Recording) OptUserSettingsUpdateReq0Recording {
	return OptUserSettingsUpdateReq0Recording{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsUpdateReq0Recording is optional UserSettingsUpdateReq0Recording.
type OptUserSettingsUpdateReq0Recording struct {
	Value UserSettingsUpdateReq0Recording
	Set   bool
}

// IsSet returns true if OptUserSettingsUpdateReq0Recording was set.
func (o OptUserSettingsUpdateReq0Recording) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsUpdateReq0Recording) Reset() {
	var v UserSettingsUpdateReq0Recording
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsUpdateReq0Recording) SetTo(v UserSettingsUpdateReq0Recording) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsUpdateReq0Recording) Get() (v UserSettingsUpdateReq0Recording, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsUpdateReq0Recording) Or(d UserSettingsUpdateReq0Recording) UserSettingsUpdateReq0Recording {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsUpdateReq0RecordingIPAddressAccessControl returns new OptUserSettingsUpdateReq0RecordingIPAddressAccessControl with value set to v.
func NewOptUserSettingsUpdateReq0RecordingIPAddressAccessControl(v UserSettingsUpdateReq0RecordingIPAddressAccessControl) OptUserSettingsUpdateReq0RecordingIPAddressAccessControl {
	return OptUserSettingsUpdateReq0RecordingIPAddressAccessControl{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsUpdateReq0RecordingIPAddressAccessControl is optional UserSettingsUpdateReq0RecordingIPAddressAccessControl.
type OptUserSettingsUpdateReq0RecordingIPAddressAccessControl struct {
	Value UserSettingsUpdateReq0RecordingIPAddressAccessControl
	Set   bool
}

// IsSet returns true if OptUserSettingsUpdateReq0RecordingIPAddressAccessControl was set.
func (o OptUserSettingsUpdateReq0RecordingIPAddressAccessControl) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsUpdateReq0RecordingIPAddressAccessControl) Reset() {
	var v UserSettingsUpdateReq0RecordingIPAddressAccessControl
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsUpdateReq0RecordingIPAddressAccessControl) SetTo(v UserSettingsUpdateReq0RecordingIPAddressAccessControl) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsUpdateReq0RecordingIPAddressAccessControl) Get() (v UserSettingsUpdateReq0RecordingIPAddressAccessControl, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsUpdateReq0RecordingIPAddressAccessControl) Or(d UserSettingsUpdateReq0RecordingIPAddressAccessControl) UserSettingsUpdateReq0RecordingIPAddressAccessControl {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsUpdateReq0RecordingRecordFilesSeparately returns new OptUserSettingsUpdateReq0RecordingRecordFilesSeparately with value set to v.
func NewOptUserSettingsUpdateReq0RecordingRecordFilesSeparately(v UserSettingsUpdateReq0RecordingRecordFilesSeparately) OptUserSettingsUpdateReq0RecordingRecordFilesSeparately {
	return OptUserSettingsUpdateReq0RecordingRecordFilesSeparately{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsUpdateReq0RecordingRecordFilesSeparately is optional UserSettingsUpdateReq0RecordingRecordFilesSeparately.
type OptUserSettingsUpdateReq0RecordingRecordFilesSeparately struct {
	Value UserSettingsUpdateReq0RecordingRecordFilesSeparately
	Set   bool
}

// IsSet returns true if OptUserSettingsUpdateReq0RecordingRecordFilesSeparately was set.
func (o OptUserSettingsUpdateReq0RecordingRecordFilesSeparately) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsUpdateReq0RecordingRecordFilesSeparately) Reset() {
	var v UserSettingsUpdateReq0RecordingRecordFilesSeparately
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsUpdateReq0RecordingRecordFilesSeparately) SetTo(v UserSettingsUpdateReq0RecordingRecordFilesSeparately) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsUpdateReq0RecordingRecordFilesSeparately) Get() (v UserSettingsUpdateReq0RecordingRecordFilesSeparately, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsUpdateReq0RecordingRecordFilesSeparately) Or(d UserSettingsUpdateReq0RecordingRecordFilesSeparately) UserSettingsUpdateReq0RecordingRecordFilesSeparately {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsUpdateReq0RecordingRecordingPasswordRequirement returns new OptUserSettingsUpdateReq0RecordingRecordingPasswordRequirement with value set to v.
func NewOptUserSettingsUpdateReq0RecordingRecordingPasswordRequirement(v UserSettingsUpdateReq0RecordingRecordingPasswordRequirement) OptUserSettingsUpdateReq0RecordingRecordingPasswordRequirement {
	return OptUserSettingsUpdateReq0RecordingRecordingPasswordRequirement{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsUpdateReq0RecordingRecordingPasswordRequirement is optional UserSettingsUpdateReq0RecordingRecordingPasswordRequirement.
type OptUserSettingsUpdateReq0RecordingRecordingPasswordRequirement struct {
	Value UserSettingsUpdateReq0RecordingRecordingPasswordRequirement
	Set   bool
}

// IsSet returns true if OptUserSettingsUpdateReq0RecordingRecordingPasswordRequirement was set.
func (o OptUserSettingsUpdateReq0RecordingRecordingPasswordRequirement) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsUpdateReq0RecordingRecordingPasswordRequirement) Reset() {
	var v UserSettingsUpdateReq0RecordingRecordingPasswordRequirement
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsUpdateReq0RecordingRecordingPasswordRequirement) SetTo(v UserSettingsUpdateReq0RecordingRecordingPasswordRequirement) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsUpdateReq0RecordingRecordingPasswordRequirement) Get() (v UserSettingsUpdateReq0RecordingRecordingPasswordRequirement, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsUpdateReq0RecordingRecordingPasswordRequirement) Or(d UserSettingsUpdateReq0RecordingRecordingPasswordRequirement) UserSettingsUpdateReq0RecordingRecordingPasswordRequirement {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsUpdateReq0RecordingSmartRecording returns new OptUserSettingsUpdateReq0RecordingSmartRecording with value set to v.
func NewOptUserSettingsUpdateReq0RecordingSmartRecording(v UserSettingsUpdateReq0RecordingSmartRecording) OptUserSettingsUpdateReq0RecordingSmartRecording {
	return OptUserSettingsUpdateReq0RecordingSmartRecording{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsUpdateReq0RecordingSmartRecording is optional UserSettingsUpdateReq0RecordingSmartRecording.
type OptUserSettingsUpdateReq0RecordingSmartRecording struct {
	Value UserSettingsUpdateReq0RecordingSmartRecording
	Set   bool
}

// IsSet returns true if OptUserSettingsUpdateReq0RecordingSmartRecording was set.
func (o OptUserSettingsUpdateReq0RecordingSmartRecording) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsUpdateReq0RecordingSmartRecording) Reset() {
	var v UserSettingsUpdateReq0RecordingSmartRecording
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsUpdateReq0RecordingSmartRecording) SetTo(v UserSettingsUpdateReq0RecordingSmartRecording) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsUpdateReq0RecordingSmartRecording) Get() (v UserSettingsUpdateReq0RecordingSmartRecording, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsUpdateReq0RecordingSmartRecording) Or(d UserSettingsUpdateReq0RecordingSmartRecording) UserSettingsUpdateReq0RecordingSmartRecording {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsUpdateReq0ScheduleMeeting returns new OptUserSettingsUpdateReq0ScheduleMeeting with value set to v.
func NewOptUserSettingsUpdateReq0ScheduleMeeting(v UserSettingsUpdateReq0ScheduleMeeting) OptUserSettingsUpdateReq0ScheduleMeeting {
	return OptUserSettingsUpdateReq0ScheduleMeeting{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsUpdateReq0ScheduleMeeting is optional UserSettingsUpdateReq0ScheduleMeeting.
type OptUserSettingsUpdateReq0ScheduleMeeting struct {
	Value UserSettingsUpdateReq0ScheduleMeeting
	Set   bool
}

// IsSet returns true if OptUserSettingsUpdateReq0ScheduleMeeting was set.
func (o OptUserSettingsUpdateReq0ScheduleMeeting) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsUpdateReq0ScheduleMeeting) Reset() {
	var v UserSettingsUpdateReq0ScheduleMeeting
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsUpdateReq0ScheduleMeeting) SetTo(v UserSettingsUpdateReq0ScheduleMeeting) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsUpdateReq0ScheduleMeeting) Get() (v UserSettingsUpdateReq0ScheduleMeeting, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsUpdateReq0ScheduleMeeting) Or(d UserSettingsUpdateReq0ScheduleMeeting) UserSettingsUpdateReq0ScheduleMeeting {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement returns new OptUserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement with value set to v.
func NewOptUserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement(v UserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement) OptUserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement {
	return OptUserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement is optional UserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement.
type OptUserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement struct {
	Value UserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement
	Set   bool
}

// IsSet returns true if OptUserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement was set.
func (o OptUserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptUserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement) Reset() {
	var v UserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement) SetTo(v UserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement) Get() (v UserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement) Or(d UserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement) UserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsUpdateReq0Telephony returns new OptUserSettingsUpdateReq0Telephony with value set to v.
func NewOptUserSettingsUpdateReq0Telephony(v UserSettingsUpdateReq0Telephony) OptUserSettingsUpdateReq0Telephony {
	return OptUserSettingsUpdateReq0Telephony{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsUpdateReq0Telephony is optional UserSettingsUpdateReq0Telephony.
type OptUserSettingsUpdateReq0Telephony struct {
	Value UserSettingsUpdateReq0Telephony
	Set   bool
}

// IsSet returns true if OptUserSettingsUpdateReq0Telephony was set.
func (o OptUserSettingsUpdateReq0Telephony) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsUpdateReq0Telephony) Reset() {
	var v UserSettingsUpdateReq0Telephony
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsUpdateReq0Telephony) SetTo(v UserSettingsUpdateReq0Telephony) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsUpdateReq0Telephony) Get() (v UserSettingsUpdateReq0Telephony, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsUpdateReq0Telephony) Or(d UserSettingsUpdateReq0Telephony) UserSettingsUpdateReq0Telephony {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsUpdateReq0TelephonyTelephonyRegions returns new OptUserSettingsUpdateReq0TelephonyTelephonyRegions with value set to v.
func NewOptUserSettingsUpdateReq0TelephonyTelephonyRegions(v UserSettingsUpdateReq0TelephonyTelephonyRegions) OptUserSettingsUpdateReq0TelephonyTelephonyRegions {
	return OptUserSettingsUpdateReq0TelephonyTelephonyRegions{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsUpdateReq0TelephonyTelephonyRegions is optional UserSettingsUpdateReq0TelephonyTelephonyRegions.
type OptUserSettingsUpdateReq0TelephonyTelephonyRegions struct {
	Value UserSettingsUpdateReq0TelephonyTelephonyRegions
	Set   bool
}

// IsSet returns true if OptUserSettingsUpdateReq0TelephonyTelephonyRegions was set.
func (o OptUserSettingsUpdateReq0TelephonyTelephonyRegions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsUpdateReq0TelephonyTelephonyRegions) Reset() {
	var v UserSettingsUpdateReq0TelephonyTelephonyRegions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsUpdateReq0TelephonyTelephonyRegions) SetTo(v UserSettingsUpdateReq0TelephonyTelephonyRegions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsUpdateReq0TelephonyTelephonyRegions) Get() (v UserSettingsUpdateReq0TelephonyTelephonyRegions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsUpdateReq0TelephonyTelephonyRegions) Or(d UserSettingsUpdateReq0TelephonyTelephonyRegions) UserSettingsUpdateReq0TelephonyTelephonyRegions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsUpdateReq0Tsp returns new OptUserSettingsUpdateReq0Tsp with value set to v.
func NewOptUserSettingsUpdateReq0Tsp(v UserSettingsUpdateReq0Tsp) OptUserSettingsUpdateReq0Tsp {
	return OptUserSettingsUpdateReq0Tsp{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsUpdateReq0Tsp is optional UserSettingsUpdateReq0Tsp.
type OptUserSettingsUpdateReq0Tsp struct {
	Value UserSettingsUpdateReq0Tsp
	Set   bool
}

// IsSet returns true if OptUserSettingsUpdateReq0Tsp was set.
func (o OptUserSettingsUpdateReq0Tsp) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsUpdateReq0Tsp) Reset() {
	var v UserSettingsUpdateReq0Tsp
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsUpdateReq0Tsp) SetTo(v UserSettingsUpdateReq0Tsp) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsUpdateReq0Tsp) Get() (v UserSettingsUpdateReq0Tsp, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsUpdateReq0Tsp) Or(d UserSettingsUpdateReq0Tsp) UserSettingsUpdateReq0Tsp {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsUpdateReq1AuthenticationOption returns new OptUserSettingsUpdateReq1AuthenticationOption with value set to v.
func NewOptUserSettingsUpdateReq1AuthenticationOption(v UserSettingsUpdateReq1AuthenticationOption) OptUserSettingsUpdateReq1AuthenticationOption {
	return OptUserSettingsUpdateReq1AuthenticationOption{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsUpdateReq1AuthenticationOption is optional UserSettingsUpdateReq1AuthenticationOption.
type OptUserSettingsUpdateReq1AuthenticationOption struct {
	Value UserSettingsUpdateReq1AuthenticationOption
	Set   bool
}

// IsSet returns true if OptUserSettingsUpdateReq1AuthenticationOption was set.
func (o OptUserSettingsUpdateReq1AuthenticationOption) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsUpdateReq1AuthenticationOption) Reset() {
	var v UserSettingsUpdateReq1AuthenticationOption
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsUpdateReq1AuthenticationOption) SetTo(v UserSettingsUpdateReq1AuthenticationOption) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsUpdateReq1AuthenticationOption) Get() (v UserSettingsUpdateReq1AuthenticationOption, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsUpdateReq1AuthenticationOption) Or(d UserSettingsUpdateReq1AuthenticationOption) UserSettingsUpdateReq1AuthenticationOption {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsUpdateReq2AuthenticationOption returns new OptUserSettingsUpdateReq2AuthenticationOption with value set to v.
func NewOptUserSettingsUpdateReq2AuthenticationOption(v UserSettingsUpdateReq2AuthenticationOption) OptUserSettingsUpdateReq2AuthenticationOption {
	return OptUserSettingsUpdateReq2AuthenticationOption{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsUpdateReq2AuthenticationOption is optional UserSettingsUpdateReq2AuthenticationOption.
type OptUserSettingsUpdateReq2AuthenticationOption struct {
	Value UserSettingsUpdateReq2AuthenticationOption
	Set   bool
}

// IsSet returns true if OptUserSettingsUpdateReq2AuthenticationOption was set.
func (o OptUserSettingsUpdateReq2AuthenticationOption) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsUpdateReq2AuthenticationOption) Reset() {
	var v UserSettingsUpdateReq2AuthenticationOption
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsUpdateReq2AuthenticationOption) SetTo(v UserSettingsUpdateReq2AuthenticationOption) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsUpdateReq2AuthenticationOption) Get() (v UserSettingsUpdateReq2AuthenticationOption, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsUpdateReq2AuthenticationOption) Or(d UserSettingsUpdateReq2AuthenticationOption) UserSettingsUpdateReq2AuthenticationOption {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsUpdateReq3MeetingSecurity returns new OptUserSettingsUpdateReq3MeetingSecurity with value set to v.
func NewOptUserSettingsUpdateReq3MeetingSecurity(v UserSettingsUpdateReq3MeetingSecurity) OptUserSettingsUpdateReq3MeetingSecurity {
	return OptUserSettingsUpdateReq3MeetingSecurity{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsUpdateReq3MeetingSecurity is optional UserSettingsUpdateReq3MeetingSecurity.
type OptUserSettingsUpdateReq3MeetingSecurity struct {
	Value UserSettingsUpdateReq3MeetingSecurity
	Set   bool
}

// IsSet returns true if OptUserSettingsUpdateReq3MeetingSecurity was set.
func (o OptUserSettingsUpdateReq3MeetingSecurity) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsUpdateReq3MeetingSecurity) Reset() {
	var v UserSettingsUpdateReq3MeetingSecurity
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsUpdateReq3MeetingSecurity) SetTo(v UserSettingsUpdateReq3MeetingSecurity) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsUpdateReq3MeetingSecurity) Get() (v UserSettingsUpdateReq3MeetingSecurity, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsUpdateReq3MeetingSecurity) Or(d UserSettingsUpdateReq3MeetingSecurity) UserSettingsUpdateReq3MeetingSecurity {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement returns new OptUserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement with value set to v.
func NewOptUserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement(v UserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement) OptUserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement {
	return OptUserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement is optional UserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement.
type OptUserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement struct {
	Value UserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement
	Set   bool
}

// IsSet returns true if OptUserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement was set.
func (o OptUserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptUserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement) Reset() {
	var v UserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement) SetTo(v UserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement) Get() (v UserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement) Or(d UserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement) UserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserSettingsUpdateReq3MeetingSecurityWaitingRoomSettings returns new OptUserSettingsUpdateReq3MeetingSecurityWaitingRoomSettings with value set to v.
func NewOptUserSettingsUpdateReq3MeetingSecurityWaitingRoomSettings(v UserSettingsUpdateReq3MeetingSecurityWaitingRoomSettings) OptUserSettingsUpdateReq3MeetingSecurityWaitingRoomSettings {
	return OptUserSettingsUpdateReq3MeetingSecurityWaitingRoomSettings{
		Value: v,
		Set:   true,
	}
}

// OptUserSettingsUpdateReq3MeetingSecurityWaitingRoomSettings is optional UserSettingsUpdateReq3MeetingSecurityWaitingRoomSettings.
type OptUserSettingsUpdateReq3MeetingSecurityWaitingRoomSettings struct {
	Value UserSettingsUpdateReq3MeetingSecurityWaitingRoomSettings
	Set   bool
}

// IsSet returns true if OptUserSettingsUpdateReq3MeetingSecurityWaitingRoomSettings was set.
func (o OptUserSettingsUpdateReq3MeetingSecurityWaitingRoomSettings) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserSettingsUpdateReq3MeetingSecurityWaitingRoomSettings) Reset() {
	var v UserSettingsUpdateReq3MeetingSecurityWaitingRoomSettings
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserSettingsUpdateReq3MeetingSecurityWaitingRoomSettings) SetTo(v UserSettingsUpdateReq3MeetingSecurityWaitingRoomSettings) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserSettingsUpdateReq3MeetingSecurityWaitingRoomSettings) Get() (v UserSettingsUpdateReq3MeetingSecurityWaitingRoomSettings, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserSettingsUpdateReq3MeetingSecurityWaitingRoomSettings) Or(d UserSettingsUpdateReq3MeetingSecurityWaitingRoomSettings) UserSettingsUpdateReq3MeetingSecurityWaitingRoomSettings {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserStatusReq returns new OptUserStatusReq with value set to v.
func NewOptUserStatusReq(v UserStatusReq) OptUserStatusReq {
	return OptUserStatusReq{
		Value: v,
		Set:   true,
	}
}

// OptUserStatusReq is optional UserStatusReq.
type OptUserStatusReq struct {
	Value UserStatusReq
	Set   bool
}

// IsSet returns true if OptUserStatusReq was set.
func (o OptUserStatusReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserStatusReq) Reset() {
	var v UserStatusReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserStatusReq) SetTo(v UserStatusReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserStatusReq) Get() (v UserStatusReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserStatusReq) Or(d UserStatusReq) UserStatusReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserUpdateReq returns new OptUserUpdateReq with value set to v.
func NewOptUserUpdateReq(v UserUpdateReq) OptUserUpdateReq {
	return OptUserUpdateReq{
		Value: v,
		Set:   true,
	}
}

// OptUserUpdateReq is optional UserUpdateReq.
type OptUserUpdateReq struct {
	Value UserUpdateReq
	Set   bool
}

// IsSet returns true if OptUserUpdateReq was set.
func (o OptUserUpdateReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserUpdateReq) Reset() {
	var v UserUpdateReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserUpdateReq) SetTo(v UserUpdateReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserUpdateReq) Get() (v UserUpdateReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserUpdateReq) Or(d UserUpdateReq) UserUpdateReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserUpdateReqFeature returns new OptUserUpdateReqFeature with value set to v.
func NewOptUserUpdateReqFeature(v UserUpdateReqFeature) OptUserUpdateReqFeature {
	return OptUserUpdateReqFeature{
		Value: v,
		Set:   true,
	}
}

// OptUserUpdateReqFeature is optional UserUpdateReqFeature.
type OptUserUpdateReqFeature struct {
	Value UserUpdateReqFeature
	Set   bool
}

// IsSet returns true if OptUserUpdateReqFeature was set.
func (o OptUserUpdateReqFeature) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserUpdateReqFeature) Reset() {
	var v UserUpdateReqFeature
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserUpdateReqFeature) SetTo(v UserUpdateReqFeature) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserUpdateReqFeature) Get() (v UserUpdateReqFeature, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserUpdateReqFeature) Or(d UserUpdateReqFeature) UserUpdateReqFeature {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// UpdateAGroupMemberNoContent is response for UpdateAGroupMember operation.
type UpdateAGroupMemberNoContent struct{}

type UpdateAGroupMemberReq struct {
	// The action to perform:
	// * `move` &mdash; Remove the group member from one group and move them to a different group.
	// * `set_primary` &mdash; Set the user's primary group.
	Action string `json:"action"`
	// The target group's ID. To get this value, use the [**List
	// groups**](/docs/api-reference/zoom-api/methods#operation/groups) API.
	// * To set a user's primary group, use the designated primary group's `groupId` value.
	// * To move a group member from one group to another, use the `groupId` of the designated group.
	TargetGroupID OptString `json:"target_group_id"`
}

// GetAction returns the value of Action.
func (s *UpdateAGroupMemberReq) GetAction() string {
	return s.Action
}

// GetTargetGroupID returns the value of TargetGroupID.
func (s *UpdateAGroupMemberReq) GetTargetGroupID() OptString {
	return s.TargetGroupID
}

// SetAction sets the value of Action.
func (s *UpdateAGroupMemberReq) SetAction(val string) {
	s.Action = val
}

// SetTargetGroupID sets the value of TargetGroupID.
func (s *UpdateAGroupMemberReq) SetTargetGroupID(val OptString) {
	s.TargetGroupID = val
}

type UpdateGroupSettingsOK struct{}

// UpdateGroupSettingsReq represents sum type.
type UpdateGroupSettingsReq struct {
	Type                    UpdateGroupSettingsReqType // switch on this field
	UpdateGroupSettingsReq0 UpdateGroupSettingsReq0
	UpdateGroupSettingsReq1 UpdateGroupSettingsReq1
	UpdateGroupSettingsReq2 UpdateGroupSettingsReq2
	UpdateGroupSettingsReq3 UpdateGroupSettingsReq3
}

// UpdateGroupSettingsReqType is oneOf type of UpdateGroupSettingsReq.
type UpdateGroupSettingsReqType string

// Possible values for UpdateGroupSettingsReqType.
const (
	UpdateGroupSettingsReq0UpdateGroupSettingsReq UpdateGroupSettingsReqType = "UpdateGroupSettingsReq0"
	UpdateGroupSettingsReq1UpdateGroupSettingsReq UpdateGroupSettingsReqType = "UpdateGroupSettingsReq1"
	UpdateGroupSettingsReq2UpdateGroupSettingsReq UpdateGroupSettingsReqType = "UpdateGroupSettingsReq2"
	UpdateGroupSettingsReq3UpdateGroupSettingsReq UpdateGroupSettingsReqType = "UpdateGroupSettingsReq3"
)

// IsUpdateGroupSettingsReq0 reports whether UpdateGroupSettingsReq is UpdateGroupSettingsReq0.
func (s UpdateGroupSettingsReq) IsUpdateGroupSettingsReq0() bool {
	return s.Type == UpdateGroupSettingsReq0UpdateGroupSettingsReq
}

// IsUpdateGroupSettingsReq1 reports whether UpdateGroupSettingsReq is UpdateGroupSettingsReq1.
func (s UpdateGroupSettingsReq) IsUpdateGroupSettingsReq1() bool {
	return s.Type == UpdateGroupSettingsReq1UpdateGroupSettingsReq
}

// IsUpdateGroupSettingsReq2 reports whether UpdateGroupSettingsReq is UpdateGroupSettingsReq2.
func (s UpdateGroupSettingsReq) IsUpdateGroupSettingsReq2() bool {
	return s.Type == UpdateGroupSettingsReq2UpdateGroupSettingsReq
}

// IsUpdateGroupSettingsReq3 reports whether UpdateGroupSettingsReq is UpdateGroupSettingsReq3.
func (s UpdateGroupSettingsReq) IsUpdateGroupSettingsReq3() bool {
	return s.Type == UpdateGroupSettingsReq3UpdateGroupSettingsReq
}

// SetUpdateGroupSettingsReq0 sets UpdateGroupSettingsReq to UpdateGroupSettingsReq0.
func (s *UpdateGroupSettingsReq) SetUpdateGroupSettingsReq0(v UpdateGroupSettingsReq0) {
	s.Type = UpdateGroupSettingsReq0UpdateGroupSettingsReq
	s.UpdateGroupSettingsReq0 = v
}

// GetUpdateGroupSettingsReq0 returns UpdateGroupSettingsReq0 and true boolean if UpdateGroupSettingsReq is UpdateGroupSettingsReq0.
func (s UpdateGroupSettingsReq) GetUpdateGroupSettingsReq0() (v UpdateGroupSettingsReq0, ok bool) {
	if !s.IsUpdateGroupSettingsReq0() {
		return v, false
	}
	return s.UpdateGroupSettingsReq0, true
}

// NewUpdateGroupSettingsReq0UpdateGroupSettingsReq returns new UpdateGroupSettingsReq from UpdateGroupSettingsReq0.
func NewUpdateGroupSettingsReq0UpdateGroupSettingsReq(v UpdateGroupSettingsReq0) UpdateGroupSettingsReq {
	var s UpdateGroupSettingsReq
	s.SetUpdateGroupSettingsReq0(v)
	return s
}

// SetUpdateGroupSettingsReq1 sets UpdateGroupSettingsReq to UpdateGroupSettingsReq1.
func (s *UpdateGroupSettingsReq) SetUpdateGroupSettingsReq1(v UpdateGroupSettingsReq1) {
	s.Type = UpdateGroupSettingsReq1UpdateGroupSettingsReq
	s.UpdateGroupSettingsReq1 = v
}

// GetUpdateGroupSettingsReq1 returns UpdateGroupSettingsReq1 and true boolean if UpdateGroupSettingsReq is UpdateGroupSettingsReq1.
func (s UpdateGroupSettingsReq) GetUpdateGroupSettingsReq1() (v UpdateGroupSettingsReq1, ok bool) {
	if !s.IsUpdateGroupSettingsReq1() {
		return v, false
	}
	return s.UpdateGroupSettingsReq1, true
}

// NewUpdateGroupSettingsReq1UpdateGroupSettingsReq returns new UpdateGroupSettingsReq from UpdateGroupSettingsReq1.
func NewUpdateGroupSettingsReq1UpdateGroupSettingsReq(v UpdateGroupSettingsReq1) UpdateGroupSettingsReq {
	var s UpdateGroupSettingsReq
	s.SetUpdateGroupSettingsReq1(v)
	return s
}

// SetUpdateGroupSettingsReq2 sets UpdateGroupSettingsReq to UpdateGroupSettingsReq2.
func (s *UpdateGroupSettingsReq) SetUpdateGroupSettingsReq2(v UpdateGroupSettingsReq2) {
	s.Type = UpdateGroupSettingsReq2UpdateGroupSettingsReq
	s.UpdateGroupSettingsReq2 = v
}

// GetUpdateGroupSettingsReq2 returns UpdateGroupSettingsReq2 and true boolean if UpdateGroupSettingsReq is UpdateGroupSettingsReq2.
func (s UpdateGroupSettingsReq) GetUpdateGroupSettingsReq2() (v UpdateGroupSettingsReq2, ok bool) {
	if !s.IsUpdateGroupSettingsReq2() {
		return v, false
	}
	return s.UpdateGroupSettingsReq2, true
}

// NewUpdateGroupSettingsReq2UpdateGroupSettingsReq returns new UpdateGroupSettingsReq from UpdateGroupSettingsReq2.
func NewUpdateGroupSettingsReq2UpdateGroupSettingsReq(v UpdateGroupSettingsReq2) UpdateGroupSettingsReq {
	var s UpdateGroupSettingsReq
	s.SetUpdateGroupSettingsReq2(v)
	return s
}

// SetUpdateGroupSettingsReq3 sets UpdateGroupSettingsReq to UpdateGroupSettingsReq3.
func (s *UpdateGroupSettingsReq) SetUpdateGroupSettingsReq3(v UpdateGroupSettingsReq3) {
	s.Type = UpdateGroupSettingsReq3UpdateGroupSettingsReq
	s.UpdateGroupSettingsReq3 = v
}

// GetUpdateGroupSettingsReq3 returns UpdateGroupSettingsReq3 and true boolean if UpdateGroupSettingsReq is UpdateGroupSettingsReq3.
func (s UpdateGroupSettingsReq) GetUpdateGroupSettingsReq3() (v UpdateGroupSettingsReq3, ok bool) {
	if !s.IsUpdateGroupSettingsReq3() {
		return v, false
	}
	return s.UpdateGroupSettingsReq3, true
}

// NewUpdateGroupSettingsReq3UpdateGroupSettingsReq returns new UpdateGroupSettingsReq from UpdateGroupSettingsReq3.
func NewUpdateGroupSettingsReq3UpdateGroupSettingsReq(v UpdateGroupSettingsReq3) UpdateGroupSettingsReq {
	var s UpdateGroupSettingsReq
	s.SetUpdateGroupSettingsReq3(v)
	return s
}

type UpdateGroupSettingsReq0 struct {
	// The group's audio conference settings.
	AudioConferencing OptUpdateGroupSettingsReq0AudioConferencing `json:"audio_conferencing"`
	EmailNotification OptUpdateGroupSettingsReq0EmailNotification `json:"email_notification"`
	InMeeting         OptUpdateGroupSettingsReq0InMeeting         `json:"in_meeting"`
	OtherOptions      OptUpdateGroupSettingsReq0OtherOptions      `json:"other_options"`
	Profile           OptUpdateGroupSettingsReq0Profile           `json:"profile"`
	Recording         OptUpdateGroupSettingsReq0Recording         `json:"recording"`
	ScheduleMeeting   OptUpdateGroupSettingsReq0ScheduleMeeting   `json:"schedule_meeting"`
	Telephony         OptUpdateGroupSettingsReq0Telephony         `json:"telephony"`
	// The account's chat settings.
	Chat OptUpdateGroupSettingsReq0Chat `json:"chat"`
}

// GetAudioConferencing returns the value of AudioConferencing.
func (s *UpdateGroupSettingsReq0) GetAudioConferencing() OptUpdateGroupSettingsReq0AudioConferencing {
	return s.AudioConferencing
}

// GetEmailNotification returns the value of EmailNotification.
func (s *UpdateGroupSettingsReq0) GetEmailNotification() OptUpdateGroupSettingsReq0EmailNotification {
	return s.EmailNotification
}

// GetInMeeting returns the value of InMeeting.
func (s *UpdateGroupSettingsReq0) GetInMeeting() OptUpdateGroupSettingsReq0InMeeting {
	return s.InMeeting
}

// GetOtherOptions returns the value of OtherOptions.
func (s *UpdateGroupSettingsReq0) GetOtherOptions() OptUpdateGroupSettingsReq0OtherOptions {
	return s.OtherOptions
}

// GetProfile returns the value of Profile.
func (s *UpdateGroupSettingsReq0) GetProfile() OptUpdateGroupSettingsReq0Profile {
	return s.Profile
}

// GetRecording returns the value of Recording.
func (s *UpdateGroupSettingsReq0) GetRecording() OptUpdateGroupSettingsReq0Recording {
	return s.Recording
}

// GetScheduleMeeting returns the value of ScheduleMeeting.
func (s *UpdateGroupSettingsReq0) GetScheduleMeeting() OptUpdateGroupSettingsReq0ScheduleMeeting {
	return s.ScheduleMeeting
}

// GetTelephony returns the value of Telephony.
func (s *UpdateGroupSettingsReq0) GetTelephony() OptUpdateGroupSettingsReq0Telephony {
	return s.Telephony
}

// GetChat returns the value of Chat.
func (s *UpdateGroupSettingsReq0) GetChat() OptUpdateGroupSettingsReq0Chat {
	return s.Chat
}

// SetAudioConferencing sets the value of AudioConferencing.
func (s *UpdateGroupSettingsReq0) SetAudioConferencing(val OptUpdateGroupSettingsReq0AudioConferencing) {
	s.AudioConferencing = val
}

// SetEmailNotification sets the value of EmailNotification.
func (s *UpdateGroupSettingsReq0) SetEmailNotification(val OptUpdateGroupSettingsReq0EmailNotification) {
	s.EmailNotification = val
}

// SetInMeeting sets the value of InMeeting.
func (s *UpdateGroupSettingsReq0) SetInMeeting(val OptUpdateGroupSettingsReq0InMeeting) {
	s.InMeeting = val
}

// SetOtherOptions sets the value of OtherOptions.
func (s *UpdateGroupSettingsReq0) SetOtherOptions(val OptUpdateGroupSettingsReq0OtherOptions) {
	s.OtherOptions = val
}

// SetProfile sets the value of Profile.
func (s *UpdateGroupSettingsReq0) SetProfile(val OptUpdateGroupSettingsReq0Profile) {
	s.Profile = val
}

// SetRecording sets the value of Recording.
func (s *UpdateGroupSettingsReq0) SetRecording(val OptUpdateGroupSettingsReq0Recording) {
	s.Recording = val
}

// SetScheduleMeeting sets the value of ScheduleMeeting.
func (s *UpdateGroupSettingsReq0) SetScheduleMeeting(val OptUpdateGroupSettingsReq0ScheduleMeeting) {
	s.ScheduleMeeting = val
}

// SetTelephony sets the value of Telephony.
func (s *UpdateGroupSettingsReq0) SetTelephony(val OptUpdateGroupSettingsReq0Telephony) {
	s.Telephony = val
}

// SetChat sets the value of Chat.
func (s *UpdateGroupSettingsReq0) SetChat(val OptUpdateGroupSettingsReq0Chat) {
	s.Chat = val
}

// The group's audio conference settings.
type UpdateGroupSettingsReq0AudioConferencing struct {
	// The group's [**Toll-free and Fee-based Toll Call**](https://support.zoom.
	// us/hc/en-us/articles/360060950711-Enabling-Toll-free-and-Fee-based-Toll-Call#h_01F51844DRCX3K7BRTMZ40381R) settings.
	TollFreeAndFeeBasedTollCall OptUpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCall `json:"toll_free_and_fee_based_toll_call"`
}

// GetTollFreeAndFeeBasedTollCall returns the value of TollFreeAndFeeBasedTollCall.
func (s *UpdateGroupSettingsReq0AudioConferencing) GetTollFreeAndFeeBasedTollCall() OptUpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCall {
	return s.TollFreeAndFeeBasedTollCall
}

// SetTollFreeAndFeeBasedTollCall sets the value of TollFreeAndFeeBasedTollCall.
func (s *UpdateGroupSettingsReq0AudioConferencing) SetTollFreeAndFeeBasedTollCall(val OptUpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCall) {
	s.TollFreeAndFeeBasedTollCall = val
}

// The group's [**Toll-free and Fee-based Toll Call**](https://support.zoom.
// us/hc/en-us/articles/360060950711-Enabling-Toll-free-and-Fee-based-Toll-Call#h_01F51844DRCX3K7BRTMZ40381R) settings.
type UpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCall struct {
	// Whether webinar attendees can dial in through the account's **Toll-free and Fee-based Toll Call**
	// phone numbers. This feature is only available in version 5.2.2 and higher.
	AllowWebinarAttendeesDial OptBool `json:"allow_webinar_attendees_dial"`
	// Whether the group has the [**Toll-free and Fee-based Toll Call**](https://support.zoom.
	// us/hc/en-us/articles/360060950711-Enabling-Toll-free-and-Fee-based-Toll-Call#h_01F51844DRCX3K7BRTMZ40381R) setting enabled.
	Enable OptBool `json:"enable"`
	// The group's **Toll-free and Fee-based Toll Call** phone number information.
	Numbers []UpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem `json:"numbers"`
}

// GetAllowWebinarAttendeesDial returns the value of AllowWebinarAttendeesDial.
func (s *UpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCall) GetAllowWebinarAttendeesDial() OptBool {
	return s.AllowWebinarAttendeesDial
}

// GetEnable returns the value of Enable.
func (s *UpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCall) GetEnable() OptBool {
	return s.Enable
}

// GetNumbers returns the value of Numbers.
func (s *UpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCall) GetNumbers() []UpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem {
	return s.Numbers
}

// SetAllowWebinarAttendeesDial sets the value of AllowWebinarAttendeesDial.
func (s *UpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCall) SetAllowWebinarAttendeesDial(val OptBool) {
	s.AllowWebinarAttendeesDial = val
}

// SetEnable sets the value of Enable.
func (s *UpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCall) SetEnable(val OptBool) {
	s.Enable = val
}

// SetNumbers sets the value of Numbers.
func (s *UpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCall) SetNumbers(val []UpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem) {
	s.Numbers = val
}

type UpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem struct {
	// The phone number's [E.164 country calling code](https://en.wikipedia.
	// org/wiki/List_of_country_calling_codes).
	Code OptString `json:"code"`
	// The phone number's [country code](https://developers.zoom.
	// us/docs/api/rest/other-references/abbreviation-lists/#countries).
	CountryCode OptString `json:"country_code"`
	// The country name.
	CountryName OptString `json:"country_name"`
	// The phone number's display number.
	DisplayNumber OptString `json:"display_number"`
	// The phone number.
	Number OptString `json:"number"`
}

// GetCode returns the value of Code.
func (s *UpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem) GetCode() OptString {
	return s.Code
}

// GetCountryCode returns the value of CountryCode.
func (s *UpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem) GetCountryCode() OptString {
	return s.CountryCode
}

// GetCountryName returns the value of CountryName.
func (s *UpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem) GetCountryName() OptString {
	return s.CountryName
}

// GetDisplayNumber returns the value of DisplayNumber.
func (s *UpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem) GetDisplayNumber() OptString {
	return s.DisplayNumber
}

// GetNumber returns the value of Number.
func (s *UpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem) GetNumber() OptString {
	return s.Number
}

// SetCode sets the value of Code.
func (s *UpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem) SetCode(val OptString) {
	s.Code = val
}

// SetCountryCode sets the value of CountryCode.
func (s *UpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem) SetCountryCode(val OptString) {
	s.CountryCode = val
}

// SetCountryName sets the value of CountryName.
func (s *UpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem) SetCountryName(val OptString) {
	s.CountryName = val
}

// SetDisplayNumber sets the value of DisplayNumber.
func (s *UpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem) SetDisplayNumber(val OptString) {
	s.DisplayNumber = val
}

// SetNumber sets the value of Number.
func (s *UpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem) SetNumber(val OptString) {
	s.Number = val
}

// The account's chat settings.
type UpdateGroupSettingsReq0Chat struct {
	// Users can share files in chats and channels.
	ShareFiles OptUpdateGroupSettingsReq0ChatShareFiles `json:"share_files"`
	// Chat emojis.
	ChatEmojis OptUpdateGroupSettingsReq0ChatChatEmojis `json:"chat_emojis"`
	// Allow users to record voice messages that can be sent in direct messages or group conversations.
	RecordVoiceMessages OptBool `json:"record_voice_messages"`
	// Allow users to record video messages that can be sent in direct messages or group conversations.
	// If the file share setting is disabled, they will not be able to record and send video messages.
	RecordVideoMessages OptBool `json:"record_video_messages"`
	// Allow users to take and send screenshots in direct messages or group conversations.
	ScreenCapture OptBool `json:"screen_capture"`
	// Allow users to create public channels.
	CreatePublicChannels OptBool `json:"create_public_channels"`
	// Allow users to create private channels.
	CreatePrivateChannels OptBool `json:"create_private_channels"`
	// Share links to messages and channels in Team Chat.
	ShareLinksInChat OptBool `json:"share_links_in_chat"`
	// Schedule a meeting from chat or channel.
	ScheduleMeetingsInChat OptBool `json:"schedule_meetings_in_chat"`
	// Set retention period for messages and files in Zoom's cloud.
	SetRetentionPeriodInCloud OptUpdateGroupSettingsReq0ChatSetRetentionPeriodInCloud `json:"set_retention_period_in_cloud"`
	// Store messages on local devices, excluding personal channel messages.
	SetRetentionPeriodInLocal OptUpdateGroupSettingsReq0ChatSetRetentionPeriodInLocal `json:"set_retention_period_in_local"`
	// Allow users to search others, when selecting multiple items, separate them with commas.
	// * ''-none.
	// * '1' - In the same account.
	// * '2' - Under the same master account, including all sub acounts.
	// * '3' - Under the same organization.
	AllowUsersToSearchOthersOptions OptString `json:"allow_users_to_search_others_options"`
	// Allow users to add contacts.
	AllowUsersToAddContacts OptUpdateGroupSettingsReq0ChatAllowUsersToAddContacts `json:"allow_users_to_add_contacts"`
	// Allow users to chat with others.
	AllowUsersToChatWithOthers OptUpdateGroupSettingsReq0ChatAllowUsersToChatWithOthers `json:"allow_users_to_chat_with_others"`
	// Information about the **Chat Etiquette** Tool.
	ChatEtiquetteTool OptUpdateGroupSettingsReq0ChatChatEtiquetteTool `json:"chat_etiquette_tool"`
	// Send data to third-party archiving service.
	SendDataToThirdPartyArchivingService OptUpdateGroupSettingsReq0ChatSendDataToThirdPartyArchivingService `json:"send_data_to_third_party_archiving_service"`
	// Allow users to translate team chat messages. [Learn more].(https://support.zoom.
	// us/hc/en-us/articles/12998089084685).
	TranslateMessages OptBool `json:"translate_messages"`
	// Allow users to search GIF images from GIPHY when they compose messages. See GIPHY's website for
	// more information about content ratings.
	SearchAndSendAnimatedGIFImages OptUpdateGroupSettingsReq0ChatSearchAndSendAnimatedGIFImages `json:"search_and_send_animated_gif_images"`
}

// GetShareFiles returns the value of ShareFiles.
func (s *UpdateGroupSettingsReq0Chat) GetShareFiles() OptUpdateGroupSettingsReq0ChatShareFiles {
	return s.ShareFiles
}

// GetChatEmojis returns the value of ChatEmojis.
func (s *UpdateGroupSettingsReq0Chat) GetChatEmojis() OptUpdateGroupSettingsReq0ChatChatEmojis {
	return s.ChatEmojis
}

// GetRecordVoiceMessages returns the value of RecordVoiceMessages.
func (s *UpdateGroupSettingsReq0Chat) GetRecordVoiceMessages() OptBool {
	return s.RecordVoiceMessages
}

// GetRecordVideoMessages returns the value of RecordVideoMessages.
func (s *UpdateGroupSettingsReq0Chat) GetRecordVideoMessages() OptBool {
	return s.RecordVideoMessages
}

// GetScreenCapture returns the value of ScreenCapture.
func (s *UpdateGroupSettingsReq0Chat) GetScreenCapture() OptBool {
	return s.ScreenCapture
}

// GetCreatePublicChannels returns the value of CreatePublicChannels.
func (s *UpdateGroupSettingsReq0Chat) GetCreatePublicChannels() OptBool {
	return s.CreatePublicChannels
}

// GetCreatePrivateChannels returns the value of CreatePrivateChannels.
func (s *UpdateGroupSettingsReq0Chat) GetCreatePrivateChannels() OptBool {
	return s.CreatePrivateChannels
}

// GetShareLinksInChat returns the value of ShareLinksInChat.
func (s *UpdateGroupSettingsReq0Chat) GetShareLinksInChat() OptBool {
	return s.ShareLinksInChat
}

// GetScheduleMeetingsInChat returns the value of ScheduleMeetingsInChat.
func (s *UpdateGroupSettingsReq0Chat) GetScheduleMeetingsInChat() OptBool {
	return s.ScheduleMeetingsInChat
}

// GetSetRetentionPeriodInCloud returns the value of SetRetentionPeriodInCloud.
func (s *UpdateGroupSettingsReq0Chat) GetSetRetentionPeriodInCloud() OptUpdateGroupSettingsReq0ChatSetRetentionPeriodInCloud {
	return s.SetRetentionPeriodInCloud
}

// GetSetRetentionPeriodInLocal returns the value of SetRetentionPeriodInLocal.
func (s *UpdateGroupSettingsReq0Chat) GetSetRetentionPeriodInLocal() OptUpdateGroupSettingsReq0ChatSetRetentionPeriodInLocal {
	return s.SetRetentionPeriodInLocal
}

// GetAllowUsersToSearchOthersOptions returns the value of AllowUsersToSearchOthersOptions.
func (s *UpdateGroupSettingsReq0Chat) GetAllowUsersToSearchOthersOptions() OptString {
	return s.AllowUsersToSearchOthersOptions
}

// GetAllowUsersToAddContacts returns the value of AllowUsersToAddContacts.
func (s *UpdateGroupSettingsReq0Chat) GetAllowUsersToAddContacts() OptUpdateGroupSettingsReq0ChatAllowUsersToAddContacts {
	return s.AllowUsersToAddContacts
}

// GetAllowUsersToChatWithOthers returns the value of AllowUsersToChatWithOthers.
func (s *UpdateGroupSettingsReq0Chat) GetAllowUsersToChatWithOthers() OptUpdateGroupSettingsReq0ChatAllowUsersToChatWithOthers {
	return s.AllowUsersToChatWithOthers
}

// GetChatEtiquetteTool returns the value of ChatEtiquetteTool.
func (s *UpdateGroupSettingsReq0Chat) GetChatEtiquetteTool() OptUpdateGroupSettingsReq0ChatChatEtiquetteTool {
	return s.ChatEtiquetteTool
}

// GetSendDataToThirdPartyArchivingService returns the value of SendDataToThirdPartyArchivingService.
func (s *UpdateGroupSettingsReq0Chat) GetSendDataToThirdPartyArchivingService() OptUpdateGroupSettingsReq0ChatSendDataToThirdPartyArchivingService {
	return s.SendDataToThirdPartyArchivingService
}

// GetTranslateMessages returns the value of TranslateMessages.
func (s *UpdateGroupSettingsReq0Chat) GetTranslateMessages() OptBool {
	return s.TranslateMessages
}

// GetSearchAndSendAnimatedGIFImages returns the value of SearchAndSendAnimatedGIFImages.
func (s *UpdateGroupSettingsReq0Chat) GetSearchAndSendAnimatedGIFImages() OptUpdateGroupSettingsReq0ChatSearchAndSendAnimatedGIFImages {
	return s.SearchAndSendAnimatedGIFImages
}

// SetShareFiles sets the value of ShareFiles.
func (s *UpdateGroupSettingsReq0Chat) SetShareFiles(val OptUpdateGroupSettingsReq0ChatShareFiles) {
	s.ShareFiles = val
}

// SetChatEmojis sets the value of ChatEmojis.
func (s *UpdateGroupSettingsReq0Chat) SetChatEmojis(val OptUpdateGroupSettingsReq0ChatChatEmojis) {
	s.ChatEmojis = val
}

// SetRecordVoiceMessages sets the value of RecordVoiceMessages.
func (s *UpdateGroupSettingsReq0Chat) SetRecordVoiceMessages(val OptBool) {
	s.RecordVoiceMessages = val
}

// SetRecordVideoMessages sets the value of RecordVideoMessages.
func (s *UpdateGroupSettingsReq0Chat) SetRecordVideoMessages(val OptBool) {
	s.RecordVideoMessages = val
}

// SetScreenCapture sets the value of ScreenCapture.
func (s *UpdateGroupSettingsReq0Chat) SetScreenCapture(val OptBool) {
	s.ScreenCapture = val
}

// SetCreatePublicChannels sets the value of CreatePublicChannels.
func (s *UpdateGroupSettingsReq0Chat) SetCreatePublicChannels(val OptBool) {
	s.CreatePublicChannels = val
}

// SetCreatePrivateChannels sets the value of CreatePrivateChannels.
func (s *UpdateGroupSettingsReq0Chat) SetCreatePrivateChannels(val OptBool) {
	s.CreatePrivateChannels = val
}

// SetShareLinksInChat sets the value of ShareLinksInChat.
func (s *UpdateGroupSettingsReq0Chat) SetShareLinksInChat(val OptBool) {
	s.ShareLinksInChat = val
}

// SetScheduleMeetingsInChat sets the value of ScheduleMeetingsInChat.
func (s *UpdateGroupSettingsReq0Chat) SetScheduleMeetingsInChat(val OptBool) {
	s.ScheduleMeetingsInChat = val
}

// SetSetRetentionPeriodInCloud sets the value of SetRetentionPeriodInCloud.
func (s *UpdateGroupSettingsReq0Chat) SetSetRetentionPeriodInCloud(val OptUpdateGroupSettingsReq0ChatSetRetentionPeriodInCloud) {
	s.SetRetentionPeriodInCloud = val
}

// SetSetRetentionPeriodInLocal sets the value of SetRetentionPeriodInLocal.
func (s *UpdateGroupSettingsReq0Chat) SetSetRetentionPeriodInLocal(val OptUpdateGroupSettingsReq0ChatSetRetentionPeriodInLocal) {
	s.SetRetentionPeriodInLocal = val
}

// SetAllowUsersToSearchOthersOptions sets the value of AllowUsersToSearchOthersOptions.
func (s *UpdateGroupSettingsReq0Chat) SetAllowUsersToSearchOthersOptions(val OptString) {
	s.AllowUsersToSearchOthersOptions = val
}

// SetAllowUsersToAddContacts sets the value of AllowUsersToAddContacts.
func (s *UpdateGroupSettingsReq0Chat) SetAllowUsersToAddContacts(val OptUpdateGroupSettingsReq0ChatAllowUsersToAddContacts) {
	s.AllowUsersToAddContacts = val
}

// SetAllowUsersToChatWithOthers sets the value of AllowUsersToChatWithOthers.
func (s *UpdateGroupSettingsReq0Chat) SetAllowUsersToChatWithOthers(val OptUpdateGroupSettingsReq0ChatAllowUsersToChatWithOthers) {
	s.AllowUsersToChatWithOthers = val
}

// SetChatEtiquetteTool sets the value of ChatEtiquetteTool.
func (s *UpdateGroupSettingsReq0Chat) SetChatEtiquetteTool(val OptUpdateGroupSettingsReq0ChatChatEtiquetteTool) {
	s.ChatEtiquetteTool = val
}

// SetSendDataToThirdPartyArchivingService sets the value of SendDataToThirdPartyArchivingService.
func (s *UpdateGroupSettingsReq0Chat) SetSendDataToThirdPartyArchivingService(val OptUpdateGroupSettingsReq0ChatSendDataToThirdPartyArchivingService) {
	s.SendDataToThirdPartyArchivingService = val
}

// SetTranslateMessages sets the value of TranslateMessages.
func (s *UpdateGroupSettingsReq0Chat) SetTranslateMessages(val OptBool) {
	s.TranslateMessages = val
}

// SetSearchAndSendAnimatedGIFImages sets the value of SearchAndSendAnimatedGIFImages.
func (s *UpdateGroupSettingsReq0Chat) SetSearchAndSendAnimatedGIFImages(val OptUpdateGroupSettingsReq0ChatSearchAndSendAnimatedGIFImages) {
	s.SearchAndSendAnimatedGIFImages = val
}

// Allow users to add contacts.
type UpdateGroupSettingsReq0ChatAllowUsersToAddContacts struct {
	// By disabling this setting, users will not be able to add contacts.
	Enable OptBool `json:"enable"`
	// The type of allowing users to add contacts:
	// * 1 - Anyone (internal and external contacts).
	// * 2 - In the same organization.
	// * 3 - In the same organization and specified domains.
	// * 4 - In the same organization and specified users.
	SelectedOption OptInt `json:"selected_option"`
	// The domains or emails (internal or external).
	// * When the `selected_option` field value is `3`, the value is internal or external domains. Use a
	// comma to separate multiple domains. Example: company.com.
	// * When the `selected_option` field value is `4`, the value is internal or external email addresses.
	//  Use a comma to separate multiple emails.
	UserEmailAddresses OptString `json:"user_email_addresses"`
}

// GetEnable returns the value of Enable.
func (s *UpdateGroupSettingsReq0ChatAllowUsersToAddContacts) GetEnable() OptBool {
	return s.Enable
}

// GetSelectedOption returns the value of SelectedOption.
func (s *UpdateGroupSettingsReq0ChatAllowUsersToAddContacts) GetSelectedOption() OptInt {
	return s.SelectedOption
}

// GetUserEmailAddresses returns the value of UserEmailAddresses.
func (s *UpdateGroupSettingsReq0ChatAllowUsersToAddContacts) GetUserEmailAddresses() OptString {
	return s.UserEmailAddresses
}

// SetEnable sets the value of Enable.
func (s *UpdateGroupSettingsReq0ChatAllowUsersToAddContacts) SetEnable(val OptBool) {
	s.Enable = val
}

// SetSelectedOption sets the value of SelectedOption.
func (s *UpdateGroupSettingsReq0ChatAllowUsersToAddContacts) SetSelectedOption(val OptInt) {
	s.SelectedOption = val
}

// SetUserEmailAddresses sets the value of UserEmailAddresses.
func (s *UpdateGroupSettingsReq0ChatAllowUsersToAddContacts) SetUserEmailAddresses(val OptString) {
	s.UserEmailAddresses = val
}

// Allow users to chat with others.
type UpdateGroupSettingsReq0ChatAllowUsersToChatWithOthers struct {
	// If you select 'In the same organization', users may still be able to chat with external users if
	// they are added to channels or group chats with external users.
	Enable OptBool `json:"enable"`
	// The type of allowing users to add contacts:
	// * 1 - Anyone (internal and external contacts).
	// * 2 - In the same organization.
	// * 3 - In the same organization and specified domains.
	// * 4 - In the same organization and specified users.
	SelectedOption OptInt `json:"selected_option"`
	// The domains or emails (internal or external).
	// * When the `selected_option` field value is `3`, the value is internal or external domains. Use a
	// comma to separate multiple domains. Example: company.com.
	// * When the `selected_option` field value is `4`, the value is internal or external email addresses.
	//  Use a comma to separate multiple emails.
	UserEmailAddresses OptString `json:"user_email_addresses"`
}

// GetEnable returns the value of Enable.
func (s *UpdateGroupSettingsReq0ChatAllowUsersToChatWithOthers) GetEnable() OptBool {
	return s.Enable
}

// GetSelectedOption returns the value of SelectedOption.
func (s *UpdateGroupSettingsReq0ChatAllowUsersToChatWithOthers) GetSelectedOption() OptInt {
	return s.SelectedOption
}

// GetUserEmailAddresses returns the value of UserEmailAddresses.
func (s *UpdateGroupSettingsReq0ChatAllowUsersToChatWithOthers) GetUserEmailAddresses() OptString {
	return s.UserEmailAddresses
}

// SetEnable sets the value of Enable.
func (s *UpdateGroupSettingsReq0ChatAllowUsersToChatWithOthers) SetEnable(val OptBool) {
	s.Enable = val
}

// SetSelectedOption sets the value of SelectedOption.
func (s *UpdateGroupSettingsReq0ChatAllowUsersToChatWithOthers) SetSelectedOption(val OptInt) {
	s.SelectedOption = val
}

// SetUserEmailAddresses sets the value of UserEmailAddresses.
func (s *UpdateGroupSettingsReq0ChatAllowUsersToChatWithOthers) SetUserEmailAddresses(val OptString) {
	s.UserEmailAddresses = val
}

// Chat emojis.
type UpdateGroupSettingsReq0ChatChatEmojis struct {
	// Allow users to use the emoji library in direct messages or group conversations. Choose between
	// allowing users to use any emoji in the library, or choose to allow only pre-selected emojis. If
	// the setting is disabled, users can still use keyboard shortcuts to add emojis. Users can change
	// their emoji skin tone in Settings.
	Enable       OptBool   `json:"enable"`
	EmojisOption OptString `json:"emojis_option"`
}

// GetEnable returns the value of Enable.
func (s *UpdateGroupSettingsReq0ChatChatEmojis) GetEnable() OptBool {
	return s.Enable
}

// GetEmojisOption returns the value of EmojisOption.
func (s *UpdateGroupSettingsReq0ChatChatEmojis) GetEmojisOption() OptString {
	return s.EmojisOption
}

// SetEnable sets the value of Enable.
func (s *UpdateGroupSettingsReq0ChatChatEmojis) SetEnable(val OptBool) {
	s.Enable = val
}

// SetEmojisOption sets the value of EmojisOption.
func (s *UpdateGroupSettingsReq0ChatChatEmojis) SetEmojisOption(val OptString) {
	s.EmojisOption = val
}

// Information about the **Chat Etiquette** Tool.
type UpdateGroupSettingsReq0ChatChatEtiquetteTool struct {
	// Whether to enable the **Chat Etiquette Tool**. This value defaults to `false`.
	// The **Chat Etiquette Tool** allows you to define specific keywords and text patterns in chat to
	// prevent users from inadvertently sharing unwanted messages.
	Enable OptBool `json:"enable"`
	// Information about the defined **Chat Etiquette Tool** policies.
	Policies []UpdateGroupSettingsReq0ChatChatEtiquetteToolPoliciesItem `json:"policies"`
}

// GetEnable returns the value of Enable.
func (s *UpdateGroupSettingsReq0ChatChatEtiquetteTool) GetEnable() OptBool {
	return s.Enable
}

// GetPolicies returns the value of Policies.
func (s *UpdateGroupSettingsReq0ChatChatEtiquetteTool) GetPolicies() []UpdateGroupSettingsReq0ChatChatEtiquetteToolPoliciesItem {
	return s.Policies
}

// SetEnable sets the value of Enable.
func (s *UpdateGroupSettingsReq0ChatChatEtiquetteTool) SetEnable(val OptBool) {
	s.Enable = val
}

// SetPolicies sets the value of Policies.
func (s *UpdateGroupSettingsReq0ChatChatEtiquetteTool) SetPolicies(val []UpdateGroupSettingsReq0ChatChatEtiquetteToolPoliciesItem) {
	s.Policies = val
}

type UpdateGroupSettingsReq0ChatChatEtiquetteToolPoliciesItem struct {
	// The policy ID.
	ID OptString `json:"id"`
	// The policy's current status:
	// * `activated` - Activated.
	// * `deactivated` - Deactivated.
	Status OptString `json:"status"`
}

// GetID returns the value of ID.
func (s *UpdateGroupSettingsReq0ChatChatEtiquetteToolPoliciesItem) GetID() OptString {
	return s.ID
}

// GetStatus returns the value of Status.
func (s *UpdateGroupSettingsReq0ChatChatEtiquetteToolPoliciesItem) GetStatus() OptString {
	return s.Status
}

// SetID sets the value of ID.
func (s *UpdateGroupSettingsReq0ChatChatEtiquetteToolPoliciesItem) SetID(val OptString) {
	s.ID = val
}

// SetStatus sets the value of Status.
func (s *UpdateGroupSettingsReq0ChatChatEtiquetteToolPoliciesItem) SetStatus(val OptString) {
	s.Status = val
}

// Allow users to search GIF images from GIPHY when they compose messages. See GIPHY's website for
// more information about content ratings.
type UpdateGroupSettingsReq0ChatSearchAndSendAnimatedGIFImages struct {
	// Whether to allow users to search GIF images from GIPHY when they compose messages.
	Enable OptBool `json:"enable"`
}

// GetEnable returns the value of Enable.
func (s *UpdateGroupSettingsReq0ChatSearchAndSendAnimatedGIFImages) GetEnable() OptBool {
	return s.Enable
}

// SetEnable sets the value of Enable.
func (s *UpdateGroupSettingsReq0ChatSearchAndSendAnimatedGIFImages) SetEnable(val OptBool) {
	s.Enable = val
}

// Send data to third-party archiving service.
type UpdateGroupSettingsReq0ChatSendDataToThirdPartyArchivingService struct {
	// Allow users to send data to third-party archiving service.
	Enable OptBool `json:"enable"`
}

// GetEnable returns the value of Enable.
func (s *UpdateGroupSettingsReq0ChatSendDataToThirdPartyArchivingService) GetEnable() OptBool {
	return s.Enable
}

// SetEnable sets the value of Enable.
func (s *UpdateGroupSettingsReq0ChatSendDataToThirdPartyArchivingService) SetEnable(val OptBool) {
	s.Enable = val
}

// Set retention period for messages and files in Zoom's cloud.
type UpdateGroupSettingsReq0ChatSetRetentionPeriodInCloud struct {
	// By default, messages and files are stored in Zoom's cloud. Enable this setting to specify when
	// they are deleted. When retention is disabled, messages sent by offline users can be received
	// within 7 days before they are deleted.
	Enable OptBool `json:"enable"`
	// Delete direct messages and group conversations after retention period. 'y' - year, 'm' - month,
	// 'd' - day.
	RetentionPeriodOfDirectMessagesAndGroupConversation OptString `json:"retention_period_of_direct_messages_and_group_conversation"`
	// Delete data in channels after retention period. 'y' - year, 'm' - month, 'd' - day.
	RetentionPeriodOfChannels OptString `json:"retention_period_of_channels"`
}

// GetEnable returns the value of Enable.
func (s *UpdateGroupSettingsReq0ChatSetRetentionPeriodInCloud) GetEnable() OptBool {
	return s.Enable
}

// GetRetentionPeriodOfDirectMessagesAndGroupConversation returns the value of RetentionPeriodOfDirectMessagesAndGroupConversation.
func (s *UpdateGroupSettingsReq0ChatSetRetentionPeriodInCloud) GetRetentionPeriodOfDirectMessagesAndGroupConversation() OptString {
	return s.RetentionPeriodOfDirectMessagesAndGroupConversation
}

// GetRetentionPeriodOfChannels returns the value of RetentionPeriodOfChannels.
func (s *UpdateGroupSettingsReq0ChatSetRetentionPeriodInCloud) GetRetentionPeriodOfChannels() OptString {
	return s.RetentionPeriodOfChannels
}

// SetEnable sets the value of Enable.
func (s *UpdateGroupSettingsReq0ChatSetRetentionPeriodInCloud) SetEnable(val OptBool) {
	s.Enable = val
}

// SetRetentionPeriodOfDirectMessagesAndGroupConversation sets the value of RetentionPeriodOfDirectMessagesAndGroupConversation.
func (s *UpdateGroupSettingsReq0ChatSetRetentionPeriodInCloud) SetRetentionPeriodOfDirectMessagesAndGroupConversation(val OptString) {
	s.RetentionPeriodOfDirectMessagesAndGroupConversation = val
}

// SetRetentionPeriodOfChannels sets the value of RetentionPeriodOfChannels.
func (s *UpdateGroupSettingsReq0ChatSetRetentionPeriodInCloud) SetRetentionPeriodOfChannels(val OptString) {
	s.RetentionPeriodOfChannels = val
}

// Store messages on local devices, excluding personal channel messages.
type UpdateGroupSettingsReq0ChatSetRetentionPeriodInLocal struct {
	// Specify how long your messages are saved on local devices. If this setting is disabled, messages
	// are never deleted locally.
	Enable OptBool `json:"enable"`
	// Delete direct messages and group conversations after retention period. 'y' - year, 'm' - month,
	// 'd' - day.
	RetentionPeriodOfDirectMessagesAndGroupConversation OptString `json:"retention_period_of_direct_messages_and_group_conversation"`
	// Delete data in channels after retention period. 'y' - year, 'm' - month, 'd' - day.
	RetentionPeriodOfChannels OptString `json:"retention_period_of_channels"`
}

// GetEnable returns the value of Enable.
func (s *UpdateGroupSettingsReq0ChatSetRetentionPeriodInLocal) GetEnable() OptBool {
	return s.Enable
}

// GetRetentionPeriodOfDirectMessagesAndGroupConversation returns the value of RetentionPeriodOfDirectMessagesAndGroupConversation.
func (s *UpdateGroupSettingsReq0ChatSetRetentionPeriodInLocal) GetRetentionPeriodOfDirectMessagesAndGroupConversation() OptString {
	return s.RetentionPeriodOfDirectMessagesAndGroupConversation
}

// GetRetentionPeriodOfChannels returns the value of RetentionPeriodOfChannels.
func (s *UpdateGroupSettingsReq0ChatSetRetentionPeriodInLocal) GetRetentionPeriodOfChannels() OptString {
	return s.RetentionPeriodOfChannels
}

// SetEnable sets the value of Enable.
func (s *UpdateGroupSettingsReq0ChatSetRetentionPeriodInLocal) SetEnable(val OptBool) {
	s.Enable = val
}

// SetRetentionPeriodOfDirectMessagesAndGroupConversation sets the value of RetentionPeriodOfDirectMessagesAndGroupConversation.
func (s *UpdateGroupSettingsReq0ChatSetRetentionPeriodInLocal) SetRetentionPeriodOfDirectMessagesAndGroupConversation(val OptString) {
	s.RetentionPeriodOfDirectMessagesAndGroupConversation = val
}

// SetRetentionPeriodOfChannels sets the value of RetentionPeriodOfChannels.
func (s *UpdateGroupSettingsReq0ChatSetRetentionPeriodInLocal) SetRetentionPeriodOfChannels(val OptString) {
	s.RetentionPeriodOfChannels = val
}

// Users can share files in chats and channels.
type UpdateGroupSettingsReq0ChatShareFiles struct {
	// Allow users of this account to send and receive files in chats and channels. When disabled, users
	// can still take and share screenshots.
	Enable OptBool `json:"enable"`
	// Allow users of this account to send and receive files in chats and channels. When disabled, users
	// can still take and share screenshots.
	ShareOption OptString `json:"share_option"`
}

// GetEnable returns the value of Enable.
func (s *UpdateGroupSettingsReq0ChatShareFiles) GetEnable() OptBool {
	return s.Enable
}

// GetShareOption returns the value of ShareOption.
func (s *UpdateGroupSettingsReq0ChatShareFiles) GetShareOption() OptString {
	return s.ShareOption
}

// SetEnable sets the value of Enable.
func (s *UpdateGroupSettingsReq0ChatShareFiles) SetEnable(val OptBool) {
	s.Enable = val
}

// SetShareOption sets the value of ShareOption.
func (s *UpdateGroupSettingsReq0ChatShareFiles) SetShareOption(val OptString) {
	s.ShareOption = val
}

type UpdateGroupSettingsReq0EmailNotification struct {
	// Notify the alternative host who is set or removed.
	AlternativeHostReminder OptBool `json:"alternative_host_reminder"`
	// Notify host and participants when the meeting is cancelled.
	CancelMeetingReminder OptBool `json:"cancel_meeting_reminder"`
	// Whether to notify the host when a cloud recording is available.
	CloudRecordingAvailableReminder OptBool `json:"cloud_recording_available_reminder"`
	// Notify host when participants join the meeting before them.
	JbhReminder OptBool `json:"jbh_reminder"`
	// Whether to notify any alternative hosts when a cloud recording is available.
	RecordingAvailableReminderAlternativeHosts OptBool `json:"recording_available_reminder_alternative_hosts"`
	// Whether to notify the person who scheduled the meeting or webinar for the host when a cloud
	// recording is available.
	RecordingAvailableReminderSchedulers OptBool `json:"recording_available_reminder_schedulers"`
	// Notify the host there is a meeting is scheduled, rescheduled, or cancelled.
	ScheduleForReminder OptBool `json:"schedule_for_reminder"`
}

// GetAlternativeHostReminder returns the value of AlternativeHostReminder.
func (s *UpdateGroupSettingsReq0EmailNotification) GetAlternativeHostReminder() OptBool {
	return s.AlternativeHostReminder
}

// GetCancelMeetingReminder returns the value of CancelMeetingReminder.
func (s *UpdateGroupSettingsReq0EmailNotification) GetCancelMeetingReminder() OptBool {
	return s.CancelMeetingReminder
}

// GetCloudRecordingAvailableReminder returns the value of CloudRecordingAvailableReminder.
func (s *UpdateGroupSettingsReq0EmailNotification) GetCloudRecordingAvailableReminder() OptBool {
	return s.CloudRecordingAvailableReminder
}

// GetJbhReminder returns the value of JbhReminder.
func (s *UpdateGroupSettingsReq0EmailNotification) GetJbhReminder() OptBool {
	return s.JbhReminder
}

// GetRecordingAvailableReminderAlternativeHosts returns the value of RecordingAvailableReminderAlternativeHosts.
func (s *UpdateGroupSettingsReq0EmailNotification) GetRecordingAvailableReminderAlternativeHosts() OptBool {
	return s.RecordingAvailableReminderAlternativeHosts
}

// GetRecordingAvailableReminderSchedulers returns the value of RecordingAvailableReminderSchedulers.
func (s *UpdateGroupSettingsReq0EmailNotification) GetRecordingAvailableReminderSchedulers() OptBool {
	return s.RecordingAvailableReminderSchedulers
}

// GetScheduleForReminder returns the value of ScheduleForReminder.
func (s *UpdateGroupSettingsReq0EmailNotification) GetScheduleForReminder() OptBool {
	return s.ScheduleForReminder
}

// SetAlternativeHostReminder sets the value of AlternativeHostReminder.
func (s *UpdateGroupSettingsReq0EmailNotification) SetAlternativeHostReminder(val OptBool) {
	s.AlternativeHostReminder = val
}

// SetCancelMeetingReminder sets the value of CancelMeetingReminder.
func (s *UpdateGroupSettingsReq0EmailNotification) SetCancelMeetingReminder(val OptBool) {
	s.CancelMeetingReminder = val
}

// SetCloudRecordingAvailableReminder sets the value of CloudRecordingAvailableReminder.
func (s *UpdateGroupSettingsReq0EmailNotification) SetCloudRecordingAvailableReminder(val OptBool) {
	s.CloudRecordingAvailableReminder = val
}

// SetJbhReminder sets the value of JbhReminder.
func (s *UpdateGroupSettingsReq0EmailNotification) SetJbhReminder(val OptBool) {
	s.JbhReminder = val
}

// SetRecordingAvailableReminderAlternativeHosts sets the value of RecordingAvailableReminderAlternativeHosts.
func (s *UpdateGroupSettingsReq0EmailNotification) SetRecordingAvailableReminderAlternativeHosts(val OptBool) {
	s.RecordingAvailableReminderAlternativeHosts = val
}

// SetRecordingAvailableReminderSchedulers sets the value of RecordingAvailableReminderSchedulers.
func (s *UpdateGroupSettingsReq0EmailNotification) SetRecordingAvailableReminderSchedulers(val OptBool) {
	s.RecordingAvailableReminderSchedulers = val
}

// SetScheduleForReminder sets the value of ScheduleForReminder.
func (s *UpdateGroupSettingsReq0EmailNotification) SetScheduleForReminder(val OptBool) {
	s.ScheduleForReminder = val
}

type UpdateGroupSettingsReq0InMeeting struct {
	// Allow participants who belong to your account to see that a guest (someone who does not belong to
	// your account) is participating in the meeting/webinar.
	AlertGuestJoin OptBool `json:"alert_guest_join"`
	// If the value of this field is set to `true`,  allow users to delete messages in the in-meeting
	// chat.
	AllowUsersToDeleteMessagesInMeetingChat OptBool `json:"allow_users_to_delete_messages_in_meeting_chat"`
	// Whether livestreaming is enabled.
	AllowLiveStreaming OptBool `json:"allow_live_streaming"`
	// Whether to allow participants to only chat with certain groups.
	// * `1` - The participant cannot use chat.
	// * `2` - Host and co-hosts only.
	// * `3` - The participant can chat with other participants publicly.
	// * `4` - The participant can chat with other participants publicly and privately.
	// **Note:** This setting is only available with client versions 5.7.3 and above.
	AllowParticipantsChatWith OptInt `json:"allow_participants_chat_with"`
	// Show Zoom windows during screen share.
	AllowShowZoomWindows OptBool `json:"allow_show_zoom_windows"`
	// Whether to allow participants to save meeting chats.
	// * `1` - Participants cannot save meeting chats.
	// * `2` - Participants can only save host and co-host meeting chats.
	// * `3` - Participants can save all meeting chats.
	AllowUsersSaveChats OptInt `json:"allow_users_save_chats"`
	// Allow participants to use annotation tools to add information to shared screens.
	Annotation OptBool `json:"annotation"`
	// Allow host to put attendee on hold.
	// **This field has been deprecated and is no longer supported.**.
	AttendeeOnHold OptBool `json:"attendee_on_hold"`
	// Enable users to see and add contacts to 'auto-answer group' in the contact list on chat. Any call
	// from members of this group will be automatically answered.
	AutoAnswer OptBool `json:"auto_answer"`
	// Automatically save all in-meeting chats.
	AutoSavingChat OptBool `json:"auto_saving_chat"`
	// Allow host to split meeting participants into separate, smaller rooms.
	BreakoutRoom OptBool `json:"breakout_room"`
	// Whether the host can assign participants to breakout rooms when scheduling. This feature is
	// **only** available in version 4.5.0 or higher.
	BreakoutRoomSchedule OptBool `json:"breakout_room_schedule"`
	// Allow meeting participants to send chat message visible to all participants.
	Chat OptBool `json:"chat"`
	// Allow participants to ask questions for the host and participants to answer.
	MeetingQuestionAnswer OptBool `json:"meeting_question_answer"`
	// Allow host to type closed captions or assign a participant/third party device to add closed
	// captions.
	ClosedCaption OptBool `json:"closed_caption"`
	// Information about the group's closed captioning settings.
	ClosedCaptioning OptUpdateGroupSettingsReq0InMeetingClosedCaptioning `json:"closed_captioning"`
	// Allow the host to add co-hosts. Co-hosts have the same in-meeting controls as the host.
	CoHost OptBool `json:"co_host"`
	// If set to `true`, you can [select data center regions](https://support.zoom.
	// us/hc/en-us/articles/360042411451-Selecting-data-center-regions-for-hosted-meetings-and-webinars)
	// to be used by this group for hosting their real-time meeting and webinar traffic. These regions
	// can be provided in the `data_center_regions` field. If set to `false`, the regions cannot be
	// customized and the default regions will be used.
	CustomDataCenterRegions OptBool `json:"custom_data_center_regions"`
	// Whether custom livestreaming is enabled.
	CustomLiveStreamingService OptBool `json:"custom_live_streaming_service"`
	// The specific instructions to allow your account's meeting hosts to configure a custom livestream.
	CustomServiceInstructions OptString `json:"custom_service_instructions"`
	// If the value of `custom_data_center_regions` is `true`, a comma-separated list of these [data
	// center regions](https://support.zoom.
	// us/hc/en-us/articles/360059254691-Datacenter-abbreviation-list) to opt in to.
	// * `AU` - Australia.
	// * `LA` - Latin America.
	// * `CA` - Canada.
	// * `CN` - China.
	// * `DE` - Germany.
	// * `HK` - Hong Kong SAR.
	// * `IN` - India.
	// * `IE` - Ireland.
	// * `TY` - Japan.
	// * `MX` - Mexico.
	// * `NL` - Netherlands.
	// * `SG` - Singapore.
	// * `US` - United States.
	DataCenterRegions []string `json:"data_center_regions"`
	// Whether to enable the **Disable desktop screen sharing for meetings you host** setting.
	DisableScreenSharingForHostMeetings OptBool `json:"disable_screen_sharing_for_host_meetings"`
	// Whether to enable the **Disable screen sharing when guests are in the meeting** setting.
	DisableScreenSharingForInMeetingGuests OptBool `json:"disable_screen_sharing_for_in_meeting_guests"`
	// Require that all meetings are encrypted using AES.
	E2eEncryption OptBool `json:"e2e_encryption"`
	// Play sound when participants join or leave.
	EntryExitChime OptString `json:"entry_exit_chime"`
	// Allow another user to take control of the camera during a meeting.
	FarEndCameraControl OptBool `json:"far_end_camera_control"`
	// Enable users to provide feedback to Zoom at the end of the meeting.
	Feedback OptBool `json:"feedback"`
	// Whether [in-meeting file transfer](https://support.zoom.
	// us/hc/en-us/articles/209605493-In-meeting-file-transfer) setting has been enabled for the users in
	// the group or not.
	FileTransfer OptBool `json:"file_transfer"`
	// Enable higher quality video for host and participants in Meeting. This will require more bandwidth.
	GroupHd OptBool `json:"group_hd"`
	// Enable higher quality video for host and participants in Webinar. This will require more bandwidth.
	WebinarGroupHd OptBool `json:"webinar_group_hd"`
	// Whether to allow participants to join a meeting directly from their desktop browser. Note that the
	// meeting experience from the desktop browser is limited.
	JoinFromDesktop OptBool `json:"join_from_desktop"`
	// Whether to allow participants to join a meeting directly from their mobile browser. Note that the
	// meeting experience from the mobile browser is limited.
	JoinFromMobile OptBool `json:"join_from_mobile"`
	// Information about the [Translate captions](https://support.zoom.
	// us/hc/en-us/articles/8158738379917-Managing-automated-captions-) settings in meetings.
	AutoGeneratedTranslation OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslation `json:"auto_generated_translation"`
	// Information about the [language interpretation](https://support.zoom.
	// us/hc/en-us/articles/360034919791-Using-Language-Interpretation-in-your-meeting-or-webinar)
	// settings.
	LanguageInterpretation OptUpdateGroupSettingsReq0InMeetingLanguageInterpretation `json:"language_interpretation"`
	// Allow hosts to assign participants as sign language interpreters who can interpret one language
	// into sign language in real-time. Hosts can assign interpreters when scheduling, or during the
	// meeting itself. This feature is only available with version 5.11.3 or later.
	SignLanguageInterpretation OptUpdateGroupSettingsReq0InMeetingSignLanguageInterpretation `json:"sign_language_interpretation"`
	// Whether Facebook livestreaming is enabled.
	LiveStreamingFacebook OptBool `json:"live_streaming_facebook"`
	// Whether YouTube livestreaming is enabled.
	LiveStreamingYoutube OptBool                                             `json:"live_streaming_youtube"`
	ManualCaptioning     OptUpdateGroupSettingsReq0InMeetingManualCaptioning `json:"manual_captioning"`
	// Whether meeting participants can [communicate using the emoji reactions](https://support.zoom.
	// us/hc/en-us/articles/115001286183-Nonverbal-feedback-and-meeting-reactions) located in the
	// **Reactions** menu in the meeting toolbar.
	MeetingReactions OptBool `json:"meeting_reactions"`
	// Choose from these meeting reaction options.
	// * `all` - All emojis: Allow meeting participants to use any emoji available in Zoom chat as a
	// reaction in a meeting.
	// * `selected` - Selected emojis: Allow meeting participants to use the 6 standard meeting reaction
	// emojis: Clapping Hands, Thumbs Up, Heart, Tears of Joy, Open Mouth, Party Popper (Tada,
	// Celebration).
	MeetingReactionsEmojis OptString `json:"meeting_reactions_emojis"`
	// Whether to allow hosts and panelists to use audible clap.
	AllowHostPanelistsToUseAudibleClap OptBool `json:"allow_host_panelists_to_use_audible_clap"`
	// Set this field to `true` to use [webinar reactions](https://support.zoom.
	// us/hc/en-us/articles/4803536268429).
	WebinarReactions OptBool `json:"webinar_reactions"`
	// Whether to allow the host to present a survey to participants once a meeting has ended. This
	// feature is only available in version 5.7.3 or higher.
	MeetingSurvey OptBool `json:"meeting_survey"`
	// Allow participants in a meeting can provide nonverbal feedback and express opinions by clicking on
	// icons in the Participants panel.
	NonVerbalFeedback OptBool `json:"non_verbal_feedback"`
	// Show the list of H.323/SIP devices only to the host.
	OnlyHostViewDeviceList OptBool `json:"only_host_view_device_list"`
	// Allow users to select original sound during a meeting.
	OriginalAudio OptBool `json:"original_audio"`
	// Add 'Polls' to the meeting controls. This allows the host to survey the attendees.
	Polling OptBool `json:"polling"`
	// Display end-of-meeting experience feedback survey.
	PostMeetingFeedback OptBool `json:"post_meeting_feedback"`
	// Allow meeting participants to send a private 1:1 message to another participant.
	PrivateChat OptBool `json:"private_chat"`
	// When each participant joins by telephone, allow the option to record and play their own voice as
	// entry and exit chimes.
	RecordPlayOwnVoice OptBool `json:"record_play_own_voice"`
	// During screen sharing, allow the person who is sharing to let others control the shared content.
	RemoteControl OptBool `json:"remote_control"`
	// Allow meeting host to provide 1:1 remote support to another participant.
	RemoteSupport OptBool `json:"remote_support"`
	// Indicate whether the [**Request permission to unmute participants**](https://support.zoom.
	// us/hc/en-us/articles/203435537-Muting-and-unmuting-participants-in-a-meeting#h_01EGK4XFWS1SJGZ71MYGKF7260) option should be enabled for the group or not.
	RequestPermissionToUnmuteParticipants OptBool `json:"request_permission_to_unmute_participants"`
	// Allow host and participants to share their screen or content during meetings.
	ScreenSharing OptBool `json:"screen_sharing"`
	// Allow users to invite participants by email only by default.
	SendingDefaultEmailInvites OptBool `json:"sending_default_email_invites"`
	// Whether to allow participants to join a meeting directly from their browser and bypass the Zoom
	// application download process. This is useful for participants who cannot download, install, or run
	// applications. Note that the meeting experience from the browser is limited.
	ShowAJoinFromYourBrowserLink OptBool `json:"show_a_join_from_your_browser_link"`
	// Allow participants to join a meeting directly from their browser.
	ShowBrowserJoinLink OptBool `json:"show_browser_join_link"`
	// Show the list of H.323/SIP devices.
	ShowDeviceList OptBool `json:"show_device_list"`
	// Always show meeting controls during a meeting.
	ShowMeetingControlToolbar OptBool `json:"show_meeting_control_toolbar"`
	// Whether the person sharing during a presentation can allow others to control the slide
	// presentation. This feature is only available in version 5.8.3 or higher.
	SlideControl OptBool `json:"slide_control"`
	// Allow users to select stereo audio during a meeting.
	StereoAudio OptBool `json:"stereo_audio"`
	// Allow HTML formatting instead of plain text for meeting invitations scheduled with the Outlook
	// plugin.
	UseHTMLFormatEmail OptBool `json:"use_html_format_email"`
	// Enable virtual backgrounds.
	VirtualBackground OptBool `json:"virtual_background"`
	// Attendees cannot join a meeting until a host admits them individually from the waiting room.
	WaitingRoom          OptBool                                                 `json:"waiting_room"`
	WebinarChat          OptUpdateGroupSettingsReq0InMeetingWebinarChat          `json:"webinar_chat"`
	WebinarLiveStreaming OptUpdateGroupSettingsReq0InMeetingWebinarLiveStreaming `json:"webinar_live_streaming"`
	// Information about the account's meeting polling settings.
	MeetingPolling OptUpdateGroupSettingsReq0InMeetingMeetingPolling `json:"meeting_polling"`
	WebinarPolling OptUpdateGroupSettingsReq0InMeetingWebinarPolling `json:"webinar_polling"`
	// Whether attendees can ask the host and panelists questions in the webinar.
	WebinarQuestionAnswer OptBool `json:"webinar_question_answer"`
	// Whether to allow the host to present surveys to attendees once a webinar has ended.
	WebinarSurvey OptBool `json:"webinar_survey"`
	// Allow participants to share a whiteboard that includes annotation tools.
	Whiteboard OptBool `json:"whiteboard"`
	// Indicates who can share their screen or content during meetings. The value can be one of the
	// following:
	// `host`: Only host can share the screen.
	// `all`: Both hosts and attendees can share their screen during meetings. For Webinar, the hosts and
	// panelists can start screen sharing, but not the attendees.
	WhoCanShareScreen OptString `json:"who_can_share_screen"`
	// Indicates who is allowed to start sharing screen when someone else in the meeting is sharing their
	// screen. The value can be one of the following:
	// `host`: Only a host can share the screen when someone else is sharing.
	// `all`: Anyone in the meeting is allowed to start sharing their screen when someone else is sharing.
	//  For Webinar, the hosts and panelists can start screen sharing, but not the attendees.
	WhoCanShareScreenWhenSomeoneIsSharing OptString `json:"who_can_share_screen_when_someone_is_sharing"`
	// Indicates how many participants can share at the same time. The value can be one of the following:
	// `one`: Only one participant can share at a time
	// .
	// `multiple`: Multiple participants can share simultaneously (dual monitors recommended)
	// . For Webinar, the hosts and panelists can start screen sharing, but not the attendees.
	ParticipantsShareSimultaneously OptString `json:"participants_share_simultaneously"`
	// Whether Workplace by Facebook is enabled.
	WorkplaceByFacebook OptBool `json:"workplace_by_facebook"`
}

// GetAlertGuestJoin returns the value of AlertGuestJoin.
func (s *UpdateGroupSettingsReq0InMeeting) GetAlertGuestJoin() OptBool {
	return s.AlertGuestJoin
}

// GetAllowUsersToDeleteMessagesInMeetingChat returns the value of AllowUsersToDeleteMessagesInMeetingChat.
func (s *UpdateGroupSettingsReq0InMeeting) GetAllowUsersToDeleteMessagesInMeetingChat() OptBool {
	return s.AllowUsersToDeleteMessagesInMeetingChat
}

// GetAllowLiveStreaming returns the value of AllowLiveStreaming.
func (s *UpdateGroupSettingsReq0InMeeting) GetAllowLiveStreaming() OptBool {
	return s.AllowLiveStreaming
}

// GetAllowParticipantsChatWith returns the value of AllowParticipantsChatWith.
func (s *UpdateGroupSettingsReq0InMeeting) GetAllowParticipantsChatWith() OptInt {
	return s.AllowParticipantsChatWith
}

// GetAllowShowZoomWindows returns the value of AllowShowZoomWindows.
func (s *UpdateGroupSettingsReq0InMeeting) GetAllowShowZoomWindows() OptBool {
	return s.AllowShowZoomWindows
}

// GetAllowUsersSaveChats returns the value of AllowUsersSaveChats.
func (s *UpdateGroupSettingsReq0InMeeting) GetAllowUsersSaveChats() OptInt {
	return s.AllowUsersSaveChats
}

// GetAnnotation returns the value of Annotation.
func (s *UpdateGroupSettingsReq0InMeeting) GetAnnotation() OptBool {
	return s.Annotation
}

// GetAttendeeOnHold returns the value of AttendeeOnHold.
func (s *UpdateGroupSettingsReq0InMeeting) GetAttendeeOnHold() OptBool {
	return s.AttendeeOnHold
}

// GetAutoAnswer returns the value of AutoAnswer.
func (s *UpdateGroupSettingsReq0InMeeting) GetAutoAnswer() OptBool {
	return s.AutoAnswer
}

// GetAutoSavingChat returns the value of AutoSavingChat.
func (s *UpdateGroupSettingsReq0InMeeting) GetAutoSavingChat() OptBool {
	return s.AutoSavingChat
}

// GetBreakoutRoom returns the value of BreakoutRoom.
func (s *UpdateGroupSettingsReq0InMeeting) GetBreakoutRoom() OptBool {
	return s.BreakoutRoom
}

// GetBreakoutRoomSchedule returns the value of BreakoutRoomSchedule.
func (s *UpdateGroupSettingsReq0InMeeting) GetBreakoutRoomSchedule() OptBool {
	return s.BreakoutRoomSchedule
}

// GetChat returns the value of Chat.
func (s *UpdateGroupSettingsReq0InMeeting) GetChat() OptBool {
	return s.Chat
}

// GetMeetingQuestionAnswer returns the value of MeetingQuestionAnswer.
func (s *UpdateGroupSettingsReq0InMeeting) GetMeetingQuestionAnswer() OptBool {
	return s.MeetingQuestionAnswer
}

// GetClosedCaption returns the value of ClosedCaption.
func (s *UpdateGroupSettingsReq0InMeeting) GetClosedCaption() OptBool {
	return s.ClosedCaption
}

// GetClosedCaptioning returns the value of ClosedCaptioning.
func (s *UpdateGroupSettingsReq0InMeeting) GetClosedCaptioning() OptUpdateGroupSettingsReq0InMeetingClosedCaptioning {
	return s.ClosedCaptioning
}

// GetCoHost returns the value of CoHost.
func (s *UpdateGroupSettingsReq0InMeeting) GetCoHost() OptBool {
	return s.CoHost
}

// GetCustomDataCenterRegions returns the value of CustomDataCenterRegions.
func (s *UpdateGroupSettingsReq0InMeeting) GetCustomDataCenterRegions() OptBool {
	return s.CustomDataCenterRegions
}

// GetCustomLiveStreamingService returns the value of CustomLiveStreamingService.
func (s *UpdateGroupSettingsReq0InMeeting) GetCustomLiveStreamingService() OptBool {
	return s.CustomLiveStreamingService
}

// GetCustomServiceInstructions returns the value of CustomServiceInstructions.
func (s *UpdateGroupSettingsReq0InMeeting) GetCustomServiceInstructions() OptString {
	return s.CustomServiceInstructions
}

// GetDataCenterRegions returns the value of DataCenterRegions.
func (s *UpdateGroupSettingsReq0InMeeting) GetDataCenterRegions() []string {
	return s.DataCenterRegions
}

// GetDisableScreenSharingForHostMeetings returns the value of DisableScreenSharingForHostMeetings.
func (s *UpdateGroupSettingsReq0InMeeting) GetDisableScreenSharingForHostMeetings() OptBool {
	return s.DisableScreenSharingForHostMeetings
}

// GetDisableScreenSharingForInMeetingGuests returns the value of DisableScreenSharingForInMeetingGuests.
func (s *UpdateGroupSettingsReq0InMeeting) GetDisableScreenSharingForInMeetingGuests() OptBool {
	return s.DisableScreenSharingForInMeetingGuests
}

// GetE2eEncryption returns the value of E2eEncryption.
func (s *UpdateGroupSettingsReq0InMeeting) GetE2eEncryption() OptBool {
	return s.E2eEncryption
}

// GetEntryExitChime returns the value of EntryExitChime.
func (s *UpdateGroupSettingsReq0InMeeting) GetEntryExitChime() OptString {
	return s.EntryExitChime
}

// GetFarEndCameraControl returns the value of FarEndCameraControl.
func (s *UpdateGroupSettingsReq0InMeeting) GetFarEndCameraControl() OptBool {
	return s.FarEndCameraControl
}

// GetFeedback returns the value of Feedback.
func (s *UpdateGroupSettingsReq0InMeeting) GetFeedback() OptBool {
	return s.Feedback
}

// GetFileTransfer returns the value of FileTransfer.
func (s *UpdateGroupSettingsReq0InMeeting) GetFileTransfer() OptBool {
	return s.FileTransfer
}

// GetGroupHd returns the value of GroupHd.
func (s *UpdateGroupSettingsReq0InMeeting) GetGroupHd() OptBool {
	return s.GroupHd
}

// GetWebinarGroupHd returns the value of WebinarGroupHd.
func (s *UpdateGroupSettingsReq0InMeeting) GetWebinarGroupHd() OptBool {
	return s.WebinarGroupHd
}

// GetJoinFromDesktop returns the value of JoinFromDesktop.
func (s *UpdateGroupSettingsReq0InMeeting) GetJoinFromDesktop() OptBool {
	return s.JoinFromDesktop
}

// GetJoinFromMobile returns the value of JoinFromMobile.
func (s *UpdateGroupSettingsReq0InMeeting) GetJoinFromMobile() OptBool {
	return s.JoinFromMobile
}

// GetAutoGeneratedTranslation returns the value of AutoGeneratedTranslation.
func (s *UpdateGroupSettingsReq0InMeeting) GetAutoGeneratedTranslation() OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslation {
	return s.AutoGeneratedTranslation
}

// GetLanguageInterpretation returns the value of LanguageInterpretation.
func (s *UpdateGroupSettingsReq0InMeeting) GetLanguageInterpretation() OptUpdateGroupSettingsReq0InMeetingLanguageInterpretation {
	return s.LanguageInterpretation
}

// GetSignLanguageInterpretation returns the value of SignLanguageInterpretation.
func (s *UpdateGroupSettingsReq0InMeeting) GetSignLanguageInterpretation() OptUpdateGroupSettingsReq0InMeetingSignLanguageInterpretation {
	return s.SignLanguageInterpretation
}

// GetLiveStreamingFacebook returns the value of LiveStreamingFacebook.
func (s *UpdateGroupSettingsReq0InMeeting) GetLiveStreamingFacebook() OptBool {
	return s.LiveStreamingFacebook
}

// GetLiveStreamingYoutube returns the value of LiveStreamingYoutube.
func (s *UpdateGroupSettingsReq0InMeeting) GetLiveStreamingYoutube() OptBool {
	return s.LiveStreamingYoutube
}

// GetManualCaptioning returns the value of ManualCaptioning.
func (s *UpdateGroupSettingsReq0InMeeting) GetManualCaptioning() OptUpdateGroupSettingsReq0InMeetingManualCaptioning {
	return s.ManualCaptioning
}

// GetMeetingReactions returns the value of MeetingReactions.
func (s *UpdateGroupSettingsReq0InMeeting) GetMeetingReactions() OptBool {
	return s.MeetingReactions
}

// GetMeetingReactionsEmojis returns the value of MeetingReactionsEmojis.
func (s *UpdateGroupSettingsReq0InMeeting) GetMeetingReactionsEmojis() OptString {
	return s.MeetingReactionsEmojis
}

// GetAllowHostPanelistsToUseAudibleClap returns the value of AllowHostPanelistsToUseAudibleClap.
func (s *UpdateGroupSettingsReq0InMeeting) GetAllowHostPanelistsToUseAudibleClap() OptBool {
	return s.AllowHostPanelistsToUseAudibleClap
}

// GetWebinarReactions returns the value of WebinarReactions.
func (s *UpdateGroupSettingsReq0InMeeting) GetWebinarReactions() OptBool {
	return s.WebinarReactions
}

// GetMeetingSurvey returns the value of MeetingSurvey.
func (s *UpdateGroupSettingsReq0InMeeting) GetMeetingSurvey() OptBool {
	return s.MeetingSurvey
}

// GetNonVerbalFeedback returns the value of NonVerbalFeedback.
func (s *UpdateGroupSettingsReq0InMeeting) GetNonVerbalFeedback() OptBool {
	return s.NonVerbalFeedback
}

// GetOnlyHostViewDeviceList returns the value of OnlyHostViewDeviceList.
func (s *UpdateGroupSettingsReq0InMeeting) GetOnlyHostViewDeviceList() OptBool {
	return s.OnlyHostViewDeviceList
}

// GetOriginalAudio returns the value of OriginalAudio.
func (s *UpdateGroupSettingsReq0InMeeting) GetOriginalAudio() OptBool {
	return s.OriginalAudio
}

// GetPolling returns the value of Polling.
func (s *UpdateGroupSettingsReq0InMeeting) GetPolling() OptBool {
	return s.Polling
}

// GetPostMeetingFeedback returns the value of PostMeetingFeedback.
func (s *UpdateGroupSettingsReq0InMeeting) GetPostMeetingFeedback() OptBool {
	return s.PostMeetingFeedback
}

// GetPrivateChat returns the value of PrivateChat.
func (s *UpdateGroupSettingsReq0InMeeting) GetPrivateChat() OptBool {
	return s.PrivateChat
}

// GetRecordPlayOwnVoice returns the value of RecordPlayOwnVoice.
func (s *UpdateGroupSettingsReq0InMeeting) GetRecordPlayOwnVoice() OptBool {
	return s.RecordPlayOwnVoice
}

// GetRemoteControl returns the value of RemoteControl.
func (s *UpdateGroupSettingsReq0InMeeting) GetRemoteControl() OptBool {
	return s.RemoteControl
}

// GetRemoteSupport returns the value of RemoteSupport.
func (s *UpdateGroupSettingsReq0InMeeting) GetRemoteSupport() OptBool {
	return s.RemoteSupport
}

// GetRequestPermissionToUnmuteParticipants returns the value of RequestPermissionToUnmuteParticipants.
func (s *UpdateGroupSettingsReq0InMeeting) GetRequestPermissionToUnmuteParticipants() OptBool {
	return s.RequestPermissionToUnmuteParticipants
}

// GetScreenSharing returns the value of ScreenSharing.
func (s *UpdateGroupSettingsReq0InMeeting) GetScreenSharing() OptBool {
	return s.ScreenSharing
}

// GetSendingDefaultEmailInvites returns the value of SendingDefaultEmailInvites.
func (s *UpdateGroupSettingsReq0InMeeting) GetSendingDefaultEmailInvites() OptBool {
	return s.SendingDefaultEmailInvites
}

// GetShowAJoinFromYourBrowserLink returns the value of ShowAJoinFromYourBrowserLink.
func (s *UpdateGroupSettingsReq0InMeeting) GetShowAJoinFromYourBrowserLink() OptBool {
	return s.ShowAJoinFromYourBrowserLink
}

// GetShowBrowserJoinLink returns the value of ShowBrowserJoinLink.
func (s *UpdateGroupSettingsReq0InMeeting) GetShowBrowserJoinLink() OptBool {
	return s.ShowBrowserJoinLink
}

// GetShowDeviceList returns the value of ShowDeviceList.
func (s *UpdateGroupSettingsReq0InMeeting) GetShowDeviceList() OptBool {
	return s.ShowDeviceList
}

// GetShowMeetingControlToolbar returns the value of ShowMeetingControlToolbar.
func (s *UpdateGroupSettingsReq0InMeeting) GetShowMeetingControlToolbar() OptBool {
	return s.ShowMeetingControlToolbar
}

// GetSlideControl returns the value of SlideControl.
func (s *UpdateGroupSettingsReq0InMeeting) GetSlideControl() OptBool {
	return s.SlideControl
}

// GetStereoAudio returns the value of StereoAudio.
func (s *UpdateGroupSettingsReq0InMeeting) GetStereoAudio() OptBool {
	return s.StereoAudio
}

// GetUseHTMLFormatEmail returns the value of UseHTMLFormatEmail.
func (s *UpdateGroupSettingsReq0InMeeting) GetUseHTMLFormatEmail() OptBool {
	return s.UseHTMLFormatEmail
}

// GetVirtualBackground returns the value of VirtualBackground.
func (s *UpdateGroupSettingsReq0InMeeting) GetVirtualBackground() OptBool {
	return s.VirtualBackground
}

// GetWaitingRoom returns the value of WaitingRoom.
func (s *UpdateGroupSettingsReq0InMeeting) GetWaitingRoom() OptBool {
	return s.WaitingRoom
}

// GetWebinarChat returns the value of WebinarChat.
func (s *UpdateGroupSettingsReq0InMeeting) GetWebinarChat() OptUpdateGroupSettingsReq0InMeetingWebinarChat {
	return s.WebinarChat
}

// GetWebinarLiveStreaming returns the value of WebinarLiveStreaming.
func (s *UpdateGroupSettingsReq0InMeeting) GetWebinarLiveStreaming() OptUpdateGroupSettingsReq0InMeetingWebinarLiveStreaming {
	return s.WebinarLiveStreaming
}

// GetMeetingPolling returns the value of MeetingPolling.
func (s *UpdateGroupSettingsReq0InMeeting) GetMeetingPolling() OptUpdateGroupSettingsReq0InMeetingMeetingPolling {
	return s.MeetingPolling
}

// GetWebinarPolling returns the value of WebinarPolling.
func (s *UpdateGroupSettingsReq0InMeeting) GetWebinarPolling() OptUpdateGroupSettingsReq0InMeetingWebinarPolling {
	return s.WebinarPolling
}

// GetWebinarQuestionAnswer returns the value of WebinarQuestionAnswer.
func (s *UpdateGroupSettingsReq0InMeeting) GetWebinarQuestionAnswer() OptBool {
	return s.WebinarQuestionAnswer
}

// GetWebinarSurvey returns the value of WebinarSurvey.
func (s *UpdateGroupSettingsReq0InMeeting) GetWebinarSurvey() OptBool {
	return s.WebinarSurvey
}

// GetWhiteboard returns the value of Whiteboard.
func (s *UpdateGroupSettingsReq0InMeeting) GetWhiteboard() OptBool {
	return s.Whiteboard
}

// GetWhoCanShareScreen returns the value of WhoCanShareScreen.
func (s *UpdateGroupSettingsReq0InMeeting) GetWhoCanShareScreen() OptString {
	return s.WhoCanShareScreen
}

// GetWhoCanShareScreenWhenSomeoneIsSharing returns the value of WhoCanShareScreenWhenSomeoneIsSharing.
func (s *UpdateGroupSettingsReq0InMeeting) GetWhoCanShareScreenWhenSomeoneIsSharing() OptString {
	return s.WhoCanShareScreenWhenSomeoneIsSharing
}

// GetParticipantsShareSimultaneously returns the value of ParticipantsShareSimultaneously.
func (s *UpdateGroupSettingsReq0InMeeting) GetParticipantsShareSimultaneously() OptString {
	return s.ParticipantsShareSimultaneously
}

// GetWorkplaceByFacebook returns the value of WorkplaceByFacebook.
func (s *UpdateGroupSettingsReq0InMeeting) GetWorkplaceByFacebook() OptBool {
	return s.WorkplaceByFacebook
}

// SetAlertGuestJoin sets the value of AlertGuestJoin.
func (s *UpdateGroupSettingsReq0InMeeting) SetAlertGuestJoin(val OptBool) {
	s.AlertGuestJoin = val
}

// SetAllowUsersToDeleteMessagesInMeetingChat sets the value of AllowUsersToDeleteMessagesInMeetingChat.
func (s *UpdateGroupSettingsReq0InMeeting) SetAllowUsersToDeleteMessagesInMeetingChat(val OptBool) {
	s.AllowUsersToDeleteMessagesInMeetingChat = val
}

// SetAllowLiveStreaming sets the value of AllowLiveStreaming.
func (s *UpdateGroupSettingsReq0InMeeting) SetAllowLiveStreaming(val OptBool) {
	s.AllowLiveStreaming = val
}

// SetAllowParticipantsChatWith sets the value of AllowParticipantsChatWith.
func (s *UpdateGroupSettingsReq0InMeeting) SetAllowParticipantsChatWith(val OptInt) {
	s.AllowParticipantsChatWith = val
}

// SetAllowShowZoomWindows sets the value of AllowShowZoomWindows.
func (s *UpdateGroupSettingsReq0InMeeting) SetAllowShowZoomWindows(val OptBool) {
	s.AllowShowZoomWindows = val
}

// SetAllowUsersSaveChats sets the value of AllowUsersSaveChats.
func (s *UpdateGroupSettingsReq0InMeeting) SetAllowUsersSaveChats(val OptInt) {
	s.AllowUsersSaveChats = val
}

// SetAnnotation sets the value of Annotation.
func (s *UpdateGroupSettingsReq0InMeeting) SetAnnotation(val OptBool) {
	s.Annotation = val
}

// SetAttendeeOnHold sets the value of AttendeeOnHold.
func (s *UpdateGroupSettingsReq0InMeeting) SetAttendeeOnHold(val OptBool) {
	s.AttendeeOnHold = val
}

// SetAutoAnswer sets the value of AutoAnswer.
func (s *UpdateGroupSettingsReq0InMeeting) SetAutoAnswer(val OptBool) {
	s.AutoAnswer = val
}

// SetAutoSavingChat sets the value of AutoSavingChat.
func (s *UpdateGroupSettingsReq0InMeeting) SetAutoSavingChat(val OptBool) {
	s.AutoSavingChat = val
}

// SetBreakoutRoom sets the value of BreakoutRoom.
func (s *UpdateGroupSettingsReq0InMeeting) SetBreakoutRoom(val OptBool) {
	s.BreakoutRoom = val
}

// SetBreakoutRoomSchedule sets the value of BreakoutRoomSchedule.
func (s *UpdateGroupSettingsReq0InMeeting) SetBreakoutRoomSchedule(val OptBool) {
	s.BreakoutRoomSchedule = val
}

// SetChat sets the value of Chat.
func (s *UpdateGroupSettingsReq0InMeeting) SetChat(val OptBool) {
	s.Chat = val
}

// SetMeetingQuestionAnswer sets the value of MeetingQuestionAnswer.
func (s *UpdateGroupSettingsReq0InMeeting) SetMeetingQuestionAnswer(val OptBool) {
	s.MeetingQuestionAnswer = val
}

// SetClosedCaption sets the value of ClosedCaption.
func (s *UpdateGroupSettingsReq0InMeeting) SetClosedCaption(val OptBool) {
	s.ClosedCaption = val
}

// SetClosedCaptioning sets the value of ClosedCaptioning.
func (s *UpdateGroupSettingsReq0InMeeting) SetClosedCaptioning(val OptUpdateGroupSettingsReq0InMeetingClosedCaptioning) {
	s.ClosedCaptioning = val
}

// SetCoHost sets the value of CoHost.
func (s *UpdateGroupSettingsReq0InMeeting) SetCoHost(val OptBool) {
	s.CoHost = val
}

// SetCustomDataCenterRegions sets the value of CustomDataCenterRegions.
func (s *UpdateGroupSettingsReq0InMeeting) SetCustomDataCenterRegions(val OptBool) {
	s.CustomDataCenterRegions = val
}

// SetCustomLiveStreamingService sets the value of CustomLiveStreamingService.
func (s *UpdateGroupSettingsReq0InMeeting) SetCustomLiveStreamingService(val OptBool) {
	s.CustomLiveStreamingService = val
}

// SetCustomServiceInstructions sets the value of CustomServiceInstructions.
func (s *UpdateGroupSettingsReq0InMeeting) SetCustomServiceInstructions(val OptString) {
	s.CustomServiceInstructions = val
}

// SetDataCenterRegions sets the value of DataCenterRegions.
func (s *UpdateGroupSettingsReq0InMeeting) SetDataCenterRegions(val []string) {
	s.DataCenterRegions = val
}

// SetDisableScreenSharingForHostMeetings sets the value of DisableScreenSharingForHostMeetings.
func (s *UpdateGroupSettingsReq0InMeeting) SetDisableScreenSharingForHostMeetings(val OptBool) {
	s.DisableScreenSharingForHostMeetings = val
}

// SetDisableScreenSharingForInMeetingGuests sets the value of DisableScreenSharingForInMeetingGuests.
func (s *UpdateGroupSettingsReq0InMeeting) SetDisableScreenSharingForInMeetingGuests(val OptBool) {
	s.DisableScreenSharingForInMeetingGuests = val
}

// SetE2eEncryption sets the value of E2eEncryption.
func (s *UpdateGroupSettingsReq0InMeeting) SetE2eEncryption(val OptBool) {
	s.E2eEncryption = val
}

// SetEntryExitChime sets the value of EntryExitChime.
func (s *UpdateGroupSettingsReq0InMeeting) SetEntryExitChime(val OptString) {
	s.EntryExitChime = val
}

// SetFarEndCameraControl sets the value of FarEndCameraControl.
func (s *UpdateGroupSettingsReq0InMeeting) SetFarEndCameraControl(val OptBool) {
	s.FarEndCameraControl = val
}

// SetFeedback sets the value of Feedback.
func (s *UpdateGroupSettingsReq0InMeeting) SetFeedback(val OptBool) {
	s.Feedback = val
}

// SetFileTransfer sets the value of FileTransfer.
func (s *UpdateGroupSettingsReq0InMeeting) SetFileTransfer(val OptBool) {
	s.FileTransfer = val
}

// SetGroupHd sets the value of GroupHd.
func (s *UpdateGroupSettingsReq0InMeeting) SetGroupHd(val OptBool) {
	s.GroupHd = val
}

// SetWebinarGroupHd sets the value of WebinarGroupHd.
func (s *UpdateGroupSettingsReq0InMeeting) SetWebinarGroupHd(val OptBool) {
	s.WebinarGroupHd = val
}

// SetJoinFromDesktop sets the value of JoinFromDesktop.
func (s *UpdateGroupSettingsReq0InMeeting) SetJoinFromDesktop(val OptBool) {
	s.JoinFromDesktop = val
}

// SetJoinFromMobile sets the value of JoinFromMobile.
func (s *UpdateGroupSettingsReq0InMeeting) SetJoinFromMobile(val OptBool) {
	s.JoinFromMobile = val
}

// SetAutoGeneratedTranslation sets the value of AutoGeneratedTranslation.
func (s *UpdateGroupSettingsReq0InMeeting) SetAutoGeneratedTranslation(val OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslation) {
	s.AutoGeneratedTranslation = val
}

// SetLanguageInterpretation sets the value of LanguageInterpretation.
func (s *UpdateGroupSettingsReq0InMeeting) SetLanguageInterpretation(val OptUpdateGroupSettingsReq0InMeetingLanguageInterpretation) {
	s.LanguageInterpretation = val
}

// SetSignLanguageInterpretation sets the value of SignLanguageInterpretation.
func (s *UpdateGroupSettingsReq0InMeeting) SetSignLanguageInterpretation(val OptUpdateGroupSettingsReq0InMeetingSignLanguageInterpretation) {
	s.SignLanguageInterpretation = val
}

// SetLiveStreamingFacebook sets the value of LiveStreamingFacebook.
func (s *UpdateGroupSettingsReq0InMeeting) SetLiveStreamingFacebook(val OptBool) {
	s.LiveStreamingFacebook = val
}

// SetLiveStreamingYoutube sets the value of LiveStreamingYoutube.
func (s *UpdateGroupSettingsReq0InMeeting) SetLiveStreamingYoutube(val OptBool) {
	s.LiveStreamingYoutube = val
}

// SetManualCaptioning sets the value of ManualCaptioning.
func (s *UpdateGroupSettingsReq0InMeeting) SetManualCaptioning(val OptUpdateGroupSettingsReq0InMeetingManualCaptioning) {
	s.ManualCaptioning = val
}

// SetMeetingReactions sets the value of MeetingReactions.
func (s *UpdateGroupSettingsReq0InMeeting) SetMeetingReactions(val OptBool) {
	s.MeetingReactions = val
}

// SetMeetingReactionsEmojis sets the value of MeetingReactionsEmojis.
func (s *UpdateGroupSettingsReq0InMeeting) SetMeetingReactionsEmojis(val OptString) {
	s.MeetingReactionsEmojis = val
}

// SetAllowHostPanelistsToUseAudibleClap sets the value of AllowHostPanelistsToUseAudibleClap.
func (s *UpdateGroupSettingsReq0InMeeting) SetAllowHostPanelistsToUseAudibleClap(val OptBool) {
	s.AllowHostPanelistsToUseAudibleClap = val
}

// SetWebinarReactions sets the value of WebinarReactions.
func (s *UpdateGroupSettingsReq0InMeeting) SetWebinarReactions(val OptBool) {
	s.WebinarReactions = val
}

// SetMeetingSurvey sets the value of MeetingSurvey.
func (s *UpdateGroupSettingsReq0InMeeting) SetMeetingSurvey(val OptBool) {
	s.MeetingSurvey = val
}

// SetNonVerbalFeedback sets the value of NonVerbalFeedback.
func (s *UpdateGroupSettingsReq0InMeeting) SetNonVerbalFeedback(val OptBool) {
	s.NonVerbalFeedback = val
}

// SetOnlyHostViewDeviceList sets the value of OnlyHostViewDeviceList.
func (s *UpdateGroupSettingsReq0InMeeting) SetOnlyHostViewDeviceList(val OptBool) {
	s.OnlyHostViewDeviceList = val
}

// SetOriginalAudio sets the value of OriginalAudio.
func (s *UpdateGroupSettingsReq0InMeeting) SetOriginalAudio(val OptBool) {
	s.OriginalAudio = val
}

// SetPolling sets the value of Polling.
func (s *UpdateGroupSettingsReq0InMeeting) SetPolling(val OptBool) {
	s.Polling = val
}

// SetPostMeetingFeedback sets the value of PostMeetingFeedback.
func (s *UpdateGroupSettingsReq0InMeeting) SetPostMeetingFeedback(val OptBool) {
	s.PostMeetingFeedback = val
}

// SetPrivateChat sets the value of PrivateChat.
func (s *UpdateGroupSettingsReq0InMeeting) SetPrivateChat(val OptBool) {
	s.PrivateChat = val
}

// SetRecordPlayOwnVoice sets the value of RecordPlayOwnVoice.
func (s *UpdateGroupSettingsReq0InMeeting) SetRecordPlayOwnVoice(val OptBool) {
	s.RecordPlayOwnVoice = val
}

// SetRemoteControl sets the value of RemoteControl.
func (s *UpdateGroupSettingsReq0InMeeting) SetRemoteControl(val OptBool) {
	s.RemoteControl = val
}

// SetRemoteSupport sets the value of RemoteSupport.
func (s *UpdateGroupSettingsReq0InMeeting) SetRemoteSupport(val OptBool) {
	s.RemoteSupport = val
}

// SetRequestPermissionToUnmuteParticipants sets the value of RequestPermissionToUnmuteParticipants.
func (s *UpdateGroupSettingsReq0InMeeting) SetRequestPermissionToUnmuteParticipants(val OptBool) {
	s.RequestPermissionToUnmuteParticipants = val
}

// SetScreenSharing sets the value of ScreenSharing.
func (s *UpdateGroupSettingsReq0InMeeting) SetScreenSharing(val OptBool) {
	s.ScreenSharing = val
}

// SetSendingDefaultEmailInvites sets the value of SendingDefaultEmailInvites.
func (s *UpdateGroupSettingsReq0InMeeting) SetSendingDefaultEmailInvites(val OptBool) {
	s.SendingDefaultEmailInvites = val
}

// SetShowAJoinFromYourBrowserLink sets the value of ShowAJoinFromYourBrowserLink.
func (s *UpdateGroupSettingsReq0InMeeting) SetShowAJoinFromYourBrowserLink(val OptBool) {
	s.ShowAJoinFromYourBrowserLink = val
}

// SetShowBrowserJoinLink sets the value of ShowBrowserJoinLink.
func (s *UpdateGroupSettingsReq0InMeeting) SetShowBrowserJoinLink(val OptBool) {
	s.ShowBrowserJoinLink = val
}

// SetShowDeviceList sets the value of ShowDeviceList.
func (s *UpdateGroupSettingsReq0InMeeting) SetShowDeviceList(val OptBool) {
	s.ShowDeviceList = val
}

// SetShowMeetingControlToolbar sets the value of ShowMeetingControlToolbar.
func (s *UpdateGroupSettingsReq0InMeeting) SetShowMeetingControlToolbar(val OptBool) {
	s.ShowMeetingControlToolbar = val
}

// SetSlideControl sets the value of SlideControl.
func (s *UpdateGroupSettingsReq0InMeeting) SetSlideControl(val OptBool) {
	s.SlideControl = val
}

// SetStereoAudio sets the value of StereoAudio.
func (s *UpdateGroupSettingsReq0InMeeting) SetStereoAudio(val OptBool) {
	s.StereoAudio = val
}

// SetUseHTMLFormatEmail sets the value of UseHTMLFormatEmail.
func (s *UpdateGroupSettingsReq0InMeeting) SetUseHTMLFormatEmail(val OptBool) {
	s.UseHTMLFormatEmail = val
}

// SetVirtualBackground sets the value of VirtualBackground.
func (s *UpdateGroupSettingsReq0InMeeting) SetVirtualBackground(val OptBool) {
	s.VirtualBackground = val
}

// SetWaitingRoom sets the value of WaitingRoom.
func (s *UpdateGroupSettingsReq0InMeeting) SetWaitingRoom(val OptBool) {
	s.WaitingRoom = val
}

// SetWebinarChat sets the value of WebinarChat.
func (s *UpdateGroupSettingsReq0InMeeting) SetWebinarChat(val OptUpdateGroupSettingsReq0InMeetingWebinarChat) {
	s.WebinarChat = val
}

// SetWebinarLiveStreaming sets the value of WebinarLiveStreaming.
func (s *UpdateGroupSettingsReq0InMeeting) SetWebinarLiveStreaming(val OptUpdateGroupSettingsReq0InMeetingWebinarLiveStreaming) {
	s.WebinarLiveStreaming = val
}

// SetMeetingPolling sets the value of MeetingPolling.
func (s *UpdateGroupSettingsReq0InMeeting) SetMeetingPolling(val OptUpdateGroupSettingsReq0InMeetingMeetingPolling) {
	s.MeetingPolling = val
}

// SetWebinarPolling sets the value of WebinarPolling.
func (s *UpdateGroupSettingsReq0InMeeting) SetWebinarPolling(val OptUpdateGroupSettingsReq0InMeetingWebinarPolling) {
	s.WebinarPolling = val
}

// SetWebinarQuestionAnswer sets the value of WebinarQuestionAnswer.
func (s *UpdateGroupSettingsReq0InMeeting) SetWebinarQuestionAnswer(val OptBool) {
	s.WebinarQuestionAnswer = val
}

// SetWebinarSurvey sets the value of WebinarSurvey.
func (s *UpdateGroupSettingsReq0InMeeting) SetWebinarSurvey(val OptBool) {
	s.WebinarSurvey = val
}

// SetWhiteboard sets the value of Whiteboard.
func (s *UpdateGroupSettingsReq0InMeeting) SetWhiteboard(val OptBool) {
	s.Whiteboard = val
}

// SetWhoCanShareScreen sets the value of WhoCanShareScreen.
func (s *UpdateGroupSettingsReq0InMeeting) SetWhoCanShareScreen(val OptString) {
	s.WhoCanShareScreen = val
}

// SetWhoCanShareScreenWhenSomeoneIsSharing sets the value of WhoCanShareScreenWhenSomeoneIsSharing.
func (s *UpdateGroupSettingsReq0InMeeting) SetWhoCanShareScreenWhenSomeoneIsSharing(val OptString) {
	s.WhoCanShareScreenWhenSomeoneIsSharing = val
}

// SetParticipantsShareSimultaneously sets the value of ParticipantsShareSimultaneously.
func (s *UpdateGroupSettingsReq0InMeeting) SetParticipantsShareSimultaneously(val OptString) {
	s.ParticipantsShareSimultaneously = val
}

// SetWorkplaceByFacebook sets the value of WorkplaceByFacebook.
func (s *UpdateGroupSettingsReq0InMeeting) SetWorkplaceByFacebook(val OptBool) {
	s.WorkplaceByFacebook = val
}

// Information about the [Translate captions](https://support.zoom.
// us/hc/en-us/articles/8158738379917-Managing-automated-captions-) settings in meetings.
type UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslation struct {
	// Information about all spoken languages and translation languages in meetings.
	LanguageItemPairList OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairList `json:"language_item_pairList"`
	// Whether to allow users to enable automated translated captions in these language pairs in meetings.
	Enable OptBool `json:"enable"`
}

// GetLanguageItemPairList returns the value of LanguageItemPairList.
func (s *UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslation) GetLanguageItemPairList() OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairList {
	return s.LanguageItemPairList
}

// GetEnable returns the value of Enable.
func (s *UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslation) GetEnable() OptBool {
	return s.Enable
}

// SetLanguageItemPairList sets the value of LanguageItemPairList.
func (s *UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslation) SetLanguageItemPairList(val OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairList) {
	s.LanguageItemPairList = val
}

// SetEnable sets the value of Enable.
func (s *UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslation) SetEnable(val OptBool) {
	s.Enable = val
}

// Information about all spoken languages and translation languages in meetings.
type UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairList struct {
	// A list of spoken languages and translation languages.
	TransLangConfig []UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItem `json:"trans_lang_config"`
	// Whether to select all spoken languages and translation languages.
	All OptBool `json:"all"`
}

// GetTransLangConfig returns the value of TransLangConfig.
func (s *UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairList) GetTransLangConfig() []UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItem {
	return s.TransLangConfig
}

// GetAll returns the value of All.
func (s *UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairList) GetAll() OptBool {
	return s.All
}

// SetTransLangConfig sets the value of TransLangConfig.
func (s *UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairList) SetTransLangConfig(val []UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItem) {
	s.TransLangConfig = val
}

// SetAll sets the value of All.
func (s *UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairList) SetAll(val OptBool) {
	s.All = val
}

// An item of spoken languages and translation languages in meetings.
type UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItem struct {
	// Language used in meetings.
	SpeakLanguage OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage `json:"speak_language"`
	// Information about all the translation languages.
	TranslateTo OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo `json:"translate_to"`
}

// GetSpeakLanguage returns the value of SpeakLanguage.
func (s *UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItem) GetSpeakLanguage() OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage {
	return s.SpeakLanguage
}

// GetTranslateTo returns the value of TranslateTo.
func (s *UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItem) GetTranslateTo() OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo {
	return s.TranslateTo
}

// SetSpeakLanguage sets the value of SpeakLanguage.
func (s *UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItem) SetSpeakLanguage(val OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage) {
	s.SpeakLanguage = val
}

// SetTranslateTo sets the value of TranslateTo.
func (s *UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItem) SetTranslateTo(val OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo) {
	s.TranslateTo = val
}

// Language used in meetings.
type UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage struct {
	// The language's name.
	Name OptString `json:"name"`
	// The language's code.
	Code OptString `json:"code"`
}

// GetName returns the value of Name.
func (s *UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage) GetName() OptString {
	return s.Name
}

// GetCode returns the value of Code.
func (s *UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage) GetCode() OptString {
	return s.Code
}

// SetName sets the value of Name.
func (s *UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage) SetName(val OptString) {
	s.Name = val
}

// SetCode sets the value of Code.
func (s *UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage) SetCode(val OptString) {
	s.Code = val
}

// Information about all the translation languages.
type UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo struct {
	// Whether to select all the translation languages.
	All OptBool `json:"all"`
	// A list of the translation languages.
	LanguageConfig []UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateToLanguageConfigItem `json:"language_config"`
}

// GetAll returns the value of All.
func (s *UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo) GetAll() OptBool {
	return s.All
}

// GetLanguageConfig returns the value of LanguageConfig.
func (s *UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo) GetLanguageConfig() []UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateToLanguageConfigItem {
	return s.LanguageConfig
}

// SetAll sets the value of All.
func (s *UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo) SetAll(val OptBool) {
	s.All = val
}

// SetLanguageConfig sets the value of LanguageConfig.
func (s *UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo) SetLanguageConfig(val []UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateToLanguageConfigItem) {
	s.LanguageConfig = val
}

// An item of translation languages.
type UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateToLanguageConfigItem struct {
	// The translation language's name.
	Name OptString `json:"name"`
	// The translation language's code.
	Code OptString `json:"code"`
}

// GetName returns the value of Name.
func (s *UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateToLanguageConfigItem) GetName() OptString {
	return s.Name
}

// GetCode returns the value of Code.
func (s *UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateToLanguageConfigItem) GetCode() OptString {
	return s.Code
}

// SetName sets the value of Name.
func (s *UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateToLanguageConfigItem) SetName(val OptString) {
	s.Name = val
}

// SetCode sets the value of Code.
func (s *UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateToLanguageConfigItem) SetCode(val OptString) {
	s.Code = val
}

// Information about the group's closed captioning settings.
type UpdateGroupSettingsReq0InMeetingClosedCaptioning struct {
	// Whether to allow a live transcription service to transcribe meetings.
	AutoTranscribing OptBool `json:"auto_transcribing"`
	// Whether to allow the host to type closed captions or assign a participant or 3rd-party service to
	// provide closed captioning.
	Enable OptBool `json:"enable"`
	// Whether to allow participants to save closed captions or transcripts.
	SaveCaption OptBool `json:"save_caption"`
	// Whether to allow the use of an API token to integrate with 3rd-party closed captioning services.
	ThirdPartyCaptioningService OptBool `json:"third_party_captioning_service"`
	// Whether to allow the viewing of full transcripts in the in-meeting side panel.
	ViewFullTranscript OptBool `json:"view_full_transcript"`
}

// GetAutoTranscribing returns the value of AutoTranscribing.
func (s *UpdateGroupSettingsReq0InMeetingClosedCaptioning) GetAutoTranscribing() OptBool {
	return s.AutoTranscribing
}

// GetEnable returns the value of Enable.
func (s *UpdateGroupSettingsReq0InMeetingClosedCaptioning) GetEnable() OptBool {
	return s.Enable
}

// GetSaveCaption returns the value of SaveCaption.
func (s *UpdateGroupSettingsReq0InMeetingClosedCaptioning) GetSaveCaption() OptBool {
	return s.SaveCaption
}

// GetThirdPartyCaptioningService returns the value of ThirdPartyCaptioningService.
func (s *UpdateGroupSettingsReq0InMeetingClosedCaptioning) GetThirdPartyCaptioningService() OptBool {
	return s.ThirdPartyCaptioningService
}

// GetViewFullTranscript returns the value of ViewFullTranscript.
func (s *UpdateGroupSettingsReq0InMeetingClosedCaptioning) GetViewFullTranscript() OptBool {
	return s.ViewFullTranscript
}

// SetAutoTranscribing sets the value of AutoTranscribing.
func (s *UpdateGroupSettingsReq0InMeetingClosedCaptioning) SetAutoTranscribing(val OptBool) {
	s.AutoTranscribing = val
}

// SetEnable sets the value of Enable.
func (s *UpdateGroupSettingsReq0InMeetingClosedCaptioning) SetEnable(val OptBool) {
	s.Enable = val
}

// SetSaveCaption sets the value of SaveCaption.
func (s *UpdateGroupSettingsReq0InMeetingClosedCaptioning) SetSaveCaption(val OptBool) {
	s.SaveCaption = val
}

// SetThirdPartyCaptioningService sets the value of ThirdPartyCaptioningService.
func (s *UpdateGroupSettingsReq0InMeetingClosedCaptioning) SetThirdPartyCaptioningService(val OptBool) {
	s.ThirdPartyCaptioningService = val
}

// SetViewFullTranscript sets the value of ViewFullTranscript.
func (s *UpdateGroupSettingsReq0InMeetingClosedCaptioning) SetViewFullTranscript(val OptBool) {
	s.ViewFullTranscript = val
}

// Information about the [language interpretation](https://support.zoom.
// us/hc/en-us/articles/360034919791-Using-Language-Interpretation-in-your-meeting-or-webinar)
// settings.
type UpdateGroupSettingsReq0InMeetingLanguageInterpretation struct {
	// A list of user-defined supported languages.
	CustomLanguages []string `json:"custom_languages"`
	// Whether to enable language interpretation by default.
	EnableLanguageInterpretationByDefault OptBool `json:"enable_language_interpretation_by_default"`
	// Whether to allow participants to speak in listening channel.
	AllowParticipantsToSpeakInListeningChannel OptBool `json:"allow_participants_to_speak_in_listening_channel"`
	// Whether to allow up to 25 custom languages when scheduling meetings.
	AllowUpTo25CustomLanguagesWhenSchedulingMeetings OptBool `json:"allow_up_to_25_custom_languages_when_scheduling_meetings"`
	// Whether to allow hosts to assign participants as interpreters who can interpret one language into
	// another in real-time.
	Enable OptBool `json:"enable"`
}

// GetCustomLanguages returns the value of CustomLanguages.
func (s *UpdateGroupSettingsReq0InMeetingLanguageInterpretation) GetCustomLanguages() []string {
	return s.CustomLanguages
}

// GetEnableLanguageInterpretationByDefault returns the value of EnableLanguageInterpretationByDefault.
func (s *UpdateGroupSettingsReq0InMeetingLanguageInterpretation) GetEnableLanguageInterpretationByDefault() OptBool {
	return s.EnableLanguageInterpretationByDefault
}

// GetAllowParticipantsToSpeakInListeningChannel returns the value of AllowParticipantsToSpeakInListeningChannel.
func (s *UpdateGroupSettingsReq0InMeetingLanguageInterpretation) GetAllowParticipantsToSpeakInListeningChannel() OptBool {
	return s.AllowParticipantsToSpeakInListeningChannel
}

// GetAllowUpTo25CustomLanguagesWhenSchedulingMeetings returns the value of AllowUpTo25CustomLanguagesWhenSchedulingMeetings.
func (s *UpdateGroupSettingsReq0InMeetingLanguageInterpretation) GetAllowUpTo25CustomLanguagesWhenSchedulingMeetings() OptBool {
	return s.AllowUpTo25CustomLanguagesWhenSchedulingMeetings
}

// GetEnable returns the value of Enable.
func (s *UpdateGroupSettingsReq0InMeetingLanguageInterpretation) GetEnable() OptBool {
	return s.Enable
}

// SetCustomLanguages sets the value of CustomLanguages.
func (s *UpdateGroupSettingsReq0InMeetingLanguageInterpretation) SetCustomLanguages(val []string) {
	s.CustomLanguages = val
}

// SetEnableLanguageInterpretationByDefault sets the value of EnableLanguageInterpretationByDefault.
func (s *UpdateGroupSettingsReq0InMeetingLanguageInterpretation) SetEnableLanguageInterpretationByDefault(val OptBool) {
	s.EnableLanguageInterpretationByDefault = val
}

// SetAllowParticipantsToSpeakInListeningChannel sets the value of AllowParticipantsToSpeakInListeningChannel.
func (s *UpdateGroupSettingsReq0InMeetingLanguageInterpretation) SetAllowParticipantsToSpeakInListeningChannel(val OptBool) {
	s.AllowParticipantsToSpeakInListeningChannel = val
}

// SetAllowUpTo25CustomLanguagesWhenSchedulingMeetings sets the value of AllowUpTo25CustomLanguagesWhenSchedulingMeetings.
func (s *UpdateGroupSettingsReq0InMeetingLanguageInterpretation) SetAllowUpTo25CustomLanguagesWhenSchedulingMeetings(val OptBool) {
	s.AllowUpTo25CustomLanguagesWhenSchedulingMeetings = val
}

// SetEnable sets the value of Enable.
func (s *UpdateGroupSettingsReq0InMeetingLanguageInterpretation) SetEnable(val OptBool) {
	s.Enable = val
}

type UpdateGroupSettingsReq0InMeetingManualCaptioning struct {
	// Allow host to type or assign a participant to type.
	AllowToType OptBool `json:"allow_to_type"`
	// Whether to allow a live transcription service to transcribe meetings.
	AutoGeneratedCaptions OptBool `json:"auto_generated_captions"`
	// Whether to allow the viewing of full transcripts in the in-meeting side panel.
	FullTranscript OptBool `json:"full_transcript"`
	// Allow host to type closed captions or assign a participant/third party device to add closed
	// captions.
	ManualCaptions OptBool `json:"manual_captions"`
	// Whether participants can save closed captions or transcripts.
	SaveCaptions OptBool `json:"save_captions"`
	// Whether to allow the use of an API token to integrate with 3rd-party closed captioning services.
	ThirdPartyCaptioningService OptBool `json:"third_party_captioning_service"`
}

// GetAllowToType returns the value of AllowToType.
func (s *UpdateGroupSettingsReq0InMeetingManualCaptioning) GetAllowToType() OptBool {
	return s.AllowToType
}

// GetAutoGeneratedCaptions returns the value of AutoGeneratedCaptions.
func (s *UpdateGroupSettingsReq0InMeetingManualCaptioning) GetAutoGeneratedCaptions() OptBool {
	return s.AutoGeneratedCaptions
}

// GetFullTranscript returns the value of FullTranscript.
func (s *UpdateGroupSettingsReq0InMeetingManualCaptioning) GetFullTranscript() OptBool {
	return s.FullTranscript
}

// GetManualCaptions returns the value of ManualCaptions.
func (s *UpdateGroupSettingsReq0InMeetingManualCaptioning) GetManualCaptions() OptBool {
	return s.ManualCaptions
}

// GetSaveCaptions returns the value of SaveCaptions.
func (s *UpdateGroupSettingsReq0InMeetingManualCaptioning) GetSaveCaptions() OptBool {
	return s.SaveCaptions
}

// GetThirdPartyCaptioningService returns the value of ThirdPartyCaptioningService.
func (s *UpdateGroupSettingsReq0InMeetingManualCaptioning) GetThirdPartyCaptioningService() OptBool {
	return s.ThirdPartyCaptioningService
}

// SetAllowToType sets the value of AllowToType.
func (s *UpdateGroupSettingsReq0InMeetingManualCaptioning) SetAllowToType(val OptBool) {
	s.AllowToType = val
}

// SetAutoGeneratedCaptions sets the value of AutoGeneratedCaptions.
func (s *UpdateGroupSettingsReq0InMeetingManualCaptioning) SetAutoGeneratedCaptions(val OptBool) {
	s.AutoGeneratedCaptions = val
}

// SetFullTranscript sets the value of FullTranscript.
func (s *UpdateGroupSettingsReq0InMeetingManualCaptioning) SetFullTranscript(val OptBool) {
	s.FullTranscript = val
}

// SetManualCaptions sets the value of ManualCaptions.
func (s *UpdateGroupSettingsReq0InMeetingManualCaptioning) SetManualCaptions(val OptBool) {
	s.ManualCaptions = val
}

// SetSaveCaptions sets the value of SaveCaptions.
func (s *UpdateGroupSettingsReq0InMeetingManualCaptioning) SetSaveCaptions(val OptBool) {
	s.SaveCaptions = val
}

// SetThirdPartyCaptioningService sets the value of ThirdPartyCaptioningService.
func (s *UpdateGroupSettingsReq0InMeetingManualCaptioning) SetThirdPartyCaptioningService(val OptBool) {
	s.ThirdPartyCaptioningService = val
}

// Information about the account's meeting polling settings.
type UpdateGroupSettingsReq0InMeetingMeetingPolling struct {
	// Whether to allow the host to add polls before or during a meeting.
	Enable OptBool `json:"enable"`
	// Whether to allow host to create advanced polls and quizzes. Advanced polls and quizzes include
	// single choice, multiple choice, drop down, matching, short answer, long answer, rank order, and
	// fill-in-the-blank questions. Hosts can also set the correct answers for quizzes they create.
	AdvancedPolls OptBool `json:"advanced_polls"`
	// Whether to allow users to manage saved polls and quizzes from meetings.
	ManageSavedPollsAndQuizzes OptBool `json:"manage_saved_polls_and_quizzes"`
	// Whether to require answers to be anonymous.
	RequireAnswersToBeAnonymous OptBool `json:"require_answers_to_be_anonymous"`
	// Whether to allow host to upload an image for each question.
	AllowHostToUploadImage OptBool `json:"allow_host_to_upload_image"`
	// Whether to allow alternative hosts to add or edit polls and quizzes.
	AllowAlternativeHostToAddEdit OptBool `json:"allow_alternative_host_to_add_edit"`
}

// GetEnable returns the value of Enable.
func (s *UpdateGroupSettingsReq0InMeetingMeetingPolling) GetEnable() OptBool {
	return s.Enable
}

// GetAdvancedPolls returns the value of AdvancedPolls.
func (s *UpdateGroupSettingsReq0InMeetingMeetingPolling) GetAdvancedPolls() OptBool {
	return s.AdvancedPolls
}

// GetManageSavedPollsAndQuizzes returns the value of ManageSavedPollsAndQuizzes.
func (s *UpdateGroupSettingsReq0InMeetingMeetingPolling) GetManageSavedPollsAndQuizzes() OptBool {
	return s.ManageSavedPollsAndQuizzes
}

// GetRequireAnswersToBeAnonymous returns the value of RequireAnswersToBeAnonymous.
func (s *UpdateGroupSettingsReq0InMeetingMeetingPolling) GetRequireAnswersToBeAnonymous() OptBool {
	return s.RequireAnswersToBeAnonymous
}

// GetAllowHostToUploadImage returns the value of AllowHostToUploadImage.
func (s *UpdateGroupSettingsReq0InMeetingMeetingPolling) GetAllowHostToUploadImage() OptBool {
	return s.AllowHostToUploadImage
}

// GetAllowAlternativeHostToAddEdit returns the value of AllowAlternativeHostToAddEdit.
func (s *UpdateGroupSettingsReq0InMeetingMeetingPolling) GetAllowAlternativeHostToAddEdit() OptBool {
	return s.AllowAlternativeHostToAddEdit
}

// SetEnable sets the value of Enable.
func (s *UpdateGroupSettingsReq0InMeetingMeetingPolling) SetEnable(val OptBool) {
	s.Enable = val
}

// SetAdvancedPolls sets the value of AdvancedPolls.
func (s *UpdateGroupSettingsReq0InMeetingMeetingPolling) SetAdvancedPolls(val OptBool) {
	s.AdvancedPolls = val
}

// SetManageSavedPollsAndQuizzes sets the value of ManageSavedPollsAndQuizzes.
func (s *UpdateGroupSettingsReq0InMeetingMeetingPolling) SetManageSavedPollsAndQuizzes(val OptBool) {
	s.ManageSavedPollsAndQuizzes = val
}

// SetRequireAnswersToBeAnonymous sets the value of RequireAnswersToBeAnonymous.
func (s *UpdateGroupSettingsReq0InMeetingMeetingPolling) SetRequireAnswersToBeAnonymous(val OptBool) {
	s.RequireAnswersToBeAnonymous = val
}

// SetAllowHostToUploadImage sets the value of AllowHostToUploadImage.
func (s *UpdateGroupSettingsReq0InMeetingMeetingPolling) SetAllowHostToUploadImage(val OptBool) {
	s.AllowHostToUploadImage = val
}

// SetAllowAlternativeHostToAddEdit sets the value of AllowAlternativeHostToAddEdit.
func (s *UpdateGroupSettingsReq0InMeetingMeetingPolling) SetAllowAlternativeHostToAddEdit(val OptBool) {
	s.AllowAlternativeHostToAddEdit = val
}

// Allow hosts to assign participants as sign language interpreters who can interpret one language
// into sign language in real-time. Hosts can assign interpreters when scheduling, or during the
// meeting itself. This feature is only available with version 5.11.3 or later.
type UpdateGroupSettingsReq0InMeetingSignLanguageInterpretation struct {
	// Whether to allow hosts to assign participants as sign language interpreters who can interpret one
	// language into another in real-time.
	Enable OptBool `json:"enable"`
	// Whether to enable sign language interpretation view by default in scheduler.
	EnableSignLanguageInterpretationByDefault OptBool `json:"enable_sign_language_interpretation_by_default"`
	// A list of user-defined supported languages.
	CustomLanguages []string `json:"custom_languages"`
}

// GetEnable returns the value of Enable.
func (s *UpdateGroupSettingsReq0InMeetingSignLanguageInterpretation) GetEnable() OptBool {
	return s.Enable
}

// GetEnableSignLanguageInterpretationByDefault returns the value of EnableSignLanguageInterpretationByDefault.
func (s *UpdateGroupSettingsReq0InMeetingSignLanguageInterpretation) GetEnableSignLanguageInterpretationByDefault() OptBool {
	return s.EnableSignLanguageInterpretationByDefault
}

// GetCustomLanguages returns the value of CustomLanguages.
func (s *UpdateGroupSettingsReq0InMeetingSignLanguageInterpretation) GetCustomLanguages() []string {
	return s.CustomLanguages
}

// SetEnable sets the value of Enable.
func (s *UpdateGroupSettingsReq0InMeetingSignLanguageInterpretation) SetEnable(val OptBool) {
	s.Enable = val
}

// SetEnableSignLanguageInterpretationByDefault sets the value of EnableSignLanguageInterpretationByDefault.
func (s *UpdateGroupSettingsReq0InMeetingSignLanguageInterpretation) SetEnableSignLanguageInterpretationByDefault(val OptBool) {
	s.EnableSignLanguageInterpretationByDefault = val
}

// SetCustomLanguages sets the value of CustomLanguages.
func (s *UpdateGroupSettingsReq0InMeetingSignLanguageInterpretation) SetCustomLanguages(val []string) {
	s.CustomLanguages = val
}

type UpdateGroupSettingsReq0InMeetingWebinarChat struct {
	// Allow webinar attendees to chat witn others in the webinar.
	// * `1` - No one.
	// * `2` - Host and all panelists.
	// * `3` - Everyone.
	AllowAttendeesChatWith OptInt `json:"allow_attendees_chat_with"`
	// Whether to automatically save chat messages to a local file on the host's computer when the
	// webinar ends.
	AllowAutoSaveLocalChatFile OptBool `json:"allow_auto_save_local_chat_file"`
	// Allow webinar panelists to chat with others in the webinar.
	// * `1` - Host and all panelists.
	// * `2` - Everyone.
	AllowPanelistsChatWith OptInt `json:"allow_panelists_chat_with"`
	// Whether to allow webinar panelists to send direct messages to other panelists.
	AllowPanelistsSendDirectMessage OptBool `json:"allow_panelists_send_direct_message"`
	// Whether webinar attendees can save chats.
	// * `0` - Attendees cannot save chats.
	// * `1` - Attendees can only save host and panelist chats.
	// * `2` - Attendees can save all chats.
	AllowUsersSaveChats OptInt `json:"allow_users_save_chats"`
	// By default, who to allow webinar attendees to chat with.
	// * `1` - Host and all panelists.
	// * `2` - Everyone.
	DefaultAttendeesChatWith OptInt `json:"default_attendees_chat_with"`
	// Whether to allow webinar participants to send chat messages.
	Enable OptBool `json:"enable"`
}

// GetAllowAttendeesChatWith returns the value of AllowAttendeesChatWith.
func (s *UpdateGroupSettingsReq0InMeetingWebinarChat) GetAllowAttendeesChatWith() OptInt {
	return s.AllowAttendeesChatWith
}

// GetAllowAutoSaveLocalChatFile returns the value of AllowAutoSaveLocalChatFile.
func (s *UpdateGroupSettingsReq0InMeetingWebinarChat) GetAllowAutoSaveLocalChatFile() OptBool {
	return s.AllowAutoSaveLocalChatFile
}

// GetAllowPanelistsChatWith returns the value of AllowPanelistsChatWith.
func (s *UpdateGroupSettingsReq0InMeetingWebinarChat) GetAllowPanelistsChatWith() OptInt {
	return s.AllowPanelistsChatWith
}

// GetAllowPanelistsSendDirectMessage returns the value of AllowPanelistsSendDirectMessage.
func (s *UpdateGroupSettingsReq0InMeetingWebinarChat) GetAllowPanelistsSendDirectMessage() OptBool {
	return s.AllowPanelistsSendDirectMessage
}

// GetAllowUsersSaveChats returns the value of AllowUsersSaveChats.
func (s *UpdateGroupSettingsReq0InMeetingWebinarChat) GetAllowUsersSaveChats() OptInt {
	return s.AllowUsersSaveChats
}

// GetDefaultAttendeesChatWith returns the value of DefaultAttendeesChatWith.
func (s *UpdateGroupSettingsReq0InMeetingWebinarChat) GetDefaultAttendeesChatWith() OptInt {
	return s.DefaultAttendeesChatWith
}

// GetEnable returns the value of Enable.
func (s *UpdateGroupSettingsReq0InMeetingWebinarChat) GetEnable() OptBool {
	return s.Enable
}

// SetAllowAttendeesChatWith sets the value of AllowAttendeesChatWith.
func (s *UpdateGroupSettingsReq0InMeetingWebinarChat) SetAllowAttendeesChatWith(val OptInt) {
	s.AllowAttendeesChatWith = val
}

// SetAllowAutoSaveLocalChatFile sets the value of AllowAutoSaveLocalChatFile.
func (s *UpdateGroupSettingsReq0InMeetingWebinarChat) SetAllowAutoSaveLocalChatFile(val OptBool) {
	s.AllowAutoSaveLocalChatFile = val
}

// SetAllowPanelistsChatWith sets the value of AllowPanelistsChatWith.
func (s *UpdateGroupSettingsReq0InMeetingWebinarChat) SetAllowPanelistsChatWith(val OptInt) {
	s.AllowPanelistsChatWith = val
}

// SetAllowPanelistsSendDirectMessage sets the value of AllowPanelistsSendDirectMessage.
func (s *UpdateGroupSettingsReq0InMeetingWebinarChat) SetAllowPanelistsSendDirectMessage(val OptBool) {
	s.AllowPanelistsSendDirectMessage = val
}

// SetAllowUsersSaveChats sets the value of AllowUsersSaveChats.
func (s *UpdateGroupSettingsReq0InMeetingWebinarChat) SetAllowUsersSaveChats(val OptInt) {
	s.AllowUsersSaveChats = val
}

// SetDefaultAttendeesChatWith sets the value of DefaultAttendeesChatWith.
func (s *UpdateGroupSettingsReq0InMeetingWebinarChat) SetDefaultAttendeesChatWith(val OptInt) {
	s.DefaultAttendeesChatWith = val
}

// SetEnable sets the value of Enable.
func (s *UpdateGroupSettingsReq0InMeetingWebinarChat) SetEnable(val OptBool) {
	s.Enable = val
}

type UpdateGroupSettingsReq0InMeetingWebinarLiveStreaming struct {
	// The specific instructions to allow your account's meeting hosts to configure a custom livestream.
	CustomServiceInstructions OptString `json:"custom_service_instructions"`
	// Whether webinar livestreaming is enabled.
	Enable OptBool `json:"enable"`
	// Whether to notify users to watch the livestream. This does not apply to custom RTMP (real-time
	// messaging protocol).
	LiveStreamingReminder OptBool `json:"live_streaming_reminder"`
	// The available livestreaming services.
	// * `facebook`
	// * `workplace_by_facebook`
	// * `youtube`
	// * `custom_live_streaming_service`.
	LiveStreamingService []string `json:"live_streaming_service"`
}

// GetCustomServiceInstructions returns the value of CustomServiceInstructions.
func (s *UpdateGroupSettingsReq0InMeetingWebinarLiveStreaming) GetCustomServiceInstructions() OptString {
	return s.CustomServiceInstructions
}

// GetEnable returns the value of Enable.
func (s *UpdateGroupSettingsReq0InMeetingWebinarLiveStreaming) GetEnable() OptBool {
	return s.Enable
}

// GetLiveStreamingReminder returns the value of LiveStreamingReminder.
func (s *UpdateGroupSettingsReq0InMeetingWebinarLiveStreaming) GetLiveStreamingReminder() OptBool {
	return s.LiveStreamingReminder
}

// GetLiveStreamingService returns the value of LiveStreamingService.
func (s *UpdateGroupSettingsReq0InMeetingWebinarLiveStreaming) GetLiveStreamingService() []string {
	return s.LiveStreamingService
}

// SetCustomServiceInstructions sets the value of CustomServiceInstructions.
func (s *UpdateGroupSettingsReq0InMeetingWebinarLiveStreaming) SetCustomServiceInstructions(val OptString) {
	s.CustomServiceInstructions = val
}

// SetEnable sets the value of Enable.
func (s *UpdateGroupSettingsReq0InMeetingWebinarLiveStreaming) SetEnable(val OptBool) {
	s.Enable = val
}

// SetLiveStreamingReminder sets the value of LiveStreamingReminder.
func (s *UpdateGroupSettingsReq0InMeetingWebinarLiveStreaming) SetLiveStreamingReminder(val OptBool) {
	s.LiveStreamingReminder = val
}

// SetLiveStreamingService sets the value of LiveStreamingService.
func (s *UpdateGroupSettingsReq0InMeetingWebinarLiveStreaming) SetLiveStreamingService(val []string) {
	s.LiveStreamingService = val
}

type UpdateGroupSettingsReq0InMeetingWebinarPolling struct {
	// Whether to allow host to create advanced polls and quizzes. Advanced polls and quizzes include
	// single choice, multiple choice, drop down, matching, short answer, long answer, rank order, and
	// fill-in-the-blank questions. Hosts can also set the correct answers for quizzes they create.
	AdvancedPolls OptBool `json:"advanced_polls"`
	// Whether to allow alternative hosts to add or edit polls and quizzes.
	AllowAlternativeHostToAddEdit OptBool `json:"allow_alternative_host_to_add_edit"`
	// Whether to allow users to manage saved polls and quizzes from Webinars.
	ManageSavedPollsAndQuizzes OptBool `json:"manage_saved_polls_and_quizzes"`
	// Whether to require answers to be anonymous.
	RequireAnswersToBeAnonymous OptBool `json:"require_answers_to_be_anonymous"`
	// Whether to allow host to upload an image for each question.
	AllowHostToUploadImage OptBool `json:"allow_host_to_upload_image"`
	// Whether to allow the host to add polls before or during a webinar.
	Enable OptBool `json:"enable"`
}

// GetAdvancedPolls returns the value of AdvancedPolls.
func (s *UpdateGroupSettingsReq0InMeetingWebinarPolling) GetAdvancedPolls() OptBool {
	return s.AdvancedPolls
}

// GetAllowAlternativeHostToAddEdit returns the value of AllowAlternativeHostToAddEdit.
func (s *UpdateGroupSettingsReq0InMeetingWebinarPolling) GetAllowAlternativeHostToAddEdit() OptBool {
	return s.AllowAlternativeHostToAddEdit
}

// GetManageSavedPollsAndQuizzes returns the value of ManageSavedPollsAndQuizzes.
func (s *UpdateGroupSettingsReq0InMeetingWebinarPolling) GetManageSavedPollsAndQuizzes() OptBool {
	return s.ManageSavedPollsAndQuizzes
}

// GetRequireAnswersToBeAnonymous returns the value of RequireAnswersToBeAnonymous.
func (s *UpdateGroupSettingsReq0InMeetingWebinarPolling) GetRequireAnswersToBeAnonymous() OptBool {
	return s.RequireAnswersToBeAnonymous
}

// GetAllowHostToUploadImage returns the value of AllowHostToUploadImage.
func (s *UpdateGroupSettingsReq0InMeetingWebinarPolling) GetAllowHostToUploadImage() OptBool {
	return s.AllowHostToUploadImage
}

// GetEnable returns the value of Enable.
func (s *UpdateGroupSettingsReq0InMeetingWebinarPolling) GetEnable() OptBool {
	return s.Enable
}

// SetAdvancedPolls sets the value of AdvancedPolls.
func (s *UpdateGroupSettingsReq0InMeetingWebinarPolling) SetAdvancedPolls(val OptBool) {
	s.AdvancedPolls = val
}

// SetAllowAlternativeHostToAddEdit sets the value of AllowAlternativeHostToAddEdit.
func (s *UpdateGroupSettingsReq0InMeetingWebinarPolling) SetAllowAlternativeHostToAddEdit(val OptBool) {
	s.AllowAlternativeHostToAddEdit = val
}

// SetManageSavedPollsAndQuizzes sets the value of ManageSavedPollsAndQuizzes.
func (s *UpdateGroupSettingsReq0InMeetingWebinarPolling) SetManageSavedPollsAndQuizzes(val OptBool) {
	s.ManageSavedPollsAndQuizzes = val
}

// SetRequireAnswersToBeAnonymous sets the value of RequireAnswersToBeAnonymous.
func (s *UpdateGroupSettingsReq0InMeetingWebinarPolling) SetRequireAnswersToBeAnonymous(val OptBool) {
	s.RequireAnswersToBeAnonymous = val
}

// SetAllowHostToUploadImage sets the value of AllowHostToUploadImage.
func (s *UpdateGroupSettingsReq0InMeetingWebinarPolling) SetAllowHostToUploadImage(val OptBool) {
	s.AllowHostToUploadImage = val
}

// SetEnable sets the value of Enable.
func (s *UpdateGroupSettingsReq0InMeetingWebinarPolling) SetEnable(val OptBool) {
	s.Enable = val
}

type UpdateGroupSettingsReq0OtherOptions struct {
	// Whether to display the Zoom help badge on the bottom-right of the page.
	AllowUsersContactSupportViaChat OptBool `json:"allow_users_contact_support_via_chat"`
	// Whether iOS blurs the screenshot in the task switcher when multiple apps are open. Android hides
	// the screenshot in the system-level list of recent apps.
	BlurSnapshot OptBool `json:"blur_snapshot"`
	// Webinar registration options.
	WebinarRegistrationOptions OptUpdateGroupSettingsReq0OtherOptionsWebinarRegistrationOptions `json:"webinar_registration_options"`
}

// GetAllowUsersContactSupportViaChat returns the value of AllowUsersContactSupportViaChat.
func (s *UpdateGroupSettingsReq0OtherOptions) GetAllowUsersContactSupportViaChat() OptBool {
	return s.AllowUsersContactSupportViaChat
}

// GetBlurSnapshot returns the value of BlurSnapshot.
func (s *UpdateGroupSettingsReq0OtherOptions) GetBlurSnapshot() OptBool {
	return s.BlurSnapshot
}

// GetWebinarRegistrationOptions returns the value of WebinarRegistrationOptions.
func (s *UpdateGroupSettingsReq0OtherOptions) GetWebinarRegistrationOptions() OptUpdateGroupSettingsReq0OtherOptionsWebinarRegistrationOptions {
	return s.WebinarRegistrationOptions
}

// SetAllowUsersContactSupportViaChat sets the value of AllowUsersContactSupportViaChat.
func (s *UpdateGroupSettingsReq0OtherOptions) SetAllowUsersContactSupportViaChat(val OptBool) {
	s.AllowUsersContactSupportViaChat = val
}

// SetBlurSnapshot sets the value of BlurSnapshot.
func (s *UpdateGroupSettingsReq0OtherOptions) SetBlurSnapshot(val OptBool) {
	s.BlurSnapshot = val
}

// SetWebinarRegistrationOptions sets the value of WebinarRegistrationOptions.
func (s *UpdateGroupSettingsReq0OtherOptions) SetWebinarRegistrationOptions(val OptUpdateGroupSettingsReq0OtherOptionsWebinarRegistrationOptions) {
	s.WebinarRegistrationOptions = val
}

// Webinar registration options.
type UpdateGroupSettingsReq0OtherOptionsWebinarRegistrationOptions struct {
	// Allow host to enable **Show join info on registration confirmation page**.
	AllowHostToEnableJoinInfo OptBool `json:"allow_host_to_enable_join_info"`
	// Allow host to enable **Show social share buttons on registration page**.
	AllowHostToEnableSocialShareButtons OptBool `json:"allow_host_to_enable_social_share_buttons"`
	// Enable custom questions.
	EnableCustomQuestions OptBool `json:"enable_custom_questions"`
}

// GetAllowHostToEnableJoinInfo returns the value of AllowHostToEnableJoinInfo.
func (s *UpdateGroupSettingsReq0OtherOptionsWebinarRegistrationOptions) GetAllowHostToEnableJoinInfo() OptBool {
	return s.AllowHostToEnableJoinInfo
}

// GetAllowHostToEnableSocialShareButtons returns the value of AllowHostToEnableSocialShareButtons.
func (s *UpdateGroupSettingsReq0OtherOptionsWebinarRegistrationOptions) GetAllowHostToEnableSocialShareButtons() OptBool {
	return s.AllowHostToEnableSocialShareButtons
}

// GetEnableCustomQuestions returns the value of EnableCustomQuestions.
func (s *UpdateGroupSettingsReq0OtherOptionsWebinarRegistrationOptions) GetEnableCustomQuestions() OptBool {
	return s.EnableCustomQuestions
}

// SetAllowHostToEnableJoinInfo sets the value of AllowHostToEnableJoinInfo.
func (s *UpdateGroupSettingsReq0OtherOptionsWebinarRegistrationOptions) SetAllowHostToEnableJoinInfo(val OptBool) {
	s.AllowHostToEnableJoinInfo = val
}

// SetAllowHostToEnableSocialShareButtons sets the value of AllowHostToEnableSocialShareButtons.
func (s *UpdateGroupSettingsReq0OtherOptionsWebinarRegistrationOptions) SetAllowHostToEnableSocialShareButtons(val OptBool) {
	s.AllowHostToEnableSocialShareButtons = val
}

// SetEnableCustomQuestions sets the value of EnableCustomQuestions.
func (s *UpdateGroupSettingsReq0OtherOptionsWebinarRegistrationOptions) SetEnableCustomQuestions(val OptBool) {
	s.EnableCustomQuestions = val
}

type UpdateGroupSettingsReq0Profile struct {
	RecordingStorageLocation OptUpdateGroupSettingsReq0ProfileRecordingStorageLocation `json:"recording_storage_location"`
}

// GetRecordingStorageLocation returns the value of RecordingStorageLocation.
func (s *UpdateGroupSettingsReq0Profile) GetRecordingStorageLocation() OptUpdateGroupSettingsReq0ProfileRecordingStorageLocation {
	return s.RecordingStorageLocation
}

// SetRecordingStorageLocation sets the value of RecordingStorageLocation.
func (s *UpdateGroupSettingsReq0Profile) SetRecordingStorageLocation(val OptUpdateGroupSettingsReq0ProfileRecordingStorageLocation) {
	s.RecordingStorageLocation = val
}

type UpdateGroupSettingsReq0ProfileRecordingStorageLocation struct {
	// Users can choose the country to store their recorded content. Content can include meeting, webinar,
	//  and phone recordings, as well as voicemail, transcripts, and custom greeting prompts. See
	// [Managing the Communications Content storage location](https://support.zoom.
	// us/hc/en-us/articles/360050781131) for details.
	// Provide abbreviated country codes as the value for this field. See the [Countries abbreviation
	// list](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#countries) for
	// details.
	AllowedValues []string `json:"allowed_values"`
	// Abbreviated country code.
	Value OptString `json:"value"`
}

// GetAllowedValues returns the value of AllowedValues.
func (s *UpdateGroupSettingsReq0ProfileRecordingStorageLocation) GetAllowedValues() []string {
	return s.AllowedValues
}

// GetValue returns the value of Value.
func (s *UpdateGroupSettingsReq0ProfileRecordingStorageLocation) GetValue() OptString {
	return s.Value
}

// SetAllowedValues sets the value of AllowedValues.
func (s *UpdateGroupSettingsReq0ProfileRecordingStorageLocation) SetAllowedValues(val []string) {
	s.AllowedValues = val
}

// SetValue sets the value of Value.
func (s *UpdateGroupSettingsReq0ProfileRecordingStorageLocation) SetValue(val OptString) {
	s.Value = val
}

type UpdateGroupSettingsReq0Recording struct {
	// Make cloud recordings accessible to account members only.
	AccountUserAccessRecording OptBool `json:"account_user_access_recording"`
	// [Archiving solution](https://support.zoom.
	// us/hc/en-us/articles/360050431572-Archiving-Meeting-and-Webinar-data) settings. This setting can
	// only be used if you have been granted archiving solution access by the Zoom Support team.
	Archive OptUpdateGroupSettingsReq0RecordingArchive `json:"archive"`
	// Record meetings automatically as they start.
	AutoRecording OptString `json:"auto_recording"`
	// Allow hosts to record and save the meeting or webinar in the cloud.
	CloudRecording OptBool `json:"cloud_recording"`
	// Allow anyone with a link to the cloud recording to download.
	CloudRecordingDownload OptBool `json:"cloud_recording_download"`
	// Allow only the host with a link to the cloud recording to download.
	CloudRecordingDownloadHost OptBool `json:"cloud_recording_download_host"`
	// Allow the host to delete the recordings. If this option is disabled, the recordings cannot be
	// deleted by the host and only admin can delete them.
	HostDeleteCloudRecording OptBool `json:"host_delete_cloud_recording"`
	// The account's [**Record active speaker, gallery view and shared screen
	// separately**](https://support.zoom.
	// us/hc/en-us/articles/360060316092-Changing-basic-and-advanced-cloud-recording-settings#h_01F4CYJTCTXNS2MXH00W9EFG6R) settings.
	RecordFilesSeparately OptUpdateGroupSettingsReq0RecordingRecordFilesSeparately `json:"record_files_separately"`
	// Whether participants' names display in the recording.
	DisplayParticipantName OptBool `json:"display_participant_name"`
	// Whether thumbnails of the presenter are recorded when they are sharing their screen.
	RecordingThumbnails OptBool `json:"recording_thumbnails"`
	// Whether recordings will be optimized for a 3rd party video editor. This can increase the file size
	// and the time it takes to generate recording files.
	OptimizeRecordingFor3rdPartyVideoEditor OptBool `json:"optimize_recording_for_3rd_party_video_editor"`
	// Whether the [recording highlights](https://support.zoom.us/hc/en-us/articles/360060802432) feature
	// is enabled.
	//
	// Deprecated: schema marks this property as deprecated.
	RecordingHighlight OptBool `json:"recording_highlight"`
	// Whether panelist chats are saved to the recording.
	SavePanelistChat OptBool `json:"save_panelist_chat"`
	// Whether poll results shared during the meeting or webinar are saved. This also includes poll
	// results shared during the meeting or webinar.
	SavePollResults OptBool `json:"save_poll_results"`
	// Whether [closed captions](https://support.zoom.us/hc/en-us/articles/207279736) are saved as a VTT
	// (Video Track Text) file.
	SaveCloseCaption OptBool `json:"save_close_caption"`
	// Setting to allow cloud recording access only from specific IP address ranges.
	IPAddressAccessControl OptUpdateGroupSettingsReq0RecordingIPAddressAccessControl `json:"ip_address_access_control"`
	// Allow hosts and participants to record the meeting to a local file.
	LocalRecording OptBool `json:"local_recording"`
	// If set to `true`, meeting hosts can't view their meeting cloud recordings. Only the admins who
	// have recording management privilege can access them.
	PreventHostAccessRecording OptBool `json:"prevent_host_access_recording"`
	// Whether to record one audio file for all participants.
	RecordAudioFile OptBool `json:"record_audio_file"`
	// When someone is sharing their screen, active speaker will show on the top right corner of the
	// shared screen.
	RecordGalleryView OptBool `json:"record_gallery_view"`
	// Record active speaker with shared screen.
	RecordSpeakerView OptBool `json:"record_speaker_view"`
	// Automatically transcribe the audio of a meeting or webinar for cloud recordings.
	RecordingAudioTranscript OptBool `json:"recording_audio_transcript"`
	// By selecting this option, your recording will have meeting smart chapters, and next steps. You are
	// directing Zoom to access, process, and use your account's recording data for the purpose of
	// analysis and insights.
	SmartRecording OptUpdateGroupSettingsReq0RecordingSmartRecording `json:"smart_recording"`
	// Save chat messages from the meeting or webinar.
	SaveChatText OptBool `json:"save_chat_text"`
	// Add a timestamp to the recording.
	ShowTimestamp OptBool `json:"show_timestamp"`
}

// GetAccountUserAccessRecording returns the value of AccountUserAccessRecording.
func (s *UpdateGroupSettingsReq0Recording) GetAccountUserAccessRecording() OptBool {
	return s.AccountUserAccessRecording
}

// GetArchive returns the value of Archive.
func (s *UpdateGroupSettingsReq0Recording) GetArchive() OptUpdateGroupSettingsReq0RecordingArchive {
	return s.Archive
}

// GetAutoRecording returns the value of AutoRecording.
func (s *UpdateGroupSettingsReq0Recording) GetAutoRecording() OptString {
	return s.AutoRecording
}

// GetCloudRecording returns the value of CloudRecording.
func (s *UpdateGroupSettingsReq0Recording) GetCloudRecording() OptBool {
	return s.CloudRecording
}

// GetCloudRecordingDownload returns the value of CloudRecordingDownload.
func (s *UpdateGroupSettingsReq0Recording) GetCloudRecordingDownload() OptBool {
	return s.CloudRecordingDownload
}

// GetCloudRecordingDownloadHost returns the value of CloudRecordingDownloadHost.
func (s *UpdateGroupSettingsReq0Recording) GetCloudRecordingDownloadHost() OptBool {
	return s.CloudRecordingDownloadHost
}

// GetHostDeleteCloudRecording returns the value of HostDeleteCloudRecording.
func (s *UpdateGroupSettingsReq0Recording) GetHostDeleteCloudRecording() OptBool {
	return s.HostDeleteCloudRecording
}

// GetRecordFilesSeparately returns the value of RecordFilesSeparately.
func (s *UpdateGroupSettingsReq0Recording) GetRecordFilesSeparately() OptUpdateGroupSettingsReq0RecordingRecordFilesSeparately {
	return s.RecordFilesSeparately
}

// GetDisplayParticipantName returns the value of DisplayParticipantName.
func (s *UpdateGroupSettingsReq0Recording) GetDisplayParticipantName() OptBool {
	return s.DisplayParticipantName
}

// GetRecordingThumbnails returns the value of RecordingThumbnails.
func (s *UpdateGroupSettingsReq0Recording) GetRecordingThumbnails() OptBool {
	return s.RecordingThumbnails
}

// GetOptimizeRecordingFor3rdPartyVideoEditor returns the value of OptimizeRecordingFor3rdPartyVideoEditor.
func (s *UpdateGroupSettingsReq0Recording) GetOptimizeRecordingFor3rdPartyVideoEditor() OptBool {
	return s.OptimizeRecordingFor3rdPartyVideoEditor
}

// GetRecordingHighlight returns the value of RecordingHighlight.
func (s *UpdateGroupSettingsReq0Recording) GetRecordingHighlight() OptBool {
	return s.RecordingHighlight
}

// GetSavePanelistChat returns the value of SavePanelistChat.
func (s *UpdateGroupSettingsReq0Recording) GetSavePanelistChat() OptBool {
	return s.SavePanelistChat
}

// GetSavePollResults returns the value of SavePollResults.
func (s *UpdateGroupSettingsReq0Recording) GetSavePollResults() OptBool {
	return s.SavePollResults
}

// GetSaveCloseCaption returns the value of SaveCloseCaption.
func (s *UpdateGroupSettingsReq0Recording) GetSaveCloseCaption() OptBool {
	return s.SaveCloseCaption
}

// GetIPAddressAccessControl returns the value of IPAddressAccessControl.
func (s *UpdateGroupSettingsReq0Recording) GetIPAddressAccessControl() OptUpdateGroupSettingsReq0RecordingIPAddressAccessControl {
	return s.IPAddressAccessControl
}

// GetLocalRecording returns the value of LocalRecording.
func (s *UpdateGroupSettingsReq0Recording) GetLocalRecording() OptBool {
	return s.LocalRecording
}

// GetPreventHostAccessRecording returns the value of PreventHostAccessRecording.
func (s *UpdateGroupSettingsReq0Recording) GetPreventHostAccessRecording() OptBool {
	return s.PreventHostAccessRecording
}

// GetRecordAudioFile returns the value of RecordAudioFile.
func (s *UpdateGroupSettingsReq0Recording) GetRecordAudioFile() OptBool {
	return s.RecordAudioFile
}

// GetRecordGalleryView returns the value of RecordGalleryView.
func (s *UpdateGroupSettingsReq0Recording) GetRecordGalleryView() OptBool {
	return s.RecordGalleryView
}

// GetRecordSpeakerView returns the value of RecordSpeakerView.
func (s *UpdateGroupSettingsReq0Recording) GetRecordSpeakerView() OptBool {
	return s.RecordSpeakerView
}

// GetRecordingAudioTranscript returns the value of RecordingAudioTranscript.
func (s *UpdateGroupSettingsReq0Recording) GetRecordingAudioTranscript() OptBool {
	return s.RecordingAudioTranscript
}

// GetSmartRecording returns the value of SmartRecording.
func (s *UpdateGroupSettingsReq0Recording) GetSmartRecording() OptUpdateGroupSettingsReq0RecordingSmartRecording {
	return s.SmartRecording
}

// GetSaveChatText returns the value of SaveChatText.
func (s *UpdateGroupSettingsReq0Recording) GetSaveChatText() OptBool {
	return s.SaveChatText
}

// GetShowTimestamp returns the value of ShowTimestamp.
func (s *UpdateGroupSettingsReq0Recording) GetShowTimestamp() OptBool {
	return s.ShowTimestamp
}

// SetAccountUserAccessRecording sets the value of AccountUserAccessRecording.
func (s *UpdateGroupSettingsReq0Recording) SetAccountUserAccessRecording(val OptBool) {
	s.AccountUserAccessRecording = val
}

// SetArchive sets the value of Archive.
func (s *UpdateGroupSettingsReq0Recording) SetArchive(val OptUpdateGroupSettingsReq0RecordingArchive) {
	s.Archive = val
}

// SetAutoRecording sets the value of AutoRecording.
func (s *UpdateGroupSettingsReq0Recording) SetAutoRecording(val OptString) {
	s.AutoRecording = val
}

// SetCloudRecording sets the value of CloudRecording.
func (s *UpdateGroupSettingsReq0Recording) SetCloudRecording(val OptBool) {
	s.CloudRecording = val
}

// SetCloudRecordingDownload sets the value of CloudRecordingDownload.
func (s *UpdateGroupSettingsReq0Recording) SetCloudRecordingDownload(val OptBool) {
	s.CloudRecordingDownload = val
}

// SetCloudRecordingDownloadHost sets the value of CloudRecordingDownloadHost.
func (s *UpdateGroupSettingsReq0Recording) SetCloudRecordingDownloadHost(val OptBool) {
	s.CloudRecordingDownloadHost = val
}

// SetHostDeleteCloudRecording sets the value of HostDeleteCloudRecording.
func (s *UpdateGroupSettingsReq0Recording) SetHostDeleteCloudRecording(val OptBool) {
	s.HostDeleteCloudRecording = val
}

// SetRecordFilesSeparately sets the value of RecordFilesSeparately.
func (s *UpdateGroupSettingsReq0Recording) SetRecordFilesSeparately(val OptUpdateGroupSettingsReq0RecordingRecordFilesSeparately) {
	s.RecordFilesSeparately = val
}

// SetDisplayParticipantName sets the value of DisplayParticipantName.
func (s *UpdateGroupSettingsReq0Recording) SetDisplayParticipantName(val OptBool) {
	s.DisplayParticipantName = val
}

// SetRecordingThumbnails sets the value of RecordingThumbnails.
func (s *UpdateGroupSettingsReq0Recording) SetRecordingThumbnails(val OptBool) {
	s.RecordingThumbnails = val
}

// SetOptimizeRecordingFor3rdPartyVideoEditor sets the value of OptimizeRecordingFor3rdPartyVideoEditor.
func (s *UpdateGroupSettingsReq0Recording) SetOptimizeRecordingFor3rdPartyVideoEditor(val OptBool) {
	s.OptimizeRecordingFor3rdPartyVideoEditor = val
}

// SetRecordingHighlight sets the value of RecordingHighlight.
func (s *UpdateGroupSettingsReq0Recording) SetRecordingHighlight(val OptBool) {
	s.RecordingHighlight = val
}

// SetSavePanelistChat sets the value of SavePanelistChat.
func (s *UpdateGroupSettingsReq0Recording) SetSavePanelistChat(val OptBool) {
	s.SavePanelistChat = val
}

// SetSavePollResults sets the value of SavePollResults.
func (s *UpdateGroupSettingsReq0Recording) SetSavePollResults(val OptBool) {
	s.SavePollResults = val
}

// SetSaveCloseCaption sets the value of SaveCloseCaption.
func (s *UpdateGroupSettingsReq0Recording) SetSaveCloseCaption(val OptBool) {
	s.SaveCloseCaption = val
}

// SetIPAddressAccessControl sets the value of IPAddressAccessControl.
func (s *UpdateGroupSettingsReq0Recording) SetIPAddressAccessControl(val OptUpdateGroupSettingsReq0RecordingIPAddressAccessControl) {
	s.IPAddressAccessControl = val
}

// SetLocalRecording sets the value of LocalRecording.
func (s *UpdateGroupSettingsReq0Recording) SetLocalRecording(val OptBool) {
	s.LocalRecording = val
}

// SetPreventHostAccessRecording sets the value of PreventHostAccessRecording.
func (s *UpdateGroupSettingsReq0Recording) SetPreventHostAccessRecording(val OptBool) {
	s.PreventHostAccessRecording = val
}

// SetRecordAudioFile sets the value of RecordAudioFile.
func (s *UpdateGroupSettingsReq0Recording) SetRecordAudioFile(val OptBool) {
	s.RecordAudioFile = val
}

// SetRecordGalleryView sets the value of RecordGalleryView.
func (s *UpdateGroupSettingsReq0Recording) SetRecordGalleryView(val OptBool) {
	s.RecordGalleryView = val
}

// SetRecordSpeakerView sets the value of RecordSpeakerView.
func (s *UpdateGroupSettingsReq0Recording) SetRecordSpeakerView(val OptBool) {
	s.RecordSpeakerView = val
}

// SetRecordingAudioTranscript sets the value of RecordingAudioTranscript.
func (s *UpdateGroupSettingsReq0Recording) SetRecordingAudioTranscript(val OptBool) {
	s.RecordingAudioTranscript = val
}

// SetSmartRecording sets the value of SmartRecording.
func (s *UpdateGroupSettingsReq0Recording) SetSmartRecording(val OptUpdateGroupSettingsReq0RecordingSmartRecording) {
	s.SmartRecording = val
}

// SetSaveChatText sets the value of SaveChatText.
func (s *UpdateGroupSettingsReq0Recording) SetSaveChatText(val OptBool) {
	s.SaveChatText = val
}

// SetShowTimestamp sets the value of ShowTimestamp.
func (s *UpdateGroupSettingsReq0Recording) SetShowTimestamp(val OptBool) {
	s.ShowTimestamp = val
}

// [Archiving solution](https://support.zoom.
// us/hc/en-us/articles/360050431572-Archiving-Meeting-and-Webinar-data) settings. This setting can
// only be used if you have been granted archiving solution access by the Zoom Support team.
type UpdateGroupSettingsReq0RecordingArchive struct {
	// Enable the archiving feature.
	Enable   OptBool                                            `json:"enable"`
	Settings OptUpdateGroupSettingsReq0RecordingArchiveSettings `json:"settings"`
	// Archive types.
	// * `1` - Only meetings are archived.
	// * `2` - Only webinars are archived.
	// * `3` - Both meetings and webinars are archived.
	Type OptInt `json:"type"`
}

// GetEnable returns the value of Enable.
func (s *UpdateGroupSettingsReq0RecordingArchive) GetEnable() OptBool {
	return s.Enable
}

// GetSettings returns the value of Settings.
func (s *UpdateGroupSettingsReq0RecordingArchive) GetSettings() OptUpdateGroupSettingsReq0RecordingArchiveSettings {
	return s.Settings
}

// GetType returns the value of Type.
func (s *UpdateGroupSettingsReq0RecordingArchive) GetType() OptInt {
	return s.Type
}

// SetEnable sets the value of Enable.
func (s *UpdateGroupSettingsReq0RecordingArchive) SetEnable(val OptBool) {
	s.Enable = val
}

// SetSettings sets the value of Settings.
func (s *UpdateGroupSettingsReq0RecordingArchive) SetSettings(val OptUpdateGroupSettingsReq0RecordingArchiveSettings) {
	s.Settings = val
}

// SetType sets the value of Type.
func (s *UpdateGroupSettingsReq0RecordingArchive) SetType(val OptInt) {
	s.Type = val
}

type UpdateGroupSettingsReq0RecordingArchiveSettings struct {
	// Include in-meeting or in-webinar audio in the archive.
	AudioFile OptBool `json:"audio_file"`
	// Include closed caption or transcript in the archive.
	CcTranscriptFile OptBool `json:"cc_transcript_file"`
	// Include in-meeting chat in the archive.
	ChatFile OptBool `json:"chat_file"`
	// Include user email in in-meeting chat file.
	ChatWithSenderEmail OptBool `json:"chat_with_sender_email"`
	// Include in-meeting or in-webinar video in the archive.
	VideoFile OptBool `json:"video_file"`
}

// GetAudioFile returns the value of AudioFile.
func (s *UpdateGroupSettingsReq0RecordingArchiveSettings) GetAudioFile() OptBool {
	return s.AudioFile
}

// GetCcTranscriptFile returns the value of CcTranscriptFile.
func (s *UpdateGroupSettingsReq0RecordingArchiveSettings) GetCcTranscriptFile() OptBool {
	return s.CcTranscriptFile
}

// GetChatFile returns the value of ChatFile.
func (s *UpdateGroupSettingsReq0RecordingArchiveSettings) GetChatFile() OptBool {
	return s.ChatFile
}

// GetChatWithSenderEmail returns the value of ChatWithSenderEmail.
func (s *UpdateGroupSettingsReq0RecordingArchiveSettings) GetChatWithSenderEmail() OptBool {
	return s.ChatWithSenderEmail
}

// GetVideoFile returns the value of VideoFile.
func (s *UpdateGroupSettingsReq0RecordingArchiveSettings) GetVideoFile() OptBool {
	return s.VideoFile
}

// SetAudioFile sets the value of AudioFile.
func (s *UpdateGroupSettingsReq0RecordingArchiveSettings) SetAudioFile(val OptBool) {
	s.AudioFile = val
}

// SetCcTranscriptFile sets the value of CcTranscriptFile.
func (s *UpdateGroupSettingsReq0RecordingArchiveSettings) SetCcTranscriptFile(val OptBool) {
	s.CcTranscriptFile = val
}

// SetChatFile sets the value of ChatFile.
func (s *UpdateGroupSettingsReq0RecordingArchiveSettings) SetChatFile(val OptBool) {
	s.ChatFile = val
}

// SetChatWithSenderEmail sets the value of ChatWithSenderEmail.
func (s *UpdateGroupSettingsReq0RecordingArchiveSettings) SetChatWithSenderEmail(val OptBool) {
	s.ChatWithSenderEmail = val
}

// SetVideoFile sets the value of VideoFile.
func (s *UpdateGroupSettingsReq0RecordingArchiveSettings) SetVideoFile(val OptBool) {
	s.VideoFile = val
}

// Setting to allow cloud recording access only from specific IP address ranges.
type UpdateGroupSettingsReq0RecordingIPAddressAccessControl struct {
	// If set to `true`, this account's the cloud recordings can only be accessed by the IP addresses
	// defined in the `ip_addresses_or_ranges` property.
	Enable OptBool `json:"enable"`
	// IP addresses or ranges that have access to the cloud recordings. Separate multiple IP ranges with
	// comma. Use `n.n.n.n`, `n.n.n.n/n` or `n.n.n.n - n.n.n.n` syntax where n is a number.
	// Examples: `46.33.24.184, 48.99.100.2/25` or `200.181.108.17 - 220.181.108.157`.
	IPAddressesOrRanges OptString `json:"ip_addresses_or_ranges"`
}

// GetEnable returns the value of Enable.
func (s *UpdateGroupSettingsReq0RecordingIPAddressAccessControl) GetEnable() OptBool {
	return s.Enable
}

// GetIPAddressesOrRanges returns the value of IPAddressesOrRanges.
func (s *UpdateGroupSettingsReq0RecordingIPAddressAccessControl) GetIPAddressesOrRanges() OptString {
	return s.IPAddressesOrRanges
}

// SetEnable sets the value of Enable.
func (s *UpdateGroupSettingsReq0RecordingIPAddressAccessControl) SetEnable(val OptBool) {
	s.Enable = val
}

// SetIPAddressesOrRanges sets the value of IPAddressesOrRanges.
func (s *UpdateGroupSettingsReq0RecordingIPAddressAccessControl) SetIPAddressesOrRanges(val OptString) {
	s.IPAddressesOrRanges = val
}

// The account's [**Record active speaker, gallery view and shared screen
// separately**](https://support.zoom.
// us/hc/en-us/articles/360060316092-Changing-basic-and-advanced-cloud-recording-settings#h_01F4CYJTCTXNS2MXH00W9EFG6R) settings.
type UpdateGroupSettingsReq0RecordingRecordFilesSeparately struct {
	// Whether recording only the active speaker is enabled.
	ActiveSpeaker OptBool `json:"active_speaker"`
	// Whether recording only the gallery view is enabled.
	GalleryView OptBool `json:"gallery_view"`
	// Whether recording only shared screen is enabled.
	SharedScreen OptBool `json:"shared_screen"`
}

// GetActiveSpeaker returns the value of ActiveSpeaker.
func (s *UpdateGroupSettingsReq0RecordingRecordFilesSeparately) GetActiveSpeaker() OptBool {
	return s.ActiveSpeaker
}

// GetGalleryView returns the value of GalleryView.
func (s *UpdateGroupSettingsReq0RecordingRecordFilesSeparately) GetGalleryView() OptBool {
	return s.GalleryView
}

// GetSharedScreen returns the value of SharedScreen.
func (s *UpdateGroupSettingsReq0RecordingRecordFilesSeparately) GetSharedScreen() OptBool {
	return s.SharedScreen
}

// SetActiveSpeaker sets the value of ActiveSpeaker.
func (s *UpdateGroupSettingsReq0RecordingRecordFilesSeparately) SetActiveSpeaker(val OptBool) {
	s.ActiveSpeaker = val
}

// SetGalleryView sets the value of GalleryView.
func (s *UpdateGroupSettingsReq0RecordingRecordFilesSeparately) SetGalleryView(val OptBool) {
	s.GalleryView = val
}

// SetSharedScreen sets the value of SharedScreen.
func (s *UpdateGroupSettingsReq0RecordingRecordFilesSeparately) SetSharedScreen(val OptBool) {
	s.SharedScreen = val
}

// By selecting this option, your recording will have meeting smart chapters, and next steps. You are
// directing Zoom to access, process, and use your account's recording data for the purpose of
// analysis and insights.
type UpdateGroupSettingsReq0RecordingSmartRecording struct {
	// By selecting this option, meeting details in the audio transcript will be highlighted. Hosts can
	// modify highlighted sections and generate a video summary (highlighted sections may have a 3-second
	// offset) based on these sections. The summary is for informational purposes only and may not be
	// complete.
	CreateRecordingHighlights OptBool `json:"create_recording_highlights"`
	// By selecting this option, your recording will have chapters with overview. Hosts can edit the
	// chapters.
	CreateSmartChapters OptBool `json:"create_smart_chapters"`
	// By selecting this option, there will be a summary of actions to take after the recorded meeting.
	CreateNextSteps OptBool `json:"create_next_steps"`
}

// GetCreateRecordingHighlights returns the value of CreateRecordingHighlights.
func (s *UpdateGroupSettingsReq0RecordingSmartRecording) GetCreateRecordingHighlights() OptBool {
	return s.CreateRecordingHighlights
}

// GetCreateSmartChapters returns the value of CreateSmartChapters.
func (s *UpdateGroupSettingsReq0RecordingSmartRecording) GetCreateSmartChapters() OptBool {
	return s.CreateSmartChapters
}

// GetCreateNextSteps returns the value of CreateNextSteps.
func (s *UpdateGroupSettingsReq0RecordingSmartRecording) GetCreateNextSteps() OptBool {
	return s.CreateNextSteps
}

// SetCreateRecordingHighlights sets the value of CreateRecordingHighlights.
func (s *UpdateGroupSettingsReq0RecordingSmartRecording) SetCreateRecordingHighlights(val OptBool) {
	s.CreateRecordingHighlights = val
}

// SetCreateSmartChapters sets the value of CreateSmartChapters.
func (s *UpdateGroupSettingsReq0RecordingSmartRecording) SetCreateSmartChapters(val OptBool) {
	s.CreateSmartChapters = val
}

// SetCreateNextSteps sets the value of CreateNextSteps.
func (s *UpdateGroupSettingsReq0RecordingSmartRecording) SetCreateNextSteps(val OptBool) {
	s.CreateNextSteps = val
}

type UpdateGroupSettingsReq0ScheduleMeeting struct {
	// Determine how participants can join the audio portion of the meeting.
	AudioType OptString `json:"audio_type"`
	// If the value is set to `true`, the meeting passcode will be encrypted and included in the join
	// meeting link to allow participants to join with just one click without having to enter the
	// passcode.
	EmbedPasswordInJoinLink OptBool `json:"embed_password_in_join_link"`
	// If join before host option is enabled for a personal meeting, then enforce passcode requirement.
	//
	// Deprecated: schema marks this property as deprecated.
	ForcePmiJbhPassword OptBool `json:"force_pmi_jbh_password"`
	// Start meetings with host video on.
	HostVideo OptBool `json:"host_video"`
	// Allow participants to join the meeting before the host arrives.
	JoinBeforeHost OptBool `json:"join_before_host"`
	// Automatically mute all participants when they join the meeting.
	MuteUponEntry OptBool `json:"mute_upon_entry"`
	// Start meetings with participant video on.
	ParticipantVideo OptBool `json:"participant_video"`
	// Generate and send new passcodes for newly scheduled or edited meetings.
	PstnPasswordProtected OptBool `json:"pstn_password_protected"`
	// Require passcode from all participants before joining a meeting.
	RequirePasswordForAllMeetings OptBool `json:"require_password_for_all_meetings"`
	// If enabled, a random passcode will be generated on the user's end who starts the instant meeting.
	// Other participants will have to enter the passcode to join the meeting. If you use personal
	// meeting ID (PMI) for your instant meetings, this option will be disabled.
	RequirePasswordForInstantMeetings OptBool `json:"require_password_for_instant_meetings"`
	// Indicates whether a passcode is required for [PMI](https://support.zoom.
	// us/hc/en-us/articles/203276937-Using-Personal-Meeting-ID-PMI-) meetings or not.
	// `none` - Do not require passcode for PMI meetings.
	// `all` - Require participants to enter passcode for all PMI enabled meetings.
	// `jbh_only`: Require passcode only for meetings where the **join before host** setting is enabled.
	RequirePasswordForPmiMeetings OptString `json:"require_password_for_pmi_meetings"`
	// Require a passcode for meetings which have already been scheduled.
	RequirePasswordForScheduledMeetings OptBool `json:"require_password_for_scheduled_meetings"`
	// This setting applies for regular meetings that do not use PMI. If enabled, a passcode will be
	// generated while a host schedules a new meeting and participants will be required to enter the
	// passcode before they can join the meeting.
	RequirePasswordForSchedulingNewMeetings OptBool `json:"require_password_for_scheduling_new_meetings"`
	// Receive desktop notification for upcoming meetings.
	UpcomingMeetingReminder OptBool `json:"upcoming_meeting_reminder"`
	// Information about the [**Always display `Zoom Meeting` as the meeting topic**](https://support.
	// zoom.us/hc/en-us/articles/201363253-Changing-account-settings#h_01EG9BJ646V2WJK1S3H2MP6YV6)
	// setting.
	AlwaysDisplayZoomMeetingAsTopic OptUpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic `json:"always_display_zoom_meeting_as_topic"`
	// Information about the [**Always show `Zoom Webinar` as the webinar topic**](https://support.zoom.
	// us/hc/en-us/articles/201363253-Changing-account-settings#h_01EG9BJ646V2WJK1S3H2MP6YV6) setting.
	AlwaysDisplayZoomWebinarAsTopic OptUpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic `json:"always_display_zoom_webinar_as_topic"`
	// Information about the **Enable continuous meeting chat** feature.
	ContinuousMeetingChat OptUpdateGroupSettingsReq0ScheduleMeetingContinuousMeetingChat `json:"continuous_meeting_chat"`
}

// GetAudioType returns the value of AudioType.
func (s *UpdateGroupSettingsReq0ScheduleMeeting) GetAudioType() OptString {
	return s.AudioType
}

// GetEmbedPasswordInJoinLink returns the value of EmbedPasswordInJoinLink.
func (s *UpdateGroupSettingsReq0ScheduleMeeting) GetEmbedPasswordInJoinLink() OptBool {
	return s.EmbedPasswordInJoinLink
}

// GetForcePmiJbhPassword returns the value of ForcePmiJbhPassword.
func (s *UpdateGroupSettingsReq0ScheduleMeeting) GetForcePmiJbhPassword() OptBool {
	return s.ForcePmiJbhPassword
}

// GetHostVideo returns the value of HostVideo.
func (s *UpdateGroupSettingsReq0ScheduleMeeting) GetHostVideo() OptBool {
	return s.HostVideo
}

// GetJoinBeforeHost returns the value of JoinBeforeHost.
func (s *UpdateGroupSettingsReq0ScheduleMeeting) GetJoinBeforeHost() OptBool {
	return s.JoinBeforeHost
}

// GetMuteUponEntry returns the value of MuteUponEntry.
func (s *UpdateGroupSettingsReq0ScheduleMeeting) GetMuteUponEntry() OptBool {
	return s.MuteUponEntry
}

// GetParticipantVideo returns the value of ParticipantVideo.
func (s *UpdateGroupSettingsReq0ScheduleMeeting) GetParticipantVideo() OptBool {
	return s.ParticipantVideo
}

// GetPstnPasswordProtected returns the value of PstnPasswordProtected.
func (s *UpdateGroupSettingsReq0ScheduleMeeting) GetPstnPasswordProtected() OptBool {
	return s.PstnPasswordProtected
}

// GetRequirePasswordForAllMeetings returns the value of RequirePasswordForAllMeetings.
func (s *UpdateGroupSettingsReq0ScheduleMeeting) GetRequirePasswordForAllMeetings() OptBool {
	return s.RequirePasswordForAllMeetings
}

// GetRequirePasswordForInstantMeetings returns the value of RequirePasswordForInstantMeetings.
func (s *UpdateGroupSettingsReq0ScheduleMeeting) GetRequirePasswordForInstantMeetings() OptBool {
	return s.RequirePasswordForInstantMeetings
}

// GetRequirePasswordForPmiMeetings returns the value of RequirePasswordForPmiMeetings.
func (s *UpdateGroupSettingsReq0ScheduleMeeting) GetRequirePasswordForPmiMeetings() OptString {
	return s.RequirePasswordForPmiMeetings
}

// GetRequirePasswordForScheduledMeetings returns the value of RequirePasswordForScheduledMeetings.
func (s *UpdateGroupSettingsReq0ScheduleMeeting) GetRequirePasswordForScheduledMeetings() OptBool {
	return s.RequirePasswordForScheduledMeetings
}

// GetRequirePasswordForSchedulingNewMeetings returns the value of RequirePasswordForSchedulingNewMeetings.
func (s *UpdateGroupSettingsReq0ScheduleMeeting) GetRequirePasswordForSchedulingNewMeetings() OptBool {
	return s.RequirePasswordForSchedulingNewMeetings
}

// GetUpcomingMeetingReminder returns the value of UpcomingMeetingReminder.
func (s *UpdateGroupSettingsReq0ScheduleMeeting) GetUpcomingMeetingReminder() OptBool {
	return s.UpcomingMeetingReminder
}

// GetAlwaysDisplayZoomMeetingAsTopic returns the value of AlwaysDisplayZoomMeetingAsTopic.
func (s *UpdateGroupSettingsReq0ScheduleMeeting) GetAlwaysDisplayZoomMeetingAsTopic() OptUpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic {
	return s.AlwaysDisplayZoomMeetingAsTopic
}

// GetAlwaysDisplayZoomWebinarAsTopic returns the value of AlwaysDisplayZoomWebinarAsTopic.
func (s *UpdateGroupSettingsReq0ScheduleMeeting) GetAlwaysDisplayZoomWebinarAsTopic() OptUpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic {
	return s.AlwaysDisplayZoomWebinarAsTopic
}

// GetContinuousMeetingChat returns the value of ContinuousMeetingChat.
func (s *UpdateGroupSettingsReq0ScheduleMeeting) GetContinuousMeetingChat() OptUpdateGroupSettingsReq0ScheduleMeetingContinuousMeetingChat {
	return s.ContinuousMeetingChat
}

// SetAudioType sets the value of AudioType.
func (s *UpdateGroupSettingsReq0ScheduleMeeting) SetAudioType(val OptString) {
	s.AudioType = val
}

// SetEmbedPasswordInJoinLink sets the value of EmbedPasswordInJoinLink.
func (s *UpdateGroupSettingsReq0ScheduleMeeting) SetEmbedPasswordInJoinLink(val OptBool) {
	s.EmbedPasswordInJoinLink = val
}

// SetForcePmiJbhPassword sets the value of ForcePmiJbhPassword.
func (s *UpdateGroupSettingsReq0ScheduleMeeting) SetForcePmiJbhPassword(val OptBool) {
	s.ForcePmiJbhPassword = val
}

// SetHostVideo sets the value of HostVideo.
func (s *UpdateGroupSettingsReq0ScheduleMeeting) SetHostVideo(val OptBool) {
	s.HostVideo = val
}

// SetJoinBeforeHost sets the value of JoinBeforeHost.
func (s *UpdateGroupSettingsReq0ScheduleMeeting) SetJoinBeforeHost(val OptBool) {
	s.JoinBeforeHost = val
}

// SetMuteUponEntry sets the value of MuteUponEntry.
func (s *UpdateGroupSettingsReq0ScheduleMeeting) SetMuteUponEntry(val OptBool) {
	s.MuteUponEntry = val
}

// SetParticipantVideo sets the value of ParticipantVideo.
func (s *UpdateGroupSettingsReq0ScheduleMeeting) SetParticipantVideo(val OptBool) {
	s.ParticipantVideo = val
}

// SetPstnPasswordProtected sets the value of PstnPasswordProtected.
func (s *UpdateGroupSettingsReq0ScheduleMeeting) SetPstnPasswordProtected(val OptBool) {
	s.PstnPasswordProtected = val
}

// SetRequirePasswordForAllMeetings sets the value of RequirePasswordForAllMeetings.
func (s *UpdateGroupSettingsReq0ScheduleMeeting) SetRequirePasswordForAllMeetings(val OptBool) {
	s.RequirePasswordForAllMeetings = val
}

// SetRequirePasswordForInstantMeetings sets the value of RequirePasswordForInstantMeetings.
func (s *UpdateGroupSettingsReq0ScheduleMeeting) SetRequirePasswordForInstantMeetings(val OptBool) {
	s.RequirePasswordForInstantMeetings = val
}

// SetRequirePasswordForPmiMeetings sets the value of RequirePasswordForPmiMeetings.
func (s *UpdateGroupSettingsReq0ScheduleMeeting) SetRequirePasswordForPmiMeetings(val OptString) {
	s.RequirePasswordForPmiMeetings = val
}

// SetRequirePasswordForScheduledMeetings sets the value of RequirePasswordForScheduledMeetings.
func (s *UpdateGroupSettingsReq0ScheduleMeeting) SetRequirePasswordForScheduledMeetings(val OptBool) {
	s.RequirePasswordForScheduledMeetings = val
}

// SetRequirePasswordForSchedulingNewMeetings sets the value of RequirePasswordForSchedulingNewMeetings.
func (s *UpdateGroupSettingsReq0ScheduleMeeting) SetRequirePasswordForSchedulingNewMeetings(val OptBool) {
	s.RequirePasswordForSchedulingNewMeetings = val
}

// SetUpcomingMeetingReminder sets the value of UpcomingMeetingReminder.
func (s *UpdateGroupSettingsReq0ScheduleMeeting) SetUpcomingMeetingReminder(val OptBool) {
	s.UpcomingMeetingReminder = val
}

// SetAlwaysDisplayZoomMeetingAsTopic sets the value of AlwaysDisplayZoomMeetingAsTopic.
func (s *UpdateGroupSettingsReq0ScheduleMeeting) SetAlwaysDisplayZoomMeetingAsTopic(val OptUpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic) {
	s.AlwaysDisplayZoomMeetingAsTopic = val
}

// SetAlwaysDisplayZoomWebinarAsTopic sets the value of AlwaysDisplayZoomWebinarAsTopic.
func (s *UpdateGroupSettingsReq0ScheduleMeeting) SetAlwaysDisplayZoomWebinarAsTopic(val OptUpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic) {
	s.AlwaysDisplayZoomWebinarAsTopic = val
}

// SetContinuousMeetingChat sets the value of ContinuousMeetingChat.
func (s *UpdateGroupSettingsReq0ScheduleMeeting) SetContinuousMeetingChat(val OptUpdateGroupSettingsReq0ScheduleMeetingContinuousMeetingChat) {
	s.ContinuousMeetingChat = val
}

// Information about the [**Always display `Zoom Meeting` as the meeting topic**](https://support.
// zoom.us/hc/en-us/articles/201363253-Changing-account-settings#h_01EG9BJ646V2WJK1S3H2MP6YV6)
// setting.
type UpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic struct {
	// Whether to enable the **Always display `Zoom Meeting` as the meeting topic** setting.
	Enable OptBool `json:"enable"`
	// Whether to display **Zoom Meeting** as the topic for already-scheduled meetings.
	DisplayTopicForScheduledMeetings OptBool `json:"display_topic_for_scheduled_meetings"`
}

// GetEnable returns the value of Enable.
func (s *UpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic) GetEnable() OptBool {
	return s.Enable
}

// GetDisplayTopicForScheduledMeetings returns the value of DisplayTopicForScheduledMeetings.
func (s *UpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic) GetDisplayTopicForScheduledMeetings() OptBool {
	return s.DisplayTopicForScheduledMeetings
}

// SetEnable sets the value of Enable.
func (s *UpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic) SetEnable(val OptBool) {
	s.Enable = val
}

// SetDisplayTopicForScheduledMeetings sets the value of DisplayTopicForScheduledMeetings.
func (s *UpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic) SetDisplayTopicForScheduledMeetings(val OptBool) {
	s.DisplayTopicForScheduledMeetings = val
}

// Information about the [**Always show `Zoom Webinar` as the webinar topic**](https://support.zoom.
// us/hc/en-us/articles/201363253-Changing-account-settings#h_01EG9BJ646V2WJK1S3H2MP6YV6) setting.
type UpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic struct {
	// Whether to enable the **Always show `Zoom Webinar` as the webinar topic** setting.
	Enable OptBool `json:"enable"`
	// Whether to display **Zoom Webinar** as the topic for already-scheduled meetings.
	DisplayTopicForScheduledWebinars OptBool `json:"display_topic_for_scheduled_webinars"`
}

// GetEnable returns the value of Enable.
func (s *UpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic) GetEnable() OptBool {
	return s.Enable
}

// GetDisplayTopicForScheduledWebinars returns the value of DisplayTopicForScheduledWebinars.
func (s *UpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic) GetDisplayTopicForScheduledWebinars() OptBool {
	return s.DisplayTopicForScheduledWebinars
}

// SetEnable sets the value of Enable.
func (s *UpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic) SetEnable(val OptBool) {
	s.Enable = val
}

// SetDisplayTopicForScheduledWebinars sets the value of DisplayTopicForScheduledWebinars.
func (s *UpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic) SetDisplayTopicForScheduledWebinars(val OptBool) {
	s.DisplayTopicForScheduledWebinars = val
}

// Information about the **Enable continuous meeting chat** feature.
type UpdateGroupSettingsReq0ScheduleMeetingContinuousMeetingChat struct {
	// Whether to enable the **Enable continuous meeting chat** setting.
	Enable OptBool `json:"enable"`
	// Whether to enable the **External users can be added** setting.
	CanAddExternalUsers OptBool `json:"can_add_external_users"`
	// Whether to enable the **Automatically add invited external users** setting.
	AutoAddInvitedExternalUsers OptBool `json:"auto_add_invited_external_users"`
}

// GetEnable returns the value of Enable.
func (s *UpdateGroupSettingsReq0ScheduleMeetingContinuousMeetingChat) GetEnable() OptBool {
	return s.Enable
}

// GetCanAddExternalUsers returns the value of CanAddExternalUsers.
func (s *UpdateGroupSettingsReq0ScheduleMeetingContinuousMeetingChat) GetCanAddExternalUsers() OptBool {
	return s.CanAddExternalUsers
}

// GetAutoAddInvitedExternalUsers returns the value of AutoAddInvitedExternalUsers.
func (s *UpdateGroupSettingsReq0ScheduleMeetingContinuousMeetingChat) GetAutoAddInvitedExternalUsers() OptBool {
	return s.AutoAddInvitedExternalUsers
}

// SetEnable sets the value of Enable.
func (s *UpdateGroupSettingsReq0ScheduleMeetingContinuousMeetingChat) SetEnable(val OptBool) {
	s.Enable = val
}

// SetCanAddExternalUsers sets the value of CanAddExternalUsers.
func (s *UpdateGroupSettingsReq0ScheduleMeetingContinuousMeetingChat) SetCanAddExternalUsers(val OptBool) {
	s.CanAddExternalUsers = val
}

// SetAutoAddInvitedExternalUsers sets the value of AutoAddInvitedExternalUsers.
func (s *UpdateGroupSettingsReq0ScheduleMeetingContinuousMeetingChat) SetAutoAddInvitedExternalUsers(val OptBool) {
	s.AutoAddInvitedExternalUsers = val
}

type UpdateGroupSettingsReq0Telephony struct {
	AudioConferenceInfo OptString `json:"audio_conference_info"`
	// Allow users to join the meeting using the existing 3rd party audio configuration.
	ThirdPartyAudio OptBool `json:"third_party_audio"`
}

// GetAudioConferenceInfo returns the value of AudioConferenceInfo.
func (s *UpdateGroupSettingsReq0Telephony) GetAudioConferenceInfo() OptString {
	return s.AudioConferenceInfo
}

// GetThirdPartyAudio returns the value of ThirdPartyAudio.
func (s *UpdateGroupSettingsReq0Telephony) GetThirdPartyAudio() OptBool {
	return s.ThirdPartyAudio
}

// SetAudioConferenceInfo sets the value of AudioConferenceInfo.
func (s *UpdateGroupSettingsReq0Telephony) SetAudioConferenceInfo(val OptString) {
	s.AudioConferenceInfo = val
}

// SetThirdPartyAudio sets the value of ThirdPartyAudio.
func (s *UpdateGroupSettingsReq0Telephony) SetThirdPartyAudio(val OptBool) {
	s.ThirdPartyAudio = val
}

type UpdateGroupSettingsReq1 struct {
	// Meeting Authentication Options.
	AuthenticationOption OptUpdateGroupSettingsReq1AuthenticationOption `json:"authentication_option"`
	// Only authenticated users can join meetings.
	MeetingAuthentication OptBool `json:"meeting_authentication"`
}

// GetAuthenticationOption returns the value of AuthenticationOption.
func (s *UpdateGroupSettingsReq1) GetAuthenticationOption() OptUpdateGroupSettingsReq1AuthenticationOption {
	return s.AuthenticationOption
}

// GetMeetingAuthentication returns the value of MeetingAuthentication.
func (s *UpdateGroupSettingsReq1) GetMeetingAuthentication() OptBool {
	return s.MeetingAuthentication
}

// SetAuthenticationOption sets the value of AuthenticationOption.
func (s *UpdateGroupSettingsReq1) SetAuthenticationOption(val OptUpdateGroupSettingsReq1AuthenticationOption) {
	s.AuthenticationOption = val
}

// SetMeetingAuthentication sets the value of MeetingAuthentication.
func (s *UpdateGroupSettingsReq1) SetMeetingAuthentication(val OptBool) {
	s.MeetingAuthentication = val
}

// Meeting Authentication Options.
type UpdateGroupSettingsReq1AuthenticationOption struct {
	// Authentication action.
	Action OptString `json:"action"`
	// Authentication default option.
	DefaultOption OptBool `json:"default_option"`
	// Authentication domains.
	Domains OptString `json:"domains"`
	// Authentication id.
	ID OptString `json:"id"`
	// Authentication name.
	Name OptString `json:"name"`
	// Authentication type. Specify one of the following authentication types for the authentication
	// profile:
	// * `enforce_login`: This option allows any users to join the meeting or webinar, as long as they
	// are signed into their Zoom account.
	// * `enforce_login_with_domains`: This option, allows you to specify a rule so that only those Zoom
	// users whose email addresses contain a certain domain, can join the meeting or webinar. You can
	// either add multiple domains using a comma in between and/or use a wildcard for listing domains.
	// * `enforce_login_with_same_account`: This option allows users to join the meeting or webinar with
	// the same Zoom account.
	Type OptString `json:"type"`
}

// GetAction returns the value of Action.
func (s *UpdateGroupSettingsReq1AuthenticationOption) GetAction() OptString {
	return s.Action
}

// GetDefaultOption returns the value of DefaultOption.
func (s *UpdateGroupSettingsReq1AuthenticationOption) GetDefaultOption() OptBool {
	return s.DefaultOption
}

// GetDomains returns the value of Domains.
func (s *UpdateGroupSettingsReq1AuthenticationOption) GetDomains() OptString {
	return s.Domains
}

// GetID returns the value of ID.
func (s *UpdateGroupSettingsReq1AuthenticationOption) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *UpdateGroupSettingsReq1AuthenticationOption) GetName() OptString {
	return s.Name
}

// GetType returns the value of Type.
func (s *UpdateGroupSettingsReq1AuthenticationOption) GetType() OptString {
	return s.Type
}

// SetAction sets the value of Action.
func (s *UpdateGroupSettingsReq1AuthenticationOption) SetAction(val OptString) {
	s.Action = val
}

// SetDefaultOption sets the value of DefaultOption.
func (s *UpdateGroupSettingsReq1AuthenticationOption) SetDefaultOption(val OptBool) {
	s.DefaultOption = val
}

// SetDomains sets the value of Domains.
func (s *UpdateGroupSettingsReq1AuthenticationOption) SetDomains(val OptString) {
	s.Domains = val
}

// SetID sets the value of ID.
func (s *UpdateGroupSettingsReq1AuthenticationOption) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *UpdateGroupSettingsReq1AuthenticationOption) SetName(val OptString) {
	s.Name = val
}

// SetType sets the value of Type.
func (s *UpdateGroupSettingsReq1AuthenticationOption) SetType(val OptString) {
	s.Type = val
}

type UpdateGroupSettingsReq2 struct {
	// Authentication Options.
	AuthenticationOption OptUpdateGroupSettingsReq2AuthenticationOption `json:"authentication_option"`
	// Only authenticated users can view cloud recordings.
	RecordingAuthentication OptBool `json:"recording_authentication"`
}

// GetAuthenticationOption returns the value of AuthenticationOption.
func (s *UpdateGroupSettingsReq2) GetAuthenticationOption() OptUpdateGroupSettingsReq2AuthenticationOption {
	return s.AuthenticationOption
}

// GetRecordingAuthentication returns the value of RecordingAuthentication.
func (s *UpdateGroupSettingsReq2) GetRecordingAuthentication() OptBool {
	return s.RecordingAuthentication
}

// SetAuthenticationOption sets the value of AuthenticationOption.
func (s *UpdateGroupSettingsReq2) SetAuthenticationOption(val OptUpdateGroupSettingsReq2AuthenticationOption) {
	s.AuthenticationOption = val
}

// SetRecordingAuthentication sets the value of RecordingAuthentication.
func (s *UpdateGroupSettingsReq2) SetRecordingAuthentication(val OptBool) {
	s.RecordingAuthentication = val
}

// Authentication Options.
type UpdateGroupSettingsReq2AuthenticationOption struct {
	// Authentication action.
	Action OptString `json:"action"`
	// Authentication default option.
	DefaultOption OptBool `json:"default_option"`
	// Authentication domains.
	Domains OptString `json:"domains"`
	// Authentication id.
	ID OptString `json:"id"`
	// Authentication name.
	Name OptString `json:"name"`
	// Authentication type.
	Type OptString `json:"type"`
}

// GetAction returns the value of Action.
func (s *UpdateGroupSettingsReq2AuthenticationOption) GetAction() OptString {
	return s.Action
}

// GetDefaultOption returns the value of DefaultOption.
func (s *UpdateGroupSettingsReq2AuthenticationOption) GetDefaultOption() OptBool {
	return s.DefaultOption
}

// GetDomains returns the value of Domains.
func (s *UpdateGroupSettingsReq2AuthenticationOption) GetDomains() OptString {
	return s.Domains
}

// GetID returns the value of ID.
func (s *UpdateGroupSettingsReq2AuthenticationOption) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *UpdateGroupSettingsReq2AuthenticationOption) GetName() OptString {
	return s.Name
}

// GetType returns the value of Type.
func (s *UpdateGroupSettingsReq2AuthenticationOption) GetType() OptString {
	return s.Type
}

// SetAction sets the value of Action.
func (s *UpdateGroupSettingsReq2AuthenticationOption) SetAction(val OptString) {
	s.Action = val
}

// SetDefaultOption sets the value of DefaultOption.
func (s *UpdateGroupSettingsReq2AuthenticationOption) SetDefaultOption(val OptBool) {
	s.DefaultOption = val
}

// SetDomains sets the value of Domains.
func (s *UpdateGroupSettingsReq2AuthenticationOption) SetDomains(val OptString) {
	s.Domains = val
}

// SetID sets the value of ID.
func (s *UpdateGroupSettingsReq2AuthenticationOption) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *UpdateGroupSettingsReq2AuthenticationOption) SetName(val OptString) {
	s.Name = val
}

// SetType sets the value of Type.
func (s *UpdateGroupSettingsReq2AuthenticationOption) SetType(val OptString) {
	s.Type = val
}

// The group's updated meeting and webinar security settings.
type UpdateGroupSettingsReq3 struct {
	MeetingSecurity OptUpdateGroupSettingsReq3MeetingSecurity `json:"meeting_security"`
}

// GetMeetingSecurity returns the value of MeetingSecurity.
func (s *UpdateGroupSettingsReq3) GetMeetingSecurity() OptUpdateGroupSettingsReq3MeetingSecurity {
	return s.MeetingSecurity
}

// SetMeetingSecurity sets the value of MeetingSecurity.
func (s *UpdateGroupSettingsReq3) SetMeetingSecurity(val OptUpdateGroupSettingsReq3MeetingSecurity) {
	s.MeetingSecurity = val
}

type UpdateGroupSettingsReq3MeetingSecurity struct {
	// Whether to require that all meetings are secured with at least one security option.
	// This setting can only be disabled by Enterprise, ISV, Business (with more than 100 licenses), and
	// Education accounts.
	AutoSecurity OptBool `json:"auto_security"`
	// Whether to block users in specific domains from joining meetings and webinars.
	BlockUserDomain OptBool `json:"block_user_domain"`
	// The domain to block, up to 20 domains. For example, the `*.example.com` domain.
	BlockUserDomainList []string `json:"block_user_domain_list"`
	// Information about the **Chat Etiquette** Tool.
	ChatEtiquetteTool OptUpdateGroupSettingsReq3MeetingSecurityChatEtiquetteTool `json:"chat_etiquette_tool"`
	// Whether the meeting passcode will be encrypted and included in the invitation link. The provided
	// link will allow participants to join the meeting without having to enter the passcode.
	EmbedPasswordInJoinLink OptBool `json:"embed_password_in_join_link"`
	// The type of encryption to use when starting a meeting:
	// * `enhanced_encryption` - Use enhanced encryption. Encryption data is stored in the cloud.
	// * `e2ee` - End-to-end encryption. The encryption key is stored on the local device and cannot be
	// obtained by anyone else. Enabling E2EE also [**disables** certain features](https://support.zoom.
	// us/hc/en-us/articles/360048660871), such as cloud recording, live streaming, and allowing
	// participants to join before the host.
	EncryptionType OptString `json:"encryption_type"`
	// Whether to enable end-to-end encryption for meetings. If enabled, you can specify the type of
	// encryption in the `encryption_type` field.
	EndToEndEncryptedMeetings OptBool `json:"end_to_end_encrypted_meetings"`
	// Whether all instant and scheduled meetings that users can join via client or Zoom Rooms systems
	// are passcode-protected. [Personal Meeting ID (PMI)](https://support.zoom.
	// us/hc/en-us/articles/203276937) meetings are **not** included in this setting.
	MeetingPassword OptBool `json:"meeting_password"`
	// Information about the meeting and webinar [passcode requirements](https://support.zoom.
	// us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
	MeetingPasswordRequirement OptUpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement `json:"meeting_password_requirement"`
	// Whether to specify that only authenticated users can join the meeting from the web client.
	OnlyAuthenticatedCanJoinFromWebclient OptBool `json:"only_authenticated_can_join_from_webclient"`
	// Whether to require a passcode for participants joining by phone.
	// If enabled and the meeting is passcode-protected, a numeric passcode is required for participants
	// to join by phone. For meetings with alphanumeric passcodes, a numeric passcode will be generated.
	PhonePassword OptBool `json:"phone_password"`
	// Whether all PMI meetings that users can join via client or Zoom Rooms systems are
	// passcode-protected.
	PmiPassword OptBool `json:"pmi_password"`
	// Whether to require a passcode for meetings that have already been scheduled.
	RequirePasswordForScheduledMeeting OptBool `json:"require_password_for_scheduled_meeting"`
	// Whether to require a passcode for webinars that have already been scheduled.
	RequirePasswordForScheduledWebinar OptBool `json:"require_password_for_scheduled_webinar"`
	// Whether participants are placed in the [**waiting room**](https://support.zoom.
	// us/hc/en-us/articles/115000332726-Waiting-Room) when they join a meeting.
	// If the **Waiting Room** feature is enabled, the [**Allow participants to join before
	// host**](https://support.zoom.
	// us/hc/en-us/articles/202828525-Allow-participants-to-join-before-host) setting is automatically
	// disabled.
	WaitingRoom OptBool `json:"waiting_room"`
	// Information about the waiting room settings.
	WaitingRoomSettings OptUpdateGroupSettingsReq3MeetingSecurityWaitingRoomSettings `json:"waiting_room_settings"`
	// Whether to generate a passcode when scheduling webinars. Participants must use the generated
	// passcode to join the scheduled webinar.
	WebinarPassword OptBool `json:"webinar_password"`
}

// GetAutoSecurity returns the value of AutoSecurity.
func (s *UpdateGroupSettingsReq3MeetingSecurity) GetAutoSecurity() OptBool {
	return s.AutoSecurity
}

// GetBlockUserDomain returns the value of BlockUserDomain.
func (s *UpdateGroupSettingsReq3MeetingSecurity) GetBlockUserDomain() OptBool {
	return s.BlockUserDomain
}

// GetBlockUserDomainList returns the value of BlockUserDomainList.
func (s *UpdateGroupSettingsReq3MeetingSecurity) GetBlockUserDomainList() []string {
	return s.BlockUserDomainList
}

// GetChatEtiquetteTool returns the value of ChatEtiquetteTool.
func (s *UpdateGroupSettingsReq3MeetingSecurity) GetChatEtiquetteTool() OptUpdateGroupSettingsReq3MeetingSecurityChatEtiquetteTool {
	return s.ChatEtiquetteTool
}

// GetEmbedPasswordInJoinLink returns the value of EmbedPasswordInJoinLink.
func (s *UpdateGroupSettingsReq3MeetingSecurity) GetEmbedPasswordInJoinLink() OptBool {
	return s.EmbedPasswordInJoinLink
}

// GetEncryptionType returns the value of EncryptionType.
func (s *UpdateGroupSettingsReq3MeetingSecurity) GetEncryptionType() OptString {
	return s.EncryptionType
}

// GetEndToEndEncryptedMeetings returns the value of EndToEndEncryptedMeetings.
func (s *UpdateGroupSettingsReq3MeetingSecurity) GetEndToEndEncryptedMeetings() OptBool {
	return s.EndToEndEncryptedMeetings
}

// GetMeetingPassword returns the value of MeetingPassword.
func (s *UpdateGroupSettingsReq3MeetingSecurity) GetMeetingPassword() OptBool {
	return s.MeetingPassword
}

// GetMeetingPasswordRequirement returns the value of MeetingPasswordRequirement.
func (s *UpdateGroupSettingsReq3MeetingSecurity) GetMeetingPasswordRequirement() OptUpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement {
	return s.MeetingPasswordRequirement
}

// GetOnlyAuthenticatedCanJoinFromWebclient returns the value of OnlyAuthenticatedCanJoinFromWebclient.
func (s *UpdateGroupSettingsReq3MeetingSecurity) GetOnlyAuthenticatedCanJoinFromWebclient() OptBool {
	return s.OnlyAuthenticatedCanJoinFromWebclient
}

// GetPhonePassword returns the value of PhonePassword.
func (s *UpdateGroupSettingsReq3MeetingSecurity) GetPhonePassword() OptBool {
	return s.PhonePassword
}

// GetPmiPassword returns the value of PmiPassword.
func (s *UpdateGroupSettingsReq3MeetingSecurity) GetPmiPassword() OptBool {
	return s.PmiPassword
}

// GetRequirePasswordForScheduledMeeting returns the value of RequirePasswordForScheduledMeeting.
func (s *UpdateGroupSettingsReq3MeetingSecurity) GetRequirePasswordForScheduledMeeting() OptBool {
	return s.RequirePasswordForScheduledMeeting
}

// GetRequirePasswordForScheduledWebinar returns the value of RequirePasswordForScheduledWebinar.
func (s *UpdateGroupSettingsReq3MeetingSecurity) GetRequirePasswordForScheduledWebinar() OptBool {
	return s.RequirePasswordForScheduledWebinar
}

// GetWaitingRoom returns the value of WaitingRoom.
func (s *UpdateGroupSettingsReq3MeetingSecurity) GetWaitingRoom() OptBool {
	return s.WaitingRoom
}

// GetWaitingRoomSettings returns the value of WaitingRoomSettings.
func (s *UpdateGroupSettingsReq3MeetingSecurity) GetWaitingRoomSettings() OptUpdateGroupSettingsReq3MeetingSecurityWaitingRoomSettings {
	return s.WaitingRoomSettings
}

// GetWebinarPassword returns the value of WebinarPassword.
func (s *UpdateGroupSettingsReq3MeetingSecurity) GetWebinarPassword() OptBool {
	return s.WebinarPassword
}

// SetAutoSecurity sets the value of AutoSecurity.
func (s *UpdateGroupSettingsReq3MeetingSecurity) SetAutoSecurity(val OptBool) {
	s.AutoSecurity = val
}

// SetBlockUserDomain sets the value of BlockUserDomain.
func (s *UpdateGroupSettingsReq3MeetingSecurity) SetBlockUserDomain(val OptBool) {
	s.BlockUserDomain = val
}

// SetBlockUserDomainList sets the value of BlockUserDomainList.
func (s *UpdateGroupSettingsReq3MeetingSecurity) SetBlockUserDomainList(val []string) {
	s.BlockUserDomainList = val
}

// SetChatEtiquetteTool sets the value of ChatEtiquetteTool.
func (s *UpdateGroupSettingsReq3MeetingSecurity) SetChatEtiquetteTool(val OptUpdateGroupSettingsReq3MeetingSecurityChatEtiquetteTool) {
	s.ChatEtiquetteTool = val
}

// SetEmbedPasswordInJoinLink sets the value of EmbedPasswordInJoinLink.
func (s *UpdateGroupSettingsReq3MeetingSecurity) SetEmbedPasswordInJoinLink(val OptBool) {
	s.EmbedPasswordInJoinLink = val
}

// SetEncryptionType sets the value of EncryptionType.
func (s *UpdateGroupSettingsReq3MeetingSecurity) SetEncryptionType(val OptString) {
	s.EncryptionType = val
}

// SetEndToEndEncryptedMeetings sets the value of EndToEndEncryptedMeetings.
func (s *UpdateGroupSettingsReq3MeetingSecurity) SetEndToEndEncryptedMeetings(val OptBool) {
	s.EndToEndEncryptedMeetings = val
}

// SetMeetingPassword sets the value of MeetingPassword.
func (s *UpdateGroupSettingsReq3MeetingSecurity) SetMeetingPassword(val OptBool) {
	s.MeetingPassword = val
}

// SetMeetingPasswordRequirement sets the value of MeetingPasswordRequirement.
func (s *UpdateGroupSettingsReq3MeetingSecurity) SetMeetingPasswordRequirement(val OptUpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement) {
	s.MeetingPasswordRequirement = val
}

// SetOnlyAuthenticatedCanJoinFromWebclient sets the value of OnlyAuthenticatedCanJoinFromWebclient.
func (s *UpdateGroupSettingsReq3MeetingSecurity) SetOnlyAuthenticatedCanJoinFromWebclient(val OptBool) {
	s.OnlyAuthenticatedCanJoinFromWebclient = val
}

// SetPhonePassword sets the value of PhonePassword.
func (s *UpdateGroupSettingsReq3MeetingSecurity) SetPhonePassword(val OptBool) {
	s.PhonePassword = val
}

// SetPmiPassword sets the value of PmiPassword.
func (s *UpdateGroupSettingsReq3MeetingSecurity) SetPmiPassword(val OptBool) {
	s.PmiPassword = val
}

// SetRequirePasswordForScheduledMeeting sets the value of RequirePasswordForScheduledMeeting.
func (s *UpdateGroupSettingsReq3MeetingSecurity) SetRequirePasswordForScheduledMeeting(val OptBool) {
	s.RequirePasswordForScheduledMeeting = val
}

// SetRequirePasswordForScheduledWebinar sets the value of RequirePasswordForScheduledWebinar.
func (s *UpdateGroupSettingsReq3MeetingSecurity) SetRequirePasswordForScheduledWebinar(val OptBool) {
	s.RequirePasswordForScheduledWebinar = val
}

// SetWaitingRoom sets the value of WaitingRoom.
func (s *UpdateGroupSettingsReq3MeetingSecurity) SetWaitingRoom(val OptBool) {
	s.WaitingRoom = val
}

// SetWaitingRoomSettings sets the value of WaitingRoomSettings.
func (s *UpdateGroupSettingsReq3MeetingSecurity) SetWaitingRoomSettings(val OptUpdateGroupSettingsReq3MeetingSecurityWaitingRoomSettings) {
	s.WaitingRoomSettings = val
}

// SetWebinarPassword sets the value of WebinarPassword.
func (s *UpdateGroupSettingsReq3MeetingSecurity) SetWebinarPassword(val OptBool) {
	s.WebinarPassword = val
}

// Information about the **Chat Etiquette** Tool.
type UpdateGroupSettingsReq3MeetingSecurityChatEtiquetteTool struct {
	// Whether to enable the **Chat Etiquette Tool**. This value defaults to `false`.
	// The **Chat Etiquette Tool** allows you to define specific keywords and text patterns in chat to
	// prevent users from inadvertently sharing unwanted messages.
	Enable OptBool `json:"enable"`
	// Information about the defined **Chat Etiquette Tool** policies.
	Policies []UpdateGroupSettingsReq3MeetingSecurityChatEtiquetteToolPoliciesItem `json:"policies"`
}

// GetEnable returns the value of Enable.
func (s *UpdateGroupSettingsReq3MeetingSecurityChatEtiquetteTool) GetEnable() OptBool {
	return s.Enable
}

// GetPolicies returns the value of Policies.
func (s *UpdateGroupSettingsReq3MeetingSecurityChatEtiquetteTool) GetPolicies() []UpdateGroupSettingsReq3MeetingSecurityChatEtiquetteToolPoliciesItem {
	return s.Policies
}

// SetEnable sets the value of Enable.
func (s *UpdateGroupSettingsReq3MeetingSecurityChatEtiquetteTool) SetEnable(val OptBool) {
	s.Enable = val
}

// SetPolicies sets the value of Policies.
func (s *UpdateGroupSettingsReq3MeetingSecurityChatEtiquetteTool) SetPolicies(val []UpdateGroupSettingsReq3MeetingSecurityChatEtiquetteToolPoliciesItem) {
	s.Policies = val
}

type UpdateGroupSettingsReq3MeetingSecurityChatEtiquetteToolPoliciesItem struct {
	// The policy ID.
	ID OptString `json:"id"`
	// The policy's current status:
	// * `activated` - Activated.
	// * `deactivated` - Deactivated.
	Status OptString `json:"status"`
}

// GetID returns the value of ID.
func (s *UpdateGroupSettingsReq3MeetingSecurityChatEtiquetteToolPoliciesItem) GetID() OptString {
	return s.ID
}

// GetStatus returns the value of Status.
func (s *UpdateGroupSettingsReq3MeetingSecurityChatEtiquetteToolPoliciesItem) GetStatus() OptString {
	return s.Status
}

// SetID sets the value of ID.
func (s *UpdateGroupSettingsReq3MeetingSecurityChatEtiquetteToolPoliciesItem) SetID(val OptString) {
	s.ID = val
}

// SetStatus sets the value of Status.
func (s *UpdateGroupSettingsReq3MeetingSecurityChatEtiquetteToolPoliciesItem) SetStatus(val OptString) {
	s.Status = val
}

// Information about the meeting and webinar [passcode requirements](https://support.zoom.
// us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
type UpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement struct {
	// The maximum length of consecutive characters (for example, `abcdef`) allowed in a passcode.
	// * `4` through `8` - The maximum consecutive characters length. The length is `n` minus `1`, where
	// `n` is the provided value. For example, if you provide the `4` value, there can only be a maximum
	// of `3` consecutive characters in a passcode, such as `abc1x@8fdh`.
	// * `0` - Do not apply a consecutive character restriction.
	ConsecutiveCharactersLength OptInt `json:"consecutive_characters_length"`
	// Whether the passcode must contain at least one alphabetic character.
	HaveLetter OptBool `json:"have_letter"`
	// Whether the passcode must contain at least one numeric character.
	HaveNumber OptBool `json:"have_number"`
	// Whether the passcode must contain at least one special character. For example, `!`, `@`, and/or
	// `#` characters.
	HaveSpecialCharacter OptBool `json:"have_special_character"`
	// Whether the passcode must include uppercase and lowercase characters.
	HaveUpperAndLowerCharacters OptBool `json:"have_upper_and_lower_characters"`
	// The passcode's minimum length.
	Length OptInt `json:"length"`
	// Whether the passcode must contain **only** numeric characters.
	OnlyAllowNumeric OptBool `json:"only_allow_numeric"`
	// Whether users will be informed when the provided passcode is weak.
	WeakEnhanceDetection OptBool `json:"weak_enhance_detection"`
}

// GetConsecutiveCharactersLength returns the value of ConsecutiveCharactersLength.
func (s *UpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement) GetConsecutiveCharactersLength() OptInt {
	return s.ConsecutiveCharactersLength
}

// GetHaveLetter returns the value of HaveLetter.
func (s *UpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement) GetHaveLetter() OptBool {
	return s.HaveLetter
}

// GetHaveNumber returns the value of HaveNumber.
func (s *UpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement) GetHaveNumber() OptBool {
	return s.HaveNumber
}

// GetHaveSpecialCharacter returns the value of HaveSpecialCharacter.
func (s *UpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement) GetHaveSpecialCharacter() OptBool {
	return s.HaveSpecialCharacter
}

// GetHaveUpperAndLowerCharacters returns the value of HaveUpperAndLowerCharacters.
func (s *UpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement) GetHaveUpperAndLowerCharacters() OptBool {
	return s.HaveUpperAndLowerCharacters
}

// GetLength returns the value of Length.
func (s *UpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement) GetLength() OptInt {
	return s.Length
}

// GetOnlyAllowNumeric returns the value of OnlyAllowNumeric.
func (s *UpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement) GetOnlyAllowNumeric() OptBool {
	return s.OnlyAllowNumeric
}

// GetWeakEnhanceDetection returns the value of WeakEnhanceDetection.
func (s *UpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement) GetWeakEnhanceDetection() OptBool {
	return s.WeakEnhanceDetection
}

// SetConsecutiveCharactersLength sets the value of ConsecutiveCharactersLength.
func (s *UpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement) SetConsecutiveCharactersLength(val OptInt) {
	s.ConsecutiveCharactersLength = val
}

// SetHaveLetter sets the value of HaveLetter.
func (s *UpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement) SetHaveLetter(val OptBool) {
	s.HaveLetter = val
}

// SetHaveNumber sets the value of HaveNumber.
func (s *UpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement) SetHaveNumber(val OptBool) {
	s.HaveNumber = val
}

// SetHaveSpecialCharacter sets the value of HaveSpecialCharacter.
func (s *UpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement) SetHaveSpecialCharacter(val OptBool) {
	s.HaveSpecialCharacter = val
}

// SetHaveUpperAndLowerCharacters sets the value of HaveUpperAndLowerCharacters.
func (s *UpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement) SetHaveUpperAndLowerCharacters(val OptBool) {
	s.HaveUpperAndLowerCharacters = val
}

// SetLength sets the value of Length.
func (s *UpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement) SetLength(val OptInt) {
	s.Length = val
}

// SetOnlyAllowNumeric sets the value of OnlyAllowNumeric.
func (s *UpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement) SetOnlyAllowNumeric(val OptBool) {
	s.OnlyAllowNumeric = val
}

// SetWeakEnhanceDetection sets the value of WeakEnhanceDetection.
func (s *UpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement) SetWeakEnhanceDetection(val OptBool) {
	s.WeakEnhanceDetection = val
}

// Information about the waiting room settings.
type UpdateGroupSettingsReq3MeetingSecurityWaitingRoomSettings struct {
	// The type of participants to be admitted to the waiting room.
	// * `0` - All attendees.
	// * `1` - Users who are not in your account.
	// * `2` - Users who are not in your account and are not part of your [allowed domains
	// list](https://support.zoom.
	// us/hc/en-us/articles/360037117472-Configuring-authentication-profiles#h_e3cf0d5f-eec7-4c2a-ad29-ef2a5079a7da).
	ParticipantsToPlaceInWaitingRoom OptInt `json:"participants_to_place_in_waiting_room"`
	// The users who can admit participants from the waiting room.
	// * `0` - Host and co-hosts only.
	// * `1` - Host, co-hosts, and anyone who bypassed the waiting room if the host and co-hosts are not
	// present.
	UsersWhoCanAdmitParticipantsFromWaitingRoom OptInt `json:"users_who_can_admit_participants_from_waiting_room"`
	// If the `participants_to_place_in_waiting_room` field is `2`, a comma-separated list of the domains
	// that can bypass the waiting room, such as `example.com,example2.com`.
	WhitelistedDomainsForWaitingRoom OptString `json:"whitelisted_domains_for_waiting_room"`
}

// GetParticipantsToPlaceInWaitingRoom returns the value of ParticipantsToPlaceInWaitingRoom.
func (s *UpdateGroupSettingsReq3MeetingSecurityWaitingRoomSettings) GetParticipantsToPlaceInWaitingRoom() OptInt {
	return s.ParticipantsToPlaceInWaitingRoom
}

// GetUsersWhoCanAdmitParticipantsFromWaitingRoom returns the value of UsersWhoCanAdmitParticipantsFromWaitingRoom.
func (s *UpdateGroupSettingsReq3MeetingSecurityWaitingRoomSettings) GetUsersWhoCanAdmitParticipantsFromWaitingRoom() OptInt {
	return s.UsersWhoCanAdmitParticipantsFromWaitingRoom
}

// GetWhitelistedDomainsForWaitingRoom returns the value of WhitelistedDomainsForWaitingRoom.
func (s *UpdateGroupSettingsReq3MeetingSecurityWaitingRoomSettings) GetWhitelistedDomainsForWaitingRoom() OptString {
	return s.WhitelistedDomainsForWaitingRoom
}

// SetParticipantsToPlaceInWaitingRoom sets the value of ParticipantsToPlaceInWaitingRoom.
func (s *UpdateGroupSettingsReq3MeetingSecurityWaitingRoomSettings) SetParticipantsToPlaceInWaitingRoom(val OptInt) {
	s.ParticipantsToPlaceInWaitingRoom = val
}

// SetUsersWhoCanAdmitParticipantsFromWaitingRoom sets the value of UsersWhoCanAdmitParticipantsFromWaitingRoom.
func (s *UpdateGroupSettingsReq3MeetingSecurityWaitingRoomSettings) SetUsersWhoCanAdmitParticipantsFromWaitingRoom(val OptInt) {
	s.UsersWhoCanAdmitParticipantsFromWaitingRoom = val
}

// SetWhitelistedDomainsForWaitingRoom sets the value of WhitelistedDomainsForWaitingRoom.
func (s *UpdateGroupSettingsReq3MeetingSecurityWaitingRoomSettings) SetWhitelistedDomainsForWaitingRoom(val OptString) {
	s.WhitelistedDomainsForWaitingRoom = val
}

// UpdatePresenceStatusNoContent is response for UpdatePresenceStatus operation.
type UpdatePresenceStatusNoContent struct{}

// There are two cases: for all statuses except `Do_No_Disturb`; and for `Do_No_Disturb` status.
// UpdatePresenceStatusReq represents sum type.
type UpdatePresenceStatusReq struct {
	Type                     UpdatePresenceStatusReqType // switch on this field
	UpdatePresenceStatusReq0 UpdatePresenceStatusReq0
	UpdatePresenceStatusReq1 UpdatePresenceStatusReq1
}

// UpdatePresenceStatusReqType is oneOf type of UpdatePresenceStatusReq.
type UpdatePresenceStatusReqType string

// Possible values for UpdatePresenceStatusReqType.
const (
	UpdatePresenceStatusReq0UpdatePresenceStatusReq UpdatePresenceStatusReqType = "UpdatePresenceStatusReq0"
	UpdatePresenceStatusReq1UpdatePresenceStatusReq UpdatePresenceStatusReqType = "UpdatePresenceStatusReq1"
)

// IsUpdatePresenceStatusReq0 reports whether UpdatePresenceStatusReq is UpdatePresenceStatusReq0.
func (s UpdatePresenceStatusReq) IsUpdatePresenceStatusReq0() bool {
	return s.Type == UpdatePresenceStatusReq0UpdatePresenceStatusReq
}

// IsUpdatePresenceStatusReq1 reports whether UpdatePresenceStatusReq is UpdatePresenceStatusReq1.
func (s UpdatePresenceStatusReq) IsUpdatePresenceStatusReq1() bool {
	return s.Type == UpdatePresenceStatusReq1UpdatePresenceStatusReq
}

// SetUpdatePresenceStatusReq0 sets UpdatePresenceStatusReq to UpdatePresenceStatusReq0.
func (s *UpdatePresenceStatusReq) SetUpdatePresenceStatusReq0(v UpdatePresenceStatusReq0) {
	s.Type = UpdatePresenceStatusReq0UpdatePresenceStatusReq
	s.UpdatePresenceStatusReq0 = v
}

// GetUpdatePresenceStatusReq0 returns UpdatePresenceStatusReq0 and true boolean if UpdatePresenceStatusReq is UpdatePresenceStatusReq0.
func (s UpdatePresenceStatusReq) GetUpdatePresenceStatusReq0() (v UpdatePresenceStatusReq0, ok bool) {
	if !s.IsUpdatePresenceStatusReq0() {
		return v, false
	}
	return s.UpdatePresenceStatusReq0, true
}

// NewUpdatePresenceStatusReq0UpdatePresenceStatusReq returns new UpdatePresenceStatusReq from UpdatePresenceStatusReq0.
func NewUpdatePresenceStatusReq0UpdatePresenceStatusReq(v UpdatePresenceStatusReq0) UpdatePresenceStatusReq {
	var s UpdatePresenceStatusReq
	s.SetUpdatePresenceStatusReq0(v)
	return s
}

// SetUpdatePresenceStatusReq1 sets UpdatePresenceStatusReq to UpdatePresenceStatusReq1.
func (s *UpdatePresenceStatusReq) SetUpdatePresenceStatusReq1(v UpdatePresenceStatusReq1) {
	s.Type = UpdatePresenceStatusReq1UpdatePresenceStatusReq
	s.UpdatePresenceStatusReq1 = v
}

// GetUpdatePresenceStatusReq1 returns UpdatePresenceStatusReq1 and true boolean if UpdatePresenceStatusReq is UpdatePresenceStatusReq1.
func (s UpdatePresenceStatusReq) GetUpdatePresenceStatusReq1() (v UpdatePresenceStatusReq1, ok bool) {
	if !s.IsUpdatePresenceStatusReq1() {
		return v, false
	}
	return s.UpdatePresenceStatusReq1, true
}

// NewUpdatePresenceStatusReq1UpdatePresenceStatusReq returns new UpdatePresenceStatusReq from UpdatePresenceStatusReq1.
func NewUpdatePresenceStatusReq1UpdatePresenceStatusReq(v UpdatePresenceStatusReq1) UpdatePresenceStatusReq {
	var s UpdatePresenceStatusReq
	s.SetUpdatePresenceStatusReq1(v)
	return s
}

// For setting presence statuses except `Do_No_Disturb`.
type UpdatePresenceStatusReq0 struct {
	// The user's presence status.
	// * `Away`
	// * `Available`
	// * `In_Calendar_Event`
	// * `Presenting`
	// * `In_A_Zoom_Meeting`
	// * `On_A_Call`
	// * `Out_of_Office`
	// * `Busy`
	// Users who are on Zoom Client with a version **lower than 5.3.0** can update the status from:
	// * `Away` to `Do_Not_Disturb`
	// * `Available` to `Do_Not_Disturb`
	// Users who are on **Zoom Client 5.3.0 or higher** can update the status from:
	// * `Do_Not_Disturb` to `Away`
	// * `Do_Not_Disturb` to `Available`
	// * `Available` to `Away`
	// * `Away` to `Available`.
	Status string `json:"status"`
}

// GetStatus returns the value of Status.
func (s *UpdatePresenceStatusReq0) GetStatus() string {
	return s.Status
}

// SetStatus sets the value of Status.
func (s *UpdatePresenceStatusReq0) SetStatus(val string) {
	s.Status = val
}

// For `Do_No_Disturb` status setting with duration.
type UpdatePresenceStatusReq1 struct {
	// The user's presence status.
	// * `Do_Not_Disturb`
	// Users who are on Zoom client with a version **lower than 5.3.0** can update the status from:
	// * `Away` to `Do_Not_Disturb`
	// * `Available` to `Do_Not_Disturb`
	// Users who are on **Zoom client 5.3.0 or higher** can update the status from:
	// * `Do_Not_Disturb` to `Away`
	// * `Do_Not_Disturb` to `Available`
	// * `Available` to `Away`
	// * `Away` to `Available`.
	Status string `json:"status"`
	// If updating the user's status to `Do_Not_Disturb`, the duration that the status should remain as
	// `Do_Not_Disturb`, in minutes. Duration value must be between 1 and 1440 minutes (24 hours). If
	// duration is not set, the default value is 20 minutes.
	Duration OptInt `json:"duration"`
}

// GetStatus returns the value of Status.
func (s *UpdatePresenceStatusReq1) GetStatus() string {
	return s.Status
}

// GetDuration returns the value of Duration.
func (s *UpdatePresenceStatusReq1) GetDuration() OptInt {
	return s.Duration
}

// SetStatus sets the value of Status.
func (s *UpdatePresenceStatusReq1) SetStatus(val string) {
	s.Status = val
}

// SetDuration sets the value of Duration.
func (s *UpdatePresenceStatusReq1) SetDuration(val OptInt) {
	s.Duration = val
}

// Information about the Virtual Background file.
type UploadGroupVBCreated struct {
	// The file's ID.
	ID OptString `json:"id"`
	// Whether the file is the default Virtual Background file.
	IsDefault OptBool `json:"is_default"`
	// The file's name.
	Name OptString `json:"name"`
	// The file's size, in bytes.
	Size OptInt `json:"size"`
	// The file type.
	Type OptString `json:"type"`
}

// GetID returns the value of ID.
func (s *UploadGroupVBCreated) GetID() OptString {
	return s.ID
}

// GetIsDefault returns the value of IsDefault.
func (s *UploadGroupVBCreated) GetIsDefault() OptBool {
	return s.IsDefault
}

// GetName returns the value of Name.
func (s *UploadGroupVBCreated) GetName() OptString {
	return s.Name
}

// GetSize returns the value of Size.
func (s *UploadGroupVBCreated) GetSize() OptInt {
	return s.Size
}

// GetType returns the value of Type.
func (s *UploadGroupVBCreated) GetType() OptString {
	return s.Type
}

// SetID sets the value of ID.
func (s *UploadGroupVBCreated) SetID(val OptString) {
	s.ID = val
}

// SetIsDefault sets the value of IsDefault.
func (s *UploadGroupVBCreated) SetIsDefault(val OptBool) {
	s.IsDefault = val
}

// SetName sets the value of Name.
func (s *UploadGroupVBCreated) SetName(val OptString) {
	s.Name = val
}

// SetSize sets the value of Size.
func (s *UploadGroupVBCreated) SetSize(val OptInt) {
	s.Size = val
}

// SetType sets the value of Type.
func (s *UploadGroupVBCreated) SetType(val OptString) {
	s.Type = val
}

type UploadGroupVBReq struct {
	// The Virtual Background file's path.
	File OptString `json:"file"`
}

// GetFile returns the value of File.
func (s *UploadGroupVBReq) GetFile() OptString {
	return s.File
}

// SetFile sets the value of File.
func (s *UploadGroupVBReq) SetFile(val OptString) {
	s.File = val
}

type UploadVBuserCreated struct {
	// The virtual background file's ID.
	ID OptString `json:"id"`
	// Whether the virtual background file is set as the default virtual background:
	// * `true` &mdash; The default virtual background.
	// * `false` &mdash; Not the default virtual background.
	IsDefault OptBool `json:"is_default"`
	// The virtual background file's name.
	Name OptString `json:"name"`
	// The virtual background file's size, in bytes.
	Size OptInt `json:"size"`
	// The virtual background file's file type:
	// * `image` &mdash; An image file.
	// * `video` &mdash; A video file.
	Type OptString `json:"type"`
}

// GetID returns the value of ID.
func (s *UploadVBuserCreated) GetID() OptString {
	return s.ID
}

// GetIsDefault returns the value of IsDefault.
func (s *UploadVBuserCreated) GetIsDefault() OptBool {
	return s.IsDefault
}

// GetName returns the value of Name.
func (s *UploadVBuserCreated) GetName() OptString {
	return s.Name
}

// GetSize returns the value of Size.
func (s *UploadVBuserCreated) GetSize() OptInt {
	return s.Size
}

// GetType returns the value of Type.
func (s *UploadVBuserCreated) GetType() OptString {
	return s.Type
}

// SetID sets the value of ID.
func (s *UploadVBuserCreated) SetID(val OptString) {
	s.ID = val
}

// SetIsDefault sets the value of IsDefault.
func (s *UploadVBuserCreated) SetIsDefault(val OptBool) {
	s.IsDefault = val
}

// SetName sets the value of Name.
func (s *UploadVBuserCreated) SetName(val OptString) {
	s.Name = val
}

// SetSize sets the value of Size.
func (s *UploadVBuserCreated) SetSize(val OptInt) {
	s.Size = val
}

// SetType sets the value of Type.
func (s *UploadVBuserCreated) SetType(val OptString) {
	s.Type = val
}

type UploadVBuserReq struct {
	// The Virtual Background's file path.
	File OptString `json:"file"`
}

// GetFile returns the value of File.
func (s *UploadVBuserReq) GetFile() OptString {
	return s.File
}

// SetFile sets the value of File.
func (s *UploadVBuserReq) SetFile(val OptString) {
	s.File = val
}

type UserAssistantCreateCreated struct {
	AddAt OptDateTime `json:"add_at"`
	// User ID.
	Ids OptString `json:"ids"`
}

// GetAddAt returns the value of AddAt.
func (s *UserAssistantCreateCreated) GetAddAt() OptDateTime {
	return s.AddAt
}

// GetIds returns the value of Ids.
func (s *UserAssistantCreateCreated) GetIds() OptString {
	return s.Ids
}

// SetAddAt sets the value of AddAt.
func (s *UserAssistantCreateCreated) SetAddAt(val OptDateTime) {
	s.AddAt = val
}

// SetIds sets the value of Ids.
func (s *UserAssistantCreateCreated) SetIds(val OptString) {
	s.Ids = val
}

// List of user's assistants.
type UserAssistantCreateReq struct {
	// List of user's assistants.
	Assistants []UserAssistantCreateReqAssistantsItem `json:"assistants"`
}

// GetAssistants returns the value of Assistants.
func (s *UserAssistantCreateReq) GetAssistants() []UserAssistantCreateReqAssistantsItem {
	return s.Assistants
}

// SetAssistants sets the value of Assistants.
func (s *UserAssistantCreateReq) SetAssistants(val []UserAssistantCreateReqAssistantsItem) {
	s.Assistants = val
}

type UserAssistantCreateReqAssistantsItem struct {
	// Assistant's email address.
	Email OptString `json:"email"`
	// Assistant's user ID.
	ID OptString `json:"id"`
}

// GetEmail returns the value of Email.
func (s *UserAssistantCreateReqAssistantsItem) GetEmail() OptString {
	return s.Email
}

// GetID returns the value of ID.
func (s *UserAssistantCreateReqAssistantsItem) GetID() OptString {
	return s.ID
}

// SetEmail sets the value of Email.
func (s *UserAssistantCreateReqAssistantsItem) SetEmail(val OptString) {
	s.Email = val
}

// SetID sets the value of ID.
func (s *UserAssistantCreateReqAssistantsItem) SetID(val OptString) {
	s.ID = val
}

// UserAssistantDeleteNoContent is response for UserAssistantDelete operation.
type UserAssistantDeleteNoContent struct{}

// UserAssistantsDeleteNoContent is response for UserAssistantsDelete operation.
type UserAssistantsDeleteNoContent struct{}

// List of user's assistants.
type UserAssistantsOK struct {
	// List of the user's assistants.
	Assistants []UserAssistantsOKAssistantsItem `json:"assistants"`
}

// GetAssistants returns the value of Assistants.
func (s *UserAssistantsOK) GetAssistants() []UserAssistantsOKAssistantsItem {
	return s.Assistants
}

// SetAssistants sets the value of Assistants.
func (s *UserAssistantsOK) SetAssistants(val []UserAssistantsOKAssistantsItem) {
	s.Assistants = val
}

type UserAssistantsOKAssistantsItem struct {
	// Assistant's email address.
	Email OptString `json:"email"`
	// Assistant's user ID.
	ID OptString `json:"id"`
}

// GetEmail returns the value of Email.
func (s *UserAssistantsOKAssistantsItem) GetEmail() OptString {
	return s.Email
}

// GetID returns the value of ID.
func (s *UserAssistantsOKAssistantsItem) GetID() OptString {
	return s.ID
}

// SetEmail sets the value of Email.
func (s *UserAssistantsOKAssistantsItem) SetEmail(val OptString) {
	s.Email = val
}

// SetID sets the value of ID.
func (s *UserAssistantsOKAssistantsItem) SetID(val OptString) {
	s.ID = val
}

type UserCreateCreated struct {
	// User email address.
	Email OptString `json:"email"`
	// The user's first name.
	FirstName OptString `json:"first_name"`
	// User ID.
	ID OptString `json:"id"`
	// The user's last name.
	LastName OptString `json:"last_name"`
	// User type.
	// `1` - Basic.
	// `2` - Licensed.
	// `99` - None (this can only be set with `ssoCreate`).
	Type OptInt `json:"type"`
}

// GetEmail returns the value of Email.
func (s *UserCreateCreated) GetEmail() OptString {
	return s.Email
}

// GetFirstName returns the value of FirstName.
func (s *UserCreateCreated) GetFirstName() OptString {
	return s.FirstName
}

// GetID returns the value of ID.
func (s *UserCreateCreated) GetID() OptString {
	return s.ID
}

// GetLastName returns the value of LastName.
func (s *UserCreateCreated) GetLastName() OptString {
	return s.LastName
}

// GetType returns the value of Type.
func (s *UserCreateCreated) GetType() OptInt {
	return s.Type
}

// SetEmail sets the value of Email.
func (s *UserCreateCreated) SetEmail(val OptString) {
	s.Email = val
}

// SetFirstName sets the value of FirstName.
func (s *UserCreateCreated) SetFirstName(val OptString) {
	s.FirstName = val
}

// SetID sets the value of ID.
func (s *UserCreateCreated) SetID(val OptString) {
	s.ID = val
}

// SetLastName sets the value of LastName.
func (s *UserCreateCreated) SetLastName(val OptString) {
	s.LastName = val
}

// SetType sets the value of Type.
func (s *UserCreateCreated) SetType(val OptInt) {
	s.Type = val
}

type UserCreateReq struct {
	// The action to take to create the new user.
	// * `create` - The user receives an email from Zoom containing a confirmation link. The user must
	// then use the link to activate their Zoom account. The user can then set or change their password.
	// * `autoCreate` - This action is for Enterprise customers with a managed domain. autoCreate creates
	// an email login type for users.
	// * `custCreate` - Users created with this action do not have passwords and will **not** have the
	// ability to log into the Zoom web portal or the Zoom client. These users can still host and join
	// meetings using the `start_url` and `join_url` respectively. To use this option, you must [contact
	// the Integrated Software Vendor (ISV) sales team](https://explore.zoom.us/en/isv/#isv).
	// * `ssoCreate` - This action is provided for the enabled &ldquo;Pre-provisioning SSO User&rdquo;
	// option. A user created this way has no password. If it is **not** a Basic user, a personal vanity
	// URL with the username (no domain) of the provisioning email is generated. If the username or PMI
	// is invalid or occupied, it uses a random number or random personal vanity URL.
	Action   string                   `json:"action"`
	UserInfo OptUserCreateReqUserInfo `json:"user_info"`
}

// GetAction returns the value of Action.
func (s *UserCreateReq) GetAction() string {
	return s.Action
}

// GetUserInfo returns the value of UserInfo.
func (s *UserCreateReq) GetUserInfo() OptUserCreateReqUserInfo {
	return s.UserInfo
}

// SetAction sets the value of Action.
func (s *UserCreateReq) SetAction(val string) {
	s.Action = val
}

// SetUserInfo sets the value of UserInfo.
func (s *UserCreateReq) SetUserInfo(val OptUserCreateReqUserInfo) {
	s.UserInfo = val
}

type UserCreateReqUserInfo struct {
	// User email address.
	Email string `json:"email"`
	// The user's first name. Cannot contain more than 5 Chinese characters.
	FirstName OptString `json:"first_name"`
	// The user's last name. Cannot contain more than 5 Chinese characters.
	LastName OptString `json:"last_name"`
	// The user's display name. Cannot contain more than 10 Chinese characters.
	DisplayName OptString `json:"display_name"`
	// User password. Only used for the &quot;autoCreate&quot; function. The password has to have a
	// minimum of 8 characters and maximum of 32 characters. By default (basic requirement), password
	// must have at least one letter (a, b, c..), at least one number (1, 2, 3...) and include both
	// uppercase and lowercase letters. It should not contain only one identical character repeatedly
	// ('11111111' or 'aaaaaaaa') and it cannot contain consecutive characters ('12345678' or 'abcdefgh').
	// **Note:** If the account owner or admin has enabled [enhanced password
	// requirements](https://support.zoom.
	// us/hc/en-us/articles/360034675592-Advanced-security-settings#h_fa9186e4-6818-4f7a-915c-2e25c19f0acd), the value provided in this field must meet those requirements. These requirements can be retrieved by calling the [**Get account settings**](/docs/api-reference/zoom-api/ma#operation/accountSettings) API and referring to the `password_requirement` field present in the `security` object.
	Password OptString `json:"password"`
	// User type.
	// `1` - Basic.
	// `2` - Licensed.
	// `99` - None (this can only be set with `ssoCreate`).
	Type int `json:"type"`
	// Information about the user's features.
	Feature OptUserCreateReqUserInfoFeature `json:"feature"`
	// The Zoom United type. The license option.
	// * `1` - Zoom United Pro-United with US/CA Unlimited.
	// * `2` - Zoom United Pro-United with UK/IR Unlimited.
	// * `4` - Zoom United Pro-United with AU/NZ Unlimited.
	// * `8` - Zoom United Pro-United with Global Select.
	// * `16` - Zoom United Pro-United with Zoom Phone Pro.
	// * `32` - Zoom United Biz-United with US/CA Unlimited.
	// * `64` - Zoom United Biz-United with UK/IR Unlimited.
	// * `128` - Zoom United Biz-United with AU/NZ Unlimited.
	// * `256` - Zoom United Biz-United with Global Select.
	// * `512` - Zoom United Biz-United with Zoom Phone Pro.
	// * `1024` - Zoom United Ent-United with US/CA Unlimited.
	// * `2048` - Zoom United Ent-United with UK/IR Unlimited.
	// * `4096` - Zoom United Ent-United with AU/NZ Unlimited.
	// * `8192` - Zoom United Ent-United with Global Select.
	// * `16384` - Zoom United Ent-United with Zoom Phone Pro.
	// * `32768` - Zoom United Pro-United with JP Unlimited.
	// * `65536` - Zoom United Biz-United with JP Unlimited.
	// * `131072` - Zoom United Ent-United with JP Unlimited.
	PlanUnitedType OptString `json:"plan_united_type"`
}

// GetEmail returns the value of Email.
func (s *UserCreateReqUserInfo) GetEmail() string {
	return s.Email
}

// GetFirstName returns the value of FirstName.
func (s *UserCreateReqUserInfo) GetFirstName() OptString {
	return s.FirstName
}

// GetLastName returns the value of LastName.
func (s *UserCreateReqUserInfo) GetLastName() OptString {
	return s.LastName
}

// GetDisplayName returns the value of DisplayName.
func (s *UserCreateReqUserInfo) GetDisplayName() OptString {
	return s.DisplayName
}

// GetPassword returns the value of Password.
func (s *UserCreateReqUserInfo) GetPassword() OptString {
	return s.Password
}

// GetType returns the value of Type.
func (s *UserCreateReqUserInfo) GetType() int {
	return s.Type
}

// GetFeature returns the value of Feature.
func (s *UserCreateReqUserInfo) GetFeature() OptUserCreateReqUserInfoFeature {
	return s.Feature
}

// GetPlanUnitedType returns the value of PlanUnitedType.
func (s *UserCreateReqUserInfo) GetPlanUnitedType() OptString {
	return s.PlanUnitedType
}

// SetEmail sets the value of Email.
func (s *UserCreateReqUserInfo) SetEmail(val string) {
	s.Email = val
}

// SetFirstName sets the value of FirstName.
func (s *UserCreateReqUserInfo) SetFirstName(val OptString) {
	s.FirstName = val
}

// SetLastName sets the value of LastName.
func (s *UserCreateReqUserInfo) SetLastName(val OptString) {
	s.LastName = val
}

// SetDisplayName sets the value of DisplayName.
func (s *UserCreateReqUserInfo) SetDisplayName(val OptString) {
	s.DisplayName = val
}

// SetPassword sets the value of Password.
func (s *UserCreateReqUserInfo) SetPassword(val OptString) {
	s.Password = val
}

// SetType sets the value of Type.
func (s *UserCreateReqUserInfo) SetType(val int) {
	s.Type = val
}

// SetFeature sets the value of Feature.
func (s *UserCreateReqUserInfo) SetFeature(val OptUserCreateReqUserInfoFeature) {
	s.Feature = val
}

// SetPlanUnitedType sets the value of PlanUnitedType.
func (s *UserCreateReqUserInfo) SetPlanUnitedType(val OptString) {
	s.PlanUnitedType = val
}

// Information about the user's features.
type UserCreateReqUserInfoFeature struct {
	// Whether the user has the **Zoom Phone** feature enabled.
	ZoomPhone OptBool `json:"zoom_phone"`
	// The Zoom Workplace plan option.
	// `16` - Zoom Workplace Business Plus with US/CA Unlimited.
	// `32` - Zoom Workplace Business Plus with UK/IR Unlimited.
	// `64` - Zoom Workplace Business Plus with AU/NZ Unlimited.
	// `128` - Zoom Workplace Business Plus with Japan Unlimited.
	// `33554432` - Zoom Workplace Business Plus with Global Select.
	// `134217728` - Zoom Workplace Enterprise Premier with US/CA Unlimited.
	// `1073741824` - Zoom Workplace Enterprise Premier with AU/NZ Unlimited.
	// `536870912` - Zoom Workplace Enterprise Premier with UK/IR Unlimited.
	// `268435456` - Zoom Workplace Enterprise Premier with Japan Unlimited.
	// `4398046511104` - Zoom Workplace Pro Plus with US/CA Unlimited.
	// The Zoom One plan option for Gov accounts:
	// `16` - Zoom One Business Plus.
	// The Zoom One plan option for Education accounts:
	// `18014398509481984` - Zoom One for Education School and Campus.
	// `72057594037927936` - Zoom One for Education Enterprise Essentials.
	// `576460752303423488` - Zoom One for Education Enterprise Student.
	// `144115188075855872` - Zoom One for Education Enterprise Plus.
	// `137438953472` - Zoom One for Education School and Campus Plus with US/CA Unlimited.
	// `1099511627776` -Zoom One for Education School and Campus Plus with AU/NZ Unlimited.
	// `549755813888` - Zoom One for Education School and Campus Plus with UK/IR Unlimited.
	// `274877906944` - Zoom One for Education School and Campus Plus with Japan Unlimited.
	// `2199023255552` - Zoom One for Education School and Campus Plus with Global Select.
	// `4294967296` - Zoom One for Education Enterprise Premier with US/CA Unlimited.
	// `34359738368` - Zoom One for Education Enterprise Premier with AU/NZ Unlimited.
	// `17179869184` -Zoom One for Education Enterprise Premier with UK/IR Unlimited.
	// `8589934592` - Zoom One for Education Enterprise Premier with with Japan Unlimited.
	// `68719476736` - Zoom One for Education Enterprise Premier with Global Select.
	ZoomOneType OptInt `json:"zoom_one_type"`
}

// GetZoomPhone returns the value of ZoomPhone.
func (s *UserCreateReqUserInfoFeature) GetZoomPhone() OptBool {
	return s.ZoomPhone
}

// GetZoomOneType returns the value of ZoomOneType.
func (s *UserCreateReqUserInfoFeature) GetZoomOneType() OptInt {
	return s.ZoomOneType
}

// SetZoomPhone sets the value of ZoomPhone.
func (s *UserCreateReqUserInfoFeature) SetZoomPhone(val OptBool) {
	s.ZoomPhone = val
}

// SetZoomOneType sets the value of ZoomOneType.
func (s *UserCreateReqUserInfoFeature) SetZoomOneType(val OptInt) {
	s.ZoomOneType = val
}

// UserDeleteNoContent is response for UserDelete operation.
type UserDeleteNoContent struct{}

type UserEmailOK struct {
	// Indicates whether or not the email already exists in Zoom.
	ExistedEmail OptBool `json:"existed_email"`
}

// GetExistedEmail returns the value of ExistedEmail.
func (s *UserEmailOK) GetExistedEmail() OptBool {
	return s.ExistedEmail
}

// SetExistedEmail sets the value of ExistedEmail.
func (s *UserEmailOK) SetExistedEmail(val OptBool) {
	s.ExistedEmail = val
}

// UserEmailUpdateNoContent is response for UserEmailUpdate operation.
type UserEmailUpdateNoContent struct{}

type UserEmailUpdateReq struct {
	// User's email. The length should be less than 128 characters.
	Email string `json:"email"`
}

// GetEmail returns the value of Email.
func (s *UserEmailUpdateReq) GetEmail() string {
	return s.Email
}

// SetEmail sets the value of Email.
func (s *UserEmailUpdateReq) SetEmail(val string) {
	s.Email = val
}

// Merged schema.
type UserOK struct {
	// User ID.
	ID OptString `json:"id"`
	// Merged property.
	CreatedAt OptDateTime `json:"created_at"`
	// Department.
	Dept OptString `json:"dept"`
	// User's email address.
	Email OptString `json:"email"`
	// User's first name.
	FirstName OptString `json:"first_name"`
	// User last login client version.
	LastClientVersion OptString `json:"last_client_version"`
	// User last login time.
	LastLoginTime OptDateTime `json:"last_login_time"`
	// User's last name.
	LastName OptString `json:"last_name"`
	// [Personal Meeting ID (PMI)](https://developers.zoom.
	// us/docs/api/rest/using-zoom-apis/#understanding-personal-meeting-id-pmi).
	Pmi OptInt64 `json:"pmi"`
	// User's [role](https://support.zoom.us/hc/en-us/articles/115001078646-Role-Based-Access-Control)
	// name.
	RoleName OptString `json:"role_name"`
	// The time zone of the user.
	Timezone OptString `json:"timezone"`
	// User's plan type:
	// `1` - Basic.
	// `2` - Licensed.
	// `99` - None (this can only be set with `ssoCreate`).
	Type int `json:"type"`
	// Merged property.
	UsePmi OptBool `json:"use_pmi"`
	// User's display name.
	DisplayName OptString `json:"display_name"`
	// User's account ID.
	AccountID OptString `json:"account_id"`
	// The user's account number.
	AccountNumber OptInt64 `json:"account_number"`
	// The user's CMS ID. Only enabled for Kaltura integration.
	CmsUserID OptString `json:"cms_user_id"`
	// The user's company.
	Company OptString `json:"company"`
	// The date and time when this user was created.
	UserCreatedAt OptDateTime `json:"user_created_at"`
	// Custom attributes that have been assigned to the user.
	CustomAttributes []UserOKCustomAttributesItem `json:"custom_attributes"`
	// The employee's unique ID. This field only returns when
	// * SAML single sign-on (SSO) is enabled.
	// * The `login_type` value is `101` (SSO).
	EmployeeUniqueID OptString `json:"employee_unique_id"`
	// IDs of the web groups that the user belongs to.
	GroupIds []string `json:"group_ids"`
	// IM IDs of the groups that the user belongs to.
	ImGroupIds []string  `json:"im_group_ids"`
	Jid        OptString `json:"jid"`
	// The user's job title.
	JobTitle OptString `json:"job_title"`
	// Default language for the Zoom Web Portal.
	Language OptString `json:"language"`
	// Theser's location.
	Location OptString `json:"location"`
	// The user's login method.
	// `0` - Facebook OAuth.
	// `1` - Google OAuth.
	// `24` - Apple OAuth.
	// `27` - Microsoft OAuth.
	// `97` - Mobile device.
	// `98` - RingCentral OAuth.
	// `99` - API user.
	// `100` - Zoom Work email.
	// `101` - Single Sign-On (SSO).
	// These login methods are only available in China.
	// `11` - Phone number.
	// `21` - WeChat.
	// `23` - Alipay.
	LoginTypes []int `json:"login_types"`
	// The manager for the user.
	Manager OptString `json:"manager"`
	// User's personal meeting URL.
	PersonalMeetingURL OptString `json:"personal_meeting_url"`
	// This field has been **deprecated** and will not be supported in the future. Use the
	// **phone_numbers** field instead of this field.
	// User's country for the company phone number.
	//
	// Deprecated: schema marks this property as deprecated.
	PhoneCountry OptString `json:"phone_country"`
	// This field has been **deprecated** and will not be supported in the future. Use the
	// **phone_numbers** field instead of this field.
	// The user's phone number.
	//
	// Deprecated: schema marks this property as deprecated.
	PhoneNumber  OptString                `json:"phone_number"`
	PhoneNumbers []UserOKPhoneNumbersItem `json:"phone_numbers"`
	// The URL for user's profile picture.
	PicURL OptString `json:"pic_url"`
	// This field is returned if the user is enrolled in the [Zoom United](https://zoom.
	// us/pricing/zoom-bundles) plan. The license option:
	// * `1` - Zoom United Pro-United with US/CA Unlimited.
	// * `2` - Zoom United Pro-United with UK/IR Unlimited.
	// * `4` - Zoom United Pro-United with AU/NZ Unlimited.
	// * `8` - Zoom United Pro-United with Global Select.
	// * `16` - Zoom United Pro-United with Zoom Phone Pro.
	// * `32` - Zoom United Biz-United with US/CA Unlimited.
	// * `64` - Zoom United Biz-United with UK/IR Unlimited.
	// * `128` - Zoom United Biz-United with AU/NZ Unlimited.
	// * `256` - Zoom United Biz-United with Global Select.
	// * `512` - Zoom United Biz-United with Zoom Phone Pro.
	// * `1024` - Zoom United Ent-United with US/CA Unlimited.
	// * `2048` - Zoom United Ent-United with UK/IR Unlimited.
	// * `4096` - Zoom United Ent-United with AU/NZ Unlimited.
	// * `8192` - Zoom United Ent-United with Global Select.
	// * `16384` - Zoom United Ent-United with Zoom Phone Pro.
	// * `32768` - Zoom United Pro-United with JP Unlimited.
	// * `65536` - Zoom United Biz-United with JP Unlimited.
	// * `131072` - Zoom United Ent-United with JP Unlimited.
	PlanUnitedType OptString `json:"plan_united_type"`
	// The user's pronouns.
	Pronouns OptString `json:"pronouns"`
	// The user's display pronouns setting.
	// * `1` - Ask the user every time they join meetings and webinars.
	// * `2` - Always display pronouns in meetings and webinars.
	// * `3` - Do not display pronouns in meetings and webinars.
	PronounsOption OptInt `json:"pronouns_option"`
	// Unique identifier of the user's assigned [role](https://developers.zoom.
	// us/docs/api/rest/reference/zoom-api/methods/#operation/roles).
	RoleID OptString `json:"role_id"`
	// Status of user's account.
	Status OptString `json:"status"`
	// Personal meeting room URL, if the user has one.
	VanityURL OptString `json:"vanity_url"`
	// Displays whether user is verified or not.
	// `1` - Account verified.
	// `0` - Account not verified.
	Verified OptInt `json:"verified"`
	// The user's cluster.
	Cluster OptString `json:"cluster"`
	// The user's Zoom Workplace plan option.
	// `4` - Zoom Workplace Enterprise.
	// `8` - Zoom Workplace Enterprise Plus.
	// `16` - Zoom Workplace Business Plus with US/CA Unlimited.
	// `32` - Zoom Workplace Business Plus with UK/IR Unlimited.
	// `64` - Zoom Workplace Business Plus with AU/NZ Unlimited.
	// `128` - Zoom Workplace Business Plus with Japan Unlimited.
	// `33554432` - Zoom Workplace Business Plus with Global Select.
	// `134217728` - Zoom Workplace Enterprise Premier with US/CA Unlimited.
	// `1073741824` - Zoom Workplace Enterprise Premier with AU/NZ Unlimited.
	// `536870912` - Zoom Workplace Enterprise Premier with UK/IR Unlimited.
	// `268435456` - Zoom Workplace Enterprise Premier with Japan Unlimited.
	// `4398046511104` - Zoom Workplace Pro Plus with US/CA Unlimited.
	// The Zoom One plan option for Govermnemt accounts.
	// `4` - Zoom One Enterprise.
	// `8` - Zoom One Enterprise Plus.
	// `16` - Zoom One Business Plus.
	// The Zoom One plan option for Education accounts.
	// `18014398509481984` - Zoom One for Education School and Campus.
	// `72057594037927936` - Zoom One for Education Enterprise Essentials.
	// `576460752303423488` - Zoom One for Education Enterprise Student.
	// `144115188075855872` - Zoom One for Education Enterprise Plus.
	// `137438953472` - Zoom One for Education School and Campus Plus with US/CA Unlimited.
	// `1099511627776` - Zoom One for Education School and Campus Plus with AU/NZ Unlimited.
	// `549755813888` - Zoom One for Education School and Campus Plus with UK/IR Unlimited.
	// `274877906944` - Zoom One for Education School and Campus Plus with Japan Unlimited.
	// `2199023255552` - Zoom One for Education School and Campus Plus with Global Select.
	// `4294967296` - Zoom One for Education Enterprise Premier with US/CA Unlimited.
	// `34359738368` - Zoom One for Education Enterprise Premier with AU/NZ Unlimited.
	// `17179869184` -Zoom One for Education Enterprise Premier with UK/IR Unlimited.
	// `8589934592` - Zoom One for Education Enterprise Premier with with Japan Unlimited.
	// `68719476736` - Zoom One for Education Enterprise Premier with Global Select.
	ZoomOneType OptInt `json:"zoom_one_type"`
}

// GetID returns the value of ID.
func (s *UserOK) GetID() OptString {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *UserOK) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetDept returns the value of Dept.
func (s *UserOK) GetDept() OptString {
	return s.Dept
}

// GetEmail returns the value of Email.
func (s *UserOK) GetEmail() OptString {
	return s.Email
}

// GetFirstName returns the value of FirstName.
func (s *UserOK) GetFirstName() OptString {
	return s.FirstName
}

// GetLastClientVersion returns the value of LastClientVersion.
func (s *UserOK) GetLastClientVersion() OptString {
	return s.LastClientVersion
}

// GetLastLoginTime returns the value of LastLoginTime.
func (s *UserOK) GetLastLoginTime() OptDateTime {
	return s.LastLoginTime
}

// GetLastName returns the value of LastName.
func (s *UserOK) GetLastName() OptString {
	return s.LastName
}

// GetPmi returns the value of Pmi.
func (s *UserOK) GetPmi() OptInt64 {
	return s.Pmi
}

// GetRoleName returns the value of RoleName.
func (s *UserOK) GetRoleName() OptString {
	return s.RoleName
}

// GetTimezone returns the value of Timezone.
func (s *UserOK) GetTimezone() OptString {
	return s.Timezone
}

// GetType returns the value of Type.
func (s *UserOK) GetType() int {
	return s.Type
}

// GetUsePmi returns the value of UsePmi.
func (s *UserOK) GetUsePmi() OptBool {
	return s.UsePmi
}

// GetDisplayName returns the value of DisplayName.
func (s *UserOK) GetDisplayName() OptString {
	return s.DisplayName
}

// GetAccountID returns the value of AccountID.
func (s *UserOK) GetAccountID() OptString {
	return s.AccountID
}

// GetAccountNumber returns the value of AccountNumber.
func (s *UserOK) GetAccountNumber() OptInt64 {
	return s.AccountNumber
}

// GetCmsUserID returns the value of CmsUserID.
func (s *UserOK) GetCmsUserID() OptString {
	return s.CmsUserID
}

// GetCompany returns the value of Company.
func (s *UserOK) GetCompany() OptString {
	return s.Company
}

// GetUserCreatedAt returns the value of UserCreatedAt.
func (s *UserOK) GetUserCreatedAt() OptDateTime {
	return s.UserCreatedAt
}

// GetCustomAttributes returns the value of CustomAttributes.
func (s *UserOK) GetCustomAttributes() []UserOKCustomAttributesItem {
	return s.CustomAttributes
}

// GetEmployeeUniqueID returns the value of EmployeeUniqueID.
func (s *UserOK) GetEmployeeUniqueID() OptString {
	return s.EmployeeUniqueID
}

// GetGroupIds returns the value of GroupIds.
func (s *UserOK) GetGroupIds() []string {
	return s.GroupIds
}

// GetImGroupIds returns the value of ImGroupIds.
func (s *UserOK) GetImGroupIds() []string {
	return s.ImGroupIds
}

// GetJid returns the value of Jid.
func (s *UserOK) GetJid() OptString {
	return s.Jid
}

// GetJobTitle returns the value of JobTitle.
func (s *UserOK) GetJobTitle() OptString {
	return s.JobTitle
}

// GetLanguage returns the value of Language.
func (s *UserOK) GetLanguage() OptString {
	return s.Language
}

// GetLocation returns the value of Location.
func (s *UserOK) GetLocation() OptString {
	return s.Location
}

// GetLoginTypes returns the value of LoginTypes.
func (s *UserOK) GetLoginTypes() []int {
	return s.LoginTypes
}

// GetManager returns the value of Manager.
func (s *UserOK) GetManager() OptString {
	return s.Manager
}

// GetPersonalMeetingURL returns the value of PersonalMeetingURL.
func (s *UserOK) GetPersonalMeetingURL() OptString {
	return s.PersonalMeetingURL
}

// GetPhoneCountry returns the value of PhoneCountry.
func (s *UserOK) GetPhoneCountry() OptString {
	return s.PhoneCountry
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *UserOK) GetPhoneNumber() OptString {
	return s.PhoneNumber
}

// GetPhoneNumbers returns the value of PhoneNumbers.
func (s *UserOK) GetPhoneNumbers() []UserOKPhoneNumbersItem {
	return s.PhoneNumbers
}

// GetPicURL returns the value of PicURL.
func (s *UserOK) GetPicURL() OptString {
	return s.PicURL
}

// GetPlanUnitedType returns the value of PlanUnitedType.
func (s *UserOK) GetPlanUnitedType() OptString {
	return s.PlanUnitedType
}

// GetPronouns returns the value of Pronouns.
func (s *UserOK) GetPronouns() OptString {
	return s.Pronouns
}

// GetPronounsOption returns the value of PronounsOption.
func (s *UserOK) GetPronounsOption() OptInt {
	return s.PronounsOption
}

// GetRoleID returns the value of RoleID.
func (s *UserOK) GetRoleID() OptString {
	return s.RoleID
}

// GetStatus returns the value of Status.
func (s *UserOK) GetStatus() OptString {
	return s.Status
}

// GetVanityURL returns the value of VanityURL.
func (s *UserOK) GetVanityURL() OptString {
	return s.VanityURL
}

// GetVerified returns the value of Verified.
func (s *UserOK) GetVerified() OptInt {
	return s.Verified
}

// GetCluster returns the value of Cluster.
func (s *UserOK) GetCluster() OptString {
	return s.Cluster
}

// GetZoomOneType returns the value of ZoomOneType.
func (s *UserOK) GetZoomOneType() OptInt {
	return s.ZoomOneType
}

// SetID sets the value of ID.
func (s *UserOK) SetID(val OptString) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *UserOK) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetDept sets the value of Dept.
func (s *UserOK) SetDept(val OptString) {
	s.Dept = val
}

// SetEmail sets the value of Email.
func (s *UserOK) SetEmail(val OptString) {
	s.Email = val
}

// SetFirstName sets the value of FirstName.
func (s *UserOK) SetFirstName(val OptString) {
	s.FirstName = val
}

// SetLastClientVersion sets the value of LastClientVersion.
func (s *UserOK) SetLastClientVersion(val OptString) {
	s.LastClientVersion = val
}

// SetLastLoginTime sets the value of LastLoginTime.
func (s *UserOK) SetLastLoginTime(val OptDateTime) {
	s.LastLoginTime = val
}

// SetLastName sets the value of LastName.
func (s *UserOK) SetLastName(val OptString) {
	s.LastName = val
}

// SetPmi sets the value of Pmi.
func (s *UserOK) SetPmi(val OptInt64) {
	s.Pmi = val
}

// SetRoleName sets the value of RoleName.
func (s *UserOK) SetRoleName(val OptString) {
	s.RoleName = val
}

// SetTimezone sets the value of Timezone.
func (s *UserOK) SetTimezone(val OptString) {
	s.Timezone = val
}

// SetType sets the value of Type.
func (s *UserOK) SetType(val int) {
	s.Type = val
}

// SetUsePmi sets the value of UsePmi.
func (s *UserOK) SetUsePmi(val OptBool) {
	s.UsePmi = val
}

// SetDisplayName sets the value of DisplayName.
func (s *UserOK) SetDisplayName(val OptString) {
	s.DisplayName = val
}

// SetAccountID sets the value of AccountID.
func (s *UserOK) SetAccountID(val OptString) {
	s.AccountID = val
}

// SetAccountNumber sets the value of AccountNumber.
func (s *UserOK) SetAccountNumber(val OptInt64) {
	s.AccountNumber = val
}

// SetCmsUserID sets the value of CmsUserID.
func (s *UserOK) SetCmsUserID(val OptString) {
	s.CmsUserID = val
}

// SetCompany sets the value of Company.
func (s *UserOK) SetCompany(val OptString) {
	s.Company = val
}

// SetUserCreatedAt sets the value of UserCreatedAt.
func (s *UserOK) SetUserCreatedAt(val OptDateTime) {
	s.UserCreatedAt = val
}

// SetCustomAttributes sets the value of CustomAttributes.
func (s *UserOK) SetCustomAttributes(val []UserOKCustomAttributesItem) {
	s.CustomAttributes = val
}

// SetEmployeeUniqueID sets the value of EmployeeUniqueID.
func (s *UserOK) SetEmployeeUniqueID(val OptString) {
	s.EmployeeUniqueID = val
}

// SetGroupIds sets the value of GroupIds.
func (s *UserOK) SetGroupIds(val []string) {
	s.GroupIds = val
}

// SetImGroupIds sets the value of ImGroupIds.
func (s *UserOK) SetImGroupIds(val []string) {
	s.ImGroupIds = val
}

// SetJid sets the value of Jid.
func (s *UserOK) SetJid(val OptString) {
	s.Jid = val
}

// SetJobTitle sets the value of JobTitle.
func (s *UserOK) SetJobTitle(val OptString) {
	s.JobTitle = val
}

// SetLanguage sets the value of Language.
func (s *UserOK) SetLanguage(val OptString) {
	s.Language = val
}

// SetLocation sets the value of Location.
func (s *UserOK) SetLocation(val OptString) {
	s.Location = val
}

// SetLoginTypes sets the value of LoginTypes.
func (s *UserOK) SetLoginTypes(val []int) {
	s.LoginTypes = val
}

// SetManager sets the value of Manager.
func (s *UserOK) SetManager(val OptString) {
	s.Manager = val
}

// SetPersonalMeetingURL sets the value of PersonalMeetingURL.
func (s *UserOK) SetPersonalMeetingURL(val OptString) {
	s.PersonalMeetingURL = val
}

// SetPhoneCountry sets the value of PhoneCountry.
func (s *UserOK) SetPhoneCountry(val OptString) {
	s.PhoneCountry = val
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *UserOK) SetPhoneNumber(val OptString) {
	s.PhoneNumber = val
}

// SetPhoneNumbers sets the value of PhoneNumbers.
func (s *UserOK) SetPhoneNumbers(val []UserOKPhoneNumbersItem) {
	s.PhoneNumbers = val
}

// SetPicURL sets the value of PicURL.
func (s *UserOK) SetPicURL(val OptString) {
	s.PicURL = val
}

// SetPlanUnitedType sets the value of PlanUnitedType.
func (s *UserOK) SetPlanUnitedType(val OptString) {
	s.PlanUnitedType = val
}

// SetPronouns sets the value of Pronouns.
func (s *UserOK) SetPronouns(val OptString) {
	s.Pronouns = val
}

// SetPronounsOption sets the value of PronounsOption.
func (s *UserOK) SetPronounsOption(val OptInt) {
	s.PronounsOption = val
}

// SetRoleID sets the value of RoleID.
func (s *UserOK) SetRoleID(val OptString) {
	s.RoleID = val
}

// SetStatus sets the value of Status.
func (s *UserOK) SetStatus(val OptString) {
	s.Status = val
}

// SetVanityURL sets the value of VanityURL.
func (s *UserOK) SetVanityURL(val OptString) {
	s.VanityURL = val
}

// SetVerified sets the value of Verified.
func (s *UserOK) SetVerified(val OptInt) {
	s.Verified = val
}

// SetCluster sets the value of Cluster.
func (s *UserOK) SetCluster(val OptString) {
	s.Cluster = val
}

// SetZoomOneType sets the value of ZoomOneType.
func (s *UserOK) SetZoomOneType(val OptInt) {
	s.ZoomOneType = val
}

type UserOKCustomAttributesItem struct {
	// The custom attribute's identifier.
	Key OptString `json:"key"`
	// The custom attribute's name.
	Name OptString `json:"name"`
	// The custom attribute's value.
	Value OptString `json:"value"`
}

// GetKey returns the value of Key.
func (s *UserOKCustomAttributesItem) GetKey() OptString {
	return s.Key
}

// GetName returns the value of Name.
func (s *UserOKCustomAttributesItem) GetName() OptString {
	return s.Name
}

// GetValue returns the value of Value.
func (s *UserOKCustomAttributesItem) GetValue() OptString {
	return s.Value
}

// SetKey sets the value of Key.
func (s *UserOKCustomAttributesItem) SetKey(val OptString) {
	s.Key = val
}

// SetName sets the value of Name.
func (s *UserOKCustomAttributesItem) SetName(val OptString) {
	s.Name = val
}

// SetValue sets the value of Value.
func (s *UserOKCustomAttributesItem) SetValue(val OptString) {
	s.Value = val
}

type UserOKPhoneNumbersItem struct {
	// The phone number's ISO country code. For example, United States phone numbers' value will be `+1`.
	Code OptString `json:"code"`
	// The phone number's [country ID](https://developers.zoom.
	// us/docs/api/rest/other-references/abbreviation-lists/#countries). For example, if the `number`
	// field contains a Brazil-based number, this value is `BR`.
	Country OptString `json:"country"`
	// The phone number's label.
	// * `Mobile`
	// * `Office`
	// * `Home`
	// * `Fax`.
	Label OptString `json:"label"`
	// The user's phone number.
	Number OptString `json:"number"`
	// Whether Zoom has verified the phone number.
	Verified OptBool `json:"verified"`
}

// GetCode returns the value of Code.
func (s *UserOKPhoneNumbersItem) GetCode() OptString {
	return s.Code
}

// GetCountry returns the value of Country.
func (s *UserOKPhoneNumbersItem) GetCountry() OptString {
	return s.Country
}

// GetLabel returns the value of Label.
func (s *UserOKPhoneNumbersItem) GetLabel() OptString {
	return s.Label
}

// GetNumber returns the value of Number.
func (s *UserOKPhoneNumbersItem) GetNumber() OptString {
	return s.Number
}

// GetVerified returns the value of Verified.
func (s *UserOKPhoneNumbersItem) GetVerified() OptBool {
	return s.Verified
}

// SetCode sets the value of Code.
func (s *UserOKPhoneNumbersItem) SetCode(val OptString) {
	s.Code = val
}

// SetCountry sets the value of Country.
func (s *UserOKPhoneNumbersItem) SetCountry(val OptString) {
	s.Country = val
}

// SetLabel sets the value of Label.
func (s *UserOKPhoneNumbersItem) SetLabel(val OptString) {
	s.Label = val
}

// SetNumber sets the value of Number.
func (s *UserOKPhoneNumbersItem) SetNumber(val OptString) {
	s.Number = val
}

// SetVerified sets the value of Verified.
func (s *UserOKPhoneNumbersItem) SetVerified(val OptBool) {
	s.Verified = val
}

// UserPasswordNoContent is response for UserPassword operation.
type UserPasswordNoContent struct{}

type UserPasswordReq struct {
	// User password. Should be fewer than 32 characters.
	// **Note** If the account owner or admin has enabled [enhanced password
	// requirements](https://support.zoom.
	// us/hc/en-us/articles/360034675592-Advanced-security-settings#h_fa9186e4-6818-4f7a-915c-2e25c19f0acd), the value provided in this field must meet those requirements. Retrieve these requirements by calling the [**Get account settings](/api-reference/zoom-api/ma#operation/accountSettings) API and referring to the `password_requirement` field present in the `security` object.
	Password string `json:"password"`
}

// GetPassword returns the value of Password.
func (s *UserPasswordReq) GetPassword() string {
	return s.Password
}

// SetPassword sets the value of Password.
func (s *UserPasswordReq) SetPassword(val string) {
	s.Password = val
}

type UserPermissionOK struct {
	// [List of user permissions.](https://developers.zoom.us/docs/api/rest/other-references/privileges/).
	Permissions []string `json:"permissions"`
}

// GetPermissions returns the value of Permissions.
func (s *UserPermissionOK) GetPermissions() []string {
	return s.Permissions
}

// SetPermissions sets the value of Permissions.
func (s *UserPermissionOK) SetPermissions(val []string) {
	s.Permissions = val
}

type UserPictureCreated struct{}

// UserPictureDeleteNoContent is response for UserPictureDelete operation.
type UserPictureDeleteNoContent struct{}

type UserPictureReq struct {
	// The file's path.
	PicFile string `json:"pic_file"`
}

// GetPicFile returns the value of PicFile.
func (s *UserPictureReq) GetPicFile() string {
	return s.PicFile
}

// SetPicFile sets the value of PicFile.
func (s *UserPictureReq) SetPicFile(val string) {
	s.PicFile = val
}

// UserSSOTokenDeleteNoContent is response for UserSSOTokenDelete operation.
type UserSSOTokenDeleteNoContent struct{}

// UserSchedulerDeleteNoContent is response for UserSchedulerDelete operation.
type UserSchedulerDeleteNoContent struct{}

// UserSchedulersDeleteNoContent is response for UserSchedulersDelete operation.
type UserSchedulersDeleteNoContent struct{}

// List of user's schedulers.
type UserSchedulersOK struct {
	// List of users for whom the current user can schedule meetings.
	Schedulers []UserSchedulersOKSchedulersItem `json:"schedulers"`
}

// GetSchedulers returns the value of Schedulers.
func (s *UserSchedulersOK) GetSchedulers() []UserSchedulersOKSchedulersItem {
	return s.Schedulers
}

// SetSchedulers sets the value of Schedulers.
func (s *UserSchedulersOK) SetSchedulers(val []UserSchedulersOKSchedulersItem) {
	s.Schedulers = val
}

type UserSchedulersOKSchedulersItem struct {
	// Email address of the scheduler.
	Email OptString `json:"email"`
	// Unique Identifier (User ID) of the Scheduler.
	ID OptString `json:"id"`
	// PMI of the meeting host in long (int64) format.
	Pmi OptInt64 `json:"pmi"`
}

// GetEmail returns the value of Email.
func (s *UserSchedulersOKSchedulersItem) GetEmail() OptString {
	return s.Email
}

// GetID returns the value of ID.
func (s *UserSchedulersOKSchedulersItem) GetID() OptString {
	return s.ID
}

// GetPmi returns the value of Pmi.
func (s *UserSchedulersOKSchedulersItem) GetPmi() OptInt64 {
	return s.Pmi
}

// SetEmail sets the value of Email.
func (s *UserSchedulersOKSchedulersItem) SetEmail(val OptString) {
	s.Email = val
}

// SetID sets the value of ID.
func (s *UserSchedulersOKSchedulersItem) SetID(val OptString) {
	s.ID = val
}

// SetPmi sets the value of Pmi.
func (s *UserSchedulersOKSchedulersItem) SetPmi(val OptInt64) {
	s.Pmi = val
}

// UserSettingsOK represents sum type.
type UserSettingsOK struct {
	Type            UserSettingsOKType // switch on this field
	UserSettingsOK0 UserSettingsOK0
	UserSettingsOK1 UserSettingsOK1
	UserSettingsOK2 UserSettingsOK2
	UserSettingsOK3 UserSettingsOK3
	UserSettingsOK4 UserSettingsOK4
}

// UserSettingsOKType is oneOf type of UserSettingsOK.
type UserSettingsOKType string

// Possible values for UserSettingsOKType.
const (
	UserSettingsOK0UserSettingsOK UserSettingsOKType = "UserSettingsOK0"
	UserSettingsOK1UserSettingsOK UserSettingsOKType = "UserSettingsOK1"
	UserSettingsOK2UserSettingsOK UserSettingsOKType = "UserSettingsOK2"
	UserSettingsOK3UserSettingsOK UserSettingsOKType = "UserSettingsOK3"
	UserSettingsOK4UserSettingsOK UserSettingsOKType = "UserSettingsOK4"
)

// IsUserSettingsOK0 reports whether UserSettingsOK is UserSettingsOK0.
func (s UserSettingsOK) IsUserSettingsOK0() bool { return s.Type == UserSettingsOK0UserSettingsOK }

// IsUserSettingsOK1 reports whether UserSettingsOK is UserSettingsOK1.
func (s UserSettingsOK) IsUserSettingsOK1() bool { return s.Type == UserSettingsOK1UserSettingsOK }

// IsUserSettingsOK2 reports whether UserSettingsOK is UserSettingsOK2.
func (s UserSettingsOK) IsUserSettingsOK2() bool { return s.Type == UserSettingsOK2UserSettingsOK }

// IsUserSettingsOK3 reports whether UserSettingsOK is UserSettingsOK3.
func (s UserSettingsOK) IsUserSettingsOK3() bool { return s.Type == UserSettingsOK3UserSettingsOK }

// IsUserSettingsOK4 reports whether UserSettingsOK is UserSettingsOK4.
func (s UserSettingsOK) IsUserSettingsOK4() bool { return s.Type == UserSettingsOK4UserSettingsOK }

// SetUserSettingsOK0 sets UserSettingsOK to UserSettingsOK0.
func (s *UserSettingsOK) SetUserSettingsOK0(v UserSettingsOK0) {
	s.Type = UserSettingsOK0UserSettingsOK
	s.UserSettingsOK0 = v
}

// GetUserSettingsOK0 returns UserSettingsOK0 and true boolean if UserSettingsOK is UserSettingsOK0.
func (s UserSettingsOK) GetUserSettingsOK0() (v UserSettingsOK0, ok bool) {
	if !s.IsUserSettingsOK0() {
		return v, false
	}
	return s.UserSettingsOK0, true
}

// NewUserSettingsOK0UserSettingsOK returns new UserSettingsOK from UserSettingsOK0.
func NewUserSettingsOK0UserSettingsOK(v UserSettingsOK0) UserSettingsOK {
	var s UserSettingsOK
	s.SetUserSettingsOK0(v)
	return s
}

// SetUserSettingsOK1 sets UserSettingsOK to UserSettingsOK1.
func (s *UserSettingsOK) SetUserSettingsOK1(v UserSettingsOK1) {
	s.Type = UserSettingsOK1UserSettingsOK
	s.UserSettingsOK1 = v
}

// GetUserSettingsOK1 returns UserSettingsOK1 and true boolean if UserSettingsOK is UserSettingsOK1.
func (s UserSettingsOK) GetUserSettingsOK1() (v UserSettingsOK1, ok bool) {
	if !s.IsUserSettingsOK1() {
		return v, false
	}
	return s.UserSettingsOK1, true
}

// NewUserSettingsOK1UserSettingsOK returns new UserSettingsOK from UserSettingsOK1.
func NewUserSettingsOK1UserSettingsOK(v UserSettingsOK1) UserSettingsOK {
	var s UserSettingsOK
	s.SetUserSettingsOK1(v)
	return s
}

// SetUserSettingsOK2 sets UserSettingsOK to UserSettingsOK2.
func (s *UserSettingsOK) SetUserSettingsOK2(v UserSettingsOK2) {
	s.Type = UserSettingsOK2UserSettingsOK
	s.UserSettingsOK2 = v
}

// GetUserSettingsOK2 returns UserSettingsOK2 and true boolean if UserSettingsOK is UserSettingsOK2.
func (s UserSettingsOK) GetUserSettingsOK2() (v UserSettingsOK2, ok bool) {
	if !s.IsUserSettingsOK2() {
		return v, false
	}
	return s.UserSettingsOK2, true
}

// NewUserSettingsOK2UserSettingsOK returns new UserSettingsOK from UserSettingsOK2.
func NewUserSettingsOK2UserSettingsOK(v UserSettingsOK2) UserSettingsOK {
	var s UserSettingsOK
	s.SetUserSettingsOK2(v)
	return s
}

// SetUserSettingsOK3 sets UserSettingsOK to UserSettingsOK3.
func (s *UserSettingsOK) SetUserSettingsOK3(v UserSettingsOK3) {
	s.Type = UserSettingsOK3UserSettingsOK
	s.UserSettingsOK3 = v
}

// GetUserSettingsOK3 returns UserSettingsOK3 and true boolean if UserSettingsOK is UserSettingsOK3.
func (s UserSettingsOK) GetUserSettingsOK3() (v UserSettingsOK3, ok bool) {
	if !s.IsUserSettingsOK3() {
		return v, false
	}
	return s.UserSettingsOK3, true
}

// NewUserSettingsOK3UserSettingsOK returns new UserSettingsOK from UserSettingsOK3.
func NewUserSettingsOK3UserSettingsOK(v UserSettingsOK3) UserSettingsOK {
	var s UserSettingsOK
	s.SetUserSettingsOK3(v)
	return s
}

// SetUserSettingsOK4 sets UserSettingsOK to UserSettingsOK4.
func (s *UserSettingsOK) SetUserSettingsOK4(v UserSettingsOK4) {
	s.Type = UserSettingsOK4UserSettingsOK
	s.UserSettingsOK4 = v
}

// GetUserSettingsOK4 returns UserSettingsOK4 and true boolean if UserSettingsOK is UserSettingsOK4.
func (s UserSettingsOK) GetUserSettingsOK4() (v UserSettingsOK4, ok bool) {
	if !s.IsUserSettingsOK4() {
		return v, false
	}
	return s.UserSettingsOK4, true
}

// NewUserSettingsOK4UserSettingsOK returns new UserSettingsOK from UserSettingsOK4.
func NewUserSettingsOK4UserSettingsOK(v UserSettingsOK4) UserSettingsOK {
	var s UserSettingsOK
	s.SetUserSettingsOK4(v)
	return s
}

type UserSettingsOK0 struct {
	// The user's audio conference settings.
	AudioConferencing OptUserSettingsOK0AudioConferencing `json:"audio_conferencing"`
	EmailNotification OptUserSettingsOK0EmailNotification `json:"email_notification"`
	Feature           OptUserSettingsOK0Feature           `json:"feature"`
	InMeeting         OptUserSettingsOK0InMeeting         `json:"in_meeting"`
	Profile           OptUserSettingsOK0Profile           `json:"profile"`
	Recording         OptUserSettingsOK0Recording         `json:"recording"`
	ScheduleMeeting   OptUserSettingsOK0ScheduleMeeting   `json:"schedule_meeting"`
	Telephony         OptUserSettingsOK0Telephony         `json:"telephony"`
	// Account Settings: TSP.
	Tsp OptUserSettingsOK0Tsp `json:"tsp"`
	// Account settings - Whiteboard.
	Whiteboard OptUserSettingsOK0Whiteboard `json:"whiteboard"`
}

// GetAudioConferencing returns the value of AudioConferencing.
func (s *UserSettingsOK0) GetAudioConferencing() OptUserSettingsOK0AudioConferencing {
	return s.AudioConferencing
}

// GetEmailNotification returns the value of EmailNotification.
func (s *UserSettingsOK0) GetEmailNotification() OptUserSettingsOK0EmailNotification {
	return s.EmailNotification
}

// GetFeature returns the value of Feature.
func (s *UserSettingsOK0) GetFeature() OptUserSettingsOK0Feature {
	return s.Feature
}

// GetInMeeting returns the value of InMeeting.
func (s *UserSettingsOK0) GetInMeeting() OptUserSettingsOK0InMeeting {
	return s.InMeeting
}

// GetProfile returns the value of Profile.
func (s *UserSettingsOK0) GetProfile() OptUserSettingsOK0Profile {
	return s.Profile
}

// GetRecording returns the value of Recording.
func (s *UserSettingsOK0) GetRecording() OptUserSettingsOK0Recording {
	return s.Recording
}

// GetScheduleMeeting returns the value of ScheduleMeeting.
func (s *UserSettingsOK0) GetScheduleMeeting() OptUserSettingsOK0ScheduleMeeting {
	return s.ScheduleMeeting
}

// GetTelephony returns the value of Telephony.
func (s *UserSettingsOK0) GetTelephony() OptUserSettingsOK0Telephony {
	return s.Telephony
}

// GetTsp returns the value of Tsp.
func (s *UserSettingsOK0) GetTsp() OptUserSettingsOK0Tsp {
	return s.Tsp
}

// GetWhiteboard returns the value of Whiteboard.
func (s *UserSettingsOK0) GetWhiteboard() OptUserSettingsOK0Whiteboard {
	return s.Whiteboard
}

// SetAudioConferencing sets the value of AudioConferencing.
func (s *UserSettingsOK0) SetAudioConferencing(val OptUserSettingsOK0AudioConferencing) {
	s.AudioConferencing = val
}

// SetEmailNotification sets the value of EmailNotification.
func (s *UserSettingsOK0) SetEmailNotification(val OptUserSettingsOK0EmailNotification) {
	s.EmailNotification = val
}

// SetFeature sets the value of Feature.
func (s *UserSettingsOK0) SetFeature(val OptUserSettingsOK0Feature) {
	s.Feature = val
}

// SetInMeeting sets the value of InMeeting.
func (s *UserSettingsOK0) SetInMeeting(val OptUserSettingsOK0InMeeting) {
	s.InMeeting = val
}

// SetProfile sets the value of Profile.
func (s *UserSettingsOK0) SetProfile(val OptUserSettingsOK0Profile) {
	s.Profile = val
}

// SetRecording sets the value of Recording.
func (s *UserSettingsOK0) SetRecording(val OptUserSettingsOK0Recording) {
	s.Recording = val
}

// SetScheduleMeeting sets the value of ScheduleMeeting.
func (s *UserSettingsOK0) SetScheduleMeeting(val OptUserSettingsOK0ScheduleMeeting) {
	s.ScheduleMeeting = val
}

// SetTelephony sets the value of Telephony.
func (s *UserSettingsOK0) SetTelephony(val OptUserSettingsOK0Telephony) {
	s.Telephony = val
}

// SetTsp sets the value of Tsp.
func (s *UserSettingsOK0) SetTsp(val OptUserSettingsOK0Tsp) {
	s.Tsp = val
}

// SetWhiteboard sets the value of Whiteboard.
func (s *UserSettingsOK0) SetWhiteboard(val OptUserSettingsOK0Whiteboard) {
	s.Whiteboard = val
}

// The user's audio conference settings.
type UserSettingsOK0AudioConferencing struct {
	// The user's [**Toll-free and Fee-based Toll Call**](https://support.zoom.
	// us/hc/en-us/articles/360060950711-Enabling-Toll-free-and-Fee-based-Toll-Call#h_01F5190TYM8736XHQX683YQYSY) settings.
	TollFreeAndFeeBasedTollCall OptUserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall `json:"toll_free_and_fee_based_toll_call"`
}

// GetTollFreeAndFeeBasedTollCall returns the value of TollFreeAndFeeBasedTollCall.
func (s *UserSettingsOK0AudioConferencing) GetTollFreeAndFeeBasedTollCall() OptUserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall {
	return s.TollFreeAndFeeBasedTollCall
}

// SetTollFreeAndFeeBasedTollCall sets the value of TollFreeAndFeeBasedTollCall.
func (s *UserSettingsOK0AudioConferencing) SetTollFreeAndFeeBasedTollCall(val OptUserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall) {
	s.TollFreeAndFeeBasedTollCall = val
}

// The user's [**Toll-free and Fee-based Toll Call**](https://support.zoom.
// us/hc/en-us/articles/360060950711-Enabling-Toll-free-and-Fee-based-Toll-Call#h_01F5190TYM8736XHQX683YQYSY) settings.
type UserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall struct {
	// Whether webinar attendees can dial in through the account's **Toll-free and Fee-based Toll Call**
	// phone numbers. This feature is only available in version 5.2.2 and higher.
	AllowWebinarAttendeesDial OptBool `json:"allow_webinar_attendees_dial"`
	// Whether the user has the [**Toll-free and Fee-based Toll Call**](https://support.zoom.
	// us/hc/en-us/articles/360060950711-Enabling-Toll-free-and-Fee-based-Toll-Call#h_01F5190TYM8736XHQX683YQYSY) setting enabled.
	Enable OptBool `json:"enable"`
	// The user's **Toll-free and Fee-based Toll Call** phone number information.
	Numbers []UserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem `json:"numbers"`
}

// GetAllowWebinarAttendeesDial returns the value of AllowWebinarAttendeesDial.
func (s *UserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall) GetAllowWebinarAttendeesDial() OptBool {
	return s.AllowWebinarAttendeesDial
}

// GetEnable returns the value of Enable.
func (s *UserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall) GetEnable() OptBool {
	return s.Enable
}

// GetNumbers returns the value of Numbers.
func (s *UserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall) GetNumbers() []UserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem {
	return s.Numbers
}

// SetAllowWebinarAttendeesDial sets the value of AllowWebinarAttendeesDial.
func (s *UserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall) SetAllowWebinarAttendeesDial(val OptBool) {
	s.AllowWebinarAttendeesDial = val
}

// SetEnable sets the value of Enable.
func (s *UserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall) SetEnable(val OptBool) {
	s.Enable = val
}

// SetNumbers sets the value of Numbers.
func (s *UserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall) SetNumbers(val []UserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem) {
	s.Numbers = val
}

type UserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem struct {
	// The phone number's [E.164 country calling code](https://en.wikipedia.
	// org/wiki/List_of_country_calling_codes).
	Code OptString `json:"code"`
	// The phone number's [country code](https://developers.zoom.
	// us/docs/api/rest/other-references/abbreviation-lists/#countries).
	CountryCode OptString `json:"country_code"`
	// The country name.
	CountryName OptString `json:"country_name"`
	// The phone number's display number.
	DisplayNumber OptString `json:"display_number"`
	// The phone number.
	Number OptString `json:"number"`
}

// GetCode returns the value of Code.
func (s *UserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem) GetCode() OptString {
	return s.Code
}

// GetCountryCode returns the value of CountryCode.
func (s *UserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem) GetCountryCode() OptString {
	return s.CountryCode
}

// GetCountryName returns the value of CountryName.
func (s *UserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem) GetCountryName() OptString {
	return s.CountryName
}

// GetDisplayNumber returns the value of DisplayNumber.
func (s *UserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem) GetDisplayNumber() OptString {
	return s.DisplayNumber
}

// GetNumber returns the value of Number.
func (s *UserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem) GetNumber() OptString {
	return s.Number
}

// SetCode sets the value of Code.
func (s *UserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem) SetCode(val OptString) {
	s.Code = val
}

// SetCountryCode sets the value of CountryCode.
func (s *UserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem) SetCountryCode(val OptString) {
	s.CountryCode = val
}

// SetCountryName sets the value of CountryName.
func (s *UserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem) SetCountryName(val OptString) {
	s.CountryName = val
}

// SetDisplayNumber sets the value of DisplayNumber.
func (s *UserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem) SetDisplayNumber(val OptString) {
	s.DisplayNumber = val
}

// SetNumber sets the value of Number.
func (s *UserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem) SetNumber(val OptString) {
	s.Number = val
}

type UserSettingsOK0EmailNotification struct {
	// When an alternative host is set or removed from a meeting.
	AlternativeHostReminder OptBool `json:"alternative_host_reminder"`
	// When a meeting is cancelled.
	CancelMeetingReminder OptBool `json:"cancel_meeting_reminder"`
	// Whether to notify the host when a cloud recording is available.
	CloudRecordingAvailableReminder OptBool `json:"cloud_recording_available_reminder"`
	// When attendees join meeting before host.
	JbhReminder OptBool `json:"jbh_reminder"`
	// Whether to notify any alternative hosts when a cloud recording is available.
	RecordingAvailableReminderAlternativeHosts OptBool `json:"recording_available_reminder_alternative_hosts"`
	// Whether to notify the person who scheduled the meeting or webinar for the host when a cloud
	// recording is available.
	RecordingAvailableReminderSchedulers OptBool `json:"recording_available_reminder_schedulers"`
	// This setting notifies the host there is a meeting is scheduled, rescheduled, or cancelled.
	ScheduleForReminder OptBool `json:"schedule_for_reminder"`
}

// GetAlternativeHostReminder returns the value of AlternativeHostReminder.
func (s *UserSettingsOK0EmailNotification) GetAlternativeHostReminder() OptBool {
	return s.AlternativeHostReminder
}

// GetCancelMeetingReminder returns the value of CancelMeetingReminder.
func (s *UserSettingsOK0EmailNotification) GetCancelMeetingReminder() OptBool {
	return s.CancelMeetingReminder
}

// GetCloudRecordingAvailableReminder returns the value of CloudRecordingAvailableReminder.
func (s *UserSettingsOK0EmailNotification) GetCloudRecordingAvailableReminder() OptBool {
	return s.CloudRecordingAvailableReminder
}

// GetJbhReminder returns the value of JbhReminder.
func (s *UserSettingsOK0EmailNotification) GetJbhReminder() OptBool {
	return s.JbhReminder
}

// GetRecordingAvailableReminderAlternativeHosts returns the value of RecordingAvailableReminderAlternativeHosts.
func (s *UserSettingsOK0EmailNotification) GetRecordingAvailableReminderAlternativeHosts() OptBool {
	return s.RecordingAvailableReminderAlternativeHosts
}

// GetRecordingAvailableReminderSchedulers returns the value of RecordingAvailableReminderSchedulers.
func (s *UserSettingsOK0EmailNotification) GetRecordingAvailableReminderSchedulers() OptBool {
	return s.RecordingAvailableReminderSchedulers
}

// GetScheduleForReminder returns the value of ScheduleForReminder.
func (s *UserSettingsOK0EmailNotification) GetScheduleForReminder() OptBool {
	return s.ScheduleForReminder
}

// SetAlternativeHostReminder sets the value of AlternativeHostReminder.
func (s *UserSettingsOK0EmailNotification) SetAlternativeHostReminder(val OptBool) {
	s.AlternativeHostReminder = val
}

// SetCancelMeetingReminder sets the value of CancelMeetingReminder.
func (s *UserSettingsOK0EmailNotification) SetCancelMeetingReminder(val OptBool) {
	s.CancelMeetingReminder = val
}

// SetCloudRecordingAvailableReminder sets the value of CloudRecordingAvailableReminder.
func (s *UserSettingsOK0EmailNotification) SetCloudRecordingAvailableReminder(val OptBool) {
	s.CloudRecordingAvailableReminder = val
}

// SetJbhReminder sets the value of JbhReminder.
func (s *UserSettingsOK0EmailNotification) SetJbhReminder(val OptBool) {
	s.JbhReminder = val
}

// SetRecordingAvailableReminderAlternativeHosts sets the value of RecordingAvailableReminderAlternativeHosts.
func (s *UserSettingsOK0EmailNotification) SetRecordingAvailableReminderAlternativeHosts(val OptBool) {
	s.RecordingAvailableReminderAlternativeHosts = val
}

// SetRecordingAvailableReminderSchedulers sets the value of RecordingAvailableReminderSchedulers.
func (s *UserSettingsOK0EmailNotification) SetRecordingAvailableReminderSchedulers(val OptBool) {
	s.RecordingAvailableReminderSchedulers = val
}

// SetScheduleForReminder sets the value of ScheduleForReminder.
func (s *UserSettingsOK0EmailNotification) SetScheduleForReminder(val OptBool) {
	s.ScheduleForReminder = val
}

type UserSettingsOK0Feature struct {
	// The host meeting in China.
	//
	// Deprecated: schema marks this property as deprecated.
	CnMeeting OptBool `json:"cn_meeting"`
	// The user's assigned [Concurrent Meeting](https://support.zoom.us/hc/en-us/articles/206122046) type:
	// * `Basic`
	// * `Plus`
	// * `None`
	// **Note:** This feature requires a Concurrent Meeting Basic or Plus plan subscription.
	ConcurrentMeeting OptString `json:"concurrent_meeting"`
	// The host meeting in India.
	//
	// Deprecated: schema marks this property as deprecated.
	InMeeting OptBool `json:"in_meeting"`
	// The large meeting feature.
	LargeMeeting OptBool `json:"large_meeting"`
	// The large meeting capacity. It can be 500 or 1000, depending on if the user has a large meeting
	// capacity plan subscription or not.
	LargeMeetingCapacity OptInt `json:"large_meeting_capacity"`
	// The user's meeting capacity.
	MeetingCapacity OptInt `json:"meeting_capacity"`
	// The webinar feature.
	Webinar OptBool `json:"webinar"`
	// The webinar capacity. It can be 100, 500, 1000, 3000, 5000 or 10000, depending on if the user has
	// a webinar capacity plan subscription or not.
	WebinarCapacity OptInt `json:"webinar_capacity"`
	// Whether the Zoom Events feature is enabled for the user.
	ZoomEvents OptBool `json:"zoom_events"`
	// The user's Zoom Events plan capacity: `500`, `1000`, `3000`, `5000`, `10000`, `20000`, `30000`, or
	// `50000`.
	ZoomEventsCapacity OptInt `json:"zoom_events_capacity"`
	// Whether to enable the Zoom Events Unlimited feature for the user.
	ZoomEventsUnlimited OptBool `json:"zoom_events_unlimited"`
	// The capacity list of user's Zoom Events Unlimited plan - `100`, `500`, `1000`, `3000`, `5000`,
	// `10000`, `20000`, `30000`, or `50000`. The first entry is always the largest.
	ZoomEventsUnlimitedCapacities []int `json:"zoom_events_unlimited_capacities"`
	// Whether to enable the Zoom Sessions Unlimited feature for the user.
	ZoomSessionsUnlimited OptBool `json:"zoom_sessions_unlimited"`
	// The capacity list of user's Zoom Sessions Unlimited plan - `100`, `500`, `1000`, `3000`, `5000`,
	// `10000`, `20000`, `30000`, or `50000`. The first entry is always the largest.
	ZoomSessionsUnlimitedCapacities []int `json:"zoom_sessions_unlimited_capacities"`
	// Whether to enable the Zoom Events Pay Per Attendee feature for the user.
	ZoomEventsPayPerAttendee OptBool `json:"zoom_events_pay_per_attendee"`
	// Whether to enable the Zoom Sessions Pay Per Attendee feature for the user.
	ZoomSessionsPayPerAttendee OptBool `json:"zoom_sessions_pay_per_attendee"`
	// The Zoom phone feature.
	ZoomPhone OptBool `json:"zoom_phone"`
	// Whether the user has a Zoom Revenue Accelerator license. For information about a Zoom Revenue
	// Accelerator license, contact [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003).
	//
	// Deprecated: schema marks this property as deprecated.
	ZoomIqForSales OptBool `json:"zoom_iq_for_sales"`
	// Whether the user has a Zoom Revenue Accelerator license. For information about a Zoom Revenue
	// Accelerator license, contact [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003).
	ZoomRevenueAccelerator OptBool `json:"zoom_revenue_accelerator"`
	// Whether the user has a Zoom Whiteboard license.
	ZoomWhiteboard OptBool `json:"zoom_whiteboard"`
	// Whether the user has a Zoom Whiteboard Plus license.
	ZoomWhiteboardPlus OptBool `json:"zoom_whiteboard_plus"`
	// Whether the user has a Zoom Translated Captions license.
	ZoomTranslatedCaptions OptBool `json:"zoom_translated_captions"`
	// Whether the user has a Zoom Customer Managed Key license.
	ZoomCustomerManagedKey OptBool `json:"zoom_customer_managed_key"`
	// Whether the user has a Zoom Huddles license.
	//
	// Deprecated: schema marks this property as deprecated.
	ZoomHuddles OptBool `json:"zoom_huddles"`
	// Whether the user has a Zoom Quality Management license.
	ZoomQualityManagement OptBool `json:"zoom_quality_management"`
	// Whether the user has a Zoom Workforce Management license.
	ZoomWorkforceManagement OptBool `json:"zoom_workforce_management"`
	// Whether the user has a Zoom Scheduler license.
	ZoomScheduler OptBool `json:"zoom_scheduler"`
	// Whether the user has a Zoom Clips Plus license.
	ZoomClipsPlus OptBool `json:"zoom_clips_plus"`
	// Whether the user has a Zoom Mail Calendar license.
	ZoomMailCalendar OptBool `json:"zoom_mail_calendar"`
	// Whether the user has a Zoom Compliance Management license.
	ZoomComplianceManagement OptBool `json:"zoom_compliance_management"`
}

// GetCnMeeting returns the value of CnMeeting.
func (s *UserSettingsOK0Feature) GetCnMeeting() OptBool {
	return s.CnMeeting
}

// GetConcurrentMeeting returns the value of ConcurrentMeeting.
func (s *UserSettingsOK0Feature) GetConcurrentMeeting() OptString {
	return s.ConcurrentMeeting
}

// GetInMeeting returns the value of InMeeting.
func (s *UserSettingsOK0Feature) GetInMeeting() OptBool {
	return s.InMeeting
}

// GetLargeMeeting returns the value of LargeMeeting.
func (s *UserSettingsOK0Feature) GetLargeMeeting() OptBool {
	return s.LargeMeeting
}

// GetLargeMeetingCapacity returns the value of LargeMeetingCapacity.
func (s *UserSettingsOK0Feature) GetLargeMeetingCapacity() OptInt {
	return s.LargeMeetingCapacity
}

// GetMeetingCapacity returns the value of MeetingCapacity.
func (s *UserSettingsOK0Feature) GetMeetingCapacity() OptInt {
	return s.MeetingCapacity
}

// GetWebinar returns the value of Webinar.
func (s *UserSettingsOK0Feature) GetWebinar() OptBool {
	return s.Webinar
}

// GetWebinarCapacity returns the value of WebinarCapacity.
func (s *UserSettingsOK0Feature) GetWebinarCapacity() OptInt {
	return s.WebinarCapacity
}

// GetZoomEvents returns the value of ZoomEvents.
func (s *UserSettingsOK0Feature) GetZoomEvents() OptBool {
	return s.ZoomEvents
}

// GetZoomEventsCapacity returns the value of ZoomEventsCapacity.
func (s *UserSettingsOK0Feature) GetZoomEventsCapacity() OptInt {
	return s.ZoomEventsCapacity
}

// GetZoomEventsUnlimited returns the value of ZoomEventsUnlimited.
func (s *UserSettingsOK0Feature) GetZoomEventsUnlimited() OptBool {
	return s.ZoomEventsUnlimited
}

// GetZoomEventsUnlimitedCapacities returns the value of ZoomEventsUnlimitedCapacities.
func (s *UserSettingsOK0Feature) GetZoomEventsUnlimitedCapacities() []int {
	return s.ZoomEventsUnlimitedCapacities
}

// GetZoomSessionsUnlimited returns the value of ZoomSessionsUnlimited.
func (s *UserSettingsOK0Feature) GetZoomSessionsUnlimited() OptBool {
	return s.ZoomSessionsUnlimited
}

// GetZoomSessionsUnlimitedCapacities returns the value of ZoomSessionsUnlimitedCapacities.
func (s *UserSettingsOK0Feature) GetZoomSessionsUnlimitedCapacities() []int {
	return s.ZoomSessionsUnlimitedCapacities
}

// GetZoomEventsPayPerAttendee returns the value of ZoomEventsPayPerAttendee.
func (s *UserSettingsOK0Feature) GetZoomEventsPayPerAttendee() OptBool {
	return s.ZoomEventsPayPerAttendee
}

// GetZoomSessionsPayPerAttendee returns the value of ZoomSessionsPayPerAttendee.
func (s *UserSettingsOK0Feature) GetZoomSessionsPayPerAttendee() OptBool {
	return s.ZoomSessionsPayPerAttendee
}

// GetZoomPhone returns the value of ZoomPhone.
func (s *UserSettingsOK0Feature) GetZoomPhone() OptBool {
	return s.ZoomPhone
}

// GetZoomIqForSales returns the value of ZoomIqForSales.
func (s *UserSettingsOK0Feature) GetZoomIqForSales() OptBool {
	return s.ZoomIqForSales
}

// GetZoomRevenueAccelerator returns the value of ZoomRevenueAccelerator.
func (s *UserSettingsOK0Feature) GetZoomRevenueAccelerator() OptBool {
	return s.ZoomRevenueAccelerator
}

// GetZoomWhiteboard returns the value of ZoomWhiteboard.
func (s *UserSettingsOK0Feature) GetZoomWhiteboard() OptBool {
	return s.ZoomWhiteboard
}

// GetZoomWhiteboardPlus returns the value of ZoomWhiteboardPlus.
func (s *UserSettingsOK0Feature) GetZoomWhiteboardPlus() OptBool {
	return s.ZoomWhiteboardPlus
}

// GetZoomTranslatedCaptions returns the value of ZoomTranslatedCaptions.
func (s *UserSettingsOK0Feature) GetZoomTranslatedCaptions() OptBool {
	return s.ZoomTranslatedCaptions
}

// GetZoomCustomerManagedKey returns the value of ZoomCustomerManagedKey.
func (s *UserSettingsOK0Feature) GetZoomCustomerManagedKey() OptBool {
	return s.ZoomCustomerManagedKey
}

// GetZoomHuddles returns the value of ZoomHuddles.
func (s *UserSettingsOK0Feature) GetZoomHuddles() OptBool {
	return s.ZoomHuddles
}

// GetZoomQualityManagement returns the value of ZoomQualityManagement.
func (s *UserSettingsOK0Feature) GetZoomQualityManagement() OptBool {
	return s.ZoomQualityManagement
}

// GetZoomWorkforceManagement returns the value of ZoomWorkforceManagement.
func (s *UserSettingsOK0Feature) GetZoomWorkforceManagement() OptBool {
	return s.ZoomWorkforceManagement
}

// GetZoomScheduler returns the value of ZoomScheduler.
func (s *UserSettingsOK0Feature) GetZoomScheduler() OptBool {
	return s.ZoomScheduler
}

// GetZoomClipsPlus returns the value of ZoomClipsPlus.
func (s *UserSettingsOK0Feature) GetZoomClipsPlus() OptBool {
	return s.ZoomClipsPlus
}

// GetZoomMailCalendar returns the value of ZoomMailCalendar.
func (s *UserSettingsOK0Feature) GetZoomMailCalendar() OptBool {
	return s.ZoomMailCalendar
}

// GetZoomComplianceManagement returns the value of ZoomComplianceManagement.
func (s *UserSettingsOK0Feature) GetZoomComplianceManagement() OptBool {
	return s.ZoomComplianceManagement
}

// SetCnMeeting sets the value of CnMeeting.
func (s *UserSettingsOK0Feature) SetCnMeeting(val OptBool) {
	s.CnMeeting = val
}

// SetConcurrentMeeting sets the value of ConcurrentMeeting.
func (s *UserSettingsOK0Feature) SetConcurrentMeeting(val OptString) {
	s.ConcurrentMeeting = val
}

// SetInMeeting sets the value of InMeeting.
func (s *UserSettingsOK0Feature) SetInMeeting(val OptBool) {
	s.InMeeting = val
}

// SetLargeMeeting sets the value of LargeMeeting.
func (s *UserSettingsOK0Feature) SetLargeMeeting(val OptBool) {
	s.LargeMeeting = val
}

// SetLargeMeetingCapacity sets the value of LargeMeetingCapacity.
func (s *UserSettingsOK0Feature) SetLargeMeetingCapacity(val OptInt) {
	s.LargeMeetingCapacity = val
}

// SetMeetingCapacity sets the value of MeetingCapacity.
func (s *UserSettingsOK0Feature) SetMeetingCapacity(val OptInt) {
	s.MeetingCapacity = val
}

// SetWebinar sets the value of Webinar.
func (s *UserSettingsOK0Feature) SetWebinar(val OptBool) {
	s.Webinar = val
}

// SetWebinarCapacity sets the value of WebinarCapacity.
func (s *UserSettingsOK0Feature) SetWebinarCapacity(val OptInt) {
	s.WebinarCapacity = val
}

// SetZoomEvents sets the value of ZoomEvents.
func (s *UserSettingsOK0Feature) SetZoomEvents(val OptBool) {
	s.ZoomEvents = val
}

// SetZoomEventsCapacity sets the value of ZoomEventsCapacity.
func (s *UserSettingsOK0Feature) SetZoomEventsCapacity(val OptInt) {
	s.ZoomEventsCapacity = val
}

// SetZoomEventsUnlimited sets the value of ZoomEventsUnlimited.
func (s *UserSettingsOK0Feature) SetZoomEventsUnlimited(val OptBool) {
	s.ZoomEventsUnlimited = val
}

// SetZoomEventsUnlimitedCapacities sets the value of ZoomEventsUnlimitedCapacities.
func (s *UserSettingsOK0Feature) SetZoomEventsUnlimitedCapacities(val []int) {
	s.ZoomEventsUnlimitedCapacities = val
}

// SetZoomSessionsUnlimited sets the value of ZoomSessionsUnlimited.
func (s *UserSettingsOK0Feature) SetZoomSessionsUnlimited(val OptBool) {
	s.ZoomSessionsUnlimited = val
}

// SetZoomSessionsUnlimitedCapacities sets the value of ZoomSessionsUnlimitedCapacities.
func (s *UserSettingsOK0Feature) SetZoomSessionsUnlimitedCapacities(val []int) {
	s.ZoomSessionsUnlimitedCapacities = val
}

// SetZoomEventsPayPerAttendee sets the value of ZoomEventsPayPerAttendee.
func (s *UserSettingsOK0Feature) SetZoomEventsPayPerAttendee(val OptBool) {
	s.ZoomEventsPayPerAttendee = val
}

// SetZoomSessionsPayPerAttendee sets the value of ZoomSessionsPayPerAttendee.
func (s *UserSettingsOK0Feature) SetZoomSessionsPayPerAttendee(val OptBool) {
	s.ZoomSessionsPayPerAttendee = val
}

// SetZoomPhone sets the value of ZoomPhone.
func (s *UserSettingsOK0Feature) SetZoomPhone(val OptBool) {
	s.ZoomPhone = val
}

// SetZoomIqForSales sets the value of ZoomIqForSales.
func (s *UserSettingsOK0Feature) SetZoomIqForSales(val OptBool) {
	s.ZoomIqForSales = val
}

// SetZoomRevenueAccelerator sets the value of ZoomRevenueAccelerator.
func (s *UserSettingsOK0Feature) SetZoomRevenueAccelerator(val OptBool) {
	s.ZoomRevenueAccelerator = val
}

// SetZoomWhiteboard sets the value of ZoomWhiteboard.
func (s *UserSettingsOK0Feature) SetZoomWhiteboard(val OptBool) {
	s.ZoomWhiteboard = val
}

// SetZoomWhiteboardPlus sets the value of ZoomWhiteboardPlus.
func (s *UserSettingsOK0Feature) SetZoomWhiteboardPlus(val OptBool) {
	s.ZoomWhiteboardPlus = val
}

// SetZoomTranslatedCaptions sets the value of ZoomTranslatedCaptions.
func (s *UserSettingsOK0Feature) SetZoomTranslatedCaptions(val OptBool) {
	s.ZoomTranslatedCaptions = val
}

// SetZoomCustomerManagedKey sets the value of ZoomCustomerManagedKey.
func (s *UserSettingsOK0Feature) SetZoomCustomerManagedKey(val OptBool) {
	s.ZoomCustomerManagedKey = val
}

// SetZoomHuddles sets the value of ZoomHuddles.
func (s *UserSettingsOK0Feature) SetZoomHuddles(val OptBool) {
	s.ZoomHuddles = val
}

// SetZoomQualityManagement sets the value of ZoomQualityManagement.
func (s *UserSettingsOK0Feature) SetZoomQualityManagement(val OptBool) {
	s.ZoomQualityManagement = val
}

// SetZoomWorkforceManagement sets the value of ZoomWorkforceManagement.
func (s *UserSettingsOK0Feature) SetZoomWorkforceManagement(val OptBool) {
	s.ZoomWorkforceManagement = val
}

// SetZoomScheduler sets the value of ZoomScheduler.
func (s *UserSettingsOK0Feature) SetZoomScheduler(val OptBool) {
	s.ZoomScheduler = val
}

// SetZoomClipsPlus sets the value of ZoomClipsPlus.
func (s *UserSettingsOK0Feature) SetZoomClipsPlus(val OptBool) {
	s.ZoomClipsPlus = val
}

// SetZoomMailCalendar sets the value of ZoomMailCalendar.
func (s *UserSettingsOK0Feature) SetZoomMailCalendar(val OptBool) {
	s.ZoomMailCalendar = val
}

// SetZoomComplianceManagement sets the value of ZoomComplianceManagement.
func (s *UserSettingsOK0Feature) SetZoomComplianceManagement(val OptBool) {
	s.ZoomComplianceManagement = val
}

type UserSettingsOK0InMeeting struct {
	// Allow the host to enable [**Focus Mode**](https://support.zoom.
	// us/hc/en-us/articles/360061113751-Using-focus-mode) when scheduling a meeting. This value defaults
	// to `null`.
	AllowHostToEnableFocusMode OptBool `json:"allow_host_to_enable_focus_mode"`
	// If the value of this field is set to `true`,  allow users to delete messages in the in-meeting
	// chat.
	AllowUsersToDeleteMessagesInMeetingChat OptBool `json:"allow_users_to_delete_messages_in_meeting_chat"`
	// Whether to allow live streaming.
	AllowLiveStreaming OptBool `json:"allow_live_streaming"`
	// Whether to display a thumbs up or thumbs down feedback survey at the end of each meeting.
	PostMeetingFeedback OptBool `json:"post_meeting_feedback"`
	// Whether to enable the [**Zoom Whiteboard**](https://support.zoom.
	// us/hc/en-us/articles/4410916881421) feature.
	Whiteboard OptBool `json:"whiteboard"`
	// Specify who participants can chat with:
	// * `1` - The participant cannot use chat.
	// * `2` - The participant can chat with the host and co-hosts only.
	// * `3` - The participant can chat with other participants publicly.
	// * `4` - The participant can chat with other participants publicly and privately.
	// **Note:** This setting is only available with client versions 5.7.3 and above.
	AllowParticipantsChatWith OptInt `json:"allow_participants_chat_with"`
	// This setting specifies how participants can save meeting chats:
	// * `1` - Participants cannot save meeting chats.
	// * `2` - Participants can only save host and co-host meeting chats.
	// * `3` - Participants can save all meeting chats.
	AllowUsersSaveChats OptInt `json:"allow_users_save_chats"`
	// This setting allows participants to use annotation tools.
	Annotation OptBool `json:"annotation"`
	// This setting allows host to put attendee on hold.
	// **This field has been deprecated and is no longer supported.**.
	//
	// Deprecated: schema marks this property as deprecated.
	AttendeeOnHold OptBool `json:"attendee_on_hold"`
	// Whether the [**Focus Mode**](https://support.zoom.
	// us/hc/en-us/articles/360061113751-Using-focus-mode) feature is enabled. When enabled, this feature
	// only displays the host and co-hosts' video and profile pictures during a meeting.
	// This value defaults to `false`.
	AttentionModeFocusMode OptBool `json:"attention_mode_focus_mode"`
	// This setting auto saves all in-meeting chats.
	AutoSavingChat OptBool `json:"auto_saving_chat"`
	// This setting allows the host to split meeting participants into separate breakout rooms.
	BreakoutRoom OptBool `json:"breakout_room"`
	// Whether the host can assign participants to breakout rooms when scheduling. This feature is only
	// available in version 4.5.0 or higher.
	BreakoutRoomSchedule OptBool `json:"breakout_room_schedule"`
	// This setting enables chat during meeting for all participants.
	Chat OptBool `json:"chat"`
	// This setting allows participants to ask questions for the host and participants to answer.
	MeetingQuestionAnswer OptBool `json:"meeting_question_answer"`
	// This setting enables closed captions.
	ClosedCaption OptBool `json:"closed_caption"`
	// The information about the user's closed captioning settings.
	ClosedCaptioning OptUserSettingsOK0InMeetingClosedCaptioning `json:"closed_captioning"`
	// This setting allows the host to add co-hosts.
	CoHost OptBool `json:"co_host"`
	// If set to `true`, you can [select data center regions](https://support.zoom.
	// us/hc/en-us/articles/360042411451-Selecting-data-center-regions-for-hosted-meetings-and-webinars)
	// to use for hosting your real-time meeting and webinar traffic. These regions can be provided in
	// the `data_center_regions` field. If set to `false`, the regions cannot be customized and the
	// default regions will be used.
	CustomDataCenterRegions OptBool `json:"custom_data_center_regions"`
	// Whether to allow custom live streaming.
	CustomLiveStreamingService OptBool `json:"custom_live_streaming_service"`
	// The custom live streaming service instructions.
	CustomServiceInstructions OptString `json:"custom_service_instructions"`
	// If the value of `custom_data_center_regions` is `true`, a comma-separated list of the following
	// [data center regions](https://support.zoom.
	// us/hc/en-us/articles/360059254691-Datacenter-abbreviation-list) to opt in to.
	// * `AU` - Australia.
	// * `LA` - Latin America.
	// * `CA` - Canada.
	// * `CN` - China.
	// * `DE` - Germany.
	// * `HK` - Hong Kong SAR.
	// * `IN` - India.
	// * `IE` - Ireland.
	// * `TY` - Japan.
	// * `MX` - Mexico.
	// * `NL` - Netherlands.
	// * `SG` - Singapore.
	// * `US` - United States.
	DataCenterRegions []string `json:"data_center_regions"`
	// This setting enables the **Disable desktop screen sharing for meetings you host** setting.
	DisableScreenSharingForHostMeetings OptBool `json:"disable_screen_sharing_for_host_meetings"`
	// This setting enables the **Disable screen sharing when guests are in the meeting** setting.
	DisableScreenSharingForInMeetingGuests OptBool `json:"disable_screen_sharing_for_in_meeting_guests"`
	// Zoom requires encryption for all data between the Zoom cloud, Zoom client, and Zoom Room. Require
	// encryption for 3rd party endpoints (H323/SIP).
	E2eEncryption OptBool `json:"e2e_encryption"`
	// This setting plays sound when participants join or leave:
	// `host` - When host joins or leaves.
	// `all` - When any participant joins or leaves.
	// `none` - No join or leave sound.
	EntryExitChime OptString `json:"entry_exit_chime"`
	// This setting allows another user to take control of the camera.
	FarEndCameraControl OptBool `json:"far_end_camera_control"`
	// This setting enables option to send feedback to Zoom at the end of the meeting.
	Feedback OptBool `json:"feedback"`
	// Whether the [in-meeting file transfer](https://support.zoom.
	// us/hc/en-us/articles/209605493-In-meeting-file-transfer) setting has been enabled for the user or
	// not.
	FileTransfer OptBool `json:"file_transfer"`
	// This setting enables group HD video in Meeting.
	GroupHd OptBool `json:"group_hd"`
	// This setting enables group HD video in Webinar.
	WebinarGroupHd OptBool `json:"webinar_group_hd"`
	// This setting allows participants to join a meeting directly from their desktop browser. Note that
	// the meeting experience from the desktop browser is limited.
	JoinFromDesktop OptBool `json:"join_from_desktop"`
	// This setting allows participants to join a meeting directly from their mobile browser. Note that
	// the meeting experience from the mobile browser is limited.
	JoinFromMobile OptBool `json:"join_from_mobile"`
	// The information about the [language interpretation](https://support.zoom.
	// us/hc/en-us/articles/360034919791-Using-Language-Interpretation-in-your-meeting-or-webinar)
	// settings.
	LanguageInterpretation OptUserSettingsOK0InMeetingLanguageInterpretation `json:"language_interpretation"`
	// This setting allows hosts to assign participants as sign language interpreters who can interpret
	// one language into sign language in real-time. Hosts can assign interpreters when scheduling, or
	// during the meeting itself. This feature is only available with version 5.11.3 or later.
	SignLanguageInterpretation OptUserSettingsOK0InMeetingSignLanguageInterpretation `json:"sign_language_interpretation"`
	// Whether to allow Facebook live streaming.
	LiveStreamingFacebook OptBool `json:"live_streaming_facebook"`
	// Whether to allow YouTube live streaming.
	LiveStreamingYoutube OptBool `json:"live_streaming_youtube"`
	// The information about manual captioning settings.
	ManualCaptioning OptUserSettingsOK0InMeetingManualCaptioning `json:"manual_captioning"`
	// This setting allows meeting participants to [communicate using the emoji
	// reactions](https://support.zoom.
	// us/hc/en-us/articles/115001286183-Nonverbal-feedback-and-meeting-reactions) located in the
	// **Reactions** menu in the meeting toolbar.
	MeetingReactions OptBool `json:"meeting_reactions"`
	// This setting enables you to choose from these meeting reaction options.
	// * `all` - All emojis: Allow meeting participants to use any emoji available in Zoom chat as a
	// reaction in a meeting.
	// * `selected` - Selected emojis: Allow meeting participants to use the 6 standard meeting reaction
	// emojis: Clapping Hands, Thumbs Up, Heart, Tears of Joy, Open Mouth, Party Popper (Tada,
	// Celebration).
	MeetingReactionsEmojis OptString `json:"meeting_reactions_emojis"`
	// Whether to allow host and panelist to use audible clap.
	AllowHostPanelistsToUseAudibleClap OptBool `json:"allow_host_panelists_to_use_audible_clap"`
	// You can set this field to true to use [webinar reactions](https://support.zoom.
	// us/hc/en-us/articles/4803536268429).
	WebinarReactions OptBool `json:"webinar_reactions"`
	// This setting allows the host to present a survey to participants once a meeting has ended. This
	// feature is only available in version 5.7.3 or higher.
	MeetingSurvey OptBool `json:"meeting_survey"`
	// This setting enables non-verbal feedback through screens.
	NonVerbalFeedback OptBool `json:"non_verbal_feedback"`
	// This setting adds polls to the meeting controls.
	Polling OptBool `json:"polling"`
	// This setting enables 1:1 private chat between participants during meetings.
	PrivateChat OptBool `json:"private_chat"`
	// This setting records and plays their own voice.
	RecordPlayVoice OptBool `json:"record_play_voice"`
	// This setting enables remote control during screensharing.
	RemoteControl OptBool `json:"remote_control"`
	// This setting allows host to provide 1:1 remote support to a participant.
	RemoteSupport OptBool `json:"remote_support"`
	// Whether the [**Request permission to unmute participants**](https://support.zoom.
	// us/hc/en-us/articles/203435537-Muting-and-unmuting-participants-in-a-meeting#h_01EGK4XFWS1SJGZ71MYGKF7260) option has been enabled for the user or not.
	RequestPermissionToUnmuteParticipants OptBool `json:"request_permission_to_unmute_participants"`
	// This setting allows host and participants to share their screen or content during meetings.
	ScreenSharing OptBool `json:"screen_sharing"`
	// This setting shares dual camera.
	//
	// Deprecated: schema marks this property as deprecated.
	ShareDualCamera OptBool `json:"share_dual_camera"`
	// The setting allows participants to join a meeting directly from their browser and bypass the Zoom
	// application download process. This is useful for participants who cannot download, install, or run
	// applications. Note that the meeting experience from the browser is limited.
	ShowAJoinFromYourBrowserLink OptBool `json:"show_a_join_from_your_browser_link"`
	// This setting allows you to always show meeting controls during a meeting.
	ShowMeetingControlToolbar OptBool `json:"show_meeting_control_toolbar"`
	// This setting allows the person sharing during a presentation to allow others to control the slide
	// presentation. This feature is only available in version 5.8.3 or higher.
	SlideControl OptBool `json:"slide_control"`
	// If the value of `custom_data_center_regions` is `true`, a comma-separated list of the following
	// [data center regions](https://support.zoom.
	// us/hc/en-us/articles/360059254691-Datacenter-abbreviation-list) to **not** opt in to:
	// * `EU` - Europe.
	// * `HK` - Hong Kong.
	// * `AU` - Australia.
	// * `IN` - India.
	// * `LA` - Latin America.
	// * `TY` - Tokyo.
	// * `CN` - China.
	// * `US` - United States.
	// * `CA` - Canada.
	UncheckedDataCenterRegions []string `json:"unchecked_data_center_regions"`
	// This setting enables virtual background.
	VirtualBackground OptBool `json:"virtual_background"`
	// The settings to manage virtual background.
	VirtualBackgroundSettings OptUserSettingsOK0InMeetingVirtualBackgroundSettings `json:"virtual_background_settings"`
	// This setting enables the waiting room. If enabled, attendees can only join after host approves.
	WaitingRoom          OptBool                                         `json:"waiting_room"`
	WebinarChat          OptUserSettingsOK0InMeetingWebinarChat          `json:"webinar_chat"`
	WebinarLiveStreaming OptUserSettingsOK0InMeetingWebinarLiveStreaming `json:"webinar_live_streaming"`
	// The information about the account's meeting polling settings.
	MeetingPolling OptUserSettingsOK0InMeetingMeetingPolling `json:"meeting_polling"`
	// The information about the user's webinar polling settings.
	WebinarPolling OptUserSettingsOK0InMeetingWebinarPolling `json:"webinar_polling"`
	// This setting allows the host to present surveys to attendees once a webinar has ended.
	WebinarSurvey OptBool `json:"webinar_survey"`
	// This setting indicates who can share their screen or content during meetings. The value can be one
	// of the following:
	// `host`: Only host can share the screen.
	// `all`: Both hosts and attendees can share their screen during meetings. For Webinar, the hosts and
	// panelists can start screen sharing, but not the attendees.
	WhoCanShareScreen OptString `json:"who_can_share_screen"`
	// This setting indicates who is allowed to start sharing screen when someone else in the meeting is
	// sharing their screen. The value can be one of the following:
	// `host`: Only a host can share the screen when someone else is sharing.
	// `all`: Anyone in the meeting is allowed to start sharing their screen when someone else is sharing.
	//  For Webinar, the hosts and panelists can start screen sharing, but not the attendees.
	WhoCanShareScreenWhenSomeoneIsSharing OptString `json:"who_can_share_screen_when_someone_is_sharing"`
	// This setting indicates how many participants can share at the same time. The value can be one of
	// the following:
	// `one`: Only one participant can share at a time
	// .
	// `multiple`: Multiple participants can share simultaneously (dual monitors recommended).
	ParticipantsShareSimultaneously OptString `json:"participants_share_simultaneously"`
	// Whether to allow Workplace by Facebook live streaming.
	WorkplaceByFacebook OptBool `json:"workplace_by_facebook"`
	// Users can move to a new device without leaving the meeting they're in.
	TransferMeetingsBetweenDevices OptBool `json:"transfer_meetings_between_devices"`
	// This setting enables the [**Show Zoom windows during screen share**](https://support.zoom.
	// us/hc/en-us/articles/360061383571-Showing-Zoom-windows-during-screen-share) feature.
	AllowShowZoomWindows OptBool `json:"allow_show_zoom_windows"`
}

// GetAllowHostToEnableFocusMode returns the value of AllowHostToEnableFocusMode.
func (s *UserSettingsOK0InMeeting) GetAllowHostToEnableFocusMode() OptBool {
	return s.AllowHostToEnableFocusMode
}

// GetAllowUsersToDeleteMessagesInMeetingChat returns the value of AllowUsersToDeleteMessagesInMeetingChat.
func (s *UserSettingsOK0InMeeting) GetAllowUsersToDeleteMessagesInMeetingChat() OptBool {
	return s.AllowUsersToDeleteMessagesInMeetingChat
}

// GetAllowLiveStreaming returns the value of AllowLiveStreaming.
func (s *UserSettingsOK0InMeeting) GetAllowLiveStreaming() OptBool {
	return s.AllowLiveStreaming
}

// GetPostMeetingFeedback returns the value of PostMeetingFeedback.
func (s *UserSettingsOK0InMeeting) GetPostMeetingFeedback() OptBool {
	return s.PostMeetingFeedback
}

// GetWhiteboard returns the value of Whiteboard.
func (s *UserSettingsOK0InMeeting) GetWhiteboard() OptBool {
	return s.Whiteboard
}

// GetAllowParticipantsChatWith returns the value of AllowParticipantsChatWith.
func (s *UserSettingsOK0InMeeting) GetAllowParticipantsChatWith() OptInt {
	return s.AllowParticipantsChatWith
}

// GetAllowUsersSaveChats returns the value of AllowUsersSaveChats.
func (s *UserSettingsOK0InMeeting) GetAllowUsersSaveChats() OptInt {
	return s.AllowUsersSaveChats
}

// GetAnnotation returns the value of Annotation.
func (s *UserSettingsOK0InMeeting) GetAnnotation() OptBool {
	return s.Annotation
}

// GetAttendeeOnHold returns the value of AttendeeOnHold.
func (s *UserSettingsOK0InMeeting) GetAttendeeOnHold() OptBool {
	return s.AttendeeOnHold
}

// GetAttentionModeFocusMode returns the value of AttentionModeFocusMode.
func (s *UserSettingsOK0InMeeting) GetAttentionModeFocusMode() OptBool {
	return s.AttentionModeFocusMode
}

// GetAutoSavingChat returns the value of AutoSavingChat.
func (s *UserSettingsOK0InMeeting) GetAutoSavingChat() OptBool {
	return s.AutoSavingChat
}

// GetBreakoutRoom returns the value of BreakoutRoom.
func (s *UserSettingsOK0InMeeting) GetBreakoutRoom() OptBool {
	return s.BreakoutRoom
}

// GetBreakoutRoomSchedule returns the value of BreakoutRoomSchedule.
func (s *UserSettingsOK0InMeeting) GetBreakoutRoomSchedule() OptBool {
	return s.BreakoutRoomSchedule
}

// GetChat returns the value of Chat.
func (s *UserSettingsOK0InMeeting) GetChat() OptBool {
	return s.Chat
}

// GetMeetingQuestionAnswer returns the value of MeetingQuestionAnswer.
func (s *UserSettingsOK0InMeeting) GetMeetingQuestionAnswer() OptBool {
	return s.MeetingQuestionAnswer
}

// GetClosedCaption returns the value of ClosedCaption.
func (s *UserSettingsOK0InMeeting) GetClosedCaption() OptBool {
	return s.ClosedCaption
}

// GetClosedCaptioning returns the value of ClosedCaptioning.
func (s *UserSettingsOK0InMeeting) GetClosedCaptioning() OptUserSettingsOK0InMeetingClosedCaptioning {
	return s.ClosedCaptioning
}

// GetCoHost returns the value of CoHost.
func (s *UserSettingsOK0InMeeting) GetCoHost() OptBool {
	return s.CoHost
}

// GetCustomDataCenterRegions returns the value of CustomDataCenterRegions.
func (s *UserSettingsOK0InMeeting) GetCustomDataCenterRegions() OptBool {
	return s.CustomDataCenterRegions
}

// GetCustomLiveStreamingService returns the value of CustomLiveStreamingService.
func (s *UserSettingsOK0InMeeting) GetCustomLiveStreamingService() OptBool {
	return s.CustomLiveStreamingService
}

// GetCustomServiceInstructions returns the value of CustomServiceInstructions.
func (s *UserSettingsOK0InMeeting) GetCustomServiceInstructions() OptString {
	return s.CustomServiceInstructions
}

// GetDataCenterRegions returns the value of DataCenterRegions.
func (s *UserSettingsOK0InMeeting) GetDataCenterRegions() []string {
	return s.DataCenterRegions
}

// GetDisableScreenSharingForHostMeetings returns the value of DisableScreenSharingForHostMeetings.
func (s *UserSettingsOK0InMeeting) GetDisableScreenSharingForHostMeetings() OptBool {
	return s.DisableScreenSharingForHostMeetings
}

// GetDisableScreenSharingForInMeetingGuests returns the value of DisableScreenSharingForInMeetingGuests.
func (s *UserSettingsOK0InMeeting) GetDisableScreenSharingForInMeetingGuests() OptBool {
	return s.DisableScreenSharingForInMeetingGuests
}

// GetE2eEncryption returns the value of E2eEncryption.
func (s *UserSettingsOK0InMeeting) GetE2eEncryption() OptBool {
	return s.E2eEncryption
}

// GetEntryExitChime returns the value of EntryExitChime.
func (s *UserSettingsOK0InMeeting) GetEntryExitChime() OptString {
	return s.EntryExitChime
}

// GetFarEndCameraControl returns the value of FarEndCameraControl.
func (s *UserSettingsOK0InMeeting) GetFarEndCameraControl() OptBool {
	return s.FarEndCameraControl
}

// GetFeedback returns the value of Feedback.
func (s *UserSettingsOK0InMeeting) GetFeedback() OptBool {
	return s.Feedback
}

// GetFileTransfer returns the value of FileTransfer.
func (s *UserSettingsOK0InMeeting) GetFileTransfer() OptBool {
	return s.FileTransfer
}

// GetGroupHd returns the value of GroupHd.
func (s *UserSettingsOK0InMeeting) GetGroupHd() OptBool {
	return s.GroupHd
}

// GetWebinarGroupHd returns the value of WebinarGroupHd.
func (s *UserSettingsOK0InMeeting) GetWebinarGroupHd() OptBool {
	return s.WebinarGroupHd
}

// GetJoinFromDesktop returns the value of JoinFromDesktop.
func (s *UserSettingsOK0InMeeting) GetJoinFromDesktop() OptBool {
	return s.JoinFromDesktop
}

// GetJoinFromMobile returns the value of JoinFromMobile.
func (s *UserSettingsOK0InMeeting) GetJoinFromMobile() OptBool {
	return s.JoinFromMobile
}

// GetLanguageInterpretation returns the value of LanguageInterpretation.
func (s *UserSettingsOK0InMeeting) GetLanguageInterpretation() OptUserSettingsOK0InMeetingLanguageInterpretation {
	return s.LanguageInterpretation
}

// GetSignLanguageInterpretation returns the value of SignLanguageInterpretation.
func (s *UserSettingsOK0InMeeting) GetSignLanguageInterpretation() OptUserSettingsOK0InMeetingSignLanguageInterpretation {
	return s.SignLanguageInterpretation
}

// GetLiveStreamingFacebook returns the value of LiveStreamingFacebook.
func (s *UserSettingsOK0InMeeting) GetLiveStreamingFacebook() OptBool {
	return s.LiveStreamingFacebook
}

// GetLiveStreamingYoutube returns the value of LiveStreamingYoutube.
func (s *UserSettingsOK0InMeeting) GetLiveStreamingYoutube() OptBool {
	return s.LiveStreamingYoutube
}

// GetManualCaptioning returns the value of ManualCaptioning.
func (s *UserSettingsOK0InMeeting) GetManualCaptioning() OptUserSettingsOK0InMeetingManualCaptioning {
	return s.ManualCaptioning
}

// GetMeetingReactions returns the value of MeetingReactions.
func (s *UserSettingsOK0InMeeting) GetMeetingReactions() OptBool {
	return s.MeetingReactions
}

// GetMeetingReactionsEmojis returns the value of MeetingReactionsEmojis.
func (s *UserSettingsOK0InMeeting) GetMeetingReactionsEmojis() OptString {
	return s.MeetingReactionsEmojis
}

// GetAllowHostPanelistsToUseAudibleClap returns the value of AllowHostPanelistsToUseAudibleClap.
func (s *UserSettingsOK0InMeeting) GetAllowHostPanelistsToUseAudibleClap() OptBool {
	return s.AllowHostPanelistsToUseAudibleClap
}

// GetWebinarReactions returns the value of WebinarReactions.
func (s *UserSettingsOK0InMeeting) GetWebinarReactions() OptBool {
	return s.WebinarReactions
}

// GetMeetingSurvey returns the value of MeetingSurvey.
func (s *UserSettingsOK0InMeeting) GetMeetingSurvey() OptBool {
	return s.MeetingSurvey
}

// GetNonVerbalFeedback returns the value of NonVerbalFeedback.
func (s *UserSettingsOK0InMeeting) GetNonVerbalFeedback() OptBool {
	return s.NonVerbalFeedback
}

// GetPolling returns the value of Polling.
func (s *UserSettingsOK0InMeeting) GetPolling() OptBool {
	return s.Polling
}

// GetPrivateChat returns the value of PrivateChat.
func (s *UserSettingsOK0InMeeting) GetPrivateChat() OptBool {
	return s.PrivateChat
}

// GetRecordPlayVoice returns the value of RecordPlayVoice.
func (s *UserSettingsOK0InMeeting) GetRecordPlayVoice() OptBool {
	return s.RecordPlayVoice
}

// GetRemoteControl returns the value of RemoteControl.
func (s *UserSettingsOK0InMeeting) GetRemoteControl() OptBool {
	return s.RemoteControl
}

// GetRemoteSupport returns the value of RemoteSupport.
func (s *UserSettingsOK0InMeeting) GetRemoteSupport() OptBool {
	return s.RemoteSupport
}

// GetRequestPermissionToUnmuteParticipants returns the value of RequestPermissionToUnmuteParticipants.
func (s *UserSettingsOK0InMeeting) GetRequestPermissionToUnmuteParticipants() OptBool {
	return s.RequestPermissionToUnmuteParticipants
}

// GetScreenSharing returns the value of ScreenSharing.
func (s *UserSettingsOK0InMeeting) GetScreenSharing() OptBool {
	return s.ScreenSharing
}

// GetShareDualCamera returns the value of ShareDualCamera.
func (s *UserSettingsOK0InMeeting) GetShareDualCamera() OptBool {
	return s.ShareDualCamera
}

// GetShowAJoinFromYourBrowserLink returns the value of ShowAJoinFromYourBrowserLink.
func (s *UserSettingsOK0InMeeting) GetShowAJoinFromYourBrowserLink() OptBool {
	return s.ShowAJoinFromYourBrowserLink
}

// GetShowMeetingControlToolbar returns the value of ShowMeetingControlToolbar.
func (s *UserSettingsOK0InMeeting) GetShowMeetingControlToolbar() OptBool {
	return s.ShowMeetingControlToolbar
}

// GetSlideControl returns the value of SlideControl.
func (s *UserSettingsOK0InMeeting) GetSlideControl() OptBool {
	return s.SlideControl
}

// GetUncheckedDataCenterRegions returns the value of UncheckedDataCenterRegions.
func (s *UserSettingsOK0InMeeting) GetUncheckedDataCenterRegions() []string {
	return s.UncheckedDataCenterRegions
}

// GetVirtualBackground returns the value of VirtualBackground.
func (s *UserSettingsOK0InMeeting) GetVirtualBackground() OptBool {
	return s.VirtualBackground
}

// GetVirtualBackgroundSettings returns the value of VirtualBackgroundSettings.
func (s *UserSettingsOK0InMeeting) GetVirtualBackgroundSettings() OptUserSettingsOK0InMeetingVirtualBackgroundSettings {
	return s.VirtualBackgroundSettings
}

// GetWaitingRoom returns the value of WaitingRoom.
func (s *UserSettingsOK0InMeeting) GetWaitingRoom() OptBool {
	return s.WaitingRoom
}

// GetWebinarChat returns the value of WebinarChat.
func (s *UserSettingsOK0InMeeting) GetWebinarChat() OptUserSettingsOK0InMeetingWebinarChat {
	return s.WebinarChat
}

// GetWebinarLiveStreaming returns the value of WebinarLiveStreaming.
func (s *UserSettingsOK0InMeeting) GetWebinarLiveStreaming() OptUserSettingsOK0InMeetingWebinarLiveStreaming {
	return s.WebinarLiveStreaming
}

// GetMeetingPolling returns the value of MeetingPolling.
func (s *UserSettingsOK0InMeeting) GetMeetingPolling() OptUserSettingsOK0InMeetingMeetingPolling {
	return s.MeetingPolling
}

// GetWebinarPolling returns the value of WebinarPolling.
func (s *UserSettingsOK0InMeeting) GetWebinarPolling() OptUserSettingsOK0InMeetingWebinarPolling {
	return s.WebinarPolling
}

// GetWebinarSurvey returns the value of WebinarSurvey.
func (s *UserSettingsOK0InMeeting) GetWebinarSurvey() OptBool {
	return s.WebinarSurvey
}

// GetWhoCanShareScreen returns the value of WhoCanShareScreen.
func (s *UserSettingsOK0InMeeting) GetWhoCanShareScreen() OptString {
	return s.WhoCanShareScreen
}

// GetWhoCanShareScreenWhenSomeoneIsSharing returns the value of WhoCanShareScreenWhenSomeoneIsSharing.
func (s *UserSettingsOK0InMeeting) GetWhoCanShareScreenWhenSomeoneIsSharing() OptString {
	return s.WhoCanShareScreenWhenSomeoneIsSharing
}

// GetParticipantsShareSimultaneously returns the value of ParticipantsShareSimultaneously.
func (s *UserSettingsOK0InMeeting) GetParticipantsShareSimultaneously() OptString {
	return s.ParticipantsShareSimultaneously
}

// GetWorkplaceByFacebook returns the value of WorkplaceByFacebook.
func (s *UserSettingsOK0InMeeting) GetWorkplaceByFacebook() OptBool {
	return s.WorkplaceByFacebook
}

// GetTransferMeetingsBetweenDevices returns the value of TransferMeetingsBetweenDevices.
func (s *UserSettingsOK0InMeeting) GetTransferMeetingsBetweenDevices() OptBool {
	return s.TransferMeetingsBetweenDevices
}

// GetAllowShowZoomWindows returns the value of AllowShowZoomWindows.
func (s *UserSettingsOK0InMeeting) GetAllowShowZoomWindows() OptBool {
	return s.AllowShowZoomWindows
}

// SetAllowHostToEnableFocusMode sets the value of AllowHostToEnableFocusMode.
func (s *UserSettingsOK0InMeeting) SetAllowHostToEnableFocusMode(val OptBool) {
	s.AllowHostToEnableFocusMode = val
}

// SetAllowUsersToDeleteMessagesInMeetingChat sets the value of AllowUsersToDeleteMessagesInMeetingChat.
func (s *UserSettingsOK0InMeeting) SetAllowUsersToDeleteMessagesInMeetingChat(val OptBool) {
	s.AllowUsersToDeleteMessagesInMeetingChat = val
}

// SetAllowLiveStreaming sets the value of AllowLiveStreaming.
func (s *UserSettingsOK0InMeeting) SetAllowLiveStreaming(val OptBool) {
	s.AllowLiveStreaming = val
}

// SetPostMeetingFeedback sets the value of PostMeetingFeedback.
func (s *UserSettingsOK0InMeeting) SetPostMeetingFeedback(val OptBool) {
	s.PostMeetingFeedback = val
}

// SetWhiteboard sets the value of Whiteboard.
func (s *UserSettingsOK0InMeeting) SetWhiteboard(val OptBool) {
	s.Whiteboard = val
}

// SetAllowParticipantsChatWith sets the value of AllowParticipantsChatWith.
func (s *UserSettingsOK0InMeeting) SetAllowParticipantsChatWith(val OptInt) {
	s.AllowParticipantsChatWith = val
}

// SetAllowUsersSaveChats sets the value of AllowUsersSaveChats.
func (s *UserSettingsOK0InMeeting) SetAllowUsersSaveChats(val OptInt) {
	s.AllowUsersSaveChats = val
}

// SetAnnotation sets the value of Annotation.
func (s *UserSettingsOK0InMeeting) SetAnnotation(val OptBool) {
	s.Annotation = val
}

// SetAttendeeOnHold sets the value of AttendeeOnHold.
func (s *UserSettingsOK0InMeeting) SetAttendeeOnHold(val OptBool) {
	s.AttendeeOnHold = val
}

// SetAttentionModeFocusMode sets the value of AttentionModeFocusMode.
func (s *UserSettingsOK0InMeeting) SetAttentionModeFocusMode(val OptBool) {
	s.AttentionModeFocusMode = val
}

// SetAutoSavingChat sets the value of AutoSavingChat.
func (s *UserSettingsOK0InMeeting) SetAutoSavingChat(val OptBool) {
	s.AutoSavingChat = val
}

// SetBreakoutRoom sets the value of BreakoutRoom.
func (s *UserSettingsOK0InMeeting) SetBreakoutRoom(val OptBool) {
	s.BreakoutRoom = val
}

// SetBreakoutRoomSchedule sets the value of BreakoutRoomSchedule.
func (s *UserSettingsOK0InMeeting) SetBreakoutRoomSchedule(val OptBool) {
	s.BreakoutRoomSchedule = val
}

// SetChat sets the value of Chat.
func (s *UserSettingsOK0InMeeting) SetChat(val OptBool) {
	s.Chat = val
}

// SetMeetingQuestionAnswer sets the value of MeetingQuestionAnswer.
func (s *UserSettingsOK0InMeeting) SetMeetingQuestionAnswer(val OptBool) {
	s.MeetingQuestionAnswer = val
}

// SetClosedCaption sets the value of ClosedCaption.
func (s *UserSettingsOK0InMeeting) SetClosedCaption(val OptBool) {
	s.ClosedCaption = val
}

// SetClosedCaptioning sets the value of ClosedCaptioning.
func (s *UserSettingsOK0InMeeting) SetClosedCaptioning(val OptUserSettingsOK0InMeetingClosedCaptioning) {
	s.ClosedCaptioning = val
}

// SetCoHost sets the value of CoHost.
func (s *UserSettingsOK0InMeeting) SetCoHost(val OptBool) {
	s.CoHost = val
}

// SetCustomDataCenterRegions sets the value of CustomDataCenterRegions.
func (s *UserSettingsOK0InMeeting) SetCustomDataCenterRegions(val OptBool) {
	s.CustomDataCenterRegions = val
}

// SetCustomLiveStreamingService sets the value of CustomLiveStreamingService.
func (s *UserSettingsOK0InMeeting) SetCustomLiveStreamingService(val OptBool) {
	s.CustomLiveStreamingService = val
}

// SetCustomServiceInstructions sets the value of CustomServiceInstructions.
func (s *UserSettingsOK0InMeeting) SetCustomServiceInstructions(val OptString) {
	s.CustomServiceInstructions = val
}

// SetDataCenterRegions sets the value of DataCenterRegions.
func (s *UserSettingsOK0InMeeting) SetDataCenterRegions(val []string) {
	s.DataCenterRegions = val
}

// SetDisableScreenSharingForHostMeetings sets the value of DisableScreenSharingForHostMeetings.
func (s *UserSettingsOK0InMeeting) SetDisableScreenSharingForHostMeetings(val OptBool) {
	s.DisableScreenSharingForHostMeetings = val
}

// SetDisableScreenSharingForInMeetingGuests sets the value of DisableScreenSharingForInMeetingGuests.
func (s *UserSettingsOK0InMeeting) SetDisableScreenSharingForInMeetingGuests(val OptBool) {
	s.DisableScreenSharingForInMeetingGuests = val
}

// SetE2eEncryption sets the value of E2eEncryption.
func (s *UserSettingsOK0InMeeting) SetE2eEncryption(val OptBool) {
	s.E2eEncryption = val
}

// SetEntryExitChime sets the value of EntryExitChime.
func (s *UserSettingsOK0InMeeting) SetEntryExitChime(val OptString) {
	s.EntryExitChime = val
}

// SetFarEndCameraControl sets the value of FarEndCameraControl.
func (s *UserSettingsOK0InMeeting) SetFarEndCameraControl(val OptBool) {
	s.FarEndCameraControl = val
}

// SetFeedback sets the value of Feedback.
func (s *UserSettingsOK0InMeeting) SetFeedback(val OptBool) {
	s.Feedback = val
}

// SetFileTransfer sets the value of FileTransfer.
func (s *UserSettingsOK0InMeeting) SetFileTransfer(val OptBool) {
	s.FileTransfer = val
}

// SetGroupHd sets the value of GroupHd.
func (s *UserSettingsOK0InMeeting) SetGroupHd(val OptBool) {
	s.GroupHd = val
}

// SetWebinarGroupHd sets the value of WebinarGroupHd.
func (s *UserSettingsOK0InMeeting) SetWebinarGroupHd(val OptBool) {
	s.WebinarGroupHd = val
}

// SetJoinFromDesktop sets the value of JoinFromDesktop.
func (s *UserSettingsOK0InMeeting) SetJoinFromDesktop(val OptBool) {
	s.JoinFromDesktop = val
}

// SetJoinFromMobile sets the value of JoinFromMobile.
func (s *UserSettingsOK0InMeeting) SetJoinFromMobile(val OptBool) {
	s.JoinFromMobile = val
}

// SetLanguageInterpretation sets the value of LanguageInterpretation.
func (s *UserSettingsOK0InMeeting) SetLanguageInterpretation(val OptUserSettingsOK0InMeetingLanguageInterpretation) {
	s.LanguageInterpretation = val
}

// SetSignLanguageInterpretation sets the value of SignLanguageInterpretation.
func (s *UserSettingsOK0InMeeting) SetSignLanguageInterpretation(val OptUserSettingsOK0InMeetingSignLanguageInterpretation) {
	s.SignLanguageInterpretation = val
}

// SetLiveStreamingFacebook sets the value of LiveStreamingFacebook.
func (s *UserSettingsOK0InMeeting) SetLiveStreamingFacebook(val OptBool) {
	s.LiveStreamingFacebook = val
}

// SetLiveStreamingYoutube sets the value of LiveStreamingYoutube.
func (s *UserSettingsOK0InMeeting) SetLiveStreamingYoutube(val OptBool) {
	s.LiveStreamingYoutube = val
}

// SetManualCaptioning sets the value of ManualCaptioning.
func (s *UserSettingsOK0InMeeting) SetManualCaptioning(val OptUserSettingsOK0InMeetingManualCaptioning) {
	s.ManualCaptioning = val
}

// SetMeetingReactions sets the value of MeetingReactions.
func (s *UserSettingsOK0InMeeting) SetMeetingReactions(val OptBool) {
	s.MeetingReactions = val
}

// SetMeetingReactionsEmojis sets the value of MeetingReactionsEmojis.
func (s *UserSettingsOK0InMeeting) SetMeetingReactionsEmojis(val OptString) {
	s.MeetingReactionsEmojis = val
}

// SetAllowHostPanelistsToUseAudibleClap sets the value of AllowHostPanelistsToUseAudibleClap.
func (s *UserSettingsOK0InMeeting) SetAllowHostPanelistsToUseAudibleClap(val OptBool) {
	s.AllowHostPanelistsToUseAudibleClap = val
}

// SetWebinarReactions sets the value of WebinarReactions.
func (s *UserSettingsOK0InMeeting) SetWebinarReactions(val OptBool) {
	s.WebinarReactions = val
}

// SetMeetingSurvey sets the value of MeetingSurvey.
func (s *UserSettingsOK0InMeeting) SetMeetingSurvey(val OptBool) {
	s.MeetingSurvey = val
}

// SetNonVerbalFeedback sets the value of NonVerbalFeedback.
func (s *UserSettingsOK0InMeeting) SetNonVerbalFeedback(val OptBool) {
	s.NonVerbalFeedback = val
}

// SetPolling sets the value of Polling.
func (s *UserSettingsOK0InMeeting) SetPolling(val OptBool) {
	s.Polling = val
}

// SetPrivateChat sets the value of PrivateChat.
func (s *UserSettingsOK0InMeeting) SetPrivateChat(val OptBool) {
	s.PrivateChat = val
}

// SetRecordPlayVoice sets the value of RecordPlayVoice.
func (s *UserSettingsOK0InMeeting) SetRecordPlayVoice(val OptBool) {
	s.RecordPlayVoice = val
}

// SetRemoteControl sets the value of RemoteControl.
func (s *UserSettingsOK0InMeeting) SetRemoteControl(val OptBool) {
	s.RemoteControl = val
}

// SetRemoteSupport sets the value of RemoteSupport.
func (s *UserSettingsOK0InMeeting) SetRemoteSupport(val OptBool) {
	s.RemoteSupport = val
}

// SetRequestPermissionToUnmuteParticipants sets the value of RequestPermissionToUnmuteParticipants.
func (s *UserSettingsOK0InMeeting) SetRequestPermissionToUnmuteParticipants(val OptBool) {
	s.RequestPermissionToUnmuteParticipants = val
}

// SetScreenSharing sets the value of ScreenSharing.
func (s *UserSettingsOK0InMeeting) SetScreenSharing(val OptBool) {
	s.ScreenSharing = val
}

// SetShareDualCamera sets the value of ShareDualCamera.
func (s *UserSettingsOK0InMeeting) SetShareDualCamera(val OptBool) {
	s.ShareDualCamera = val
}

// SetShowAJoinFromYourBrowserLink sets the value of ShowAJoinFromYourBrowserLink.
func (s *UserSettingsOK0InMeeting) SetShowAJoinFromYourBrowserLink(val OptBool) {
	s.ShowAJoinFromYourBrowserLink = val
}

// SetShowMeetingControlToolbar sets the value of ShowMeetingControlToolbar.
func (s *UserSettingsOK0InMeeting) SetShowMeetingControlToolbar(val OptBool) {
	s.ShowMeetingControlToolbar = val
}

// SetSlideControl sets the value of SlideControl.
func (s *UserSettingsOK0InMeeting) SetSlideControl(val OptBool) {
	s.SlideControl = val
}

// SetUncheckedDataCenterRegions sets the value of UncheckedDataCenterRegions.
func (s *UserSettingsOK0InMeeting) SetUncheckedDataCenterRegions(val []string) {
	s.UncheckedDataCenterRegions = val
}

// SetVirtualBackground sets the value of VirtualBackground.
func (s *UserSettingsOK0InMeeting) SetVirtualBackground(val OptBool) {
	s.VirtualBackground = val
}

// SetVirtualBackgroundSettings sets the value of VirtualBackgroundSettings.
func (s *UserSettingsOK0InMeeting) SetVirtualBackgroundSettings(val OptUserSettingsOK0InMeetingVirtualBackgroundSettings) {
	s.VirtualBackgroundSettings = val
}

// SetWaitingRoom sets the value of WaitingRoom.
func (s *UserSettingsOK0InMeeting) SetWaitingRoom(val OptBool) {
	s.WaitingRoom = val
}

// SetWebinarChat sets the value of WebinarChat.
func (s *UserSettingsOK0InMeeting) SetWebinarChat(val OptUserSettingsOK0InMeetingWebinarChat) {
	s.WebinarChat = val
}

// SetWebinarLiveStreaming sets the value of WebinarLiveStreaming.
func (s *UserSettingsOK0InMeeting) SetWebinarLiveStreaming(val OptUserSettingsOK0InMeetingWebinarLiveStreaming) {
	s.WebinarLiveStreaming = val
}

// SetMeetingPolling sets the value of MeetingPolling.
func (s *UserSettingsOK0InMeeting) SetMeetingPolling(val OptUserSettingsOK0InMeetingMeetingPolling) {
	s.MeetingPolling = val
}

// SetWebinarPolling sets the value of WebinarPolling.
func (s *UserSettingsOK0InMeeting) SetWebinarPolling(val OptUserSettingsOK0InMeetingWebinarPolling) {
	s.WebinarPolling = val
}

// SetWebinarSurvey sets the value of WebinarSurvey.
func (s *UserSettingsOK0InMeeting) SetWebinarSurvey(val OptBool) {
	s.WebinarSurvey = val
}

// SetWhoCanShareScreen sets the value of WhoCanShareScreen.
func (s *UserSettingsOK0InMeeting) SetWhoCanShareScreen(val OptString) {
	s.WhoCanShareScreen = val
}

// SetWhoCanShareScreenWhenSomeoneIsSharing sets the value of WhoCanShareScreenWhenSomeoneIsSharing.
func (s *UserSettingsOK0InMeeting) SetWhoCanShareScreenWhenSomeoneIsSharing(val OptString) {
	s.WhoCanShareScreenWhenSomeoneIsSharing = val
}

// SetParticipantsShareSimultaneously sets the value of ParticipantsShareSimultaneously.
func (s *UserSettingsOK0InMeeting) SetParticipantsShareSimultaneously(val OptString) {
	s.ParticipantsShareSimultaneously = val
}

// SetWorkplaceByFacebook sets the value of WorkplaceByFacebook.
func (s *UserSettingsOK0InMeeting) SetWorkplaceByFacebook(val OptBool) {
	s.WorkplaceByFacebook = val
}

// SetTransferMeetingsBetweenDevices sets the value of TransferMeetingsBetweenDevices.
func (s *UserSettingsOK0InMeeting) SetTransferMeetingsBetweenDevices(val OptBool) {
	s.TransferMeetingsBetweenDevices = val
}

// SetAllowShowZoomWindows sets the value of AllowShowZoomWindows.
func (s *UserSettingsOK0InMeeting) SetAllowShowZoomWindows(val OptBool) {
	s.AllowShowZoomWindows = val
}

// The information about the user's closed captioning settings.
type UserSettingsOK0InMeetingClosedCaptioning struct {
	// Whether to allow a live transcription service to transcribe meetings.
	AutoTranscribing OptBool `json:"auto_transcribing"`
	// Whether to allow the host to type closed captions or assign a participant or 3rd-party service to
	// provide closed captioning.
	Enable OptBool `json:"enable"`
	// Whether to allow participants to save closed captions or transcripts.
	SaveCaption OptBool `json:"save_caption"`
	// Whether to allow the use of an API token to integrate with 3rd-party closed captioning services.
	ThirdPartyCaptioningService OptBool `json:"third_party_captioning_service"`
	// Whether to allow the viewing of full transcripts in the in-meeting side panel.
	ViewFullTranscript OptBool `json:"view_full_transcript"`
}

// GetAutoTranscribing returns the value of AutoTranscribing.
func (s *UserSettingsOK0InMeetingClosedCaptioning) GetAutoTranscribing() OptBool {
	return s.AutoTranscribing
}

// GetEnable returns the value of Enable.
func (s *UserSettingsOK0InMeetingClosedCaptioning) GetEnable() OptBool {
	return s.Enable
}

// GetSaveCaption returns the value of SaveCaption.
func (s *UserSettingsOK0InMeetingClosedCaptioning) GetSaveCaption() OptBool {
	return s.SaveCaption
}

// GetThirdPartyCaptioningService returns the value of ThirdPartyCaptioningService.
func (s *UserSettingsOK0InMeetingClosedCaptioning) GetThirdPartyCaptioningService() OptBool {
	return s.ThirdPartyCaptioningService
}

// GetViewFullTranscript returns the value of ViewFullTranscript.
func (s *UserSettingsOK0InMeetingClosedCaptioning) GetViewFullTranscript() OptBool {
	return s.ViewFullTranscript
}

// SetAutoTranscribing sets the value of AutoTranscribing.
func (s *UserSettingsOK0InMeetingClosedCaptioning) SetAutoTranscribing(val OptBool) {
	s.AutoTranscribing = val
}

// SetEnable sets the value of Enable.
func (s *UserSettingsOK0InMeetingClosedCaptioning) SetEnable(val OptBool) {
	s.Enable = val
}

// SetSaveCaption sets the value of SaveCaption.
func (s *UserSettingsOK0InMeetingClosedCaptioning) SetSaveCaption(val OptBool) {
	s.SaveCaption = val
}

// SetThirdPartyCaptioningService sets the value of ThirdPartyCaptioningService.
func (s *UserSettingsOK0InMeetingClosedCaptioning) SetThirdPartyCaptioningService(val OptBool) {
	s.ThirdPartyCaptioningService = val
}

// SetViewFullTranscript sets the value of ViewFullTranscript.
func (s *UserSettingsOK0InMeetingClosedCaptioning) SetViewFullTranscript(val OptBool) {
	s.ViewFullTranscript = val
}

// The information about the [language interpretation](https://support.zoom.
// us/hc/en-us/articles/360034919791-Using-Language-Interpretation-in-your-meeting-or-webinar)
// settings.
type UserSettingsOK0InMeetingLanguageInterpretation struct {
	// A list of user-defined supported languages.
	CustomLanguages []string `json:"custom_languages"`
	// Whether enable language interpretation by default.
	EnableLanguageInterpretationByDefault OptBool `json:"enable_language_interpretation_by_default"`
	// Whether to allow participants to speak in listening channel.
	AllowParticipantsToSpeakInListeningChannel OptBool `json:"allow_participants_to_speak_in_listening_channel"`
	// Whether to allow up to 25 custom languages when scheduling meetings.
	AllowUpTo25CustomLanguagesWhenSchedulingMeetings OptBool `json:"allow_up_to_25_custom_languages_when_scheduling_meetings"`
	// This setting allows hosts to assign participants as interpreters who can interpret one language
	// into another in real-time.
	Enable OptBool `json:"enable"`
	// A list of system-supported languages.
	Languages []string `json:"languages"`
}

// GetCustomLanguages returns the value of CustomLanguages.
func (s *UserSettingsOK0InMeetingLanguageInterpretation) GetCustomLanguages() []string {
	return s.CustomLanguages
}

// GetEnableLanguageInterpretationByDefault returns the value of EnableLanguageInterpretationByDefault.
func (s *UserSettingsOK0InMeetingLanguageInterpretation) GetEnableLanguageInterpretationByDefault() OptBool {
	return s.EnableLanguageInterpretationByDefault
}

// GetAllowParticipantsToSpeakInListeningChannel returns the value of AllowParticipantsToSpeakInListeningChannel.
func (s *UserSettingsOK0InMeetingLanguageInterpretation) GetAllowParticipantsToSpeakInListeningChannel() OptBool {
	return s.AllowParticipantsToSpeakInListeningChannel
}

// GetAllowUpTo25CustomLanguagesWhenSchedulingMeetings returns the value of AllowUpTo25CustomLanguagesWhenSchedulingMeetings.
func (s *UserSettingsOK0InMeetingLanguageInterpretation) GetAllowUpTo25CustomLanguagesWhenSchedulingMeetings() OptBool {
	return s.AllowUpTo25CustomLanguagesWhenSchedulingMeetings
}

// GetEnable returns the value of Enable.
func (s *UserSettingsOK0InMeetingLanguageInterpretation) GetEnable() OptBool {
	return s.Enable
}

// GetLanguages returns the value of Languages.
func (s *UserSettingsOK0InMeetingLanguageInterpretation) GetLanguages() []string {
	return s.Languages
}

// SetCustomLanguages sets the value of CustomLanguages.
func (s *UserSettingsOK0InMeetingLanguageInterpretation) SetCustomLanguages(val []string) {
	s.CustomLanguages = val
}

// SetEnableLanguageInterpretationByDefault sets the value of EnableLanguageInterpretationByDefault.
func (s *UserSettingsOK0InMeetingLanguageInterpretation) SetEnableLanguageInterpretationByDefault(val OptBool) {
	s.EnableLanguageInterpretationByDefault = val
}

// SetAllowParticipantsToSpeakInListeningChannel sets the value of AllowParticipantsToSpeakInListeningChannel.
func (s *UserSettingsOK0InMeetingLanguageInterpretation) SetAllowParticipantsToSpeakInListeningChannel(val OptBool) {
	s.AllowParticipantsToSpeakInListeningChannel = val
}

// SetAllowUpTo25CustomLanguagesWhenSchedulingMeetings sets the value of AllowUpTo25CustomLanguagesWhenSchedulingMeetings.
func (s *UserSettingsOK0InMeetingLanguageInterpretation) SetAllowUpTo25CustomLanguagesWhenSchedulingMeetings(val OptBool) {
	s.AllowUpTo25CustomLanguagesWhenSchedulingMeetings = val
}

// SetEnable sets the value of Enable.
func (s *UserSettingsOK0InMeetingLanguageInterpretation) SetEnable(val OptBool) {
	s.Enable = val
}

// SetLanguages sets the value of Languages.
func (s *UserSettingsOK0InMeetingLanguageInterpretation) SetLanguages(val []string) {
	s.Languages = val
}

// The information about manual captioning settings.
type UserSettingsOK0InMeetingManualCaptioning struct {
	// This setting allows the host to manually caption or let the host assign a participant to provide
	// manual captioning.
	AllowToType OptBool `json:"allow_to_type"`
	// This setting enables Zoom's [live transcription feature](https://support.zoom.
	// us/hc/en-us/articles/207279736-Managing-closed-captioning-and-live-transcription#h_01FHGGHYJ4457H4GSZY0KM3NSB).
	AutoGeneratedCaptions OptBool `json:"auto_generated_captions"`
	// This setting enables the viewing of full transcripts in the in-meeting side panel.
	FullTranscript OptBool `json:"full_transcript"`
	// This setting [enables manual closed captioning](https://support.zoom.
	// us/hc/en-us/articles/207279736-Managing-closed-captioning-and-live-transcription).
	ManualCaptions OptBool `json:"manual_captions"`
	// This setting allows participants to [save closed captions or transcripts](https://support.zoom.
	// us/hc/en-us/articles/360060958752).
	// **Note:** If the `full_transcript` field is set to `false`, participants **cannot** save captions.
	SaveCaptions OptBool `json:"save_captions"`
	// This setting allows the use of an API token to integrate with a [3rd-party device](https://support.
	// zoom.us/hc/en-us/articles/115002212983) to provide closed captioning.
	ThirdPartyCaptioningService OptBool `json:"third_party_captioning_service"`
}

// GetAllowToType returns the value of AllowToType.
func (s *UserSettingsOK0InMeetingManualCaptioning) GetAllowToType() OptBool {
	return s.AllowToType
}

// GetAutoGeneratedCaptions returns the value of AutoGeneratedCaptions.
func (s *UserSettingsOK0InMeetingManualCaptioning) GetAutoGeneratedCaptions() OptBool {
	return s.AutoGeneratedCaptions
}

// GetFullTranscript returns the value of FullTranscript.
func (s *UserSettingsOK0InMeetingManualCaptioning) GetFullTranscript() OptBool {
	return s.FullTranscript
}

// GetManualCaptions returns the value of ManualCaptions.
func (s *UserSettingsOK0InMeetingManualCaptioning) GetManualCaptions() OptBool {
	return s.ManualCaptions
}

// GetSaveCaptions returns the value of SaveCaptions.
func (s *UserSettingsOK0InMeetingManualCaptioning) GetSaveCaptions() OptBool {
	return s.SaveCaptions
}

// GetThirdPartyCaptioningService returns the value of ThirdPartyCaptioningService.
func (s *UserSettingsOK0InMeetingManualCaptioning) GetThirdPartyCaptioningService() OptBool {
	return s.ThirdPartyCaptioningService
}

// SetAllowToType sets the value of AllowToType.
func (s *UserSettingsOK0InMeetingManualCaptioning) SetAllowToType(val OptBool) {
	s.AllowToType = val
}

// SetAutoGeneratedCaptions sets the value of AutoGeneratedCaptions.
func (s *UserSettingsOK0InMeetingManualCaptioning) SetAutoGeneratedCaptions(val OptBool) {
	s.AutoGeneratedCaptions = val
}

// SetFullTranscript sets the value of FullTranscript.
func (s *UserSettingsOK0InMeetingManualCaptioning) SetFullTranscript(val OptBool) {
	s.FullTranscript = val
}

// SetManualCaptions sets the value of ManualCaptions.
func (s *UserSettingsOK0InMeetingManualCaptioning) SetManualCaptions(val OptBool) {
	s.ManualCaptions = val
}

// SetSaveCaptions sets the value of SaveCaptions.
func (s *UserSettingsOK0InMeetingManualCaptioning) SetSaveCaptions(val OptBool) {
	s.SaveCaptions = val
}

// SetThirdPartyCaptioningService sets the value of ThirdPartyCaptioningService.
func (s *UserSettingsOK0InMeetingManualCaptioning) SetThirdPartyCaptioningService(val OptBool) {
	s.ThirdPartyCaptioningService = val
}

// The information about the account's meeting polling settings.
type UserSettingsOK0InMeetingMeetingPolling struct {
	// Whether to allow the host to create advanced polls and quizzes. Advanced polls and quizzes include
	// single choice, multiple choice, drop down, matching, short answer, long answer, rank order, and
	// fill-in-the-blank questions. The host can also set the correct answers for quizzes they create.
	AdvancedPolls OptBool `json:"advanced_polls"`
	// Whether to allow alternative hosts to add or edit polls and quizzes.
	AllowAlternativeHostToAddEdit OptBool `json:"allow_alternative_host_to_add_edit"`
	// Whether to require answers to be anonymous.
	RequireAnswersToBeAnonymous OptBool `json:"require_answers_to_be_anonymous"`
	// Whether to allow host to upload an image for each question.
	AllowHostToUploadImage OptBool `json:"allow_host_to_upload_image"`
	// Whether to allow the host to add polls before or during a meeting.
	Enable OptBool `json:"enable"`
}

// GetAdvancedPolls returns the value of AdvancedPolls.
func (s *UserSettingsOK0InMeetingMeetingPolling) GetAdvancedPolls() OptBool {
	return s.AdvancedPolls
}

// GetAllowAlternativeHostToAddEdit returns the value of AllowAlternativeHostToAddEdit.
func (s *UserSettingsOK0InMeetingMeetingPolling) GetAllowAlternativeHostToAddEdit() OptBool {
	return s.AllowAlternativeHostToAddEdit
}

// GetRequireAnswersToBeAnonymous returns the value of RequireAnswersToBeAnonymous.
func (s *UserSettingsOK0InMeetingMeetingPolling) GetRequireAnswersToBeAnonymous() OptBool {
	return s.RequireAnswersToBeAnonymous
}

// GetAllowHostToUploadImage returns the value of AllowHostToUploadImage.
func (s *UserSettingsOK0InMeetingMeetingPolling) GetAllowHostToUploadImage() OptBool {
	return s.AllowHostToUploadImage
}

// GetEnable returns the value of Enable.
func (s *UserSettingsOK0InMeetingMeetingPolling) GetEnable() OptBool {
	return s.Enable
}

// SetAdvancedPolls sets the value of AdvancedPolls.
func (s *UserSettingsOK0InMeetingMeetingPolling) SetAdvancedPolls(val OptBool) {
	s.AdvancedPolls = val
}

// SetAllowAlternativeHostToAddEdit sets the value of AllowAlternativeHostToAddEdit.
func (s *UserSettingsOK0InMeetingMeetingPolling) SetAllowAlternativeHostToAddEdit(val OptBool) {
	s.AllowAlternativeHostToAddEdit = val
}

// SetRequireAnswersToBeAnonymous sets the value of RequireAnswersToBeAnonymous.
func (s *UserSettingsOK0InMeetingMeetingPolling) SetRequireAnswersToBeAnonymous(val OptBool) {
	s.RequireAnswersToBeAnonymous = val
}

// SetAllowHostToUploadImage sets the value of AllowHostToUploadImage.
func (s *UserSettingsOK0InMeetingMeetingPolling) SetAllowHostToUploadImage(val OptBool) {
	s.AllowHostToUploadImage = val
}

// SetEnable sets the value of Enable.
func (s *UserSettingsOK0InMeetingMeetingPolling) SetEnable(val OptBool) {
	s.Enable = val
}

// This setting allows hosts to assign participants as sign language interpreters who can interpret
// one language into sign language in real-time. Hosts can assign interpreters when scheduling, or
// during the meeting itself. This feature is only available with version 5.11.3 or later.
type UserSettingsOK0InMeetingSignLanguageInterpretation struct {
	// Whether to allow hosts to assign participants as sign language interpreters who can interpret one
	// language into another in real-time.
	Enable OptBool `json:"enable"`
	// Whether to enable sign language interpretation view by default in scheduler.
	EnableSignLanguageInterpretationByDefault OptBool `json:"enable_sign_language_interpretation_by_default"`
	// A list of system-supported languages.
	Languages []string `json:"languages"`
	// A list of user-defined supported languages.
	CustomLanguages []string `json:"custom_languages"`
}

// GetEnable returns the value of Enable.
func (s *UserSettingsOK0InMeetingSignLanguageInterpretation) GetEnable() OptBool {
	return s.Enable
}

// GetEnableSignLanguageInterpretationByDefault returns the value of EnableSignLanguageInterpretationByDefault.
func (s *UserSettingsOK0InMeetingSignLanguageInterpretation) GetEnableSignLanguageInterpretationByDefault() OptBool {
	return s.EnableSignLanguageInterpretationByDefault
}

// GetLanguages returns the value of Languages.
func (s *UserSettingsOK0InMeetingSignLanguageInterpretation) GetLanguages() []string {
	return s.Languages
}

// GetCustomLanguages returns the value of CustomLanguages.
func (s *UserSettingsOK0InMeetingSignLanguageInterpretation) GetCustomLanguages() []string {
	return s.CustomLanguages
}

// SetEnable sets the value of Enable.
func (s *UserSettingsOK0InMeetingSignLanguageInterpretation) SetEnable(val OptBool) {
	s.Enable = val
}

// SetEnableSignLanguageInterpretationByDefault sets the value of EnableSignLanguageInterpretationByDefault.
func (s *UserSettingsOK0InMeetingSignLanguageInterpretation) SetEnableSignLanguageInterpretationByDefault(val OptBool) {
	s.EnableSignLanguageInterpretationByDefault = val
}

// SetLanguages sets the value of Languages.
func (s *UserSettingsOK0InMeetingSignLanguageInterpretation) SetLanguages(val []string) {
	s.Languages = val
}

// SetCustomLanguages sets the value of CustomLanguages.
func (s *UserSettingsOK0InMeetingSignLanguageInterpretation) SetCustomLanguages(val []string) {
	s.CustomLanguages = val
}

// The settings to manage virtual background.
type UserSettingsOK0InMeetingVirtualBackgroundSettings struct {
	// This setting allows the user to upload custom backgrounds.
	AllowUploadCustom OptBool `json:"allow_upload_custom"`
	// This setting allows the use of videos for virtual backgrounds.
	AllowVideos OptBool `json:"allow_videos"`
	// This setting enables virtual background.
	Enable OptBool                                                      `json:"enable"`
	Files  []UserSettingsOK0InMeetingVirtualBackgroundSettingsFilesItem `json:"files"`
}

// GetAllowUploadCustom returns the value of AllowUploadCustom.
func (s *UserSettingsOK0InMeetingVirtualBackgroundSettings) GetAllowUploadCustom() OptBool {
	return s.AllowUploadCustom
}

// GetAllowVideos returns the value of AllowVideos.
func (s *UserSettingsOK0InMeetingVirtualBackgroundSettings) GetAllowVideos() OptBool {
	return s.AllowVideos
}

// GetEnable returns the value of Enable.
func (s *UserSettingsOK0InMeetingVirtualBackgroundSettings) GetEnable() OptBool {
	return s.Enable
}

// GetFiles returns the value of Files.
func (s *UserSettingsOK0InMeetingVirtualBackgroundSettings) GetFiles() []UserSettingsOK0InMeetingVirtualBackgroundSettingsFilesItem {
	return s.Files
}

// SetAllowUploadCustom sets the value of AllowUploadCustom.
func (s *UserSettingsOK0InMeetingVirtualBackgroundSettings) SetAllowUploadCustom(val OptBool) {
	s.AllowUploadCustom = val
}

// SetAllowVideos sets the value of AllowVideos.
func (s *UserSettingsOK0InMeetingVirtualBackgroundSettings) SetAllowVideos(val OptBool) {
	s.AllowVideos = val
}

// SetEnable sets the value of Enable.
func (s *UserSettingsOK0InMeetingVirtualBackgroundSettings) SetEnable(val OptBool) {
	s.Enable = val
}

// SetFiles sets the value of Files.
func (s *UserSettingsOK0InMeetingVirtualBackgroundSettings) SetFiles(val []UserSettingsOK0InMeetingVirtualBackgroundSettingsFilesItem) {
	s.Files = val
}

type UserSettingsOK0InMeetingVirtualBackgroundSettingsFilesItem struct {
	// The unique identifier of the file.
	ID OptString `json:"id"`
	// Whether or not this file is the default virtual background file.
	IsDefault OptBool `json:"is_default"`
	// The file name.
	Name OptString `json:"name"`
	// The file size.
	Size OptInt `json:"size"`
	// The file type.
	Type OptString `json:"type"`
}

// GetID returns the value of ID.
func (s *UserSettingsOK0InMeetingVirtualBackgroundSettingsFilesItem) GetID() OptString {
	return s.ID
}

// GetIsDefault returns the value of IsDefault.
func (s *UserSettingsOK0InMeetingVirtualBackgroundSettingsFilesItem) GetIsDefault() OptBool {
	return s.IsDefault
}

// GetName returns the value of Name.
func (s *UserSettingsOK0InMeetingVirtualBackgroundSettingsFilesItem) GetName() OptString {
	return s.Name
}

// GetSize returns the value of Size.
func (s *UserSettingsOK0InMeetingVirtualBackgroundSettingsFilesItem) GetSize() OptInt {
	return s.Size
}

// GetType returns the value of Type.
func (s *UserSettingsOK0InMeetingVirtualBackgroundSettingsFilesItem) GetType() OptString {
	return s.Type
}

// SetID sets the value of ID.
func (s *UserSettingsOK0InMeetingVirtualBackgroundSettingsFilesItem) SetID(val OptString) {
	s.ID = val
}

// SetIsDefault sets the value of IsDefault.
func (s *UserSettingsOK0InMeetingVirtualBackgroundSettingsFilesItem) SetIsDefault(val OptBool) {
	s.IsDefault = val
}

// SetName sets the value of Name.
func (s *UserSettingsOK0InMeetingVirtualBackgroundSettingsFilesItem) SetName(val OptString) {
	s.Name = val
}

// SetSize sets the value of Size.
func (s *UserSettingsOK0InMeetingVirtualBackgroundSettingsFilesItem) SetSize(val OptInt) {
	s.Size = val
}

// SetType sets the value of Type.
func (s *UserSettingsOK0InMeetingVirtualBackgroundSettingsFilesItem) SetType(val OptString) {
	s.Type = val
}

type UserSettingsOK0InMeetingWebinarChat struct {
	// This setting indicates who webinar attendees can chat with.
	// * `1` - No one.
	// * `2` - Host and all panelists.
	// * `3` - Everyone.
	AllowAttendeesChatWith OptInt `json:"allow_attendees_chat_with"`
	// Automatically saves chat messages to a local file on the host's computer when the webinar ends.
	AllowAutoSaveLocalChatFile OptBool `json:"allow_auto_save_local_chat_file"`
	// This setting indicates who the webinar panelists can chat with.
	// * `1` - Host and all panelists.
	// * `2` - Everyone.
	AllowPanelistsChatWith OptInt `json:"allow_panelists_chat_with"`
	// This setting allows webinar panelists to send direct messages to other panelists.
	AllowPanelistsSendDirectMessage OptBool `json:"allow_panelists_send_direct_message"`
	// This setting indicates how webinar attendees can save chats.
	// * `0` - Attendees cannot save chats.
	// * `1` - Attendees can only save host and panelist chats.
	// * `2` - Attendees can save all chats.
	AllowUsersSaveChats OptInt `json:"allow_users_save_chats"`
	// By default, it indicates who the webinar attendees can chat with.
	// * `1` - Host and all panelists.
	// * `2` - Everyone.
	DefaultAttendeesChatWith OptInt `json:"default_attendees_chat_with"`
	// This setting allows the webinar participants to send chat messages.
	Enable OptBool `json:"enable"`
}

// GetAllowAttendeesChatWith returns the value of AllowAttendeesChatWith.
func (s *UserSettingsOK0InMeetingWebinarChat) GetAllowAttendeesChatWith() OptInt {
	return s.AllowAttendeesChatWith
}

// GetAllowAutoSaveLocalChatFile returns the value of AllowAutoSaveLocalChatFile.
func (s *UserSettingsOK0InMeetingWebinarChat) GetAllowAutoSaveLocalChatFile() OptBool {
	return s.AllowAutoSaveLocalChatFile
}

// GetAllowPanelistsChatWith returns the value of AllowPanelistsChatWith.
func (s *UserSettingsOK0InMeetingWebinarChat) GetAllowPanelistsChatWith() OptInt {
	return s.AllowPanelistsChatWith
}

// GetAllowPanelistsSendDirectMessage returns the value of AllowPanelistsSendDirectMessage.
func (s *UserSettingsOK0InMeetingWebinarChat) GetAllowPanelistsSendDirectMessage() OptBool {
	return s.AllowPanelistsSendDirectMessage
}

// GetAllowUsersSaveChats returns the value of AllowUsersSaveChats.
func (s *UserSettingsOK0InMeetingWebinarChat) GetAllowUsersSaveChats() OptInt {
	return s.AllowUsersSaveChats
}

// GetDefaultAttendeesChatWith returns the value of DefaultAttendeesChatWith.
func (s *UserSettingsOK0InMeetingWebinarChat) GetDefaultAttendeesChatWith() OptInt {
	return s.DefaultAttendeesChatWith
}

// GetEnable returns the value of Enable.
func (s *UserSettingsOK0InMeetingWebinarChat) GetEnable() OptBool {
	return s.Enable
}

// SetAllowAttendeesChatWith sets the value of AllowAttendeesChatWith.
func (s *UserSettingsOK0InMeetingWebinarChat) SetAllowAttendeesChatWith(val OptInt) {
	s.AllowAttendeesChatWith = val
}

// SetAllowAutoSaveLocalChatFile sets the value of AllowAutoSaveLocalChatFile.
func (s *UserSettingsOK0InMeetingWebinarChat) SetAllowAutoSaveLocalChatFile(val OptBool) {
	s.AllowAutoSaveLocalChatFile = val
}

// SetAllowPanelistsChatWith sets the value of AllowPanelistsChatWith.
func (s *UserSettingsOK0InMeetingWebinarChat) SetAllowPanelistsChatWith(val OptInt) {
	s.AllowPanelistsChatWith = val
}

// SetAllowPanelistsSendDirectMessage sets the value of AllowPanelistsSendDirectMessage.
func (s *UserSettingsOK0InMeetingWebinarChat) SetAllowPanelistsSendDirectMessage(val OptBool) {
	s.AllowPanelistsSendDirectMessage = val
}

// SetAllowUsersSaveChats sets the value of AllowUsersSaveChats.
func (s *UserSettingsOK0InMeetingWebinarChat) SetAllowUsersSaveChats(val OptInt) {
	s.AllowUsersSaveChats = val
}

// SetDefaultAttendeesChatWith sets the value of DefaultAttendeesChatWith.
func (s *UserSettingsOK0InMeetingWebinarChat) SetDefaultAttendeesChatWith(val OptInt) {
	s.DefaultAttendeesChatWith = val
}

// SetEnable sets the value of Enable.
func (s *UserSettingsOK0InMeetingWebinarChat) SetEnable(val OptBool) {
	s.Enable = val
}

type UserSettingsOK0InMeetingWebinarLiveStreaming struct {
	// The specific instructions to allow your account's meeting hosts to configure a custom live stream.
	CustomServiceInstructions OptString `json:"custom_service_instructions"`
	// Whether webinar live streaming is enabled.
	Enable OptBool `json:"enable"`
	// Whether to notify users to watch the live stream. This does not apply to custom RTMP (real-time
	// messaging protocol).
	LiveStreamingReminder OptBool `json:"live_streaming_reminder"`
	// The available live streaming services:
	// * `facebook`
	// * `workplace_by_facebook`
	// * `youtube`
	// * `custom_live_streaming_service`.
	LiveStreamingService []string `json:"live_streaming_service"`
}

// GetCustomServiceInstructions returns the value of CustomServiceInstructions.
func (s *UserSettingsOK0InMeetingWebinarLiveStreaming) GetCustomServiceInstructions() OptString {
	return s.CustomServiceInstructions
}

// GetEnable returns the value of Enable.
func (s *UserSettingsOK0InMeetingWebinarLiveStreaming) GetEnable() OptBool {
	return s.Enable
}

// GetLiveStreamingReminder returns the value of LiveStreamingReminder.
func (s *UserSettingsOK0InMeetingWebinarLiveStreaming) GetLiveStreamingReminder() OptBool {
	return s.LiveStreamingReminder
}

// GetLiveStreamingService returns the value of LiveStreamingService.
func (s *UserSettingsOK0InMeetingWebinarLiveStreaming) GetLiveStreamingService() []string {
	return s.LiveStreamingService
}

// SetCustomServiceInstructions sets the value of CustomServiceInstructions.
func (s *UserSettingsOK0InMeetingWebinarLiveStreaming) SetCustomServiceInstructions(val OptString) {
	s.CustomServiceInstructions = val
}

// SetEnable sets the value of Enable.
func (s *UserSettingsOK0InMeetingWebinarLiveStreaming) SetEnable(val OptBool) {
	s.Enable = val
}

// SetLiveStreamingReminder sets the value of LiveStreamingReminder.
func (s *UserSettingsOK0InMeetingWebinarLiveStreaming) SetLiveStreamingReminder(val OptBool) {
	s.LiveStreamingReminder = val
}

// SetLiveStreamingService sets the value of LiveStreamingService.
func (s *UserSettingsOK0InMeetingWebinarLiveStreaming) SetLiveStreamingService(val []string) {
	s.LiveStreamingService = val
}

// The information about the user's webinar polling settings.
type UserSettingsOK0InMeetingWebinarPolling struct {
	// This setting allows the host to create advanced polls and quizzes. Advanced polls and quizzes
	// include single choice, multiple choice, drop down, matching, short answer, long answer, rank order,
	//  and fill-in-the-blank questions. Hosts can also set the correct answers for quizzes they create.
	AdvancedPolls OptBool `json:"advanced_polls"`
	// Whether to allow alternative hosts to add or edit polls and quizzes.
	AllowAlternativeHostToAddEdit OptBool `json:"allow_alternative_host_to_add_edit"`
	// Whether to require answers to be anonymous.
	RequireAnswersToBeAnonymous OptBool `json:"require_answers_to_be_anonymous"`
	// Whether to allow host to upload an image for each question.
	AllowHostToUploadImage OptBool `json:"allow_host_to_upload_image"`
	// This setting allows the host to add polls before or during a webinar.
	Enable OptBool `json:"enable"`
}

// GetAdvancedPolls returns the value of AdvancedPolls.
func (s *UserSettingsOK0InMeetingWebinarPolling) GetAdvancedPolls() OptBool {
	return s.AdvancedPolls
}

// GetAllowAlternativeHostToAddEdit returns the value of AllowAlternativeHostToAddEdit.
func (s *UserSettingsOK0InMeetingWebinarPolling) GetAllowAlternativeHostToAddEdit() OptBool {
	return s.AllowAlternativeHostToAddEdit
}

// GetRequireAnswersToBeAnonymous returns the value of RequireAnswersToBeAnonymous.
func (s *UserSettingsOK0InMeetingWebinarPolling) GetRequireAnswersToBeAnonymous() OptBool {
	return s.RequireAnswersToBeAnonymous
}

// GetAllowHostToUploadImage returns the value of AllowHostToUploadImage.
func (s *UserSettingsOK0InMeetingWebinarPolling) GetAllowHostToUploadImage() OptBool {
	return s.AllowHostToUploadImage
}

// GetEnable returns the value of Enable.
func (s *UserSettingsOK0InMeetingWebinarPolling) GetEnable() OptBool {
	return s.Enable
}

// SetAdvancedPolls sets the value of AdvancedPolls.
func (s *UserSettingsOK0InMeetingWebinarPolling) SetAdvancedPolls(val OptBool) {
	s.AdvancedPolls = val
}

// SetAllowAlternativeHostToAddEdit sets the value of AllowAlternativeHostToAddEdit.
func (s *UserSettingsOK0InMeetingWebinarPolling) SetAllowAlternativeHostToAddEdit(val OptBool) {
	s.AllowAlternativeHostToAddEdit = val
}

// SetRequireAnswersToBeAnonymous sets the value of RequireAnswersToBeAnonymous.
func (s *UserSettingsOK0InMeetingWebinarPolling) SetRequireAnswersToBeAnonymous(val OptBool) {
	s.RequireAnswersToBeAnonymous = val
}

// SetAllowHostToUploadImage sets the value of AllowHostToUploadImage.
func (s *UserSettingsOK0InMeetingWebinarPolling) SetAllowHostToUploadImage(val OptBool) {
	s.AllowHostToUploadImage = val
}

// SetEnable sets the value of Enable.
func (s *UserSettingsOK0InMeetingWebinarPolling) SetEnable(val OptBool) {
	s.Enable = val
}

type UserSettingsOK0Profile struct {
	RecordingStorageLocation OptUserSettingsOK0ProfileRecordingStorageLocation `json:"recording_storage_location"`
}

// GetRecordingStorageLocation returns the value of RecordingStorageLocation.
func (s *UserSettingsOK0Profile) GetRecordingStorageLocation() OptUserSettingsOK0ProfileRecordingStorageLocation {
	return s.RecordingStorageLocation
}

// SetRecordingStorageLocation sets the value of RecordingStorageLocation.
func (s *UserSettingsOK0Profile) SetRecordingStorageLocation(val OptUserSettingsOK0ProfileRecordingStorageLocation) {
	s.RecordingStorageLocation = val
}

type UserSettingsOK0ProfileRecordingStorageLocation struct {
	// Users can choose the country to store their recorded content. Content can include meeting, webinar,
	//  and phone recordings, as well as voicemail, transcripts, and custom greeting prompts. See
	// [Managing the Communications Content storage location](https://support.zoom.
	// us/hc/en-us/articles/360050781131) for details.
	// Provide abbreviated country codes as the value for this field. See the [Countries abbreviation
	// list](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#countries) for
	// details.
	AllowedValues []string `json:"allowed_values"`
	// The abbreviated country code.
	Value OptString `json:"value"`
}

// GetAllowedValues returns the value of AllowedValues.
func (s *UserSettingsOK0ProfileRecordingStorageLocation) GetAllowedValues() []string {
	return s.AllowedValues
}

// GetValue returns the value of Value.
func (s *UserSettingsOK0ProfileRecordingStorageLocation) GetValue() OptString {
	return s.Value
}

// SetAllowedValues sets the value of AllowedValues.
func (s *UserSettingsOK0ProfileRecordingStorageLocation) SetAllowedValues(val []string) {
	s.AllowedValues = val
}

// SetValue sets the value of Value.
func (s *UserSettingsOK0ProfileRecordingStorageLocation) SetValue(val OptString) {
	s.Value = val
}

type UserSettingsOK0Recording struct {
	// This setting asks the host to confirm the disclaimer.
	AskHostToConfirmDisclaimer OptBool `json:"ask_host_to_confirm_disclaimer"`
	// This field can be used if `recording_disclaimer` is set to true. This field indicates whether or
	// not you would like to ask participants for consent when a recording starts. The value can be one
	// of the following:
	// * `true`: Ask participants for consent when a recording starts.
	// * `false`: Do not ask participants for consent when a recording starts.
	AskParticipantsToConsentDisclaimer OptBool `json:"ask_participants_to_consent_disclaimer"`
	// The auto delete cloud recordings setting.
	AutoDeleteCmr OptBool `json:"auto_delete_cmr"`
	// When the `auto_delete_cmr` value is `true`, this value is the number of days before the
	// auto-deletion of cloud recordings.
	// * `30` - 30 days.
	// * `60` - 60 days.
	// * `90` - 90 days.
	// * `120` - 120 days.
	AutoDeleteCmrDays OptInt `json:"auto_delete_cmr_days"`
	// The account's [**Record active speaker, gallery view and shared screen
	// separately**](https://support.zoom.
	// us/hc/en-us/articles/360060316092-Changing-basic-and-advanced-cloud-recording-settings#h_01F4CYJTCTXNS2MXH00W9EFG6R) settings.
	RecordFilesSeparately OptUserSettingsOK0RecordingRecordFilesSeparately `json:"record_files_separately"`
	// This setting displays the participants' names in the recording.
	DisplayParticipantName OptBool `json:"display_participant_name"`
	// This setting records thumbnails of the presenter when they are sharing their screen.
	RecordingThumbnails OptBool `json:"recording_thumbnails"`
	// This setting optimizes recordings for a third-party video editor. This may increase the file size
	// and the time it takes to generate recording files.
	OptimizeRecordingFor3rdPartyVideoEditor OptBool `json:"optimize_recording_for_3rd_party_video_editor"`
	// This setting enables the [recording highlights](https://support.zoom.
	// us/hc/en-us/articles/360060802432) feature.
	//
	// Deprecated: schema marks this property as deprecated.
	RecordingHighlight OptBool `json:"recording_highlight"`
	// This setting saves the panelist chat to the recording. This setting also saves messages sent by
	// panelists during a webinar to either all panelists or all panelists and attendees to the recording.
	SavePanelistChat OptBool `json:"save_panelist_chat"`
	// This setting saves poll results shared during the meeting or webinar. It also includes poll
	// results shared during the meeting or webinar.
	SavePollResults OptBool `json:"save_poll_results"`
	// This setting saves [closed captions](https://support.zoom.us/hc/en-us/articles/207279736) as a VTT
	// (Video Track Text) file.
	SaveCloseCaption OptBool `json:"save_close_caption"`
	// The automatic recording:
	// `local` - Record on local.
	// `cloud` - Record on cloud.
	// `none` - Disabled.
	AutoRecording OptString `json:"auto_recording"`
	// The cloud recording.
	CloudRecording OptBool `json:"cloud_recording"`
	// The host can pause or stop the auto recording in the cloud.
	HostPauseStopRecording OptBool `json:"host_pause_stop_recording"`
	// This setting allows the cloud recording access only from specific IP address ranges.
	IPAddressAccessControl OptUserSettingsOK0RecordingIPAddressAccessControl `json:"ip_address_access_control"`
	// The local recording.
	LocalRecording OptBool `json:"local_recording"`
	// This setting records one audio file for all participants.
	RecordAudioFile OptBool `json:"record_audio_file"`
	// This setting records the gallery view.
	RecordGalleryView OptBool `json:"record_gallery_view"`
	// This setting records the active speaker view.
	RecordSpeakerView OptBool `json:"record_speaker_view"`
	// The audio transcript.
	RecordingAudioTranscript OptBool `json:"recording_audio_transcript"`
	// The setting shows a disclaimer to participants before a recording starts.
	RecordingDisclaimer OptBool `json:"recording_disclaimer"`
	// By selecting this option, your recording will have meeting smart chapters, and next steps. You are
	// directing Zoom to access, process, and use your account's recording data for the purpose of
	// analysis and insights.
	SmartRecording OptUserSettingsOK0RecordingSmartRecording `json:"smart_recording"`
	// This object represents the minimum passcode requirements set for recordings via Account Recording
	// Settings.
	RecordingPasswordRequirement OptUserSettingsOK0RecordingRecordingPasswordRequirement `json:"recording_password_requirement"`
	// This setting saves chat text from the meeting.
	SaveChatText OptBool `json:"save_chat_text"`
	// This setting shows the timestamp on the video.
	ShowTimestamp OptBool `json:"show_timestamp"`
}

// GetAskHostToConfirmDisclaimer returns the value of AskHostToConfirmDisclaimer.
func (s *UserSettingsOK0Recording) GetAskHostToConfirmDisclaimer() OptBool {
	return s.AskHostToConfirmDisclaimer
}

// GetAskParticipantsToConsentDisclaimer returns the value of AskParticipantsToConsentDisclaimer.
func (s *UserSettingsOK0Recording) GetAskParticipantsToConsentDisclaimer() OptBool {
	return s.AskParticipantsToConsentDisclaimer
}

// GetAutoDeleteCmr returns the value of AutoDeleteCmr.
func (s *UserSettingsOK0Recording) GetAutoDeleteCmr() OptBool {
	return s.AutoDeleteCmr
}

// GetAutoDeleteCmrDays returns the value of AutoDeleteCmrDays.
func (s *UserSettingsOK0Recording) GetAutoDeleteCmrDays() OptInt {
	return s.AutoDeleteCmrDays
}

// GetRecordFilesSeparately returns the value of RecordFilesSeparately.
func (s *UserSettingsOK0Recording) GetRecordFilesSeparately() OptUserSettingsOK0RecordingRecordFilesSeparately {
	return s.RecordFilesSeparately
}

// GetDisplayParticipantName returns the value of DisplayParticipantName.
func (s *UserSettingsOK0Recording) GetDisplayParticipantName() OptBool {
	return s.DisplayParticipantName
}

// GetRecordingThumbnails returns the value of RecordingThumbnails.
func (s *UserSettingsOK0Recording) GetRecordingThumbnails() OptBool {
	return s.RecordingThumbnails
}

// GetOptimizeRecordingFor3rdPartyVideoEditor returns the value of OptimizeRecordingFor3rdPartyVideoEditor.
func (s *UserSettingsOK0Recording) GetOptimizeRecordingFor3rdPartyVideoEditor() OptBool {
	return s.OptimizeRecordingFor3rdPartyVideoEditor
}

// GetRecordingHighlight returns the value of RecordingHighlight.
func (s *UserSettingsOK0Recording) GetRecordingHighlight() OptBool {
	return s.RecordingHighlight
}

// GetSavePanelistChat returns the value of SavePanelistChat.
func (s *UserSettingsOK0Recording) GetSavePanelistChat() OptBool {
	return s.SavePanelistChat
}

// GetSavePollResults returns the value of SavePollResults.
func (s *UserSettingsOK0Recording) GetSavePollResults() OptBool {
	return s.SavePollResults
}

// GetSaveCloseCaption returns the value of SaveCloseCaption.
func (s *UserSettingsOK0Recording) GetSaveCloseCaption() OptBool {
	return s.SaveCloseCaption
}

// GetAutoRecording returns the value of AutoRecording.
func (s *UserSettingsOK0Recording) GetAutoRecording() OptString {
	return s.AutoRecording
}

// GetCloudRecording returns the value of CloudRecording.
func (s *UserSettingsOK0Recording) GetCloudRecording() OptBool {
	return s.CloudRecording
}

// GetHostPauseStopRecording returns the value of HostPauseStopRecording.
func (s *UserSettingsOK0Recording) GetHostPauseStopRecording() OptBool {
	return s.HostPauseStopRecording
}

// GetIPAddressAccessControl returns the value of IPAddressAccessControl.
func (s *UserSettingsOK0Recording) GetIPAddressAccessControl() OptUserSettingsOK0RecordingIPAddressAccessControl {
	return s.IPAddressAccessControl
}

// GetLocalRecording returns the value of LocalRecording.
func (s *UserSettingsOK0Recording) GetLocalRecording() OptBool {
	return s.LocalRecording
}

// GetRecordAudioFile returns the value of RecordAudioFile.
func (s *UserSettingsOK0Recording) GetRecordAudioFile() OptBool {
	return s.RecordAudioFile
}

// GetRecordGalleryView returns the value of RecordGalleryView.
func (s *UserSettingsOK0Recording) GetRecordGalleryView() OptBool {
	return s.RecordGalleryView
}

// GetRecordSpeakerView returns the value of RecordSpeakerView.
func (s *UserSettingsOK0Recording) GetRecordSpeakerView() OptBool {
	return s.RecordSpeakerView
}

// GetRecordingAudioTranscript returns the value of RecordingAudioTranscript.
func (s *UserSettingsOK0Recording) GetRecordingAudioTranscript() OptBool {
	return s.RecordingAudioTranscript
}

// GetRecordingDisclaimer returns the value of RecordingDisclaimer.
func (s *UserSettingsOK0Recording) GetRecordingDisclaimer() OptBool {
	return s.RecordingDisclaimer
}

// GetSmartRecording returns the value of SmartRecording.
func (s *UserSettingsOK0Recording) GetSmartRecording() OptUserSettingsOK0RecordingSmartRecording {
	return s.SmartRecording
}

// GetRecordingPasswordRequirement returns the value of RecordingPasswordRequirement.
func (s *UserSettingsOK0Recording) GetRecordingPasswordRequirement() OptUserSettingsOK0RecordingRecordingPasswordRequirement {
	return s.RecordingPasswordRequirement
}

// GetSaveChatText returns the value of SaveChatText.
func (s *UserSettingsOK0Recording) GetSaveChatText() OptBool {
	return s.SaveChatText
}

// GetShowTimestamp returns the value of ShowTimestamp.
func (s *UserSettingsOK0Recording) GetShowTimestamp() OptBool {
	return s.ShowTimestamp
}

// SetAskHostToConfirmDisclaimer sets the value of AskHostToConfirmDisclaimer.
func (s *UserSettingsOK0Recording) SetAskHostToConfirmDisclaimer(val OptBool) {
	s.AskHostToConfirmDisclaimer = val
}

// SetAskParticipantsToConsentDisclaimer sets the value of AskParticipantsToConsentDisclaimer.
func (s *UserSettingsOK0Recording) SetAskParticipantsToConsentDisclaimer(val OptBool) {
	s.AskParticipantsToConsentDisclaimer = val
}

// SetAutoDeleteCmr sets the value of AutoDeleteCmr.
func (s *UserSettingsOK0Recording) SetAutoDeleteCmr(val OptBool) {
	s.AutoDeleteCmr = val
}

// SetAutoDeleteCmrDays sets the value of AutoDeleteCmrDays.
func (s *UserSettingsOK0Recording) SetAutoDeleteCmrDays(val OptInt) {
	s.AutoDeleteCmrDays = val
}

// SetRecordFilesSeparately sets the value of RecordFilesSeparately.
func (s *UserSettingsOK0Recording) SetRecordFilesSeparately(val OptUserSettingsOK0RecordingRecordFilesSeparately) {
	s.RecordFilesSeparately = val
}

// SetDisplayParticipantName sets the value of DisplayParticipantName.
func (s *UserSettingsOK0Recording) SetDisplayParticipantName(val OptBool) {
	s.DisplayParticipantName = val
}

// SetRecordingThumbnails sets the value of RecordingThumbnails.
func (s *UserSettingsOK0Recording) SetRecordingThumbnails(val OptBool) {
	s.RecordingThumbnails = val
}

// SetOptimizeRecordingFor3rdPartyVideoEditor sets the value of OptimizeRecordingFor3rdPartyVideoEditor.
func (s *UserSettingsOK0Recording) SetOptimizeRecordingFor3rdPartyVideoEditor(val OptBool) {
	s.OptimizeRecordingFor3rdPartyVideoEditor = val
}

// SetRecordingHighlight sets the value of RecordingHighlight.
func (s *UserSettingsOK0Recording) SetRecordingHighlight(val OptBool) {
	s.RecordingHighlight = val
}

// SetSavePanelistChat sets the value of SavePanelistChat.
func (s *UserSettingsOK0Recording) SetSavePanelistChat(val OptBool) {
	s.SavePanelistChat = val
}

// SetSavePollResults sets the value of SavePollResults.
func (s *UserSettingsOK0Recording) SetSavePollResults(val OptBool) {
	s.SavePollResults = val
}

// SetSaveCloseCaption sets the value of SaveCloseCaption.
func (s *UserSettingsOK0Recording) SetSaveCloseCaption(val OptBool) {
	s.SaveCloseCaption = val
}

// SetAutoRecording sets the value of AutoRecording.
func (s *UserSettingsOK0Recording) SetAutoRecording(val OptString) {
	s.AutoRecording = val
}

// SetCloudRecording sets the value of CloudRecording.
func (s *UserSettingsOK0Recording) SetCloudRecording(val OptBool) {
	s.CloudRecording = val
}

// SetHostPauseStopRecording sets the value of HostPauseStopRecording.
func (s *UserSettingsOK0Recording) SetHostPauseStopRecording(val OptBool) {
	s.HostPauseStopRecording = val
}

// SetIPAddressAccessControl sets the value of IPAddressAccessControl.
func (s *UserSettingsOK0Recording) SetIPAddressAccessControl(val OptUserSettingsOK0RecordingIPAddressAccessControl) {
	s.IPAddressAccessControl = val
}

// SetLocalRecording sets the value of LocalRecording.
func (s *UserSettingsOK0Recording) SetLocalRecording(val OptBool) {
	s.LocalRecording = val
}

// SetRecordAudioFile sets the value of RecordAudioFile.
func (s *UserSettingsOK0Recording) SetRecordAudioFile(val OptBool) {
	s.RecordAudioFile = val
}

// SetRecordGalleryView sets the value of RecordGalleryView.
func (s *UserSettingsOK0Recording) SetRecordGalleryView(val OptBool) {
	s.RecordGalleryView = val
}

// SetRecordSpeakerView sets the value of RecordSpeakerView.
func (s *UserSettingsOK0Recording) SetRecordSpeakerView(val OptBool) {
	s.RecordSpeakerView = val
}

// SetRecordingAudioTranscript sets the value of RecordingAudioTranscript.
func (s *UserSettingsOK0Recording) SetRecordingAudioTranscript(val OptBool) {
	s.RecordingAudioTranscript = val
}

// SetRecordingDisclaimer sets the value of RecordingDisclaimer.
func (s *UserSettingsOK0Recording) SetRecordingDisclaimer(val OptBool) {
	s.RecordingDisclaimer = val
}

// SetSmartRecording sets the value of SmartRecording.
func (s *UserSettingsOK0Recording) SetSmartRecording(val OptUserSettingsOK0RecordingSmartRecording) {
	s.SmartRecording = val
}

// SetRecordingPasswordRequirement sets the value of RecordingPasswordRequirement.
func (s *UserSettingsOK0Recording) SetRecordingPasswordRequirement(val OptUserSettingsOK0RecordingRecordingPasswordRequirement) {
	s.RecordingPasswordRequirement = val
}

// SetSaveChatText sets the value of SaveChatText.
func (s *UserSettingsOK0Recording) SetSaveChatText(val OptBool) {
	s.SaveChatText = val
}

// SetShowTimestamp sets the value of ShowTimestamp.
func (s *UserSettingsOK0Recording) SetShowTimestamp(val OptBool) {
	s.ShowTimestamp = val
}

// This setting allows the cloud recording access only from specific IP address ranges.
type UserSettingsOK0RecordingIPAddressAccessControl struct {
	// If set to `true`, the cloud recordings of this account can only be accessed by the IP addresses
	// defined in the `ip_addresses_or_ranges` property.
	Enable OptBool `json:"enable"`
	// The IP addresses or ranges that have access to the cloud recordings. Separate multiple IP ranges
	// with comma. Use n.n.n.n, n.n.n.n/n or n.n.n.n - n.n.n.n syntax where n is a number.
	// Example: `46.33.24.184, 48.99.100.2/25` or `200.181.108.17 - 220.181.108.157`.
	IPAddressesOrRanges OptString `json:"ip_addresses_or_ranges"`
}

// GetEnable returns the value of Enable.
func (s *UserSettingsOK0RecordingIPAddressAccessControl) GetEnable() OptBool {
	return s.Enable
}

// GetIPAddressesOrRanges returns the value of IPAddressesOrRanges.
func (s *UserSettingsOK0RecordingIPAddressAccessControl) GetIPAddressesOrRanges() OptString {
	return s.IPAddressesOrRanges
}

// SetEnable sets the value of Enable.
func (s *UserSettingsOK0RecordingIPAddressAccessControl) SetEnable(val OptBool) {
	s.Enable = val
}

// SetIPAddressesOrRanges sets the value of IPAddressesOrRanges.
func (s *UserSettingsOK0RecordingIPAddressAccessControl) SetIPAddressesOrRanges(val OptString) {
	s.IPAddressesOrRanges = val
}

// The account's [**Record active speaker, gallery view and shared screen
// separately**](https://support.zoom.
// us/hc/en-us/articles/360060316092-Changing-basic-and-advanced-cloud-recording-settings#h_01F4CYJTCTXNS2MXH00W9EFG6R) settings.
type UserSettingsOK0RecordingRecordFilesSeparately struct {
	// This setting records the active speaker only.
	ActiveSpeaker OptBool `json:"active_speaker"`
	// This setting records the gallery view only.
	GalleryView OptBool `json:"gallery_view"`
	// This setting records the shared screen only.
	SharedScreen OptBool `json:"shared_screen"`
}

// GetActiveSpeaker returns the value of ActiveSpeaker.
func (s *UserSettingsOK0RecordingRecordFilesSeparately) GetActiveSpeaker() OptBool {
	return s.ActiveSpeaker
}

// GetGalleryView returns the value of GalleryView.
func (s *UserSettingsOK0RecordingRecordFilesSeparately) GetGalleryView() OptBool {
	return s.GalleryView
}

// GetSharedScreen returns the value of SharedScreen.
func (s *UserSettingsOK0RecordingRecordFilesSeparately) GetSharedScreen() OptBool {
	return s.SharedScreen
}

// SetActiveSpeaker sets the value of ActiveSpeaker.
func (s *UserSettingsOK0RecordingRecordFilesSeparately) SetActiveSpeaker(val OptBool) {
	s.ActiveSpeaker = val
}

// SetGalleryView sets the value of GalleryView.
func (s *UserSettingsOK0RecordingRecordFilesSeparately) SetGalleryView(val OptBool) {
	s.GalleryView = val
}

// SetSharedScreen sets the value of SharedScreen.
func (s *UserSettingsOK0RecordingRecordFilesSeparately) SetSharedScreen(val OptBool) {
	s.SharedScreen = val
}

// This object represents the minimum passcode requirements set for recordings via Account Recording
// Settings.
type UserSettingsOK0RecordingRecordingPasswordRequirement struct {
	// The passcode must contain at least one alphabetical letter (a, b, c..).
	HaveLetter OptBool `json:"have_letter"`
	// The passcode must contain at least one number(1, 2, 3..).
	HaveNumber OptBool `json:"have_number"`
	// The passcode must contain at least one special character(!, @, #..).
	HaveSpecialCharacter OptBool `json:"have_special_character"`
	// The minimum required length for the passcode.
	Length OptInt `json:"length"`
	// The passcode must contain only numeric characters.
	OnlyAllowNumeric OptBool `json:"only_allow_numeric"`
}

// GetHaveLetter returns the value of HaveLetter.
func (s *UserSettingsOK0RecordingRecordingPasswordRequirement) GetHaveLetter() OptBool {
	return s.HaveLetter
}

// GetHaveNumber returns the value of HaveNumber.
func (s *UserSettingsOK0RecordingRecordingPasswordRequirement) GetHaveNumber() OptBool {
	return s.HaveNumber
}

// GetHaveSpecialCharacter returns the value of HaveSpecialCharacter.
func (s *UserSettingsOK0RecordingRecordingPasswordRequirement) GetHaveSpecialCharacter() OptBool {
	return s.HaveSpecialCharacter
}

// GetLength returns the value of Length.
func (s *UserSettingsOK0RecordingRecordingPasswordRequirement) GetLength() OptInt {
	return s.Length
}

// GetOnlyAllowNumeric returns the value of OnlyAllowNumeric.
func (s *UserSettingsOK0RecordingRecordingPasswordRequirement) GetOnlyAllowNumeric() OptBool {
	return s.OnlyAllowNumeric
}

// SetHaveLetter sets the value of HaveLetter.
func (s *UserSettingsOK0RecordingRecordingPasswordRequirement) SetHaveLetter(val OptBool) {
	s.HaveLetter = val
}

// SetHaveNumber sets the value of HaveNumber.
func (s *UserSettingsOK0RecordingRecordingPasswordRequirement) SetHaveNumber(val OptBool) {
	s.HaveNumber = val
}

// SetHaveSpecialCharacter sets the value of HaveSpecialCharacter.
func (s *UserSettingsOK0RecordingRecordingPasswordRequirement) SetHaveSpecialCharacter(val OptBool) {
	s.HaveSpecialCharacter = val
}

// SetLength sets the value of Length.
func (s *UserSettingsOK0RecordingRecordingPasswordRequirement) SetLength(val OptInt) {
	s.Length = val
}

// SetOnlyAllowNumeric sets the value of OnlyAllowNumeric.
func (s *UserSettingsOK0RecordingRecordingPasswordRequirement) SetOnlyAllowNumeric(val OptBool) {
	s.OnlyAllowNumeric = val
}

// By selecting this option, your recording will have meeting smart chapters, and next steps. You are
// directing Zoom to access, process, and use your account's recording data for the purpose of
// analysis and insights.
type UserSettingsOK0RecordingSmartRecording struct {
	// By selecting this option, the meeting details in the audio transcript will be highlighted. Hosts
	// can modify highlighted sections and generate a video summary (highlighted sections may have a
	// 3-second offset) based on these sections. The summary is for informational purposes only and may
	// not be complete.
	CreateRecordingHighlights OptBool `json:"create_recording_highlights"`
	// By selecting this option, your recording will have chapters with overview. Hosts can edit the
	// chapters.
	CreateSmartChapters OptBool `json:"create_smart_chapters"`
	// By selecting this option, there will be a summary of actions to take after the recorded meeting.
	CreateNextSteps OptBool `json:"create_next_steps"`
}

// GetCreateRecordingHighlights returns the value of CreateRecordingHighlights.
func (s *UserSettingsOK0RecordingSmartRecording) GetCreateRecordingHighlights() OptBool {
	return s.CreateRecordingHighlights
}

// GetCreateSmartChapters returns the value of CreateSmartChapters.
func (s *UserSettingsOK0RecordingSmartRecording) GetCreateSmartChapters() OptBool {
	return s.CreateSmartChapters
}

// GetCreateNextSteps returns the value of CreateNextSteps.
func (s *UserSettingsOK0RecordingSmartRecording) GetCreateNextSteps() OptBool {
	return s.CreateNextSteps
}

// SetCreateRecordingHighlights sets the value of CreateRecordingHighlights.
func (s *UserSettingsOK0RecordingSmartRecording) SetCreateRecordingHighlights(val OptBool) {
	s.CreateRecordingHighlights = val
}

// SetCreateSmartChapters sets the value of CreateSmartChapters.
func (s *UserSettingsOK0RecordingSmartRecording) SetCreateSmartChapters(val OptBool) {
	s.CreateSmartChapters = val
}

// SetCreateNextSteps sets the value of CreateNextSteps.
func (s *UserSettingsOK0RecordingSmartRecording) SetCreateNextSteps(val OptBool) {
	s.CreateNextSteps = val
}

type UserSettingsOK0ScheduleMeeting struct {
	// This setting determines how participants can join the audio portion of the meeting:
	// `both` - Telephony and VoIP.
	// `telephony` - Audio PSTN telephony only.
	// `voip` - VoIP only.
	// `thirdParty` - Third party audio conference.
	AudioType OptString `json:"audio_type"`
	// The passcode for already scheduled meetings.
	DefaultPasswordForScheduledMeetings OptString `json:"default_password_for_scheduled_meetings"`
	// This setting encrypts the meeting passcode and includes it in the join meeting link to allow
	// participants to join with just one click without having to enter the passcode.
	EmbedPasswordInJoinLink OptBool `json:"embed_password_in_join_link"`
	// This setting requires a passcode for personal meetings if attendees can join before host.
	ForcePmiJbhPassword OptBool `json:"force_pmi_jbh_password"`
	// This setting starts meetings with host video on.
	HostVideo OptBool `json:"host_video"`
	// This setting joins the meeting before host arrives.
	JoinBeforeHost OptBool `json:"join_before_host"`
	// The account wide meeting or webinar [passcode requirements](https://support.zoom.
	// us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
	MeetingPasswordRequirement OptUserSettingsOK0ScheduleMeetingMeetingPasswordRequirement `json:"meeting_password_requirement"`
	// This setting starts meetings with participants video on.
	ParticipantsVideo OptBool `json:"participants_video"`
	// The personal meeting setting.
	// `true` - Indicates that the **Enable [Personal Meeting ID (PMI)](https://developers.zoom.
	// us/docs/api/rest/using-zoom-apis/#understanding-personal-meeting-id-pmi)** setting is turned on.
	// Users can choose to use a PMI for their meetings.
	// `false` - Indicates that the **Enable Personal Meeting ID** setting is [turned
	// off](https://support.zoom.
	// us/hc/en-us/articles/201362843-Personal-meeting-ID-PMI-and-personal-link#h_aa0335c8-3b06-41bc-bc1f-a8b84ef17f2a). If this setting is disabled, meetings that were scheduled with PMI will be invalid. Scheduled meetings will need to be manually updated.
	// For Zoom Phone only:If a user has been assigned a desk phone, **Elevate to Zoom Meeting** on desk
	// phone will be disabled.
	PersonalMeeting OptBool `json:"personal_meeting"`
	// The PMI passcode.
	PmiPassword OptString `json:"pmi_password"`
	// This setting generates and requires a passcode for participants who join by phone.
	PstnPasswordProtected OptBool `json:"pstn_password_protected"`
	// This setting requires a passcode for instant meetings. If you use PMI for your instant meetings,
	// this option will be disabled. This setting is always enabled for free accounts and Pro accounts
	// with a single host and cannot be modified for these accounts.
	RequirePasswordForInstantMeetings OptBool `json:"require_password_for_instant_meetings"`
	// This setting requires a passcode for the Personal Meeting ID (PMI). This setting is always enabled
	// for free accounts and Pro accounts with a single host and cannot be modified for these accounts.
	RequirePasswordForPmiMeetings OptString `json:"require_password_for_pmi_meetings"`
	// This setting requires a passcode for meetings which have already been scheduled.
	RequirePasswordForScheduledMeetings OptBool `json:"require_password_for_scheduled_meetings"`
	// This setting requires a passcode when scheduling new meetings.This setting is always enabled for
	// free accounts and Pro accounts with a single host and cannot be modified for these accounts.
	RequirePasswordForSchedulingNewMeetings OptBool `json:"require_password_for_scheduling_new_meetings"`
	// This setting uses a [Personal Meeting ID (PMI)](https://developers.zoom.
	// us/docs/api/rest/using-zoom-apis/#understanding-personal-meeting-id-pmi) when starting an instant
	// meeting.
	UsePmiForInstantMeetings OptBool `json:"use_pmi_for_instant_meetings"`
	// The usser can use a [Personal Meeting ID (PMI)](https://developers.zoom.
	// us/docs/api/rest/using-zoom-apis/#understanding-personal-meeting-id-pmi) when scheduling a meeting.
	UsePmiForScheduledMeetings OptBool `json:"use_pmi_for_scheduled_meetings"`
	// Information about the **Enable continuous meeting chat** feature.
	ContinuousMeetingChat OptUserSettingsOK0ScheduleMeetingContinuousMeetingChat `json:"continuous_meeting_chat"`
}

// GetAudioType returns the value of AudioType.
func (s *UserSettingsOK0ScheduleMeeting) GetAudioType() OptString {
	return s.AudioType
}

// GetDefaultPasswordForScheduledMeetings returns the value of DefaultPasswordForScheduledMeetings.
func (s *UserSettingsOK0ScheduleMeeting) GetDefaultPasswordForScheduledMeetings() OptString {
	return s.DefaultPasswordForScheduledMeetings
}

// GetEmbedPasswordInJoinLink returns the value of EmbedPasswordInJoinLink.
func (s *UserSettingsOK0ScheduleMeeting) GetEmbedPasswordInJoinLink() OptBool {
	return s.EmbedPasswordInJoinLink
}

// GetForcePmiJbhPassword returns the value of ForcePmiJbhPassword.
func (s *UserSettingsOK0ScheduleMeeting) GetForcePmiJbhPassword() OptBool {
	return s.ForcePmiJbhPassword
}

// GetHostVideo returns the value of HostVideo.
func (s *UserSettingsOK0ScheduleMeeting) GetHostVideo() OptBool {
	return s.HostVideo
}

// GetJoinBeforeHost returns the value of JoinBeforeHost.
func (s *UserSettingsOK0ScheduleMeeting) GetJoinBeforeHost() OptBool {
	return s.JoinBeforeHost
}

// GetMeetingPasswordRequirement returns the value of MeetingPasswordRequirement.
func (s *UserSettingsOK0ScheduleMeeting) GetMeetingPasswordRequirement() OptUserSettingsOK0ScheduleMeetingMeetingPasswordRequirement {
	return s.MeetingPasswordRequirement
}

// GetParticipantsVideo returns the value of ParticipantsVideo.
func (s *UserSettingsOK0ScheduleMeeting) GetParticipantsVideo() OptBool {
	return s.ParticipantsVideo
}

// GetPersonalMeeting returns the value of PersonalMeeting.
func (s *UserSettingsOK0ScheduleMeeting) GetPersonalMeeting() OptBool {
	return s.PersonalMeeting
}

// GetPmiPassword returns the value of PmiPassword.
func (s *UserSettingsOK0ScheduleMeeting) GetPmiPassword() OptString {
	return s.PmiPassword
}

// GetPstnPasswordProtected returns the value of PstnPasswordProtected.
func (s *UserSettingsOK0ScheduleMeeting) GetPstnPasswordProtected() OptBool {
	return s.PstnPasswordProtected
}

// GetRequirePasswordForInstantMeetings returns the value of RequirePasswordForInstantMeetings.
func (s *UserSettingsOK0ScheduleMeeting) GetRequirePasswordForInstantMeetings() OptBool {
	return s.RequirePasswordForInstantMeetings
}

// GetRequirePasswordForPmiMeetings returns the value of RequirePasswordForPmiMeetings.
func (s *UserSettingsOK0ScheduleMeeting) GetRequirePasswordForPmiMeetings() OptString {
	return s.RequirePasswordForPmiMeetings
}

// GetRequirePasswordForScheduledMeetings returns the value of RequirePasswordForScheduledMeetings.
func (s *UserSettingsOK0ScheduleMeeting) GetRequirePasswordForScheduledMeetings() OptBool {
	return s.RequirePasswordForScheduledMeetings
}

// GetRequirePasswordForSchedulingNewMeetings returns the value of RequirePasswordForSchedulingNewMeetings.
func (s *UserSettingsOK0ScheduleMeeting) GetRequirePasswordForSchedulingNewMeetings() OptBool {
	return s.RequirePasswordForSchedulingNewMeetings
}

// GetUsePmiForInstantMeetings returns the value of UsePmiForInstantMeetings.
func (s *UserSettingsOK0ScheduleMeeting) GetUsePmiForInstantMeetings() OptBool {
	return s.UsePmiForInstantMeetings
}

// GetUsePmiForScheduledMeetings returns the value of UsePmiForScheduledMeetings.
func (s *UserSettingsOK0ScheduleMeeting) GetUsePmiForScheduledMeetings() OptBool {
	return s.UsePmiForScheduledMeetings
}

// GetContinuousMeetingChat returns the value of ContinuousMeetingChat.
func (s *UserSettingsOK0ScheduleMeeting) GetContinuousMeetingChat() OptUserSettingsOK0ScheduleMeetingContinuousMeetingChat {
	return s.ContinuousMeetingChat
}

// SetAudioType sets the value of AudioType.
func (s *UserSettingsOK0ScheduleMeeting) SetAudioType(val OptString) {
	s.AudioType = val
}

// SetDefaultPasswordForScheduledMeetings sets the value of DefaultPasswordForScheduledMeetings.
func (s *UserSettingsOK0ScheduleMeeting) SetDefaultPasswordForScheduledMeetings(val OptString) {
	s.DefaultPasswordForScheduledMeetings = val
}

// SetEmbedPasswordInJoinLink sets the value of EmbedPasswordInJoinLink.
func (s *UserSettingsOK0ScheduleMeeting) SetEmbedPasswordInJoinLink(val OptBool) {
	s.EmbedPasswordInJoinLink = val
}

// SetForcePmiJbhPassword sets the value of ForcePmiJbhPassword.
func (s *UserSettingsOK0ScheduleMeeting) SetForcePmiJbhPassword(val OptBool) {
	s.ForcePmiJbhPassword = val
}

// SetHostVideo sets the value of HostVideo.
func (s *UserSettingsOK0ScheduleMeeting) SetHostVideo(val OptBool) {
	s.HostVideo = val
}

// SetJoinBeforeHost sets the value of JoinBeforeHost.
func (s *UserSettingsOK0ScheduleMeeting) SetJoinBeforeHost(val OptBool) {
	s.JoinBeforeHost = val
}

// SetMeetingPasswordRequirement sets the value of MeetingPasswordRequirement.
func (s *UserSettingsOK0ScheduleMeeting) SetMeetingPasswordRequirement(val OptUserSettingsOK0ScheduleMeetingMeetingPasswordRequirement) {
	s.MeetingPasswordRequirement = val
}

// SetParticipantsVideo sets the value of ParticipantsVideo.
func (s *UserSettingsOK0ScheduleMeeting) SetParticipantsVideo(val OptBool) {
	s.ParticipantsVideo = val
}

// SetPersonalMeeting sets the value of PersonalMeeting.
func (s *UserSettingsOK0ScheduleMeeting) SetPersonalMeeting(val OptBool) {
	s.PersonalMeeting = val
}

// SetPmiPassword sets the value of PmiPassword.
func (s *UserSettingsOK0ScheduleMeeting) SetPmiPassword(val OptString) {
	s.PmiPassword = val
}

// SetPstnPasswordProtected sets the value of PstnPasswordProtected.
func (s *UserSettingsOK0ScheduleMeeting) SetPstnPasswordProtected(val OptBool) {
	s.PstnPasswordProtected = val
}

// SetRequirePasswordForInstantMeetings sets the value of RequirePasswordForInstantMeetings.
func (s *UserSettingsOK0ScheduleMeeting) SetRequirePasswordForInstantMeetings(val OptBool) {
	s.RequirePasswordForInstantMeetings = val
}

// SetRequirePasswordForPmiMeetings sets the value of RequirePasswordForPmiMeetings.
func (s *UserSettingsOK0ScheduleMeeting) SetRequirePasswordForPmiMeetings(val OptString) {
	s.RequirePasswordForPmiMeetings = val
}

// SetRequirePasswordForScheduledMeetings sets the value of RequirePasswordForScheduledMeetings.
func (s *UserSettingsOK0ScheduleMeeting) SetRequirePasswordForScheduledMeetings(val OptBool) {
	s.RequirePasswordForScheduledMeetings = val
}

// SetRequirePasswordForSchedulingNewMeetings sets the value of RequirePasswordForSchedulingNewMeetings.
func (s *UserSettingsOK0ScheduleMeeting) SetRequirePasswordForSchedulingNewMeetings(val OptBool) {
	s.RequirePasswordForSchedulingNewMeetings = val
}

// SetUsePmiForInstantMeetings sets the value of UsePmiForInstantMeetings.
func (s *UserSettingsOK0ScheduleMeeting) SetUsePmiForInstantMeetings(val OptBool) {
	s.UsePmiForInstantMeetings = val
}

// SetUsePmiForScheduledMeetings sets the value of UsePmiForScheduledMeetings.
func (s *UserSettingsOK0ScheduleMeeting) SetUsePmiForScheduledMeetings(val OptBool) {
	s.UsePmiForScheduledMeetings = val
}

// SetContinuousMeetingChat sets the value of ContinuousMeetingChat.
func (s *UserSettingsOK0ScheduleMeeting) SetContinuousMeetingChat(val OptUserSettingsOK0ScheduleMeetingContinuousMeetingChat) {
	s.ContinuousMeetingChat = val
}

// Information about the **Enable continuous meeting chat** feature.
type UserSettingsOK0ScheduleMeetingContinuousMeetingChat struct {
	// Whether to enable the **Enable continuous meeting chat** setting.
	Enable OptBool `json:"enable"`
	// Whether to enable the **External users can be added** setting.
	CanAddExternalUsers OptBool `json:"can_add_external_users"`
	// Whether to enable the **Automatically add invited external users** setting.
	AutoAddInvitedExternalUsers OptBool `json:"auto_add_invited_external_users"`
}

// GetEnable returns the value of Enable.
func (s *UserSettingsOK0ScheduleMeetingContinuousMeetingChat) GetEnable() OptBool {
	return s.Enable
}

// GetCanAddExternalUsers returns the value of CanAddExternalUsers.
func (s *UserSettingsOK0ScheduleMeetingContinuousMeetingChat) GetCanAddExternalUsers() OptBool {
	return s.CanAddExternalUsers
}

// GetAutoAddInvitedExternalUsers returns the value of AutoAddInvitedExternalUsers.
func (s *UserSettingsOK0ScheduleMeetingContinuousMeetingChat) GetAutoAddInvitedExternalUsers() OptBool {
	return s.AutoAddInvitedExternalUsers
}

// SetEnable sets the value of Enable.
func (s *UserSettingsOK0ScheduleMeetingContinuousMeetingChat) SetEnable(val OptBool) {
	s.Enable = val
}

// SetCanAddExternalUsers sets the value of CanAddExternalUsers.
func (s *UserSettingsOK0ScheduleMeetingContinuousMeetingChat) SetCanAddExternalUsers(val OptBool) {
	s.CanAddExternalUsers = val
}

// SetAutoAddInvitedExternalUsers sets the value of AutoAddInvitedExternalUsers.
func (s *UserSettingsOK0ScheduleMeetingContinuousMeetingChat) SetAutoAddInvitedExternalUsers(val OptBool) {
	s.AutoAddInvitedExternalUsers = val
}

// The account wide meeting or webinar [passcode requirements](https://support.zoom.
// us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
type UserSettingsOK0ScheduleMeetingMeetingPasswordRequirement struct {
	ConsecutiveCharactersLength OptInt `json:"consecutive_characters_length"`
	// The passcode must contain at least 1 letter (such as a,b,c...).
	HaveLetter OptBool `json:"have_letter"`
	// The passcode must contain at least 1 number (such as 1,2,3...).
	HaveNumber OptBool `json:"have_number"`
	// The passcode must have at least one special character (!,@,#...).
	HaveSpecialCharacter OptBool `json:"have_special_character"`
	// The passcode must include both uppercase and lowercase characters.
	HaveUpperAndLowerCharacters OptBool `json:"have_upper_and_lower_characters"`
	// The minimum length that the meeting/webinar passcode must have.
	Length OptInt `json:"length"`
	// The passcode must only contain numbers and no other characters.
	OnlyAllowNumeric OptBool `json:"only_allow_numeric"`
	// This setting informs users if the provided passcode is weak.
	WeakEnhanceDetection OptBool `json:"weak_enhance_detection"`
}

// GetConsecutiveCharactersLength returns the value of ConsecutiveCharactersLength.
func (s *UserSettingsOK0ScheduleMeetingMeetingPasswordRequirement) GetConsecutiveCharactersLength() OptInt {
	return s.ConsecutiveCharactersLength
}

// GetHaveLetter returns the value of HaveLetter.
func (s *UserSettingsOK0ScheduleMeetingMeetingPasswordRequirement) GetHaveLetter() OptBool {
	return s.HaveLetter
}

// GetHaveNumber returns the value of HaveNumber.
func (s *UserSettingsOK0ScheduleMeetingMeetingPasswordRequirement) GetHaveNumber() OptBool {
	return s.HaveNumber
}

// GetHaveSpecialCharacter returns the value of HaveSpecialCharacter.
func (s *UserSettingsOK0ScheduleMeetingMeetingPasswordRequirement) GetHaveSpecialCharacter() OptBool {
	return s.HaveSpecialCharacter
}

// GetHaveUpperAndLowerCharacters returns the value of HaveUpperAndLowerCharacters.
func (s *UserSettingsOK0ScheduleMeetingMeetingPasswordRequirement) GetHaveUpperAndLowerCharacters() OptBool {
	return s.HaveUpperAndLowerCharacters
}

// GetLength returns the value of Length.
func (s *UserSettingsOK0ScheduleMeetingMeetingPasswordRequirement) GetLength() OptInt {
	return s.Length
}

// GetOnlyAllowNumeric returns the value of OnlyAllowNumeric.
func (s *UserSettingsOK0ScheduleMeetingMeetingPasswordRequirement) GetOnlyAllowNumeric() OptBool {
	return s.OnlyAllowNumeric
}

// GetWeakEnhanceDetection returns the value of WeakEnhanceDetection.
func (s *UserSettingsOK0ScheduleMeetingMeetingPasswordRequirement) GetWeakEnhanceDetection() OptBool {
	return s.WeakEnhanceDetection
}

// SetConsecutiveCharactersLength sets the value of ConsecutiveCharactersLength.
func (s *UserSettingsOK0ScheduleMeetingMeetingPasswordRequirement) SetConsecutiveCharactersLength(val OptInt) {
	s.ConsecutiveCharactersLength = val
}

// SetHaveLetter sets the value of HaveLetter.
func (s *UserSettingsOK0ScheduleMeetingMeetingPasswordRequirement) SetHaveLetter(val OptBool) {
	s.HaveLetter = val
}

// SetHaveNumber sets the value of HaveNumber.
func (s *UserSettingsOK0ScheduleMeetingMeetingPasswordRequirement) SetHaveNumber(val OptBool) {
	s.HaveNumber = val
}

// SetHaveSpecialCharacter sets the value of HaveSpecialCharacter.
func (s *UserSettingsOK0ScheduleMeetingMeetingPasswordRequirement) SetHaveSpecialCharacter(val OptBool) {
	s.HaveSpecialCharacter = val
}

// SetHaveUpperAndLowerCharacters sets the value of HaveUpperAndLowerCharacters.
func (s *UserSettingsOK0ScheduleMeetingMeetingPasswordRequirement) SetHaveUpperAndLowerCharacters(val OptBool) {
	s.HaveUpperAndLowerCharacters = val
}

// SetLength sets the value of Length.
func (s *UserSettingsOK0ScheduleMeetingMeetingPasswordRequirement) SetLength(val OptInt) {
	s.Length = val
}

// SetOnlyAllowNumeric sets the value of OnlyAllowNumeric.
func (s *UserSettingsOK0ScheduleMeetingMeetingPasswordRequirement) SetOnlyAllowNumeric(val OptBool) {
	s.OnlyAllowNumeric = val
}

// SetWeakEnhanceDetection sets the value of WeakEnhanceDetection.
func (s *UserSettingsOK0ScheduleMeetingMeetingPasswordRequirement) SetWeakEnhanceDetection(val OptBool) {
	s.WeakEnhanceDetection = val
}

type UserSettingsOK0Telephony struct {
	// The third-party audio conference info.
	AudioConferenceInfo OptString `json:"audio_conference_info"`
	// This setting shows the international numbers link on the invitation email.
	ShowInternationalNumbersLink OptBool `json:"show_international_numbers_link"`
	// This setting indicates where most of the participants call into or call from during a meeting.
	TelephonyRegions OptUserSettingsOK0TelephonyTelephonyRegions `json:"telephony_regions"`
	// The third party audio conference.
	ThirdPartyAudio OptBool `json:"third_party_audio"`
}

// GetAudioConferenceInfo returns the value of AudioConferenceInfo.
func (s *UserSettingsOK0Telephony) GetAudioConferenceInfo() OptString {
	return s.AudioConferenceInfo
}

// GetShowInternationalNumbersLink returns the value of ShowInternationalNumbersLink.
func (s *UserSettingsOK0Telephony) GetShowInternationalNumbersLink() OptBool {
	return s.ShowInternationalNumbersLink
}

// GetTelephonyRegions returns the value of TelephonyRegions.
func (s *UserSettingsOK0Telephony) GetTelephonyRegions() OptUserSettingsOK0TelephonyTelephonyRegions {
	return s.TelephonyRegions
}

// GetThirdPartyAudio returns the value of ThirdPartyAudio.
func (s *UserSettingsOK0Telephony) GetThirdPartyAudio() OptBool {
	return s.ThirdPartyAudio
}

// SetAudioConferenceInfo sets the value of AudioConferenceInfo.
func (s *UserSettingsOK0Telephony) SetAudioConferenceInfo(val OptString) {
	s.AudioConferenceInfo = val
}

// SetShowInternationalNumbersLink sets the value of ShowInternationalNumbersLink.
func (s *UserSettingsOK0Telephony) SetShowInternationalNumbersLink(val OptBool) {
	s.ShowInternationalNumbersLink = val
}

// SetTelephonyRegions sets the value of TelephonyRegions.
func (s *UserSettingsOK0Telephony) SetTelephonyRegions(val OptUserSettingsOK0TelephonyTelephonyRegions) {
	s.TelephonyRegions = val
}

// SetThirdPartyAudio sets the value of ThirdPartyAudio.
func (s *UserSettingsOK0Telephony) SetThirdPartyAudio(val OptBool) {
	s.ThirdPartyAudio = val
}

// This setting indicates where most of the participants call into or call from during a meeting.
type UserSettingsOK0TelephonyTelephonyRegions struct {
	// The telephony region options provided by Zoom to select from.
	AllowedValues []string `json:"allowed_values"`
	// The account's selected telephony regions that indicate where most participants call into or call
	// from during a meeting.
	SelectionValues OptString `json:"selection_values"`
}

// GetAllowedValues returns the value of AllowedValues.
func (s *UserSettingsOK0TelephonyTelephonyRegions) GetAllowedValues() []string {
	return s.AllowedValues
}

// GetSelectionValues returns the value of SelectionValues.
func (s *UserSettingsOK0TelephonyTelephonyRegions) GetSelectionValues() OptString {
	return s.SelectionValues
}

// SetAllowedValues sets the value of AllowedValues.
func (s *UserSettingsOK0TelephonyTelephonyRegions) SetAllowedValues(val []string) {
	s.AllowedValues = val
}

// SetSelectionValues sets the value of SelectionValues.
func (s *UserSettingsOK0TelephonyTelephonyRegions) SetSelectionValues(val OptString) {
	s.SelectionValues = val
}

// Account Settings: TSP.
type UserSettingsOK0Tsp struct {
	// The call out.
	CallOut OptBool `json:"call_out"`
	// The call out by countries or regions.
	CallOutCountries []UserSettingsOK0TspCallOutCountriesItem `json:"call_out_countries"`
	// This setting shows the international numbers link on the invitation email.
	ShowInternationalNumbersLink OptBool `json:"show_international_numbers_link"`
}

// GetCallOut returns the value of CallOut.
func (s *UserSettingsOK0Tsp) GetCallOut() OptBool {
	return s.CallOut
}

// GetCallOutCountries returns the value of CallOutCountries.
func (s *UserSettingsOK0Tsp) GetCallOutCountries() []UserSettingsOK0TspCallOutCountriesItem {
	return s.CallOutCountries
}

// GetShowInternationalNumbersLink returns the value of ShowInternationalNumbersLink.
func (s *UserSettingsOK0Tsp) GetShowInternationalNumbersLink() OptBool {
	return s.ShowInternationalNumbersLink
}

// SetCallOut sets the value of CallOut.
func (s *UserSettingsOK0Tsp) SetCallOut(val OptBool) {
	s.CallOut = val
}

// SetCallOutCountries sets the value of CallOutCountries.
func (s *UserSettingsOK0Tsp) SetCallOutCountries(val []UserSettingsOK0TspCallOutCountriesItem) {
	s.CallOutCountries = val
}

// SetShowInternationalNumbersLink sets the value of ShowInternationalNumbersLink.
func (s *UserSettingsOK0Tsp) SetShowInternationalNumbersLink(val OptBool) {
	s.ShowInternationalNumbersLink = val
}

type UserSettingsOK0TspCallOutCountriesItem struct{}

// Account settings - Whiteboard.
type UserSettingsOK0Whiteboard struct {
	// This setting is enables an out-of-meeting whiteboard.
	OutMeetingAdvancedWhiteboard OptBool `json:"out_meeting_advanced_whiteboard"`
	// This setting is enables an in-meeting whiteboard.
	InMeetingAdvancedWhiteboard OptBool `json:"in_meeting_advanced_whiteboard"`
}

// GetOutMeetingAdvancedWhiteboard returns the value of OutMeetingAdvancedWhiteboard.
func (s *UserSettingsOK0Whiteboard) GetOutMeetingAdvancedWhiteboard() OptBool {
	return s.OutMeetingAdvancedWhiteboard
}

// GetInMeetingAdvancedWhiteboard returns the value of InMeetingAdvancedWhiteboard.
func (s *UserSettingsOK0Whiteboard) GetInMeetingAdvancedWhiteboard() OptBool {
	return s.InMeetingAdvancedWhiteboard
}

// SetOutMeetingAdvancedWhiteboard sets the value of OutMeetingAdvancedWhiteboard.
func (s *UserSettingsOK0Whiteboard) SetOutMeetingAdvancedWhiteboard(val OptBool) {
	s.OutMeetingAdvancedWhiteboard = val
}

// SetInMeetingAdvancedWhiteboard sets the value of InMeetingAdvancedWhiteboard.
func (s *UserSettingsOK0Whiteboard) SetInMeetingAdvancedWhiteboard(val OptBool) {
	s.InMeetingAdvancedWhiteboard = val
}

type UserSettingsOK1 struct {
	AuthenticationOptions OptUserSettingsOK1AuthenticationOptions `json:"authentication_options"`
}

// GetAuthenticationOptions returns the value of AuthenticationOptions.
func (s *UserSettingsOK1) GetAuthenticationOptions() OptUserSettingsOK1AuthenticationOptions {
	return s.AuthenticationOptions
}

// SetAuthenticationOptions sets the value of AuthenticationOptions.
func (s *UserSettingsOK1) SetAuthenticationOptions(val OptUserSettingsOK1AuthenticationOptions) {
	s.AuthenticationOptions = val
}

type UserSettingsOK1AuthenticationOptions struct {
	// The user's [meeting authentication settings](https://support.zoom.
	// us/hc/en-us/articles/360037117472).
	MeetingAuthentication OptUserSettingsOK1AuthenticationOptionsMeetingAuthentication `json:"meeting_authentication"`
	// The user's recording authentication settings.
	RecordingAuthentication OptUserSettingsOK1AuthenticationOptionsRecordingAuthentication `json:"recording_authentication"`
}

// GetMeetingAuthentication returns the value of MeetingAuthentication.
func (s *UserSettingsOK1AuthenticationOptions) GetMeetingAuthentication() OptUserSettingsOK1AuthenticationOptionsMeetingAuthentication {
	return s.MeetingAuthentication
}

// GetRecordingAuthentication returns the value of RecordingAuthentication.
func (s *UserSettingsOK1AuthenticationOptions) GetRecordingAuthentication() OptUserSettingsOK1AuthenticationOptionsRecordingAuthentication {
	return s.RecordingAuthentication
}

// SetMeetingAuthentication sets the value of MeetingAuthentication.
func (s *UserSettingsOK1AuthenticationOptions) SetMeetingAuthentication(val OptUserSettingsOK1AuthenticationOptionsMeetingAuthentication) {
	s.MeetingAuthentication = val
}

// SetRecordingAuthentication sets the value of RecordingAuthentication.
func (s *UserSettingsOK1AuthenticationOptions) SetRecordingAuthentication(val OptUserSettingsOK1AuthenticationOptionsRecordingAuthentication) {
	s.RecordingAuthentication = val
}

// The user's [meeting authentication settings](https://support.zoom.
// us/hc/en-us/articles/360037117472).
type UserSettingsOK1AuthenticationOptionsMeetingAuthentication struct {
	// Whether the [**Allow authentication exception**](https://support.zoom.
	// us/hc/en-us/articles/360037117472#h_01F13A9N1FQFNVESC9C21NRHXY) setting is enabled. This lets
	// hosts invite users who can bypass authentication.
	AllowAuthenticationException OptBool `json:"allow_authentication_exception"`
	// The user's [**Meeting Authentication Options**](https://support.zoom.
	// us/hc/en-us/articles/360060549492-Allowing-only-authenticated-users-in-meetings#h_01F51KGPWJNQBDMFSJ3ZJQ4AA2) settings.
	AuthenticationOptions []UserSettingsOK1AuthenticationOptionsMeetingAuthenticationAuthenticationOptionsItem `json:"authentication_options"`
	// Whether only authenticated users can join meetings.
	MeetingAuthentication OptBool `json:"meeting_authentication"`
}

// GetAllowAuthenticationException returns the value of AllowAuthenticationException.
func (s *UserSettingsOK1AuthenticationOptionsMeetingAuthentication) GetAllowAuthenticationException() OptBool {
	return s.AllowAuthenticationException
}

// GetAuthenticationOptions returns the value of AuthenticationOptions.
func (s *UserSettingsOK1AuthenticationOptionsMeetingAuthentication) GetAuthenticationOptions() []UserSettingsOK1AuthenticationOptionsMeetingAuthenticationAuthenticationOptionsItem {
	return s.AuthenticationOptions
}

// GetMeetingAuthentication returns the value of MeetingAuthentication.
func (s *UserSettingsOK1AuthenticationOptionsMeetingAuthentication) GetMeetingAuthentication() OptBool {
	return s.MeetingAuthentication
}

// SetAllowAuthenticationException sets the value of AllowAuthenticationException.
func (s *UserSettingsOK1AuthenticationOptionsMeetingAuthentication) SetAllowAuthenticationException(val OptBool) {
	s.AllowAuthenticationException = val
}

// SetAuthenticationOptions sets the value of AuthenticationOptions.
func (s *UserSettingsOK1AuthenticationOptionsMeetingAuthentication) SetAuthenticationOptions(val []UserSettingsOK1AuthenticationOptionsMeetingAuthenticationAuthenticationOptionsItem) {
	s.AuthenticationOptions = val
}

// SetMeetingAuthentication sets the value of MeetingAuthentication.
func (s *UserSettingsOK1AuthenticationOptionsMeetingAuthentication) SetMeetingAuthentication(val OptBool) {
	s.MeetingAuthentication = val
}

type UserSettingsOK1AuthenticationOptionsMeetingAuthenticationAuthenticationOptionsItem struct {
	// Whether the authentication option is the default authentication option.
	DefaultOption OptBool `json:"default_option"`
	// A comma-separated list of approved authentication domains.
	Domains OptString `json:"domains"`
	// The authentication option's ID.
	ID OptString `json:"id"`
	// The authentication option's name.
	Name OptString `json:"name"`
	// The authentication type.
	// * `enforce_login` - Only users logged in to Zoom can join meetings.
	// * `enforce_login_with_domains` - Only users from specific domains can join meetings. The list of
	// domains is defined in the `domains` field.
	// * `enforce_login_with_same_account` - Only the Zoom account's users can join meetings.
	Type OptString `json:"type"`
	// Whether the authentication option is visible.
	Visible OptBool `json:"visible"`
}

// GetDefaultOption returns the value of DefaultOption.
func (s *UserSettingsOK1AuthenticationOptionsMeetingAuthenticationAuthenticationOptionsItem) GetDefaultOption() OptBool {
	return s.DefaultOption
}

// GetDomains returns the value of Domains.
func (s *UserSettingsOK1AuthenticationOptionsMeetingAuthenticationAuthenticationOptionsItem) GetDomains() OptString {
	return s.Domains
}

// GetID returns the value of ID.
func (s *UserSettingsOK1AuthenticationOptionsMeetingAuthenticationAuthenticationOptionsItem) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *UserSettingsOK1AuthenticationOptionsMeetingAuthenticationAuthenticationOptionsItem) GetName() OptString {
	return s.Name
}

// GetType returns the value of Type.
func (s *UserSettingsOK1AuthenticationOptionsMeetingAuthenticationAuthenticationOptionsItem) GetType() OptString {
	return s.Type
}

// GetVisible returns the value of Visible.
func (s *UserSettingsOK1AuthenticationOptionsMeetingAuthenticationAuthenticationOptionsItem) GetVisible() OptBool {
	return s.Visible
}

// SetDefaultOption sets the value of DefaultOption.
func (s *UserSettingsOK1AuthenticationOptionsMeetingAuthenticationAuthenticationOptionsItem) SetDefaultOption(val OptBool) {
	s.DefaultOption = val
}

// SetDomains sets the value of Domains.
func (s *UserSettingsOK1AuthenticationOptionsMeetingAuthenticationAuthenticationOptionsItem) SetDomains(val OptString) {
	s.Domains = val
}

// SetID sets the value of ID.
func (s *UserSettingsOK1AuthenticationOptionsMeetingAuthenticationAuthenticationOptionsItem) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *UserSettingsOK1AuthenticationOptionsMeetingAuthenticationAuthenticationOptionsItem) SetName(val OptString) {
	s.Name = val
}

// SetType sets the value of Type.
func (s *UserSettingsOK1AuthenticationOptionsMeetingAuthenticationAuthenticationOptionsItem) SetType(val OptString) {
	s.Type = val
}

// SetVisible sets the value of Visible.
func (s *UserSettingsOK1AuthenticationOptionsMeetingAuthenticationAuthenticationOptionsItem) SetVisible(val OptBool) {
	s.Visible = val
}

// The user's recording authentication settings.
type UserSettingsOK1AuthenticationOptionsRecordingAuthentication struct {
	// The user's authentication options.
	AuthenticationOptions []UserSettingsOK1AuthenticationOptionsRecordingAuthenticationAuthenticationOptionsItem `json:"authentication_options"`
	// Whether only authenticated users can view cloud recordings.
	RecordingAuthentication OptBool `json:"recording_authentication"`
}

// GetAuthenticationOptions returns the value of AuthenticationOptions.
func (s *UserSettingsOK1AuthenticationOptionsRecordingAuthentication) GetAuthenticationOptions() []UserSettingsOK1AuthenticationOptionsRecordingAuthenticationAuthenticationOptionsItem {
	return s.AuthenticationOptions
}

// GetRecordingAuthentication returns the value of RecordingAuthentication.
func (s *UserSettingsOK1AuthenticationOptionsRecordingAuthentication) GetRecordingAuthentication() OptBool {
	return s.RecordingAuthentication
}

// SetAuthenticationOptions sets the value of AuthenticationOptions.
func (s *UserSettingsOK1AuthenticationOptionsRecordingAuthentication) SetAuthenticationOptions(val []UserSettingsOK1AuthenticationOptionsRecordingAuthenticationAuthenticationOptionsItem) {
	s.AuthenticationOptions = val
}

// SetRecordingAuthentication sets the value of RecordingAuthentication.
func (s *UserSettingsOK1AuthenticationOptionsRecordingAuthentication) SetRecordingAuthentication(val OptBool) {
	s.RecordingAuthentication = val
}

type UserSettingsOK1AuthenticationOptionsRecordingAuthenticationAuthenticationOptionsItem struct {
	// Whether the authentication option is the default authentication option.
	DefaultOption OptBool `json:"default_option"`
	// A comma-separated list of approved authentication domains.
	Domains OptString `json:"domains"`
	// The authentication option's ID.
	ID OptString `json:"id"`
	// The authentication option's name.
	Name OptString `json:"name"`
	// The authentication type.
	// * `enforce_login` - Only users logged in to Zoom can view the recordings.
	// * `enforce_login_with_domains` - Only users from specific domains can view the recordings. The
	// list of domains is defined in the `domains` field.
	// * `internally` - Only the Zoom account's users can view the recordings.
	Type OptString `json:"type"`
	// Whether the authentication option is visible.
	Visible OptBool `json:"visible"`
}

// GetDefaultOption returns the value of DefaultOption.
func (s *UserSettingsOK1AuthenticationOptionsRecordingAuthenticationAuthenticationOptionsItem) GetDefaultOption() OptBool {
	return s.DefaultOption
}

// GetDomains returns the value of Domains.
func (s *UserSettingsOK1AuthenticationOptionsRecordingAuthenticationAuthenticationOptionsItem) GetDomains() OptString {
	return s.Domains
}

// GetID returns the value of ID.
func (s *UserSettingsOK1AuthenticationOptionsRecordingAuthenticationAuthenticationOptionsItem) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *UserSettingsOK1AuthenticationOptionsRecordingAuthenticationAuthenticationOptionsItem) GetName() OptString {
	return s.Name
}

// GetType returns the value of Type.
func (s *UserSettingsOK1AuthenticationOptionsRecordingAuthenticationAuthenticationOptionsItem) GetType() OptString {
	return s.Type
}

// GetVisible returns the value of Visible.
func (s *UserSettingsOK1AuthenticationOptionsRecordingAuthenticationAuthenticationOptionsItem) GetVisible() OptBool {
	return s.Visible
}

// SetDefaultOption sets the value of DefaultOption.
func (s *UserSettingsOK1AuthenticationOptionsRecordingAuthenticationAuthenticationOptionsItem) SetDefaultOption(val OptBool) {
	s.DefaultOption = val
}

// SetDomains sets the value of Domains.
func (s *UserSettingsOK1AuthenticationOptionsRecordingAuthenticationAuthenticationOptionsItem) SetDomains(val OptString) {
	s.Domains = val
}

// SetID sets the value of ID.
func (s *UserSettingsOK1AuthenticationOptionsRecordingAuthenticationAuthenticationOptionsItem) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *UserSettingsOK1AuthenticationOptionsRecordingAuthenticationAuthenticationOptionsItem) SetName(val OptString) {
	s.Name = val
}

// SetType sets the value of Type.
func (s *UserSettingsOK1AuthenticationOptionsRecordingAuthenticationAuthenticationOptionsItem) SetType(val OptString) {
	s.Type = val
}

// SetVisible sets the value of Visible.
func (s *UserSettingsOK1AuthenticationOptionsRecordingAuthenticationAuthenticationOptionsItem) SetVisible(val OptBool) {
	s.Visible = val
}

type UserSettingsOK2 struct {
	// Whether the [**Allow authentication exception**](https://support.zoom.
	// us/hc/en-us/articles/360037117472#h_01F13A9N1FQFNVESC9C21NRHXY) setting is enabled. This lets
	// hosts invite users who can bypass authentication.
	AllowAuthenticationException OptBool `json:"allow_authentication_exception"`
	// The meeting authentication options.
	AuthenticationOptions []UserSettingsOK2AuthenticationOptionsItem `json:"authentication_options"`
	// Only authenticated users can join meetings.
	MeetingAuthentication OptBool `json:"meeting_authentication"`
}

// GetAllowAuthenticationException returns the value of AllowAuthenticationException.
func (s *UserSettingsOK2) GetAllowAuthenticationException() OptBool {
	return s.AllowAuthenticationException
}

// GetAuthenticationOptions returns the value of AuthenticationOptions.
func (s *UserSettingsOK2) GetAuthenticationOptions() []UserSettingsOK2AuthenticationOptionsItem {
	return s.AuthenticationOptions
}

// GetMeetingAuthentication returns the value of MeetingAuthentication.
func (s *UserSettingsOK2) GetMeetingAuthentication() OptBool {
	return s.MeetingAuthentication
}

// SetAllowAuthenticationException sets the value of AllowAuthenticationException.
func (s *UserSettingsOK2) SetAllowAuthenticationException(val OptBool) {
	s.AllowAuthenticationException = val
}

// SetAuthenticationOptions sets the value of AuthenticationOptions.
func (s *UserSettingsOK2) SetAuthenticationOptions(val []UserSettingsOK2AuthenticationOptionsItem) {
	s.AuthenticationOptions = val
}

// SetMeetingAuthentication sets the value of MeetingAuthentication.
func (s *UserSettingsOK2) SetMeetingAuthentication(val OptBool) {
	s.MeetingAuthentication = val
}

type UserSettingsOK2AuthenticationOptionsItem struct {
	// The authentication default option.
	DefaultOption OptBool `json:"default_option"`
	// The authentication domains.
	Domains OptString `json:"domains"`
	// The authentication ID.
	ID OptString `json:"id"`
	// The authentication name.
	Name OptString `json:"name"`
	// The authentication type. Specify one of the following authentication types for the authentication
	// profile:
	// * `enforce_login`: This option allows any users to join the meeting or webinar, as long as they
	// are signed into their Zoom account.
	// * `enforce_login_with_domains`: This option, allows you to specify a rule so that only those Zoom
	// users whose email addresses contain a certain domain, can join the meeting or webinar. You can
	// either add multiple domains using a comma in between and/or use a wildcard for listing domains.
	// * `enforce_login_with_same_account`: This option allows users to join the meeting or webinar with
	// the same Zoom account.
	Type OptString `json:"type"`
	// This setting indicates if the authentication is visible.
	Visible OptBool `json:"visible"`
}

// GetDefaultOption returns the value of DefaultOption.
func (s *UserSettingsOK2AuthenticationOptionsItem) GetDefaultOption() OptBool {
	return s.DefaultOption
}

// GetDomains returns the value of Domains.
func (s *UserSettingsOK2AuthenticationOptionsItem) GetDomains() OptString {
	return s.Domains
}

// GetID returns the value of ID.
func (s *UserSettingsOK2AuthenticationOptionsItem) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *UserSettingsOK2AuthenticationOptionsItem) GetName() OptString {
	return s.Name
}

// GetType returns the value of Type.
func (s *UserSettingsOK2AuthenticationOptionsItem) GetType() OptString {
	return s.Type
}

// GetVisible returns the value of Visible.
func (s *UserSettingsOK2AuthenticationOptionsItem) GetVisible() OptBool {
	return s.Visible
}

// SetDefaultOption sets the value of DefaultOption.
func (s *UserSettingsOK2AuthenticationOptionsItem) SetDefaultOption(val OptBool) {
	s.DefaultOption = val
}

// SetDomains sets the value of Domains.
func (s *UserSettingsOK2AuthenticationOptionsItem) SetDomains(val OptString) {
	s.Domains = val
}

// SetID sets the value of ID.
func (s *UserSettingsOK2AuthenticationOptionsItem) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *UserSettingsOK2AuthenticationOptionsItem) SetName(val OptString) {
	s.Name = val
}

// SetType sets the value of Type.
func (s *UserSettingsOK2AuthenticationOptionsItem) SetType(val OptString) {
	s.Type = val
}

// SetVisible sets the value of Visible.
func (s *UserSettingsOK2AuthenticationOptionsItem) SetVisible(val OptBool) {
	s.Visible = val
}

type UserSettingsOK3 struct {
	// The authentication options.
	AuthenticationOptions []UserSettingsOK3AuthenticationOptionsItem `json:"authentication_options"`
	// Only authenticated users can view cloud recordings.
	RecordingAuthentication OptBool `json:"recording_authentication"`
}

// GetAuthenticationOptions returns the value of AuthenticationOptions.
func (s *UserSettingsOK3) GetAuthenticationOptions() []UserSettingsOK3AuthenticationOptionsItem {
	return s.AuthenticationOptions
}

// GetRecordingAuthentication returns the value of RecordingAuthentication.
func (s *UserSettingsOK3) GetRecordingAuthentication() OptBool {
	return s.RecordingAuthentication
}

// SetAuthenticationOptions sets the value of AuthenticationOptions.
func (s *UserSettingsOK3) SetAuthenticationOptions(val []UserSettingsOK3AuthenticationOptionsItem) {
	s.AuthenticationOptions = val
}

// SetRecordingAuthentication sets the value of RecordingAuthentication.
func (s *UserSettingsOK3) SetRecordingAuthentication(val OptBool) {
	s.RecordingAuthentication = val
}

type UserSettingsOK3AuthenticationOptionsItem struct {
	// The authentication default option.
	DefaultOption OptBool `json:"default_option"`
	// The authentication domains.
	Domains OptString `json:"domains"`
	// The authentication ID.
	ID OptString `json:"id"`
	// The name of the authentication.
	Name OptString `json:"name"`
	// The type of authentication.
	Type OptString `json:"type"`
	// The authentication is visible.
	Visible OptBool `json:"visible"`
}

// GetDefaultOption returns the value of DefaultOption.
func (s *UserSettingsOK3AuthenticationOptionsItem) GetDefaultOption() OptBool {
	return s.DefaultOption
}

// GetDomains returns the value of Domains.
func (s *UserSettingsOK3AuthenticationOptionsItem) GetDomains() OptString {
	return s.Domains
}

// GetID returns the value of ID.
func (s *UserSettingsOK3AuthenticationOptionsItem) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *UserSettingsOK3AuthenticationOptionsItem) GetName() OptString {
	return s.Name
}

// GetType returns the value of Type.
func (s *UserSettingsOK3AuthenticationOptionsItem) GetType() OptString {
	return s.Type
}

// GetVisible returns the value of Visible.
func (s *UserSettingsOK3AuthenticationOptionsItem) GetVisible() OptBool {
	return s.Visible
}

// SetDefaultOption sets the value of DefaultOption.
func (s *UserSettingsOK3AuthenticationOptionsItem) SetDefaultOption(val OptBool) {
	s.DefaultOption = val
}

// SetDomains sets the value of Domains.
func (s *UserSettingsOK3AuthenticationOptionsItem) SetDomains(val OptString) {
	s.Domains = val
}

// SetID sets the value of ID.
func (s *UserSettingsOK3AuthenticationOptionsItem) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *UserSettingsOK3AuthenticationOptionsItem) SetName(val OptString) {
	s.Name = val
}

// SetType sets the value of Type.
func (s *UserSettingsOK3AuthenticationOptionsItem) SetType(val OptString) {
	s.Type = val
}

// SetVisible sets the value of Visible.
func (s *UserSettingsOK3AuthenticationOptionsItem) SetVisible(val OptBool) {
	s.Visible = val
}

// The meeting and webinar security settings.
type UserSettingsOK4 struct {
	MeetingSecurity OptUserSettingsOK4MeetingSecurity `json:"meeting_security"`
}

// GetMeetingSecurity returns the value of MeetingSecurity.
func (s *UserSettingsOK4) GetMeetingSecurity() OptUserSettingsOK4MeetingSecurity {
	return s.MeetingSecurity
}

// SetMeetingSecurity sets the value of MeetingSecurity.
func (s *UserSettingsOK4) SetMeetingSecurity(val OptUserSettingsOK4MeetingSecurity) {
	s.MeetingSecurity = val
}

type UserSettingsOK4MeetingSecurity struct {
	// Whether all meetings must be secured with at least one security option.
	// This setting can only be disabled by Enterprise, ISV, Business (with more than 100 licenses), and
	// Education accounts.
	AutoSecurity OptBool `json:"auto_security"`
	// Whether users in specific domains are blocked from joining meetings and webinars.
	BlockUserDomain OptBool `json:"block_user_domain"`
	// The blocked domains.
	BlockUserDomainList []string `json:"block_user_domain_list"`
	// Whether the meeting passcode is encrypted and included in the invitation link. The provided link
	// will allow participants to join the meeting without having to enter the passcode.
	EmbedPasswordInJoinLink OptBool `json:"embed_password_in_join_link"`
	// The type of encryption used when starting a meeting:
	// * `enhanced_encryption` - Enhanced encryption. Encryption data is stored in the cloud.
	// * `e2ee` - End-to-end encryption. The encryption key is stored on the local device and cannot be
	// obtained by anyone else. Enabling E2EE also [**disables** certain features](https://support.zoom.
	// us/hc/en-us/articles/360048660871), such as cloud recording, live streaming, and allowing
	// participants to join before the host.
	EncryptionType OptString `json:"encryption_type"`
	// Whether end-to-end encryption is enabled for meetings.
	EndToEndEncryptedMeetings OptBool `json:"end_to_end_encrypted_meetings"`
	// Whether all instant and scheduled meetings that users can join via client or Zoom Rooms systems
	// are passcode-protected. [Personal Meeting ID (PMI)](https://support.zoom.
	// us/hc/en-us/articles/203276937) meetings are **not** included in this setting.
	MeetingPassword OptBool `json:"meeting_password"`
	// The information about the meeting and webinar [passcode requirements](https://support.zoom.
	// us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
	MeetingPasswordRequirement OptUserSettingsOK4MeetingSecurityMeetingPasswordRequirement `json:"meeting_password_requirement"`
	// Whether to specify that only authenticated users can join the meeting from the web client.
	OnlyAuthenticatedCanJoinFromWebclient OptBool `json:"only_authenticated_can_join_from_webclient"`
	// Whether passcodes are required for participants joining by phone.
	// If enabled and the meeting is passcode-protected, a numeric passcode is required for participants
	// to join by phone. For meetings with alphanumeric passcodes, a numeric passcode will be generated.
	PhonePassword OptBool `json:"phone_password"`
	// Whether all Personal Meeting ID (PMI) meetings that users can join via client or Zoom Rooms
	// systems are passcode-protected.
	PmiPassword OptBool `json:"pmi_password"`
	// Whether passcodes are required for meetings that have already been scheduled.
	RequirePasswordForScheduledMeeting OptBool `json:"require_password_for_scheduled_meeting"`
	// Whether passcodes are required for webinars that have already been scheduled.
	RequirePasswordForScheduledWebinar OptBool `json:"require_password_for_scheduled_webinar"`
	// Whether participants are placed in the [**Waiting Room**](https://support.zoom.
	// us/hc/en-us/articles/115000332726-Waiting-Room) when they join a meeting.
	// If the **Waiting Room** feature is enabled, the [**Allow participants to join before
	// host**](https://support.zoom.
	// us/hc/en-us/articles/202828525-Allow-participants-to-join-before-host) setting is automatically
	// disabled.
	WaitingRoom OptBool `json:"waiting_room"`
	// The information about the Waiting Room settings.
	WaitingRoomSettings OptUserSettingsOK4MeetingSecurityWaitingRoomSettings `json:"waiting_room_settings"`
	// Whether to generate a passcode when scheduling webinars. Participants must use the generated
	// passcode to join the scheduled webinar.
	WebinarPassword OptBool `json:"webinar_password"`
}

// GetAutoSecurity returns the value of AutoSecurity.
func (s *UserSettingsOK4MeetingSecurity) GetAutoSecurity() OptBool {
	return s.AutoSecurity
}

// GetBlockUserDomain returns the value of BlockUserDomain.
func (s *UserSettingsOK4MeetingSecurity) GetBlockUserDomain() OptBool {
	return s.BlockUserDomain
}

// GetBlockUserDomainList returns the value of BlockUserDomainList.
func (s *UserSettingsOK4MeetingSecurity) GetBlockUserDomainList() []string {
	return s.BlockUserDomainList
}

// GetEmbedPasswordInJoinLink returns the value of EmbedPasswordInJoinLink.
func (s *UserSettingsOK4MeetingSecurity) GetEmbedPasswordInJoinLink() OptBool {
	return s.EmbedPasswordInJoinLink
}

// GetEncryptionType returns the value of EncryptionType.
func (s *UserSettingsOK4MeetingSecurity) GetEncryptionType() OptString {
	return s.EncryptionType
}

// GetEndToEndEncryptedMeetings returns the value of EndToEndEncryptedMeetings.
func (s *UserSettingsOK4MeetingSecurity) GetEndToEndEncryptedMeetings() OptBool {
	return s.EndToEndEncryptedMeetings
}

// GetMeetingPassword returns the value of MeetingPassword.
func (s *UserSettingsOK4MeetingSecurity) GetMeetingPassword() OptBool {
	return s.MeetingPassword
}

// GetMeetingPasswordRequirement returns the value of MeetingPasswordRequirement.
func (s *UserSettingsOK4MeetingSecurity) GetMeetingPasswordRequirement() OptUserSettingsOK4MeetingSecurityMeetingPasswordRequirement {
	return s.MeetingPasswordRequirement
}

// GetOnlyAuthenticatedCanJoinFromWebclient returns the value of OnlyAuthenticatedCanJoinFromWebclient.
func (s *UserSettingsOK4MeetingSecurity) GetOnlyAuthenticatedCanJoinFromWebclient() OptBool {
	return s.OnlyAuthenticatedCanJoinFromWebclient
}

// GetPhonePassword returns the value of PhonePassword.
func (s *UserSettingsOK4MeetingSecurity) GetPhonePassword() OptBool {
	return s.PhonePassword
}

// GetPmiPassword returns the value of PmiPassword.
func (s *UserSettingsOK4MeetingSecurity) GetPmiPassword() OptBool {
	return s.PmiPassword
}

// GetRequirePasswordForScheduledMeeting returns the value of RequirePasswordForScheduledMeeting.
func (s *UserSettingsOK4MeetingSecurity) GetRequirePasswordForScheduledMeeting() OptBool {
	return s.RequirePasswordForScheduledMeeting
}

// GetRequirePasswordForScheduledWebinar returns the value of RequirePasswordForScheduledWebinar.
func (s *UserSettingsOK4MeetingSecurity) GetRequirePasswordForScheduledWebinar() OptBool {
	return s.RequirePasswordForScheduledWebinar
}

// GetWaitingRoom returns the value of WaitingRoom.
func (s *UserSettingsOK4MeetingSecurity) GetWaitingRoom() OptBool {
	return s.WaitingRoom
}

// GetWaitingRoomSettings returns the value of WaitingRoomSettings.
func (s *UserSettingsOK4MeetingSecurity) GetWaitingRoomSettings() OptUserSettingsOK4MeetingSecurityWaitingRoomSettings {
	return s.WaitingRoomSettings
}

// GetWebinarPassword returns the value of WebinarPassword.
func (s *UserSettingsOK4MeetingSecurity) GetWebinarPassword() OptBool {
	return s.WebinarPassword
}

// SetAutoSecurity sets the value of AutoSecurity.
func (s *UserSettingsOK4MeetingSecurity) SetAutoSecurity(val OptBool) {
	s.AutoSecurity = val
}

// SetBlockUserDomain sets the value of BlockUserDomain.
func (s *UserSettingsOK4MeetingSecurity) SetBlockUserDomain(val OptBool) {
	s.BlockUserDomain = val
}

// SetBlockUserDomainList sets the value of BlockUserDomainList.
func (s *UserSettingsOK4MeetingSecurity) SetBlockUserDomainList(val []string) {
	s.BlockUserDomainList = val
}

// SetEmbedPasswordInJoinLink sets the value of EmbedPasswordInJoinLink.
func (s *UserSettingsOK4MeetingSecurity) SetEmbedPasswordInJoinLink(val OptBool) {
	s.EmbedPasswordInJoinLink = val
}

// SetEncryptionType sets the value of EncryptionType.
func (s *UserSettingsOK4MeetingSecurity) SetEncryptionType(val OptString) {
	s.EncryptionType = val
}

// SetEndToEndEncryptedMeetings sets the value of EndToEndEncryptedMeetings.
func (s *UserSettingsOK4MeetingSecurity) SetEndToEndEncryptedMeetings(val OptBool) {
	s.EndToEndEncryptedMeetings = val
}

// SetMeetingPassword sets the value of MeetingPassword.
func (s *UserSettingsOK4MeetingSecurity) SetMeetingPassword(val OptBool) {
	s.MeetingPassword = val
}

// SetMeetingPasswordRequirement sets the value of MeetingPasswordRequirement.
func (s *UserSettingsOK4MeetingSecurity) SetMeetingPasswordRequirement(val OptUserSettingsOK4MeetingSecurityMeetingPasswordRequirement) {
	s.MeetingPasswordRequirement = val
}

// SetOnlyAuthenticatedCanJoinFromWebclient sets the value of OnlyAuthenticatedCanJoinFromWebclient.
func (s *UserSettingsOK4MeetingSecurity) SetOnlyAuthenticatedCanJoinFromWebclient(val OptBool) {
	s.OnlyAuthenticatedCanJoinFromWebclient = val
}

// SetPhonePassword sets the value of PhonePassword.
func (s *UserSettingsOK4MeetingSecurity) SetPhonePassword(val OptBool) {
	s.PhonePassword = val
}

// SetPmiPassword sets the value of PmiPassword.
func (s *UserSettingsOK4MeetingSecurity) SetPmiPassword(val OptBool) {
	s.PmiPassword = val
}

// SetRequirePasswordForScheduledMeeting sets the value of RequirePasswordForScheduledMeeting.
func (s *UserSettingsOK4MeetingSecurity) SetRequirePasswordForScheduledMeeting(val OptBool) {
	s.RequirePasswordForScheduledMeeting = val
}

// SetRequirePasswordForScheduledWebinar sets the value of RequirePasswordForScheduledWebinar.
func (s *UserSettingsOK4MeetingSecurity) SetRequirePasswordForScheduledWebinar(val OptBool) {
	s.RequirePasswordForScheduledWebinar = val
}

// SetWaitingRoom sets the value of WaitingRoom.
func (s *UserSettingsOK4MeetingSecurity) SetWaitingRoom(val OptBool) {
	s.WaitingRoom = val
}

// SetWaitingRoomSettings sets the value of WaitingRoomSettings.
func (s *UserSettingsOK4MeetingSecurity) SetWaitingRoomSettings(val OptUserSettingsOK4MeetingSecurityWaitingRoomSettings) {
	s.WaitingRoomSettings = val
}

// SetWebinarPassword sets the value of WebinarPassword.
func (s *UserSettingsOK4MeetingSecurity) SetWebinarPassword(val OptBool) {
	s.WebinarPassword = val
}

// The information about the meeting and webinar [passcode requirements](https://support.zoom.
// us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
type UserSettingsOK4MeetingSecurityMeetingPasswordRequirement struct {
	// The maximum length of consecutive characters (for example, `abcdef`) allowed in a passcode:
	// * `4` through `8` - The maximum consecutive characters length. The length is `n` minus `1`, where
	// `n` is the value. For example, if the value is `4`, there can only be a maximum of `3` consecutive
	// characters in a passcode (for example, `abc1x@8fdh`).
	// * `0` - No consecutive character restriction.
	ConsecutiveCharactersLength OptInt `json:"consecutive_characters_length"`
	// Whether passcodes must contain at least one letter character.
	HaveLetter OptBool `json:"have_letter"`
	// Whether passcodes must contain at least one numeric character.
	HaveNumber OptBool `json:"have_number"`
	// Whether passcodes must contain at least one special character. For example, `!`, `@`, and/or `#`
	// characters.
	HaveSpecialCharacter OptBool `json:"have_special_character"`
	// Whether passcodes must include uppercase and lowercase characters.
	HaveUpperAndLowerCharacters OptBool `json:"have_upper_and_lower_characters"`
	// The minimum passcode length.
	Length OptInt `json:"length"`
	// Whether passcodes must contain **only** numeric characters.
	OnlyAllowNumeric OptBool `json:"only_allow_numeric"`
	// Whether users are informed when the provided passcode is weak.
	WeakEnhanceDetection OptBool `json:"weak_enhance_detection"`
}

// GetConsecutiveCharactersLength returns the value of ConsecutiveCharactersLength.
func (s *UserSettingsOK4MeetingSecurityMeetingPasswordRequirement) GetConsecutiveCharactersLength() OptInt {
	return s.ConsecutiveCharactersLength
}

// GetHaveLetter returns the value of HaveLetter.
func (s *UserSettingsOK4MeetingSecurityMeetingPasswordRequirement) GetHaveLetter() OptBool {
	return s.HaveLetter
}

// GetHaveNumber returns the value of HaveNumber.
func (s *UserSettingsOK4MeetingSecurityMeetingPasswordRequirement) GetHaveNumber() OptBool {
	return s.HaveNumber
}

// GetHaveSpecialCharacter returns the value of HaveSpecialCharacter.
func (s *UserSettingsOK4MeetingSecurityMeetingPasswordRequirement) GetHaveSpecialCharacter() OptBool {
	return s.HaveSpecialCharacter
}

// GetHaveUpperAndLowerCharacters returns the value of HaveUpperAndLowerCharacters.
func (s *UserSettingsOK4MeetingSecurityMeetingPasswordRequirement) GetHaveUpperAndLowerCharacters() OptBool {
	return s.HaveUpperAndLowerCharacters
}

// GetLength returns the value of Length.
func (s *UserSettingsOK4MeetingSecurityMeetingPasswordRequirement) GetLength() OptInt {
	return s.Length
}

// GetOnlyAllowNumeric returns the value of OnlyAllowNumeric.
func (s *UserSettingsOK4MeetingSecurityMeetingPasswordRequirement) GetOnlyAllowNumeric() OptBool {
	return s.OnlyAllowNumeric
}

// GetWeakEnhanceDetection returns the value of WeakEnhanceDetection.
func (s *UserSettingsOK4MeetingSecurityMeetingPasswordRequirement) GetWeakEnhanceDetection() OptBool {
	return s.WeakEnhanceDetection
}

// SetConsecutiveCharactersLength sets the value of ConsecutiveCharactersLength.
func (s *UserSettingsOK4MeetingSecurityMeetingPasswordRequirement) SetConsecutiveCharactersLength(val OptInt) {
	s.ConsecutiveCharactersLength = val
}

// SetHaveLetter sets the value of HaveLetter.
func (s *UserSettingsOK4MeetingSecurityMeetingPasswordRequirement) SetHaveLetter(val OptBool) {
	s.HaveLetter = val
}

// SetHaveNumber sets the value of HaveNumber.
func (s *UserSettingsOK4MeetingSecurityMeetingPasswordRequirement) SetHaveNumber(val OptBool) {
	s.HaveNumber = val
}

// SetHaveSpecialCharacter sets the value of HaveSpecialCharacter.
func (s *UserSettingsOK4MeetingSecurityMeetingPasswordRequirement) SetHaveSpecialCharacter(val OptBool) {
	s.HaveSpecialCharacter = val
}

// SetHaveUpperAndLowerCharacters sets the value of HaveUpperAndLowerCharacters.
func (s *UserSettingsOK4MeetingSecurityMeetingPasswordRequirement) SetHaveUpperAndLowerCharacters(val OptBool) {
	s.HaveUpperAndLowerCharacters = val
}

// SetLength sets the value of Length.
func (s *UserSettingsOK4MeetingSecurityMeetingPasswordRequirement) SetLength(val OptInt) {
	s.Length = val
}

// SetOnlyAllowNumeric sets the value of OnlyAllowNumeric.
func (s *UserSettingsOK4MeetingSecurityMeetingPasswordRequirement) SetOnlyAllowNumeric(val OptBool) {
	s.OnlyAllowNumeric = val
}

// SetWeakEnhanceDetection sets the value of WeakEnhanceDetection.
func (s *UserSettingsOK4MeetingSecurityMeetingPasswordRequirement) SetWeakEnhanceDetection(val OptBool) {
	s.WeakEnhanceDetection = val
}

// The information about the Waiting Room settings.
type UserSettingsOK4MeetingSecurityWaitingRoomSettings struct {
	// The type of participants to be admitted to the Waiting Room:
	// * `0` - All attendees.
	// * `1` - Users who are not in your account.
	// * `2` - Users who are not in your account and are not part of your [allowed domains
	// list](https://support.zoom.
	// us/hc/en-us/articles/360037117472-Configuring-authentication-profiles#h_e3cf0d5f-eec7-4c2a-ad29-ef2a5079a7da).
	ParticipantsToPlaceInWaitingRoom OptInt `json:"participants_to_place_in_waiting_room"`
	// The users who can admit participants from the Waiting Room:
	// * `0` - Host and co-hosts only.
	// * `1` - Host, co-hosts, and anyone who bypassed the Waiting Room if the host and co-hosts are not
	// present.
	UsersWhoCanAdmitParticipantsFromWaitingRoom OptInt `json:"users_who_can_admit_participants_from_waiting_room"`
	// If the `participants_to_place_in_waiting_room` field is `2`, a comma-separated list of the domains
	// that can bypass the Waiting Room (`example.com,example2.com`).
	WhitelistedDomainsForWaitingRoom OptString `json:"whitelisted_domains_for_waiting_room"`
}

// GetParticipantsToPlaceInWaitingRoom returns the value of ParticipantsToPlaceInWaitingRoom.
func (s *UserSettingsOK4MeetingSecurityWaitingRoomSettings) GetParticipantsToPlaceInWaitingRoom() OptInt {
	return s.ParticipantsToPlaceInWaitingRoom
}

// GetUsersWhoCanAdmitParticipantsFromWaitingRoom returns the value of UsersWhoCanAdmitParticipantsFromWaitingRoom.
func (s *UserSettingsOK4MeetingSecurityWaitingRoomSettings) GetUsersWhoCanAdmitParticipantsFromWaitingRoom() OptInt {
	return s.UsersWhoCanAdmitParticipantsFromWaitingRoom
}

// GetWhitelistedDomainsForWaitingRoom returns the value of WhitelistedDomainsForWaitingRoom.
func (s *UserSettingsOK4MeetingSecurityWaitingRoomSettings) GetWhitelistedDomainsForWaitingRoom() OptString {
	return s.WhitelistedDomainsForWaitingRoom
}

// SetParticipantsToPlaceInWaitingRoom sets the value of ParticipantsToPlaceInWaitingRoom.
func (s *UserSettingsOK4MeetingSecurityWaitingRoomSettings) SetParticipantsToPlaceInWaitingRoom(val OptInt) {
	s.ParticipantsToPlaceInWaitingRoom = val
}

// SetUsersWhoCanAdmitParticipantsFromWaitingRoom sets the value of UsersWhoCanAdmitParticipantsFromWaitingRoom.
func (s *UserSettingsOK4MeetingSecurityWaitingRoomSettings) SetUsersWhoCanAdmitParticipantsFromWaitingRoom(val OptInt) {
	s.UsersWhoCanAdmitParticipantsFromWaitingRoom = val
}

// SetWhitelistedDomainsForWaitingRoom sets the value of WhitelistedDomainsForWaitingRoom.
func (s *UserSettingsOK4MeetingSecurityWaitingRoomSettings) SetWhitelistedDomainsForWaitingRoom(val OptString) {
	s.WhitelistedDomainsForWaitingRoom = val
}

// UserSettingsUpdateNoContent is response for UserSettingsUpdate operation.
type UserSettingsUpdateNoContent struct{}

// UserSettingsUpdateReq represents sum type.
type UserSettingsUpdateReq struct {
	Type                   UserSettingsUpdateReqType // switch on this field
	UserSettingsUpdateReq0 UserSettingsUpdateReq0
	UserSettingsUpdateReq1 UserSettingsUpdateReq1
	UserSettingsUpdateReq2 UserSettingsUpdateReq2
	UserSettingsUpdateReq3 UserSettingsUpdateReq3
}

// UserSettingsUpdateReqType is oneOf type of UserSettingsUpdateReq.
type UserSettingsUpdateReqType string

// Possible values for UserSettingsUpdateReqType.
const (
	UserSettingsUpdateReq0UserSettingsUpdateReq UserSettingsUpdateReqType = "UserSettingsUpdateReq0"
	UserSettingsUpdateReq1UserSettingsUpdateReq UserSettingsUpdateReqType = "UserSettingsUpdateReq1"
	UserSettingsUpdateReq2UserSettingsUpdateReq UserSettingsUpdateReqType = "UserSettingsUpdateReq2"
	UserSettingsUpdateReq3UserSettingsUpdateReq UserSettingsUpdateReqType = "UserSettingsUpdateReq3"
)

// IsUserSettingsUpdateReq0 reports whether UserSettingsUpdateReq is UserSettingsUpdateReq0.
func (s UserSettingsUpdateReq) IsUserSettingsUpdateReq0() bool {
	return s.Type == UserSettingsUpdateReq0UserSettingsUpdateReq
}

// IsUserSettingsUpdateReq1 reports whether UserSettingsUpdateReq is UserSettingsUpdateReq1.
func (s UserSettingsUpdateReq) IsUserSettingsUpdateReq1() bool {
	return s.Type == UserSettingsUpdateReq1UserSettingsUpdateReq
}

// IsUserSettingsUpdateReq2 reports whether UserSettingsUpdateReq is UserSettingsUpdateReq2.
func (s UserSettingsUpdateReq) IsUserSettingsUpdateReq2() bool {
	return s.Type == UserSettingsUpdateReq2UserSettingsUpdateReq
}

// IsUserSettingsUpdateReq3 reports whether UserSettingsUpdateReq is UserSettingsUpdateReq3.
func (s UserSettingsUpdateReq) IsUserSettingsUpdateReq3() bool {
	return s.Type == UserSettingsUpdateReq3UserSettingsUpdateReq
}

// SetUserSettingsUpdateReq0 sets UserSettingsUpdateReq to UserSettingsUpdateReq0.
func (s *UserSettingsUpdateReq) SetUserSettingsUpdateReq0(v UserSettingsUpdateReq0) {
	s.Type = UserSettingsUpdateReq0UserSettingsUpdateReq
	s.UserSettingsUpdateReq0 = v
}

// GetUserSettingsUpdateReq0 returns UserSettingsUpdateReq0 and true boolean if UserSettingsUpdateReq is UserSettingsUpdateReq0.
func (s UserSettingsUpdateReq) GetUserSettingsUpdateReq0() (v UserSettingsUpdateReq0, ok bool) {
	if !s.IsUserSettingsUpdateReq0() {
		return v, false
	}
	return s.UserSettingsUpdateReq0, true
}

// NewUserSettingsUpdateReq0UserSettingsUpdateReq returns new UserSettingsUpdateReq from UserSettingsUpdateReq0.
func NewUserSettingsUpdateReq0UserSettingsUpdateReq(v UserSettingsUpdateReq0) UserSettingsUpdateReq {
	var s UserSettingsUpdateReq
	s.SetUserSettingsUpdateReq0(v)
	return s
}

// SetUserSettingsUpdateReq1 sets UserSettingsUpdateReq to UserSettingsUpdateReq1.
func (s *UserSettingsUpdateReq) SetUserSettingsUpdateReq1(v UserSettingsUpdateReq1) {
	s.Type = UserSettingsUpdateReq1UserSettingsUpdateReq
	s.UserSettingsUpdateReq1 = v
}

// GetUserSettingsUpdateReq1 returns UserSettingsUpdateReq1 and true boolean if UserSettingsUpdateReq is UserSettingsUpdateReq1.
func (s UserSettingsUpdateReq) GetUserSettingsUpdateReq1() (v UserSettingsUpdateReq1, ok bool) {
	if !s.IsUserSettingsUpdateReq1() {
		return v, false
	}
	return s.UserSettingsUpdateReq1, true
}

// NewUserSettingsUpdateReq1UserSettingsUpdateReq returns new UserSettingsUpdateReq from UserSettingsUpdateReq1.
func NewUserSettingsUpdateReq1UserSettingsUpdateReq(v UserSettingsUpdateReq1) UserSettingsUpdateReq {
	var s UserSettingsUpdateReq
	s.SetUserSettingsUpdateReq1(v)
	return s
}

// SetUserSettingsUpdateReq2 sets UserSettingsUpdateReq to UserSettingsUpdateReq2.
func (s *UserSettingsUpdateReq) SetUserSettingsUpdateReq2(v UserSettingsUpdateReq2) {
	s.Type = UserSettingsUpdateReq2UserSettingsUpdateReq
	s.UserSettingsUpdateReq2 = v
}

// GetUserSettingsUpdateReq2 returns UserSettingsUpdateReq2 and true boolean if UserSettingsUpdateReq is UserSettingsUpdateReq2.
func (s UserSettingsUpdateReq) GetUserSettingsUpdateReq2() (v UserSettingsUpdateReq2, ok bool) {
	if !s.IsUserSettingsUpdateReq2() {
		return v, false
	}
	return s.UserSettingsUpdateReq2, true
}

// NewUserSettingsUpdateReq2UserSettingsUpdateReq returns new UserSettingsUpdateReq from UserSettingsUpdateReq2.
func NewUserSettingsUpdateReq2UserSettingsUpdateReq(v UserSettingsUpdateReq2) UserSettingsUpdateReq {
	var s UserSettingsUpdateReq
	s.SetUserSettingsUpdateReq2(v)
	return s
}

// SetUserSettingsUpdateReq3 sets UserSettingsUpdateReq to UserSettingsUpdateReq3.
func (s *UserSettingsUpdateReq) SetUserSettingsUpdateReq3(v UserSettingsUpdateReq3) {
	s.Type = UserSettingsUpdateReq3UserSettingsUpdateReq
	s.UserSettingsUpdateReq3 = v
}

// GetUserSettingsUpdateReq3 returns UserSettingsUpdateReq3 and true boolean if UserSettingsUpdateReq is UserSettingsUpdateReq3.
func (s UserSettingsUpdateReq) GetUserSettingsUpdateReq3() (v UserSettingsUpdateReq3, ok bool) {
	if !s.IsUserSettingsUpdateReq3() {
		return v, false
	}
	return s.UserSettingsUpdateReq3, true
}

// NewUserSettingsUpdateReq3UserSettingsUpdateReq returns new UserSettingsUpdateReq from UserSettingsUpdateReq3.
func NewUserSettingsUpdateReq3UserSettingsUpdateReq(v UserSettingsUpdateReq3) UserSettingsUpdateReq {
	var s UserSettingsUpdateReq
	s.SetUserSettingsUpdateReq3(v)
	return s
}

type UserSettingsUpdateReq0 struct {
	EmailNotification OptUserSettingsUpdateReq0EmailNotification `json:"email_notification"`
	Feature           OptUserSettingsUpdateReq0Feature           `json:"feature"`
	InMeeting         OptUserSettingsUpdateReq0InMeeting         `json:"in_meeting"`
	Profile           OptUserSettingsUpdateReq0Profile           `json:"profile"`
	Recording         OptUserSettingsUpdateReq0Recording         `json:"recording"`
	ScheduleMeeting   OptUserSettingsUpdateReq0ScheduleMeeting   `json:"schedule_meeting"`
	Telephony         OptUserSettingsUpdateReq0Telephony         `json:"telephony"`
	// Account Settings: TSP.
	Tsp OptUserSettingsUpdateReq0Tsp `json:"tsp"`
}

// GetEmailNotification returns the value of EmailNotification.
func (s *UserSettingsUpdateReq0) GetEmailNotification() OptUserSettingsUpdateReq0EmailNotification {
	return s.EmailNotification
}

// GetFeature returns the value of Feature.
func (s *UserSettingsUpdateReq0) GetFeature() OptUserSettingsUpdateReq0Feature {
	return s.Feature
}

// GetInMeeting returns the value of InMeeting.
func (s *UserSettingsUpdateReq0) GetInMeeting() OptUserSettingsUpdateReq0InMeeting {
	return s.InMeeting
}

// GetProfile returns the value of Profile.
func (s *UserSettingsUpdateReq0) GetProfile() OptUserSettingsUpdateReq0Profile {
	return s.Profile
}

// GetRecording returns the value of Recording.
func (s *UserSettingsUpdateReq0) GetRecording() OptUserSettingsUpdateReq0Recording {
	return s.Recording
}

// GetScheduleMeeting returns the value of ScheduleMeeting.
func (s *UserSettingsUpdateReq0) GetScheduleMeeting() OptUserSettingsUpdateReq0ScheduleMeeting {
	return s.ScheduleMeeting
}

// GetTelephony returns the value of Telephony.
func (s *UserSettingsUpdateReq0) GetTelephony() OptUserSettingsUpdateReq0Telephony {
	return s.Telephony
}

// GetTsp returns the value of Tsp.
func (s *UserSettingsUpdateReq0) GetTsp() OptUserSettingsUpdateReq0Tsp {
	return s.Tsp
}

// SetEmailNotification sets the value of EmailNotification.
func (s *UserSettingsUpdateReq0) SetEmailNotification(val OptUserSettingsUpdateReq0EmailNotification) {
	s.EmailNotification = val
}

// SetFeature sets the value of Feature.
func (s *UserSettingsUpdateReq0) SetFeature(val OptUserSettingsUpdateReq0Feature) {
	s.Feature = val
}

// SetInMeeting sets the value of InMeeting.
func (s *UserSettingsUpdateReq0) SetInMeeting(val OptUserSettingsUpdateReq0InMeeting) {
	s.InMeeting = val
}

// SetProfile sets the value of Profile.
func (s *UserSettingsUpdateReq0) SetProfile(val OptUserSettingsUpdateReq0Profile) {
	s.Profile = val
}

// SetRecording sets the value of Recording.
func (s *UserSettingsUpdateReq0) SetRecording(val OptUserSettingsUpdateReq0Recording) {
	s.Recording = val
}

// SetScheduleMeeting sets the value of ScheduleMeeting.
func (s *UserSettingsUpdateReq0) SetScheduleMeeting(val OptUserSettingsUpdateReq0ScheduleMeeting) {
	s.ScheduleMeeting = val
}

// SetTelephony sets the value of Telephony.
func (s *UserSettingsUpdateReq0) SetTelephony(val OptUserSettingsUpdateReq0Telephony) {
	s.Telephony = val
}

// SetTsp sets the value of Tsp.
func (s *UserSettingsUpdateReq0) SetTsp(val OptUserSettingsUpdateReq0Tsp) {
	s.Tsp = val
}

type UserSettingsUpdateReq0EmailNotification struct {
	// When an alternative host is set or removed from a meeting.
	AlternativeHostReminder OptBool `json:"alternative_host_reminder"`
	// When a meeting is cancelled.
	CancelMeetingReminder OptBool `json:"cancel_meeting_reminder"`
	// Whether to notify the host when a cloud recording is available.
	CloudRecordingAvailableReminder OptBool `json:"cloud_recording_available_reminder"`
	// When attendees join meeting before host.
	JbhReminder OptBool `json:"jbh_reminder"`
	// Whether to notify any alternative hosts when a cloud recording is available.
	RecordingAvailableReminderAlternativeHosts OptBool `json:"recording_available_reminder_alternative_hosts"`
	// Whether to notify the person who scheduled the meeting or webinar for the host when a cloud
	// recording is available.
	RecordingAvailableReminderSchedulers OptBool `json:"recording_available_reminder_schedulers"`
	// This setting notifies the host there is a meeting is scheduled, rescheduled, or cancelled.
	ScheduleForReminder OptBool `json:"schedule_for_reminder"`
}

// GetAlternativeHostReminder returns the value of AlternativeHostReminder.
func (s *UserSettingsUpdateReq0EmailNotification) GetAlternativeHostReminder() OptBool {
	return s.AlternativeHostReminder
}

// GetCancelMeetingReminder returns the value of CancelMeetingReminder.
func (s *UserSettingsUpdateReq0EmailNotification) GetCancelMeetingReminder() OptBool {
	return s.CancelMeetingReminder
}

// GetCloudRecordingAvailableReminder returns the value of CloudRecordingAvailableReminder.
func (s *UserSettingsUpdateReq0EmailNotification) GetCloudRecordingAvailableReminder() OptBool {
	return s.CloudRecordingAvailableReminder
}

// GetJbhReminder returns the value of JbhReminder.
func (s *UserSettingsUpdateReq0EmailNotification) GetJbhReminder() OptBool {
	return s.JbhReminder
}

// GetRecordingAvailableReminderAlternativeHosts returns the value of RecordingAvailableReminderAlternativeHosts.
func (s *UserSettingsUpdateReq0EmailNotification) GetRecordingAvailableReminderAlternativeHosts() OptBool {
	return s.RecordingAvailableReminderAlternativeHosts
}

// GetRecordingAvailableReminderSchedulers returns the value of RecordingAvailableReminderSchedulers.
func (s *UserSettingsUpdateReq0EmailNotification) GetRecordingAvailableReminderSchedulers() OptBool {
	return s.RecordingAvailableReminderSchedulers
}

// GetScheduleForReminder returns the value of ScheduleForReminder.
func (s *UserSettingsUpdateReq0EmailNotification) GetScheduleForReminder() OptBool {
	return s.ScheduleForReminder
}

// SetAlternativeHostReminder sets the value of AlternativeHostReminder.
func (s *UserSettingsUpdateReq0EmailNotification) SetAlternativeHostReminder(val OptBool) {
	s.AlternativeHostReminder = val
}

// SetCancelMeetingReminder sets the value of CancelMeetingReminder.
func (s *UserSettingsUpdateReq0EmailNotification) SetCancelMeetingReminder(val OptBool) {
	s.CancelMeetingReminder = val
}

// SetCloudRecordingAvailableReminder sets the value of CloudRecordingAvailableReminder.
func (s *UserSettingsUpdateReq0EmailNotification) SetCloudRecordingAvailableReminder(val OptBool) {
	s.CloudRecordingAvailableReminder = val
}

// SetJbhReminder sets the value of JbhReminder.
func (s *UserSettingsUpdateReq0EmailNotification) SetJbhReminder(val OptBool) {
	s.JbhReminder = val
}

// SetRecordingAvailableReminderAlternativeHosts sets the value of RecordingAvailableReminderAlternativeHosts.
func (s *UserSettingsUpdateReq0EmailNotification) SetRecordingAvailableReminderAlternativeHosts(val OptBool) {
	s.RecordingAvailableReminderAlternativeHosts = val
}

// SetRecordingAvailableReminderSchedulers sets the value of RecordingAvailableReminderSchedulers.
func (s *UserSettingsUpdateReq0EmailNotification) SetRecordingAvailableReminderSchedulers(val OptBool) {
	s.RecordingAvailableReminderSchedulers = val
}

// SetScheduleForReminder sets the value of ScheduleForReminder.
func (s *UserSettingsUpdateReq0EmailNotification) SetScheduleForReminder(val OptBool) {
	s.ScheduleForReminder = val
}

type UserSettingsUpdateReq0Feature struct {
	// The user's assigned [Concurrent Meeting](https://support.zoom.us/hc/en-us/articles/206122046) type:
	// * `Basic`
	// * `Plus`
	// * `None`
	// **Note:** This feature requires a Concurrent Meeting Basic or Plus plan subscription.
	ConcurrentMeeting OptString `json:"concurrent_meeting"`
	// This setting enables the [large meeting](https://support.zoom.
	// us/hc/en-us/articles/201362823-What-is-a-Large-Meeting-) feature for the user.
	LargeMeeting OptBool `json:"large_meeting"`
	// This field sets the meeting capacity for the user if the user has **Large meeting** feature
	// enabled. The value for the field can be either 500 or 1000.
	LargeMeetingCapacity OptInt `json:"large_meeting_capacity"`
	// This field sets a user's meeting capacity. The user's meeting capacity denotes the maximum number
	// of participants that can join a meeting scheduled by the user.
	MeetingCapacity OptInt `json:"meeting_capacity"`
	// This setting enables Webinar feature for the user.
	Webinar OptBool `json:"webinar"`
	// The user's webinar capacity. This only applies to users with the [**Webinar**](https://support.
	// zoom.us/hc/en-us/articles/200917029-Getting-started-with-webinar) feature enabled:
	// * `100`
	// * `500`
	// * `501`
	// * `1000`
	// * `1001`
	// * `3000`
	// * `5000`
	// * `10000`.
	WebinarCapacity OptInt `json:"webinar_capacity"`
	// Whether to enable the Zoom Events feature for the user.
	ZoomEvents OptBool `json:"zoom_events"`
	// The user's Zoom Events plan capacity: `500`, `1000`, `3000`, `5000`, `10000`, `20000`, `30000`, or
	// `50000`.
	ZoomEventsCapacity OptInt `json:"zoom_events_capacity"`
	// Whether to enable the Zoom Events Unlimited feature for the user.
	ZoomEventsUnlimited OptBool `json:"zoom_events_unlimited"`
	// The capacity list of user's Zoom Events Unlimited plan: `100`, `500`, `1000`, `3000`, `5000`,
	// `10000`, `20000`, `30000`, or `50000`.
	ZoomEventsUnlimitedCapacities []int `json:"zoom_events_unlimited_capacities"`
	// Whether to enable the Zoom Sessions Unlimited feature for the user.
	ZoomSessionsUnlimited OptBool `json:"zoom_sessions_unlimited"`
	// The capacity list of user's Zoom Sessions Unlimited plan: `100`, `500`, `1000`, `3000`, `5000`,
	// `10000`, `20000`, `30000`, or `50000`.
	ZoomSessionsUnlimitedCapacities []int `json:"zoom_sessions_unlimited_capacities"`
	// Whether to enable the Zoom Events Pay Per Attendee feature for the user.
	ZoomEventsPayPerAttendee OptBool `json:"zoom_events_pay_per_attendee"`
	// Whether to enable the Zoom Sessions Pay Per Attendee feature for the user.
	ZoomSessionsPayPerAttendee OptBool `json:"zoom_sessions_pay_per_attendee"`
	// The Zoom phone feature.
	ZoomPhone OptBool `json:"zoom_phone"`
	// Whether the user has a Zoom Revenue Accelerator license. For information about a Zoom Revenue
	// Accelerator license, contact [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003).
	//
	// Deprecated: schema marks this property as deprecated.
	ZoomIqForSales OptBool `json:"zoom_iq_for_sales"`
	// Whether the user has a Zoom Revenue Accelerator license. For information about a Zoom Revenue
	// Accelerator license, contact [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003).
	ZoomRevenueAccelerator OptBool `json:"zoom_revenue_accelerator"`
	// Whether the user has a Zoom Whiteboard license.
	ZoomWhiteboard OptBool `json:"zoom_whiteboard"`
	// Whether the user has a Zoom Whiteboard Plus license.
	ZoomWhiteboardPlus OptBool `json:"zoom_whiteboard_plus"`
	// Whether the user has a Zoom Translated Captions license.
	ZoomTranslatedCaptions OptBool `json:"zoom_translated_captions"`
	// Whether the user has a Zoom Customer Managed Key license.
	ZoomCustomerManagedKey OptBool `json:"zoom_customer_managed_key"`
	// Whether the user has a Zoom Huddles license.
	//
	// Deprecated: schema marks this property as deprecated.
	ZoomHuddles OptBool `json:"zoom_huddles"`
	// Whether the user has a Zoom Quality Management license.
	ZoomQualityManagement OptBool `json:"zoom_quality_management"`
	// Whether the user has a Zoom Workforce Management license.
	ZoomWorkforceManagement OptBool `json:"zoom_workforce_management"`
	// Whether the user has a Zoom Scheduler license.
	ZoomScheduler OptBool `json:"zoom_scheduler"`
	// Whether the user has a Zoom Clips Plus license.
	ZoomClipsPlus OptBool `json:"zoom_clips_plus"`
	// Whether the user has a Zoom Mail Calendar license.
	ZoomMailCalendar OptBool `json:"zoom_mail_calendar"`
	// Whether the user has a Zoom Compliance Management license.
	ZoomComplianceManagement OptBool `json:"zoom_compliance_management"`
}

// GetConcurrentMeeting returns the value of ConcurrentMeeting.
func (s *UserSettingsUpdateReq0Feature) GetConcurrentMeeting() OptString {
	return s.ConcurrentMeeting
}

// GetLargeMeeting returns the value of LargeMeeting.
func (s *UserSettingsUpdateReq0Feature) GetLargeMeeting() OptBool {
	return s.LargeMeeting
}

// GetLargeMeetingCapacity returns the value of LargeMeetingCapacity.
func (s *UserSettingsUpdateReq0Feature) GetLargeMeetingCapacity() OptInt {
	return s.LargeMeetingCapacity
}

// GetMeetingCapacity returns the value of MeetingCapacity.
func (s *UserSettingsUpdateReq0Feature) GetMeetingCapacity() OptInt {
	return s.MeetingCapacity
}

// GetWebinar returns the value of Webinar.
func (s *UserSettingsUpdateReq0Feature) GetWebinar() OptBool {
	return s.Webinar
}

// GetWebinarCapacity returns the value of WebinarCapacity.
func (s *UserSettingsUpdateReq0Feature) GetWebinarCapacity() OptInt {
	return s.WebinarCapacity
}

// GetZoomEvents returns the value of ZoomEvents.
func (s *UserSettingsUpdateReq0Feature) GetZoomEvents() OptBool {
	return s.ZoomEvents
}

// GetZoomEventsCapacity returns the value of ZoomEventsCapacity.
func (s *UserSettingsUpdateReq0Feature) GetZoomEventsCapacity() OptInt {
	return s.ZoomEventsCapacity
}

// GetZoomEventsUnlimited returns the value of ZoomEventsUnlimited.
func (s *UserSettingsUpdateReq0Feature) GetZoomEventsUnlimited() OptBool {
	return s.ZoomEventsUnlimited
}

// GetZoomEventsUnlimitedCapacities returns the value of ZoomEventsUnlimitedCapacities.
func (s *UserSettingsUpdateReq0Feature) GetZoomEventsUnlimitedCapacities() []int {
	return s.ZoomEventsUnlimitedCapacities
}

// GetZoomSessionsUnlimited returns the value of ZoomSessionsUnlimited.
func (s *UserSettingsUpdateReq0Feature) GetZoomSessionsUnlimited() OptBool {
	return s.ZoomSessionsUnlimited
}

// GetZoomSessionsUnlimitedCapacities returns the value of ZoomSessionsUnlimitedCapacities.
func (s *UserSettingsUpdateReq0Feature) GetZoomSessionsUnlimitedCapacities() []int {
	return s.ZoomSessionsUnlimitedCapacities
}

// GetZoomEventsPayPerAttendee returns the value of ZoomEventsPayPerAttendee.
func (s *UserSettingsUpdateReq0Feature) GetZoomEventsPayPerAttendee() OptBool {
	return s.ZoomEventsPayPerAttendee
}

// GetZoomSessionsPayPerAttendee returns the value of ZoomSessionsPayPerAttendee.
func (s *UserSettingsUpdateReq0Feature) GetZoomSessionsPayPerAttendee() OptBool {
	return s.ZoomSessionsPayPerAttendee
}

// GetZoomPhone returns the value of ZoomPhone.
func (s *UserSettingsUpdateReq0Feature) GetZoomPhone() OptBool {
	return s.ZoomPhone
}

// GetZoomIqForSales returns the value of ZoomIqForSales.
func (s *UserSettingsUpdateReq0Feature) GetZoomIqForSales() OptBool {
	return s.ZoomIqForSales
}

// GetZoomRevenueAccelerator returns the value of ZoomRevenueAccelerator.
func (s *UserSettingsUpdateReq0Feature) GetZoomRevenueAccelerator() OptBool {
	return s.ZoomRevenueAccelerator
}

// GetZoomWhiteboard returns the value of ZoomWhiteboard.
func (s *UserSettingsUpdateReq0Feature) GetZoomWhiteboard() OptBool {
	return s.ZoomWhiteboard
}

// GetZoomWhiteboardPlus returns the value of ZoomWhiteboardPlus.
func (s *UserSettingsUpdateReq0Feature) GetZoomWhiteboardPlus() OptBool {
	return s.ZoomWhiteboardPlus
}

// GetZoomTranslatedCaptions returns the value of ZoomTranslatedCaptions.
func (s *UserSettingsUpdateReq0Feature) GetZoomTranslatedCaptions() OptBool {
	return s.ZoomTranslatedCaptions
}

// GetZoomCustomerManagedKey returns the value of ZoomCustomerManagedKey.
func (s *UserSettingsUpdateReq0Feature) GetZoomCustomerManagedKey() OptBool {
	return s.ZoomCustomerManagedKey
}

// GetZoomHuddles returns the value of ZoomHuddles.
func (s *UserSettingsUpdateReq0Feature) GetZoomHuddles() OptBool {
	return s.ZoomHuddles
}

// GetZoomQualityManagement returns the value of ZoomQualityManagement.
func (s *UserSettingsUpdateReq0Feature) GetZoomQualityManagement() OptBool {
	return s.ZoomQualityManagement
}

// GetZoomWorkforceManagement returns the value of ZoomWorkforceManagement.
func (s *UserSettingsUpdateReq0Feature) GetZoomWorkforceManagement() OptBool {
	return s.ZoomWorkforceManagement
}

// GetZoomScheduler returns the value of ZoomScheduler.
func (s *UserSettingsUpdateReq0Feature) GetZoomScheduler() OptBool {
	return s.ZoomScheduler
}

// GetZoomClipsPlus returns the value of ZoomClipsPlus.
func (s *UserSettingsUpdateReq0Feature) GetZoomClipsPlus() OptBool {
	return s.ZoomClipsPlus
}

// GetZoomMailCalendar returns the value of ZoomMailCalendar.
func (s *UserSettingsUpdateReq0Feature) GetZoomMailCalendar() OptBool {
	return s.ZoomMailCalendar
}

// GetZoomComplianceManagement returns the value of ZoomComplianceManagement.
func (s *UserSettingsUpdateReq0Feature) GetZoomComplianceManagement() OptBool {
	return s.ZoomComplianceManagement
}

// SetConcurrentMeeting sets the value of ConcurrentMeeting.
func (s *UserSettingsUpdateReq0Feature) SetConcurrentMeeting(val OptString) {
	s.ConcurrentMeeting = val
}

// SetLargeMeeting sets the value of LargeMeeting.
func (s *UserSettingsUpdateReq0Feature) SetLargeMeeting(val OptBool) {
	s.LargeMeeting = val
}

// SetLargeMeetingCapacity sets the value of LargeMeetingCapacity.
func (s *UserSettingsUpdateReq0Feature) SetLargeMeetingCapacity(val OptInt) {
	s.LargeMeetingCapacity = val
}

// SetMeetingCapacity sets the value of MeetingCapacity.
func (s *UserSettingsUpdateReq0Feature) SetMeetingCapacity(val OptInt) {
	s.MeetingCapacity = val
}

// SetWebinar sets the value of Webinar.
func (s *UserSettingsUpdateReq0Feature) SetWebinar(val OptBool) {
	s.Webinar = val
}

// SetWebinarCapacity sets the value of WebinarCapacity.
func (s *UserSettingsUpdateReq0Feature) SetWebinarCapacity(val OptInt) {
	s.WebinarCapacity = val
}

// SetZoomEvents sets the value of ZoomEvents.
func (s *UserSettingsUpdateReq0Feature) SetZoomEvents(val OptBool) {
	s.ZoomEvents = val
}

// SetZoomEventsCapacity sets the value of ZoomEventsCapacity.
func (s *UserSettingsUpdateReq0Feature) SetZoomEventsCapacity(val OptInt) {
	s.ZoomEventsCapacity = val
}

// SetZoomEventsUnlimited sets the value of ZoomEventsUnlimited.
func (s *UserSettingsUpdateReq0Feature) SetZoomEventsUnlimited(val OptBool) {
	s.ZoomEventsUnlimited = val
}

// SetZoomEventsUnlimitedCapacities sets the value of ZoomEventsUnlimitedCapacities.
func (s *UserSettingsUpdateReq0Feature) SetZoomEventsUnlimitedCapacities(val []int) {
	s.ZoomEventsUnlimitedCapacities = val
}

// SetZoomSessionsUnlimited sets the value of ZoomSessionsUnlimited.
func (s *UserSettingsUpdateReq0Feature) SetZoomSessionsUnlimited(val OptBool) {
	s.ZoomSessionsUnlimited = val
}

// SetZoomSessionsUnlimitedCapacities sets the value of ZoomSessionsUnlimitedCapacities.
func (s *UserSettingsUpdateReq0Feature) SetZoomSessionsUnlimitedCapacities(val []int) {
	s.ZoomSessionsUnlimitedCapacities = val
}

// SetZoomEventsPayPerAttendee sets the value of ZoomEventsPayPerAttendee.
func (s *UserSettingsUpdateReq0Feature) SetZoomEventsPayPerAttendee(val OptBool) {
	s.ZoomEventsPayPerAttendee = val
}

// SetZoomSessionsPayPerAttendee sets the value of ZoomSessionsPayPerAttendee.
func (s *UserSettingsUpdateReq0Feature) SetZoomSessionsPayPerAttendee(val OptBool) {
	s.ZoomSessionsPayPerAttendee = val
}

// SetZoomPhone sets the value of ZoomPhone.
func (s *UserSettingsUpdateReq0Feature) SetZoomPhone(val OptBool) {
	s.ZoomPhone = val
}

// SetZoomIqForSales sets the value of ZoomIqForSales.
func (s *UserSettingsUpdateReq0Feature) SetZoomIqForSales(val OptBool) {
	s.ZoomIqForSales = val
}

// SetZoomRevenueAccelerator sets the value of ZoomRevenueAccelerator.
func (s *UserSettingsUpdateReq0Feature) SetZoomRevenueAccelerator(val OptBool) {
	s.ZoomRevenueAccelerator = val
}

// SetZoomWhiteboard sets the value of ZoomWhiteboard.
func (s *UserSettingsUpdateReq0Feature) SetZoomWhiteboard(val OptBool) {
	s.ZoomWhiteboard = val
}

// SetZoomWhiteboardPlus sets the value of ZoomWhiteboardPlus.
func (s *UserSettingsUpdateReq0Feature) SetZoomWhiteboardPlus(val OptBool) {
	s.ZoomWhiteboardPlus = val
}

// SetZoomTranslatedCaptions sets the value of ZoomTranslatedCaptions.
func (s *UserSettingsUpdateReq0Feature) SetZoomTranslatedCaptions(val OptBool) {
	s.ZoomTranslatedCaptions = val
}

// SetZoomCustomerManagedKey sets the value of ZoomCustomerManagedKey.
func (s *UserSettingsUpdateReq0Feature) SetZoomCustomerManagedKey(val OptBool) {
	s.ZoomCustomerManagedKey = val
}

// SetZoomHuddles sets the value of ZoomHuddles.
func (s *UserSettingsUpdateReq0Feature) SetZoomHuddles(val OptBool) {
	s.ZoomHuddles = val
}

// SetZoomQualityManagement sets the value of ZoomQualityManagement.
func (s *UserSettingsUpdateReq0Feature) SetZoomQualityManagement(val OptBool) {
	s.ZoomQualityManagement = val
}

// SetZoomWorkforceManagement sets the value of ZoomWorkforceManagement.
func (s *UserSettingsUpdateReq0Feature) SetZoomWorkforceManagement(val OptBool) {
	s.ZoomWorkforceManagement = val
}

// SetZoomScheduler sets the value of ZoomScheduler.
func (s *UserSettingsUpdateReq0Feature) SetZoomScheduler(val OptBool) {
	s.ZoomScheduler = val
}

// SetZoomClipsPlus sets the value of ZoomClipsPlus.
func (s *UserSettingsUpdateReq0Feature) SetZoomClipsPlus(val OptBool) {
	s.ZoomClipsPlus = val
}

// SetZoomMailCalendar sets the value of ZoomMailCalendar.
func (s *UserSettingsUpdateReq0Feature) SetZoomMailCalendar(val OptBool) {
	s.ZoomMailCalendar = val
}

// SetZoomComplianceManagement sets the value of ZoomComplianceManagement.
func (s *UserSettingsUpdateReq0Feature) SetZoomComplianceManagement(val OptBool) {
	s.ZoomComplianceManagement = val
}

type UserSettingsUpdateReq0InMeeting struct {
	// Whether the host can enable the [**Focus Mode**](https://support.zoom.
	// us/hc/en-us/articles/360061113751-Using-focus-mode) when scheduling a meeting. This value defaults
	// to `null`.
	AllowHostToEnableFocusMode OptBool `json:"allow_host_to_enable_focus_mode"`
	// If the value of this field is set to `true`,  it allows users to delete messages in the in-meeting
	// chat.
	AllowUsersToDeleteMessagesInMeetingChat OptBool `json:"allow_users_to_delete_messages_in_meeting_chat"`
	// Allow livestreaming.
	AllowLiveStreaming OptBool `json:"allow_live_streaming"`
	// Whether to display a thumbs up or thumbs down feedback survey at the end of each meeting.
	PostMeetingFeedback OptBool `json:"post_meeting_feedback"`
	// Whether to enable the [**Zoom Whiteboard**](https://support.zoom.
	// us/hc/en-us/articles/4410916881421) feature.
	Whiteboard OptBool `json:"whiteboard"`
	// Who participants can chat with:
	// * `1` &mdash; The participant cannot use chat.
	// * `2` &mdash; The participant can chat with the host and co-hosts only.
	// * `3` &mdash; The participant can chat with other participants publicly.
	// * `4` - The participant can chat with other participants publicly and privately.
	// **Note:** This setting is only available with client versions 5.7.3 and above.
	AllowParticipantsChatWith OptInt `json:"allow_participants_chat_with"`
	// How participants can save meeting chats:
	// * `1` &mdash; Participants cannot save meeting chats.
	// * `2` &mdash; Participants can only save host and co-host meeting chats.
	// * `3` &mdash; Participants can save all meeting chats.
	AllowUsersSaveChats OptInt `json:"allow_users_save_chats"`
	// This setting allows meeting participants to use the [annotation tools](https://support.zoom.
	// us/hc/en-us/articles/115005706806). This value defaults to `false`.
	Annotation OptBool `json:"annotation"`
	// This setting allows the host to put an attendee on hold. This value defaults to `false`. **This
	// field has been deprecated and is no longer supported.**.
	AttendeeOnHold OptBool `json:"attendee_on_hold"`
	// Whether the [**Focus Mode**](https://support.zoom.
	// us/hc/en-us/articles/360061113751-Using-focus-mode) feature is enabled. When enabled, this feature
	// only displays the host and co-hosts' video and profile pictures during a meeting.
	// This value defaults to `false`.
	AttentionModeFocusMode OptBool `json:"attention_mode_focus_mode"`
	// This setting automatically saves all in-meeting chats. This value defaults to `false`.
	AutoSavingChat OptBool `json:"auto_saving_chat"`
	// This setting allows the meeting host to split meeting participants into separate breakout rooms.
	BreakoutRoom OptBool `json:"breakout_room"`
	// This setting allows the host to assign participants to breakout rooms when scheduling. This
	// feature is **only** available in version 4.5.0 or higher.
	BreakoutRoomSchedule OptBool `json:"breakout_room_schedule"`
	// This setting enables chat during meeting for all participants. This value defaults to `false`.
	Chat OptBool `json:"chat"`
	// This setting allows participants to ask questions for the host and participants to answer.
	MeetingQuestionAnswer OptBool `json:"meeting_question_answer"`
	// This setting enables closed captions. This value defaults to `false`.
	ClosedCaption OptBool `json:"closed_caption"`
	// The information about the user's closed captioning settings.
	ClosedCaptioning OptUserSettingsUpdateReq0InMeetingClosedCaptioning `json:"closed_captioning"`
	// This setting allows the host to add co-hosts. This value defaults to `false`.
	CoHost OptBool `json:"co_host"`
	// This setting uses custom [data center regions](https://support.zoom.
	// us/hc/en-us/articles/360042411451-Selecting-data-center-regions-for-meetings-webinars):
	// * `true` &mdash; Users can [select data center regions](https://support.zoom.
	// us/hc/en-us/articles/360042411451-Selecting-data-center-regions-for-hosted-meetings-and-webinars)
	// to use for hosting real-time meeting traffic. The data center regions can be provided in the
	// `data_center_regions` field.
	// * `false` &mdash; Only use the default data center regions.
	CustomDataCenterRegions OptBool `json:"custom_data_center_regions"`
	// This setting allows custom livestreaming.
	CustomLiveStreamingService OptBool `json:"custom_live_streaming_service"`
	// The custom livestreaming service instructions.
	CustomServiceInstructions OptString `json:"custom_service_instructions"`
	// If the value of `custom_data_center_regions` is `true`, a comma-separated list of the following
	// [data center regions](https://support.zoom.
	// us/hc/en-us/articles/360059254691-Datacenter-abbreviation-list) to opt in to:
	// * `AU` &mdash; Australia.
	// * `LA` &mdash; Latin America.
	// * `CA` &mdash; Canada.
	// * `CN` &mdash; China.
	// * `DE` &mdash; Germany.
	// * `HK` &mdash; Hong Kong SAR.
	// * `IN` &mdash; India.
	// * `IE` &mdash; Ireland.
	// * `TY` &mdash; Japan.
	// * `MX` &mdash; Mexico.
	// * `NL` &mdash; Netherlands.
	// * `SG` &mdash; Singapore.
	// * `US` &mdash; United States.
	DataCenterRegions []string `json:"data_center_regions"`
	// This setting enables the **Disable desktop screen sharing for meetings you host** setting.
	DisableScreenSharingForHostMeetings OptBool `json:"disable_screen_sharing_for_host_meetings"`
	// This setting enables the **Disable screen sharing when guests are in the meeting** setting.
	DisableScreenSharingForInMeetingGuests OptBool `json:"disable_screen_sharing_for_in_meeting_guests"`
	// This setting requires [AES encryption](https://en.wikipedia.org/wiki/Advanced_Encryption_Standard)
	// for meetings.
	E2eEncryption OptBool `json:"e2e_encryption"`
	// When to play the meeting entry/exit sound notification:
	// * `host` &mdash; Only when the host joins or leaves.
	// * `all` &mdash; When any participant joins or leaves.
	// * `none` - Disable the entry/exit sound notification.
	// This value defaults to `all`.
	EntryExitChime OptString `json:"entry_exit_chime"`
	// This setting allows another user to take control of the user's camera. This value defaults to
	// `false`.
	FarEndCameraControl OptBool `json:"far_end_camera_control"`
	// This field enables the [**Feedback to Zoom**](https://support.zoom.
	// us/hc/en-us/articles/115005838023-Feedback-to-Zoom) setting. This value defaults to `false`.
	Feedback OptBool `json:"feedback"`
	// This setting indicates whether [in-meeting file transfer](https://support.zoom.
	// us/hc/en-us/articles/209605493-In-meeting-file-transfer) setting has been enabled for the user or
	// not.
	FileTransfer OptBool `json:"file_transfer"`
	// This setting enables the group HD video in Meeting. This value defaults to `false`.
	GroupHd OptBool `json:"group_hd"`
	// This setting enables the group HD video in Webinar. This value defaults to `false`.
	WebinarGroupHd OptBool `json:"webinar_group_hd"`
	// This setting allows participants to join a meeting directly from their desktop browser. Note that
	// the meeting experience from the desktop browser is limited.
	JoinFromDesktop OptBool `json:"join_from_desktop"`
	// This setting allows participants to join a meeting directly from their mobile browser. Note that
	// the meeting experience from the mobile browser is limited.
	JoinFromMobile OptBool `json:"join_from_mobile"`
	// The information about the [language interpretation](https://support.zoom.
	// us/hc/en-us/articles/360034919791-Using-Language-Interpretation-in-your-meeting-or-webinar)
	// settings.
	LanguageInterpretation OptUserSettingsUpdateReq0InMeetingLanguageInterpretation `json:"language_interpretation"`
	// This setting allows hosts to assign participants as sign language interpreters who can interpret
	// one language into sign language in real-time. Hosts can assign interpreters when scheduling, or
	// during the meeting itself. This feature is only available with version 5.11.3 or later.
	SignLanguageInterpretation OptUserSettingsUpdateReq0InMeetingSignLanguageInterpretation `json:"sign_language_interpretation"`
	// This setting allows Facebook livestreaming.
	LiveStreamingFacebook OptBool `json:"live_streaming_facebook"`
	// This setting allows YouTube to livestreaming.
	LiveStreamingYoutube OptBool `json:"live_streaming_youtube"`
	// The information about manual captioning settings.
	ManualCaptioning OptUserSettingsUpdateReq0InMeetingManualCaptioning `json:"manual_captioning"`
	// Whether meeting participants can [communicate using the emoji reactions](https://support.zoom.
	// us/hc/en-us/articles/115001286183-Nonverbal-feedback-and-meeting-reactions) located in the
	// **Reactions** menu in the meeting toolbar.
	MeetingReactions OptBool `json:"meeting_reactions"`
	// Users can choose from the following meeting reaction options:
	// * `all` &mdash; All emojis: Allow meeting participants to use any emoji available in Zoom chat as
	// a reaction in a meeting.
	// * `selected` &mdash; Selected emojis: Allow meeting participants to use the 6 standard meeting
	// reaction emojis: Clapping Hands, Thumbs Up, Heart, Tears of Joy, Open Mouth, Party Popper (Tada,
	// Celebration).
	MeetingReactionsEmojis OptString `json:"meeting_reactions_emojis"`
	// Whether to allow host and panelist to use audible clap.
	AllowHostPanelistsToUseAudibleClap OptBool `json:"allow_host_panelists_to_use_audible_clap"`
	// Setting this field to true allow you to use [webinar reactions](https://support.zoom.
	// us/hc/en-us/articles/4803536268429).
	WebinarReactions OptBool `json:"webinar_reactions"`
	// This setting allows the host to present a survey to participants once a meeting has ended. This
	// feature is only available in version 5.7.3 or higher.
	MeetingSurvey OptBool `json:"meeting_survey"`
	// This setting enables the [**Non-verbal feedback**](https://support.zoom.
	// us/hc/en-us/articles/115001286183-Nonverbal-feedback-and-meeting-reactions-) feature.  This value
	// defaults to `false`.
	NonVerbalFeedback OptBool `json:"non_verbal_feedback"`
	// This setting adds polls to the meeting controls. This value defaults to `false`.
	Polling OptBool `json:"polling"`
	// This setting [enables private chat](https://support.zoom.
	// us/hc/en-us/articles/360060835932-Enabling-and-disabling-private-chat) between participants during
	// meetings. This value defaults to `false`.
	PrivateChat OptBool `json:"private_chat"`
	// This setting allows users to record and play their own voice.
	RecordPlayVoice OptBool `json:"record_play_voice"`
	// This setting enables the [**Remote control**](https://support.zoom.
	// us/hc/en-us/articles/201362673-Requesting-or-giving-remote-control) feature.  This value defaults
	// to `false`.
	RemoteControl OptBool `json:"remote_control"`
	// This setting enables the [**Remote support**](https://support.zoom.
	// us/hc/en-us/articles/360060951012-Enabling-remote-support) feature. This value defaults to `false`.
	RemoteSupport OptBool `json:"remote_support"`
	// This setting indicates whether the [**Request permission to unmute participants**](https://support.
	// zoom.
	// us/hc/en-us/articles/203435537-Muting-and-unmuting-participants-in-a-meeting#h_01EGK4XFWS1SJGZ71MYGKF7260) option has been enabled for the user or not.
	RequestPermissionToUnmuteParticipants OptBool `json:"request_permission_to_unmute_participants"`
	// This setting allows host and participants to share their screen or content during meetings.
	ScreenSharing OptBool `json:"screen_sharing"`
	// This setting allows the use of shared dual cameras. This value defaults to `false`. **This field
	// is deprecated.**.
	//
	// Deprecated: schema marks this property as deprecated.
	ShareDualCamera OptBool `json:"share_dual_camera"`
	// This setting allows participants to join a meeting directly from their browser and bypass the Zoom
	// application download process. This is useful for participants who cannot download, install, or run
	// applications. Note that the meeting experience from the browser is limited.
	ShowAJoinFromYourBrowserLink OptBool `json:"show_a_join_from_your_browser_link"`
	// This setting allows you to always display [in-meeting controls](https://support.zoom.
	// us/hc/en-us/articles/360021921032-Zoom-Room-meeting-controls-and-settings#h_01EQCC03TCPRC72VKXZ7W47FDX).
	ShowMeetingControlToolbar OptBool `json:"show_meeting_control_toolbar"`
	// Whether the person sharing during a presentation can allow others to control the slide
	// presentation. This feature is only available in version 5.8.3 or higher.
	SlideControl OptBool `json:"slide_control"`
	// This setting enables virtual backgrounds. This value defaults to `false`.
	VirtualBackground OptBool `json:"virtual_background"`
	// The user's virtual background settings.
	VirtualBackgroundSettings OptUserSettingsUpdateReq0InMeetingVirtualBackgroundSettings `json:"virtual_background_settings"`
	// This setting enables the [**Waiting Room**](https://support.zoom.
	// us/hc/en-us/articles/115000332726-Waiting-Room) feature. This value defaults to `false`.
	WaitingRoom OptBool `json:"waiting_room"`
	// The information about the user's webinar chat settings.
	WebinarChat          OptUserSettingsUpdateReq0InMeetingWebinarChat          `json:"webinar_chat"`
	WebinarLiveStreaming OptUserSettingsUpdateReq0InMeetingWebinarLiveStreaming `json:"webinar_live_streaming"`
	// The information about the account's meeting polling settings.
	MeetingPolling OptUserSettingsUpdateReq0InMeetingMeetingPolling `json:"meeting_polling"`
	// The information about the user's webinar polling settings.
	WebinarPolling OptUserSettingsUpdateReq0InMeetingWebinarPolling `json:"webinar_polling"`
	// This setting allows the host to present surveys to attendees once a webinar has ended.
	WebinarSurvey OptBool `json:"webinar_survey"`
	// This setting indicates who can share their screen or content during meetings. The value can be one
	// of the following:
	// `host`: Only host can share the screen.
	// `all`: Both hosts and attendees can share their screen during meetings. For Webinar, the hosts and
	// panelists can start screen sharing, but not the attendees.
	WhoCanShareScreen OptString `json:"who_can_share_screen"`
	// This setting indicates who is allowed to start sharing screen when someone else in the meeting is
	// sharing their screen. The value can be one of the following:
	// `host`: Only a host can share the screen when someone else is sharing.
	// `all`: Anyone in the meeting is allowed to start sharing their screen when someone else is sharing.
	//  For Webinar, the hosts and panelists can start screen sharing, but not the attendees.
	WhoCanShareScreenWhenSomeoneIsSharing OptString `json:"who_can_share_screen_when_someone_is_sharing"`
	// This setting indicates how many participants can share at the same time. The value can be one of
	// the following:
	// `one`: Only one participant can share at a time
	// .
	// `multiple`: Multiple participants can share simultaneously (dual monitors recommended).
	ParticipantsShareSimultaneously OptString `json:"participants_share_simultaneously"`
	// This setting allows Workplace by Facebook livestreaming.
	WorkplaceByFacebook OptBool `json:"workplace_by_facebook"`
	// This setting allows the user to view and add contacts to the [**Auto-answer group in
	// chat**](https://support.zoom.
	// us/hc/en-us/articles/203736135-Auto-answering-invitations-to-meetings) feature. Calls from members
	// of the **Auto Answer Group** will be automatically answered the user.
	AutoAnswer OptBool `json:"auto_answer"`
	// This setting enables the [**Show Zoom windows during screen share**](https://support.zoom.
	// us/hc/en-us/articles/360061383571-Showing-Zoom-windows-during-screen-share) feature.
	AllowShowZoomWindows OptBool `json:"allow_show_zoom_windows"`
}

// GetAllowHostToEnableFocusMode returns the value of AllowHostToEnableFocusMode.
func (s *UserSettingsUpdateReq0InMeeting) GetAllowHostToEnableFocusMode() OptBool {
	return s.AllowHostToEnableFocusMode
}

// GetAllowUsersToDeleteMessagesInMeetingChat returns the value of AllowUsersToDeleteMessagesInMeetingChat.
func (s *UserSettingsUpdateReq0InMeeting) GetAllowUsersToDeleteMessagesInMeetingChat() OptBool {
	return s.AllowUsersToDeleteMessagesInMeetingChat
}

// GetAllowLiveStreaming returns the value of AllowLiveStreaming.
func (s *UserSettingsUpdateReq0InMeeting) GetAllowLiveStreaming() OptBool {
	return s.AllowLiveStreaming
}

// GetPostMeetingFeedback returns the value of PostMeetingFeedback.
func (s *UserSettingsUpdateReq0InMeeting) GetPostMeetingFeedback() OptBool {
	return s.PostMeetingFeedback
}

// GetWhiteboard returns the value of Whiteboard.
func (s *UserSettingsUpdateReq0InMeeting) GetWhiteboard() OptBool {
	return s.Whiteboard
}

// GetAllowParticipantsChatWith returns the value of AllowParticipantsChatWith.
func (s *UserSettingsUpdateReq0InMeeting) GetAllowParticipantsChatWith() OptInt {
	return s.AllowParticipantsChatWith
}

// GetAllowUsersSaveChats returns the value of AllowUsersSaveChats.
func (s *UserSettingsUpdateReq0InMeeting) GetAllowUsersSaveChats() OptInt {
	return s.AllowUsersSaveChats
}

// GetAnnotation returns the value of Annotation.
func (s *UserSettingsUpdateReq0InMeeting) GetAnnotation() OptBool {
	return s.Annotation
}

// GetAttendeeOnHold returns the value of AttendeeOnHold.
func (s *UserSettingsUpdateReq0InMeeting) GetAttendeeOnHold() OptBool {
	return s.AttendeeOnHold
}

// GetAttentionModeFocusMode returns the value of AttentionModeFocusMode.
func (s *UserSettingsUpdateReq0InMeeting) GetAttentionModeFocusMode() OptBool {
	return s.AttentionModeFocusMode
}

// GetAutoSavingChat returns the value of AutoSavingChat.
func (s *UserSettingsUpdateReq0InMeeting) GetAutoSavingChat() OptBool {
	return s.AutoSavingChat
}

// GetBreakoutRoom returns the value of BreakoutRoom.
func (s *UserSettingsUpdateReq0InMeeting) GetBreakoutRoom() OptBool {
	return s.BreakoutRoom
}

// GetBreakoutRoomSchedule returns the value of BreakoutRoomSchedule.
func (s *UserSettingsUpdateReq0InMeeting) GetBreakoutRoomSchedule() OptBool {
	return s.BreakoutRoomSchedule
}

// GetChat returns the value of Chat.
func (s *UserSettingsUpdateReq0InMeeting) GetChat() OptBool {
	return s.Chat
}

// GetMeetingQuestionAnswer returns the value of MeetingQuestionAnswer.
func (s *UserSettingsUpdateReq0InMeeting) GetMeetingQuestionAnswer() OptBool {
	return s.MeetingQuestionAnswer
}

// GetClosedCaption returns the value of ClosedCaption.
func (s *UserSettingsUpdateReq0InMeeting) GetClosedCaption() OptBool {
	return s.ClosedCaption
}

// GetClosedCaptioning returns the value of ClosedCaptioning.
func (s *UserSettingsUpdateReq0InMeeting) GetClosedCaptioning() OptUserSettingsUpdateReq0InMeetingClosedCaptioning {
	return s.ClosedCaptioning
}

// GetCoHost returns the value of CoHost.
func (s *UserSettingsUpdateReq0InMeeting) GetCoHost() OptBool {
	return s.CoHost
}

// GetCustomDataCenterRegions returns the value of CustomDataCenterRegions.
func (s *UserSettingsUpdateReq0InMeeting) GetCustomDataCenterRegions() OptBool {
	return s.CustomDataCenterRegions
}

// GetCustomLiveStreamingService returns the value of CustomLiveStreamingService.
func (s *UserSettingsUpdateReq0InMeeting) GetCustomLiveStreamingService() OptBool {
	return s.CustomLiveStreamingService
}

// GetCustomServiceInstructions returns the value of CustomServiceInstructions.
func (s *UserSettingsUpdateReq0InMeeting) GetCustomServiceInstructions() OptString {
	return s.CustomServiceInstructions
}

// GetDataCenterRegions returns the value of DataCenterRegions.
func (s *UserSettingsUpdateReq0InMeeting) GetDataCenterRegions() []string {
	return s.DataCenterRegions
}

// GetDisableScreenSharingForHostMeetings returns the value of DisableScreenSharingForHostMeetings.
func (s *UserSettingsUpdateReq0InMeeting) GetDisableScreenSharingForHostMeetings() OptBool {
	return s.DisableScreenSharingForHostMeetings
}

// GetDisableScreenSharingForInMeetingGuests returns the value of DisableScreenSharingForInMeetingGuests.
func (s *UserSettingsUpdateReq0InMeeting) GetDisableScreenSharingForInMeetingGuests() OptBool {
	return s.DisableScreenSharingForInMeetingGuests
}

// GetE2eEncryption returns the value of E2eEncryption.
func (s *UserSettingsUpdateReq0InMeeting) GetE2eEncryption() OptBool {
	return s.E2eEncryption
}

// GetEntryExitChime returns the value of EntryExitChime.
func (s *UserSettingsUpdateReq0InMeeting) GetEntryExitChime() OptString {
	return s.EntryExitChime
}

// GetFarEndCameraControl returns the value of FarEndCameraControl.
func (s *UserSettingsUpdateReq0InMeeting) GetFarEndCameraControl() OptBool {
	return s.FarEndCameraControl
}

// GetFeedback returns the value of Feedback.
func (s *UserSettingsUpdateReq0InMeeting) GetFeedback() OptBool {
	return s.Feedback
}

// GetFileTransfer returns the value of FileTransfer.
func (s *UserSettingsUpdateReq0InMeeting) GetFileTransfer() OptBool {
	return s.FileTransfer
}

// GetGroupHd returns the value of GroupHd.
func (s *UserSettingsUpdateReq0InMeeting) GetGroupHd() OptBool {
	return s.GroupHd
}

// GetWebinarGroupHd returns the value of WebinarGroupHd.
func (s *UserSettingsUpdateReq0InMeeting) GetWebinarGroupHd() OptBool {
	return s.WebinarGroupHd
}

// GetJoinFromDesktop returns the value of JoinFromDesktop.
func (s *UserSettingsUpdateReq0InMeeting) GetJoinFromDesktop() OptBool {
	return s.JoinFromDesktop
}

// GetJoinFromMobile returns the value of JoinFromMobile.
func (s *UserSettingsUpdateReq0InMeeting) GetJoinFromMobile() OptBool {
	return s.JoinFromMobile
}

// GetLanguageInterpretation returns the value of LanguageInterpretation.
func (s *UserSettingsUpdateReq0InMeeting) GetLanguageInterpretation() OptUserSettingsUpdateReq0InMeetingLanguageInterpretation {
	return s.LanguageInterpretation
}

// GetSignLanguageInterpretation returns the value of SignLanguageInterpretation.
func (s *UserSettingsUpdateReq0InMeeting) GetSignLanguageInterpretation() OptUserSettingsUpdateReq0InMeetingSignLanguageInterpretation {
	return s.SignLanguageInterpretation
}

// GetLiveStreamingFacebook returns the value of LiveStreamingFacebook.
func (s *UserSettingsUpdateReq0InMeeting) GetLiveStreamingFacebook() OptBool {
	return s.LiveStreamingFacebook
}

// GetLiveStreamingYoutube returns the value of LiveStreamingYoutube.
func (s *UserSettingsUpdateReq0InMeeting) GetLiveStreamingYoutube() OptBool {
	return s.LiveStreamingYoutube
}

// GetManualCaptioning returns the value of ManualCaptioning.
func (s *UserSettingsUpdateReq0InMeeting) GetManualCaptioning() OptUserSettingsUpdateReq0InMeetingManualCaptioning {
	return s.ManualCaptioning
}

// GetMeetingReactions returns the value of MeetingReactions.
func (s *UserSettingsUpdateReq0InMeeting) GetMeetingReactions() OptBool {
	return s.MeetingReactions
}

// GetMeetingReactionsEmojis returns the value of MeetingReactionsEmojis.
func (s *UserSettingsUpdateReq0InMeeting) GetMeetingReactionsEmojis() OptString {
	return s.MeetingReactionsEmojis
}

// GetAllowHostPanelistsToUseAudibleClap returns the value of AllowHostPanelistsToUseAudibleClap.
func (s *UserSettingsUpdateReq0InMeeting) GetAllowHostPanelistsToUseAudibleClap() OptBool {
	return s.AllowHostPanelistsToUseAudibleClap
}

// GetWebinarReactions returns the value of WebinarReactions.
func (s *UserSettingsUpdateReq0InMeeting) GetWebinarReactions() OptBool {
	return s.WebinarReactions
}

// GetMeetingSurvey returns the value of MeetingSurvey.
func (s *UserSettingsUpdateReq0InMeeting) GetMeetingSurvey() OptBool {
	return s.MeetingSurvey
}

// GetNonVerbalFeedback returns the value of NonVerbalFeedback.
func (s *UserSettingsUpdateReq0InMeeting) GetNonVerbalFeedback() OptBool {
	return s.NonVerbalFeedback
}

// GetPolling returns the value of Polling.
func (s *UserSettingsUpdateReq0InMeeting) GetPolling() OptBool {
	return s.Polling
}

// GetPrivateChat returns the value of PrivateChat.
func (s *UserSettingsUpdateReq0InMeeting) GetPrivateChat() OptBool {
	return s.PrivateChat
}

// GetRecordPlayVoice returns the value of RecordPlayVoice.
func (s *UserSettingsUpdateReq0InMeeting) GetRecordPlayVoice() OptBool {
	return s.RecordPlayVoice
}

// GetRemoteControl returns the value of RemoteControl.
func (s *UserSettingsUpdateReq0InMeeting) GetRemoteControl() OptBool {
	return s.RemoteControl
}

// GetRemoteSupport returns the value of RemoteSupport.
func (s *UserSettingsUpdateReq0InMeeting) GetRemoteSupport() OptBool {
	return s.RemoteSupport
}

// GetRequestPermissionToUnmuteParticipants returns the value of RequestPermissionToUnmuteParticipants.
func (s *UserSettingsUpdateReq0InMeeting) GetRequestPermissionToUnmuteParticipants() OptBool {
	return s.RequestPermissionToUnmuteParticipants
}

// GetScreenSharing returns the value of ScreenSharing.
func (s *UserSettingsUpdateReq0InMeeting) GetScreenSharing() OptBool {
	return s.ScreenSharing
}

// GetShareDualCamera returns the value of ShareDualCamera.
func (s *UserSettingsUpdateReq0InMeeting) GetShareDualCamera() OptBool {
	return s.ShareDualCamera
}

// GetShowAJoinFromYourBrowserLink returns the value of ShowAJoinFromYourBrowserLink.
func (s *UserSettingsUpdateReq0InMeeting) GetShowAJoinFromYourBrowserLink() OptBool {
	return s.ShowAJoinFromYourBrowserLink
}

// GetShowMeetingControlToolbar returns the value of ShowMeetingControlToolbar.
func (s *UserSettingsUpdateReq0InMeeting) GetShowMeetingControlToolbar() OptBool {
	return s.ShowMeetingControlToolbar
}

// GetSlideControl returns the value of SlideControl.
func (s *UserSettingsUpdateReq0InMeeting) GetSlideControl() OptBool {
	return s.SlideControl
}

// GetVirtualBackground returns the value of VirtualBackground.
func (s *UserSettingsUpdateReq0InMeeting) GetVirtualBackground() OptBool {
	return s.VirtualBackground
}

// GetVirtualBackgroundSettings returns the value of VirtualBackgroundSettings.
func (s *UserSettingsUpdateReq0InMeeting) GetVirtualBackgroundSettings() OptUserSettingsUpdateReq0InMeetingVirtualBackgroundSettings {
	return s.VirtualBackgroundSettings
}

// GetWaitingRoom returns the value of WaitingRoom.
func (s *UserSettingsUpdateReq0InMeeting) GetWaitingRoom() OptBool {
	return s.WaitingRoom
}

// GetWebinarChat returns the value of WebinarChat.
func (s *UserSettingsUpdateReq0InMeeting) GetWebinarChat() OptUserSettingsUpdateReq0InMeetingWebinarChat {
	return s.WebinarChat
}

// GetWebinarLiveStreaming returns the value of WebinarLiveStreaming.
func (s *UserSettingsUpdateReq0InMeeting) GetWebinarLiveStreaming() OptUserSettingsUpdateReq0InMeetingWebinarLiveStreaming {
	return s.WebinarLiveStreaming
}

// GetMeetingPolling returns the value of MeetingPolling.
func (s *UserSettingsUpdateReq0InMeeting) GetMeetingPolling() OptUserSettingsUpdateReq0InMeetingMeetingPolling {
	return s.MeetingPolling
}

// GetWebinarPolling returns the value of WebinarPolling.
func (s *UserSettingsUpdateReq0InMeeting) GetWebinarPolling() OptUserSettingsUpdateReq0InMeetingWebinarPolling {
	return s.WebinarPolling
}

// GetWebinarSurvey returns the value of WebinarSurvey.
func (s *UserSettingsUpdateReq0InMeeting) GetWebinarSurvey() OptBool {
	return s.WebinarSurvey
}

// GetWhoCanShareScreen returns the value of WhoCanShareScreen.
func (s *UserSettingsUpdateReq0InMeeting) GetWhoCanShareScreen() OptString {
	return s.WhoCanShareScreen
}

// GetWhoCanShareScreenWhenSomeoneIsSharing returns the value of WhoCanShareScreenWhenSomeoneIsSharing.
func (s *UserSettingsUpdateReq0InMeeting) GetWhoCanShareScreenWhenSomeoneIsSharing() OptString {
	return s.WhoCanShareScreenWhenSomeoneIsSharing
}

// GetParticipantsShareSimultaneously returns the value of ParticipantsShareSimultaneously.
func (s *UserSettingsUpdateReq0InMeeting) GetParticipantsShareSimultaneously() OptString {
	return s.ParticipantsShareSimultaneously
}

// GetWorkplaceByFacebook returns the value of WorkplaceByFacebook.
func (s *UserSettingsUpdateReq0InMeeting) GetWorkplaceByFacebook() OptBool {
	return s.WorkplaceByFacebook
}

// GetAutoAnswer returns the value of AutoAnswer.
func (s *UserSettingsUpdateReq0InMeeting) GetAutoAnswer() OptBool {
	return s.AutoAnswer
}

// GetAllowShowZoomWindows returns the value of AllowShowZoomWindows.
func (s *UserSettingsUpdateReq0InMeeting) GetAllowShowZoomWindows() OptBool {
	return s.AllowShowZoomWindows
}

// SetAllowHostToEnableFocusMode sets the value of AllowHostToEnableFocusMode.
func (s *UserSettingsUpdateReq0InMeeting) SetAllowHostToEnableFocusMode(val OptBool) {
	s.AllowHostToEnableFocusMode = val
}

// SetAllowUsersToDeleteMessagesInMeetingChat sets the value of AllowUsersToDeleteMessagesInMeetingChat.
func (s *UserSettingsUpdateReq0InMeeting) SetAllowUsersToDeleteMessagesInMeetingChat(val OptBool) {
	s.AllowUsersToDeleteMessagesInMeetingChat = val
}

// SetAllowLiveStreaming sets the value of AllowLiveStreaming.
func (s *UserSettingsUpdateReq0InMeeting) SetAllowLiveStreaming(val OptBool) {
	s.AllowLiveStreaming = val
}

// SetPostMeetingFeedback sets the value of PostMeetingFeedback.
func (s *UserSettingsUpdateReq0InMeeting) SetPostMeetingFeedback(val OptBool) {
	s.PostMeetingFeedback = val
}

// SetWhiteboard sets the value of Whiteboard.
func (s *UserSettingsUpdateReq0InMeeting) SetWhiteboard(val OptBool) {
	s.Whiteboard = val
}

// SetAllowParticipantsChatWith sets the value of AllowParticipantsChatWith.
func (s *UserSettingsUpdateReq0InMeeting) SetAllowParticipantsChatWith(val OptInt) {
	s.AllowParticipantsChatWith = val
}

// SetAllowUsersSaveChats sets the value of AllowUsersSaveChats.
func (s *UserSettingsUpdateReq0InMeeting) SetAllowUsersSaveChats(val OptInt) {
	s.AllowUsersSaveChats = val
}

// SetAnnotation sets the value of Annotation.
func (s *UserSettingsUpdateReq0InMeeting) SetAnnotation(val OptBool) {
	s.Annotation = val
}

// SetAttendeeOnHold sets the value of AttendeeOnHold.
func (s *UserSettingsUpdateReq0InMeeting) SetAttendeeOnHold(val OptBool) {
	s.AttendeeOnHold = val
}

// SetAttentionModeFocusMode sets the value of AttentionModeFocusMode.
func (s *UserSettingsUpdateReq0InMeeting) SetAttentionModeFocusMode(val OptBool) {
	s.AttentionModeFocusMode = val
}

// SetAutoSavingChat sets the value of AutoSavingChat.
func (s *UserSettingsUpdateReq0InMeeting) SetAutoSavingChat(val OptBool) {
	s.AutoSavingChat = val
}

// SetBreakoutRoom sets the value of BreakoutRoom.
func (s *UserSettingsUpdateReq0InMeeting) SetBreakoutRoom(val OptBool) {
	s.BreakoutRoom = val
}

// SetBreakoutRoomSchedule sets the value of BreakoutRoomSchedule.
func (s *UserSettingsUpdateReq0InMeeting) SetBreakoutRoomSchedule(val OptBool) {
	s.BreakoutRoomSchedule = val
}

// SetChat sets the value of Chat.
func (s *UserSettingsUpdateReq0InMeeting) SetChat(val OptBool) {
	s.Chat = val
}

// SetMeetingQuestionAnswer sets the value of MeetingQuestionAnswer.
func (s *UserSettingsUpdateReq0InMeeting) SetMeetingQuestionAnswer(val OptBool) {
	s.MeetingQuestionAnswer = val
}

// SetClosedCaption sets the value of ClosedCaption.
func (s *UserSettingsUpdateReq0InMeeting) SetClosedCaption(val OptBool) {
	s.ClosedCaption = val
}

// SetClosedCaptioning sets the value of ClosedCaptioning.
func (s *UserSettingsUpdateReq0InMeeting) SetClosedCaptioning(val OptUserSettingsUpdateReq0InMeetingClosedCaptioning) {
	s.ClosedCaptioning = val
}

// SetCoHost sets the value of CoHost.
func (s *UserSettingsUpdateReq0InMeeting) SetCoHost(val OptBool) {
	s.CoHost = val
}

// SetCustomDataCenterRegions sets the value of CustomDataCenterRegions.
func (s *UserSettingsUpdateReq0InMeeting) SetCustomDataCenterRegions(val OptBool) {
	s.CustomDataCenterRegions = val
}

// SetCustomLiveStreamingService sets the value of CustomLiveStreamingService.
func (s *UserSettingsUpdateReq0InMeeting) SetCustomLiveStreamingService(val OptBool) {
	s.CustomLiveStreamingService = val
}

// SetCustomServiceInstructions sets the value of CustomServiceInstructions.
func (s *UserSettingsUpdateReq0InMeeting) SetCustomServiceInstructions(val OptString) {
	s.CustomServiceInstructions = val
}

// SetDataCenterRegions sets the value of DataCenterRegions.
func (s *UserSettingsUpdateReq0InMeeting) SetDataCenterRegions(val []string) {
	s.DataCenterRegions = val
}

// SetDisableScreenSharingForHostMeetings sets the value of DisableScreenSharingForHostMeetings.
func (s *UserSettingsUpdateReq0InMeeting) SetDisableScreenSharingForHostMeetings(val OptBool) {
	s.DisableScreenSharingForHostMeetings = val
}

// SetDisableScreenSharingForInMeetingGuests sets the value of DisableScreenSharingForInMeetingGuests.
func (s *UserSettingsUpdateReq0InMeeting) SetDisableScreenSharingForInMeetingGuests(val OptBool) {
	s.DisableScreenSharingForInMeetingGuests = val
}

// SetE2eEncryption sets the value of E2eEncryption.
func (s *UserSettingsUpdateReq0InMeeting) SetE2eEncryption(val OptBool) {
	s.E2eEncryption = val
}

// SetEntryExitChime sets the value of EntryExitChime.
func (s *UserSettingsUpdateReq0InMeeting) SetEntryExitChime(val OptString) {
	s.EntryExitChime = val
}

// SetFarEndCameraControl sets the value of FarEndCameraControl.
func (s *UserSettingsUpdateReq0InMeeting) SetFarEndCameraControl(val OptBool) {
	s.FarEndCameraControl = val
}

// SetFeedback sets the value of Feedback.
func (s *UserSettingsUpdateReq0InMeeting) SetFeedback(val OptBool) {
	s.Feedback = val
}

// SetFileTransfer sets the value of FileTransfer.
func (s *UserSettingsUpdateReq0InMeeting) SetFileTransfer(val OptBool) {
	s.FileTransfer = val
}

// SetGroupHd sets the value of GroupHd.
func (s *UserSettingsUpdateReq0InMeeting) SetGroupHd(val OptBool) {
	s.GroupHd = val
}

// SetWebinarGroupHd sets the value of WebinarGroupHd.
func (s *UserSettingsUpdateReq0InMeeting) SetWebinarGroupHd(val OptBool) {
	s.WebinarGroupHd = val
}

// SetJoinFromDesktop sets the value of JoinFromDesktop.
func (s *UserSettingsUpdateReq0InMeeting) SetJoinFromDesktop(val OptBool) {
	s.JoinFromDesktop = val
}

// SetJoinFromMobile sets the value of JoinFromMobile.
func (s *UserSettingsUpdateReq0InMeeting) SetJoinFromMobile(val OptBool) {
	s.JoinFromMobile = val
}

// SetLanguageInterpretation sets the value of LanguageInterpretation.
func (s *UserSettingsUpdateReq0InMeeting) SetLanguageInterpretation(val OptUserSettingsUpdateReq0InMeetingLanguageInterpretation) {
	s.LanguageInterpretation = val
}

// SetSignLanguageInterpretation sets the value of SignLanguageInterpretation.
func (s *UserSettingsUpdateReq0InMeeting) SetSignLanguageInterpretation(val OptUserSettingsUpdateReq0InMeetingSignLanguageInterpretation) {
	s.SignLanguageInterpretation = val
}

// SetLiveStreamingFacebook sets the value of LiveStreamingFacebook.
func (s *UserSettingsUpdateReq0InMeeting) SetLiveStreamingFacebook(val OptBool) {
	s.LiveStreamingFacebook = val
}

// SetLiveStreamingYoutube sets the value of LiveStreamingYoutube.
func (s *UserSettingsUpdateReq0InMeeting) SetLiveStreamingYoutube(val OptBool) {
	s.LiveStreamingYoutube = val
}

// SetManualCaptioning sets the value of ManualCaptioning.
func (s *UserSettingsUpdateReq0InMeeting) SetManualCaptioning(val OptUserSettingsUpdateReq0InMeetingManualCaptioning) {
	s.ManualCaptioning = val
}

// SetMeetingReactions sets the value of MeetingReactions.
func (s *UserSettingsUpdateReq0InMeeting) SetMeetingReactions(val OptBool) {
	s.MeetingReactions = val
}

// SetMeetingReactionsEmojis sets the value of MeetingReactionsEmojis.
func (s *UserSettingsUpdateReq0InMeeting) SetMeetingReactionsEmojis(val OptString) {
	s.MeetingReactionsEmojis = val
}

// SetAllowHostPanelistsToUseAudibleClap sets the value of AllowHostPanelistsToUseAudibleClap.
func (s *UserSettingsUpdateReq0InMeeting) SetAllowHostPanelistsToUseAudibleClap(val OptBool) {
	s.AllowHostPanelistsToUseAudibleClap = val
}

// SetWebinarReactions sets the value of WebinarReactions.
func (s *UserSettingsUpdateReq0InMeeting) SetWebinarReactions(val OptBool) {
	s.WebinarReactions = val
}

// SetMeetingSurvey sets the value of MeetingSurvey.
func (s *UserSettingsUpdateReq0InMeeting) SetMeetingSurvey(val OptBool) {
	s.MeetingSurvey = val
}

// SetNonVerbalFeedback sets the value of NonVerbalFeedback.
func (s *UserSettingsUpdateReq0InMeeting) SetNonVerbalFeedback(val OptBool) {
	s.NonVerbalFeedback = val
}

// SetPolling sets the value of Polling.
func (s *UserSettingsUpdateReq0InMeeting) SetPolling(val OptBool) {
	s.Polling = val
}

// SetPrivateChat sets the value of PrivateChat.
func (s *UserSettingsUpdateReq0InMeeting) SetPrivateChat(val OptBool) {
	s.PrivateChat = val
}

// SetRecordPlayVoice sets the value of RecordPlayVoice.
func (s *UserSettingsUpdateReq0InMeeting) SetRecordPlayVoice(val OptBool) {
	s.RecordPlayVoice = val
}

// SetRemoteControl sets the value of RemoteControl.
func (s *UserSettingsUpdateReq0InMeeting) SetRemoteControl(val OptBool) {
	s.RemoteControl = val
}

// SetRemoteSupport sets the value of RemoteSupport.
func (s *UserSettingsUpdateReq0InMeeting) SetRemoteSupport(val OptBool) {
	s.RemoteSupport = val
}

// SetRequestPermissionToUnmuteParticipants sets the value of RequestPermissionToUnmuteParticipants.
func (s *UserSettingsUpdateReq0InMeeting) SetRequestPermissionToUnmuteParticipants(val OptBool) {
	s.RequestPermissionToUnmuteParticipants = val
}

// SetScreenSharing sets the value of ScreenSharing.
func (s *UserSettingsUpdateReq0InMeeting) SetScreenSharing(val OptBool) {
	s.ScreenSharing = val
}

// SetShareDualCamera sets the value of ShareDualCamera.
func (s *UserSettingsUpdateReq0InMeeting) SetShareDualCamera(val OptBool) {
	s.ShareDualCamera = val
}

// SetShowAJoinFromYourBrowserLink sets the value of ShowAJoinFromYourBrowserLink.
func (s *UserSettingsUpdateReq0InMeeting) SetShowAJoinFromYourBrowserLink(val OptBool) {
	s.ShowAJoinFromYourBrowserLink = val
}

// SetShowMeetingControlToolbar sets the value of ShowMeetingControlToolbar.
func (s *UserSettingsUpdateReq0InMeeting) SetShowMeetingControlToolbar(val OptBool) {
	s.ShowMeetingControlToolbar = val
}

// SetSlideControl sets the value of SlideControl.
func (s *UserSettingsUpdateReq0InMeeting) SetSlideControl(val OptBool) {
	s.SlideControl = val
}

// SetVirtualBackground sets the value of VirtualBackground.
func (s *UserSettingsUpdateReq0InMeeting) SetVirtualBackground(val OptBool) {
	s.VirtualBackground = val
}

// SetVirtualBackgroundSettings sets the value of VirtualBackgroundSettings.
func (s *UserSettingsUpdateReq0InMeeting) SetVirtualBackgroundSettings(val OptUserSettingsUpdateReq0InMeetingVirtualBackgroundSettings) {
	s.VirtualBackgroundSettings = val
}

// SetWaitingRoom sets the value of WaitingRoom.
func (s *UserSettingsUpdateReq0InMeeting) SetWaitingRoom(val OptBool) {
	s.WaitingRoom = val
}

// SetWebinarChat sets the value of WebinarChat.
func (s *UserSettingsUpdateReq0InMeeting) SetWebinarChat(val OptUserSettingsUpdateReq0InMeetingWebinarChat) {
	s.WebinarChat = val
}

// SetWebinarLiveStreaming sets the value of WebinarLiveStreaming.
func (s *UserSettingsUpdateReq0InMeeting) SetWebinarLiveStreaming(val OptUserSettingsUpdateReq0InMeetingWebinarLiveStreaming) {
	s.WebinarLiveStreaming = val
}

// SetMeetingPolling sets the value of MeetingPolling.
func (s *UserSettingsUpdateReq0InMeeting) SetMeetingPolling(val OptUserSettingsUpdateReq0InMeetingMeetingPolling) {
	s.MeetingPolling = val
}

// SetWebinarPolling sets the value of WebinarPolling.
func (s *UserSettingsUpdateReq0InMeeting) SetWebinarPolling(val OptUserSettingsUpdateReq0InMeetingWebinarPolling) {
	s.WebinarPolling = val
}

// SetWebinarSurvey sets the value of WebinarSurvey.
func (s *UserSettingsUpdateReq0InMeeting) SetWebinarSurvey(val OptBool) {
	s.WebinarSurvey = val
}

// SetWhoCanShareScreen sets the value of WhoCanShareScreen.
func (s *UserSettingsUpdateReq0InMeeting) SetWhoCanShareScreen(val OptString) {
	s.WhoCanShareScreen = val
}

// SetWhoCanShareScreenWhenSomeoneIsSharing sets the value of WhoCanShareScreenWhenSomeoneIsSharing.
func (s *UserSettingsUpdateReq0InMeeting) SetWhoCanShareScreenWhenSomeoneIsSharing(val OptString) {
	s.WhoCanShareScreenWhenSomeoneIsSharing = val
}

// SetParticipantsShareSimultaneously sets the value of ParticipantsShareSimultaneously.
func (s *UserSettingsUpdateReq0InMeeting) SetParticipantsShareSimultaneously(val OptString) {
	s.ParticipantsShareSimultaneously = val
}

// SetWorkplaceByFacebook sets the value of WorkplaceByFacebook.
func (s *UserSettingsUpdateReq0InMeeting) SetWorkplaceByFacebook(val OptBool) {
	s.WorkplaceByFacebook = val
}

// SetAutoAnswer sets the value of AutoAnswer.
func (s *UserSettingsUpdateReq0InMeeting) SetAutoAnswer(val OptBool) {
	s.AutoAnswer = val
}

// SetAllowShowZoomWindows sets the value of AllowShowZoomWindows.
func (s *UserSettingsUpdateReq0InMeeting) SetAllowShowZoomWindows(val OptBool) {
	s.AllowShowZoomWindows = val
}

// The information about the user's closed captioning settings.
type UserSettingsUpdateReq0InMeetingClosedCaptioning struct {
	// This setting allows a live transcription service to transcribe meetings.
	AutoTranscribing OptBool `json:"auto_transcribing"`
	// This setting allows the host to type closed captions or assign a participant or 3rd-party service
	// to provide closed captioning.
	Enable OptBool `json:"enable"`
	// This setting allows participants to save closed captions or transcripts.
	SaveCaption OptBool `json:"save_caption"`
	// This setting allows the use of an API token to integrate with third-party closed captioning
	// services.
	ThirdPartyCaptioningService OptBool `json:"third_party_captioning_service"`
	// This setting allows the viewing of full transcripts in the in-meeting side panel.
	ViewFullTranscript OptBool `json:"view_full_transcript"`
}

// GetAutoTranscribing returns the value of AutoTranscribing.
func (s *UserSettingsUpdateReq0InMeetingClosedCaptioning) GetAutoTranscribing() OptBool {
	return s.AutoTranscribing
}

// GetEnable returns the value of Enable.
func (s *UserSettingsUpdateReq0InMeetingClosedCaptioning) GetEnable() OptBool {
	return s.Enable
}

// GetSaveCaption returns the value of SaveCaption.
func (s *UserSettingsUpdateReq0InMeetingClosedCaptioning) GetSaveCaption() OptBool {
	return s.SaveCaption
}

// GetThirdPartyCaptioningService returns the value of ThirdPartyCaptioningService.
func (s *UserSettingsUpdateReq0InMeetingClosedCaptioning) GetThirdPartyCaptioningService() OptBool {
	return s.ThirdPartyCaptioningService
}

// GetViewFullTranscript returns the value of ViewFullTranscript.
func (s *UserSettingsUpdateReq0InMeetingClosedCaptioning) GetViewFullTranscript() OptBool {
	return s.ViewFullTranscript
}

// SetAutoTranscribing sets the value of AutoTranscribing.
func (s *UserSettingsUpdateReq0InMeetingClosedCaptioning) SetAutoTranscribing(val OptBool) {
	s.AutoTranscribing = val
}

// SetEnable sets the value of Enable.
func (s *UserSettingsUpdateReq0InMeetingClosedCaptioning) SetEnable(val OptBool) {
	s.Enable = val
}

// SetSaveCaption sets the value of SaveCaption.
func (s *UserSettingsUpdateReq0InMeetingClosedCaptioning) SetSaveCaption(val OptBool) {
	s.SaveCaption = val
}

// SetThirdPartyCaptioningService sets the value of ThirdPartyCaptioningService.
func (s *UserSettingsUpdateReq0InMeetingClosedCaptioning) SetThirdPartyCaptioningService(val OptBool) {
	s.ThirdPartyCaptioningService = val
}

// SetViewFullTranscript sets the value of ViewFullTranscript.
func (s *UserSettingsUpdateReq0InMeetingClosedCaptioning) SetViewFullTranscript(val OptBool) {
	s.ViewFullTranscript = val
}

// The information about the [language interpretation](https://support.zoom.
// us/hc/en-us/articles/360034919791-Using-Language-Interpretation-in-your-meeting-or-webinar)
// settings.
type UserSettingsUpdateReq0InMeetingLanguageInterpretation struct {
	// A list of user-defined supported languages.
	CustomLanguages []string `json:"custom_languages"`
	// Whether enable language interpretation by default.
	EnableLanguageInterpretationByDefault OptBool `json:"enable_language_interpretation_by_default"`
	// Whether to allow participants to speak in listening channel.
	AllowParticipantsToSpeakInListeningChannel OptBool `json:"allow_participants_to_speak_in_listening_channel"`
	// Whether to allow up to 25 custom languages when scheduling meetings.
	AllowUpTo25CustomLanguagesWhenSchedulingMeetings OptBool `json:"allow_up_to_25_custom_languages_when_scheduling_meetings"`
	// This setting allows the hosts to assign participants as interpreters who can interpret one
	// language into another in real-time.
	Enable OptBool `json:"enable"`
}

// GetCustomLanguages returns the value of CustomLanguages.
func (s *UserSettingsUpdateReq0InMeetingLanguageInterpretation) GetCustomLanguages() []string {
	return s.CustomLanguages
}

// GetEnableLanguageInterpretationByDefault returns the value of EnableLanguageInterpretationByDefault.
func (s *UserSettingsUpdateReq0InMeetingLanguageInterpretation) GetEnableLanguageInterpretationByDefault() OptBool {
	return s.EnableLanguageInterpretationByDefault
}

// GetAllowParticipantsToSpeakInListeningChannel returns the value of AllowParticipantsToSpeakInListeningChannel.
func (s *UserSettingsUpdateReq0InMeetingLanguageInterpretation) GetAllowParticipantsToSpeakInListeningChannel() OptBool {
	return s.AllowParticipantsToSpeakInListeningChannel
}

// GetAllowUpTo25CustomLanguagesWhenSchedulingMeetings returns the value of AllowUpTo25CustomLanguagesWhenSchedulingMeetings.
func (s *UserSettingsUpdateReq0InMeetingLanguageInterpretation) GetAllowUpTo25CustomLanguagesWhenSchedulingMeetings() OptBool {
	return s.AllowUpTo25CustomLanguagesWhenSchedulingMeetings
}

// GetEnable returns the value of Enable.
func (s *UserSettingsUpdateReq0InMeetingLanguageInterpretation) GetEnable() OptBool {
	return s.Enable
}

// SetCustomLanguages sets the value of CustomLanguages.
func (s *UserSettingsUpdateReq0InMeetingLanguageInterpretation) SetCustomLanguages(val []string) {
	s.CustomLanguages = val
}

// SetEnableLanguageInterpretationByDefault sets the value of EnableLanguageInterpretationByDefault.
func (s *UserSettingsUpdateReq0InMeetingLanguageInterpretation) SetEnableLanguageInterpretationByDefault(val OptBool) {
	s.EnableLanguageInterpretationByDefault = val
}

// SetAllowParticipantsToSpeakInListeningChannel sets the value of AllowParticipantsToSpeakInListeningChannel.
func (s *UserSettingsUpdateReq0InMeetingLanguageInterpretation) SetAllowParticipantsToSpeakInListeningChannel(val OptBool) {
	s.AllowParticipantsToSpeakInListeningChannel = val
}

// SetAllowUpTo25CustomLanguagesWhenSchedulingMeetings sets the value of AllowUpTo25CustomLanguagesWhenSchedulingMeetings.
func (s *UserSettingsUpdateReq0InMeetingLanguageInterpretation) SetAllowUpTo25CustomLanguagesWhenSchedulingMeetings(val OptBool) {
	s.AllowUpTo25CustomLanguagesWhenSchedulingMeetings = val
}

// SetEnable sets the value of Enable.
func (s *UserSettingsUpdateReq0InMeetingLanguageInterpretation) SetEnable(val OptBool) {
	s.Enable = val
}

// The information about manual captioning settings.
type UserSettingsUpdateReq0InMeetingManualCaptioning struct {
	// This setting allows the host to manually caption or let the host assign a participant to provide
	// manual captioning.
	AllowToType OptBool `json:"allow_to_type"`
	// This setting enables Zoom's [live transcription feature](https://support.zoom.
	// us/hc/en-us/articles/207279736-Managing-closed-captioning-and-live-transcription#h_01FHGGHYJ4457H4GSZY0KM3NSB).
	AutoGeneratedCaptions OptBool `json:"auto_generated_captions"`
	// This setting enables the viewing of full transcripts in the in-meeting side panel.
	FullTranscript OptBool `json:"full_transcript"`
	// The [Enable manual closed captioning](https://support.zoom.
	// us/hc/en-us/articles/207279736-Managing-closed-captioning-and-live-transcription) setting.
	ManualCaptions OptBool `json:"manual_captions"`
	// This setting allows participants to [save closed captions or transcripts](https://support.zoom.
	// us/hc/en-us/articles/360060958752).
	// **Note:** If the `full_transcript` field is set to `false`, participants **cannot** save captions.
	SaveCaptions OptBool `json:"save_captions"`
	// This setting allows the use of an API token to integrate with a [third-party
	// device](https://support.zoom.us/hc/en-us/articles/115002212983) to provide closed captioning.
	ThirdPartyCaptioningService OptBool `json:"third_party_captioning_service"`
}

// GetAllowToType returns the value of AllowToType.
func (s *UserSettingsUpdateReq0InMeetingManualCaptioning) GetAllowToType() OptBool {
	return s.AllowToType
}

// GetAutoGeneratedCaptions returns the value of AutoGeneratedCaptions.
func (s *UserSettingsUpdateReq0InMeetingManualCaptioning) GetAutoGeneratedCaptions() OptBool {
	return s.AutoGeneratedCaptions
}

// GetFullTranscript returns the value of FullTranscript.
func (s *UserSettingsUpdateReq0InMeetingManualCaptioning) GetFullTranscript() OptBool {
	return s.FullTranscript
}

// GetManualCaptions returns the value of ManualCaptions.
func (s *UserSettingsUpdateReq0InMeetingManualCaptioning) GetManualCaptions() OptBool {
	return s.ManualCaptions
}

// GetSaveCaptions returns the value of SaveCaptions.
func (s *UserSettingsUpdateReq0InMeetingManualCaptioning) GetSaveCaptions() OptBool {
	return s.SaveCaptions
}

// GetThirdPartyCaptioningService returns the value of ThirdPartyCaptioningService.
func (s *UserSettingsUpdateReq0InMeetingManualCaptioning) GetThirdPartyCaptioningService() OptBool {
	return s.ThirdPartyCaptioningService
}

// SetAllowToType sets the value of AllowToType.
func (s *UserSettingsUpdateReq0InMeetingManualCaptioning) SetAllowToType(val OptBool) {
	s.AllowToType = val
}

// SetAutoGeneratedCaptions sets the value of AutoGeneratedCaptions.
func (s *UserSettingsUpdateReq0InMeetingManualCaptioning) SetAutoGeneratedCaptions(val OptBool) {
	s.AutoGeneratedCaptions = val
}

// SetFullTranscript sets the value of FullTranscript.
func (s *UserSettingsUpdateReq0InMeetingManualCaptioning) SetFullTranscript(val OptBool) {
	s.FullTranscript = val
}

// SetManualCaptions sets the value of ManualCaptions.
func (s *UserSettingsUpdateReq0InMeetingManualCaptioning) SetManualCaptions(val OptBool) {
	s.ManualCaptions = val
}

// SetSaveCaptions sets the value of SaveCaptions.
func (s *UserSettingsUpdateReq0InMeetingManualCaptioning) SetSaveCaptions(val OptBool) {
	s.SaveCaptions = val
}

// SetThirdPartyCaptioningService sets the value of ThirdPartyCaptioningService.
func (s *UserSettingsUpdateReq0InMeetingManualCaptioning) SetThirdPartyCaptioningService(val OptBool) {
	s.ThirdPartyCaptioningService = val
}

// The information about the account's meeting polling settings.
type UserSettingsUpdateReq0InMeetingMeetingPolling struct {
	// Whether to allow the host to create advanced polls and quizzes. Advanced polls and quizzes include
	// single choice, multiple choice, drop down, matching, short answer, long answer, rank order, and
	// fill-in-the-blank questions. The host can also set the correct answers for quizzes they create.
	AdvancedPolls OptBool `json:"advanced_polls"`
	// Whether to allow alternative hosts to add or edit polls and quizzes.
	AllowAlternativeHostToAddEdit OptBool `json:"allow_alternative_host_to_add_edit"`
	// Whether to require answers to be anonymous.
	RequireAnswersToBeAnonymous OptBool `json:"require_answers_to_be_anonymous"`
	// Whether to allow host to upload an image for each question.
	AllowHostToUploadImage OptBool `json:"allow_host_to_upload_image"`
	// Whether to allow the host to add polls before or during a meeting.
	Enable OptBool `json:"enable"`
}

// GetAdvancedPolls returns the value of AdvancedPolls.
func (s *UserSettingsUpdateReq0InMeetingMeetingPolling) GetAdvancedPolls() OptBool {
	return s.AdvancedPolls
}

// GetAllowAlternativeHostToAddEdit returns the value of AllowAlternativeHostToAddEdit.
func (s *UserSettingsUpdateReq0InMeetingMeetingPolling) GetAllowAlternativeHostToAddEdit() OptBool {
	return s.AllowAlternativeHostToAddEdit
}

// GetRequireAnswersToBeAnonymous returns the value of RequireAnswersToBeAnonymous.
func (s *UserSettingsUpdateReq0InMeetingMeetingPolling) GetRequireAnswersToBeAnonymous() OptBool {
	return s.RequireAnswersToBeAnonymous
}

// GetAllowHostToUploadImage returns the value of AllowHostToUploadImage.
func (s *UserSettingsUpdateReq0InMeetingMeetingPolling) GetAllowHostToUploadImage() OptBool {
	return s.AllowHostToUploadImage
}

// GetEnable returns the value of Enable.
func (s *UserSettingsUpdateReq0InMeetingMeetingPolling) GetEnable() OptBool {
	return s.Enable
}

// SetAdvancedPolls sets the value of AdvancedPolls.
func (s *UserSettingsUpdateReq0InMeetingMeetingPolling) SetAdvancedPolls(val OptBool) {
	s.AdvancedPolls = val
}

// SetAllowAlternativeHostToAddEdit sets the value of AllowAlternativeHostToAddEdit.
func (s *UserSettingsUpdateReq0InMeetingMeetingPolling) SetAllowAlternativeHostToAddEdit(val OptBool) {
	s.AllowAlternativeHostToAddEdit = val
}

// SetRequireAnswersToBeAnonymous sets the value of RequireAnswersToBeAnonymous.
func (s *UserSettingsUpdateReq0InMeetingMeetingPolling) SetRequireAnswersToBeAnonymous(val OptBool) {
	s.RequireAnswersToBeAnonymous = val
}

// SetAllowHostToUploadImage sets the value of AllowHostToUploadImage.
func (s *UserSettingsUpdateReq0InMeetingMeetingPolling) SetAllowHostToUploadImage(val OptBool) {
	s.AllowHostToUploadImage = val
}

// SetEnable sets the value of Enable.
func (s *UserSettingsUpdateReq0InMeetingMeetingPolling) SetEnable(val OptBool) {
	s.Enable = val
}

// This setting allows hosts to assign participants as sign language interpreters who can interpret
// one language into sign language in real-time. Hosts can assign interpreters when scheduling, or
// during the meeting itself. This feature is only available with version 5.11.3 or later.
type UserSettingsUpdateReq0InMeetingSignLanguageInterpretation struct {
	// Whether to allow hosts to assign participants as sign language interpreters who can interpret one
	// language into another in real-time.
	Enable OptBool `json:"enable"`
	// Whether to enable sign language interpretation view by default in scheduler.
	EnableSignLanguageInterpretationByDefault OptBool `json:"enable_sign_language_interpretation_by_default"`
	// A list of system-supported languages.
	Languages []string `json:"languages"`
	// A list of user-defined supported languages.
	CustomLanguages []string `json:"custom_languages"`
}

// GetEnable returns the value of Enable.
func (s *UserSettingsUpdateReq0InMeetingSignLanguageInterpretation) GetEnable() OptBool {
	return s.Enable
}

// GetEnableSignLanguageInterpretationByDefault returns the value of EnableSignLanguageInterpretationByDefault.
func (s *UserSettingsUpdateReq0InMeetingSignLanguageInterpretation) GetEnableSignLanguageInterpretationByDefault() OptBool {
	return s.EnableSignLanguageInterpretationByDefault
}

// GetLanguages returns the value of Languages.
func (s *UserSettingsUpdateReq0InMeetingSignLanguageInterpretation) GetLanguages() []string {
	return s.Languages
}

// GetCustomLanguages returns the value of CustomLanguages.
func (s *UserSettingsUpdateReq0InMeetingSignLanguageInterpretation) GetCustomLanguages() []string {
	return s.CustomLanguages
}

// SetEnable sets the value of Enable.
func (s *UserSettingsUpdateReq0InMeetingSignLanguageInterpretation) SetEnable(val OptBool) {
	s.Enable = val
}

// SetEnableSignLanguageInterpretationByDefault sets the value of EnableSignLanguageInterpretationByDefault.
func (s *UserSettingsUpdateReq0InMeetingSignLanguageInterpretation) SetEnableSignLanguageInterpretationByDefault(val OptBool) {
	s.EnableSignLanguageInterpretationByDefault = val
}

// SetLanguages sets the value of Languages.
func (s *UserSettingsUpdateReq0InMeetingSignLanguageInterpretation) SetLanguages(val []string) {
	s.Languages = val
}

// SetCustomLanguages sets the value of CustomLanguages.
func (s *UserSettingsUpdateReq0InMeetingSignLanguageInterpretation) SetCustomLanguages(val []string) {
	s.CustomLanguages = val
}

// The user's virtual background settings.
type UserSettingsUpdateReq0InMeetingVirtualBackgroundSettings struct {
	// This setting allows the user to upload custom virtual backgrounds.
	AllowUploadCustom OptBool `json:"allow_upload_custom"`
	// This setting allows the use of videos for virtual backgrounds.
	AllowVideos OptBool `json:"allow_videos"`
	// This setting enables virtual backgrounds.
	Enable OptBool `json:"enable"`
	// The information about the virtual background files.
	Files []UserSettingsUpdateReq0InMeetingVirtualBackgroundSettingsFilesItem `json:"files"`
}

// GetAllowUploadCustom returns the value of AllowUploadCustom.
func (s *UserSettingsUpdateReq0InMeetingVirtualBackgroundSettings) GetAllowUploadCustom() OptBool {
	return s.AllowUploadCustom
}

// GetAllowVideos returns the value of AllowVideos.
func (s *UserSettingsUpdateReq0InMeetingVirtualBackgroundSettings) GetAllowVideos() OptBool {
	return s.AllowVideos
}

// GetEnable returns the value of Enable.
func (s *UserSettingsUpdateReq0InMeetingVirtualBackgroundSettings) GetEnable() OptBool {
	return s.Enable
}

// GetFiles returns the value of Files.
func (s *UserSettingsUpdateReq0InMeetingVirtualBackgroundSettings) GetFiles() []UserSettingsUpdateReq0InMeetingVirtualBackgroundSettingsFilesItem {
	return s.Files
}

// SetAllowUploadCustom sets the value of AllowUploadCustom.
func (s *UserSettingsUpdateReq0InMeetingVirtualBackgroundSettings) SetAllowUploadCustom(val OptBool) {
	s.AllowUploadCustom = val
}

// SetAllowVideos sets the value of AllowVideos.
func (s *UserSettingsUpdateReq0InMeetingVirtualBackgroundSettings) SetAllowVideos(val OptBool) {
	s.AllowVideos = val
}

// SetEnable sets the value of Enable.
func (s *UserSettingsUpdateReq0InMeetingVirtualBackgroundSettings) SetEnable(val OptBool) {
	s.Enable = val
}

// SetFiles sets the value of Files.
func (s *UserSettingsUpdateReq0InMeetingVirtualBackgroundSettings) SetFiles(val []UserSettingsUpdateReq0InMeetingVirtualBackgroundSettingsFilesItem) {
	s.Files = val
}

type UserSettingsUpdateReq0InMeetingVirtualBackgroundSettingsFilesItem struct {
	// The virtual background file's ID.
	ID OptString `json:"id"`
	// Whether the file is the default Virtual Background file.
	IsDefault OptBool `json:"is_default"`
	// The virtual background file's name.
	Name OptString `json:"name"`
	// The virtual background file's size, in bytes.
	Size OptInt `json:"size"`
	// The virtual background file's type.
	Type OptString `json:"type"`
}

// GetID returns the value of ID.
func (s *UserSettingsUpdateReq0InMeetingVirtualBackgroundSettingsFilesItem) GetID() OptString {
	return s.ID
}

// GetIsDefault returns the value of IsDefault.
func (s *UserSettingsUpdateReq0InMeetingVirtualBackgroundSettingsFilesItem) GetIsDefault() OptBool {
	return s.IsDefault
}

// GetName returns the value of Name.
func (s *UserSettingsUpdateReq0InMeetingVirtualBackgroundSettingsFilesItem) GetName() OptString {
	return s.Name
}

// GetSize returns the value of Size.
func (s *UserSettingsUpdateReq0InMeetingVirtualBackgroundSettingsFilesItem) GetSize() OptInt {
	return s.Size
}

// GetType returns the value of Type.
func (s *UserSettingsUpdateReq0InMeetingVirtualBackgroundSettingsFilesItem) GetType() OptString {
	return s.Type
}

// SetID sets the value of ID.
func (s *UserSettingsUpdateReq0InMeetingVirtualBackgroundSettingsFilesItem) SetID(val OptString) {
	s.ID = val
}

// SetIsDefault sets the value of IsDefault.
func (s *UserSettingsUpdateReq0InMeetingVirtualBackgroundSettingsFilesItem) SetIsDefault(val OptBool) {
	s.IsDefault = val
}

// SetName sets the value of Name.
func (s *UserSettingsUpdateReq0InMeetingVirtualBackgroundSettingsFilesItem) SetName(val OptString) {
	s.Name = val
}

// SetSize sets the value of Size.
func (s *UserSettingsUpdateReq0InMeetingVirtualBackgroundSettingsFilesItem) SetSize(val OptInt) {
	s.Size = val
}

// SetType sets the value of Type.
func (s *UserSettingsUpdateReq0InMeetingVirtualBackgroundSettingsFilesItem) SetType(val OptString) {
	s.Type = val
}

// The information about the user's webinar chat settings.
type UserSettingsUpdateReq0InMeetingWebinarChat struct {
	// This setting allows webinar attendees to chat with:
	// * `1` &mdash; No one.
	// * `2` &mdash; Host and all panelists.
	// * `3` &mdash; Everyone.
	AllowAttendeesChatWith OptInt `json:"allow_attendees_chat_with"`
	// This setting automatically saves chat messages to a local file on the host's computer when the
	// webinar ends.
	AllowAutoSaveLocalChatFile OptBool `json:"allow_auto_save_local_chat_file"`
	// This setting indicates who the webinar panelists can chat with:
	// * `1` &mdash; Host and all panelists.
	// * `2` &mdash; Everyone.
	AllowPanelistsChatWith OptInt `json:"allow_panelists_chat_with"`
	// This setting allows webinar panelists to send direct messages to other panelists.
	AllowPanelistsSendDirectMessage OptBool `json:"allow_panelists_send_direct_message"`
	// This setting indicates how the webinar attendees can save chats:
	// * `0` &mdash; Attendees cannot save chats.
	// * `1` &mdash; Attendees can only save host and panelist chats.
	// * `2` &mdash; Attendees can save all chats.
	AllowUsersSaveChats OptInt `json:"allow_users_save_chats"`
	// By default, allow webinar attendees to chat with:
	// * `1` &mdash; Host and all panelists.
	// * `2` &mdash; Everyone.
	DefaultAttendeesChatWith OptInt `json:"default_attendees_chat_with"`
	// This setting allows the webinar participants to send chat messages.
	Enable OptBool `json:"enable"`
}

// GetAllowAttendeesChatWith returns the value of AllowAttendeesChatWith.
func (s *UserSettingsUpdateReq0InMeetingWebinarChat) GetAllowAttendeesChatWith() OptInt {
	return s.AllowAttendeesChatWith
}

// GetAllowAutoSaveLocalChatFile returns the value of AllowAutoSaveLocalChatFile.
func (s *UserSettingsUpdateReq0InMeetingWebinarChat) GetAllowAutoSaveLocalChatFile() OptBool {
	return s.AllowAutoSaveLocalChatFile
}

// GetAllowPanelistsChatWith returns the value of AllowPanelistsChatWith.
func (s *UserSettingsUpdateReq0InMeetingWebinarChat) GetAllowPanelistsChatWith() OptInt {
	return s.AllowPanelistsChatWith
}

// GetAllowPanelistsSendDirectMessage returns the value of AllowPanelistsSendDirectMessage.
func (s *UserSettingsUpdateReq0InMeetingWebinarChat) GetAllowPanelistsSendDirectMessage() OptBool {
	return s.AllowPanelistsSendDirectMessage
}

// GetAllowUsersSaveChats returns the value of AllowUsersSaveChats.
func (s *UserSettingsUpdateReq0InMeetingWebinarChat) GetAllowUsersSaveChats() OptInt {
	return s.AllowUsersSaveChats
}

// GetDefaultAttendeesChatWith returns the value of DefaultAttendeesChatWith.
func (s *UserSettingsUpdateReq0InMeetingWebinarChat) GetDefaultAttendeesChatWith() OptInt {
	return s.DefaultAttendeesChatWith
}

// GetEnable returns the value of Enable.
func (s *UserSettingsUpdateReq0InMeetingWebinarChat) GetEnable() OptBool {
	return s.Enable
}

// SetAllowAttendeesChatWith sets the value of AllowAttendeesChatWith.
func (s *UserSettingsUpdateReq0InMeetingWebinarChat) SetAllowAttendeesChatWith(val OptInt) {
	s.AllowAttendeesChatWith = val
}

// SetAllowAutoSaveLocalChatFile sets the value of AllowAutoSaveLocalChatFile.
func (s *UserSettingsUpdateReq0InMeetingWebinarChat) SetAllowAutoSaveLocalChatFile(val OptBool) {
	s.AllowAutoSaveLocalChatFile = val
}

// SetAllowPanelistsChatWith sets the value of AllowPanelistsChatWith.
func (s *UserSettingsUpdateReq0InMeetingWebinarChat) SetAllowPanelistsChatWith(val OptInt) {
	s.AllowPanelistsChatWith = val
}

// SetAllowPanelistsSendDirectMessage sets the value of AllowPanelistsSendDirectMessage.
func (s *UserSettingsUpdateReq0InMeetingWebinarChat) SetAllowPanelistsSendDirectMessage(val OptBool) {
	s.AllowPanelistsSendDirectMessage = val
}

// SetAllowUsersSaveChats sets the value of AllowUsersSaveChats.
func (s *UserSettingsUpdateReq0InMeetingWebinarChat) SetAllowUsersSaveChats(val OptInt) {
	s.AllowUsersSaveChats = val
}

// SetDefaultAttendeesChatWith sets the value of DefaultAttendeesChatWith.
func (s *UserSettingsUpdateReq0InMeetingWebinarChat) SetDefaultAttendeesChatWith(val OptInt) {
	s.DefaultAttendeesChatWith = val
}

// SetEnable sets the value of Enable.
func (s *UserSettingsUpdateReq0InMeetingWebinarChat) SetEnable(val OptBool) {
	s.Enable = val
}

type UserSettingsUpdateReq0InMeetingWebinarLiveStreaming struct {
	// The specific instructions to allow your account's meeting hosts to configure a custom livestream.
	CustomServiceInstructions OptString `json:"custom_service_instructions"`
	// Whether webinar livestreaming is enabled.
	Enable OptBool `json:"enable"`
	// This setting notifies users to watch the livestream. This does not apply to custom RTMP (real-time
	// messaging protocol).
	LiveStreamingReminder OptBool `json:"live_streaming_reminder"`
	// The available livestreaming services:
	// * `facebook`
	// * `workplace_by_facebook`
	// * `youtube`
	// * `custom_live_streaming_service`.
	LiveStreamingService []string `json:"live_streaming_service"`
}

// GetCustomServiceInstructions returns the value of CustomServiceInstructions.
func (s *UserSettingsUpdateReq0InMeetingWebinarLiveStreaming) GetCustomServiceInstructions() OptString {
	return s.CustomServiceInstructions
}

// GetEnable returns the value of Enable.
func (s *UserSettingsUpdateReq0InMeetingWebinarLiveStreaming) GetEnable() OptBool {
	return s.Enable
}

// GetLiveStreamingReminder returns the value of LiveStreamingReminder.
func (s *UserSettingsUpdateReq0InMeetingWebinarLiveStreaming) GetLiveStreamingReminder() OptBool {
	return s.LiveStreamingReminder
}

// GetLiveStreamingService returns the value of LiveStreamingService.
func (s *UserSettingsUpdateReq0InMeetingWebinarLiveStreaming) GetLiveStreamingService() []string {
	return s.LiveStreamingService
}

// SetCustomServiceInstructions sets the value of CustomServiceInstructions.
func (s *UserSettingsUpdateReq0InMeetingWebinarLiveStreaming) SetCustomServiceInstructions(val OptString) {
	s.CustomServiceInstructions = val
}

// SetEnable sets the value of Enable.
func (s *UserSettingsUpdateReq0InMeetingWebinarLiveStreaming) SetEnable(val OptBool) {
	s.Enable = val
}

// SetLiveStreamingReminder sets the value of LiveStreamingReminder.
func (s *UserSettingsUpdateReq0InMeetingWebinarLiveStreaming) SetLiveStreamingReminder(val OptBool) {
	s.LiveStreamingReminder = val
}

// SetLiveStreamingService sets the value of LiveStreamingService.
func (s *UserSettingsUpdateReq0InMeetingWebinarLiveStreaming) SetLiveStreamingService(val []string) {
	s.LiveStreamingService = val
}

// The information about the user's webinar polling settings.
type UserSettingsUpdateReq0InMeetingWebinarPolling struct {
	// Whether to allow the host to create advanced polls and quizzes. Advanced polls and quizzes include
	// single choice, multiple choice, drop down, matching, short answer, long answer, rank order, and
	// fill-in-the-blank questions. The host can also set the correct answers for quizzes they create.
	AdvancedPolls OptBool `json:"advanced_polls"`
	// Whether to allow alternative hosts to add or edit polls and quizzes.
	AllowAlternativeHostToAddEdit OptBool `json:"allow_alternative_host_to_add_edit"`
	// Whether to require answers to be anonymous.
	RequireAnswersToBeAnonymous OptBool `json:"require_answers_to_be_anonymous"`
	// Whether to allow host to upload an image for each question.
	AllowHostToUploadImage OptBool `json:"allow_host_to_upload_image"`
	// This setting allows the host to add polls before or during a webinar.
	Enable OptBool `json:"enable"`
}

// GetAdvancedPolls returns the value of AdvancedPolls.
func (s *UserSettingsUpdateReq0InMeetingWebinarPolling) GetAdvancedPolls() OptBool {
	return s.AdvancedPolls
}

// GetAllowAlternativeHostToAddEdit returns the value of AllowAlternativeHostToAddEdit.
func (s *UserSettingsUpdateReq0InMeetingWebinarPolling) GetAllowAlternativeHostToAddEdit() OptBool {
	return s.AllowAlternativeHostToAddEdit
}

// GetRequireAnswersToBeAnonymous returns the value of RequireAnswersToBeAnonymous.
func (s *UserSettingsUpdateReq0InMeetingWebinarPolling) GetRequireAnswersToBeAnonymous() OptBool {
	return s.RequireAnswersToBeAnonymous
}

// GetAllowHostToUploadImage returns the value of AllowHostToUploadImage.
func (s *UserSettingsUpdateReq0InMeetingWebinarPolling) GetAllowHostToUploadImage() OptBool {
	return s.AllowHostToUploadImage
}

// GetEnable returns the value of Enable.
func (s *UserSettingsUpdateReq0InMeetingWebinarPolling) GetEnable() OptBool {
	return s.Enable
}

// SetAdvancedPolls sets the value of AdvancedPolls.
func (s *UserSettingsUpdateReq0InMeetingWebinarPolling) SetAdvancedPolls(val OptBool) {
	s.AdvancedPolls = val
}

// SetAllowAlternativeHostToAddEdit sets the value of AllowAlternativeHostToAddEdit.
func (s *UserSettingsUpdateReq0InMeetingWebinarPolling) SetAllowAlternativeHostToAddEdit(val OptBool) {
	s.AllowAlternativeHostToAddEdit = val
}

// SetRequireAnswersToBeAnonymous sets the value of RequireAnswersToBeAnonymous.
func (s *UserSettingsUpdateReq0InMeetingWebinarPolling) SetRequireAnswersToBeAnonymous(val OptBool) {
	s.RequireAnswersToBeAnonymous = val
}

// SetAllowHostToUploadImage sets the value of AllowHostToUploadImage.
func (s *UserSettingsUpdateReq0InMeetingWebinarPolling) SetAllowHostToUploadImage(val OptBool) {
	s.AllowHostToUploadImage = val
}

// SetEnable sets the value of Enable.
func (s *UserSettingsUpdateReq0InMeetingWebinarPolling) SetEnable(val OptBool) {
	s.Enable = val
}

type UserSettingsUpdateReq0Profile struct {
	RecordingStorageLocation OptUserSettingsUpdateReq0ProfileRecordingStorageLocation `json:"recording_storage_location"`
}

// GetRecordingStorageLocation returns the value of RecordingStorageLocation.
func (s *UserSettingsUpdateReq0Profile) GetRecordingStorageLocation() OptUserSettingsUpdateReq0ProfileRecordingStorageLocation {
	return s.RecordingStorageLocation
}

// SetRecordingStorageLocation sets the value of RecordingStorageLocation.
func (s *UserSettingsUpdateReq0Profile) SetRecordingStorageLocation(val OptUserSettingsUpdateReq0ProfileRecordingStorageLocation) {
	s.RecordingStorageLocation = val
}

type UserSettingsUpdateReq0ProfileRecordingStorageLocation struct {
	// Users can choose the country to store their recorded content. Content can include meeting, webinar,
	//  and phone recordings, as well as voicemail, transcripts, and custom greeting prompts. See
	// [Managing the Communications Content storage location](https://support.zoom.
	// us/hc/en-us/articles/360050781131) for details.
	// Provide abbreviated country codes as the value for this field. See the [Countries abbreviation
	// list](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#countries) for
	// details.
	AllowedValues []string `json:"allowed_values"`
	// The abbreviated country code.
	Value OptString `json:"value"`
}

// GetAllowedValues returns the value of AllowedValues.
func (s *UserSettingsUpdateReq0ProfileRecordingStorageLocation) GetAllowedValues() []string {
	return s.AllowedValues
}

// GetValue returns the value of Value.
func (s *UserSettingsUpdateReq0ProfileRecordingStorageLocation) GetValue() OptString {
	return s.Value
}

// SetAllowedValues sets the value of AllowedValues.
func (s *UserSettingsUpdateReq0ProfileRecordingStorageLocation) SetAllowedValues(val []string) {
	s.AllowedValues = val
}

// SetValue sets the value of Value.
func (s *UserSettingsUpdateReq0ProfileRecordingStorageLocation) SetValue(val OptString) {
	s.Value = val
}

type UserSettingsUpdateReq0Recording struct {
	// This setting asks the host to confirm the disclaimer.
	AskHostToConfirmDisclaimer OptBool `json:"ask_host_to_confirm_disclaimer"`
	// This field can be used if `recording_disclaimer` is set to true. This field indicates whether or
	// not you would like to ask participants for consent when a recording starts. The value can be one
	// of the following:
	// * `true`: Ask participants for consent when a recording starts.
	// * `false`: Do not ask participants for consent when a recording starts.
	AskParticipantsToConsentDisclaimer OptBool `json:"ask_participants_to_consent_disclaimer"`
	// The auto delete cloud recordings setting.
	AutoDeleteCmr OptBool `json:"auto_delete_cmr"`
	// When the `auto_delete_cmr` value is `true`, this value is the number of days before the
	// auto-deletion of cloud recordings:
	// * `30` &mdash; 30 days.
	// * `60` &mdash; 60 days.
	// * `90` &mdash; 90 days.
	// * `120` &mdash; 120 days.
	AutoDeleteCmrDays OptInt `json:"auto_delete_cmr_days"`
	// The account's [**Record active speaker, gallery view and shared screen
	// separately**](https://support.zoom.
	// us/hc/en-us/articles/360060316092-Changing-basic-and-advanced-cloud-recording-settings#h_01F4CYJTCTXNS2MXH00W9EFG6R) settings.
	RecordFilesSeparately OptUserSettingsUpdateReq0RecordingRecordFilesSeparately `json:"record_files_separately"`
	// This setting allows you to display the participants' names in the recording.
	DisplayParticipantName OptBool `json:"display_participant_name"`
	// This setting records the thumbnails of the presenter when they are sharing their screen.
	RecordingThumbnails OptBool `json:"recording_thumbnails"`
	// This setting optimizes recordings for a third-party video editor. This may increase the file size
	// and the time it takes to generate recording files.
	OptimizeRecordingFor3rdPartyVideoEditor OptBool `json:"optimize_recording_for_3rd_party_video_editor"`
	// This setting enables the [recording highlights](https://support.zoom.
	// us/hc/en-us/articles/360060802432) feature.
	//
	// Deprecated: schema marks this property as deprecated.
	RecordingHighlight OptBool `json:"recording_highlight"`
	// This setting saves the panelist chat to the recording. This setting saves messages sent by
	// panelists during a webinar to either all panelists or all panelists and attendees to the recording.
	SavePanelistChat OptBool `json:"save_panelist_chat"`
	// This setting saves the poll results shared during the meeting or webinar. This also includes poll
	// results shared during the meeting or webinar.
	SavePollResults OptBool `json:"save_poll_results"`
	// This setting saves [closed captions](https://support.zoom.us/hc/en-us/articles/207279736) as a VTT
	// (Video Track Text) file.
	SaveCloseCaption OptBool `json:"save_close_caption"`
	// The automatic recording:
	// `local` - Record on local.
	// `cloud` - Record on cloud.
	// `none` - Disabled.
	AutoRecording OptString `json:"auto_recording"`
	// The cloud recording.
	CloudRecording OptBool `json:"cloud_recording"`
	// The host can pause or stop the auto recording in the cloud.
	HostPauseStopRecording OptBool `json:"host_pause_stop_recording"`
	// The setting to allow cloud recording access only from specific IP address ranges.
	IPAddressAccessControl OptUserSettingsUpdateReq0RecordingIPAddressAccessControl `json:"ip_address_access_control"`
	// The local recording.
	LocalRecording OptBool `json:"local_recording"`
	// This setting records one audio file for all participants.
	RecordAudioFile OptBool `json:"record_audio_file"`
	// This setting records the gallery view.
	RecordGalleryView OptBool `json:"record_gallery_view"`
	// This setting records the active speaker view.
	RecordSpeakerView OptBool `json:"record_speaker_view"`
	// The audio transcript.
	RecordingAudioTranscript OptBool `json:"recording_audio_transcript"`
	// This setting shows a disclaimer to participants before a recording starts.
	RecordingDisclaimer OptBool `json:"recording_disclaimer"`
	// By selecting this option, your recording will have meeting smart chapters, and next steps. You are
	// directing Zoom to access, process, and use your account's recording data for the purpose of
	// analysis and insights.
	SmartRecording OptUserSettingsUpdateReq0RecordingSmartRecording `json:"smart_recording"`
	// This object represents the minimum passcode requirements set for recordings via Account Recording
	// Settings.
	RecordingPasswordRequirement OptUserSettingsUpdateReq0RecordingRecordingPasswordRequirement `json:"recording_password_requirement"`
	// This setting saves the chat text from the meeting.
	SaveChatText OptBool `json:"save_chat_text"`
	// The show timestamp on the video.
	ShowTimestamp OptBool `json:"show_timestamp"`
}

// GetAskHostToConfirmDisclaimer returns the value of AskHostToConfirmDisclaimer.
func (s *UserSettingsUpdateReq0Recording) GetAskHostToConfirmDisclaimer() OptBool {
	return s.AskHostToConfirmDisclaimer
}

// GetAskParticipantsToConsentDisclaimer returns the value of AskParticipantsToConsentDisclaimer.
func (s *UserSettingsUpdateReq0Recording) GetAskParticipantsToConsentDisclaimer() OptBool {
	return s.AskParticipantsToConsentDisclaimer
}

// GetAutoDeleteCmr returns the value of AutoDeleteCmr.
func (s *UserSettingsUpdateReq0Recording) GetAutoDeleteCmr() OptBool {
	return s.AutoDeleteCmr
}

// GetAutoDeleteCmrDays returns the value of AutoDeleteCmrDays.
func (s *UserSettingsUpdateReq0Recording) GetAutoDeleteCmrDays() OptInt {
	return s.AutoDeleteCmrDays
}

// GetRecordFilesSeparately returns the value of RecordFilesSeparately.
func (s *UserSettingsUpdateReq0Recording) GetRecordFilesSeparately() OptUserSettingsUpdateReq0RecordingRecordFilesSeparately {
	return s.RecordFilesSeparately
}

// GetDisplayParticipantName returns the value of DisplayParticipantName.
func (s *UserSettingsUpdateReq0Recording) GetDisplayParticipantName() OptBool {
	return s.DisplayParticipantName
}

// GetRecordingThumbnails returns the value of RecordingThumbnails.
func (s *UserSettingsUpdateReq0Recording) GetRecordingThumbnails() OptBool {
	return s.RecordingThumbnails
}

// GetOptimizeRecordingFor3rdPartyVideoEditor returns the value of OptimizeRecordingFor3rdPartyVideoEditor.
func (s *UserSettingsUpdateReq0Recording) GetOptimizeRecordingFor3rdPartyVideoEditor() OptBool {
	return s.OptimizeRecordingFor3rdPartyVideoEditor
}

// GetRecordingHighlight returns the value of RecordingHighlight.
func (s *UserSettingsUpdateReq0Recording) GetRecordingHighlight() OptBool {
	return s.RecordingHighlight
}

// GetSavePanelistChat returns the value of SavePanelistChat.
func (s *UserSettingsUpdateReq0Recording) GetSavePanelistChat() OptBool {
	return s.SavePanelistChat
}

// GetSavePollResults returns the value of SavePollResults.
func (s *UserSettingsUpdateReq0Recording) GetSavePollResults() OptBool {
	return s.SavePollResults
}

// GetSaveCloseCaption returns the value of SaveCloseCaption.
func (s *UserSettingsUpdateReq0Recording) GetSaveCloseCaption() OptBool {
	return s.SaveCloseCaption
}

// GetAutoRecording returns the value of AutoRecording.
func (s *UserSettingsUpdateReq0Recording) GetAutoRecording() OptString {
	return s.AutoRecording
}

// GetCloudRecording returns the value of CloudRecording.
func (s *UserSettingsUpdateReq0Recording) GetCloudRecording() OptBool {
	return s.CloudRecording
}

// GetHostPauseStopRecording returns the value of HostPauseStopRecording.
func (s *UserSettingsUpdateReq0Recording) GetHostPauseStopRecording() OptBool {
	return s.HostPauseStopRecording
}

// GetIPAddressAccessControl returns the value of IPAddressAccessControl.
func (s *UserSettingsUpdateReq0Recording) GetIPAddressAccessControl() OptUserSettingsUpdateReq0RecordingIPAddressAccessControl {
	return s.IPAddressAccessControl
}

// GetLocalRecording returns the value of LocalRecording.
func (s *UserSettingsUpdateReq0Recording) GetLocalRecording() OptBool {
	return s.LocalRecording
}

// GetRecordAudioFile returns the value of RecordAudioFile.
func (s *UserSettingsUpdateReq0Recording) GetRecordAudioFile() OptBool {
	return s.RecordAudioFile
}

// GetRecordGalleryView returns the value of RecordGalleryView.
func (s *UserSettingsUpdateReq0Recording) GetRecordGalleryView() OptBool {
	return s.RecordGalleryView
}

// GetRecordSpeakerView returns the value of RecordSpeakerView.
func (s *UserSettingsUpdateReq0Recording) GetRecordSpeakerView() OptBool {
	return s.RecordSpeakerView
}

// GetRecordingAudioTranscript returns the value of RecordingAudioTranscript.
func (s *UserSettingsUpdateReq0Recording) GetRecordingAudioTranscript() OptBool {
	return s.RecordingAudioTranscript
}

// GetRecordingDisclaimer returns the value of RecordingDisclaimer.
func (s *UserSettingsUpdateReq0Recording) GetRecordingDisclaimer() OptBool {
	return s.RecordingDisclaimer
}

// GetSmartRecording returns the value of SmartRecording.
func (s *UserSettingsUpdateReq0Recording) GetSmartRecording() OptUserSettingsUpdateReq0RecordingSmartRecording {
	return s.SmartRecording
}

// GetRecordingPasswordRequirement returns the value of RecordingPasswordRequirement.
func (s *UserSettingsUpdateReq0Recording) GetRecordingPasswordRequirement() OptUserSettingsUpdateReq0RecordingRecordingPasswordRequirement {
	return s.RecordingPasswordRequirement
}

// GetSaveChatText returns the value of SaveChatText.
func (s *UserSettingsUpdateReq0Recording) GetSaveChatText() OptBool {
	return s.SaveChatText
}

// GetShowTimestamp returns the value of ShowTimestamp.
func (s *UserSettingsUpdateReq0Recording) GetShowTimestamp() OptBool {
	return s.ShowTimestamp
}

// SetAskHostToConfirmDisclaimer sets the value of AskHostToConfirmDisclaimer.
func (s *UserSettingsUpdateReq0Recording) SetAskHostToConfirmDisclaimer(val OptBool) {
	s.AskHostToConfirmDisclaimer = val
}

// SetAskParticipantsToConsentDisclaimer sets the value of AskParticipantsToConsentDisclaimer.
func (s *UserSettingsUpdateReq0Recording) SetAskParticipantsToConsentDisclaimer(val OptBool) {
	s.AskParticipantsToConsentDisclaimer = val
}

// SetAutoDeleteCmr sets the value of AutoDeleteCmr.
func (s *UserSettingsUpdateReq0Recording) SetAutoDeleteCmr(val OptBool) {
	s.AutoDeleteCmr = val
}

// SetAutoDeleteCmrDays sets the value of AutoDeleteCmrDays.
func (s *UserSettingsUpdateReq0Recording) SetAutoDeleteCmrDays(val OptInt) {
	s.AutoDeleteCmrDays = val
}

// SetRecordFilesSeparately sets the value of RecordFilesSeparately.
func (s *UserSettingsUpdateReq0Recording) SetRecordFilesSeparately(val OptUserSettingsUpdateReq0RecordingRecordFilesSeparately) {
	s.RecordFilesSeparately = val
}

// SetDisplayParticipantName sets the value of DisplayParticipantName.
func (s *UserSettingsUpdateReq0Recording) SetDisplayParticipantName(val OptBool) {
	s.DisplayParticipantName = val
}

// SetRecordingThumbnails sets the value of RecordingThumbnails.
func (s *UserSettingsUpdateReq0Recording) SetRecordingThumbnails(val OptBool) {
	s.RecordingThumbnails = val
}

// SetOptimizeRecordingFor3rdPartyVideoEditor sets the value of OptimizeRecordingFor3rdPartyVideoEditor.
func (s *UserSettingsUpdateReq0Recording) SetOptimizeRecordingFor3rdPartyVideoEditor(val OptBool) {
	s.OptimizeRecordingFor3rdPartyVideoEditor = val
}

// SetRecordingHighlight sets the value of RecordingHighlight.
func (s *UserSettingsUpdateReq0Recording) SetRecordingHighlight(val OptBool) {
	s.RecordingHighlight = val
}

// SetSavePanelistChat sets the value of SavePanelistChat.
func (s *UserSettingsUpdateReq0Recording) SetSavePanelistChat(val OptBool) {
	s.SavePanelistChat = val
}

// SetSavePollResults sets the value of SavePollResults.
func (s *UserSettingsUpdateReq0Recording) SetSavePollResults(val OptBool) {
	s.SavePollResults = val
}

// SetSaveCloseCaption sets the value of SaveCloseCaption.
func (s *UserSettingsUpdateReq0Recording) SetSaveCloseCaption(val OptBool) {
	s.SaveCloseCaption = val
}

// SetAutoRecording sets the value of AutoRecording.
func (s *UserSettingsUpdateReq0Recording) SetAutoRecording(val OptString) {
	s.AutoRecording = val
}

// SetCloudRecording sets the value of CloudRecording.
func (s *UserSettingsUpdateReq0Recording) SetCloudRecording(val OptBool) {
	s.CloudRecording = val
}

// SetHostPauseStopRecording sets the value of HostPauseStopRecording.
func (s *UserSettingsUpdateReq0Recording) SetHostPauseStopRecording(val OptBool) {
	s.HostPauseStopRecording = val
}

// SetIPAddressAccessControl sets the value of IPAddressAccessControl.
func (s *UserSettingsUpdateReq0Recording) SetIPAddressAccessControl(val OptUserSettingsUpdateReq0RecordingIPAddressAccessControl) {
	s.IPAddressAccessControl = val
}

// SetLocalRecording sets the value of LocalRecording.
func (s *UserSettingsUpdateReq0Recording) SetLocalRecording(val OptBool) {
	s.LocalRecording = val
}

// SetRecordAudioFile sets the value of RecordAudioFile.
func (s *UserSettingsUpdateReq0Recording) SetRecordAudioFile(val OptBool) {
	s.RecordAudioFile = val
}

// SetRecordGalleryView sets the value of RecordGalleryView.
func (s *UserSettingsUpdateReq0Recording) SetRecordGalleryView(val OptBool) {
	s.RecordGalleryView = val
}

// SetRecordSpeakerView sets the value of RecordSpeakerView.
func (s *UserSettingsUpdateReq0Recording) SetRecordSpeakerView(val OptBool) {
	s.RecordSpeakerView = val
}

// SetRecordingAudioTranscript sets the value of RecordingAudioTranscript.
func (s *UserSettingsUpdateReq0Recording) SetRecordingAudioTranscript(val OptBool) {
	s.RecordingAudioTranscript = val
}

// SetRecordingDisclaimer sets the value of RecordingDisclaimer.
func (s *UserSettingsUpdateReq0Recording) SetRecordingDisclaimer(val OptBool) {
	s.RecordingDisclaimer = val
}

// SetSmartRecording sets the value of SmartRecording.
func (s *UserSettingsUpdateReq0Recording) SetSmartRecording(val OptUserSettingsUpdateReq0RecordingSmartRecording) {
	s.SmartRecording = val
}

// SetRecordingPasswordRequirement sets the value of RecordingPasswordRequirement.
func (s *UserSettingsUpdateReq0Recording) SetRecordingPasswordRequirement(val OptUserSettingsUpdateReq0RecordingRecordingPasswordRequirement) {
	s.RecordingPasswordRequirement = val
}

// SetSaveChatText sets the value of SaveChatText.
func (s *UserSettingsUpdateReq0Recording) SetSaveChatText(val OptBool) {
	s.SaveChatText = val
}

// SetShowTimestamp sets the value of ShowTimestamp.
func (s *UserSettingsUpdateReq0Recording) SetShowTimestamp(val OptBool) {
	s.ShowTimestamp = val
}

// The setting to allow cloud recording access only from specific IP address ranges.
type UserSettingsUpdateReq0RecordingIPAddressAccessControl struct {
	// If set to `true`, the cloud recordings of this account can only be accessed by the IP addresses
	// defined in the `ip_addresses_or_ranges` property.
	Enable OptBool `json:"enable"`
	// The IP addresses or ranges that have access to the cloud recordings. Separate multiple IP ranges
	// with comma. Use n.n.n.n, n.n.n.n/n or n.n.n.n - n.n.n.n syntax where n is a number.
	// Example: `46.33.24.184, 48.99.100.2/25` or `200.181.108.17 - 220.181.108.157`.
	IPAddressesOrRanges OptString `json:"ip_addresses_or_ranges"`
}

// GetEnable returns the value of Enable.
func (s *UserSettingsUpdateReq0RecordingIPAddressAccessControl) GetEnable() OptBool {
	return s.Enable
}

// GetIPAddressesOrRanges returns the value of IPAddressesOrRanges.
func (s *UserSettingsUpdateReq0RecordingIPAddressAccessControl) GetIPAddressesOrRanges() OptString {
	return s.IPAddressesOrRanges
}

// SetEnable sets the value of Enable.
func (s *UserSettingsUpdateReq0RecordingIPAddressAccessControl) SetEnable(val OptBool) {
	s.Enable = val
}

// SetIPAddressesOrRanges sets the value of IPAddressesOrRanges.
func (s *UserSettingsUpdateReq0RecordingIPAddressAccessControl) SetIPAddressesOrRanges(val OptString) {
	s.IPAddressesOrRanges = val
}

// The account's [**Record active speaker, gallery view and shared screen
// separately**](https://support.zoom.
// us/hc/en-us/articles/360060316092-Changing-basic-and-advanced-cloud-recording-settings#h_01F4CYJTCTXNS2MXH00W9EFG6R) settings.
type UserSettingsUpdateReq0RecordingRecordFilesSeparately struct {
	// The record the active speaker only setting.
	ActiveSpeaker OptBool `json:"active_speaker"`
	// The record the gallery view only setting.
	GalleryView OptBool `json:"gallery_view"`
	// The record the shared screen only setting.
	SharedScreen OptBool `json:"shared_screen"`
}

// GetActiveSpeaker returns the value of ActiveSpeaker.
func (s *UserSettingsUpdateReq0RecordingRecordFilesSeparately) GetActiveSpeaker() OptBool {
	return s.ActiveSpeaker
}

// GetGalleryView returns the value of GalleryView.
func (s *UserSettingsUpdateReq0RecordingRecordFilesSeparately) GetGalleryView() OptBool {
	return s.GalleryView
}

// GetSharedScreen returns the value of SharedScreen.
func (s *UserSettingsUpdateReq0RecordingRecordFilesSeparately) GetSharedScreen() OptBool {
	return s.SharedScreen
}

// SetActiveSpeaker sets the value of ActiveSpeaker.
func (s *UserSettingsUpdateReq0RecordingRecordFilesSeparately) SetActiveSpeaker(val OptBool) {
	s.ActiveSpeaker = val
}

// SetGalleryView sets the value of GalleryView.
func (s *UserSettingsUpdateReq0RecordingRecordFilesSeparately) SetGalleryView(val OptBool) {
	s.GalleryView = val
}

// SetSharedScreen sets the value of SharedScreen.
func (s *UserSettingsUpdateReq0RecordingRecordFilesSeparately) SetSharedScreen(val OptBool) {
	s.SharedScreen = val
}

// This object represents the minimum passcode requirements set for recordings via Account Recording
// Settings.
type UserSettingsUpdateReq0RecordingRecordingPasswordRequirement struct {
	// The passcode must contain at least one alphabetical letter (a, b, c..).
	HaveLetter OptBool `json:"have_letter"`
	// The passcode must contain at least one number(1, 2, 3..).
	HaveNumber OptBool `json:"have_number"`
	// The passcode must contain at least one special character(!, @, #..).
	HaveSpecialCharacter OptBool `json:"have_special_character"`
	// The minimum required length for the passcode.
	Length OptInt `json:"length"`
	// The passcode must contain only numeric characters.
	OnlyAllowNumeric OptBool `json:"only_allow_numeric"`
}

// GetHaveLetter returns the value of HaveLetter.
func (s *UserSettingsUpdateReq0RecordingRecordingPasswordRequirement) GetHaveLetter() OptBool {
	return s.HaveLetter
}

// GetHaveNumber returns the value of HaveNumber.
func (s *UserSettingsUpdateReq0RecordingRecordingPasswordRequirement) GetHaveNumber() OptBool {
	return s.HaveNumber
}

// GetHaveSpecialCharacter returns the value of HaveSpecialCharacter.
func (s *UserSettingsUpdateReq0RecordingRecordingPasswordRequirement) GetHaveSpecialCharacter() OptBool {
	return s.HaveSpecialCharacter
}

// GetLength returns the value of Length.
func (s *UserSettingsUpdateReq0RecordingRecordingPasswordRequirement) GetLength() OptInt {
	return s.Length
}

// GetOnlyAllowNumeric returns the value of OnlyAllowNumeric.
func (s *UserSettingsUpdateReq0RecordingRecordingPasswordRequirement) GetOnlyAllowNumeric() OptBool {
	return s.OnlyAllowNumeric
}

// SetHaveLetter sets the value of HaveLetter.
func (s *UserSettingsUpdateReq0RecordingRecordingPasswordRequirement) SetHaveLetter(val OptBool) {
	s.HaveLetter = val
}

// SetHaveNumber sets the value of HaveNumber.
func (s *UserSettingsUpdateReq0RecordingRecordingPasswordRequirement) SetHaveNumber(val OptBool) {
	s.HaveNumber = val
}

// SetHaveSpecialCharacter sets the value of HaveSpecialCharacter.
func (s *UserSettingsUpdateReq0RecordingRecordingPasswordRequirement) SetHaveSpecialCharacter(val OptBool) {
	s.HaveSpecialCharacter = val
}

// SetLength sets the value of Length.
func (s *UserSettingsUpdateReq0RecordingRecordingPasswordRequirement) SetLength(val OptInt) {
	s.Length = val
}

// SetOnlyAllowNumeric sets the value of OnlyAllowNumeric.
func (s *UserSettingsUpdateReq0RecordingRecordingPasswordRequirement) SetOnlyAllowNumeric(val OptBool) {
	s.OnlyAllowNumeric = val
}

// By selecting this option, your recording will have meeting smart chapters, and next steps. You are
// directing Zoom to access, process, and use your account's recording data for the purpose of
// analysis and insights.
type UserSettingsUpdateReq0RecordingSmartRecording struct {
	// By selecting this option, meeting details in the audio transcript will be highlighted. Hosts can
	// modify highlighted sections and generate a video summary (highlighted sections may have a 3-second
	// offset) based on these sections. The summary is for informational purposes only and may not be
	// complete.
	CreateRecordingHighlights OptBool `json:"create_recording_highlights"`
	// By selecting this option, your recording will have chapters with overview. Hosts can edit the
	// chapters.
	CreateSmartChapters OptBool `json:"create_smart_chapters"`
	// By selecting this option, there will be a summary of actions to take after the recorded meeting.
	CreateNextSteps OptBool `json:"create_next_steps"`
}

// GetCreateRecordingHighlights returns the value of CreateRecordingHighlights.
func (s *UserSettingsUpdateReq0RecordingSmartRecording) GetCreateRecordingHighlights() OptBool {
	return s.CreateRecordingHighlights
}

// GetCreateSmartChapters returns the value of CreateSmartChapters.
func (s *UserSettingsUpdateReq0RecordingSmartRecording) GetCreateSmartChapters() OptBool {
	return s.CreateSmartChapters
}

// GetCreateNextSteps returns the value of CreateNextSteps.
func (s *UserSettingsUpdateReq0RecordingSmartRecording) GetCreateNextSteps() OptBool {
	return s.CreateNextSteps
}

// SetCreateRecordingHighlights sets the value of CreateRecordingHighlights.
func (s *UserSettingsUpdateReq0RecordingSmartRecording) SetCreateRecordingHighlights(val OptBool) {
	s.CreateRecordingHighlights = val
}

// SetCreateSmartChapters sets the value of CreateSmartChapters.
func (s *UserSettingsUpdateReq0RecordingSmartRecording) SetCreateSmartChapters(val OptBool) {
	s.CreateSmartChapters = val
}

// SetCreateNextSteps sets the value of CreateNextSteps.
func (s *UserSettingsUpdateReq0RecordingSmartRecording) SetCreateNextSteps(val OptBool) {
	s.CreateNextSteps = val
}

type UserSettingsUpdateReq0ScheduleMeeting struct {
	// This setting determines how participants can join the audio portion of the meeting:
	// `both` - Telephony and VoIP.
	// `telephony` - Audio PSTN telephony only.
	// `voip` - VoIP only.
	// `thirdParty` - Third party audio conference.
	AudioType OptString `json:"audio_type"`
	// The passcode for already scheduled meetings.
	DefaultPasswordForScheduledMeetings OptString `json:"default_password_for_scheduled_meetings"`
	// This setting encrypts the meeting passcode and includes the join meeting link to allow
	// participants to join with just one click without having to enter the passcode.
	EmbedPasswordInJoinLink OptBool `json:"embed_password_in_join_link"`
	// This setting requires a passcode for personal meetings if attendees can join before host.
	ForcePmiJbhPassword OptBool `json:"force_pmi_jbh_password"`
	// The start meetings with host video on setting.
	HostVideo OptBool `json:"host_video"`
	// This setting joins the meeting before the host arrives.
	JoinBeforeHost OptBool `json:"join_before_host"`
	// The Account wide meeting/webinar [passcode requirements](https://support.zoom.
	// us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
	MeetingPasswordRequirement OptUserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement `json:"meeting_password_requirement"`
	// The start meetings with participants video on setting.
	ParticipantsVideo OptBool `json:"participants_video"`
	// The personal meeting setting.
	// `true`: Indicates that the **&quot;Enable [Personal Meeting ID (PMI)](https://marketplace.zoom.
	// us/docs/api-reference/using-zoom-apis#understanding-personal-meeting-id-pmi)&quot;** setting is
	// turned on. Users can choose to use a PMI for their meetings.
	// `false`: Indicates that the **&quot;Enable Personal Meeting ID&quot;** setting is [turned
	// off](https://support.zoom.
	// us/hc/en-us/articles/201362843-Personal-meeting-ID-PMI-and-personal-link#h_aa0335c8-3b06-41bc-bc1f-a8b84ef17f2a). If this setting is disabled (`false`), meetings that were scheduled with a PMI will be invalid. Scheduled meetings must be manually updated.
	// For Zoom Phone only: If a user has been assigned a desk phone, **&quot;Elevate to Zoom
	// Meeting&quot;** on desk phone will be disabled.
	PersonalMeeting OptBool `json:"personal_meeting"`
	// The PMI passcode.
	PmiPassword OptString `json:"pmi_password"`
	// This setting generates and requires the passcode for participants joining by phone.
	PstnPasswordProtected OptBool `json:"pstn_password_protected"`
	// This setting requires a passcode for instant meetings. If you use a PMI for your instant meetings,
	// this option will be disabled. This setting is always enabled for free accounts and Pro accounts
	// with a single host and cannot be modified for these accounts.
	RequirePasswordForInstantMeetings OptBool `json:"require_password_for_instant_meetings"`
	// This setting requires a passcode for Personal Meeting ID (PMI). This setting is always enabled for
	// free accounts and Pro accounts with a single host and cannot be modified for these accounts.
	RequirePasswordForPmiMeetings OptString `json:"require_password_for_pmi_meetings"`
	// This setting requires a passcode for meetings that have already been scheduled.
	RequirePasswordForScheduledMeetings OptBool `json:"require_password_for_scheduled_meetings"`
	// This setting requires a passcode when scheduling new meetings. This setting is always enabled for
	// free accounts and Pro accounts with a single host and cannot be modified for these accounts.
	RequirePasswordForSchedulingNewMeetings OptBool `json:"require_password_for_scheduling_new_meetings"`
	// This setting indicates the use of a [Personal Meeting ID (PMI)](https://developers.zoom.
	// us/docs/api/rest/using-zoom-apis/#understanding-personal-meeting-id-pmi) when starting an instant
	// meeting.
	UsePmiForInstantMeetings OptBool `json:"use_pmi_for_instant_meetings"`
	// This setting indicates the use of a [Personal Meeting ID (PMI)](https://developers.zoom.
	// us/docs/api/rest/using-zoom-apis/#understanding-personal-meeting-id-pmi) when scheduling a meeting.
	UsePmiForScheduledMeetings OptBool `json:"use_pmi_for_scheduled_meetings"`
}

// GetAudioType returns the value of AudioType.
func (s *UserSettingsUpdateReq0ScheduleMeeting) GetAudioType() OptString {
	return s.AudioType
}

// GetDefaultPasswordForScheduledMeetings returns the value of DefaultPasswordForScheduledMeetings.
func (s *UserSettingsUpdateReq0ScheduleMeeting) GetDefaultPasswordForScheduledMeetings() OptString {
	return s.DefaultPasswordForScheduledMeetings
}

// GetEmbedPasswordInJoinLink returns the value of EmbedPasswordInJoinLink.
func (s *UserSettingsUpdateReq0ScheduleMeeting) GetEmbedPasswordInJoinLink() OptBool {
	return s.EmbedPasswordInJoinLink
}

// GetForcePmiJbhPassword returns the value of ForcePmiJbhPassword.
func (s *UserSettingsUpdateReq0ScheduleMeeting) GetForcePmiJbhPassword() OptBool {
	return s.ForcePmiJbhPassword
}

// GetHostVideo returns the value of HostVideo.
func (s *UserSettingsUpdateReq0ScheduleMeeting) GetHostVideo() OptBool {
	return s.HostVideo
}

// GetJoinBeforeHost returns the value of JoinBeforeHost.
func (s *UserSettingsUpdateReq0ScheduleMeeting) GetJoinBeforeHost() OptBool {
	return s.JoinBeforeHost
}

// GetMeetingPasswordRequirement returns the value of MeetingPasswordRequirement.
func (s *UserSettingsUpdateReq0ScheduleMeeting) GetMeetingPasswordRequirement() OptUserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement {
	return s.MeetingPasswordRequirement
}

// GetParticipantsVideo returns the value of ParticipantsVideo.
func (s *UserSettingsUpdateReq0ScheduleMeeting) GetParticipantsVideo() OptBool {
	return s.ParticipantsVideo
}

// GetPersonalMeeting returns the value of PersonalMeeting.
func (s *UserSettingsUpdateReq0ScheduleMeeting) GetPersonalMeeting() OptBool {
	return s.PersonalMeeting
}

// GetPmiPassword returns the value of PmiPassword.
func (s *UserSettingsUpdateReq0ScheduleMeeting) GetPmiPassword() OptString {
	return s.PmiPassword
}

// GetPstnPasswordProtected returns the value of PstnPasswordProtected.
func (s *UserSettingsUpdateReq0ScheduleMeeting) GetPstnPasswordProtected() OptBool {
	return s.PstnPasswordProtected
}

// GetRequirePasswordForInstantMeetings returns the value of RequirePasswordForInstantMeetings.
func (s *UserSettingsUpdateReq0ScheduleMeeting) GetRequirePasswordForInstantMeetings() OptBool {
	return s.RequirePasswordForInstantMeetings
}

// GetRequirePasswordForPmiMeetings returns the value of RequirePasswordForPmiMeetings.
func (s *UserSettingsUpdateReq0ScheduleMeeting) GetRequirePasswordForPmiMeetings() OptString {
	return s.RequirePasswordForPmiMeetings
}

// GetRequirePasswordForScheduledMeetings returns the value of RequirePasswordForScheduledMeetings.
func (s *UserSettingsUpdateReq0ScheduleMeeting) GetRequirePasswordForScheduledMeetings() OptBool {
	return s.RequirePasswordForScheduledMeetings
}

// GetRequirePasswordForSchedulingNewMeetings returns the value of RequirePasswordForSchedulingNewMeetings.
func (s *UserSettingsUpdateReq0ScheduleMeeting) GetRequirePasswordForSchedulingNewMeetings() OptBool {
	return s.RequirePasswordForSchedulingNewMeetings
}

// GetUsePmiForInstantMeetings returns the value of UsePmiForInstantMeetings.
func (s *UserSettingsUpdateReq0ScheduleMeeting) GetUsePmiForInstantMeetings() OptBool {
	return s.UsePmiForInstantMeetings
}

// GetUsePmiForScheduledMeetings returns the value of UsePmiForScheduledMeetings.
func (s *UserSettingsUpdateReq0ScheduleMeeting) GetUsePmiForScheduledMeetings() OptBool {
	return s.UsePmiForScheduledMeetings
}

// SetAudioType sets the value of AudioType.
func (s *UserSettingsUpdateReq0ScheduleMeeting) SetAudioType(val OptString) {
	s.AudioType = val
}

// SetDefaultPasswordForScheduledMeetings sets the value of DefaultPasswordForScheduledMeetings.
func (s *UserSettingsUpdateReq0ScheduleMeeting) SetDefaultPasswordForScheduledMeetings(val OptString) {
	s.DefaultPasswordForScheduledMeetings = val
}

// SetEmbedPasswordInJoinLink sets the value of EmbedPasswordInJoinLink.
func (s *UserSettingsUpdateReq0ScheduleMeeting) SetEmbedPasswordInJoinLink(val OptBool) {
	s.EmbedPasswordInJoinLink = val
}

// SetForcePmiJbhPassword sets the value of ForcePmiJbhPassword.
func (s *UserSettingsUpdateReq0ScheduleMeeting) SetForcePmiJbhPassword(val OptBool) {
	s.ForcePmiJbhPassword = val
}

// SetHostVideo sets the value of HostVideo.
func (s *UserSettingsUpdateReq0ScheduleMeeting) SetHostVideo(val OptBool) {
	s.HostVideo = val
}

// SetJoinBeforeHost sets the value of JoinBeforeHost.
func (s *UserSettingsUpdateReq0ScheduleMeeting) SetJoinBeforeHost(val OptBool) {
	s.JoinBeforeHost = val
}

// SetMeetingPasswordRequirement sets the value of MeetingPasswordRequirement.
func (s *UserSettingsUpdateReq0ScheduleMeeting) SetMeetingPasswordRequirement(val OptUserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement) {
	s.MeetingPasswordRequirement = val
}

// SetParticipantsVideo sets the value of ParticipantsVideo.
func (s *UserSettingsUpdateReq0ScheduleMeeting) SetParticipantsVideo(val OptBool) {
	s.ParticipantsVideo = val
}

// SetPersonalMeeting sets the value of PersonalMeeting.
func (s *UserSettingsUpdateReq0ScheduleMeeting) SetPersonalMeeting(val OptBool) {
	s.PersonalMeeting = val
}

// SetPmiPassword sets the value of PmiPassword.
func (s *UserSettingsUpdateReq0ScheduleMeeting) SetPmiPassword(val OptString) {
	s.PmiPassword = val
}

// SetPstnPasswordProtected sets the value of PstnPasswordProtected.
func (s *UserSettingsUpdateReq0ScheduleMeeting) SetPstnPasswordProtected(val OptBool) {
	s.PstnPasswordProtected = val
}

// SetRequirePasswordForInstantMeetings sets the value of RequirePasswordForInstantMeetings.
func (s *UserSettingsUpdateReq0ScheduleMeeting) SetRequirePasswordForInstantMeetings(val OptBool) {
	s.RequirePasswordForInstantMeetings = val
}

// SetRequirePasswordForPmiMeetings sets the value of RequirePasswordForPmiMeetings.
func (s *UserSettingsUpdateReq0ScheduleMeeting) SetRequirePasswordForPmiMeetings(val OptString) {
	s.RequirePasswordForPmiMeetings = val
}

// SetRequirePasswordForScheduledMeetings sets the value of RequirePasswordForScheduledMeetings.
func (s *UserSettingsUpdateReq0ScheduleMeeting) SetRequirePasswordForScheduledMeetings(val OptBool) {
	s.RequirePasswordForScheduledMeetings = val
}

// SetRequirePasswordForSchedulingNewMeetings sets the value of RequirePasswordForSchedulingNewMeetings.
func (s *UserSettingsUpdateReq0ScheduleMeeting) SetRequirePasswordForSchedulingNewMeetings(val OptBool) {
	s.RequirePasswordForSchedulingNewMeetings = val
}

// SetUsePmiForInstantMeetings sets the value of UsePmiForInstantMeetings.
func (s *UserSettingsUpdateReq0ScheduleMeeting) SetUsePmiForInstantMeetings(val OptBool) {
	s.UsePmiForInstantMeetings = val
}

// SetUsePmiForScheduledMeetings sets the value of UsePmiForScheduledMeetings.
func (s *UserSettingsUpdateReq0ScheduleMeeting) SetUsePmiForScheduledMeetings(val OptBool) {
	s.UsePmiForScheduledMeetings = val
}

// The Account wide meeting/webinar [passcode requirements](https://support.zoom.
// us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
type UserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement struct {
	// This setting specifies the max length of consecutive characters(abcde...) that can be used in a
	// passcode.
	// If you set the value of this field to `0`, no restriction will be applied on consecutive
	// characters.
	// If you would like to set this restriction, you can specify a number between 4 and 8 that define
	// the maximum allowed length for consecutive characters in a passcode.
	// The max allowed length will be `n-1` where `n` refers to the value you provide for this field.
	// For instance, if you provide `4` as the value, there can only be a maximum of `3` consecutive
	// characters in a passcode(example: abc1x@8fdh).
	ConsecutiveCharactersLength OptInt `json:"consecutive_characters_length"`
	// The passcode must contain at least 1 letter (such as a,b,c...).
	HaveLetter OptBool `json:"have_letter"`
	// The passcode must contain at least one number (such as 1,2,3...).
	HaveNumber OptBool `json:"have_number"`
	// The passcode must have at least one special character (!,@,#...).
	HaveSpecialCharacter OptBool `json:"have_special_character"`
	// The passcode must include both uppercase and lowercase characters.
	HaveUpperAndLowerCharacters OptBool `json:"have_upper_and_lower_characters"`
	// The minimum length that the meeting or webinar passcode must have.
	Length OptInt `json:"length"`
	// The passcode must only contain numbers and no other characters.
	OnlyAllowNumeric OptBool `json:"only_allow_numeric"`
	// This setting informs users if the provided passcode is weak.
	WeakEnhanceDetection OptBool `json:"weak_enhance_detection"`
}

// GetConsecutiveCharactersLength returns the value of ConsecutiveCharactersLength.
func (s *UserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement) GetConsecutiveCharactersLength() OptInt {
	return s.ConsecutiveCharactersLength
}

// GetHaveLetter returns the value of HaveLetter.
func (s *UserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement) GetHaveLetter() OptBool {
	return s.HaveLetter
}

// GetHaveNumber returns the value of HaveNumber.
func (s *UserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement) GetHaveNumber() OptBool {
	return s.HaveNumber
}

// GetHaveSpecialCharacter returns the value of HaveSpecialCharacter.
func (s *UserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement) GetHaveSpecialCharacter() OptBool {
	return s.HaveSpecialCharacter
}

// GetHaveUpperAndLowerCharacters returns the value of HaveUpperAndLowerCharacters.
func (s *UserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement) GetHaveUpperAndLowerCharacters() OptBool {
	return s.HaveUpperAndLowerCharacters
}

// GetLength returns the value of Length.
func (s *UserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement) GetLength() OptInt {
	return s.Length
}

// GetOnlyAllowNumeric returns the value of OnlyAllowNumeric.
func (s *UserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement) GetOnlyAllowNumeric() OptBool {
	return s.OnlyAllowNumeric
}

// GetWeakEnhanceDetection returns the value of WeakEnhanceDetection.
func (s *UserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement) GetWeakEnhanceDetection() OptBool {
	return s.WeakEnhanceDetection
}

// SetConsecutiveCharactersLength sets the value of ConsecutiveCharactersLength.
func (s *UserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement) SetConsecutiveCharactersLength(val OptInt) {
	s.ConsecutiveCharactersLength = val
}

// SetHaveLetter sets the value of HaveLetter.
func (s *UserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement) SetHaveLetter(val OptBool) {
	s.HaveLetter = val
}

// SetHaveNumber sets the value of HaveNumber.
func (s *UserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement) SetHaveNumber(val OptBool) {
	s.HaveNumber = val
}

// SetHaveSpecialCharacter sets the value of HaveSpecialCharacter.
func (s *UserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement) SetHaveSpecialCharacter(val OptBool) {
	s.HaveSpecialCharacter = val
}

// SetHaveUpperAndLowerCharacters sets the value of HaveUpperAndLowerCharacters.
func (s *UserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement) SetHaveUpperAndLowerCharacters(val OptBool) {
	s.HaveUpperAndLowerCharacters = val
}

// SetLength sets the value of Length.
func (s *UserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement) SetLength(val OptInt) {
	s.Length = val
}

// SetOnlyAllowNumeric sets the value of OnlyAllowNumeric.
func (s *UserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement) SetOnlyAllowNumeric(val OptBool) {
	s.OnlyAllowNumeric = val
}

// SetWeakEnhanceDetection sets the value of WeakEnhanceDetection.
func (s *UserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement) SetWeakEnhanceDetection(val OptBool) {
	s.WeakEnhanceDetection = val
}

type UserSettingsUpdateReq0Telephony struct {
	// The third-party audio conference info.
	AudioConferenceInfo OptString `json:"audio_conference_info"`
	// This setting shows the international numbers link on the invitation email.
	ShowInternationalNumbersLink OptBool `json:"show_international_numbers_link"`
	// This setting indicates where most of the participants call into or call from during a meeting.
	TelephonyRegions OptUserSettingsUpdateReq0TelephonyTelephonyRegions `json:"telephony_regions"`
	// The third-party audio conference.
	ThirdPartyAudio OptBool `json:"third_party_audio"`
}

// GetAudioConferenceInfo returns the value of AudioConferenceInfo.
func (s *UserSettingsUpdateReq0Telephony) GetAudioConferenceInfo() OptString {
	return s.AudioConferenceInfo
}

// GetShowInternationalNumbersLink returns the value of ShowInternationalNumbersLink.
func (s *UserSettingsUpdateReq0Telephony) GetShowInternationalNumbersLink() OptBool {
	return s.ShowInternationalNumbersLink
}

// GetTelephonyRegions returns the value of TelephonyRegions.
func (s *UserSettingsUpdateReq0Telephony) GetTelephonyRegions() OptUserSettingsUpdateReq0TelephonyTelephonyRegions {
	return s.TelephonyRegions
}

// GetThirdPartyAudio returns the value of ThirdPartyAudio.
func (s *UserSettingsUpdateReq0Telephony) GetThirdPartyAudio() OptBool {
	return s.ThirdPartyAudio
}

// SetAudioConferenceInfo sets the value of AudioConferenceInfo.
func (s *UserSettingsUpdateReq0Telephony) SetAudioConferenceInfo(val OptString) {
	s.AudioConferenceInfo = val
}

// SetShowInternationalNumbersLink sets the value of ShowInternationalNumbersLink.
func (s *UserSettingsUpdateReq0Telephony) SetShowInternationalNumbersLink(val OptBool) {
	s.ShowInternationalNumbersLink = val
}

// SetTelephonyRegions sets the value of TelephonyRegions.
func (s *UserSettingsUpdateReq0Telephony) SetTelephonyRegions(val OptUserSettingsUpdateReq0TelephonyTelephonyRegions) {
	s.TelephonyRegions = val
}

// SetThirdPartyAudio sets the value of ThirdPartyAudio.
func (s *UserSettingsUpdateReq0Telephony) SetThirdPartyAudio(val OptBool) {
	s.ThirdPartyAudio = val
}

// This setting indicates where most of the participants call into or call from during a meeting.
type UserSettingsUpdateReq0TelephonyTelephonyRegions struct {
	// The account's selected telephony regions that indicate where most participants call into or call
	// from during a meeting.
	SelectionValues OptString `json:"selection_values"`
}

// GetSelectionValues returns the value of SelectionValues.
func (s *UserSettingsUpdateReq0TelephonyTelephonyRegions) GetSelectionValues() OptString {
	return s.SelectionValues
}

// SetSelectionValues sets the value of SelectionValues.
func (s *UserSettingsUpdateReq0TelephonyTelephonyRegions) SetSelectionValues(val OptString) {
	s.SelectionValues = val
}

// Account Settings: TSP.
type UserSettingsUpdateReq0Tsp struct {
	// The call out.
	CallOut OptBool `json:"call_out"`
	// The call out countries or regions setting.
	CallOutCountries []UserSettingsUpdateReq0TspCallOutCountriesItem `json:"call_out_countries"`
	// This setting shows the international numbers link on the invitation email.
	ShowInternationalNumbersLink OptBool `json:"show_international_numbers_link"`
}

// GetCallOut returns the value of CallOut.
func (s *UserSettingsUpdateReq0Tsp) GetCallOut() OptBool {
	return s.CallOut
}

// GetCallOutCountries returns the value of CallOutCountries.
func (s *UserSettingsUpdateReq0Tsp) GetCallOutCountries() []UserSettingsUpdateReq0TspCallOutCountriesItem {
	return s.CallOutCountries
}

// GetShowInternationalNumbersLink returns the value of ShowInternationalNumbersLink.
func (s *UserSettingsUpdateReq0Tsp) GetShowInternationalNumbersLink() OptBool {
	return s.ShowInternationalNumbersLink
}

// SetCallOut sets the value of CallOut.
func (s *UserSettingsUpdateReq0Tsp) SetCallOut(val OptBool) {
	s.CallOut = val
}

// SetCallOutCountries sets the value of CallOutCountries.
func (s *UserSettingsUpdateReq0Tsp) SetCallOutCountries(val []UserSettingsUpdateReq0TspCallOutCountriesItem) {
	s.CallOutCountries = val
}

// SetShowInternationalNumbersLink sets the value of ShowInternationalNumbersLink.
func (s *UserSettingsUpdateReq0Tsp) SetShowInternationalNumbersLink(val OptBool) {
	s.ShowInternationalNumbersLink = val
}

type UserSettingsUpdateReq0TspCallOutCountriesItem struct{}

type UserSettingsUpdateReq1 struct {
	// The meeting authentication options.
	AuthenticationOption OptUserSettingsUpdateReq1AuthenticationOption `json:"authentication_option"`
	// Only authenticated users can join meetings.
	MeetingAuthentication OptBool `json:"meeting_authentication"`
}

// GetAuthenticationOption returns the value of AuthenticationOption.
func (s *UserSettingsUpdateReq1) GetAuthenticationOption() OptUserSettingsUpdateReq1AuthenticationOption {
	return s.AuthenticationOption
}

// GetMeetingAuthentication returns the value of MeetingAuthentication.
func (s *UserSettingsUpdateReq1) GetMeetingAuthentication() OptBool {
	return s.MeetingAuthentication
}

// SetAuthenticationOption sets the value of AuthenticationOption.
func (s *UserSettingsUpdateReq1) SetAuthenticationOption(val OptUserSettingsUpdateReq1AuthenticationOption) {
	s.AuthenticationOption = val
}

// SetMeetingAuthentication sets the value of MeetingAuthentication.
func (s *UserSettingsUpdateReq1) SetMeetingAuthentication(val OptBool) {
	s.MeetingAuthentication = val
}

// The meeting authentication options.
type UserSettingsUpdateReq1AuthenticationOption struct {
	// The authentication action.
	Action OptString `json:"action"`
	// The authentication default option.
	DefaultOption OptBool `json:"default_option"`
	// The authentication domains.
	Domains OptString `json:"domains"`
	// The authentication ID.
	ID OptString `json:"id"`
	// The authentication name.
	Name OptString `json:"name"`
	// The authentication type. Specify one of the following authentication types for the authentication
	// profile:
	// * `enforce_login`: This option allows any users to join the meeting or webinar, as long as they
	// are signed into their Zoom account.
	// * `enforce_login_with_domains`: This option, allows you to specify a rule so that only those Zoom
	// users whose email addresses contain a certain domain, can join the meeting or webinar. You can
	// either add multiple domains using a comma in between and/or use a wildcard for listing domains.
	// * `enforce_login_with_same_account`: This option allows users to join the meeting or webinar with
	// the same Zoom account.
	Type OptString `json:"type"`
}

// GetAction returns the value of Action.
func (s *UserSettingsUpdateReq1AuthenticationOption) GetAction() OptString {
	return s.Action
}

// GetDefaultOption returns the value of DefaultOption.
func (s *UserSettingsUpdateReq1AuthenticationOption) GetDefaultOption() OptBool {
	return s.DefaultOption
}

// GetDomains returns the value of Domains.
func (s *UserSettingsUpdateReq1AuthenticationOption) GetDomains() OptString {
	return s.Domains
}

// GetID returns the value of ID.
func (s *UserSettingsUpdateReq1AuthenticationOption) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *UserSettingsUpdateReq1AuthenticationOption) GetName() OptString {
	return s.Name
}

// GetType returns the value of Type.
func (s *UserSettingsUpdateReq1AuthenticationOption) GetType() OptString {
	return s.Type
}

// SetAction sets the value of Action.
func (s *UserSettingsUpdateReq1AuthenticationOption) SetAction(val OptString) {
	s.Action = val
}

// SetDefaultOption sets the value of DefaultOption.
func (s *UserSettingsUpdateReq1AuthenticationOption) SetDefaultOption(val OptBool) {
	s.DefaultOption = val
}

// SetDomains sets the value of Domains.
func (s *UserSettingsUpdateReq1AuthenticationOption) SetDomains(val OptString) {
	s.Domains = val
}

// SetID sets the value of ID.
func (s *UserSettingsUpdateReq1AuthenticationOption) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *UserSettingsUpdateReq1AuthenticationOption) SetName(val OptString) {
	s.Name = val
}

// SetType sets the value of Type.
func (s *UserSettingsUpdateReq1AuthenticationOption) SetType(val OptString) {
	s.Type = val
}

type UserSettingsUpdateReq2 struct {
	// The authentication options.
	AuthenticationOption OptUserSettingsUpdateReq2AuthenticationOption `json:"authentication_option"`
	// Only authenticated users can view cloud recordings.
	RecordingAuthentication OptBool `json:"recording_authentication"`
}

// GetAuthenticationOption returns the value of AuthenticationOption.
func (s *UserSettingsUpdateReq2) GetAuthenticationOption() OptUserSettingsUpdateReq2AuthenticationOption {
	return s.AuthenticationOption
}

// GetRecordingAuthentication returns the value of RecordingAuthentication.
func (s *UserSettingsUpdateReq2) GetRecordingAuthentication() OptBool {
	return s.RecordingAuthentication
}

// SetAuthenticationOption sets the value of AuthenticationOption.
func (s *UserSettingsUpdateReq2) SetAuthenticationOption(val OptUserSettingsUpdateReq2AuthenticationOption) {
	s.AuthenticationOption = val
}

// SetRecordingAuthentication sets the value of RecordingAuthentication.
func (s *UserSettingsUpdateReq2) SetRecordingAuthentication(val OptBool) {
	s.RecordingAuthentication = val
}

// The authentication options.
type UserSettingsUpdateReq2AuthenticationOption struct {
	// The authentication action.
	Action OptString `json:"action"`
	// The authentication default option.
	DefaultOption OptBool `json:"default_option"`
	// The authentication domains.
	Domains OptString `json:"domains"`
	// The authentication ID.
	ID OptString `json:"id"`
	// The authentication name.
	Name OptString `json:"name"`
	// The authentication type.
	Type OptString `json:"type"`
}

// GetAction returns the value of Action.
func (s *UserSettingsUpdateReq2AuthenticationOption) GetAction() OptString {
	return s.Action
}

// GetDefaultOption returns the value of DefaultOption.
func (s *UserSettingsUpdateReq2AuthenticationOption) GetDefaultOption() OptBool {
	return s.DefaultOption
}

// GetDomains returns the value of Domains.
func (s *UserSettingsUpdateReq2AuthenticationOption) GetDomains() OptString {
	return s.Domains
}

// GetID returns the value of ID.
func (s *UserSettingsUpdateReq2AuthenticationOption) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *UserSettingsUpdateReq2AuthenticationOption) GetName() OptString {
	return s.Name
}

// GetType returns the value of Type.
func (s *UserSettingsUpdateReq2AuthenticationOption) GetType() OptString {
	return s.Type
}

// SetAction sets the value of Action.
func (s *UserSettingsUpdateReq2AuthenticationOption) SetAction(val OptString) {
	s.Action = val
}

// SetDefaultOption sets the value of DefaultOption.
func (s *UserSettingsUpdateReq2AuthenticationOption) SetDefaultOption(val OptBool) {
	s.DefaultOption = val
}

// SetDomains sets the value of Domains.
func (s *UserSettingsUpdateReq2AuthenticationOption) SetDomains(val OptString) {
	s.Domains = val
}

// SetID sets the value of ID.
func (s *UserSettingsUpdateReq2AuthenticationOption) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *UserSettingsUpdateReq2AuthenticationOption) SetName(val OptString) {
	s.Name = val
}

// SetType sets the value of Type.
func (s *UserSettingsUpdateReq2AuthenticationOption) SetType(val OptString) {
	s.Type = val
}

// The updated meeting and webinar security settings.
type UserSettingsUpdateReq3 struct {
	MeetingSecurity OptUserSettingsUpdateReq3MeetingSecurity `json:"meeting_security"`
}

// GetMeetingSecurity returns the value of MeetingSecurity.
func (s *UserSettingsUpdateReq3) GetMeetingSecurity() OptUserSettingsUpdateReq3MeetingSecurity {
	return s.MeetingSecurity
}

// SetMeetingSecurity sets the value of MeetingSecurity.
func (s *UserSettingsUpdateReq3) SetMeetingSecurity(val OptUserSettingsUpdateReq3MeetingSecurity) {
	s.MeetingSecurity = val
}

type UserSettingsUpdateReq3MeetingSecurity struct {
	// Whether to require that all meetings are secured with at least one security option.
	// This setting can only be disabled by Enterprise, ISV, Business (with more than 100 licenses), and
	// Education accounts.
	AutoSecurity OptBool `json:"auto_security"`
	// Whether to block users in specific domains from joining meetings and webinars.
	BlockUserDomain OptBool `json:"block_user_domain"`
	// The domain to block, up to 20 domains. For example, the `*.example.com` domain.
	BlockUserDomainList []string `json:"block_user_domain_list"`
	// Whether the meeting passcode will be encrypted and included in the invitation link. The provided
	// link will allow participants to join the meeting without having to enter the passcode.
	EmbedPasswordInJoinLink OptBool `json:"embed_password_in_join_link"`
	// The type of encryption to use when starting a meeting:
	// * `enhanced_encryption` &mdash; Use enhanced encryption. Encryption data is stored in the cloud.
	// * `e2ee` &mdash; End-to-end encryption. The encryption key is stored on the local device and
	// cannot be obtained by anyone else. Enabling E2EE also [**disables** certain
	// features](https://support.zoom.us/hc/en-us/articles/360048660871), such as cloud recording, live
	// streaming, and allowing participants to join before the host.
	EncryptionType OptString `json:"encryption_type"`
	// Whether to enable end-to-end encryption for meetings. If enabled, you can specify the type of
	// encryption in the `encryption_type` field.
	EndToEndEncryptedMeetings OptBool `json:"end_to_end_encrypted_meetings"`
	// Whether all instant and scheduled meetings that users can join via client or Zoom Rooms systems
	// are passcode-protected. [Personal Meeting ID (PMI)](https://support.zoom.
	// us/hc/en-us/articles/203276937) meetings are **not** included in this setting.
	MeetingPassword OptBool `json:"meeting_password"`
	// The information about the meeting and webinar [passcode requirements](https://support.zoom.
	// us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
	MeetingPasswordRequirement OptUserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement `json:"meeting_password_requirement"`
	// Whether to specify that only authenticated users can join the meeting from the web client.
	OnlyAuthenticatedCanJoinFromWebclient OptBool `json:"only_authenticated_can_join_from_webclient"`
	// Whether to require a passcode for participants joining by phone.
	// If enabled and the meeting is passcode-protected, a numeric passcode is required for participants
	// to join by phone. For meetings with alphanumeric passcodes, a numeric passcode will be generated.
	PhonePassword OptBool `json:"phone_password"`
	// Whether all Personal Meeting ID (PMI) meetings that users can join via client or Zoom Rooms
	// systems are passcode-protected.
	PmiPassword OptBool `json:"pmi_password"`
	// Whether to require a passcode for meetings that have already been scheduled.
	RequirePasswordForScheduledMeeting OptBool `json:"require_password_for_scheduled_meeting"`
	// Whether to require a passcode for webinars that have already been scheduled.
	RequirePasswordForScheduledWebinar OptBool `json:"require_password_for_scheduled_webinar"`
	// Whether participants are placed in the [**Waiting Room**](https://support.zoom.
	// us/hc/en-us/articles/115000332726-Waiting-Room) when they join a meeting.
	// If the **Waiting Room** feature is enabled, the [**Allow participants to join before
	// host**](https://support.zoom.
	// us/hc/en-us/articles/202828525-Allow-participants-to-join-before-host) setting is automatically
	// disabled.
	WaitingRoom OptBool `json:"waiting_room"`
	// The information about the waiting room settings.
	WaitingRoomSettings OptUserSettingsUpdateReq3MeetingSecurityWaitingRoomSettings `json:"waiting_room_settings"`
	// Whether to generate a passcode when scheduling webinars. Participants must use the generated
	// passcode to join the scheduled webinar.
	WebinarPassword OptBool `json:"webinar_password"`
}

// GetAutoSecurity returns the value of AutoSecurity.
func (s *UserSettingsUpdateReq3MeetingSecurity) GetAutoSecurity() OptBool {
	return s.AutoSecurity
}

// GetBlockUserDomain returns the value of BlockUserDomain.
func (s *UserSettingsUpdateReq3MeetingSecurity) GetBlockUserDomain() OptBool {
	return s.BlockUserDomain
}

// GetBlockUserDomainList returns the value of BlockUserDomainList.
func (s *UserSettingsUpdateReq3MeetingSecurity) GetBlockUserDomainList() []string {
	return s.BlockUserDomainList
}

// GetEmbedPasswordInJoinLink returns the value of EmbedPasswordInJoinLink.
func (s *UserSettingsUpdateReq3MeetingSecurity) GetEmbedPasswordInJoinLink() OptBool {
	return s.EmbedPasswordInJoinLink
}

// GetEncryptionType returns the value of EncryptionType.
func (s *UserSettingsUpdateReq3MeetingSecurity) GetEncryptionType() OptString {
	return s.EncryptionType
}

// GetEndToEndEncryptedMeetings returns the value of EndToEndEncryptedMeetings.
func (s *UserSettingsUpdateReq3MeetingSecurity) GetEndToEndEncryptedMeetings() OptBool {
	return s.EndToEndEncryptedMeetings
}

// GetMeetingPassword returns the value of MeetingPassword.
func (s *UserSettingsUpdateReq3MeetingSecurity) GetMeetingPassword() OptBool {
	return s.MeetingPassword
}

// GetMeetingPasswordRequirement returns the value of MeetingPasswordRequirement.
func (s *UserSettingsUpdateReq3MeetingSecurity) GetMeetingPasswordRequirement() OptUserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement {
	return s.MeetingPasswordRequirement
}

// GetOnlyAuthenticatedCanJoinFromWebclient returns the value of OnlyAuthenticatedCanJoinFromWebclient.
func (s *UserSettingsUpdateReq3MeetingSecurity) GetOnlyAuthenticatedCanJoinFromWebclient() OptBool {
	return s.OnlyAuthenticatedCanJoinFromWebclient
}

// GetPhonePassword returns the value of PhonePassword.
func (s *UserSettingsUpdateReq3MeetingSecurity) GetPhonePassword() OptBool {
	return s.PhonePassword
}

// GetPmiPassword returns the value of PmiPassword.
func (s *UserSettingsUpdateReq3MeetingSecurity) GetPmiPassword() OptBool {
	return s.PmiPassword
}

// GetRequirePasswordForScheduledMeeting returns the value of RequirePasswordForScheduledMeeting.
func (s *UserSettingsUpdateReq3MeetingSecurity) GetRequirePasswordForScheduledMeeting() OptBool {
	return s.RequirePasswordForScheduledMeeting
}

// GetRequirePasswordForScheduledWebinar returns the value of RequirePasswordForScheduledWebinar.
func (s *UserSettingsUpdateReq3MeetingSecurity) GetRequirePasswordForScheduledWebinar() OptBool {
	return s.RequirePasswordForScheduledWebinar
}

// GetWaitingRoom returns the value of WaitingRoom.
func (s *UserSettingsUpdateReq3MeetingSecurity) GetWaitingRoom() OptBool {
	return s.WaitingRoom
}

// GetWaitingRoomSettings returns the value of WaitingRoomSettings.
func (s *UserSettingsUpdateReq3MeetingSecurity) GetWaitingRoomSettings() OptUserSettingsUpdateReq3MeetingSecurityWaitingRoomSettings {
	return s.WaitingRoomSettings
}

// GetWebinarPassword returns the value of WebinarPassword.
func (s *UserSettingsUpdateReq3MeetingSecurity) GetWebinarPassword() OptBool {
	return s.WebinarPassword
}

// SetAutoSecurity sets the value of AutoSecurity.
func (s *UserSettingsUpdateReq3MeetingSecurity) SetAutoSecurity(val OptBool) {
	s.AutoSecurity = val
}

// SetBlockUserDomain sets the value of BlockUserDomain.
func (s *UserSettingsUpdateReq3MeetingSecurity) SetBlockUserDomain(val OptBool) {
	s.BlockUserDomain = val
}

// SetBlockUserDomainList sets the value of BlockUserDomainList.
func (s *UserSettingsUpdateReq3MeetingSecurity) SetBlockUserDomainList(val []string) {
	s.BlockUserDomainList = val
}

// SetEmbedPasswordInJoinLink sets the value of EmbedPasswordInJoinLink.
func (s *UserSettingsUpdateReq3MeetingSecurity) SetEmbedPasswordInJoinLink(val OptBool) {
	s.EmbedPasswordInJoinLink = val
}

// SetEncryptionType sets the value of EncryptionType.
func (s *UserSettingsUpdateReq3MeetingSecurity) SetEncryptionType(val OptString) {
	s.EncryptionType = val
}

// SetEndToEndEncryptedMeetings sets the value of EndToEndEncryptedMeetings.
func (s *UserSettingsUpdateReq3MeetingSecurity) SetEndToEndEncryptedMeetings(val OptBool) {
	s.EndToEndEncryptedMeetings = val
}

// SetMeetingPassword sets the value of MeetingPassword.
func (s *UserSettingsUpdateReq3MeetingSecurity) SetMeetingPassword(val OptBool) {
	s.MeetingPassword = val
}

// SetMeetingPasswordRequirement sets the value of MeetingPasswordRequirement.
func (s *UserSettingsUpdateReq3MeetingSecurity) SetMeetingPasswordRequirement(val OptUserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement) {
	s.MeetingPasswordRequirement = val
}

// SetOnlyAuthenticatedCanJoinFromWebclient sets the value of OnlyAuthenticatedCanJoinFromWebclient.
func (s *UserSettingsUpdateReq3MeetingSecurity) SetOnlyAuthenticatedCanJoinFromWebclient(val OptBool) {
	s.OnlyAuthenticatedCanJoinFromWebclient = val
}

// SetPhonePassword sets the value of PhonePassword.
func (s *UserSettingsUpdateReq3MeetingSecurity) SetPhonePassword(val OptBool) {
	s.PhonePassword = val
}

// SetPmiPassword sets the value of PmiPassword.
func (s *UserSettingsUpdateReq3MeetingSecurity) SetPmiPassword(val OptBool) {
	s.PmiPassword = val
}

// SetRequirePasswordForScheduledMeeting sets the value of RequirePasswordForScheduledMeeting.
func (s *UserSettingsUpdateReq3MeetingSecurity) SetRequirePasswordForScheduledMeeting(val OptBool) {
	s.RequirePasswordForScheduledMeeting = val
}

// SetRequirePasswordForScheduledWebinar sets the value of RequirePasswordForScheduledWebinar.
func (s *UserSettingsUpdateReq3MeetingSecurity) SetRequirePasswordForScheduledWebinar(val OptBool) {
	s.RequirePasswordForScheduledWebinar = val
}

// SetWaitingRoom sets the value of WaitingRoom.
func (s *UserSettingsUpdateReq3MeetingSecurity) SetWaitingRoom(val OptBool) {
	s.WaitingRoom = val
}

// SetWaitingRoomSettings sets the value of WaitingRoomSettings.
func (s *UserSettingsUpdateReq3MeetingSecurity) SetWaitingRoomSettings(val OptUserSettingsUpdateReq3MeetingSecurityWaitingRoomSettings) {
	s.WaitingRoomSettings = val
}

// SetWebinarPassword sets the value of WebinarPassword.
func (s *UserSettingsUpdateReq3MeetingSecurity) SetWebinarPassword(val OptBool) {
	s.WebinarPassword = val
}

// The information about the meeting and webinar [passcode requirements](https://support.zoom.
// us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
type UserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement struct {
	// The maximum length of consecutive characters (for example, `abcdef`) allowed in a passcode:
	// * `4` through `8` &mdash; The maximum consecutive characters length. The length is `n` minus `1`,
	// where `n` is the provided value. For example, if you provide the `4` value, there can only be a
	// maximum of `3` consecutive characters in a passcode (for example, `abc1x@8fdh`).
	// * `0` &mdash; Do not apply a consecutive character restriction.
	ConsecutiveCharactersLength OptInt `json:"consecutive_characters_length"`
	// Whether the passcode must contain at least one letter character.
	HaveLetter OptBool `json:"have_letter"`
	// Whether the passcode must contain at least one numeric character.
	HaveNumber OptBool `json:"have_number"`
	// Whether the passcode must contain at least one special character. For example, `!`, `@`, and/or
	// `#` characters.
	HaveSpecialCharacter OptBool `json:"have_special_character"`
	// Whether the passcode must include uppercase and lowercase characters.
	HaveUpperAndLowerCharacters OptBool `json:"have_upper_and_lower_characters"`
	// The passcode's minimum length.
	Length OptInt `json:"length"`
	// Whether the passcode must contain **only** numeric characters.
	OnlyAllowNumeric OptBool `json:"only_allow_numeric"`
	// Whether users will be informed when the provided passcode is weak.
	WeakEnhanceDetection OptBool `json:"weak_enhance_detection"`
}

// GetConsecutiveCharactersLength returns the value of ConsecutiveCharactersLength.
func (s *UserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement) GetConsecutiveCharactersLength() OptInt {
	return s.ConsecutiveCharactersLength
}

// GetHaveLetter returns the value of HaveLetter.
func (s *UserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement) GetHaveLetter() OptBool {
	return s.HaveLetter
}

// GetHaveNumber returns the value of HaveNumber.
func (s *UserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement) GetHaveNumber() OptBool {
	return s.HaveNumber
}

// GetHaveSpecialCharacter returns the value of HaveSpecialCharacter.
func (s *UserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement) GetHaveSpecialCharacter() OptBool {
	return s.HaveSpecialCharacter
}

// GetHaveUpperAndLowerCharacters returns the value of HaveUpperAndLowerCharacters.
func (s *UserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement) GetHaveUpperAndLowerCharacters() OptBool {
	return s.HaveUpperAndLowerCharacters
}

// GetLength returns the value of Length.
func (s *UserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement) GetLength() OptInt {
	return s.Length
}

// GetOnlyAllowNumeric returns the value of OnlyAllowNumeric.
func (s *UserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement) GetOnlyAllowNumeric() OptBool {
	return s.OnlyAllowNumeric
}

// GetWeakEnhanceDetection returns the value of WeakEnhanceDetection.
func (s *UserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement) GetWeakEnhanceDetection() OptBool {
	return s.WeakEnhanceDetection
}

// SetConsecutiveCharactersLength sets the value of ConsecutiveCharactersLength.
func (s *UserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement) SetConsecutiveCharactersLength(val OptInt) {
	s.ConsecutiveCharactersLength = val
}

// SetHaveLetter sets the value of HaveLetter.
func (s *UserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement) SetHaveLetter(val OptBool) {
	s.HaveLetter = val
}

// SetHaveNumber sets the value of HaveNumber.
func (s *UserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement) SetHaveNumber(val OptBool) {
	s.HaveNumber = val
}

// SetHaveSpecialCharacter sets the value of HaveSpecialCharacter.
func (s *UserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement) SetHaveSpecialCharacter(val OptBool) {
	s.HaveSpecialCharacter = val
}

// SetHaveUpperAndLowerCharacters sets the value of HaveUpperAndLowerCharacters.
func (s *UserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement) SetHaveUpperAndLowerCharacters(val OptBool) {
	s.HaveUpperAndLowerCharacters = val
}

// SetLength sets the value of Length.
func (s *UserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement) SetLength(val OptInt) {
	s.Length = val
}

// SetOnlyAllowNumeric sets the value of OnlyAllowNumeric.
func (s *UserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement) SetOnlyAllowNumeric(val OptBool) {
	s.OnlyAllowNumeric = val
}

// SetWeakEnhanceDetection sets the value of WeakEnhanceDetection.
func (s *UserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement) SetWeakEnhanceDetection(val OptBool) {
	s.WeakEnhanceDetection = val
}

// The information about the waiting room settings.
type UserSettingsUpdateReq3MeetingSecurityWaitingRoomSettings struct {
	// The type of participants to be admitted to the Waiting Room:
	// * `0` &mdash; All attendees.
	// * `1` &mdash; Users who are not in your account.
	// * `2` &mdash; Users who are not in your account and are not part of your [allowed domains
	// list](https://support.zoom.
	// us/hc/en-us/articles/360037117472-Configuring-authentication-profiles#h_e3cf0d5f-eec7-4c2a-ad29-ef2a5079a7da).
	ParticipantsToPlaceInWaitingRoom OptInt `json:"participants_to_place_in_waiting_room"`
	// The users who can admit participants from the Waiting Room:
	// * `0` &mdash; Host and co-hosts only.
	// * `1` &mdash; Host, co-hosts, and anyone who bypassed the Waiting Room if the host and co-hosts
	// are not present.
	UsersWhoCanAdmitParticipantsFromWaitingRoom OptInt `json:"users_who_can_admit_participants_from_waiting_room"`
	// If the `participants_to_place_in_waiting_room` field is `2`, a comma-separated list of the domains
	// that can bypass the Waiting Room (`&quot;example.com,example2.com&quot;`).
	WhitelistedDomainsForWaitingRoom OptString `json:"whitelisted_domains_for_waiting_room"`
}

// GetParticipantsToPlaceInWaitingRoom returns the value of ParticipantsToPlaceInWaitingRoom.
func (s *UserSettingsUpdateReq3MeetingSecurityWaitingRoomSettings) GetParticipantsToPlaceInWaitingRoom() OptInt {
	return s.ParticipantsToPlaceInWaitingRoom
}

// GetUsersWhoCanAdmitParticipantsFromWaitingRoom returns the value of UsersWhoCanAdmitParticipantsFromWaitingRoom.
func (s *UserSettingsUpdateReq3MeetingSecurityWaitingRoomSettings) GetUsersWhoCanAdmitParticipantsFromWaitingRoom() OptInt {
	return s.UsersWhoCanAdmitParticipantsFromWaitingRoom
}

// GetWhitelistedDomainsForWaitingRoom returns the value of WhitelistedDomainsForWaitingRoom.
func (s *UserSettingsUpdateReq3MeetingSecurityWaitingRoomSettings) GetWhitelistedDomainsForWaitingRoom() OptString {
	return s.WhitelistedDomainsForWaitingRoom
}

// SetParticipantsToPlaceInWaitingRoom sets the value of ParticipantsToPlaceInWaitingRoom.
func (s *UserSettingsUpdateReq3MeetingSecurityWaitingRoomSettings) SetParticipantsToPlaceInWaitingRoom(val OptInt) {
	s.ParticipantsToPlaceInWaitingRoom = val
}

// SetUsersWhoCanAdmitParticipantsFromWaitingRoom sets the value of UsersWhoCanAdmitParticipantsFromWaitingRoom.
func (s *UserSettingsUpdateReq3MeetingSecurityWaitingRoomSettings) SetUsersWhoCanAdmitParticipantsFromWaitingRoom(val OptInt) {
	s.UsersWhoCanAdmitParticipantsFromWaitingRoom = val
}

// SetWhitelistedDomainsForWaitingRoom sets the value of WhitelistedDomainsForWaitingRoom.
func (s *UserSettingsUpdateReq3MeetingSecurityWaitingRoomSettings) SetWhitelistedDomainsForWaitingRoom(val OptString) {
	s.WhitelistedDomainsForWaitingRoom = val
}

type UserStatusOK struct{}

// The action.
type UserStatusReq struct {
	// The action types.
	// `activate` - Activate a deactivated user.
	// `deactivate` - Deactivate a user.
	// `clock_in` - Clock in a user.
	// `clock_out` - Clock out a user.
	Action string `json:"action"`
}

// GetAction returns the value of Action.
func (s *UserStatusReq) GetAction() string {
	return s.Action
}

// SetAction sets the value of Action.
func (s *UserStatusReq) SetAction(val string) {
	s.Action = val
}

type UserSummaryOK struct {
	// The number of licensed users.
	LicensedUsersCount OptInt `json:"licensed_users_count"`
	// The number of basic users.
	BasicUsersCount OptInt `json:"basic_users_count"`
	// The number of on-prem users.
	OnPremUsersCount OptInt `json:"on_prem_users_count"`
	// The number of Zoom rooms.
	RoomUsersCount OptInt `json:"room_users_count"`
	// The number of users with a pending activation meeting license.
	PendingUsersCount OptInt `json:"pending_users_count"`
	// The number of users without licenses.
	JoinOnlyUsersCount OptInt `json:"join_only_users_count"`
	// The total number of `licensed_users_count`, `basic_users_count`, `on_prem_users_count`,
	// `join_only_users_count` and `room_users_count`.
	TotalUsersCount OptInt `json:"total_users_count"`
}

// GetLicensedUsersCount returns the value of LicensedUsersCount.
func (s *UserSummaryOK) GetLicensedUsersCount() OptInt {
	return s.LicensedUsersCount
}

// GetBasicUsersCount returns the value of BasicUsersCount.
func (s *UserSummaryOK) GetBasicUsersCount() OptInt {
	return s.BasicUsersCount
}

// GetOnPremUsersCount returns the value of OnPremUsersCount.
func (s *UserSummaryOK) GetOnPremUsersCount() OptInt {
	return s.OnPremUsersCount
}

// GetRoomUsersCount returns the value of RoomUsersCount.
func (s *UserSummaryOK) GetRoomUsersCount() OptInt {
	return s.RoomUsersCount
}

// GetPendingUsersCount returns the value of PendingUsersCount.
func (s *UserSummaryOK) GetPendingUsersCount() OptInt {
	return s.PendingUsersCount
}

// GetJoinOnlyUsersCount returns the value of JoinOnlyUsersCount.
func (s *UserSummaryOK) GetJoinOnlyUsersCount() OptInt {
	return s.JoinOnlyUsersCount
}

// GetTotalUsersCount returns the value of TotalUsersCount.
func (s *UserSummaryOK) GetTotalUsersCount() OptInt {
	return s.TotalUsersCount
}

// SetLicensedUsersCount sets the value of LicensedUsersCount.
func (s *UserSummaryOK) SetLicensedUsersCount(val OptInt) {
	s.LicensedUsersCount = val
}

// SetBasicUsersCount sets the value of BasicUsersCount.
func (s *UserSummaryOK) SetBasicUsersCount(val OptInt) {
	s.BasicUsersCount = val
}

// SetOnPremUsersCount sets the value of OnPremUsersCount.
func (s *UserSummaryOK) SetOnPremUsersCount(val OptInt) {
	s.OnPremUsersCount = val
}

// SetRoomUsersCount sets the value of RoomUsersCount.
func (s *UserSummaryOK) SetRoomUsersCount(val OptInt) {
	s.RoomUsersCount = val
}

// SetPendingUsersCount sets the value of PendingUsersCount.
func (s *UserSummaryOK) SetPendingUsersCount(val OptInt) {
	s.PendingUsersCount = val
}

// SetJoinOnlyUsersCount sets the value of JoinOnlyUsersCount.
func (s *UserSummaryOK) SetJoinOnlyUsersCount(val OptInt) {
	s.JoinOnlyUsersCount = val
}

// SetTotalUsersCount sets the value of TotalUsersCount.
func (s *UserSummaryOK) SetTotalUsersCount(val OptInt) {
	s.TotalUsersCount = val
}

type UserTokenOK struct {
	// The user's ZAK or token value.
	Token OptString `json:"token"`
}

// GetToken returns the value of Token.
func (s *UserTokenOK) GetToken() OptString {
	return s.Token
}

// SetToken sets the value of Token.
func (s *UserTokenOK) SetToken(val OptString) {
	s.Token = val
}

// UserUpdateNoContent is response for UserUpdate operation.
type UserUpdateNoContent struct{}

type UserUpdateReq struct {
	// The Kaltura user ID.
	CmsUserID OptString `json:"cms_user_id"`
	// The user's company.
	Company OptString `json:"company"`
	// The user's assigned custom attributes.
	CustomAttributes []UserUpdateReqCustomAttributesItem `json:"custom_attributes"`
	// The user's assigned department.
	Dept OptString `json:"dept"`
	// The user's first name. This value cannot contain more than five Chinese characters.
	FirstName OptString `json:"first_name"`
	// This field provides the unique identifier of the group that you would like to add a [pending
	// user](https://support.zoom.
	// us/hc/en-us/articles/201363183-Managing-users#h_13c87a2a-ecd6-40ad-be61-a9935e660edb) to. Retrieve
	// the value of this field from the [**List
	// groups**](/docs/docs/api/rest/reference/user/methods/#operation/groups) API.
	GroupID OptString `json:"group_id"`
	// The user's host key.
	HostKey OptString `json:"host_key"`
	// The user's job title.
	JobTitle OptString `json:"job_title"`
	// The user's language.
	Language OptString `json:"language"`
	// The user's last name. This value cannot contain more than five Chinese characters.
	LastName OptString `json:"last_name"`
	// The user's location.
	Location OptString `json:"location"`
	// The user's assigned manager.
	Manager OptString `json:"manager"`
	// **Note** This field has been **deprecated** and will not be supported in the future. Use the
	// `country` field of the `phone_numbers` object to select the phone number country.
	// The user's phone number [country ID](https://marketplace.zoom.
	// us/docs/api-reference/other-references/abbreviation-lists#countries).
	//
	// Deprecated: schema marks this property as deprecated.
	PhoneCountry OptString `json:"phone_country"`
	// **Note** This field has been **deprecated** and will not be supported in the future. Instead, use
	// the `phone_numbers` field to assign phone numbers to a user.
	// The user's phone number. To update a phone number, you must also provide the `phone_country` field.
	//
	// Deprecated: schema marks this property as deprecated.
	PhoneNumber OptString `json:"phone_number"`
	// The information about the user's assigned phone numbers.
	PhoneNumbers []UserUpdateReqPhoneNumbersItem `json:"phone_numbers"`
	// The user's [personal meeting ID (PMI)](https://developers.zoom.
	// us/docs/api/rest/using-zoom-apis/#understanding-personal-meeting-id-pmi).
	Pmi OptInt `json:"pmi"`
	// The user's pronouns.
	Pronouns OptString `json:"pronouns"`
	// The user's display pronouns setting.
	// * `1` - Ask the user every time they join meetings and webinars.
	// * `2` - Always display pronouns in meetings and webinars.
	// * `3` - Do not display pronouns in meetings and webinars.
	PronounsOption OptInt `json:"pronouns_option"`
	// The user's [timezone](https://developers.zoom.
	// us/docs/api/rest/other-references/abbreviation-lists/#timezones).
	Timezone OptString `json:"timezone"`
	// The type of [user](https://support.zoom.us/hc/en-us/articles/201363173-Zoom-user-types-roles).
	// * `1` - Basic.
	// * `2` - Licensed.
	// * `4` - No Meetings License.
	// * `99` - None. You can only set this value if the user was created using the `ssoCreate` value for
	// `action` parameter in the [**Create
	// users**](/docs/api-reference/zoom-api/methods#operation/userCreate) API.
	Type OptInt `json:"type"`
	// Whether to use a [personal meeting ID (PMI)](https://developers.zoom.
	// us/docs/api/rest/using-zoom-apis/#understanding-personal-meeting-id-pmi) for instant meetings.
	UsePmi OptBool `json:"use_pmi"`
	// The user's personal meeting room name.
	VanityName OptString `json:"vanity_name"`
	// The user's display name. This value cannot contain more than ten Chinese characters.
	DisplayName OptString `json:"display_name"`
	// The Zoom Workplace plan option.
	// `0` - Turn off Zoom Workplace license.
	// `16` - Zoom Workplace Business Plus with US/CA Unlimited.
	// `32` - Zoom Workplace Business Plus with UK/IR Unlimited.
	// `64` - Zoom Workplace Business Plus with AU/NZ Unlimited.
	// `128` - Zoom Workplace Business Plus with Japan Unlimited.
	// `33554432` - Zoom Workplace Business Plus with Global Select.
	// `134217728` - Zoom Workplace Enterprise Premier with US/CA Unlimited.
	// `1073741824` - Zoom Workplace Enterprise Premier with AU/NZ Unlimited.
	// `536870912` - Zoom Workplace Enterprise Premier with UK/IR Unlimited.
	// `268435456` - Zoom Workplace Enterprise Premier with Japan Unlimited.
	// `4398046511104` - Zoom Workplace Pro Plus with US/CA Unlimited.
	// The Zoom One plan option for Gov accounts:
	// `0` - Turn off Zoom One license.
	// `16` - Zoom One Business Plus.
	// The Zoom One plan option for Education accounts:
	// `0` - Turn off Zoom One license.
	// `18014398509481984` - Zoom One for Education School and Campus.
	// `72057594037927936` - Zoom One for Education Enterprise Essentials.
	// `576460752303423488` - Zoom One for Education Enterprise Student.
	// `144115188075855872` - Zoom One for Education Enterprise Plus.
	// `137438953472` - Zoom One for Education School and Campus Plus with US/CA Unlimited.
	// `1099511627776` -Zoom One for Education School and Campus Plus with AU/NZ Unlimited.
	// `549755813888` - Zoom One for Education School and Campus Plus with UK/IR Unlimited.
	// `274877906944` - Zoom One for Education School and Campus Plus with Japan Unlimited.
	// `2199023255552` - Zoom One for Education School and Campus Plus with Global Select.
	// `4294967296` - Zoom One for Education Enterprise Premier with US/CA Unlimited.
	// `34359738368` - Zoom One for Education Enterprise Premier with AU/NZ Unlimited.
	// `17179869184` -Zoom One for Education Enterprise Premier with UK/IR Unlimited.
	// `8589934592` - Zoom One for Education Enterprise Premier with with Japan Unlimited.
	// `68719476736` - Zoom One for Education Enterprise Premier with Global Select.
	ZoomOneType OptInt `json:"zoom_one_type"`
	// The Zoom United type and license.
	// * `1` - Zoom United Pro-United with US/CA Unlimited.
	// * `2` - Zoom United Pro-United with UK/IR Unlimited.
	// * `4` - Zoom United Pro-United with AU/NZ Unlimited.
	// * `8` - Zoom United Pro-United with Global Select.
	// * `16` - Zoom United Pro-United with Zoom Phone Pro.
	// * `32` - Zoom United Biz-United with US/CA Unlimited.
	// * `64` - Zoom United Biz-United with UK/IR Unlimited.
	// * `128` - Zoom United Biz-United with AU/NZ Unlimited.
	// * `256` - Zoom United Biz-United with Global Select.
	// * `512` - Zoom United Biz-United with Zoom Phone Pro.
	// * `1024` - Zoom United Ent-United with US/CA Unlimited.
	// * `2048` - Zoom United Ent-United with UK/IR Unlimited.
	// * `4096` - Zoom United Ent-United with AU/NZ Unlimited.
	// * `8192` - Zoom United Ent-United with Global Select.
	// * `16384` - Zoom United Ent-United with Zoom Phone Pro.
	// * `32768` - Zoom United Pro-United with JP Unlimited.
	// * `65536` - Zoom United Biz-United with JP Unlimited.
	// * `131072` - Zoom United Ent-United with JP Unlimited.
	// * `none` - Turn off Zoom United type.
	PlanUnitedType OptString `json:"plan_united_type"`
	// The information about the user's features.
	Feature OptUserUpdateReqFeature `json:"feature"`
	// The user's self-introduction. Hyperlinks or HTML code not allowed in this field.
	AboutMe OptString `json:"about_me"`
	// The user's LinkedIn link. The URL must contain `linkedin.com`.
	LinkedinURL OptString `json:"linkedin_url"`
}

// GetCmsUserID returns the value of CmsUserID.
func (s *UserUpdateReq) GetCmsUserID() OptString {
	return s.CmsUserID
}

// GetCompany returns the value of Company.
func (s *UserUpdateReq) GetCompany() OptString {
	return s.Company
}

// GetCustomAttributes returns the value of CustomAttributes.
func (s *UserUpdateReq) GetCustomAttributes() []UserUpdateReqCustomAttributesItem {
	return s.CustomAttributes
}

// GetDept returns the value of Dept.
func (s *UserUpdateReq) GetDept() OptString {
	return s.Dept
}

// GetFirstName returns the value of FirstName.
func (s *UserUpdateReq) GetFirstName() OptString {
	return s.FirstName
}

// GetGroupID returns the value of GroupID.
func (s *UserUpdateReq) GetGroupID() OptString {
	return s.GroupID
}

// GetHostKey returns the value of HostKey.
func (s *UserUpdateReq) GetHostKey() OptString {
	return s.HostKey
}

// GetJobTitle returns the value of JobTitle.
func (s *UserUpdateReq) GetJobTitle() OptString {
	return s.JobTitle
}

// GetLanguage returns the value of Language.
func (s *UserUpdateReq) GetLanguage() OptString {
	return s.Language
}

// GetLastName returns the value of LastName.
func (s *UserUpdateReq) GetLastName() OptString {
	return s.LastName
}

// GetLocation returns the value of Location.
func (s *UserUpdateReq) GetLocation() OptString {
	return s.Location
}

// GetManager returns the value of Manager.
func (s *UserUpdateReq) GetManager() OptString {
	return s.Manager
}

// GetPhoneCountry returns the value of PhoneCountry.
func (s *UserUpdateReq) GetPhoneCountry() OptString {
	return s.PhoneCountry
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *UserUpdateReq) GetPhoneNumber() OptString {
	return s.PhoneNumber
}

// GetPhoneNumbers returns the value of PhoneNumbers.
func (s *UserUpdateReq) GetPhoneNumbers() []UserUpdateReqPhoneNumbersItem {
	return s.PhoneNumbers
}

// GetPmi returns the value of Pmi.
func (s *UserUpdateReq) GetPmi() OptInt {
	return s.Pmi
}

// GetPronouns returns the value of Pronouns.
func (s *UserUpdateReq) GetPronouns() OptString {
	return s.Pronouns
}

// GetPronounsOption returns the value of PronounsOption.
func (s *UserUpdateReq) GetPronounsOption() OptInt {
	return s.PronounsOption
}

// GetTimezone returns the value of Timezone.
func (s *UserUpdateReq) GetTimezone() OptString {
	return s.Timezone
}

// GetType returns the value of Type.
func (s *UserUpdateReq) GetType() OptInt {
	return s.Type
}

// GetUsePmi returns the value of UsePmi.
func (s *UserUpdateReq) GetUsePmi() OptBool {
	return s.UsePmi
}

// GetVanityName returns the value of VanityName.
func (s *UserUpdateReq) GetVanityName() OptString {
	return s.VanityName
}

// GetDisplayName returns the value of DisplayName.
func (s *UserUpdateReq) GetDisplayName() OptString {
	return s.DisplayName
}

// GetZoomOneType returns the value of ZoomOneType.
func (s *UserUpdateReq) GetZoomOneType() OptInt {
	return s.ZoomOneType
}

// GetPlanUnitedType returns the value of PlanUnitedType.
func (s *UserUpdateReq) GetPlanUnitedType() OptString {
	return s.PlanUnitedType
}

// GetFeature returns the value of Feature.
func (s *UserUpdateReq) GetFeature() OptUserUpdateReqFeature {
	return s.Feature
}

// GetAboutMe returns the value of AboutMe.
func (s *UserUpdateReq) GetAboutMe() OptString {
	return s.AboutMe
}

// GetLinkedinURL returns the value of LinkedinURL.
func (s *UserUpdateReq) GetLinkedinURL() OptString {
	return s.LinkedinURL
}

// SetCmsUserID sets the value of CmsUserID.
func (s *UserUpdateReq) SetCmsUserID(val OptString) {
	s.CmsUserID = val
}

// SetCompany sets the value of Company.
func (s *UserUpdateReq) SetCompany(val OptString) {
	s.Company = val
}

// SetCustomAttributes sets the value of CustomAttributes.
func (s *UserUpdateReq) SetCustomAttributes(val []UserUpdateReqCustomAttributesItem) {
	s.CustomAttributes = val
}

// SetDept sets the value of Dept.
func (s *UserUpdateReq) SetDept(val OptString) {
	s.Dept = val
}

// SetFirstName sets the value of FirstName.
func (s *UserUpdateReq) SetFirstName(val OptString) {
	s.FirstName = val
}

// SetGroupID sets the value of GroupID.
func (s *UserUpdateReq) SetGroupID(val OptString) {
	s.GroupID = val
}

// SetHostKey sets the value of HostKey.
func (s *UserUpdateReq) SetHostKey(val OptString) {
	s.HostKey = val
}

// SetJobTitle sets the value of JobTitle.
func (s *UserUpdateReq) SetJobTitle(val OptString) {
	s.JobTitle = val
}

// SetLanguage sets the value of Language.
func (s *UserUpdateReq) SetLanguage(val OptString) {
	s.Language = val
}

// SetLastName sets the value of LastName.
func (s *UserUpdateReq) SetLastName(val OptString) {
	s.LastName = val
}

// SetLocation sets the value of Location.
func (s *UserUpdateReq) SetLocation(val OptString) {
	s.Location = val
}

// SetManager sets the value of Manager.
func (s *UserUpdateReq) SetManager(val OptString) {
	s.Manager = val
}

// SetPhoneCountry sets the value of PhoneCountry.
func (s *UserUpdateReq) SetPhoneCountry(val OptString) {
	s.PhoneCountry = val
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *UserUpdateReq) SetPhoneNumber(val OptString) {
	s.PhoneNumber = val
}

// SetPhoneNumbers sets the value of PhoneNumbers.
func (s *UserUpdateReq) SetPhoneNumbers(val []UserUpdateReqPhoneNumbersItem) {
	s.PhoneNumbers = val
}

// SetPmi sets the value of Pmi.
func (s *UserUpdateReq) SetPmi(val OptInt) {
	s.Pmi = val
}

// SetPronouns sets the value of Pronouns.
func (s *UserUpdateReq) SetPronouns(val OptString) {
	s.Pronouns = val
}

// SetPronounsOption sets the value of PronounsOption.
func (s *UserUpdateReq) SetPronounsOption(val OptInt) {
	s.PronounsOption = val
}

// SetTimezone sets the value of Timezone.
func (s *UserUpdateReq) SetTimezone(val OptString) {
	s.Timezone = val
}

// SetType sets the value of Type.
func (s *UserUpdateReq) SetType(val OptInt) {
	s.Type = val
}

// SetUsePmi sets the value of UsePmi.
func (s *UserUpdateReq) SetUsePmi(val OptBool) {
	s.UsePmi = val
}

// SetVanityName sets the value of VanityName.
func (s *UserUpdateReq) SetVanityName(val OptString) {
	s.VanityName = val
}

// SetDisplayName sets the value of DisplayName.
func (s *UserUpdateReq) SetDisplayName(val OptString) {
	s.DisplayName = val
}

// SetZoomOneType sets the value of ZoomOneType.
func (s *UserUpdateReq) SetZoomOneType(val OptInt) {
	s.ZoomOneType = val
}

// SetPlanUnitedType sets the value of PlanUnitedType.
func (s *UserUpdateReq) SetPlanUnitedType(val OptString) {
	s.PlanUnitedType = val
}

// SetFeature sets the value of Feature.
func (s *UserUpdateReq) SetFeature(val OptUserUpdateReqFeature) {
	s.Feature = val
}

// SetAboutMe sets the value of AboutMe.
func (s *UserUpdateReq) SetAboutMe(val OptString) {
	s.AboutMe = val
}

// SetLinkedinURL sets the value of LinkedinURL.
func (s *UserUpdateReq) SetLinkedinURL(val OptString) {
	s.LinkedinURL = val
}

type UserUpdateReqCustomAttributesItem struct {
	// The custom attribute's key.
	Key OptString `json:"key"`
	// The custom attribute's name.
	Name OptString `json:"name"`
	// The custom attribute's value.
	Value OptString `json:"value"`
}

// GetKey returns the value of Key.
func (s *UserUpdateReqCustomAttributesItem) GetKey() OptString {
	return s.Key
}

// GetName returns the value of Name.
func (s *UserUpdateReqCustomAttributesItem) GetName() OptString {
	return s.Name
}

// GetValue returns the value of Value.
func (s *UserUpdateReqCustomAttributesItem) GetValue() OptString {
	return s.Value
}

// SetKey sets the value of Key.
func (s *UserUpdateReqCustomAttributesItem) SetKey(val OptString) {
	s.Key = val
}

// SetName sets the value of Name.
func (s *UserUpdateReqCustomAttributesItem) SetName(val OptString) {
	s.Name = val
}

// SetValue sets the value of Value.
func (s *UserUpdateReqCustomAttributesItem) SetValue(val OptString) {
	s.Value = val
}

// The information about the user's features.
type UserUpdateReqFeature struct {
	// Whether the user has the **Zoom Phone** feature enabled.
	ZoomPhone OptBool `json:"zoom_phone"`
}

// GetZoomPhone returns the value of ZoomPhone.
func (s *UserUpdateReqFeature) GetZoomPhone() OptBool {
	return s.ZoomPhone
}

// SetZoomPhone sets the value of ZoomPhone.
func (s *UserUpdateReqFeature) SetZoomPhone(val OptBool) {
	s.ZoomPhone = val
}

type UserUpdateReqPhoneNumbersItem struct {
	// The phone number's country code.
	Code OptString `json:"code"`
	// The phone number's [country ID](https://developers.zoom.
	// us/docs/api/rest/other-references/abbreviation-lists/#countries).
	Country OptString `json:"country"`
	// The phone number's label.
	// * `Mobile`
	// * `Office`
	// * `Home`
	// * `Fax`.
	Label OptString `json:"label"`
	// The phone number.
	Number OptString `json:"number"`
}

// GetCode returns the value of Code.
func (s *UserUpdateReqPhoneNumbersItem) GetCode() OptString {
	return s.Code
}

// GetCountry returns the value of Country.
func (s *UserUpdateReqPhoneNumbersItem) GetCountry() OptString {
	return s.Country
}

// GetLabel returns the value of Label.
func (s *UserUpdateReqPhoneNumbersItem) GetLabel() OptString {
	return s.Label
}

// GetNumber returns the value of Number.
func (s *UserUpdateReqPhoneNumbersItem) GetNumber() OptString {
	return s.Number
}

// SetCode sets the value of Code.
func (s *UserUpdateReqPhoneNumbersItem) SetCode(val OptString) {
	s.Code = val
}

// SetCountry sets the value of Country.
func (s *UserUpdateReqPhoneNumbersItem) SetCountry(val OptString) {
	s.Country = val
}

// SetLabel sets the value of Label.
func (s *UserUpdateReqPhoneNumbersItem) SetLabel(val OptString) {
	s.Label = val
}

// SetNumber sets the value of Number.
func (s *UserUpdateReqPhoneNumbersItem) SetNumber(val OptString) {
	s.Number = val
}

type UserVanityNameOK struct {
	// If `true`, it indicates that the personal meeting room with the given name exists.
	// `false` - The room name does not exist.
	Existed OptBool `json:"existed"`
}

// GetExisted returns the value of Existed.
func (s *UserVanityNameOK) GetExisted() OptBool {
	return s.Existed
}

// SetExisted sets the value of Existed.
func (s *UserVanityNameOK) SetExisted(val OptBool) {
	s.Existed = val
}

type UserZakOK struct {
	// The user's ZAK.
	Token OptString `json:"token"`
}

// GetToken returns the value of Token.
func (s *UserZakOK) GetToken() OptString {
	return s.Token
}

// SetToken sets the value of Token.
func (s *UserZakOK) SetToken(val OptString) {
	s.Token = val
}

type UsersOK struct {
	// The next page token is used to paginate through large result sets. A next page token will be
	// returned whenever the set of available results exceeds the current page size. The expiration
	// period for this token is 15 minutes.
	NextPageToken OptString `json:"next_page_token"`
	// The number of pages returned for the request made.
	PageCount OptInt `json:"page_count"`
	// The page number of the current results.
	PageNumber OptInt `json:"page_number"`
	// The number of records returned within a single API call.
	PageSize OptInt `json:"page_size"`
	// The total number of all the records available across pages.
	TotalRecords OptInt `json:"total_records"`
	// Information about the users.
	Users []UsersOKUsersItem `json:"users"`
}

// GetNextPageToken returns the value of NextPageToken.
func (s *UsersOK) GetNextPageToken() OptString {
	return s.NextPageToken
}

// GetPageCount returns the value of PageCount.
func (s *UsersOK) GetPageCount() OptInt {
	return s.PageCount
}

// GetPageNumber returns the value of PageNumber.
func (s *UsersOK) GetPageNumber() OptInt {
	return s.PageNumber
}

// GetPageSize returns the value of PageSize.
func (s *UsersOK) GetPageSize() OptInt {
	return s.PageSize
}

// GetTotalRecords returns the value of TotalRecords.
func (s *UsersOK) GetTotalRecords() OptInt {
	return s.TotalRecords
}

// GetUsers returns the value of Users.
func (s *UsersOK) GetUsers() []UsersOKUsersItem {
	return s.Users
}

// SetNextPageToken sets the value of NextPageToken.
func (s *UsersOK) SetNextPageToken(val OptString) {
	s.NextPageToken = val
}

// SetPageCount sets the value of PageCount.
func (s *UsersOK) SetPageCount(val OptInt) {
	s.PageCount = val
}

// SetPageNumber sets the value of PageNumber.
func (s *UsersOK) SetPageNumber(val OptInt) {
	s.PageNumber = val
}

// SetPageSize sets the value of PageSize.
func (s *UsersOK) SetPageSize(val OptInt) {
	s.PageSize = val
}

// SetTotalRecords sets the value of TotalRecords.
func (s *UsersOK) SetTotalRecords(val OptInt) {
	s.TotalRecords = val
}

// SetUsers sets the value of Users.
func (s *UsersOK) SetUsers(val []UsersOKUsersItem) {
	s.Users = val
}

type UsersOKUsersItem struct {
	// The date and time when this user was created.
	UserCreatedAt OptDateTime `json:"user_created_at"`
	// The date and time when this user's latest login type was created.
	//
	// Deprecated: schema marks this property as deprecated.
	CreatedAt OptDateTime `json:"created_at"`
	// Information about the user's custom attributes.
	// This field is **only** returned if users are assigned custom attributes and you provided the
	// `custom_attributes` value for the `include_fields` query parameter in the API request.
	CustomAttributes []UsersOKUsersItemCustomAttributesItem `json:"custom_attributes"`
	// The user's department.
	Dept OptString `json:"dept"`
	// The user's email address.
	Email string `json:"email"`
	// The employee's unique ID. The this field only returns when:
	// * SAML single sign-on (SSO) is enabled.
	// * The `login_type` value is `101` (SSO).
	EmployeeUniqueID OptString `json:"employee_unique_id"`
	// The user's first name.
	FirstName OptString `json:"first_name"`
	// The IDs of groups where the user is a member.
	GroupIds []string `json:"group_ids"`
	// The user's [host key](https://support.zoom.us/hc/en-us/articles/205172555-Using-your-host-key).
	// This field is **only** returned if users are assigned a host key and you provided the `host_key`
	// value for the `include_fields` query parameter in the API request.
	HostKey OptString `json:"host_key"`
	// The user's ID.
	// The API does **not** return this value for users with the `pending` status.
	ID OptString `json:"id"`
	// The IDs of IM directory groups where the user is a member.
	ImGroupIds []string `json:"im_group_ids"`
	// The last client version that user used to log in.
	LastClientVersion OptString `json:"last_client_version"`
	// The user's last login time. This field has a three-day buffer period.
	// For example, if user first logged in on `2020-01-01` and then logged out and logged in on
	// `2020-01-02`, this value will still reflect the login time of `2020-01-01`. However, if the user
	// logs in on `2020-01-04`, the value of this field will reflect the corresponding login time since
	// it exceeds the three-day buffer period.
	LastLoginTime OptDateTime `json:"last_login_time"`
	// The user's last name.
	LastName OptString `json:"last_name"`
	// This field is returned if the user is enrolled in the [Zoom United](https://zoom.
	// us/pricing/zoom-bundles) plan. The license option:
	// * `1` &mdash; Zoom United Pro-United with US/CA Unlimited.
	// * `2` &mdash; Zoom United Pro-United with UK/IR Unlimited.
	// * `4` &mdash; Zoom United Pro-United with AU/NZ Unlimited.
	// * `8` &mdash; Zoom United Pro-United with Global Select.
	// * `16` &mdash; Zoom United Pro-United with Zoom Phone Pro.
	// * `32` &mdash; Zoom United Biz-United with US/CA Unlimited.
	// * `64` &mdash; Zoom United Biz-United with UK/IR Unlimited.
	// * `128` &mdash; Zoom United Biz-United with AU/NZ Unlimited.
	// * `256` &mdash; Zoom United Biz-United with Global Select.
	// * `512` &mdash; Zoom United Biz-United with Zoom Phone Pro.
	// * `1024` &mdash; Zoom United Ent-United with US/CA Unlimited.
	// * `2048` &mdash; Zoom United Ent-United with UK/IR Unlimited.
	// * `4096` &mdash; Zoom United Ent-United with AU/NZ Unlimited.
	// * `8192` &mdash; Zoom United Ent-United with Global Select.
	// * `16384` &mdash; Zoom United Ent-United with Zoom Phone Pro.
	// * `32768` &mdash; Zoom United Pro-United with JP Unlimited.
	// * `65536` &mdash; Zoom United Biz-United with JP Unlimited.
	// * `131072` &mdash; Zoom United Ent-United with JP Unlimited.
	PlanUnitedType OptString `json:"plan_united_type"`
	// The user's [personal meeting ID (PMI)](https://developers.zoom.
	// us/docs/api/rest/using-zoom-apis/#understanding-personal-meeting-id-pmi).
	Pmi OptInt64 `json:"pmi"`
	// The unique ID of the user's assigned
	// [role](/docs/api/rest/reference/account/methods/#operation/roles).
	RoleID OptString `json:"role_id"`
	// The user's status.
	// * `active` - An active user.
	// * `inactive` - A deactivated user.
	// * `pending` - A pending user.
	Status OptString `json:"status"`
	// The user's timezone.
	Timezone OptString `json:"timezone"`
	// The user's assigned plan type.
	// * `1` - Basic.
	// * `2` - Licensed.
	// * `4` - No Meeting License.
	// * `99` - None (this can only be set with `ssoCreate`).
	Type int `json:"type"`
	// Display whether the user's email address for the Zoom account is verified.
	// * `1` - A verified user email.
	// * `0` - The user's email **not** verified.
	Verified OptInt `json:"verified"`
	// The user's display name.
	DisplayName OptString `json:"display_name"`
}

// GetUserCreatedAt returns the value of UserCreatedAt.
func (s *UsersOKUsersItem) GetUserCreatedAt() OptDateTime {
	return s.UserCreatedAt
}

// GetCreatedAt returns the value of CreatedAt.
func (s *UsersOKUsersItem) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetCustomAttributes returns the value of CustomAttributes.
func (s *UsersOKUsersItem) GetCustomAttributes() []UsersOKUsersItemCustomAttributesItem {
	return s.CustomAttributes
}

// GetDept returns the value of Dept.
func (s *UsersOKUsersItem) GetDept() OptString {
	return s.Dept
}

// GetEmail returns the value of Email.
func (s *UsersOKUsersItem) GetEmail() string {
	return s.Email
}

// GetEmployeeUniqueID returns the value of EmployeeUniqueID.
func (s *UsersOKUsersItem) GetEmployeeUniqueID() OptString {
	return s.EmployeeUniqueID
}

// GetFirstName returns the value of FirstName.
func (s *UsersOKUsersItem) GetFirstName() OptString {
	return s.FirstName
}

// GetGroupIds returns the value of GroupIds.
func (s *UsersOKUsersItem) GetGroupIds() []string {
	return s.GroupIds
}

// GetHostKey returns the value of HostKey.
func (s *UsersOKUsersItem) GetHostKey() OptString {
	return s.HostKey
}

// GetID returns the value of ID.
func (s *UsersOKUsersItem) GetID() OptString {
	return s.ID
}

// GetImGroupIds returns the value of ImGroupIds.
func (s *UsersOKUsersItem) GetImGroupIds() []string {
	return s.ImGroupIds
}

// GetLastClientVersion returns the value of LastClientVersion.
func (s *UsersOKUsersItem) GetLastClientVersion() OptString {
	return s.LastClientVersion
}

// GetLastLoginTime returns the value of LastLoginTime.
func (s *UsersOKUsersItem) GetLastLoginTime() OptDateTime {
	return s.LastLoginTime
}

// GetLastName returns the value of LastName.
func (s *UsersOKUsersItem) GetLastName() OptString {
	return s.LastName
}

// GetPlanUnitedType returns the value of PlanUnitedType.
func (s *UsersOKUsersItem) GetPlanUnitedType() OptString {
	return s.PlanUnitedType
}

// GetPmi returns the value of Pmi.
func (s *UsersOKUsersItem) GetPmi() OptInt64 {
	return s.Pmi
}

// GetRoleID returns the value of RoleID.
func (s *UsersOKUsersItem) GetRoleID() OptString {
	return s.RoleID
}

// GetStatus returns the value of Status.
func (s *UsersOKUsersItem) GetStatus() OptString {
	return s.Status
}

// GetTimezone returns the value of Timezone.
func (s *UsersOKUsersItem) GetTimezone() OptString {
	return s.Timezone
}

// GetType returns the value of Type.
func (s *UsersOKUsersItem) GetType() int {
	return s.Type
}

// GetVerified returns the value of Verified.
func (s *UsersOKUsersItem) GetVerified() OptInt {
	return s.Verified
}

// GetDisplayName returns the value of DisplayName.
func (s *UsersOKUsersItem) GetDisplayName() OptString {
	return s.DisplayName
}

// SetUserCreatedAt sets the value of UserCreatedAt.
func (s *UsersOKUsersItem) SetUserCreatedAt(val OptDateTime) {
	s.UserCreatedAt = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *UsersOKUsersItem) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetCustomAttributes sets the value of CustomAttributes.
func (s *UsersOKUsersItem) SetCustomAttributes(val []UsersOKUsersItemCustomAttributesItem) {
	s.CustomAttributes = val
}

// SetDept sets the value of Dept.
func (s *UsersOKUsersItem) SetDept(val OptString) {
	s.Dept = val
}

// SetEmail sets the value of Email.
func (s *UsersOKUsersItem) SetEmail(val string) {
	s.Email = val
}

// SetEmployeeUniqueID sets the value of EmployeeUniqueID.
func (s *UsersOKUsersItem) SetEmployeeUniqueID(val OptString) {
	s.EmployeeUniqueID = val
}

// SetFirstName sets the value of FirstName.
func (s *UsersOKUsersItem) SetFirstName(val OptString) {
	s.FirstName = val
}

// SetGroupIds sets the value of GroupIds.
func (s *UsersOKUsersItem) SetGroupIds(val []string) {
	s.GroupIds = val
}

// SetHostKey sets the value of HostKey.
func (s *UsersOKUsersItem) SetHostKey(val OptString) {
	s.HostKey = val
}

// SetID sets the value of ID.
func (s *UsersOKUsersItem) SetID(val OptString) {
	s.ID = val
}

// SetImGroupIds sets the value of ImGroupIds.
func (s *UsersOKUsersItem) SetImGroupIds(val []string) {
	s.ImGroupIds = val
}

// SetLastClientVersion sets the value of LastClientVersion.
func (s *UsersOKUsersItem) SetLastClientVersion(val OptString) {
	s.LastClientVersion = val
}

// SetLastLoginTime sets the value of LastLoginTime.
func (s *UsersOKUsersItem) SetLastLoginTime(val OptDateTime) {
	s.LastLoginTime = val
}

// SetLastName sets the value of LastName.
func (s *UsersOKUsersItem) SetLastName(val OptString) {
	s.LastName = val
}

// SetPlanUnitedType sets the value of PlanUnitedType.
func (s *UsersOKUsersItem) SetPlanUnitedType(val OptString) {
	s.PlanUnitedType = val
}

// SetPmi sets the value of Pmi.
func (s *UsersOKUsersItem) SetPmi(val OptInt64) {
	s.Pmi = val
}

// SetRoleID sets the value of RoleID.
func (s *UsersOKUsersItem) SetRoleID(val OptString) {
	s.RoleID = val
}

// SetStatus sets the value of Status.
func (s *UsersOKUsersItem) SetStatus(val OptString) {
	s.Status = val
}

// SetTimezone sets the value of Timezone.
func (s *UsersOKUsersItem) SetTimezone(val OptString) {
	s.Timezone = val
}

// SetType sets the value of Type.
func (s *UsersOKUsersItem) SetType(val int) {
	s.Type = val
}

// SetVerified sets the value of Verified.
func (s *UsersOKUsersItem) SetVerified(val OptInt) {
	s.Verified = val
}

// SetDisplayName sets the value of DisplayName.
func (s *UsersOKUsersItem) SetDisplayName(val OptString) {
	s.DisplayName = val
}

type UsersOKUsersItemCustomAttributesItem struct {
	// The custom attribute's unique ID.
	Key OptString `json:"key"`
	// The custom attribute's name.
	Name OptString `json:"name"`
	// The custom attribute's value.
	Value OptString `json:"value"`
}

// GetKey returns the value of Key.
func (s *UsersOKUsersItemCustomAttributesItem) GetKey() OptString {
	return s.Key
}

// GetName returns the value of Name.
func (s *UsersOKUsersItemCustomAttributesItem) GetName() OptString {
	return s.Name
}

// GetValue returns the value of Value.
func (s *UsersOKUsersItemCustomAttributesItem) GetValue() OptString {
	return s.Value
}

// SetKey sets the value of Key.
func (s *UsersOKUsersItemCustomAttributesItem) SetKey(val OptString) {
	s.Key = val
}

// SetName sets the value of Name.
func (s *UsersOKUsersItemCustomAttributesItem) SetName(val OptString) {
	s.Name = val
}

// SetValue sets the value of Value.
func (s *UsersOKUsersItemCustomAttributesItem) SetValue(val OptString) {
	s.Value = val
}

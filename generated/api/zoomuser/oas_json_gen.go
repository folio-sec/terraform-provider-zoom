// Code generated by ogen, DO NOT EDIT.

package zoomuser

import (
	"math/bits"
	"strconv"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"

	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/validate"
)

// Encode implements json.Marshaler.
func (s *BulkUpdateFeatureCreated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *BulkUpdateFeatureCreated) encodeFields(e *jx.Encoder) {
	{
		if s.SuccessUserIds != nil {
			e.FieldStart("success_user_ids")
			e.ArrStart()
			for _, elem := range s.SuccessUserIds {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.FailDetails != nil {
			e.FieldStart("fail_details")
			e.ArrStart()
			for _, elem := range s.FailDetails {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfBulkUpdateFeatureCreated = [2]string{
	0: "success_user_ids",
	1: "fail_details",
}

// Decode decodes BulkUpdateFeatureCreated from json.
func (s *BulkUpdateFeatureCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode BulkUpdateFeatureCreated to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "success_user_ids":
			if err := func() error {
				s.SuccessUserIds = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.SuccessUserIds = append(s.SuccessUserIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"success_user_ids\"")
			}
		case "fail_details":
			if err := func() error {
				s.FailDetails = make([]BulkUpdateFeatureCreatedFailDetailsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem BulkUpdateFeatureCreatedFailDetailsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.FailDetails = append(s.FailDetails, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fail_details\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode BulkUpdateFeatureCreated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *BulkUpdateFeatureCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *BulkUpdateFeatureCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *BulkUpdateFeatureCreatedFailDetailsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *BulkUpdateFeatureCreatedFailDetailsItem) encodeFields(e *jx.Encoder) {
	{
		if s.UserIds != nil {
			e.FieldStart("user_ids")
			e.ArrStart()
			for _, elem := range s.UserIds {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Reason.Set {
			e.FieldStart("reason")
			s.Reason.Encode(e)
		}
	}
}

var jsonFieldsNameOfBulkUpdateFeatureCreatedFailDetailsItem = [2]string{
	0: "user_ids",
	1: "reason",
}

// Decode decodes BulkUpdateFeatureCreatedFailDetailsItem from json.
func (s *BulkUpdateFeatureCreatedFailDetailsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode BulkUpdateFeatureCreatedFailDetailsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "user_ids":
			if err := func() error {
				s.UserIds = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.UserIds = append(s.UserIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"user_ids\"")
			}
		case "reason":
			if err := func() error {
				s.Reason.Reset()
				if err := s.Reason.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reason\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode BulkUpdateFeatureCreatedFailDetailsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *BulkUpdateFeatureCreatedFailDetailsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *BulkUpdateFeatureCreatedFailDetailsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *BulkUpdateFeatureReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *BulkUpdateFeatureReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("feature_type")
		e.Str(s.FeatureType)
	}
	{
		e.FieldStart("feature_value")
		e.Str(s.FeatureValue)
	}
	{
		e.FieldStart("users")
		e.ArrStart()
		for _, elem := range s.Users {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
}

var jsonFieldsNameOfBulkUpdateFeatureReq = [3]string{
	0: "feature_type",
	1: "feature_value",
	2: "users",
}

// Decode decodes BulkUpdateFeatureReq from json.
func (s *BulkUpdateFeatureReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode BulkUpdateFeatureReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "feature_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.FeatureType = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"feature_type\"")
			}
		case "feature_value":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.FeatureValue = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"feature_value\"")
			}
		case "users":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				s.Users = make([]BulkUpdateFeatureReqUsersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem BulkUpdateFeatureReqUsersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Users = append(s.Users, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"users\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode BulkUpdateFeatureReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000111,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfBulkUpdateFeatureReq) {
					name = jsonFieldsNameOfBulkUpdateFeatureReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *BulkUpdateFeatureReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *BulkUpdateFeatureReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *BulkUpdateFeatureReqUsersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *BulkUpdateFeatureReqUsersItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Email.Set {
			e.FieldStart("email")
			s.Email.Encode(e)
		}
	}
}

var jsonFieldsNameOfBulkUpdateFeatureReqUsersItem = [2]string{
	0: "id",
	1: "email",
}

// Decode decodes BulkUpdateFeatureReqUsersItem from json.
func (s *BulkUpdateFeatureReqUsersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode BulkUpdateFeatureReqUsersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "email":
			if err := func() error {
				s.Email.Reset()
				if err := s.Email.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode BulkUpdateFeatureReqUsersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *BulkUpdateFeatureReqUsersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *BulkUpdateFeatureReqUsersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ContactGroupCreateCreated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ContactGroupCreateCreated) encodeFields(e *jx.Encoder) {
	{
		if s.GroupID.Set {
			e.FieldStart("group_id")
			s.GroupID.Encode(e)
		}
	}
	{
		if s.GroupName.Set {
			e.FieldStart("group_name")
			s.GroupName.Encode(e)
		}
	}
	{
		if s.TotalMembers.Set {
			e.FieldStart("total_members")
			s.TotalMembers.Encode(e)
		}
	}
	{
		if s.GroupPrivacy.Set {
			e.FieldStart("group_privacy")
			s.GroupPrivacy.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
}

var jsonFieldsNameOfContactGroupCreateCreated = [5]string{
	0: "group_id",
	1: "group_name",
	2: "total_members",
	3: "group_privacy",
	4: "description",
}

// Decode decodes ContactGroupCreateCreated from json.
func (s *ContactGroupCreateCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ContactGroupCreateCreated to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "group_id":
			if err := func() error {
				s.GroupID.Reset()
				if err := s.GroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"group_id\"")
			}
		case "group_name":
			if err := func() error {
				s.GroupName.Reset()
				if err := s.GroupName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"group_name\"")
			}
		case "total_members":
			if err := func() error {
				s.TotalMembers.Reset()
				if err := s.TotalMembers.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_members\"")
			}
		case "group_privacy":
			if err := func() error {
				s.GroupPrivacy.Reset()
				if err := s.GroupPrivacy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"group_privacy\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ContactGroupCreateCreated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ContactGroupCreateCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ContactGroupCreateCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ContactGroupCreateReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ContactGroupCreateReq) encodeFields(e *jx.Encoder) {
	{
		if s.GroupName.Set {
			e.FieldStart("group_name")
			s.GroupName.Encode(e)
		}
	}
	{
		if s.GroupPrivacy.Set {
			e.FieldStart("group_privacy")
			s.GroupPrivacy.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.GroupMembers != nil {
			e.FieldStart("group_members")
			e.ArrStart()
			for _, elem := range s.GroupMembers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfContactGroupCreateReq = [4]string{
	0: "group_name",
	1: "group_privacy",
	2: "description",
	3: "group_members",
}

// Decode decodes ContactGroupCreateReq from json.
func (s *ContactGroupCreateReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ContactGroupCreateReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "group_name":
			if err := func() error {
				s.GroupName.Reset()
				if err := s.GroupName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"group_name\"")
			}
		case "group_privacy":
			if err := func() error {
				s.GroupPrivacy.Reset()
				if err := s.GroupPrivacy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"group_privacy\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "group_members":
			if err := func() error {
				s.GroupMembers = make([]ContactGroupCreateReqGroupMembersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ContactGroupCreateReqGroupMembersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.GroupMembers = append(s.GroupMembers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"group_members\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ContactGroupCreateReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ContactGroupCreateReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ContactGroupCreateReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ContactGroupCreateReqGroupMembersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ContactGroupCreateReqGroupMembersItem) encodeFields(e *jx.Encoder) {
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
}

var jsonFieldsNameOfContactGroupCreateReqGroupMembersItem = [2]string{
	0: "type",
	1: "id",
}

// Decode decodes ContactGroupCreateReqGroupMembersItem from json.
func (s *ContactGroupCreateReqGroupMembersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ContactGroupCreateReqGroupMembersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ContactGroupCreateReqGroupMembersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ContactGroupCreateReqGroupMembersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ContactGroupCreateReqGroupMembersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ContactGroupMemberAddCreated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ContactGroupMemberAddCreated) encodeFields(e *jx.Encoder) {
	{
		if s.MemberIds != nil {
			e.FieldStart("member_ids")
			e.ArrStart()
			for _, elem := range s.MemberIds {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfContactGroupMemberAddCreated = [1]string{
	0: "member_ids",
}

// Decode decodes ContactGroupMemberAddCreated from json.
func (s *ContactGroupMemberAddCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ContactGroupMemberAddCreated to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "member_ids":
			if err := func() error {
				s.MemberIds = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.MemberIds = append(s.MemberIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"member_ids\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ContactGroupMemberAddCreated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ContactGroupMemberAddCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ContactGroupMemberAddCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ContactGroupMemberAddReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ContactGroupMemberAddReq) encodeFields(e *jx.Encoder) {
	{
		if s.GroupMembers != nil {
			e.FieldStart("group_members")
			e.ArrStart()
			for _, elem := range s.GroupMembers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfContactGroupMemberAddReq = [1]string{
	0: "group_members",
}

// Decode decodes ContactGroupMemberAddReq from json.
func (s *ContactGroupMemberAddReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ContactGroupMemberAddReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "group_members":
			if err := func() error {
				s.GroupMembers = make([]ContactGroupMemberAddReqGroupMembersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ContactGroupMemberAddReqGroupMembersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.GroupMembers = append(s.GroupMembers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"group_members\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ContactGroupMemberAddReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ContactGroupMemberAddReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ContactGroupMemberAddReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ContactGroupMemberAddReqGroupMembersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ContactGroupMemberAddReqGroupMembersItem) encodeFields(e *jx.Encoder) {
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
}

var jsonFieldsNameOfContactGroupMemberAddReqGroupMembersItem = [2]string{
	0: "type",
	1: "id",
}

// Decode decodes ContactGroupMemberAddReqGroupMembersItem from json.
func (s *ContactGroupMemberAddReqGroupMembersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ContactGroupMemberAddReqGroupMembersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ContactGroupMemberAddReqGroupMembersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ContactGroupMemberAddReqGroupMembersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ContactGroupMemberAddReqGroupMembersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ContactGroupMembersOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ContactGroupMembersOK) encodeFields(e *jx.Encoder) {
	{
		if s.Members != nil {
			e.FieldStart("members")
			e.ArrStart()
			for _, elem := range s.Members {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
}

var jsonFieldsNameOfContactGroupMembersOK = [3]string{
	0: "members",
	1: "next_page_token",
	2: "page_size",
}

// Decode decodes ContactGroupMembersOK from json.
func (s *ContactGroupMembersOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ContactGroupMembersOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "members":
			if err := func() error {
				s.Members = make([]ContactGroupMembersOKMembersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ContactGroupMembersOKMembersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Members = append(s.Members, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"members\"")
			}
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ContactGroupMembersOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ContactGroupMembersOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ContactGroupMembersOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ContactGroupMembersOKMembersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ContactGroupMembersOKMembersItem) encodeFields(e *jx.Encoder) {
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfContactGroupMembersOKMembersItem = [3]string{
	0: "type",
	1: "id",
	2: "name",
}

// Decode decodes ContactGroupMembersOKMembersItem from json.
func (s *ContactGroupMembersOKMembersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ContactGroupMembersOKMembersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ContactGroupMembersOKMembersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ContactGroupMembersOKMembersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ContactGroupMembersOKMembersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ContactGroupOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ContactGroupOK) encodeFields(e *jx.Encoder) {
	{
		if s.GroupID.Set {
			e.FieldStart("group_id")
			s.GroupID.Encode(e)
		}
	}
	{
		if s.GroupName.Set {
			e.FieldStart("group_name")
			s.GroupName.Encode(e)
		}
	}
	{
		if s.TotalMembers.Set {
			e.FieldStart("total_members")
			s.TotalMembers.Encode(e)
		}
	}
	{
		if s.GroupPrivacy.Set {
			e.FieldStart("group_privacy")
			s.GroupPrivacy.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
}

var jsonFieldsNameOfContactGroupOK = [5]string{
	0: "group_id",
	1: "group_name",
	2: "total_members",
	3: "group_privacy",
	4: "description",
}

// Decode decodes ContactGroupOK from json.
func (s *ContactGroupOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ContactGroupOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "group_id":
			if err := func() error {
				s.GroupID.Reset()
				if err := s.GroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"group_id\"")
			}
		case "group_name":
			if err := func() error {
				s.GroupName.Reset()
				if err := s.GroupName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"group_name\"")
			}
		case "total_members":
			if err := func() error {
				s.TotalMembers.Reset()
				if err := s.TotalMembers.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_members\"")
			}
		case "group_privacy":
			if err := func() error {
				s.GroupPrivacy.Reset()
				if err := s.GroupPrivacy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"group_privacy\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ContactGroupOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ContactGroupOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ContactGroupOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ContactGroupUpdateReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ContactGroupUpdateReq) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Privacy.Set {
			e.FieldStart("privacy")
			s.Privacy.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
}

var jsonFieldsNameOfContactGroupUpdateReq = [3]string{
	0: "name",
	1: "privacy",
	2: "description",
}

// Decode decodes ContactGroupUpdateReq from json.
func (s *ContactGroupUpdateReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ContactGroupUpdateReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "privacy":
			if err := func() error {
				s.Privacy.Reset()
				if err := s.Privacy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"privacy\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ContactGroupUpdateReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ContactGroupUpdateReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ContactGroupUpdateReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ContactGroupsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ContactGroupsOK) encodeFields(e *jx.Encoder) {
	{
		if s.Groups != nil {
			e.FieldStart("groups")
			e.ArrStart()
			for _, elem := range s.Groups {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
}

var jsonFieldsNameOfContactGroupsOK = [3]string{
	0: "groups",
	1: "next_page_token",
	2: "page_size",
}

// Decode decodes ContactGroupsOK from json.
func (s *ContactGroupsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ContactGroupsOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "groups":
			if err := func() error {
				s.Groups = make([]ContactGroupsOKGroupsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ContactGroupsOKGroupsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Groups = append(s.Groups, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"groups\"")
			}
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ContactGroupsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ContactGroupsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ContactGroupsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ContactGroupsOKGroupsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ContactGroupsOKGroupsItem) encodeFields(e *jx.Encoder) {
	{
		if s.GroupID.Set {
			e.FieldStart("group_id")
			s.GroupID.Encode(e)
		}
	}
	{
		if s.GroupName.Set {
			e.FieldStart("group_name")
			s.GroupName.Encode(e)
		}
	}
	{
		if s.GroupPrivacy.Set {
			e.FieldStart("group_privacy")
			s.GroupPrivacy.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
}

var jsonFieldsNameOfContactGroupsOKGroupsItem = [4]string{
	0: "group_id",
	1: "group_name",
	2: "group_privacy",
	3: "description",
}

// Decode decodes ContactGroupsOKGroupsItem from json.
func (s *ContactGroupsOKGroupsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ContactGroupsOKGroupsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "group_id":
			if err := func() error {
				s.GroupID.Reset()
				if err := s.GroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"group_id\"")
			}
		case "group_name":
			if err := func() error {
				s.GroupName.Reset()
				if err := s.GroupName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"group_name\"")
			}
		case "group_privacy":
			if err := func() error {
				s.GroupPrivacy.Reset()
				if err := s.GroupPrivacy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"group_privacy\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ContactGroupsOKGroupsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ContactGroupsOKGroupsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ContactGroupsOKGroupsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ErrorResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ErrorResponse) encodeFields(e *jx.Encoder) {
	{
		if s.Code.Set {
			e.FieldStart("code")
			s.Code.Encode(e)
		}
	}
	{
		if s.Message.Set {
			e.FieldStart("message")
			s.Message.Encode(e)
		}
	}
}

var jsonFieldsNameOfErrorResponse = [2]string{
	0: "code",
	1: "message",
}

// Decode decodes ErrorResponse from json.
func (s *ErrorResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ErrorResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "code":
			if err := func() error {
				s.Code.Reset()
				if err := s.Code.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code\"")
			}
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ErrorResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ErrorResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ErrorResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetCollaborationDeviceOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetCollaborationDeviceOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.DeviceName.Set {
			e.FieldStart("device_name")
			s.DeviceName.Encode(e)
		}
	}
	{
		if s.RoomName.Set {
			e.FieldStart("room_name")
			s.RoomName.Encode(e)
		}
	}
	{
		if s.RoomUserID.Set {
			e.FieldStart("room_user_id")
			s.RoomUserID.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCollaborationDeviceOK = [5]string{
	0: "id",
	1: "device_name",
	2: "room_name",
	3: "room_user_id",
	4: "status",
}

// Decode decodes GetCollaborationDeviceOK from json.
func (s *GetCollaborationDeviceOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCollaborationDeviceOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "device_name":
			if err := func() error {
				s.DeviceName.Reset()
				if err := s.DeviceName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_name\"")
			}
		case "room_name":
			if err := func() error {
				s.RoomName.Reset()
				if err := s.RoomName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"room_name\"")
			}
		case "room_user_id":
			if err := func() error {
				s.RoomUserID.Reset()
				if err := s.RoomUserID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"room_user_id\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCollaborationDeviceOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetCollaborationDeviceOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCollaborationDeviceOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupLockSettingsOK as json.
func (s GetGroupLockSettingsOK) Encode(e *jx.Encoder) {
	switch s.Type {
	case GetGroupLockSettingsOK0GetGroupLockSettingsOK:
		s.GetGroupLockSettingsOK0.Encode(e)
	case GetGroupLockSettingsOK1GetGroupLockSettingsOK:
		s.GetGroupLockSettingsOK1.Encode(e)
	}
}

func (s GetGroupLockSettingsOK) encodeFields(e *jx.Encoder) {
	switch s.Type {
	case GetGroupLockSettingsOK0GetGroupLockSettingsOK:
		s.GetGroupLockSettingsOK0.encodeFields(e)
	case GetGroupLockSettingsOK1GetGroupLockSettingsOK:
		s.GetGroupLockSettingsOK1.encodeFields(e)
	}
}

// Decode decodes GetGroupLockSettingsOK from json.
func (s *GetGroupLockSettingsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupLockSettingsOK to nil")
	}
	// Sum type fields.
	if typ := d.Next(); typ != jx.Object {
		return errors.Errorf("unexpected json type %q", typ)
	}

	var found bool
	if err := d.Capture(func(d *jx.Decoder) error {
		return d.ObjBytes(func(d *jx.Decoder, key []byte) error {
			switch string(key) {
			case "audio_conferencing":
				match := GetGroupLockSettingsOK0GetGroupLockSettingsOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "email_notification":
				match := GetGroupLockSettingsOK0GetGroupLockSettingsOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "in_meeting":
				match := GetGroupLockSettingsOK0GetGroupLockSettingsOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "other_options":
				match := GetGroupLockSettingsOK0GetGroupLockSettingsOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "recording":
				match := GetGroupLockSettingsOK0GetGroupLockSettingsOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "schedule_meeting":
				match := GetGroupLockSettingsOK0GetGroupLockSettingsOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "telephony":
				match := GetGroupLockSettingsOK0GetGroupLockSettingsOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "meeting_security":
				match := GetGroupLockSettingsOK1GetGroupLockSettingsOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			}
			return d.Skip()
		})
	}); err != nil {
		return errors.Wrap(err, "capture")
	}
	if !found {
		return errors.New("unable to detect sum type variant")
	}
	switch s.Type {
	case GetGroupLockSettingsOK0GetGroupLockSettingsOK:
		if err := s.GetGroupLockSettingsOK0.Decode(d); err != nil {
			return err
		}
	case GetGroupLockSettingsOK1GetGroupLockSettingsOK:
		if err := s.GetGroupLockSettingsOK1.Decode(d); err != nil {
			return err
		}
	default:
		return errors.Errorf("inferred invalid type: %s", s.Type)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GetGroupLockSettingsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupLockSettingsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupLockSettingsOK0) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupLockSettingsOK0) encodeFields(e *jx.Encoder) {
	{
		if s.AudioConferencing.Set {
			e.FieldStart("audio_conferencing")
			s.AudioConferencing.Encode(e)
		}
	}
	{
		if s.EmailNotification.Set {
			e.FieldStart("email_notification")
			s.EmailNotification.Encode(e)
		}
	}
	{
		if s.InMeeting.Set {
			e.FieldStart("in_meeting")
			s.InMeeting.Encode(e)
		}
	}
	{
		if s.OtherOptions.Set {
			e.FieldStart("other_options")
			s.OtherOptions.Encode(e)
		}
	}
	{
		if s.Recording.Set {
			e.FieldStart("recording")
			s.Recording.Encode(e)
		}
	}
	{
		if s.ScheduleMeeting.Set {
			e.FieldStart("schedule_meeting")
			s.ScheduleMeeting.Encode(e)
		}
	}
	{
		if s.Telephony.Set {
			e.FieldStart("telephony")
			s.Telephony.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupLockSettingsOK0 = [7]string{
	0: "audio_conferencing",
	1: "email_notification",
	2: "in_meeting",
	3: "other_options",
	4: "recording",
	5: "schedule_meeting",
	6: "telephony",
}

// Decode decodes GetGroupLockSettingsOK0 from json.
func (s *GetGroupLockSettingsOK0) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupLockSettingsOK0 to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_conferencing":
			if err := func() error {
				s.AudioConferencing.Reset()
				if err := s.AudioConferencing.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_conferencing\"")
			}
		case "email_notification":
			if err := func() error {
				s.EmailNotification.Reset()
				if err := s.EmailNotification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email_notification\"")
			}
		case "in_meeting":
			if err := func() error {
				s.InMeeting.Reset()
				if err := s.InMeeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"in_meeting\"")
			}
		case "other_options":
			if err := func() error {
				s.OtherOptions.Reset()
				if err := s.OtherOptions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"other_options\"")
			}
		case "recording":
			if err := func() error {
				s.Recording.Reset()
				if err := s.Recording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording\"")
			}
		case "schedule_meeting":
			if err := func() error {
				s.ScheduleMeeting.Reset()
				if err := s.ScheduleMeeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"schedule_meeting\"")
			}
		case "telephony":
			if err := func() error {
				s.Telephony.Reset()
				if err := s.Telephony.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"telephony\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupLockSettingsOK0")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupLockSettingsOK0) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupLockSettingsOK0) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupLockSettingsOK0AudioConferencing) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupLockSettingsOK0AudioConferencing) encodeFields(e *jx.Encoder) {
	{
		if s.TollFreeAndFeeBasedTollCall.Set {
			e.FieldStart("toll_free_and_fee_based_toll_call")
			s.TollFreeAndFeeBasedTollCall.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupLockSettingsOK0AudioConferencing = [1]string{
	0: "toll_free_and_fee_based_toll_call",
}

// Decode decodes GetGroupLockSettingsOK0AudioConferencing from json.
func (s *GetGroupLockSettingsOK0AudioConferencing) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupLockSettingsOK0AudioConferencing to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "toll_free_and_fee_based_toll_call":
			if err := func() error {
				s.TollFreeAndFeeBasedTollCall.Reset()
				if err := s.TollFreeAndFeeBasedTollCall.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"toll_free_and_fee_based_toll_call\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupLockSettingsOK0AudioConferencing")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupLockSettingsOK0AudioConferencing) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupLockSettingsOK0AudioConferencing) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupLockSettingsOK0EmailNotification) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupLockSettingsOK0EmailNotification) encodeFields(e *jx.Encoder) {
	{
		if s.AlternativeHostReminder.Set {
			e.FieldStart("alternative_host_reminder")
			s.AlternativeHostReminder.Encode(e)
		}
	}
	{
		if s.CancelMeetingReminder.Set {
			e.FieldStart("cancel_meeting_reminder")
			s.CancelMeetingReminder.Encode(e)
		}
	}
	{
		if s.CloudRecordingAvailableReminder.Set {
			e.FieldStart("cloud_recording_available_reminder")
			s.CloudRecordingAvailableReminder.Encode(e)
		}
	}
	{
		if s.JbhReminder.Set {
			e.FieldStart("jbh_reminder")
			s.JbhReminder.Encode(e)
		}
	}
	{
		if s.ScheduleForReminder.Set {
			e.FieldStart("schedule_for_reminder")
			s.ScheduleForReminder.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupLockSettingsOK0EmailNotification = [5]string{
	0: "alternative_host_reminder",
	1: "cancel_meeting_reminder",
	2: "cloud_recording_available_reminder",
	3: "jbh_reminder",
	4: "schedule_for_reminder",
}

// Decode decodes GetGroupLockSettingsOK0EmailNotification from json.
func (s *GetGroupLockSettingsOK0EmailNotification) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupLockSettingsOK0EmailNotification to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "alternative_host_reminder":
			if err := func() error {
				s.AlternativeHostReminder.Reset()
				if err := s.AlternativeHostReminder.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"alternative_host_reminder\"")
			}
		case "cancel_meeting_reminder":
			if err := func() error {
				s.CancelMeetingReminder.Reset()
				if err := s.CancelMeetingReminder.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cancel_meeting_reminder\"")
			}
		case "cloud_recording_available_reminder":
			if err := func() error {
				s.CloudRecordingAvailableReminder.Reset()
				if err := s.CloudRecordingAvailableReminder.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cloud_recording_available_reminder\"")
			}
		case "jbh_reminder":
			if err := func() error {
				s.JbhReminder.Reset()
				if err := s.JbhReminder.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"jbh_reminder\"")
			}
		case "schedule_for_reminder":
			if err := func() error {
				s.ScheduleForReminder.Reset()
				if err := s.ScheduleForReminder.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"schedule_for_reminder\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupLockSettingsOK0EmailNotification")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupLockSettingsOK0EmailNotification) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupLockSettingsOK0EmailNotification) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupLockSettingsOK0InMeeting) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupLockSettingsOK0InMeeting) encodeFields(e *jx.Encoder) {
	{
		if s.AlertGuestJoin.Set {
			e.FieldStart("alert_guest_join")
			s.AlertGuestJoin.Encode(e)
		}
	}
	{
		if s.AllowUsersToDeleteMessagesInMeetingChat.Set {
			e.FieldStart("allow_users_to_delete_messages_in_meeting_chat")
			s.AllowUsersToDeleteMessagesInMeetingChat.Encode(e)
		}
	}
	{
		if s.AllowLiveStreaming.Set {
			e.FieldStart("allow_live_streaming")
			s.AllowLiveStreaming.Encode(e)
		}
	}
	{
		if s.AllowShowZoomWindows.Set {
			e.FieldStart("allow_show_zoom_windows")
			s.AllowShowZoomWindows.Encode(e)
		}
	}
	{
		if s.Annotation.Set {
			e.FieldStart("annotation")
			s.Annotation.Encode(e)
		}
	}
	{
		if s.AttendeeOnHold.Set {
			e.FieldStart("attendee_on_hold")
			s.AttendeeOnHold.Encode(e)
		}
	}
	{
		if s.AutoAnswer.Set {
			e.FieldStart("auto_answer")
			s.AutoAnswer.Encode(e)
		}
	}
	{
		if s.AutoGeneratedCaptions.Set {
			e.FieldStart("auto_generated_captions")
			s.AutoGeneratedCaptions.Encode(e)
		}
	}
	{
		if s.AutoSavingChat.Set {
			e.FieldStart("auto_saving_chat")
			s.AutoSavingChat.Encode(e)
		}
	}
	{
		if s.BreakoutRoom.Set {
			e.FieldStart("breakout_room")
			s.BreakoutRoom.Encode(e)
		}
	}
	{
		if s.Chat.Set {
			e.FieldStart("chat")
			s.Chat.Encode(e)
		}
	}
	{
		if s.MeetingQuestionAnswer.Set {
			e.FieldStart("meeting_question_answer")
			s.MeetingQuestionAnswer.Encode(e)
		}
	}
	{
		if s.ClosedCaption.Set {
			e.FieldStart("closed_caption")
			s.ClosedCaption.Encode(e)
		}
	}
	{
		if s.CoHost.Set {
			e.FieldStart("co_host")
			s.CoHost.Encode(e)
		}
	}
	{
		if s.CustomDataCenterRegions.Set {
			e.FieldStart("custom_data_center_regions")
			s.CustomDataCenterRegions.Encode(e)
		}
	}
	{
		if s.DisableScreenSharingForHostMeetings.Set {
			e.FieldStart("disable_screen_sharing_for_host_meetings")
			s.DisableScreenSharingForHostMeetings.Encode(e)
		}
	}
	{
		if s.DisableScreenSharingForInMeetingGuests.Set {
			e.FieldStart("disable_screen_sharing_for_in_meeting_guests")
			s.DisableScreenSharingForInMeetingGuests.Encode(e)
		}
	}
	{
		if s.E2eEncryption.Set {
			e.FieldStart("e2e_encryption")
			s.E2eEncryption.Encode(e)
		}
	}
	{
		if s.EntryExitChime.Set {
			e.FieldStart("entry_exit_chime")
			s.EntryExitChime.Encode(e)
		}
	}
	{
		if s.FarEndCameraControl.Set {
			e.FieldStart("far_end_camera_control")
			s.FarEndCameraControl.Encode(e)
		}
	}
	{
		if s.Feedback.Set {
			e.FieldStart("feedback")
			s.Feedback.Encode(e)
		}
	}
	{
		if s.FileTransfer.Set {
			e.FieldStart("file_transfer")
			s.FileTransfer.Encode(e)
		}
	}
	{
		if s.FullTranscript.Set {
			e.FieldStart("full_transcript")
			s.FullTranscript.Encode(e)
		}
	}
	{
		if s.GroupHd.Set {
			e.FieldStart("group_hd")
			s.GroupHd.Encode(e)
		}
	}
	{
		if s.WebinarGroupHd.Set {
			e.FieldStart("webinar_group_hd")
			s.WebinarGroupHd.Encode(e)
		}
	}
	{
		if s.LanguageInterpretation.Set {
			e.FieldStart("language_interpretation")
			s.LanguageInterpretation.Encode(e)
		}
	}
	{
		if s.SignLanguageInterpretation.Set {
			e.FieldStart("sign_language_interpretation")
			s.SignLanguageInterpretation.Encode(e)
		}
	}
	{
		if s.ManualCaptions.Set {
			e.FieldStart("manual_captions")
			s.ManualCaptions.Encode(e)
		}
	}
	{
		if s.MeetingReactions.Set {
			e.FieldStart("meeting_reactions")
			s.MeetingReactions.Encode(e)
		}
	}
	{
		if s.WebinarReactions.Set {
			e.FieldStart("webinar_reactions")
			s.WebinarReactions.Encode(e)
		}
	}
	{
		if s.MeetingSurvey.Set {
			e.FieldStart("meeting_survey")
			s.MeetingSurvey.Encode(e)
		}
	}
	{
		if s.NonVerbalFeedback.Set {
			e.FieldStart("non_verbal_feedback")
			s.NonVerbalFeedback.Encode(e)
		}
	}
	{
		if s.OriginalAudio.Set {
			e.FieldStart("original_audio")
			s.OriginalAudio.Encode(e)
		}
	}
	{
		if s.Polling.Set {
			e.FieldStart("polling")
			s.Polling.Encode(e)
		}
	}
	{
		if s.PostMeetingFeedback.Set {
			e.FieldStart("post_meeting_feedback")
			s.PostMeetingFeedback.Encode(e)
		}
	}
	{
		if s.PrivateChat.Set {
			e.FieldStart("private_chat")
			s.PrivateChat.Encode(e)
		}
	}
	{
		if s.RemoteControl.Set {
			e.FieldStart("remote_control")
			s.RemoteControl.Encode(e)
		}
	}
	{
		if s.RemoteSupport.Set {
			e.FieldStart("remote_support")
			s.RemoteSupport.Encode(e)
		}
	}
	{
		if s.RequestPermissionToUnmuteParticipants.Set {
			e.FieldStart("request_permission_to_unmute_participants")
			s.RequestPermissionToUnmuteParticipants.Encode(e)
		}
	}
	{
		if s.SaveCaption.Set {
			e.FieldStart("save_caption")
			s.SaveCaption.Encode(e)
		}
	}
	{
		if s.SaveCaptions.Set {
			e.FieldStart("save_captions")
			s.SaveCaptions.Encode(e)
		}
	}
	{
		if s.ScreenSharing.Set {
			e.FieldStart("screen_sharing")
			s.ScreenSharing.Encode(e)
		}
	}
	{
		if s.SendingDefaultEmailInvites.Set {
			e.FieldStart("sending_default_email_invites")
			s.SendingDefaultEmailInvites.Encode(e)
		}
	}
	{
		if s.ShowAJoinFromYourBrowserLink.Set {
			e.FieldStart("show_a_join_from_your_browser_link")
			s.ShowAJoinFromYourBrowserLink.Encode(e)
		}
	}
	{
		if s.ShowBrowserJoinLink.Set {
			e.FieldStart("show_browser_join_link")
			s.ShowBrowserJoinLink.Encode(e)
		}
	}
	{
		if s.ShowMeetingControlToolbar.Set {
			e.FieldStart("show_meeting_control_toolbar")
			s.ShowMeetingControlToolbar.Encode(e)
		}
	}
	{
		if s.SlideControl.Set {
			e.FieldStart("slide_control")
			s.SlideControl.Encode(e)
		}
	}
	{
		if s.StereoAudio.Set {
			e.FieldStart("stereo_audio")
			s.StereoAudio.Encode(e)
		}
	}
	{
		if s.UseHTMLFormatEmail.Set {
			e.FieldStart("use_html_format_email")
			s.UseHTMLFormatEmail.Encode(e)
		}
	}
	{
		if s.VirtualBackground.Set {
			e.FieldStart("virtual_background")
			s.VirtualBackground.Encode(e)
		}
	}
	{
		if s.WaitingRoom.Set {
			e.FieldStart("waiting_room")
			s.WaitingRoom.Encode(e)
		}
	}
	{
		if s.WebinarChat.Set {
			e.FieldStart("webinar_chat")
			s.WebinarChat.Encode(e)
		}
	}
	{
		if s.WebinarLiveStreaming.Set {
			e.FieldStart("webinar_live_streaming")
			s.WebinarLiveStreaming.Encode(e)
		}
	}
	{
		if s.WebinarPolling.Set {
			e.FieldStart("webinar_polling")
			s.WebinarPolling.Encode(e)
		}
	}
	{
		if s.WebinarQuestionAnswer.Set {
			e.FieldStart("webinar_question_answer")
			s.WebinarQuestionAnswer.Encode(e)
		}
	}
	{
		if s.WebinarSurvey.Set {
			e.FieldStart("webinar_survey")
			s.WebinarSurvey.Encode(e)
		}
	}
	{
		if s.Whiteboard.Set {
			e.FieldStart("whiteboard")
			s.Whiteboard.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupLockSettingsOK0InMeeting = [57]string{
	0:  "alert_guest_join",
	1:  "allow_users_to_delete_messages_in_meeting_chat",
	2:  "allow_live_streaming",
	3:  "allow_show_zoom_windows",
	4:  "annotation",
	5:  "attendee_on_hold",
	6:  "auto_answer",
	7:  "auto_generated_captions",
	8:  "auto_saving_chat",
	9:  "breakout_room",
	10: "chat",
	11: "meeting_question_answer",
	12: "closed_caption",
	13: "co_host",
	14: "custom_data_center_regions",
	15: "disable_screen_sharing_for_host_meetings",
	16: "disable_screen_sharing_for_in_meeting_guests",
	17: "e2e_encryption",
	18: "entry_exit_chime",
	19: "far_end_camera_control",
	20: "feedback",
	21: "file_transfer",
	22: "full_transcript",
	23: "group_hd",
	24: "webinar_group_hd",
	25: "language_interpretation",
	26: "sign_language_interpretation",
	27: "manual_captions",
	28: "meeting_reactions",
	29: "webinar_reactions",
	30: "meeting_survey",
	31: "non_verbal_feedback",
	32: "original_audio",
	33: "polling",
	34: "post_meeting_feedback",
	35: "private_chat",
	36: "remote_control",
	37: "remote_support",
	38: "request_permission_to_unmute_participants",
	39: "save_caption",
	40: "save_captions",
	41: "screen_sharing",
	42: "sending_default_email_invites",
	43: "show_a_join_from_your_browser_link",
	44: "show_browser_join_link",
	45: "show_meeting_control_toolbar",
	46: "slide_control",
	47: "stereo_audio",
	48: "use_html_format_email",
	49: "virtual_background",
	50: "waiting_room",
	51: "webinar_chat",
	52: "webinar_live_streaming",
	53: "webinar_polling",
	54: "webinar_question_answer",
	55: "webinar_survey",
	56: "whiteboard",
}

// Decode decodes GetGroupLockSettingsOK0InMeeting from json.
func (s *GetGroupLockSettingsOK0InMeeting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupLockSettingsOK0InMeeting to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "alert_guest_join":
			if err := func() error {
				s.AlertGuestJoin.Reset()
				if err := s.AlertGuestJoin.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"alert_guest_join\"")
			}
		case "allow_users_to_delete_messages_in_meeting_chat":
			if err := func() error {
				s.AllowUsersToDeleteMessagesInMeetingChat.Reset()
				if err := s.AllowUsersToDeleteMessagesInMeetingChat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_users_to_delete_messages_in_meeting_chat\"")
			}
		case "allow_live_streaming":
			if err := func() error {
				s.AllowLiveStreaming.Reset()
				if err := s.AllowLiveStreaming.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_live_streaming\"")
			}
		case "allow_show_zoom_windows":
			if err := func() error {
				s.AllowShowZoomWindows.Reset()
				if err := s.AllowShowZoomWindows.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_show_zoom_windows\"")
			}
		case "annotation":
			if err := func() error {
				s.Annotation.Reset()
				if err := s.Annotation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"annotation\"")
			}
		case "attendee_on_hold":
			if err := func() error {
				s.AttendeeOnHold.Reset()
				if err := s.AttendeeOnHold.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"attendee_on_hold\"")
			}
		case "auto_answer":
			if err := func() error {
				s.AutoAnswer.Reset()
				if err := s.AutoAnswer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_answer\"")
			}
		case "auto_generated_captions":
			if err := func() error {
				s.AutoGeneratedCaptions.Reset()
				if err := s.AutoGeneratedCaptions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_generated_captions\"")
			}
		case "auto_saving_chat":
			if err := func() error {
				s.AutoSavingChat.Reset()
				if err := s.AutoSavingChat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_saving_chat\"")
			}
		case "breakout_room":
			if err := func() error {
				s.BreakoutRoom.Reset()
				if err := s.BreakoutRoom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"breakout_room\"")
			}
		case "chat":
			if err := func() error {
				s.Chat.Reset()
				if err := s.Chat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"chat\"")
			}
		case "meeting_question_answer":
			if err := func() error {
				s.MeetingQuestionAnswer.Reset()
				if err := s.MeetingQuestionAnswer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_question_answer\"")
			}
		case "closed_caption":
			if err := func() error {
				s.ClosedCaption.Reset()
				if err := s.ClosedCaption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"closed_caption\"")
			}
		case "co_host":
			if err := func() error {
				s.CoHost.Reset()
				if err := s.CoHost.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"co_host\"")
			}
		case "custom_data_center_regions":
			if err := func() error {
				s.CustomDataCenterRegions.Reset()
				if err := s.CustomDataCenterRegions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"custom_data_center_regions\"")
			}
		case "disable_screen_sharing_for_host_meetings":
			if err := func() error {
				s.DisableScreenSharingForHostMeetings.Reset()
				if err := s.DisableScreenSharingForHostMeetings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"disable_screen_sharing_for_host_meetings\"")
			}
		case "disable_screen_sharing_for_in_meeting_guests":
			if err := func() error {
				s.DisableScreenSharingForInMeetingGuests.Reset()
				if err := s.DisableScreenSharingForInMeetingGuests.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"disable_screen_sharing_for_in_meeting_guests\"")
			}
		case "e2e_encryption":
			if err := func() error {
				s.E2eEncryption.Reset()
				if err := s.E2eEncryption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"e2e_encryption\"")
			}
		case "entry_exit_chime":
			if err := func() error {
				s.EntryExitChime.Reset()
				if err := s.EntryExitChime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"entry_exit_chime\"")
			}
		case "far_end_camera_control":
			if err := func() error {
				s.FarEndCameraControl.Reset()
				if err := s.FarEndCameraControl.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"far_end_camera_control\"")
			}
		case "feedback":
			if err := func() error {
				s.Feedback.Reset()
				if err := s.Feedback.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"feedback\"")
			}
		case "file_transfer":
			if err := func() error {
				s.FileTransfer.Reset()
				if err := s.FileTransfer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"file_transfer\"")
			}
		case "full_transcript":
			if err := func() error {
				s.FullTranscript.Reset()
				if err := s.FullTranscript.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"full_transcript\"")
			}
		case "group_hd":
			if err := func() error {
				s.GroupHd.Reset()
				if err := s.GroupHd.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"group_hd\"")
			}
		case "webinar_group_hd":
			if err := func() error {
				s.WebinarGroupHd.Reset()
				if err := s.WebinarGroupHd.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webinar_group_hd\"")
			}
		case "language_interpretation":
			if err := func() error {
				s.LanguageInterpretation.Reset()
				if err := s.LanguageInterpretation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"language_interpretation\"")
			}
		case "sign_language_interpretation":
			if err := func() error {
				s.SignLanguageInterpretation.Reset()
				if err := s.SignLanguageInterpretation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sign_language_interpretation\"")
			}
		case "manual_captions":
			if err := func() error {
				s.ManualCaptions.Reset()
				if err := s.ManualCaptions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"manual_captions\"")
			}
		case "meeting_reactions":
			if err := func() error {
				s.MeetingReactions.Reset()
				if err := s.MeetingReactions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_reactions\"")
			}
		case "webinar_reactions":
			if err := func() error {
				s.WebinarReactions.Reset()
				if err := s.WebinarReactions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webinar_reactions\"")
			}
		case "meeting_survey":
			if err := func() error {
				s.MeetingSurvey.Reset()
				if err := s.MeetingSurvey.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_survey\"")
			}
		case "non_verbal_feedback":
			if err := func() error {
				s.NonVerbalFeedback.Reset()
				if err := s.NonVerbalFeedback.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"non_verbal_feedback\"")
			}
		case "original_audio":
			if err := func() error {
				s.OriginalAudio.Reset()
				if err := s.OriginalAudio.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_audio\"")
			}
		case "polling":
			if err := func() error {
				s.Polling.Reset()
				if err := s.Polling.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"polling\"")
			}
		case "post_meeting_feedback":
			if err := func() error {
				s.PostMeetingFeedback.Reset()
				if err := s.PostMeetingFeedback.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"post_meeting_feedback\"")
			}
		case "private_chat":
			if err := func() error {
				s.PrivateChat.Reset()
				if err := s.PrivateChat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"private_chat\"")
			}
		case "remote_control":
			if err := func() error {
				s.RemoteControl.Reset()
				if err := s.RemoteControl.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"remote_control\"")
			}
		case "remote_support":
			if err := func() error {
				s.RemoteSupport.Reset()
				if err := s.RemoteSupport.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"remote_support\"")
			}
		case "request_permission_to_unmute_participants":
			if err := func() error {
				s.RequestPermissionToUnmuteParticipants.Reset()
				if err := s.RequestPermissionToUnmuteParticipants.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"request_permission_to_unmute_participants\"")
			}
		case "save_caption":
			if err := func() error {
				s.SaveCaption.Reset()
				if err := s.SaveCaption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"save_caption\"")
			}
		case "save_captions":
			if err := func() error {
				s.SaveCaptions.Reset()
				if err := s.SaveCaptions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"save_captions\"")
			}
		case "screen_sharing":
			if err := func() error {
				s.ScreenSharing.Reset()
				if err := s.ScreenSharing.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"screen_sharing\"")
			}
		case "sending_default_email_invites":
			if err := func() error {
				s.SendingDefaultEmailInvites.Reset()
				if err := s.SendingDefaultEmailInvites.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sending_default_email_invites\"")
			}
		case "show_a_join_from_your_browser_link":
			if err := func() error {
				s.ShowAJoinFromYourBrowserLink.Reset()
				if err := s.ShowAJoinFromYourBrowserLink.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"show_a_join_from_your_browser_link\"")
			}
		case "show_browser_join_link":
			if err := func() error {
				s.ShowBrowserJoinLink.Reset()
				if err := s.ShowBrowserJoinLink.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"show_browser_join_link\"")
			}
		case "show_meeting_control_toolbar":
			if err := func() error {
				s.ShowMeetingControlToolbar.Reset()
				if err := s.ShowMeetingControlToolbar.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"show_meeting_control_toolbar\"")
			}
		case "slide_control":
			if err := func() error {
				s.SlideControl.Reset()
				if err := s.SlideControl.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"slide_control\"")
			}
		case "stereo_audio":
			if err := func() error {
				s.StereoAudio.Reset()
				if err := s.StereoAudio.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"stereo_audio\"")
			}
		case "use_html_format_email":
			if err := func() error {
				s.UseHTMLFormatEmail.Reset()
				if err := s.UseHTMLFormatEmail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"use_html_format_email\"")
			}
		case "virtual_background":
			if err := func() error {
				s.VirtualBackground.Reset()
				if err := s.VirtualBackground.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"virtual_background\"")
			}
		case "waiting_room":
			if err := func() error {
				s.WaitingRoom.Reset()
				if err := s.WaitingRoom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"waiting_room\"")
			}
		case "webinar_chat":
			if err := func() error {
				s.WebinarChat.Reset()
				if err := s.WebinarChat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webinar_chat\"")
			}
		case "webinar_live_streaming":
			if err := func() error {
				s.WebinarLiveStreaming.Reset()
				if err := s.WebinarLiveStreaming.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webinar_live_streaming\"")
			}
		case "webinar_polling":
			if err := func() error {
				s.WebinarPolling.Reset()
				if err := s.WebinarPolling.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webinar_polling\"")
			}
		case "webinar_question_answer":
			if err := func() error {
				s.WebinarQuestionAnswer.Reset()
				if err := s.WebinarQuestionAnswer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webinar_question_answer\"")
			}
		case "webinar_survey":
			if err := func() error {
				s.WebinarSurvey.Reset()
				if err := s.WebinarSurvey.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webinar_survey\"")
			}
		case "whiteboard":
			if err := func() error {
				s.Whiteboard.Reset()
				if err := s.Whiteboard.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"whiteboard\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupLockSettingsOK0InMeeting")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupLockSettingsOK0InMeeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupLockSettingsOK0InMeeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupLockSettingsOK0OtherOptions) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupLockSettingsOK0OtherOptions) encodeFields(e *jx.Encoder) {
	{
		if s.BlurSnapshot.Set {
			e.FieldStart("blur_snapshot")
			s.BlurSnapshot.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupLockSettingsOK0OtherOptions = [1]string{
	0: "blur_snapshot",
}

// Decode decodes GetGroupLockSettingsOK0OtherOptions from json.
func (s *GetGroupLockSettingsOK0OtherOptions) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupLockSettingsOK0OtherOptions to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "blur_snapshot":
			if err := func() error {
				s.BlurSnapshot.Reset()
				if err := s.BlurSnapshot.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"blur_snapshot\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupLockSettingsOK0OtherOptions")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupLockSettingsOK0OtherOptions) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupLockSettingsOK0OtherOptions) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupLockSettingsOK0Recording) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupLockSettingsOK0Recording) encodeFields(e *jx.Encoder) {
	{
		if s.AccountUserAccessRecording.Set {
			e.FieldStart("account_user_access_recording")
			s.AccountUserAccessRecording.Encode(e)
		}
	}
	{
		if s.AutoDeleteCmr.Set {
			e.FieldStart("auto_delete_cmr")
			s.AutoDeleteCmr.Encode(e)
		}
	}
	{
		if s.AutoRecording.Set {
			e.FieldStart("auto_recording")
			s.AutoRecording.Encode(e)
		}
	}
	{
		if s.CloudRecording.Set {
			e.FieldStart("cloud_recording")
			s.CloudRecording.Encode(e)
		}
	}
	{
		if s.CloudRecordingDownload.Set {
			e.FieldStart("cloud_recording_download")
			s.CloudRecordingDownload.Encode(e)
		}
	}
	{
		if s.HostDeleteCloudRecording.Set {
			e.FieldStart("host_delete_cloud_recording")
			s.HostDeleteCloudRecording.Encode(e)
		}
	}
	{
		if s.IPAddressAccessControl.Set {
			e.FieldStart("ip_address_access_control")
			s.IPAddressAccessControl.Encode(e)
		}
	}
	{
		if s.LocalRecording.Set {
			e.FieldStart("local_recording")
			s.LocalRecording.Encode(e)
		}
	}
	{
		if s.PreventHostAccessRecording.Set {
			e.FieldStart("prevent_host_access_recording")
			s.PreventHostAccessRecording.Encode(e)
		}
	}
	{
		if s.RecordingAuthentication.Set {
			e.FieldStart("recording_authentication")
			s.RecordingAuthentication.Encode(e)
		}
	}
	{
		if s.Archive.Set {
			e.FieldStart("archive")
			s.Archive.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupLockSettingsOK0Recording = [11]string{
	0:  "account_user_access_recording",
	1:  "auto_delete_cmr",
	2:  "auto_recording",
	3:  "cloud_recording",
	4:  "cloud_recording_download",
	5:  "host_delete_cloud_recording",
	6:  "ip_address_access_control",
	7:  "local_recording",
	8:  "prevent_host_access_recording",
	9:  "recording_authentication",
	10: "archive",
}

// Decode decodes GetGroupLockSettingsOK0Recording from json.
func (s *GetGroupLockSettingsOK0Recording) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupLockSettingsOK0Recording to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "account_user_access_recording":
			if err := func() error {
				s.AccountUserAccessRecording.Reset()
				if err := s.AccountUserAccessRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_user_access_recording\"")
			}
		case "auto_delete_cmr":
			if err := func() error {
				s.AutoDeleteCmr.Reset()
				if err := s.AutoDeleteCmr.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_delete_cmr\"")
			}
		case "auto_recording":
			if err := func() error {
				s.AutoRecording.Reset()
				if err := s.AutoRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_recording\"")
			}
		case "cloud_recording":
			if err := func() error {
				s.CloudRecording.Reset()
				if err := s.CloudRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cloud_recording\"")
			}
		case "cloud_recording_download":
			if err := func() error {
				s.CloudRecordingDownload.Reset()
				if err := s.CloudRecordingDownload.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cloud_recording_download\"")
			}
		case "host_delete_cloud_recording":
			if err := func() error {
				s.HostDeleteCloudRecording.Reset()
				if err := s.HostDeleteCloudRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"host_delete_cloud_recording\"")
			}
		case "ip_address_access_control":
			if err := func() error {
				s.IPAddressAccessControl.Reset()
				if err := s.IPAddressAccessControl.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ip_address_access_control\"")
			}
		case "local_recording":
			if err := func() error {
				s.LocalRecording.Reset()
				if err := s.LocalRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"local_recording\"")
			}
		case "prevent_host_access_recording":
			if err := func() error {
				s.PreventHostAccessRecording.Reset()
				if err := s.PreventHostAccessRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"prevent_host_access_recording\"")
			}
		case "recording_authentication":
			if err := func() error {
				s.RecordingAuthentication.Reset()
				if err := s.RecordingAuthentication.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_authentication\"")
			}
		case "archive":
			if err := func() error {
				s.Archive.Reset()
				if err := s.Archive.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"archive\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupLockSettingsOK0Recording")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupLockSettingsOK0Recording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupLockSettingsOK0Recording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupLockSettingsOK0RecordingIPAddressAccessControl) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupLockSettingsOK0RecordingIPAddressAccessControl) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.IPAddressesOrRanges.Set {
			e.FieldStart("ip_addresses_or_ranges")
			s.IPAddressesOrRanges.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupLockSettingsOK0RecordingIPAddressAccessControl = [2]string{
	0: "enable",
	1: "ip_addresses_or_ranges",
}

// Decode decodes GetGroupLockSettingsOK0RecordingIPAddressAccessControl from json.
func (s *GetGroupLockSettingsOK0RecordingIPAddressAccessControl) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupLockSettingsOK0RecordingIPAddressAccessControl to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "ip_addresses_or_ranges":
			if err := func() error {
				s.IPAddressesOrRanges.Reset()
				if err := s.IPAddressesOrRanges.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ip_addresses_or_ranges\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupLockSettingsOK0RecordingIPAddressAccessControl")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupLockSettingsOK0RecordingIPAddressAccessControl) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupLockSettingsOK0RecordingIPAddressAccessControl) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupLockSettingsOK0ScheduleMeeting) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupLockSettingsOK0ScheduleMeeting) encodeFields(e *jx.Encoder) {
	{
		if s.AudioType.Set {
			e.FieldStart("audio_type")
			s.AudioType.Encode(e)
		}
	}
	{
		if s.EmbedPasswordInJoinLink.Set {
			e.FieldStart("embed_password_in_join_link")
			s.EmbedPasswordInJoinLink.Encode(e)
		}
	}
	{
		if s.ForcePmiJbhPassword.Set {
			e.FieldStart("force_pmi_jbh_password")
			s.ForcePmiJbhPassword.Encode(e)
		}
	}
	{
		if s.HostVideo.Set {
			e.FieldStart("host_video")
			s.HostVideo.Encode(e)
		}
	}
	{
		if s.JoinBeforeHost.Set {
			e.FieldStart("join_before_host")
			s.JoinBeforeHost.Encode(e)
		}
	}
	{
		if s.MeetingAuthentication.Set {
			e.FieldStart("meeting_authentication")
			s.MeetingAuthentication.Encode(e)
		}
	}
	{
		if s.MuteUponEntry.Set {
			e.FieldStart("mute_upon_entry")
			s.MuteUponEntry.Encode(e)
		}
	}
	{
		if s.ParticipantVideo.Set {
			e.FieldStart("participant_video")
			s.ParticipantVideo.Encode(e)
		}
	}
	{
		if s.PstnPasswordProtected.Set {
			e.FieldStart("pstn_password_protected")
			s.PstnPasswordProtected.Encode(e)
		}
	}
	{
		if s.RequirePasswordForInstantMeetings.Set {
			e.FieldStart("require_password_for_instant_meetings")
			s.RequirePasswordForInstantMeetings.Encode(e)
		}
	}
	{
		if s.RequirePasswordForPmiMeetings.Set {
			e.FieldStart("require_password_for_pmi_meetings")
			s.RequirePasswordForPmiMeetings.Encode(e)
		}
	}
	{
		if s.RequirePasswordForSchedulingNewMeetings.Set {
			e.FieldStart("require_password_for_scheduling_new_meetings")
			s.RequirePasswordForSchedulingNewMeetings.Encode(e)
		}
	}
	{
		if s.UpcomingMeetingReminder.Set {
			e.FieldStart("upcoming_meeting_reminder")
			s.UpcomingMeetingReminder.Encode(e)
		}
	}
	{
		if s.ContinuousMeetingChat.Set {
			e.FieldStart("continuous_meeting_chat")
			s.ContinuousMeetingChat.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupLockSettingsOK0ScheduleMeeting = [14]string{
	0:  "audio_type",
	1:  "embed_password_in_join_link",
	2:  "force_pmi_jbh_password",
	3:  "host_video",
	4:  "join_before_host",
	5:  "meeting_authentication",
	6:  "mute_upon_entry",
	7:  "participant_video",
	8:  "pstn_password_protected",
	9:  "require_password_for_instant_meetings",
	10: "require_password_for_pmi_meetings",
	11: "require_password_for_scheduling_new_meetings",
	12: "upcoming_meeting_reminder",
	13: "continuous_meeting_chat",
}

// Decode decodes GetGroupLockSettingsOK0ScheduleMeeting from json.
func (s *GetGroupLockSettingsOK0ScheduleMeeting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupLockSettingsOK0ScheduleMeeting to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_type":
			if err := func() error {
				s.AudioType.Reset()
				if err := s.AudioType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_type\"")
			}
		case "embed_password_in_join_link":
			if err := func() error {
				s.EmbedPasswordInJoinLink.Reset()
				if err := s.EmbedPasswordInJoinLink.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"embed_password_in_join_link\"")
			}
		case "force_pmi_jbh_password":
			if err := func() error {
				s.ForcePmiJbhPassword.Reset()
				if err := s.ForcePmiJbhPassword.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"force_pmi_jbh_password\"")
			}
		case "host_video":
			if err := func() error {
				s.HostVideo.Reset()
				if err := s.HostVideo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"host_video\"")
			}
		case "join_before_host":
			if err := func() error {
				s.JoinBeforeHost.Reset()
				if err := s.JoinBeforeHost.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"join_before_host\"")
			}
		case "meeting_authentication":
			if err := func() error {
				s.MeetingAuthentication.Reset()
				if err := s.MeetingAuthentication.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_authentication\"")
			}
		case "mute_upon_entry":
			if err := func() error {
				s.MuteUponEntry.Reset()
				if err := s.MuteUponEntry.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mute_upon_entry\"")
			}
		case "participant_video":
			if err := func() error {
				s.ParticipantVideo.Reset()
				if err := s.ParticipantVideo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"participant_video\"")
			}
		case "pstn_password_protected":
			if err := func() error {
				s.PstnPasswordProtected.Reset()
				if err := s.PstnPasswordProtected.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pstn_password_protected\"")
			}
		case "require_password_for_instant_meetings":
			if err := func() error {
				s.RequirePasswordForInstantMeetings.Reset()
				if err := s.RequirePasswordForInstantMeetings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_password_for_instant_meetings\"")
			}
		case "require_password_for_pmi_meetings":
			if err := func() error {
				s.RequirePasswordForPmiMeetings.Reset()
				if err := s.RequirePasswordForPmiMeetings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_password_for_pmi_meetings\"")
			}
		case "require_password_for_scheduling_new_meetings":
			if err := func() error {
				s.RequirePasswordForSchedulingNewMeetings.Reset()
				if err := s.RequirePasswordForSchedulingNewMeetings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_password_for_scheduling_new_meetings\"")
			}
		case "upcoming_meeting_reminder":
			if err := func() error {
				s.UpcomingMeetingReminder.Reset()
				if err := s.UpcomingMeetingReminder.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"upcoming_meeting_reminder\"")
			}
		case "continuous_meeting_chat":
			if err := func() error {
				s.ContinuousMeetingChat.Reset()
				if err := s.ContinuousMeetingChat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"continuous_meeting_chat\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupLockSettingsOK0ScheduleMeeting")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupLockSettingsOK0ScheduleMeeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupLockSettingsOK0ScheduleMeeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupLockSettingsOK0Telephony) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupLockSettingsOK0Telephony) encodeFields(e *jx.Encoder) {
	{
		if s.TelephonyRegions.Set {
			e.FieldStart("telephony_regions")
			s.TelephonyRegions.Encode(e)
		}
	}
	{
		if s.ThirdPartyAudio.Set {
			e.FieldStart("third_party_audio")
			s.ThirdPartyAudio.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupLockSettingsOK0Telephony = [2]string{
	0: "telephony_regions",
	1: "third_party_audio",
}

// Decode decodes GetGroupLockSettingsOK0Telephony from json.
func (s *GetGroupLockSettingsOK0Telephony) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupLockSettingsOK0Telephony to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "telephony_regions":
			if err := func() error {
				s.TelephonyRegions.Reset()
				if err := s.TelephonyRegions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"telephony_regions\"")
			}
		case "third_party_audio":
			if err := func() error {
				s.ThirdPartyAudio.Reset()
				if err := s.ThirdPartyAudio.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"third_party_audio\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupLockSettingsOK0Telephony")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupLockSettingsOK0Telephony) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupLockSettingsOK0Telephony) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupLockSettingsOK1) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupLockSettingsOK1) encodeFields(e *jx.Encoder) {
	{
		if s.MeetingSecurity.Set {
			e.FieldStart("meeting_security")
			s.MeetingSecurity.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupLockSettingsOK1 = [1]string{
	0: "meeting_security",
}

// Decode decodes GetGroupLockSettingsOK1 from json.
func (s *GetGroupLockSettingsOK1) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupLockSettingsOK1 to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "meeting_security":
			if err := func() error {
				s.MeetingSecurity.Reset()
				if err := s.MeetingSecurity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_security\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupLockSettingsOK1")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupLockSettingsOK1) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupLockSettingsOK1) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupLockSettingsOK1MeetingSecurity) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupLockSettingsOK1MeetingSecurity) encodeFields(e *jx.Encoder) {
	{
		if s.ApprovedOrDeniedCountriesOrRegions.Set {
			e.FieldStart("approved_or_denied_countries_or_regions")
			s.ApprovedOrDeniedCountriesOrRegions.Encode(e)
		}
	}
	{
		if s.AutoSecurity.Set {
			e.FieldStart("auto_security")
			s.AutoSecurity.Encode(e)
		}
	}
	{
		if s.BlockUserDomain.Set {
			e.FieldStart("block_user_domain")
			s.BlockUserDomain.Encode(e)
		}
	}
	{
		if s.EmbedPasswordInJoinLink.Set {
			e.FieldStart("embed_password_in_join_link")
			s.EmbedPasswordInJoinLink.Encode(e)
		}
	}
	{
		if s.EncryptionType.Set {
			e.FieldStart("encryption_type")
			s.EncryptionType.Encode(e)
		}
	}
	{
		if s.EndToEndEncryptedMeetings.Set {
			e.FieldStart("end_to_end_encrypted_meetings")
			s.EndToEndEncryptedMeetings.Encode(e)
		}
	}
	{
		if s.MeetingPassword.Set {
			e.FieldStart("meeting_password")
			s.MeetingPassword.Encode(e)
		}
	}
	{
		if s.OnlyAuthenticatedCanJoinFromWebclient.Set {
			e.FieldStart("only_authenticated_can_join_from_webclient")
			s.OnlyAuthenticatedCanJoinFromWebclient.Encode(e)
		}
	}
	{
		if s.PhonePassword.Set {
			e.FieldStart("phone_password")
			s.PhonePassword.Encode(e)
		}
	}
	{
		if s.PmiPassword.Set {
			e.FieldStart("pmi_password")
			s.PmiPassword.Encode(e)
		}
	}
	{
		if s.WaitingRoom.Set {
			e.FieldStart("waiting_room")
			s.WaitingRoom.Encode(e)
		}
	}
	{
		if s.WebinarPassword.Set {
			e.FieldStart("webinar_password")
			s.WebinarPassword.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupLockSettingsOK1MeetingSecurity = [12]string{
	0:  "approved_or_denied_countries_or_regions",
	1:  "auto_security",
	2:  "block_user_domain",
	3:  "embed_password_in_join_link",
	4:  "encryption_type",
	5:  "end_to_end_encrypted_meetings",
	6:  "meeting_password",
	7:  "only_authenticated_can_join_from_webclient",
	8:  "phone_password",
	9:  "pmi_password",
	10: "waiting_room",
	11: "webinar_password",
}

// Decode decodes GetGroupLockSettingsOK1MeetingSecurity from json.
func (s *GetGroupLockSettingsOK1MeetingSecurity) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupLockSettingsOK1MeetingSecurity to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "approved_or_denied_countries_or_regions":
			if err := func() error {
				s.ApprovedOrDeniedCountriesOrRegions.Reset()
				if err := s.ApprovedOrDeniedCountriesOrRegions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"approved_or_denied_countries_or_regions\"")
			}
		case "auto_security":
			if err := func() error {
				s.AutoSecurity.Reset()
				if err := s.AutoSecurity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_security\"")
			}
		case "block_user_domain":
			if err := func() error {
				s.BlockUserDomain.Reset()
				if err := s.BlockUserDomain.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"block_user_domain\"")
			}
		case "embed_password_in_join_link":
			if err := func() error {
				s.EmbedPasswordInJoinLink.Reset()
				if err := s.EmbedPasswordInJoinLink.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"embed_password_in_join_link\"")
			}
		case "encryption_type":
			if err := func() error {
				s.EncryptionType.Reset()
				if err := s.EncryptionType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"encryption_type\"")
			}
		case "end_to_end_encrypted_meetings":
			if err := func() error {
				s.EndToEndEncryptedMeetings.Reset()
				if err := s.EndToEndEncryptedMeetings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"end_to_end_encrypted_meetings\"")
			}
		case "meeting_password":
			if err := func() error {
				s.MeetingPassword.Reset()
				if err := s.MeetingPassword.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_password\"")
			}
		case "only_authenticated_can_join_from_webclient":
			if err := func() error {
				s.OnlyAuthenticatedCanJoinFromWebclient.Reset()
				if err := s.OnlyAuthenticatedCanJoinFromWebclient.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"only_authenticated_can_join_from_webclient\"")
			}
		case "phone_password":
			if err := func() error {
				s.PhonePassword.Reset()
				if err := s.PhonePassword.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_password\"")
			}
		case "pmi_password":
			if err := func() error {
				s.PmiPassword.Reset()
				if err := s.PmiPassword.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pmi_password\"")
			}
		case "waiting_room":
			if err := func() error {
				s.WaitingRoom.Reset()
				if err := s.WaitingRoom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"waiting_room\"")
			}
		case "webinar_password":
			if err := func() error {
				s.WebinarPassword.Reset()
				if err := s.WebinarPassword.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webinar_password\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupLockSettingsOK1MeetingSecurity")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupLockSettingsOK1MeetingSecurity) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupLockSettingsOK1MeetingSecurity) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupSettingsOK as json.
func (s GetGroupSettingsOK) Encode(e *jx.Encoder) {
	switch s.Type {
	case GetGroupSettingsOK0GetGroupSettingsOK:
		s.GetGroupSettingsOK0.Encode(e)
	case GetGroupSettingsOK1GetGroupSettingsOK:
		s.GetGroupSettingsOK1.Encode(e)
	case GetGroupSettingsOK2GetGroupSettingsOK:
		s.GetGroupSettingsOK2.Encode(e)
	case GetGroupSettingsOK3GetGroupSettingsOK:
		s.GetGroupSettingsOK3.Encode(e)
	}
}

func (s GetGroupSettingsOK) encodeFields(e *jx.Encoder) {
	switch s.Type {
	case GetGroupSettingsOK0GetGroupSettingsOK:
		s.GetGroupSettingsOK0.encodeFields(e)
	case GetGroupSettingsOK1GetGroupSettingsOK:
		s.GetGroupSettingsOK1.encodeFields(e)
	case GetGroupSettingsOK2GetGroupSettingsOK:
		s.GetGroupSettingsOK2.encodeFields(e)
	case GetGroupSettingsOK3GetGroupSettingsOK:
		s.GetGroupSettingsOK3.encodeFields(e)
	}
}

// Decode decodes GetGroupSettingsOK from json.
func (s *GetGroupSettingsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK to nil")
	}
	// Sum type fields.
	if typ := d.Next(); typ != jx.Object {
		return errors.Errorf("unexpected json type %q", typ)
	}

	var found bool
	if err := d.Capture(func(d *jx.Decoder) error {
		return d.ObjBytes(func(d *jx.Decoder, key []byte) error {
			switch string(key) {
			case "audio_conferencing":
				match := GetGroupSettingsOK0GetGroupSettingsOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "email_notification":
				match := GetGroupSettingsOK0GetGroupSettingsOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "in_meeting":
				match := GetGroupSettingsOK0GetGroupSettingsOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "other_options":
				match := GetGroupSettingsOK0GetGroupSettingsOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "profile":
				match := GetGroupSettingsOK0GetGroupSettingsOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "recording":
				match := GetGroupSettingsOK0GetGroupSettingsOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "schedule_meeting":
				match := GetGroupSettingsOK0GetGroupSettingsOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "telephony":
				match := GetGroupSettingsOK0GetGroupSettingsOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "chat":
				match := GetGroupSettingsOK0GetGroupSettingsOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "allow_authentication_exception":
				match := GetGroupSettingsOK1GetGroupSettingsOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "meeting_authentication":
				match := GetGroupSettingsOK1GetGroupSettingsOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "recording_authentication":
				match := GetGroupSettingsOK2GetGroupSettingsOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "meeting_security":
				match := GetGroupSettingsOK3GetGroupSettingsOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			}
			return d.Skip()
		})
	}); err != nil {
		return errors.Wrap(err, "capture")
	}
	if !found {
		return errors.New("unable to detect sum type variant")
	}
	switch s.Type {
	case GetGroupSettingsOK0GetGroupSettingsOK:
		if err := s.GetGroupSettingsOK0.Decode(d); err != nil {
			return err
		}
	case GetGroupSettingsOK1GetGroupSettingsOK:
		if err := s.GetGroupSettingsOK1.Decode(d); err != nil {
			return err
		}
	case GetGroupSettingsOK2GetGroupSettingsOK:
		if err := s.GetGroupSettingsOK2.Decode(d); err != nil {
			return err
		}
	case GetGroupSettingsOK3GetGroupSettingsOK:
		if err := s.GetGroupSettingsOK3.Decode(d); err != nil {
			return err
		}
	default:
		return errors.Errorf("inferred invalid type: %s", s.Type)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GetGroupSettingsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK0) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK0) encodeFields(e *jx.Encoder) {
	{
		if s.AudioConferencing.Set {
			e.FieldStart("audio_conferencing")
			s.AudioConferencing.Encode(e)
		}
	}
	{
		if s.EmailNotification.Set {
			e.FieldStart("email_notification")
			s.EmailNotification.Encode(e)
		}
	}
	{
		if s.InMeeting.Set {
			e.FieldStart("in_meeting")
			s.InMeeting.Encode(e)
		}
	}
	{
		if s.OtherOptions.Set {
			e.FieldStart("other_options")
			s.OtherOptions.Encode(e)
		}
	}
	{
		if s.Profile.Set {
			e.FieldStart("profile")
			s.Profile.Encode(e)
		}
	}
	{
		if s.Recording.Set {
			e.FieldStart("recording")
			s.Recording.Encode(e)
		}
	}
	{
		if s.ScheduleMeeting.Set {
			e.FieldStart("schedule_meeting")
			s.ScheduleMeeting.Encode(e)
		}
	}
	{
		if s.Telephony.Set {
			e.FieldStart("telephony")
			s.Telephony.Encode(e)
		}
	}
	{
		if s.Chat.Set {
			e.FieldStart("chat")
			s.Chat.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK0 = [9]string{
	0: "audio_conferencing",
	1: "email_notification",
	2: "in_meeting",
	3: "other_options",
	4: "profile",
	5: "recording",
	6: "schedule_meeting",
	7: "telephony",
	8: "chat",
}

// Decode decodes GetGroupSettingsOK0 from json.
func (s *GetGroupSettingsOK0) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK0 to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_conferencing":
			if err := func() error {
				s.AudioConferencing.Reset()
				if err := s.AudioConferencing.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_conferencing\"")
			}
		case "email_notification":
			if err := func() error {
				s.EmailNotification.Reset()
				if err := s.EmailNotification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email_notification\"")
			}
		case "in_meeting":
			if err := func() error {
				s.InMeeting.Reset()
				if err := s.InMeeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"in_meeting\"")
			}
		case "other_options":
			if err := func() error {
				s.OtherOptions.Reset()
				if err := s.OtherOptions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"other_options\"")
			}
		case "profile":
			if err := func() error {
				s.Profile.Reset()
				if err := s.Profile.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"profile\"")
			}
		case "recording":
			if err := func() error {
				s.Recording.Reset()
				if err := s.Recording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording\"")
			}
		case "schedule_meeting":
			if err := func() error {
				s.ScheduleMeeting.Reset()
				if err := s.ScheduleMeeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"schedule_meeting\"")
			}
		case "telephony":
			if err := func() error {
				s.Telephony.Reset()
				if err := s.Telephony.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"telephony\"")
			}
		case "chat":
			if err := func() error {
				s.Chat.Reset()
				if err := s.Chat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"chat\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK0")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK0) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK0) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK0AudioConferencing) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK0AudioConferencing) encodeFields(e *jx.Encoder) {
	{
		if s.TollFreeAndFeeBasedTollCall.Set {
			e.FieldStart("toll_free_and_fee_based_toll_call")
			s.TollFreeAndFeeBasedTollCall.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK0AudioConferencing = [1]string{
	0: "toll_free_and_fee_based_toll_call",
}

// Decode decodes GetGroupSettingsOK0AudioConferencing from json.
func (s *GetGroupSettingsOK0AudioConferencing) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK0AudioConferencing to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "toll_free_and_fee_based_toll_call":
			if err := func() error {
				s.TollFreeAndFeeBasedTollCall.Reset()
				if err := s.TollFreeAndFeeBasedTollCall.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"toll_free_and_fee_based_toll_call\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK0AudioConferencing")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK0AudioConferencing) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK0AudioConferencing) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall) encodeFields(e *jx.Encoder) {
	{
		if s.AllowWebinarAttendeesDial.Set {
			e.FieldStart("allow_webinar_attendees_dial")
			s.AllowWebinarAttendeesDial.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Numbers != nil {
			e.FieldStart("numbers")
			e.ArrStart()
			for _, elem := range s.Numbers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall = [3]string{
	0: "allow_webinar_attendees_dial",
	1: "enable",
	2: "numbers",
}

// Decode decodes GetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall from json.
func (s *GetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allow_webinar_attendees_dial":
			if err := func() error {
				s.AllowWebinarAttendeesDial.Reset()
				if err := s.AllowWebinarAttendeesDial.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_webinar_attendees_dial\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "numbers":
			if err := func() error {
				s.Numbers = make([]GetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Numbers = append(s.Numbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"numbers\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem) encodeFields(e *jx.Encoder) {
	{
		if s.Code.Set {
			e.FieldStart("code")
			s.Code.Encode(e)
		}
	}
	{
		if s.CountryCode.Set {
			e.FieldStart("country_code")
			s.CountryCode.Encode(e)
		}
	}
	{
		if s.CountryName.Set {
			e.FieldStart("country_name")
			s.CountryName.Encode(e)
		}
	}
	{
		if s.DisplayNumber.Set {
			e.FieldStart("display_number")
			s.DisplayNumber.Encode(e)
		}
	}
	{
		if s.Number.Set {
			e.FieldStart("number")
			s.Number.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem = [5]string{
	0: "code",
	1: "country_code",
	2: "country_name",
	3: "display_number",
	4: "number",
}

// Decode decodes GetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem from json.
func (s *GetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "code":
			if err := func() error {
				s.Code.Reset()
				if err := s.Code.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code\"")
			}
		case "country_code":
			if err := func() error {
				s.CountryCode.Reset()
				if err := s.CountryCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country_code\"")
			}
		case "country_name":
			if err := func() error {
				s.CountryName.Reset()
				if err := s.CountryName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country_name\"")
			}
		case "display_number":
			if err := func() error {
				s.DisplayNumber.Reset()
				if err := s.DisplayNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_number\"")
			}
		case "number":
			if err := func() error {
				s.Number.Reset()
				if err := s.Number.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK0Chat) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK0Chat) encodeFields(e *jx.Encoder) {
	{
		if s.ShareFiles.Set {
			e.FieldStart("share_files")
			s.ShareFiles.Encode(e)
		}
	}
	{
		if s.ChatEmojis.Set {
			e.FieldStart("chat_emojis")
			s.ChatEmojis.Encode(e)
		}
	}
	{
		if s.RecordVoiceMessages.Set {
			e.FieldStart("record_voice_messages")
			s.RecordVoiceMessages.Encode(e)
		}
	}
	{
		if s.RecordVideoMessages.Set {
			e.FieldStart("record_video_messages")
			s.RecordVideoMessages.Encode(e)
		}
	}
	{
		if s.ScreenCapture.Set {
			e.FieldStart("screen_capture")
			s.ScreenCapture.Encode(e)
		}
	}
	{
		if s.CreatePublicChannels.Set {
			e.FieldStart("create_public_channels")
			s.CreatePublicChannels.Encode(e)
		}
	}
	{
		if s.CreatePrivateChannels.Set {
			e.FieldStart("create_private_channels")
			s.CreatePrivateChannels.Encode(e)
		}
	}
	{
		if s.ShareLinksInChat.Set {
			e.FieldStart("share_links_in_chat")
			s.ShareLinksInChat.Encode(e)
		}
	}
	{
		if s.ScheduleMeetingsInChat.Set {
			e.FieldStart("schedule_meetings_in_chat")
			s.ScheduleMeetingsInChat.Encode(e)
		}
	}
	{
		if s.SetRetentionPeriodInCloud.Set {
			e.FieldStart("set_retention_period_in_cloud")
			s.SetRetentionPeriodInCloud.Encode(e)
		}
	}
	{
		if s.SetRetentionPeriodInLocal.Set {
			e.FieldStart("set_retention_period_in_local")
			s.SetRetentionPeriodInLocal.Encode(e)
		}
	}
	{
		if s.AllowUsersToSearchOthersOptions.Set {
			e.FieldStart("allow_users_to_search_others_options")
			s.AllowUsersToSearchOthersOptions.Encode(e)
		}
	}
	{
		if s.AllowUsersToAddContacts.Set {
			e.FieldStart("allow_users_to_add_contacts")
			s.AllowUsersToAddContacts.Encode(e)
		}
	}
	{
		if s.AllowUsersToChatWithOthers.Set {
			e.FieldStart("allow_users_to_chat_with_others")
			s.AllowUsersToChatWithOthers.Encode(e)
		}
	}
	{
		if s.ChatEtiquetteTool.Set {
			e.FieldStart("chat_etiquette_tool")
			s.ChatEtiquetteTool.Encode(e)
		}
	}
	{
		if s.SendDataToThirdPartyArchivingService.Set {
			e.FieldStart("send_data_to_third_party_archiving_service")
			s.SendDataToThirdPartyArchivingService.Encode(e)
		}
	}
	{
		if s.TranslateMessages.Set {
			e.FieldStart("translate_messages")
			s.TranslateMessages.Encode(e)
		}
	}
	{
		if s.SearchAndSendAnimatedGIFImages.Set {
			e.FieldStart("search_and_send_animated_gif_images")
			s.SearchAndSendAnimatedGIFImages.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK0Chat = [18]string{
	0:  "share_files",
	1:  "chat_emojis",
	2:  "record_voice_messages",
	3:  "record_video_messages",
	4:  "screen_capture",
	5:  "create_public_channels",
	6:  "create_private_channels",
	7:  "share_links_in_chat",
	8:  "schedule_meetings_in_chat",
	9:  "set_retention_period_in_cloud",
	10: "set_retention_period_in_local",
	11: "allow_users_to_search_others_options",
	12: "allow_users_to_add_contacts",
	13: "allow_users_to_chat_with_others",
	14: "chat_etiquette_tool",
	15: "send_data_to_third_party_archiving_service",
	16: "translate_messages",
	17: "search_and_send_animated_gif_images",
}

// Decode decodes GetGroupSettingsOK0Chat from json.
func (s *GetGroupSettingsOK0Chat) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK0Chat to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "share_files":
			if err := func() error {
				s.ShareFiles.Reset()
				if err := s.ShareFiles.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"share_files\"")
			}
		case "chat_emojis":
			if err := func() error {
				s.ChatEmojis.Reset()
				if err := s.ChatEmojis.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"chat_emojis\"")
			}
		case "record_voice_messages":
			if err := func() error {
				s.RecordVoiceMessages.Reset()
				if err := s.RecordVoiceMessages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"record_voice_messages\"")
			}
		case "record_video_messages":
			if err := func() error {
				s.RecordVideoMessages.Reset()
				if err := s.RecordVideoMessages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"record_video_messages\"")
			}
		case "screen_capture":
			if err := func() error {
				s.ScreenCapture.Reset()
				if err := s.ScreenCapture.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"screen_capture\"")
			}
		case "create_public_channels":
			if err := func() error {
				s.CreatePublicChannels.Reset()
				if err := s.CreatePublicChannels.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"create_public_channels\"")
			}
		case "create_private_channels":
			if err := func() error {
				s.CreatePrivateChannels.Reset()
				if err := s.CreatePrivateChannels.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"create_private_channels\"")
			}
		case "share_links_in_chat":
			if err := func() error {
				s.ShareLinksInChat.Reset()
				if err := s.ShareLinksInChat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"share_links_in_chat\"")
			}
		case "schedule_meetings_in_chat":
			if err := func() error {
				s.ScheduleMeetingsInChat.Reset()
				if err := s.ScheduleMeetingsInChat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"schedule_meetings_in_chat\"")
			}
		case "set_retention_period_in_cloud":
			if err := func() error {
				s.SetRetentionPeriodInCloud.Reset()
				if err := s.SetRetentionPeriodInCloud.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"set_retention_period_in_cloud\"")
			}
		case "set_retention_period_in_local":
			if err := func() error {
				s.SetRetentionPeriodInLocal.Reset()
				if err := s.SetRetentionPeriodInLocal.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"set_retention_period_in_local\"")
			}
		case "allow_users_to_search_others_options":
			if err := func() error {
				s.AllowUsersToSearchOthersOptions.Reset()
				if err := s.AllowUsersToSearchOthersOptions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_users_to_search_others_options\"")
			}
		case "allow_users_to_add_contacts":
			if err := func() error {
				s.AllowUsersToAddContacts.Reset()
				if err := s.AllowUsersToAddContacts.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_users_to_add_contacts\"")
			}
		case "allow_users_to_chat_with_others":
			if err := func() error {
				s.AllowUsersToChatWithOthers.Reset()
				if err := s.AllowUsersToChatWithOthers.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_users_to_chat_with_others\"")
			}
		case "chat_etiquette_tool":
			if err := func() error {
				s.ChatEtiquetteTool.Reset()
				if err := s.ChatEtiquetteTool.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"chat_etiquette_tool\"")
			}
		case "send_data_to_third_party_archiving_service":
			if err := func() error {
				s.SendDataToThirdPartyArchivingService.Reset()
				if err := s.SendDataToThirdPartyArchivingService.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"send_data_to_third_party_archiving_service\"")
			}
		case "translate_messages":
			if err := func() error {
				s.TranslateMessages.Reset()
				if err := s.TranslateMessages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"translate_messages\"")
			}
		case "search_and_send_animated_gif_images":
			if err := func() error {
				s.SearchAndSendAnimatedGIFImages.Reset()
				if err := s.SearchAndSendAnimatedGIFImages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"search_and_send_animated_gif_images\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK0Chat")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK0Chat) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK0Chat) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK0ChatAllowUsersToAddContacts) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK0ChatAllowUsersToAddContacts) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.SelectedOption.Set {
			e.FieldStart("selected_option")
			s.SelectedOption.Encode(e)
		}
	}
	{
		if s.UserEmailAddresses.Set {
			e.FieldStart("user_email_addresses")
			s.UserEmailAddresses.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK0ChatAllowUsersToAddContacts = [3]string{
	0: "enable",
	1: "selected_option",
	2: "user_email_addresses",
}

// Decode decodes GetGroupSettingsOK0ChatAllowUsersToAddContacts from json.
func (s *GetGroupSettingsOK0ChatAllowUsersToAddContacts) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK0ChatAllowUsersToAddContacts to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "selected_option":
			if err := func() error {
				s.SelectedOption.Reset()
				if err := s.SelectedOption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"selected_option\"")
			}
		case "user_email_addresses":
			if err := func() error {
				s.UserEmailAddresses.Reset()
				if err := s.UserEmailAddresses.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"user_email_addresses\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK0ChatAllowUsersToAddContacts")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK0ChatAllowUsersToAddContacts) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK0ChatAllowUsersToAddContacts) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK0ChatAllowUsersToChatWithOthers) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK0ChatAllowUsersToChatWithOthers) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.SelectedOption.Set {
			e.FieldStart("selected_option")
			s.SelectedOption.Encode(e)
		}
	}
	{
		if s.UserEmailAddresses.Set {
			e.FieldStart("user_email_addresses")
			s.UserEmailAddresses.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK0ChatAllowUsersToChatWithOthers = [3]string{
	0: "enable",
	1: "selected_option",
	2: "user_email_addresses",
}

// Decode decodes GetGroupSettingsOK0ChatAllowUsersToChatWithOthers from json.
func (s *GetGroupSettingsOK0ChatAllowUsersToChatWithOthers) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK0ChatAllowUsersToChatWithOthers to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "selected_option":
			if err := func() error {
				s.SelectedOption.Reset()
				if err := s.SelectedOption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"selected_option\"")
			}
		case "user_email_addresses":
			if err := func() error {
				s.UserEmailAddresses.Reset()
				if err := s.UserEmailAddresses.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"user_email_addresses\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK0ChatAllowUsersToChatWithOthers")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK0ChatAllowUsersToChatWithOthers) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK0ChatAllowUsersToChatWithOthers) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK0ChatChatEmojis) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK0ChatChatEmojis) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.EmojisOption.Set {
			e.FieldStart("emojis_option")
			s.EmojisOption.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK0ChatChatEmojis = [2]string{
	0: "enable",
	1: "emojis_option",
}

// Decode decodes GetGroupSettingsOK0ChatChatEmojis from json.
func (s *GetGroupSettingsOK0ChatChatEmojis) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK0ChatChatEmojis to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "emojis_option":
			if err := func() error {
				s.EmojisOption.Reset()
				if err := s.EmojisOption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"emojis_option\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK0ChatChatEmojis")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK0ChatChatEmojis) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK0ChatChatEmojis) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK0ChatChatEtiquetteTool) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK0ChatChatEtiquetteTool) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Policies != nil {
			e.FieldStart("policies")
			e.ArrStart()
			for _, elem := range s.Policies {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK0ChatChatEtiquetteTool = [2]string{
	0: "enable",
	1: "policies",
}

// Decode decodes GetGroupSettingsOK0ChatChatEtiquetteTool from json.
func (s *GetGroupSettingsOK0ChatChatEtiquetteTool) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK0ChatChatEtiquetteTool to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "policies":
			if err := func() error {
				s.Policies = make([]GetGroupSettingsOK0ChatChatEtiquetteToolPoliciesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetGroupSettingsOK0ChatChatEtiquetteToolPoliciesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Policies = append(s.Policies, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"policies\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK0ChatChatEtiquetteTool")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK0ChatChatEtiquetteTool) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK0ChatChatEtiquetteTool) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK0ChatChatEtiquetteToolPoliciesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK0ChatChatEtiquetteToolPoliciesItem) encodeFields(e *jx.Encoder) {
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.IsLocked.Set {
			e.FieldStart("is_locked")
			s.IsLocked.Encode(e)
		}
	}
	{
		if s.Keywords != nil {
			e.FieldStart("keywords")
			e.ArrStart()
			for _, elem := range s.Keywords {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.RegularExpression.Set {
			e.FieldStart("regular_expression")
			s.RegularExpression.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.TriggerAction.Set {
			e.FieldStart("trigger_action")
			s.TriggerAction.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK0ChatChatEtiquetteToolPoliciesItem = [8]string{
	0: "description",
	1: "id",
	2: "is_locked",
	3: "keywords",
	4: "name",
	5: "regular_expression",
	6: "status",
	7: "trigger_action",
}

// Decode decodes GetGroupSettingsOK0ChatChatEtiquetteToolPoliciesItem from json.
func (s *GetGroupSettingsOK0ChatChatEtiquetteToolPoliciesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK0ChatChatEtiquetteToolPoliciesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "is_locked":
			if err := func() error {
				s.IsLocked.Reset()
				if err := s.IsLocked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"is_locked\"")
			}
		case "keywords":
			if err := func() error {
				s.Keywords = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Keywords = append(s.Keywords, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"keywords\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "regular_expression":
			if err := func() error {
				s.RegularExpression.Reset()
				if err := s.RegularExpression.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"regular_expression\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "trigger_action":
			if err := func() error {
				s.TriggerAction.Reset()
				if err := s.TriggerAction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"trigger_action\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK0ChatChatEtiquetteToolPoliciesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK0ChatChatEtiquetteToolPoliciesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK0ChatChatEtiquetteToolPoliciesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK0ChatSearchAndSendAnimatedGIFImages) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK0ChatSearchAndSendAnimatedGIFImages) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK0ChatSearchAndSendAnimatedGIFImages = [1]string{
	0: "enable",
}

// Decode decodes GetGroupSettingsOK0ChatSearchAndSendAnimatedGIFImages from json.
func (s *GetGroupSettingsOK0ChatSearchAndSendAnimatedGIFImages) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK0ChatSearchAndSendAnimatedGIFImages to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK0ChatSearchAndSendAnimatedGIFImages")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK0ChatSearchAndSendAnimatedGIFImages) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK0ChatSearchAndSendAnimatedGIFImages) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK0ChatSendDataToThirdPartyArchivingService) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK0ChatSendDataToThirdPartyArchivingService) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK0ChatSendDataToThirdPartyArchivingService = [1]string{
	0: "enable",
}

// Decode decodes GetGroupSettingsOK0ChatSendDataToThirdPartyArchivingService from json.
func (s *GetGroupSettingsOK0ChatSendDataToThirdPartyArchivingService) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK0ChatSendDataToThirdPartyArchivingService to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK0ChatSendDataToThirdPartyArchivingService")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK0ChatSendDataToThirdPartyArchivingService) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK0ChatSendDataToThirdPartyArchivingService) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK0ChatSetRetentionPeriodInCloud) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK0ChatSetRetentionPeriodInCloud) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.RetentionPeriodOfDirectMessagesAndGroupConversation.Set {
			e.FieldStart("retention_period_of_direct_messages_and_group_conversation")
			s.RetentionPeriodOfDirectMessagesAndGroupConversation.Encode(e)
		}
	}
	{
		if s.RetentionPeriodOfChannels.Set {
			e.FieldStart("retention_period_of_channels")
			s.RetentionPeriodOfChannels.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK0ChatSetRetentionPeriodInCloud = [3]string{
	0: "enable",
	1: "retention_period_of_direct_messages_and_group_conversation",
	2: "retention_period_of_channels",
}

// Decode decodes GetGroupSettingsOK0ChatSetRetentionPeriodInCloud from json.
func (s *GetGroupSettingsOK0ChatSetRetentionPeriodInCloud) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK0ChatSetRetentionPeriodInCloud to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "retention_period_of_direct_messages_and_group_conversation":
			if err := func() error {
				s.RetentionPeriodOfDirectMessagesAndGroupConversation.Reset()
				if err := s.RetentionPeriodOfDirectMessagesAndGroupConversation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"retention_period_of_direct_messages_and_group_conversation\"")
			}
		case "retention_period_of_channels":
			if err := func() error {
				s.RetentionPeriodOfChannels.Reset()
				if err := s.RetentionPeriodOfChannels.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"retention_period_of_channels\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK0ChatSetRetentionPeriodInCloud")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK0ChatSetRetentionPeriodInCloud) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK0ChatSetRetentionPeriodInCloud) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK0ChatSetRetentionPeriodInLocal) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK0ChatSetRetentionPeriodInLocal) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.RetentionPeriodOfDirectMessagesAndGroupConversation.Set {
			e.FieldStart("retention_period_of_direct_messages_and_group_conversation")
			s.RetentionPeriodOfDirectMessagesAndGroupConversation.Encode(e)
		}
	}
	{
		if s.RetentionPeriodOfChannels.Set {
			e.FieldStart("retention_period_of_channels")
			s.RetentionPeriodOfChannels.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK0ChatSetRetentionPeriodInLocal = [3]string{
	0: "enable",
	1: "retention_period_of_direct_messages_and_group_conversation",
	2: "retention_period_of_channels",
}

// Decode decodes GetGroupSettingsOK0ChatSetRetentionPeriodInLocal from json.
func (s *GetGroupSettingsOK0ChatSetRetentionPeriodInLocal) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK0ChatSetRetentionPeriodInLocal to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "retention_period_of_direct_messages_and_group_conversation":
			if err := func() error {
				s.RetentionPeriodOfDirectMessagesAndGroupConversation.Reset()
				if err := s.RetentionPeriodOfDirectMessagesAndGroupConversation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"retention_period_of_direct_messages_and_group_conversation\"")
			}
		case "retention_period_of_channels":
			if err := func() error {
				s.RetentionPeriodOfChannels.Reset()
				if err := s.RetentionPeriodOfChannels.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"retention_period_of_channels\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK0ChatSetRetentionPeriodInLocal")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK0ChatSetRetentionPeriodInLocal) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK0ChatSetRetentionPeriodInLocal) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK0ChatShareFiles) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK0ChatShareFiles) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.ShareOption.Set {
			e.FieldStart("share_option")
			s.ShareOption.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK0ChatShareFiles = [2]string{
	0: "enable",
	1: "share_option",
}

// Decode decodes GetGroupSettingsOK0ChatShareFiles from json.
func (s *GetGroupSettingsOK0ChatShareFiles) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK0ChatShareFiles to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "share_option":
			if err := func() error {
				s.ShareOption.Reset()
				if err := s.ShareOption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"share_option\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK0ChatShareFiles")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK0ChatShareFiles) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK0ChatShareFiles) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK0EmailNotification) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK0EmailNotification) encodeFields(e *jx.Encoder) {
	{
		if s.AlternativeHostReminder.Set {
			e.FieldStart("alternative_host_reminder")
			s.AlternativeHostReminder.Encode(e)
		}
	}
	{
		if s.CancelMeetingReminder.Set {
			e.FieldStart("cancel_meeting_reminder")
			s.CancelMeetingReminder.Encode(e)
		}
	}
	{
		if s.CloudRecordingAvailableReminder.Set {
			e.FieldStart("cloud_recording_available_reminder")
			s.CloudRecordingAvailableReminder.Encode(e)
		}
	}
	{
		if s.JbhReminder.Set {
			e.FieldStart("jbh_reminder")
			s.JbhReminder.Encode(e)
		}
	}
	{
		if s.RecordingAvailableReminderAlternativeHosts.Set {
			e.FieldStart("recording_available_reminder_alternative_hosts")
			s.RecordingAvailableReminderAlternativeHosts.Encode(e)
		}
	}
	{
		if s.RecordingAvailableReminderSchedulers.Set {
			e.FieldStart("recording_available_reminder_schedulers")
			s.RecordingAvailableReminderSchedulers.Encode(e)
		}
	}
	{
		if s.ScheduleForReminder.Set {
			e.FieldStart("schedule_for_reminder")
			s.ScheduleForReminder.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK0EmailNotification = [7]string{
	0: "alternative_host_reminder",
	1: "cancel_meeting_reminder",
	2: "cloud_recording_available_reminder",
	3: "jbh_reminder",
	4: "recording_available_reminder_alternative_hosts",
	5: "recording_available_reminder_schedulers",
	6: "schedule_for_reminder",
}

// Decode decodes GetGroupSettingsOK0EmailNotification from json.
func (s *GetGroupSettingsOK0EmailNotification) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK0EmailNotification to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "alternative_host_reminder":
			if err := func() error {
				s.AlternativeHostReminder.Reset()
				if err := s.AlternativeHostReminder.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"alternative_host_reminder\"")
			}
		case "cancel_meeting_reminder":
			if err := func() error {
				s.CancelMeetingReminder.Reset()
				if err := s.CancelMeetingReminder.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cancel_meeting_reminder\"")
			}
		case "cloud_recording_available_reminder":
			if err := func() error {
				s.CloudRecordingAvailableReminder.Reset()
				if err := s.CloudRecordingAvailableReminder.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cloud_recording_available_reminder\"")
			}
		case "jbh_reminder":
			if err := func() error {
				s.JbhReminder.Reset()
				if err := s.JbhReminder.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"jbh_reminder\"")
			}
		case "recording_available_reminder_alternative_hosts":
			if err := func() error {
				s.RecordingAvailableReminderAlternativeHosts.Reset()
				if err := s.RecordingAvailableReminderAlternativeHosts.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_available_reminder_alternative_hosts\"")
			}
		case "recording_available_reminder_schedulers":
			if err := func() error {
				s.RecordingAvailableReminderSchedulers.Reset()
				if err := s.RecordingAvailableReminderSchedulers.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_available_reminder_schedulers\"")
			}
		case "schedule_for_reminder":
			if err := func() error {
				s.ScheduleForReminder.Reset()
				if err := s.ScheduleForReminder.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"schedule_for_reminder\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK0EmailNotification")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK0EmailNotification) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK0EmailNotification) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK0InMeeting) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK0InMeeting) encodeFields(e *jx.Encoder) {
	{
		if s.AlertGuestJoin.Set {
			e.FieldStart("alert_guest_join")
			s.AlertGuestJoin.Encode(e)
		}
	}
	{
		if s.AllowUsersToDeleteMessagesInMeetingChat.Set {
			e.FieldStart("allow_users_to_delete_messages_in_meeting_chat")
			s.AllowUsersToDeleteMessagesInMeetingChat.Encode(e)
		}
	}
	{
		if s.AllowLiveStreaming.Set {
			e.FieldStart("allow_live_streaming")
			s.AllowLiveStreaming.Encode(e)
		}
	}
	{
		if s.AllowParticipantsChatWith.Set {
			e.FieldStart("allow_participants_chat_with")
			s.AllowParticipantsChatWith.Encode(e)
		}
	}
	{
		if s.AllowShowZoomWindows.Set {
			e.FieldStart("allow_show_zoom_windows")
			s.AllowShowZoomWindows.Encode(e)
		}
	}
	{
		if s.AllowUsersSaveChats.Set {
			e.FieldStart("allow_users_save_chats")
			s.AllowUsersSaveChats.Encode(e)
		}
	}
	{
		if s.Annotation.Set {
			e.FieldStart("annotation")
			s.Annotation.Encode(e)
		}
	}
	{
		if s.AttendeeOnHold.Set {
			e.FieldStart("attendee_on_hold")
			s.AttendeeOnHold.Encode(e)
		}
	}
	{
		if s.AutoAnswer.Set {
			e.FieldStart("auto_answer")
			s.AutoAnswer.Encode(e)
		}
	}
	{
		if s.AutoSavingChat.Set {
			e.FieldStart("auto_saving_chat")
			s.AutoSavingChat.Encode(e)
		}
	}
	{
		if s.BreakoutRoom.Set {
			e.FieldStart("breakout_room")
			s.BreakoutRoom.Encode(e)
		}
	}
	{
		if s.BreakoutRoomSchedule.Set {
			e.FieldStart("breakout_room_schedule")
			s.BreakoutRoomSchedule.Encode(e)
		}
	}
	{
		if s.Chat.Set {
			e.FieldStart("chat")
			s.Chat.Encode(e)
		}
	}
	{
		if s.MeetingQuestionAnswer.Set {
			e.FieldStart("meeting_question_answer")
			s.MeetingQuestionAnswer.Encode(e)
		}
	}
	{
		if s.ClosedCaption.Set {
			e.FieldStart("closed_caption")
			s.ClosedCaption.Encode(e)
		}
	}
	{
		if s.ClosedCaptioning.Set {
			e.FieldStart("closed_captioning")
			s.ClosedCaptioning.Encode(e)
		}
	}
	{
		if s.CoHost.Set {
			e.FieldStart("co_host")
			s.CoHost.Encode(e)
		}
	}
	{
		if s.CustomDataCenterRegions.Set {
			e.FieldStart("custom_data_center_regions")
			s.CustomDataCenterRegions.Encode(e)
		}
	}
	{
		if s.CustomLiveStreamingService.Set {
			e.FieldStart("custom_live_streaming_service")
			s.CustomLiveStreamingService.Encode(e)
		}
	}
	{
		if s.CustomServiceInstructions.Set {
			e.FieldStart("custom_service_instructions")
			s.CustomServiceInstructions.Encode(e)
		}
	}
	{
		if s.DataCenterRegions != nil {
			e.FieldStart("data_center_regions")
			e.ArrStart()
			for _, elem := range s.DataCenterRegions {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.DisableScreenSharingForHostMeetings.Set {
			e.FieldStart("disable_screen_sharing_for_host_meetings")
			s.DisableScreenSharingForHostMeetings.Encode(e)
		}
	}
	{
		if s.DisableScreenSharingForInMeetingGuests.Set {
			e.FieldStart("disable_screen_sharing_for_in_meeting_guests")
			s.DisableScreenSharingForInMeetingGuests.Encode(e)
		}
	}
	{
		if s.E2eEncryption.Set {
			e.FieldStart("e2e_encryption")
			s.E2eEncryption.Encode(e)
		}
	}
	{
		if s.EntryExitChime.Set {
			e.FieldStart("entry_exit_chime")
			s.EntryExitChime.Encode(e)
		}
	}
	{
		if s.FarEndCameraControl.Set {
			e.FieldStart("far_end_camera_control")
			s.FarEndCameraControl.Encode(e)
		}
	}
	{
		if s.Feedback.Set {
			e.FieldStart("feedback")
			s.Feedback.Encode(e)
		}
	}
	{
		if s.FileTransfer.Set {
			e.FieldStart("file_transfer")
			s.FileTransfer.Encode(e)
		}
	}
	{
		if s.GroupHd.Set {
			e.FieldStart("group_hd")
			s.GroupHd.Encode(e)
		}
	}
	{
		if s.WebinarGroupHd.Set {
			e.FieldStart("webinar_group_hd")
			s.WebinarGroupHd.Encode(e)
		}
	}
	{
		if s.JoinFromDesktop.Set {
			e.FieldStart("join_from_desktop")
			s.JoinFromDesktop.Encode(e)
		}
	}
	{
		if s.JoinFromMobile.Set {
			e.FieldStart("join_from_mobile")
			s.JoinFromMobile.Encode(e)
		}
	}
	{
		if s.AutoGeneratedTranslation.Set {
			e.FieldStart("auto_generated_translation")
			s.AutoGeneratedTranslation.Encode(e)
		}
	}
	{
		if s.LanguageInterpretation.Set {
			e.FieldStart("language_interpretation")
			s.LanguageInterpretation.Encode(e)
		}
	}
	{
		if s.SignLanguageInterpretation.Set {
			e.FieldStart("sign_language_interpretation")
			s.SignLanguageInterpretation.Encode(e)
		}
	}
	{
		if s.LiveStreamingFacebook.Set {
			e.FieldStart("live_streaming_facebook")
			s.LiveStreamingFacebook.Encode(e)
		}
	}
	{
		if s.LiveStreamingYoutube.Set {
			e.FieldStart("live_streaming_youtube")
			s.LiveStreamingYoutube.Encode(e)
		}
	}
	{
		if s.ManualCaptioning.Set {
			e.FieldStart("manual_captioning")
			s.ManualCaptioning.Encode(e)
		}
	}
	{
		if s.MeetingReactions.Set {
			e.FieldStart("meeting_reactions")
			s.MeetingReactions.Encode(e)
		}
	}
	{
		if s.MeetingReactionsEmojis.Set {
			e.FieldStart("meeting_reactions_emojis")
			s.MeetingReactionsEmojis.Encode(e)
		}
	}
	{
		if s.AllowHostPanelistsToUseAudibleClap.Set {
			e.FieldStart("allow_host_panelists_to_use_audible_clap")
			s.AllowHostPanelistsToUseAudibleClap.Encode(e)
		}
	}
	{
		if s.WebinarReactions.Set {
			e.FieldStart("webinar_reactions")
			s.WebinarReactions.Encode(e)
		}
	}
	{
		if s.MeetingSurvey.Set {
			e.FieldStart("meeting_survey")
			s.MeetingSurvey.Encode(e)
		}
	}
	{
		if s.NonVerbalFeedback.Set {
			e.FieldStart("non_verbal_feedback")
			s.NonVerbalFeedback.Encode(e)
		}
	}
	{
		if s.OnlyHostViewDeviceList.Set {
			e.FieldStart("only_host_view_device_list")
			s.OnlyHostViewDeviceList.Encode(e)
		}
	}
	{
		if s.OriginalAudio.Set {
			e.FieldStart("original_audio")
			s.OriginalAudio.Encode(e)
		}
	}
	{
		if s.Polling.Set {
			e.FieldStart("polling")
			s.Polling.Encode(e)
		}
	}
	{
		if s.PostMeetingFeedback.Set {
			e.FieldStart("post_meeting_feedback")
			s.PostMeetingFeedback.Encode(e)
		}
	}
	{
		if s.PrivateChat.Set {
			e.FieldStart("private_chat")
			s.PrivateChat.Encode(e)
		}
	}
	{
		if s.RecordPlayOwnVoice.Set {
			e.FieldStart("record_play_own_voice")
			s.RecordPlayOwnVoice.Encode(e)
		}
	}
	{
		if s.RemoteControl.Set {
			e.FieldStart("remote_control")
			s.RemoteControl.Encode(e)
		}
	}
	{
		if s.RemoteSupport.Set {
			e.FieldStart("remote_support")
			s.RemoteSupport.Encode(e)
		}
	}
	{
		if s.RequestPermissionToUnmuteParticipants.Set {
			e.FieldStart("request_permission_to_unmute_participants")
			s.RequestPermissionToUnmuteParticipants.Encode(e)
		}
	}
	{
		if s.ScreenSharing.Set {
			e.FieldStart("screen_sharing")
			s.ScreenSharing.Encode(e)
		}
	}
	{
		if s.SendingDefaultEmailInvites.Set {
			e.FieldStart("sending_default_email_invites")
			s.SendingDefaultEmailInvites.Encode(e)
		}
	}
	{
		if s.ShowAJoinFromYourBrowserLink.Set {
			e.FieldStart("show_a_join_from_your_browser_link")
			s.ShowAJoinFromYourBrowserLink.Encode(e)
		}
	}
	{
		if s.ShowBrowserJoinLink.Set {
			e.FieldStart("show_browser_join_link")
			s.ShowBrowserJoinLink.Encode(e)
		}
	}
	{
		if s.ShowDeviceList.Set {
			e.FieldStart("show_device_list")
			s.ShowDeviceList.Encode(e)
		}
	}
	{
		if s.ShowMeetingControlToolbar.Set {
			e.FieldStart("show_meeting_control_toolbar")
			s.ShowMeetingControlToolbar.Encode(e)
		}
	}
	{
		if s.SlideControl.Set {
			e.FieldStart("slide_control")
			s.SlideControl.Encode(e)
		}
	}
	{
		if s.StereoAudio.Set {
			e.FieldStart("stereo_audio")
			s.StereoAudio.Encode(e)
		}
	}
	{
		if s.UncheckedDataCenterRegions != nil {
			e.FieldStart("unchecked_data_center_regions")
			e.ArrStart()
			for _, elem := range s.UncheckedDataCenterRegions {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.UseHTMLFormatEmail.Set {
			e.FieldStart("use_html_format_email")
			s.UseHTMLFormatEmail.Encode(e)
		}
	}
	{
		if s.VirtualBackground.Set {
			e.FieldStart("virtual_background")
			s.VirtualBackground.Encode(e)
		}
	}
	{
		if s.VirtualBackgroundSettings.Set {
			e.FieldStart("virtual_background_settings")
			s.VirtualBackgroundSettings.Encode(e)
		}
	}
	{
		if s.WaitingRoom.Set {
			e.FieldStart("waiting_room")
			s.WaitingRoom.Encode(e)
		}
	}
	{
		if s.WebinarChat.Set {
			e.FieldStart("webinar_chat")
			s.WebinarChat.Encode(e)
		}
	}
	{
		if s.WebinarLiveStreaming.Set {
			e.FieldStart("webinar_live_streaming")
			s.WebinarLiveStreaming.Encode(e)
		}
	}
	{
		if s.MeetingPolling.Set {
			e.FieldStart("meeting_polling")
			s.MeetingPolling.Encode(e)
		}
	}
	{
		if s.WebinarPolling.Set {
			e.FieldStart("webinar_polling")
			s.WebinarPolling.Encode(e)
		}
	}
	{
		if s.WebinarQuestionAnswer.Set {
			e.FieldStart("webinar_question_answer")
			s.WebinarQuestionAnswer.Encode(e)
		}
	}
	{
		if s.WebinarSurvey.Set {
			e.FieldStart("webinar_survey")
			s.WebinarSurvey.Encode(e)
		}
	}
	{
		if s.Whiteboard.Set {
			e.FieldStart("whiteboard")
			s.Whiteboard.Encode(e)
		}
	}
	{
		if s.WhoCanShareScreen.Set {
			e.FieldStart("who_can_share_screen")
			s.WhoCanShareScreen.Encode(e)
		}
	}
	{
		if s.WhoCanShareScreenWhenSomeoneIsSharing.Set {
			e.FieldStart("who_can_share_screen_when_someone_is_sharing")
			s.WhoCanShareScreenWhenSomeoneIsSharing.Encode(e)
		}
	}
	{
		if s.ParticipantsShareSimultaneously.Set {
			e.FieldStart("participants_share_simultaneously")
			s.ParticipantsShareSimultaneously.Encode(e)
		}
	}
	{
		if s.WorkplaceByFacebook.Set {
			e.FieldStart("workplace_by_facebook")
			s.WorkplaceByFacebook.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK0InMeeting = [77]string{
	0:  "alert_guest_join",
	1:  "allow_users_to_delete_messages_in_meeting_chat",
	2:  "allow_live_streaming",
	3:  "allow_participants_chat_with",
	4:  "allow_show_zoom_windows",
	5:  "allow_users_save_chats",
	6:  "annotation",
	7:  "attendee_on_hold",
	8:  "auto_answer",
	9:  "auto_saving_chat",
	10: "breakout_room",
	11: "breakout_room_schedule",
	12: "chat",
	13: "meeting_question_answer",
	14: "closed_caption",
	15: "closed_captioning",
	16: "co_host",
	17: "custom_data_center_regions",
	18: "custom_live_streaming_service",
	19: "custom_service_instructions",
	20: "data_center_regions",
	21: "disable_screen_sharing_for_host_meetings",
	22: "disable_screen_sharing_for_in_meeting_guests",
	23: "e2e_encryption",
	24: "entry_exit_chime",
	25: "far_end_camera_control",
	26: "feedback",
	27: "file_transfer",
	28: "group_hd",
	29: "webinar_group_hd",
	30: "join_from_desktop",
	31: "join_from_mobile",
	32: "auto_generated_translation",
	33: "language_interpretation",
	34: "sign_language_interpretation",
	35: "live_streaming_facebook",
	36: "live_streaming_youtube",
	37: "manual_captioning",
	38: "meeting_reactions",
	39: "meeting_reactions_emojis",
	40: "allow_host_panelists_to_use_audible_clap",
	41: "webinar_reactions",
	42: "meeting_survey",
	43: "non_verbal_feedback",
	44: "only_host_view_device_list",
	45: "original_audio",
	46: "polling",
	47: "post_meeting_feedback",
	48: "private_chat",
	49: "record_play_own_voice",
	50: "remote_control",
	51: "remote_support",
	52: "request_permission_to_unmute_participants",
	53: "screen_sharing",
	54: "sending_default_email_invites",
	55: "show_a_join_from_your_browser_link",
	56: "show_browser_join_link",
	57: "show_device_list",
	58: "show_meeting_control_toolbar",
	59: "slide_control",
	60: "stereo_audio",
	61: "unchecked_data_center_regions",
	62: "use_html_format_email",
	63: "virtual_background",
	64: "virtual_background_settings",
	65: "waiting_room",
	66: "webinar_chat",
	67: "webinar_live_streaming",
	68: "meeting_polling",
	69: "webinar_polling",
	70: "webinar_question_answer",
	71: "webinar_survey",
	72: "whiteboard",
	73: "who_can_share_screen",
	74: "who_can_share_screen_when_someone_is_sharing",
	75: "participants_share_simultaneously",
	76: "workplace_by_facebook",
}

// Decode decodes GetGroupSettingsOK0InMeeting from json.
func (s *GetGroupSettingsOK0InMeeting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK0InMeeting to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "alert_guest_join":
			if err := func() error {
				s.AlertGuestJoin.Reset()
				if err := s.AlertGuestJoin.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"alert_guest_join\"")
			}
		case "allow_users_to_delete_messages_in_meeting_chat":
			if err := func() error {
				s.AllowUsersToDeleteMessagesInMeetingChat.Reset()
				if err := s.AllowUsersToDeleteMessagesInMeetingChat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_users_to_delete_messages_in_meeting_chat\"")
			}
		case "allow_live_streaming":
			if err := func() error {
				s.AllowLiveStreaming.Reset()
				if err := s.AllowLiveStreaming.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_live_streaming\"")
			}
		case "allow_participants_chat_with":
			if err := func() error {
				s.AllowParticipantsChatWith.Reset()
				if err := s.AllowParticipantsChatWith.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_participants_chat_with\"")
			}
		case "allow_show_zoom_windows":
			if err := func() error {
				s.AllowShowZoomWindows.Reset()
				if err := s.AllowShowZoomWindows.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_show_zoom_windows\"")
			}
		case "allow_users_save_chats":
			if err := func() error {
				s.AllowUsersSaveChats.Reset()
				if err := s.AllowUsersSaveChats.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_users_save_chats\"")
			}
		case "annotation":
			if err := func() error {
				s.Annotation.Reset()
				if err := s.Annotation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"annotation\"")
			}
		case "attendee_on_hold":
			if err := func() error {
				s.AttendeeOnHold.Reset()
				if err := s.AttendeeOnHold.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"attendee_on_hold\"")
			}
		case "auto_answer":
			if err := func() error {
				s.AutoAnswer.Reset()
				if err := s.AutoAnswer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_answer\"")
			}
		case "auto_saving_chat":
			if err := func() error {
				s.AutoSavingChat.Reset()
				if err := s.AutoSavingChat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_saving_chat\"")
			}
		case "breakout_room":
			if err := func() error {
				s.BreakoutRoom.Reset()
				if err := s.BreakoutRoom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"breakout_room\"")
			}
		case "breakout_room_schedule":
			if err := func() error {
				s.BreakoutRoomSchedule.Reset()
				if err := s.BreakoutRoomSchedule.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"breakout_room_schedule\"")
			}
		case "chat":
			if err := func() error {
				s.Chat.Reset()
				if err := s.Chat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"chat\"")
			}
		case "meeting_question_answer":
			if err := func() error {
				s.MeetingQuestionAnswer.Reset()
				if err := s.MeetingQuestionAnswer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_question_answer\"")
			}
		case "closed_caption":
			if err := func() error {
				s.ClosedCaption.Reset()
				if err := s.ClosedCaption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"closed_caption\"")
			}
		case "closed_captioning":
			if err := func() error {
				s.ClosedCaptioning.Reset()
				if err := s.ClosedCaptioning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"closed_captioning\"")
			}
		case "co_host":
			if err := func() error {
				s.CoHost.Reset()
				if err := s.CoHost.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"co_host\"")
			}
		case "custom_data_center_regions":
			if err := func() error {
				s.CustomDataCenterRegions.Reset()
				if err := s.CustomDataCenterRegions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"custom_data_center_regions\"")
			}
		case "custom_live_streaming_service":
			if err := func() error {
				s.CustomLiveStreamingService.Reset()
				if err := s.CustomLiveStreamingService.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"custom_live_streaming_service\"")
			}
		case "custom_service_instructions":
			if err := func() error {
				s.CustomServiceInstructions.Reset()
				if err := s.CustomServiceInstructions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"custom_service_instructions\"")
			}
		case "data_center_regions":
			if err := func() error {
				s.DataCenterRegions = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.DataCenterRegions = append(s.DataCenterRegions, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"data_center_regions\"")
			}
		case "disable_screen_sharing_for_host_meetings":
			if err := func() error {
				s.DisableScreenSharingForHostMeetings.Reset()
				if err := s.DisableScreenSharingForHostMeetings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"disable_screen_sharing_for_host_meetings\"")
			}
		case "disable_screen_sharing_for_in_meeting_guests":
			if err := func() error {
				s.DisableScreenSharingForInMeetingGuests.Reset()
				if err := s.DisableScreenSharingForInMeetingGuests.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"disable_screen_sharing_for_in_meeting_guests\"")
			}
		case "e2e_encryption":
			if err := func() error {
				s.E2eEncryption.Reset()
				if err := s.E2eEncryption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"e2e_encryption\"")
			}
		case "entry_exit_chime":
			if err := func() error {
				s.EntryExitChime.Reset()
				if err := s.EntryExitChime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"entry_exit_chime\"")
			}
		case "far_end_camera_control":
			if err := func() error {
				s.FarEndCameraControl.Reset()
				if err := s.FarEndCameraControl.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"far_end_camera_control\"")
			}
		case "feedback":
			if err := func() error {
				s.Feedback.Reset()
				if err := s.Feedback.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"feedback\"")
			}
		case "file_transfer":
			if err := func() error {
				s.FileTransfer.Reset()
				if err := s.FileTransfer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"file_transfer\"")
			}
		case "group_hd":
			if err := func() error {
				s.GroupHd.Reset()
				if err := s.GroupHd.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"group_hd\"")
			}
		case "webinar_group_hd":
			if err := func() error {
				s.WebinarGroupHd.Reset()
				if err := s.WebinarGroupHd.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webinar_group_hd\"")
			}
		case "join_from_desktop":
			if err := func() error {
				s.JoinFromDesktop.Reset()
				if err := s.JoinFromDesktop.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"join_from_desktop\"")
			}
		case "join_from_mobile":
			if err := func() error {
				s.JoinFromMobile.Reset()
				if err := s.JoinFromMobile.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"join_from_mobile\"")
			}
		case "auto_generated_translation":
			if err := func() error {
				s.AutoGeneratedTranslation.Reset()
				if err := s.AutoGeneratedTranslation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_generated_translation\"")
			}
		case "language_interpretation":
			if err := func() error {
				s.LanguageInterpretation.Reset()
				if err := s.LanguageInterpretation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"language_interpretation\"")
			}
		case "sign_language_interpretation":
			if err := func() error {
				s.SignLanguageInterpretation.Reset()
				if err := s.SignLanguageInterpretation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sign_language_interpretation\"")
			}
		case "live_streaming_facebook":
			if err := func() error {
				s.LiveStreamingFacebook.Reset()
				if err := s.LiveStreamingFacebook.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"live_streaming_facebook\"")
			}
		case "live_streaming_youtube":
			if err := func() error {
				s.LiveStreamingYoutube.Reset()
				if err := s.LiveStreamingYoutube.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"live_streaming_youtube\"")
			}
		case "manual_captioning":
			if err := func() error {
				s.ManualCaptioning.Reset()
				if err := s.ManualCaptioning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"manual_captioning\"")
			}
		case "meeting_reactions":
			if err := func() error {
				s.MeetingReactions.Reset()
				if err := s.MeetingReactions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_reactions\"")
			}
		case "meeting_reactions_emojis":
			if err := func() error {
				s.MeetingReactionsEmojis.Reset()
				if err := s.MeetingReactionsEmojis.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_reactions_emojis\"")
			}
		case "allow_host_panelists_to_use_audible_clap":
			if err := func() error {
				s.AllowHostPanelistsToUseAudibleClap.Reset()
				if err := s.AllowHostPanelistsToUseAudibleClap.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_host_panelists_to_use_audible_clap\"")
			}
		case "webinar_reactions":
			if err := func() error {
				s.WebinarReactions.Reset()
				if err := s.WebinarReactions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webinar_reactions\"")
			}
		case "meeting_survey":
			if err := func() error {
				s.MeetingSurvey.Reset()
				if err := s.MeetingSurvey.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_survey\"")
			}
		case "non_verbal_feedback":
			if err := func() error {
				s.NonVerbalFeedback.Reset()
				if err := s.NonVerbalFeedback.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"non_verbal_feedback\"")
			}
		case "only_host_view_device_list":
			if err := func() error {
				s.OnlyHostViewDeviceList.Reset()
				if err := s.OnlyHostViewDeviceList.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"only_host_view_device_list\"")
			}
		case "original_audio":
			if err := func() error {
				s.OriginalAudio.Reset()
				if err := s.OriginalAudio.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_audio\"")
			}
		case "polling":
			if err := func() error {
				s.Polling.Reset()
				if err := s.Polling.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"polling\"")
			}
		case "post_meeting_feedback":
			if err := func() error {
				s.PostMeetingFeedback.Reset()
				if err := s.PostMeetingFeedback.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"post_meeting_feedback\"")
			}
		case "private_chat":
			if err := func() error {
				s.PrivateChat.Reset()
				if err := s.PrivateChat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"private_chat\"")
			}
		case "record_play_own_voice":
			if err := func() error {
				s.RecordPlayOwnVoice.Reset()
				if err := s.RecordPlayOwnVoice.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"record_play_own_voice\"")
			}
		case "remote_control":
			if err := func() error {
				s.RemoteControl.Reset()
				if err := s.RemoteControl.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"remote_control\"")
			}
		case "remote_support":
			if err := func() error {
				s.RemoteSupport.Reset()
				if err := s.RemoteSupport.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"remote_support\"")
			}
		case "request_permission_to_unmute_participants":
			if err := func() error {
				s.RequestPermissionToUnmuteParticipants.Reset()
				if err := s.RequestPermissionToUnmuteParticipants.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"request_permission_to_unmute_participants\"")
			}
		case "screen_sharing":
			if err := func() error {
				s.ScreenSharing.Reset()
				if err := s.ScreenSharing.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"screen_sharing\"")
			}
		case "sending_default_email_invites":
			if err := func() error {
				s.SendingDefaultEmailInvites.Reset()
				if err := s.SendingDefaultEmailInvites.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sending_default_email_invites\"")
			}
		case "show_a_join_from_your_browser_link":
			if err := func() error {
				s.ShowAJoinFromYourBrowserLink.Reset()
				if err := s.ShowAJoinFromYourBrowserLink.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"show_a_join_from_your_browser_link\"")
			}
		case "show_browser_join_link":
			if err := func() error {
				s.ShowBrowserJoinLink.Reset()
				if err := s.ShowBrowserJoinLink.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"show_browser_join_link\"")
			}
		case "show_device_list":
			if err := func() error {
				s.ShowDeviceList.Reset()
				if err := s.ShowDeviceList.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"show_device_list\"")
			}
		case "show_meeting_control_toolbar":
			if err := func() error {
				s.ShowMeetingControlToolbar.Reset()
				if err := s.ShowMeetingControlToolbar.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"show_meeting_control_toolbar\"")
			}
		case "slide_control":
			if err := func() error {
				s.SlideControl.Reset()
				if err := s.SlideControl.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"slide_control\"")
			}
		case "stereo_audio":
			if err := func() error {
				s.StereoAudio.Reset()
				if err := s.StereoAudio.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"stereo_audio\"")
			}
		case "unchecked_data_center_regions":
			if err := func() error {
				s.UncheckedDataCenterRegions = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.UncheckedDataCenterRegions = append(s.UncheckedDataCenterRegions, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"unchecked_data_center_regions\"")
			}
		case "use_html_format_email":
			if err := func() error {
				s.UseHTMLFormatEmail.Reset()
				if err := s.UseHTMLFormatEmail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"use_html_format_email\"")
			}
		case "virtual_background":
			if err := func() error {
				s.VirtualBackground.Reset()
				if err := s.VirtualBackground.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"virtual_background\"")
			}
		case "virtual_background_settings":
			if err := func() error {
				s.VirtualBackgroundSettings.Reset()
				if err := s.VirtualBackgroundSettings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"virtual_background_settings\"")
			}
		case "waiting_room":
			if err := func() error {
				s.WaitingRoom.Reset()
				if err := s.WaitingRoom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"waiting_room\"")
			}
		case "webinar_chat":
			if err := func() error {
				s.WebinarChat.Reset()
				if err := s.WebinarChat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webinar_chat\"")
			}
		case "webinar_live_streaming":
			if err := func() error {
				s.WebinarLiveStreaming.Reset()
				if err := s.WebinarLiveStreaming.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webinar_live_streaming\"")
			}
		case "meeting_polling":
			if err := func() error {
				s.MeetingPolling.Reset()
				if err := s.MeetingPolling.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_polling\"")
			}
		case "webinar_polling":
			if err := func() error {
				s.WebinarPolling.Reset()
				if err := s.WebinarPolling.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webinar_polling\"")
			}
		case "webinar_question_answer":
			if err := func() error {
				s.WebinarQuestionAnswer.Reset()
				if err := s.WebinarQuestionAnswer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webinar_question_answer\"")
			}
		case "webinar_survey":
			if err := func() error {
				s.WebinarSurvey.Reset()
				if err := s.WebinarSurvey.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webinar_survey\"")
			}
		case "whiteboard":
			if err := func() error {
				s.Whiteboard.Reset()
				if err := s.Whiteboard.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"whiteboard\"")
			}
		case "who_can_share_screen":
			if err := func() error {
				s.WhoCanShareScreen.Reset()
				if err := s.WhoCanShareScreen.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"who_can_share_screen\"")
			}
		case "who_can_share_screen_when_someone_is_sharing":
			if err := func() error {
				s.WhoCanShareScreenWhenSomeoneIsSharing.Reset()
				if err := s.WhoCanShareScreenWhenSomeoneIsSharing.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"who_can_share_screen_when_someone_is_sharing\"")
			}
		case "participants_share_simultaneously":
			if err := func() error {
				s.ParticipantsShareSimultaneously.Reset()
				if err := s.ParticipantsShareSimultaneously.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"participants_share_simultaneously\"")
			}
		case "workplace_by_facebook":
			if err := func() error {
				s.WorkplaceByFacebook.Reset()
				if err := s.WorkplaceByFacebook.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"workplace_by_facebook\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK0InMeeting")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK0InMeeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK0InMeeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK0InMeetingAutoGeneratedTranslation) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK0InMeetingAutoGeneratedTranslation) encodeFields(e *jx.Encoder) {
	{
		if s.LanguageItemPairList.Set {
			e.FieldStart("language_item_pairList")
			s.LanguageItemPairList.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK0InMeetingAutoGeneratedTranslation = [2]string{
	0: "language_item_pairList",
	1: "enable",
}

// Decode decodes GetGroupSettingsOK0InMeetingAutoGeneratedTranslation from json.
func (s *GetGroupSettingsOK0InMeetingAutoGeneratedTranslation) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK0InMeetingAutoGeneratedTranslation to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "language_item_pairList":
			if err := func() error {
				s.LanguageItemPairList.Reset()
				if err := s.LanguageItemPairList.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"language_item_pairList\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK0InMeetingAutoGeneratedTranslation")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK0InMeetingAutoGeneratedTranslation) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK0InMeetingAutoGeneratedTranslation) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairList) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairList) encodeFields(e *jx.Encoder) {
	{
		if s.TransLangConfig != nil {
			e.FieldStart("trans_lang_config")
			e.ArrStart()
			for _, elem := range s.TransLangConfig {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.All.Set {
			e.FieldStart("all")
			s.All.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairList = [2]string{
	0: "trans_lang_config",
	1: "all",
}

// Decode decodes GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairList from json.
func (s *GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairList) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairList to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "trans_lang_config":
			if err := func() error {
				s.TransLangConfig = make([]GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.TransLangConfig = append(s.TransLangConfig, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"trans_lang_config\"")
			}
		case "all":
			if err := func() error {
				s.All.Reset()
				if err := s.All.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"all\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairList")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairList) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairList) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItem) encodeFields(e *jx.Encoder) {
	{
		if s.SpeakLanguage.Set {
			e.FieldStart("speak_language")
			s.SpeakLanguage.Encode(e)
		}
	}
	{
		if s.TranslateTo.Set {
			e.FieldStart("translate_to")
			s.TranslateTo.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItem = [2]string{
	0: "speak_language",
	1: "translate_to",
}

// Decode decodes GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItem from json.
func (s *GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "speak_language":
			if err := func() error {
				s.SpeakLanguage.Reset()
				if err := s.SpeakLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"speak_language\"")
			}
		case "translate_to":
			if err := func() error {
				s.TranslateTo.Reset()
				if err := s.TranslateTo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"translate_to\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Code.Set {
			e.FieldStart("code")
			s.Code.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage = [2]string{
	0: "name",
	1: "code",
}

// Decode decodes GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage from json.
func (s *GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "code":
			if err := func() error {
				s.Code.Reset()
				if err := s.Code.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo) encodeFields(e *jx.Encoder) {
	{
		if s.All.Set {
			e.FieldStart("all")
			s.All.Encode(e)
		}
	}
	{
		if s.LanguageConfig != nil {
			e.FieldStart("language_config")
			e.ArrStart()
			for _, elem := range s.LanguageConfig {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo = [2]string{
	0: "all",
	1: "language_config",
}

// Decode decodes GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo from json.
func (s *GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "all":
			if err := func() error {
				s.All.Reset()
				if err := s.All.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"all\"")
			}
		case "language_config":
			if err := func() error {
				s.LanguageConfig = make([]GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateToLanguageConfigItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateToLanguageConfigItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.LanguageConfig = append(s.LanguageConfig, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"language_config\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateToLanguageConfigItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateToLanguageConfigItem) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Code.Set {
			e.FieldStart("code")
			s.Code.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateToLanguageConfigItem = [2]string{
	0: "name",
	1: "code",
}

// Decode decodes GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateToLanguageConfigItem from json.
func (s *GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateToLanguageConfigItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateToLanguageConfigItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "code":
			if err := func() error {
				s.Code.Reset()
				if err := s.Code.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateToLanguageConfigItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateToLanguageConfigItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateToLanguageConfigItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK0InMeetingClosedCaptioning) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK0InMeetingClosedCaptioning) encodeFields(e *jx.Encoder) {
	{
		if s.AutoTranscribing.Set {
			e.FieldStart("auto_transcribing")
			s.AutoTranscribing.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.SaveCaption.Set {
			e.FieldStart("save_caption")
			s.SaveCaption.Encode(e)
		}
	}
	{
		if s.ThirdPartyCaptioningService.Set {
			e.FieldStart("third_party_captioning_service")
			s.ThirdPartyCaptioningService.Encode(e)
		}
	}
	{
		if s.ViewFullTranscript.Set {
			e.FieldStart("view_full_transcript")
			s.ViewFullTranscript.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK0InMeetingClosedCaptioning = [5]string{
	0: "auto_transcribing",
	1: "enable",
	2: "save_caption",
	3: "third_party_captioning_service",
	4: "view_full_transcript",
}

// Decode decodes GetGroupSettingsOK0InMeetingClosedCaptioning from json.
func (s *GetGroupSettingsOK0InMeetingClosedCaptioning) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK0InMeetingClosedCaptioning to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "auto_transcribing":
			if err := func() error {
				s.AutoTranscribing.Reset()
				if err := s.AutoTranscribing.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_transcribing\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "save_caption":
			if err := func() error {
				s.SaveCaption.Reset()
				if err := s.SaveCaption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"save_caption\"")
			}
		case "third_party_captioning_service":
			if err := func() error {
				s.ThirdPartyCaptioningService.Reset()
				if err := s.ThirdPartyCaptioningService.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"third_party_captioning_service\"")
			}
		case "view_full_transcript":
			if err := func() error {
				s.ViewFullTranscript.Reset()
				if err := s.ViewFullTranscript.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"view_full_transcript\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK0InMeetingClosedCaptioning")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK0InMeetingClosedCaptioning) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK0InMeetingClosedCaptioning) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK0InMeetingLanguageInterpretation) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK0InMeetingLanguageInterpretation) encodeFields(e *jx.Encoder) {
	{
		if s.CustomLanguages != nil {
			e.FieldStart("custom_languages")
			e.ArrStart()
			for _, elem := range s.CustomLanguages {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.EnableLanguageInterpretationByDefault.Set {
			e.FieldStart("enable_language_interpretation_by_default")
			s.EnableLanguageInterpretationByDefault.Encode(e)
		}
	}
	{
		if s.AllowParticipantsToSpeakInListeningChannel.Set {
			e.FieldStart("allow_participants_to_speak_in_listening_channel")
			s.AllowParticipantsToSpeakInListeningChannel.Encode(e)
		}
	}
	{
		if s.AllowUpTo25CustomLanguagesWhenSchedulingMeetings.Set {
			e.FieldStart("allow_up_to_25_custom_languages_when_scheduling_meetings")
			s.AllowUpTo25CustomLanguagesWhenSchedulingMeetings.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Languages != nil {
			e.FieldStart("languages")
			e.ArrStart()
			for _, elem := range s.Languages {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK0InMeetingLanguageInterpretation = [6]string{
	0: "custom_languages",
	1: "enable_language_interpretation_by_default",
	2: "allow_participants_to_speak_in_listening_channel",
	3: "allow_up_to_25_custom_languages_when_scheduling_meetings",
	4: "enable",
	5: "languages",
}

// Decode decodes GetGroupSettingsOK0InMeetingLanguageInterpretation from json.
func (s *GetGroupSettingsOK0InMeetingLanguageInterpretation) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK0InMeetingLanguageInterpretation to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "custom_languages":
			if err := func() error {
				s.CustomLanguages = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.CustomLanguages = append(s.CustomLanguages, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"custom_languages\"")
			}
		case "enable_language_interpretation_by_default":
			if err := func() error {
				s.EnableLanguageInterpretationByDefault.Reset()
				if err := s.EnableLanguageInterpretationByDefault.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable_language_interpretation_by_default\"")
			}
		case "allow_participants_to_speak_in_listening_channel":
			if err := func() error {
				s.AllowParticipantsToSpeakInListeningChannel.Reset()
				if err := s.AllowParticipantsToSpeakInListeningChannel.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_participants_to_speak_in_listening_channel\"")
			}
		case "allow_up_to_25_custom_languages_when_scheduling_meetings":
			if err := func() error {
				s.AllowUpTo25CustomLanguagesWhenSchedulingMeetings.Reset()
				if err := s.AllowUpTo25CustomLanguagesWhenSchedulingMeetings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_up_to_25_custom_languages_when_scheduling_meetings\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "languages":
			if err := func() error {
				s.Languages = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Languages = append(s.Languages, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"languages\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK0InMeetingLanguageInterpretation")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK0InMeetingLanguageInterpretation) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK0InMeetingLanguageInterpretation) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK0InMeetingManualCaptioning) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK0InMeetingManualCaptioning) encodeFields(e *jx.Encoder) {
	{
		if s.AllowToType.Set {
			e.FieldStart("allow_to_type")
			s.AllowToType.Encode(e)
		}
	}
	{
		if s.AutoGeneratedCaptions.Set {
			e.FieldStart("auto_generated_captions")
			s.AutoGeneratedCaptions.Encode(e)
		}
	}
	{
		if s.FullTranscript.Set {
			e.FieldStart("full_transcript")
			s.FullTranscript.Encode(e)
		}
	}
	{
		if s.ManualCaptions.Set {
			e.FieldStart("manual_captions")
			s.ManualCaptions.Encode(e)
		}
	}
	{
		if s.SaveCaptions.Set {
			e.FieldStart("save_captions")
			s.SaveCaptions.Encode(e)
		}
	}
	{
		if s.ThirdPartyCaptioningService.Set {
			e.FieldStart("third_party_captioning_service")
			s.ThirdPartyCaptioningService.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK0InMeetingManualCaptioning = [6]string{
	0: "allow_to_type",
	1: "auto_generated_captions",
	2: "full_transcript",
	3: "manual_captions",
	4: "save_captions",
	5: "third_party_captioning_service",
}

// Decode decodes GetGroupSettingsOK0InMeetingManualCaptioning from json.
func (s *GetGroupSettingsOK0InMeetingManualCaptioning) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK0InMeetingManualCaptioning to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allow_to_type":
			if err := func() error {
				s.AllowToType.Reset()
				if err := s.AllowToType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_to_type\"")
			}
		case "auto_generated_captions":
			if err := func() error {
				s.AutoGeneratedCaptions.Reset()
				if err := s.AutoGeneratedCaptions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_generated_captions\"")
			}
		case "full_transcript":
			if err := func() error {
				s.FullTranscript.Reset()
				if err := s.FullTranscript.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"full_transcript\"")
			}
		case "manual_captions":
			if err := func() error {
				s.ManualCaptions.Reset()
				if err := s.ManualCaptions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"manual_captions\"")
			}
		case "save_captions":
			if err := func() error {
				s.SaveCaptions.Reset()
				if err := s.SaveCaptions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"save_captions\"")
			}
		case "third_party_captioning_service":
			if err := func() error {
				s.ThirdPartyCaptioningService.Reset()
				if err := s.ThirdPartyCaptioningService.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"third_party_captioning_service\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK0InMeetingManualCaptioning")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK0InMeetingManualCaptioning) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK0InMeetingManualCaptioning) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK0InMeetingMeetingPolling) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK0InMeetingMeetingPolling) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.AdvancedPolls.Set {
			e.FieldStart("advanced_polls")
			s.AdvancedPolls.Encode(e)
		}
	}
	{
		if s.ManageSavedPollsAndQuizzes.Set {
			e.FieldStart("manage_saved_polls_and_quizzes")
			s.ManageSavedPollsAndQuizzes.Encode(e)
		}
	}
	{
		if s.RequireAnswersToBeAnonymous.Set {
			e.FieldStart("require_answers_to_be_anonymous")
			s.RequireAnswersToBeAnonymous.Encode(e)
		}
	}
	{
		if s.AllowAlternativeHostToAddEdit.Set {
			e.FieldStart("allow_alternative_host_to_add_edit")
			s.AllowAlternativeHostToAddEdit.Encode(e)
		}
	}
	{
		if s.AllowHostToUploadImage.Set {
			e.FieldStart("allow_host_to_upload_image")
			s.AllowHostToUploadImage.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK0InMeetingMeetingPolling = [6]string{
	0: "enable",
	1: "advanced_polls",
	2: "manage_saved_polls_and_quizzes",
	3: "require_answers_to_be_anonymous",
	4: "allow_alternative_host_to_add_edit",
	5: "allow_host_to_upload_image",
}

// Decode decodes GetGroupSettingsOK0InMeetingMeetingPolling from json.
func (s *GetGroupSettingsOK0InMeetingMeetingPolling) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK0InMeetingMeetingPolling to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "advanced_polls":
			if err := func() error {
				s.AdvancedPolls.Reset()
				if err := s.AdvancedPolls.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"advanced_polls\"")
			}
		case "manage_saved_polls_and_quizzes":
			if err := func() error {
				s.ManageSavedPollsAndQuizzes.Reset()
				if err := s.ManageSavedPollsAndQuizzes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"manage_saved_polls_and_quizzes\"")
			}
		case "require_answers_to_be_anonymous":
			if err := func() error {
				s.RequireAnswersToBeAnonymous.Reset()
				if err := s.RequireAnswersToBeAnonymous.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_answers_to_be_anonymous\"")
			}
		case "allow_alternative_host_to_add_edit":
			if err := func() error {
				s.AllowAlternativeHostToAddEdit.Reset()
				if err := s.AllowAlternativeHostToAddEdit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_alternative_host_to_add_edit\"")
			}
		case "allow_host_to_upload_image":
			if err := func() error {
				s.AllowHostToUploadImage.Reset()
				if err := s.AllowHostToUploadImage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_host_to_upload_image\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK0InMeetingMeetingPolling")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK0InMeetingMeetingPolling) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK0InMeetingMeetingPolling) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK0InMeetingSignLanguageInterpretation) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK0InMeetingSignLanguageInterpretation) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.EnableSignLanguageInterpretationByDefault.Set {
			e.FieldStart("enable_sign_language_interpretation_by_default")
			s.EnableSignLanguageInterpretationByDefault.Encode(e)
		}
	}
	{
		if s.Languages != nil {
			e.FieldStart("languages")
			e.ArrStart()
			for _, elem := range s.Languages {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.CustomLanguages != nil {
			e.FieldStart("custom_languages")
			e.ArrStart()
			for _, elem := range s.CustomLanguages {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK0InMeetingSignLanguageInterpretation = [4]string{
	0: "enable",
	1: "enable_sign_language_interpretation_by_default",
	2: "languages",
	3: "custom_languages",
}

// Decode decodes GetGroupSettingsOK0InMeetingSignLanguageInterpretation from json.
func (s *GetGroupSettingsOK0InMeetingSignLanguageInterpretation) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK0InMeetingSignLanguageInterpretation to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "enable_sign_language_interpretation_by_default":
			if err := func() error {
				s.EnableSignLanguageInterpretationByDefault.Reset()
				if err := s.EnableSignLanguageInterpretationByDefault.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable_sign_language_interpretation_by_default\"")
			}
		case "languages":
			if err := func() error {
				s.Languages = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Languages = append(s.Languages, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"languages\"")
			}
		case "custom_languages":
			if err := func() error {
				s.CustomLanguages = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.CustomLanguages = append(s.CustomLanguages, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"custom_languages\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK0InMeetingSignLanguageInterpretation")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK0InMeetingSignLanguageInterpretation) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK0InMeetingSignLanguageInterpretation) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK0InMeetingVirtualBackgroundSettings) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK0InMeetingVirtualBackgroundSettings) encodeFields(e *jx.Encoder) {
	{
		if s.AllowUploadCustom.Set {
			e.FieldStart("allow_upload_custom")
			s.AllowUploadCustom.Encode(e)
		}
	}
	{
		if s.AllowVideos.Set {
			e.FieldStart("allow_videos")
			s.AllowVideos.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Files != nil {
			e.FieldStart("files")
			e.ArrStart()
			for _, elem := range s.Files {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK0InMeetingVirtualBackgroundSettings = [4]string{
	0: "allow_upload_custom",
	1: "allow_videos",
	2: "enable",
	3: "files",
}

// Decode decodes GetGroupSettingsOK0InMeetingVirtualBackgroundSettings from json.
func (s *GetGroupSettingsOK0InMeetingVirtualBackgroundSettings) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK0InMeetingVirtualBackgroundSettings to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allow_upload_custom":
			if err := func() error {
				s.AllowUploadCustom.Reset()
				if err := s.AllowUploadCustom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_upload_custom\"")
			}
		case "allow_videos":
			if err := func() error {
				s.AllowVideos.Reset()
				if err := s.AllowVideos.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_videos\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "files":
			if err := func() error {
				s.Files = make([]GetGroupSettingsOK0InMeetingVirtualBackgroundSettingsFilesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetGroupSettingsOK0InMeetingVirtualBackgroundSettingsFilesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Files = append(s.Files, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"files\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK0InMeetingVirtualBackgroundSettings")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK0InMeetingVirtualBackgroundSettings) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK0InMeetingVirtualBackgroundSettings) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK0InMeetingVirtualBackgroundSettingsFilesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK0InMeetingVirtualBackgroundSettingsFilesItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.IsDefault.Set {
			e.FieldStart("is_default")
			s.IsDefault.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Size.Set {
			e.FieldStart("size")
			s.Size.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK0InMeetingVirtualBackgroundSettingsFilesItem = [5]string{
	0: "id",
	1: "is_default",
	2: "name",
	3: "size",
	4: "type",
}

// Decode decodes GetGroupSettingsOK0InMeetingVirtualBackgroundSettingsFilesItem from json.
func (s *GetGroupSettingsOK0InMeetingVirtualBackgroundSettingsFilesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK0InMeetingVirtualBackgroundSettingsFilesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "is_default":
			if err := func() error {
				s.IsDefault.Reset()
				if err := s.IsDefault.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"is_default\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "size":
			if err := func() error {
				s.Size.Reset()
				if err := s.Size.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK0InMeetingVirtualBackgroundSettingsFilesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK0InMeetingVirtualBackgroundSettingsFilesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK0InMeetingVirtualBackgroundSettingsFilesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK0InMeetingWebinarChat) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK0InMeetingWebinarChat) encodeFields(e *jx.Encoder) {
	{
		if s.AllowAttendeesChatWith.Set {
			e.FieldStart("allow_attendees_chat_with")
			s.AllowAttendeesChatWith.Encode(e)
		}
	}
	{
		if s.AllowAutoSaveLocalChatFile.Set {
			e.FieldStart("allow_auto_save_local_chat_file")
			s.AllowAutoSaveLocalChatFile.Encode(e)
		}
	}
	{
		if s.AllowPanelistsChatWith.Set {
			e.FieldStart("allow_panelists_chat_with")
			s.AllowPanelistsChatWith.Encode(e)
		}
	}
	{
		if s.AllowPanelistsSendDirectMessage.Set {
			e.FieldStart("allow_panelists_send_direct_message")
			s.AllowPanelistsSendDirectMessage.Encode(e)
		}
	}
	{
		if s.AllowUsersSaveChats.Set {
			e.FieldStart("allow_users_save_chats")
			s.AllowUsersSaveChats.Encode(e)
		}
	}
	{
		if s.DefaultAttendeesChatWith.Set {
			e.FieldStart("default_attendees_chat_with")
			s.DefaultAttendeesChatWith.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK0InMeetingWebinarChat = [7]string{
	0: "allow_attendees_chat_with",
	1: "allow_auto_save_local_chat_file",
	2: "allow_panelists_chat_with",
	3: "allow_panelists_send_direct_message",
	4: "allow_users_save_chats",
	5: "default_attendees_chat_with",
	6: "enable",
}

// Decode decodes GetGroupSettingsOK0InMeetingWebinarChat from json.
func (s *GetGroupSettingsOK0InMeetingWebinarChat) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK0InMeetingWebinarChat to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allow_attendees_chat_with":
			if err := func() error {
				s.AllowAttendeesChatWith.Reset()
				if err := s.AllowAttendeesChatWith.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_attendees_chat_with\"")
			}
		case "allow_auto_save_local_chat_file":
			if err := func() error {
				s.AllowAutoSaveLocalChatFile.Reset()
				if err := s.AllowAutoSaveLocalChatFile.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_auto_save_local_chat_file\"")
			}
		case "allow_panelists_chat_with":
			if err := func() error {
				s.AllowPanelistsChatWith.Reset()
				if err := s.AllowPanelistsChatWith.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_panelists_chat_with\"")
			}
		case "allow_panelists_send_direct_message":
			if err := func() error {
				s.AllowPanelistsSendDirectMessage.Reset()
				if err := s.AllowPanelistsSendDirectMessage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_panelists_send_direct_message\"")
			}
		case "allow_users_save_chats":
			if err := func() error {
				s.AllowUsersSaveChats.Reset()
				if err := s.AllowUsersSaveChats.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_users_save_chats\"")
			}
		case "default_attendees_chat_with":
			if err := func() error {
				s.DefaultAttendeesChatWith.Reset()
				if err := s.DefaultAttendeesChatWith.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"default_attendees_chat_with\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK0InMeetingWebinarChat")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK0InMeetingWebinarChat) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK0InMeetingWebinarChat) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK0InMeetingWebinarLiveStreaming) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK0InMeetingWebinarLiveStreaming) encodeFields(e *jx.Encoder) {
	{
		if s.CustomServiceInstructions.Set {
			e.FieldStart("custom_service_instructions")
			s.CustomServiceInstructions.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.LiveStreamingReminder.Set {
			e.FieldStart("live_streaming_reminder")
			s.LiveStreamingReminder.Encode(e)
		}
	}
	{
		if s.LiveStreamingService != nil {
			e.FieldStart("live_streaming_service")
			e.ArrStart()
			for _, elem := range s.LiveStreamingService {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK0InMeetingWebinarLiveStreaming = [4]string{
	0: "custom_service_instructions",
	1: "enable",
	2: "live_streaming_reminder",
	3: "live_streaming_service",
}

// Decode decodes GetGroupSettingsOK0InMeetingWebinarLiveStreaming from json.
func (s *GetGroupSettingsOK0InMeetingWebinarLiveStreaming) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK0InMeetingWebinarLiveStreaming to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "custom_service_instructions":
			if err := func() error {
				s.CustomServiceInstructions.Reset()
				if err := s.CustomServiceInstructions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"custom_service_instructions\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "live_streaming_reminder":
			if err := func() error {
				s.LiveStreamingReminder.Reset()
				if err := s.LiveStreamingReminder.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"live_streaming_reminder\"")
			}
		case "live_streaming_service":
			if err := func() error {
				s.LiveStreamingService = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.LiveStreamingService = append(s.LiveStreamingService, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"live_streaming_service\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK0InMeetingWebinarLiveStreaming")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK0InMeetingWebinarLiveStreaming) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK0InMeetingWebinarLiveStreaming) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK0InMeetingWebinarPolling) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK0InMeetingWebinarPolling) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.AdvancedPolls.Set {
			e.FieldStart("advanced_polls")
			s.AdvancedPolls.Encode(e)
		}
	}
	{
		if s.ManageSavedPollsAndQuizzes.Set {
			e.FieldStart("manage_saved_polls_and_quizzes")
			s.ManageSavedPollsAndQuizzes.Encode(e)
		}
	}
	{
		if s.RequireAnswersToBeAnonymous.Set {
			e.FieldStart("require_answers_to_be_anonymous")
			s.RequireAnswersToBeAnonymous.Encode(e)
		}
	}
	{
		if s.AllowHostToUploadImage.Set {
			e.FieldStart("allow_host_to_upload_image")
			s.AllowHostToUploadImage.Encode(e)
		}
	}
	{
		if s.AllowAlternativeHostToAddEdit.Set {
			e.FieldStart("allow_alternative_host_to_add_edit")
			s.AllowAlternativeHostToAddEdit.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK0InMeetingWebinarPolling = [6]string{
	0: "enable",
	1: "advanced_polls",
	2: "manage_saved_polls_and_quizzes",
	3: "require_answers_to_be_anonymous",
	4: "allow_host_to_upload_image",
	5: "allow_alternative_host_to_add_edit",
}

// Decode decodes GetGroupSettingsOK0InMeetingWebinarPolling from json.
func (s *GetGroupSettingsOK0InMeetingWebinarPolling) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK0InMeetingWebinarPolling to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "advanced_polls":
			if err := func() error {
				s.AdvancedPolls.Reset()
				if err := s.AdvancedPolls.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"advanced_polls\"")
			}
		case "manage_saved_polls_and_quizzes":
			if err := func() error {
				s.ManageSavedPollsAndQuizzes.Reset()
				if err := s.ManageSavedPollsAndQuizzes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"manage_saved_polls_and_quizzes\"")
			}
		case "require_answers_to_be_anonymous":
			if err := func() error {
				s.RequireAnswersToBeAnonymous.Reset()
				if err := s.RequireAnswersToBeAnonymous.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_answers_to_be_anonymous\"")
			}
		case "allow_host_to_upload_image":
			if err := func() error {
				s.AllowHostToUploadImage.Reset()
				if err := s.AllowHostToUploadImage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_host_to_upload_image\"")
			}
		case "allow_alternative_host_to_add_edit":
			if err := func() error {
				s.AllowAlternativeHostToAddEdit.Reset()
				if err := s.AllowAlternativeHostToAddEdit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_alternative_host_to_add_edit\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK0InMeetingWebinarPolling")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK0InMeetingWebinarPolling) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK0InMeetingWebinarPolling) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK0OtherOptions) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK0OtherOptions) encodeFields(e *jx.Encoder) {
	{
		if s.AllowUsersContactSupportViaChat.Set {
			e.FieldStart("allow_users_contact_support_via_chat")
			s.AllowUsersContactSupportViaChat.Encode(e)
		}
	}
	{
		if s.BlurSnapshot.Set {
			e.FieldStart("blur_snapshot")
			s.BlurSnapshot.Encode(e)
		}
	}
	{
		if s.WebinarRegistrationOptions.Set {
			e.FieldStart("webinar_registration_options")
			s.WebinarRegistrationOptions.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK0OtherOptions = [3]string{
	0: "allow_users_contact_support_via_chat",
	1: "blur_snapshot",
	2: "webinar_registration_options",
}

// Decode decodes GetGroupSettingsOK0OtherOptions from json.
func (s *GetGroupSettingsOK0OtherOptions) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK0OtherOptions to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allow_users_contact_support_via_chat":
			if err := func() error {
				s.AllowUsersContactSupportViaChat.Reset()
				if err := s.AllowUsersContactSupportViaChat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_users_contact_support_via_chat\"")
			}
		case "blur_snapshot":
			if err := func() error {
				s.BlurSnapshot.Reset()
				if err := s.BlurSnapshot.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"blur_snapshot\"")
			}
		case "webinar_registration_options":
			if err := func() error {
				s.WebinarRegistrationOptions.Reset()
				if err := s.WebinarRegistrationOptions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webinar_registration_options\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK0OtherOptions")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK0OtherOptions) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK0OtherOptions) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK0OtherOptionsWebinarRegistrationOptions) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK0OtherOptionsWebinarRegistrationOptions) encodeFields(e *jx.Encoder) {
	{
		if s.AllowHostToEnableJoinInfo.Set {
			e.FieldStart("allow_host_to_enable_join_info")
			s.AllowHostToEnableJoinInfo.Encode(e)
		}
	}
	{
		if s.AllowHostToEnableSocialShareButtons.Set {
			e.FieldStart("allow_host_to_enable_social_share_buttons")
			s.AllowHostToEnableSocialShareButtons.Encode(e)
		}
	}
	{
		if s.EnableCustomQuestions.Set {
			e.FieldStart("enable_custom_questions")
			s.EnableCustomQuestions.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK0OtherOptionsWebinarRegistrationOptions = [3]string{
	0: "allow_host_to_enable_join_info",
	1: "allow_host_to_enable_social_share_buttons",
	2: "enable_custom_questions",
}

// Decode decodes GetGroupSettingsOK0OtherOptionsWebinarRegistrationOptions from json.
func (s *GetGroupSettingsOK0OtherOptionsWebinarRegistrationOptions) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK0OtherOptionsWebinarRegistrationOptions to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allow_host_to_enable_join_info":
			if err := func() error {
				s.AllowHostToEnableJoinInfo.Reset()
				if err := s.AllowHostToEnableJoinInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_host_to_enable_join_info\"")
			}
		case "allow_host_to_enable_social_share_buttons":
			if err := func() error {
				s.AllowHostToEnableSocialShareButtons.Reset()
				if err := s.AllowHostToEnableSocialShareButtons.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_host_to_enable_social_share_buttons\"")
			}
		case "enable_custom_questions":
			if err := func() error {
				s.EnableCustomQuestions.Reset()
				if err := s.EnableCustomQuestions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable_custom_questions\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK0OtherOptionsWebinarRegistrationOptions")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK0OtherOptionsWebinarRegistrationOptions) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK0OtherOptionsWebinarRegistrationOptions) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK0Profile) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK0Profile) encodeFields(e *jx.Encoder) {
	{
		if s.RecordingStorageLocation.Set {
			e.FieldStart("recording_storage_location")
			s.RecordingStorageLocation.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK0Profile = [1]string{
	0: "recording_storage_location",
}

// Decode decodes GetGroupSettingsOK0Profile from json.
func (s *GetGroupSettingsOK0Profile) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK0Profile to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "recording_storage_location":
			if err := func() error {
				s.RecordingStorageLocation.Reset()
				if err := s.RecordingStorageLocation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_storage_location\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK0Profile")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK0Profile) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK0Profile) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK0ProfileRecordingStorageLocation) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK0ProfileRecordingStorageLocation) encodeFields(e *jx.Encoder) {
	{
		if s.AllowedValues != nil {
			e.FieldStart("allowed_values")
			e.ArrStart()
			for _, elem := range s.AllowedValues {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Value.Set {
			e.FieldStart("value")
			s.Value.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK0ProfileRecordingStorageLocation = [2]string{
	0: "allowed_values",
	1: "value",
}

// Decode decodes GetGroupSettingsOK0ProfileRecordingStorageLocation from json.
func (s *GetGroupSettingsOK0ProfileRecordingStorageLocation) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK0ProfileRecordingStorageLocation to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allowed_values":
			if err := func() error {
				s.AllowedValues = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.AllowedValues = append(s.AllowedValues, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allowed_values\"")
			}
		case "value":
			if err := func() error {
				s.Value.Reset()
				if err := s.Value.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"value\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK0ProfileRecordingStorageLocation")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK0ProfileRecordingStorageLocation) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK0ProfileRecordingStorageLocation) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK0Recording) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK0Recording) encodeFields(e *jx.Encoder) {
	{
		if s.AccountUserAccessRecording.Set {
			e.FieldStart("account_user_access_recording")
			s.AccountUserAccessRecording.Encode(e)
		}
	}
	{
		if s.Archive.Set {
			e.FieldStart("archive")
			s.Archive.Encode(e)
		}
	}
	{
		if s.AutoRecording.Set {
			e.FieldStart("auto_recording")
			s.AutoRecording.Encode(e)
		}
	}
	{
		if s.CloudRecording.Set {
			e.FieldStart("cloud_recording")
			s.CloudRecording.Encode(e)
		}
	}
	{
		if s.CloudRecordingDownload.Set {
			e.FieldStart("cloud_recording_download")
			s.CloudRecordingDownload.Encode(e)
		}
	}
	{
		if s.CloudRecordingDownloadHost.Set {
			e.FieldStart("cloud_recording_download_host")
			s.CloudRecordingDownloadHost.Encode(e)
		}
	}
	{
		if s.HostDeleteCloudRecording.Set {
			e.FieldStart("host_delete_cloud_recording")
			s.HostDeleteCloudRecording.Encode(e)
		}
	}
	{
		if s.RecordFilesSeparately.Set {
			e.FieldStart("record_files_separately")
			s.RecordFilesSeparately.Encode(e)
		}
	}
	{
		if s.DisplayParticipantName.Set {
			e.FieldStart("display_participant_name")
			s.DisplayParticipantName.Encode(e)
		}
	}
	{
		if s.RecordingThumbnails.Set {
			e.FieldStart("recording_thumbnails")
			s.RecordingThumbnails.Encode(e)
		}
	}
	{
		if s.OptimizeRecordingFor3rdPartyVideoEditor.Set {
			e.FieldStart("optimize_recording_for_3rd_party_video_editor")
			s.OptimizeRecordingFor3rdPartyVideoEditor.Encode(e)
		}
	}
	{
		if s.RecordingHighlight.Set {
			e.FieldStart("recording_highlight")
			s.RecordingHighlight.Encode(e)
		}
	}
	{
		if s.SavePanelistChat.Set {
			e.FieldStart("save_panelist_chat")
			s.SavePanelistChat.Encode(e)
		}
	}
	{
		if s.SavePollResults.Set {
			e.FieldStart("save_poll_results")
			s.SavePollResults.Encode(e)
		}
	}
	{
		if s.SaveCloseCaption.Set {
			e.FieldStart("save_close_caption")
			s.SaveCloseCaption.Encode(e)
		}
	}
	{
		if s.IPAddressAccessControl.Set {
			e.FieldStart("ip_address_access_control")
			s.IPAddressAccessControl.Encode(e)
		}
	}
	{
		if s.LocalRecording.Set {
			e.FieldStart("local_recording")
			s.LocalRecording.Encode(e)
		}
	}
	{
		if s.PreventHostAccessRecording.Set {
			e.FieldStart("prevent_host_access_recording")
			s.PreventHostAccessRecording.Encode(e)
		}
	}
	{
		if s.RecordAudioFile.Set {
			e.FieldStart("record_audio_file")
			s.RecordAudioFile.Encode(e)
		}
	}
	{
		if s.RecordGalleryView.Set {
			e.FieldStart("record_gallery_view")
			s.RecordGalleryView.Encode(e)
		}
	}
	{
		if s.RecordSpeakerView.Set {
			e.FieldStart("record_speaker_view")
			s.RecordSpeakerView.Encode(e)
		}
	}
	{
		if s.RecordingAudioTranscript.Set {
			e.FieldStart("recording_audio_transcript")
			s.RecordingAudioTranscript.Encode(e)
		}
	}
	{
		if s.SmartRecording.Set {
			e.FieldStart("smart_recording")
			s.SmartRecording.Encode(e)
		}
	}
	{
		if s.SaveChatText.Set {
			e.FieldStart("save_chat_text")
			s.SaveChatText.Encode(e)
		}
	}
	{
		if s.ShowTimestamp.Set {
			e.FieldStart("show_timestamp")
			s.ShowTimestamp.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK0Recording = [25]string{
	0:  "account_user_access_recording",
	1:  "archive",
	2:  "auto_recording",
	3:  "cloud_recording",
	4:  "cloud_recording_download",
	5:  "cloud_recording_download_host",
	6:  "host_delete_cloud_recording",
	7:  "record_files_separately",
	8:  "display_participant_name",
	9:  "recording_thumbnails",
	10: "optimize_recording_for_3rd_party_video_editor",
	11: "recording_highlight",
	12: "save_panelist_chat",
	13: "save_poll_results",
	14: "save_close_caption",
	15: "ip_address_access_control",
	16: "local_recording",
	17: "prevent_host_access_recording",
	18: "record_audio_file",
	19: "record_gallery_view",
	20: "record_speaker_view",
	21: "recording_audio_transcript",
	22: "smart_recording",
	23: "save_chat_text",
	24: "show_timestamp",
}

// Decode decodes GetGroupSettingsOK0Recording from json.
func (s *GetGroupSettingsOK0Recording) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK0Recording to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "account_user_access_recording":
			if err := func() error {
				s.AccountUserAccessRecording.Reset()
				if err := s.AccountUserAccessRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_user_access_recording\"")
			}
		case "archive":
			if err := func() error {
				s.Archive.Reset()
				if err := s.Archive.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"archive\"")
			}
		case "auto_recording":
			if err := func() error {
				s.AutoRecording.Reset()
				if err := s.AutoRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_recording\"")
			}
		case "cloud_recording":
			if err := func() error {
				s.CloudRecording.Reset()
				if err := s.CloudRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cloud_recording\"")
			}
		case "cloud_recording_download":
			if err := func() error {
				s.CloudRecordingDownload.Reset()
				if err := s.CloudRecordingDownload.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cloud_recording_download\"")
			}
		case "cloud_recording_download_host":
			if err := func() error {
				s.CloudRecordingDownloadHost.Reset()
				if err := s.CloudRecordingDownloadHost.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cloud_recording_download_host\"")
			}
		case "host_delete_cloud_recording":
			if err := func() error {
				s.HostDeleteCloudRecording.Reset()
				if err := s.HostDeleteCloudRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"host_delete_cloud_recording\"")
			}
		case "record_files_separately":
			if err := func() error {
				s.RecordFilesSeparately.Reset()
				if err := s.RecordFilesSeparately.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"record_files_separately\"")
			}
		case "display_participant_name":
			if err := func() error {
				s.DisplayParticipantName.Reset()
				if err := s.DisplayParticipantName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_participant_name\"")
			}
		case "recording_thumbnails":
			if err := func() error {
				s.RecordingThumbnails.Reset()
				if err := s.RecordingThumbnails.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_thumbnails\"")
			}
		case "optimize_recording_for_3rd_party_video_editor":
			if err := func() error {
				s.OptimizeRecordingFor3rdPartyVideoEditor.Reset()
				if err := s.OptimizeRecordingFor3rdPartyVideoEditor.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optimize_recording_for_3rd_party_video_editor\"")
			}
		case "recording_highlight":
			if err := func() error {
				s.RecordingHighlight.Reset()
				if err := s.RecordingHighlight.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_highlight\"")
			}
		case "save_panelist_chat":
			if err := func() error {
				s.SavePanelistChat.Reset()
				if err := s.SavePanelistChat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"save_panelist_chat\"")
			}
		case "save_poll_results":
			if err := func() error {
				s.SavePollResults.Reset()
				if err := s.SavePollResults.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"save_poll_results\"")
			}
		case "save_close_caption":
			if err := func() error {
				s.SaveCloseCaption.Reset()
				if err := s.SaveCloseCaption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"save_close_caption\"")
			}
		case "ip_address_access_control":
			if err := func() error {
				s.IPAddressAccessControl.Reset()
				if err := s.IPAddressAccessControl.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ip_address_access_control\"")
			}
		case "local_recording":
			if err := func() error {
				s.LocalRecording.Reset()
				if err := s.LocalRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"local_recording\"")
			}
		case "prevent_host_access_recording":
			if err := func() error {
				s.PreventHostAccessRecording.Reset()
				if err := s.PreventHostAccessRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"prevent_host_access_recording\"")
			}
		case "record_audio_file":
			if err := func() error {
				s.RecordAudioFile.Reset()
				if err := s.RecordAudioFile.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"record_audio_file\"")
			}
		case "record_gallery_view":
			if err := func() error {
				s.RecordGalleryView.Reset()
				if err := s.RecordGalleryView.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"record_gallery_view\"")
			}
		case "record_speaker_view":
			if err := func() error {
				s.RecordSpeakerView.Reset()
				if err := s.RecordSpeakerView.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"record_speaker_view\"")
			}
		case "recording_audio_transcript":
			if err := func() error {
				s.RecordingAudioTranscript.Reset()
				if err := s.RecordingAudioTranscript.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_audio_transcript\"")
			}
		case "smart_recording":
			if err := func() error {
				s.SmartRecording.Reset()
				if err := s.SmartRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"smart_recording\"")
			}
		case "save_chat_text":
			if err := func() error {
				s.SaveChatText.Reset()
				if err := s.SaveChatText.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"save_chat_text\"")
			}
		case "show_timestamp":
			if err := func() error {
				s.ShowTimestamp.Reset()
				if err := s.ShowTimestamp.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"show_timestamp\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK0Recording")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK0Recording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK0Recording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK0RecordingArchive) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK0RecordingArchive) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Settings.Set {
			e.FieldStart("settings")
			s.Settings.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK0RecordingArchive = [3]string{
	0: "enable",
	1: "settings",
	2: "type",
}

// Decode decodes GetGroupSettingsOK0RecordingArchive from json.
func (s *GetGroupSettingsOK0RecordingArchive) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK0RecordingArchive to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "settings":
			if err := func() error {
				s.Settings.Reset()
				if err := s.Settings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"settings\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK0RecordingArchive")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK0RecordingArchive) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK0RecordingArchive) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK0RecordingArchiveSettings) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK0RecordingArchiveSettings) encodeFields(e *jx.Encoder) {
	{
		if s.AudioFile.Set {
			e.FieldStart("audio_file")
			s.AudioFile.Encode(e)
		}
	}
	{
		if s.CcTranscriptFile.Set {
			e.FieldStart("cc_transcript_file")
			s.CcTranscriptFile.Encode(e)
		}
	}
	{
		if s.ChatFile.Set {
			e.FieldStart("chat_file")
			s.ChatFile.Encode(e)
		}
	}
	{
		if s.ChatWithSenderEmail.Set {
			e.FieldStart("chat_with_sender_email")
			s.ChatWithSenderEmail.Encode(e)
		}
	}
	{
		if s.VideoFile.Set {
			e.FieldStart("video_file")
			s.VideoFile.Encode(e)
		}
	}
	{
		if s.ChatWithDirectMessage.Set {
			e.FieldStart("chat_with_direct_message")
			s.ChatWithDirectMessage.Encode(e)
		}
	}
	{
		if s.ArchiveRetention.Set {
			e.FieldStart("archive_retention")
			s.ArchiveRetention.Encode(e)
		}
	}
	{
		if s.ActionWhenArchiveFailed.Set {
			e.FieldStart("action_when_archive_failed")
			s.ActionWhenArchiveFailed.Encode(e)
		}
	}
	{
		if s.NotificationWhenArchivingStarts.Set {
			e.FieldStart("notification_when_archiving_starts")
			s.NotificationWhenArchivingStarts.Encode(e)
		}
	}
	{
		if s.PlayVoicePromptWhenArchivingStarts.Set {
			e.FieldStart("play_voice_prompt_when_archiving_starts")
			s.PlayVoicePromptWhenArchivingStarts.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK0RecordingArchiveSettings = [10]string{
	0: "audio_file",
	1: "cc_transcript_file",
	2: "chat_file",
	3: "chat_with_sender_email",
	4: "video_file",
	5: "chat_with_direct_message",
	6: "archive_retention",
	7: "action_when_archive_failed",
	8: "notification_when_archiving_starts",
	9: "play_voice_prompt_when_archiving_starts",
}

// Decode decodes GetGroupSettingsOK0RecordingArchiveSettings from json.
func (s *GetGroupSettingsOK0RecordingArchiveSettings) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK0RecordingArchiveSettings to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_file":
			if err := func() error {
				s.AudioFile.Reset()
				if err := s.AudioFile.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_file\"")
			}
		case "cc_transcript_file":
			if err := func() error {
				s.CcTranscriptFile.Reset()
				if err := s.CcTranscriptFile.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cc_transcript_file\"")
			}
		case "chat_file":
			if err := func() error {
				s.ChatFile.Reset()
				if err := s.ChatFile.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"chat_file\"")
			}
		case "chat_with_sender_email":
			if err := func() error {
				s.ChatWithSenderEmail.Reset()
				if err := s.ChatWithSenderEmail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"chat_with_sender_email\"")
			}
		case "video_file":
			if err := func() error {
				s.VideoFile.Reset()
				if err := s.VideoFile.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video_file\"")
			}
		case "chat_with_direct_message":
			if err := func() error {
				s.ChatWithDirectMessage.Reset()
				if err := s.ChatWithDirectMessage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"chat_with_direct_message\"")
			}
		case "archive_retention":
			if err := func() error {
				s.ArchiveRetention.Reset()
				if err := s.ArchiveRetention.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"archive_retention\"")
			}
		case "action_when_archive_failed":
			if err := func() error {
				s.ActionWhenArchiveFailed.Reset()
				if err := s.ActionWhenArchiveFailed.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"action_when_archive_failed\"")
			}
		case "notification_when_archiving_starts":
			if err := func() error {
				s.NotificationWhenArchivingStarts.Reset()
				if err := s.NotificationWhenArchivingStarts.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"notification_when_archiving_starts\"")
			}
		case "play_voice_prompt_when_archiving_starts":
			if err := func() error {
				s.PlayVoicePromptWhenArchivingStarts.Reset()
				if err := s.PlayVoicePromptWhenArchivingStarts.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"play_voice_prompt_when_archiving_starts\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK0RecordingArchiveSettings")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK0RecordingArchiveSettings) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK0RecordingArchiveSettings) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK0RecordingIPAddressAccessControl) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK0RecordingIPAddressAccessControl) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.IPAddressesOrRanges.Set {
			e.FieldStart("ip_addresses_or_ranges")
			s.IPAddressesOrRanges.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK0RecordingIPAddressAccessControl = [2]string{
	0: "enable",
	1: "ip_addresses_or_ranges",
}

// Decode decodes GetGroupSettingsOK0RecordingIPAddressAccessControl from json.
func (s *GetGroupSettingsOK0RecordingIPAddressAccessControl) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK0RecordingIPAddressAccessControl to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "ip_addresses_or_ranges":
			if err := func() error {
				s.IPAddressesOrRanges.Reset()
				if err := s.IPAddressesOrRanges.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ip_addresses_or_ranges\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK0RecordingIPAddressAccessControl")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK0RecordingIPAddressAccessControl) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK0RecordingIPAddressAccessControl) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK0RecordingRecordFilesSeparately) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK0RecordingRecordFilesSeparately) encodeFields(e *jx.Encoder) {
	{
		if s.ActiveSpeaker.Set {
			e.FieldStart("active_speaker")
			s.ActiveSpeaker.Encode(e)
		}
	}
	{
		if s.GalleryView.Set {
			e.FieldStart("gallery_view")
			s.GalleryView.Encode(e)
		}
	}
	{
		if s.SharedScreen.Set {
			e.FieldStart("shared_screen")
			s.SharedScreen.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK0RecordingRecordFilesSeparately = [3]string{
	0: "active_speaker",
	1: "gallery_view",
	2: "shared_screen",
}

// Decode decodes GetGroupSettingsOK0RecordingRecordFilesSeparately from json.
func (s *GetGroupSettingsOK0RecordingRecordFilesSeparately) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK0RecordingRecordFilesSeparately to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "active_speaker":
			if err := func() error {
				s.ActiveSpeaker.Reset()
				if err := s.ActiveSpeaker.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"active_speaker\"")
			}
		case "gallery_view":
			if err := func() error {
				s.GalleryView.Reset()
				if err := s.GalleryView.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"gallery_view\"")
			}
		case "shared_screen":
			if err := func() error {
				s.SharedScreen.Reset()
				if err := s.SharedScreen.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shared_screen\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK0RecordingRecordFilesSeparately")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK0RecordingRecordFilesSeparately) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK0RecordingRecordFilesSeparately) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK0RecordingSmartRecording) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK0RecordingSmartRecording) encodeFields(e *jx.Encoder) {
	{
		if s.CreateRecordingHighlights.Set {
			e.FieldStart("create_recording_highlights")
			s.CreateRecordingHighlights.Encode(e)
		}
	}
	{
		if s.CreateSmartChapters.Set {
			e.FieldStart("create_smart_chapters")
			s.CreateSmartChapters.Encode(e)
		}
	}
	{
		if s.CreateNextSteps.Set {
			e.FieldStart("create_next_steps")
			s.CreateNextSteps.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK0RecordingSmartRecording = [3]string{
	0: "create_recording_highlights",
	1: "create_smart_chapters",
	2: "create_next_steps",
}

// Decode decodes GetGroupSettingsOK0RecordingSmartRecording from json.
func (s *GetGroupSettingsOK0RecordingSmartRecording) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK0RecordingSmartRecording to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "create_recording_highlights":
			if err := func() error {
				s.CreateRecordingHighlights.Reset()
				if err := s.CreateRecordingHighlights.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"create_recording_highlights\"")
			}
		case "create_smart_chapters":
			if err := func() error {
				s.CreateSmartChapters.Reset()
				if err := s.CreateSmartChapters.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"create_smart_chapters\"")
			}
		case "create_next_steps":
			if err := func() error {
				s.CreateNextSteps.Reset()
				if err := s.CreateNextSteps.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"create_next_steps\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK0RecordingSmartRecording")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK0RecordingSmartRecording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK0RecordingSmartRecording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK0ScheduleMeeting) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK0ScheduleMeeting) encodeFields(e *jx.Encoder) {
	{
		if s.AudioType.Set {
			e.FieldStart("audio_type")
			s.AudioType.Encode(e)
		}
	}
	{
		if s.EmbedPasswordInJoinLink.Set {
			e.FieldStart("embed_password_in_join_link")
			s.EmbedPasswordInJoinLink.Encode(e)
		}
	}
	{
		if s.ForcePmiJbhPassword.Set {
			e.FieldStart("force_pmi_jbh_password")
			s.ForcePmiJbhPassword.Encode(e)
		}
	}
	{
		if s.HostVideo.Set {
			e.FieldStart("host_video")
			s.HostVideo.Encode(e)
		}
	}
	{
		if s.JoinBeforeHost.Set {
			e.FieldStart("join_before_host")
			s.JoinBeforeHost.Encode(e)
		}
	}
	{
		if s.MuteUponEntry.Set {
			e.FieldStart("mute_upon_entry")
			s.MuteUponEntry.Encode(e)
		}
	}
	{
		if s.ParticipantVideo.Set {
			e.FieldStart("participant_video")
			s.ParticipantVideo.Encode(e)
		}
	}
	{
		if s.PersonalMeeting.Set {
			e.FieldStart("personal_meeting")
			s.PersonalMeeting.Encode(e)
		}
	}
	{
		if s.PstnPasswordProtected.Set {
			e.FieldStart("pstn_password_protected")
			s.PstnPasswordProtected.Encode(e)
		}
	}
	{
		if s.RequirePasswordForInstantMeetings.Set {
			e.FieldStart("require_password_for_instant_meetings")
			s.RequirePasswordForInstantMeetings.Encode(e)
		}
	}
	{
		if s.RequirePasswordForPmiMeetings.Set {
			e.FieldStart("require_password_for_pmi_meetings")
			s.RequirePasswordForPmiMeetings.Encode(e)
		}
	}
	{
		if s.RequirePasswordForScheduledMeetings.Set {
			e.FieldStart("require_password_for_scheduled_meetings")
			s.RequirePasswordForScheduledMeetings.Encode(e)
		}
	}
	{
		if s.RequirePasswordForSchedulingNewMeetings.Set {
			e.FieldStart("require_password_for_scheduling_new_meetings")
			s.RequirePasswordForSchedulingNewMeetings.Encode(e)
		}
	}
	{
		if s.UpcomingMeetingReminder.Set {
			e.FieldStart("upcoming_meeting_reminder")
			s.UpcomingMeetingReminder.Encode(e)
		}
	}
	{
		if s.UsePmiForInstantMeetings.Set {
			e.FieldStart("use_pmi_for_instant_meetings")
			s.UsePmiForInstantMeetings.Encode(e)
		}
	}
	{
		if s.UsePmiForScheduleMeetings.Set {
			e.FieldStart("use_pmi_for_schedule_meetings")
			s.UsePmiForScheduleMeetings.Encode(e)
		}
	}
	{
		if s.AlwaysDisplayZoomMeetingAsTopic.Set {
			e.FieldStart("always_display_zoom_meeting_as_topic")
			s.AlwaysDisplayZoomMeetingAsTopic.Encode(e)
		}
	}
	{
		if s.AlwaysDisplayZoomWebinarAsTopic.Set {
			e.FieldStart("always_display_zoom_webinar_as_topic")
			s.AlwaysDisplayZoomWebinarAsTopic.Encode(e)
		}
	}
	{
		if s.ContinuousMeetingChat.Set {
			e.FieldStart("continuous_meeting_chat")
			s.ContinuousMeetingChat.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK0ScheduleMeeting = [19]string{
	0:  "audio_type",
	1:  "embed_password_in_join_link",
	2:  "force_pmi_jbh_password",
	3:  "host_video",
	4:  "join_before_host",
	5:  "mute_upon_entry",
	6:  "participant_video",
	7:  "personal_meeting",
	8:  "pstn_password_protected",
	9:  "require_password_for_instant_meetings",
	10: "require_password_for_pmi_meetings",
	11: "require_password_for_scheduled_meetings",
	12: "require_password_for_scheduling_new_meetings",
	13: "upcoming_meeting_reminder",
	14: "use_pmi_for_instant_meetings",
	15: "use_pmi_for_schedule_meetings",
	16: "always_display_zoom_meeting_as_topic",
	17: "always_display_zoom_webinar_as_topic",
	18: "continuous_meeting_chat",
}

// Decode decodes GetGroupSettingsOK0ScheduleMeeting from json.
func (s *GetGroupSettingsOK0ScheduleMeeting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK0ScheduleMeeting to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_type":
			if err := func() error {
				s.AudioType.Reset()
				if err := s.AudioType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_type\"")
			}
		case "embed_password_in_join_link":
			if err := func() error {
				s.EmbedPasswordInJoinLink.Reset()
				if err := s.EmbedPasswordInJoinLink.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"embed_password_in_join_link\"")
			}
		case "force_pmi_jbh_password":
			if err := func() error {
				s.ForcePmiJbhPassword.Reset()
				if err := s.ForcePmiJbhPassword.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"force_pmi_jbh_password\"")
			}
		case "host_video":
			if err := func() error {
				s.HostVideo.Reset()
				if err := s.HostVideo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"host_video\"")
			}
		case "join_before_host":
			if err := func() error {
				s.JoinBeforeHost.Reset()
				if err := s.JoinBeforeHost.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"join_before_host\"")
			}
		case "mute_upon_entry":
			if err := func() error {
				s.MuteUponEntry.Reset()
				if err := s.MuteUponEntry.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mute_upon_entry\"")
			}
		case "participant_video":
			if err := func() error {
				s.ParticipantVideo.Reset()
				if err := s.ParticipantVideo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"participant_video\"")
			}
		case "personal_meeting":
			if err := func() error {
				s.PersonalMeeting.Reset()
				if err := s.PersonalMeeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"personal_meeting\"")
			}
		case "pstn_password_protected":
			if err := func() error {
				s.PstnPasswordProtected.Reset()
				if err := s.PstnPasswordProtected.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pstn_password_protected\"")
			}
		case "require_password_for_instant_meetings":
			if err := func() error {
				s.RequirePasswordForInstantMeetings.Reset()
				if err := s.RequirePasswordForInstantMeetings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_password_for_instant_meetings\"")
			}
		case "require_password_for_pmi_meetings":
			if err := func() error {
				s.RequirePasswordForPmiMeetings.Reset()
				if err := s.RequirePasswordForPmiMeetings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_password_for_pmi_meetings\"")
			}
		case "require_password_for_scheduled_meetings":
			if err := func() error {
				s.RequirePasswordForScheduledMeetings.Reset()
				if err := s.RequirePasswordForScheduledMeetings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_password_for_scheduled_meetings\"")
			}
		case "require_password_for_scheduling_new_meetings":
			if err := func() error {
				s.RequirePasswordForSchedulingNewMeetings.Reset()
				if err := s.RequirePasswordForSchedulingNewMeetings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_password_for_scheduling_new_meetings\"")
			}
		case "upcoming_meeting_reminder":
			if err := func() error {
				s.UpcomingMeetingReminder.Reset()
				if err := s.UpcomingMeetingReminder.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"upcoming_meeting_reminder\"")
			}
		case "use_pmi_for_instant_meetings":
			if err := func() error {
				s.UsePmiForInstantMeetings.Reset()
				if err := s.UsePmiForInstantMeetings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"use_pmi_for_instant_meetings\"")
			}
		case "use_pmi_for_schedule_meetings":
			if err := func() error {
				s.UsePmiForScheduleMeetings.Reset()
				if err := s.UsePmiForScheduleMeetings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"use_pmi_for_schedule_meetings\"")
			}
		case "always_display_zoom_meeting_as_topic":
			if err := func() error {
				s.AlwaysDisplayZoomMeetingAsTopic.Reset()
				if err := s.AlwaysDisplayZoomMeetingAsTopic.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"always_display_zoom_meeting_as_topic\"")
			}
		case "always_display_zoom_webinar_as_topic":
			if err := func() error {
				s.AlwaysDisplayZoomWebinarAsTopic.Reset()
				if err := s.AlwaysDisplayZoomWebinarAsTopic.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"always_display_zoom_webinar_as_topic\"")
			}
		case "continuous_meeting_chat":
			if err := func() error {
				s.ContinuousMeetingChat.Reset()
				if err := s.ContinuousMeetingChat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"continuous_meeting_chat\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK0ScheduleMeeting")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK0ScheduleMeeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK0ScheduleMeeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.DisplayTopicForScheduledMeetings.Set {
			e.FieldStart("display_topic_for_scheduled_meetings")
			s.DisplayTopicForScheduledMeetings.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic = [2]string{
	0: "enable",
	1: "display_topic_for_scheduled_meetings",
}

// Decode decodes GetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic from json.
func (s *GetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "display_topic_for_scheduled_meetings":
			if err := func() error {
				s.DisplayTopicForScheduledMeetings.Reset()
				if err := s.DisplayTopicForScheduledMeetings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_topic_for_scheduled_meetings\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.DisplayTopicForScheduledWebinars.Set {
			e.FieldStart("display_topic_for_scheduled_webinars")
			s.DisplayTopicForScheduledWebinars.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic = [2]string{
	0: "enable",
	1: "display_topic_for_scheduled_webinars",
}

// Decode decodes GetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic from json.
func (s *GetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "display_topic_for_scheduled_webinars":
			if err := func() error {
				s.DisplayTopicForScheduledWebinars.Reset()
				if err := s.DisplayTopicForScheduledWebinars.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_topic_for_scheduled_webinars\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK0ScheduleMeetingContinuousMeetingChat) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK0ScheduleMeetingContinuousMeetingChat) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.CanAddExternalUsers.Set {
			e.FieldStart("can_add_external_users")
			s.CanAddExternalUsers.Encode(e)
		}
	}
	{
		if s.AutoAddInvitedExternalUsers.Set {
			e.FieldStart("auto_add_invited_external_users")
			s.AutoAddInvitedExternalUsers.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK0ScheduleMeetingContinuousMeetingChat = [3]string{
	0: "enable",
	1: "can_add_external_users",
	2: "auto_add_invited_external_users",
}

// Decode decodes GetGroupSettingsOK0ScheduleMeetingContinuousMeetingChat from json.
func (s *GetGroupSettingsOK0ScheduleMeetingContinuousMeetingChat) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK0ScheduleMeetingContinuousMeetingChat to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "can_add_external_users":
			if err := func() error {
				s.CanAddExternalUsers.Reset()
				if err := s.CanAddExternalUsers.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"can_add_external_users\"")
			}
		case "auto_add_invited_external_users":
			if err := func() error {
				s.AutoAddInvitedExternalUsers.Reset()
				if err := s.AutoAddInvitedExternalUsers.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_add_invited_external_users\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK0ScheduleMeetingContinuousMeetingChat")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK0ScheduleMeetingContinuousMeetingChat) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK0ScheduleMeetingContinuousMeetingChat) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK0Telephony) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK0Telephony) encodeFields(e *jx.Encoder) {
	{
		if s.AudioConferenceInfo.Set {
			e.FieldStart("audio_conference_info")
			s.AudioConferenceInfo.Encode(e)
		}
	}
	{
		if s.TelephonyRegions.Set {
			e.FieldStart("telephony_regions")
			s.TelephonyRegions.Encode(e)
		}
	}
	{
		if s.ThirdPartyAudio.Set {
			e.FieldStart("third_party_audio")
			s.ThirdPartyAudio.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK0Telephony = [3]string{
	0: "audio_conference_info",
	1: "telephony_regions",
	2: "third_party_audio",
}

// Decode decodes GetGroupSettingsOK0Telephony from json.
func (s *GetGroupSettingsOK0Telephony) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK0Telephony to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_conference_info":
			if err := func() error {
				s.AudioConferenceInfo.Reset()
				if err := s.AudioConferenceInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_conference_info\"")
			}
		case "telephony_regions":
			if err := func() error {
				s.TelephonyRegions.Reset()
				if err := s.TelephonyRegions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"telephony_regions\"")
			}
		case "third_party_audio":
			if err := func() error {
				s.ThirdPartyAudio.Reset()
				if err := s.ThirdPartyAudio.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"third_party_audio\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK0Telephony")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK0Telephony) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK0Telephony) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK0TelephonyTelephonyRegions) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK0TelephonyTelephonyRegions) encodeFields(e *jx.Encoder) {
	{
		if s.SelectionValues.Set {
			e.FieldStart("selection_values")
			s.SelectionValues.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK0TelephonyTelephonyRegions = [1]string{
	0: "selection_values",
}

// Decode decodes GetGroupSettingsOK0TelephonyTelephonyRegions from json.
func (s *GetGroupSettingsOK0TelephonyTelephonyRegions) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK0TelephonyTelephonyRegions to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "selection_values":
			if err := func() error {
				s.SelectionValues.Reset()
				if err := s.SelectionValues.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"selection_values\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK0TelephonyTelephonyRegions")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK0TelephonyTelephonyRegions) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK0TelephonyTelephonyRegions) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK1) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK1) encodeFields(e *jx.Encoder) {
	{
		if s.AllowAuthenticationException.Set {
			e.FieldStart("allow_authentication_exception")
			s.AllowAuthenticationException.Encode(e)
		}
	}
	{
		if s.AuthenticationOptions != nil {
			e.FieldStart("authentication_options")
			e.ArrStart()
			for _, elem := range s.AuthenticationOptions {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.MeetingAuthentication.Set {
			e.FieldStart("meeting_authentication")
			s.MeetingAuthentication.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK1 = [3]string{
	0: "allow_authentication_exception",
	1: "authentication_options",
	2: "meeting_authentication",
}

// Decode decodes GetGroupSettingsOK1 from json.
func (s *GetGroupSettingsOK1) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK1 to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allow_authentication_exception":
			if err := func() error {
				s.AllowAuthenticationException.Reset()
				if err := s.AllowAuthenticationException.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_authentication_exception\"")
			}
		case "authentication_options":
			if err := func() error {
				s.AuthenticationOptions = make([]GetGroupSettingsOK1AuthenticationOptionsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetGroupSettingsOK1AuthenticationOptionsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.AuthenticationOptions = append(s.AuthenticationOptions, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"authentication_options\"")
			}
		case "meeting_authentication":
			if err := func() error {
				s.MeetingAuthentication.Reset()
				if err := s.MeetingAuthentication.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_authentication\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK1")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK1) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK1) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK1AuthenticationOptionsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK1AuthenticationOptionsItem) encodeFields(e *jx.Encoder) {
	{
		if s.DefaultOption.Set {
			e.FieldStart("default_option")
			s.DefaultOption.Encode(e)
		}
	}
	{
		if s.Domains.Set {
			e.FieldStart("domains")
			s.Domains.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.Visible.Set {
			e.FieldStart("visible")
			s.Visible.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK1AuthenticationOptionsItem = [6]string{
	0: "default_option",
	1: "domains",
	2: "id",
	3: "name",
	4: "type",
	5: "visible",
}

// Decode decodes GetGroupSettingsOK1AuthenticationOptionsItem from json.
func (s *GetGroupSettingsOK1AuthenticationOptionsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK1AuthenticationOptionsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "default_option":
			if err := func() error {
				s.DefaultOption.Reset()
				if err := s.DefaultOption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"default_option\"")
			}
		case "domains":
			if err := func() error {
				s.Domains.Reset()
				if err := s.Domains.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"domains\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "visible":
			if err := func() error {
				s.Visible.Reset()
				if err := s.Visible.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"visible\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK1AuthenticationOptionsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK1AuthenticationOptionsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK1AuthenticationOptionsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK2) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK2) encodeFields(e *jx.Encoder) {
	{
		if s.AuthenticationOptions != nil {
			e.FieldStart("authentication_options")
			e.ArrStart()
			for _, elem := range s.AuthenticationOptions {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.RecordingAuthentication.Set {
			e.FieldStart("recording_authentication")
			s.RecordingAuthentication.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK2 = [2]string{
	0: "authentication_options",
	1: "recording_authentication",
}

// Decode decodes GetGroupSettingsOK2 from json.
func (s *GetGroupSettingsOK2) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK2 to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "authentication_options":
			if err := func() error {
				s.AuthenticationOptions = make([]GetGroupSettingsOK2AuthenticationOptionsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetGroupSettingsOK2AuthenticationOptionsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.AuthenticationOptions = append(s.AuthenticationOptions, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"authentication_options\"")
			}
		case "recording_authentication":
			if err := func() error {
				s.RecordingAuthentication.Reset()
				if err := s.RecordingAuthentication.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_authentication\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK2")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK2) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK2) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK2AuthenticationOptionsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK2AuthenticationOptionsItem) encodeFields(e *jx.Encoder) {
	{
		if s.DefaultOption.Set {
			e.FieldStart("default_option")
			s.DefaultOption.Encode(e)
		}
	}
	{
		if s.Domains.Set {
			e.FieldStart("domains")
			s.Domains.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.Visible.Set {
			e.FieldStart("visible")
			s.Visible.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK2AuthenticationOptionsItem = [6]string{
	0: "default_option",
	1: "domains",
	2: "id",
	3: "name",
	4: "type",
	5: "visible",
}

// Decode decodes GetGroupSettingsOK2AuthenticationOptionsItem from json.
func (s *GetGroupSettingsOK2AuthenticationOptionsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK2AuthenticationOptionsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "default_option":
			if err := func() error {
				s.DefaultOption.Reset()
				if err := s.DefaultOption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"default_option\"")
			}
		case "domains":
			if err := func() error {
				s.Domains.Reset()
				if err := s.Domains.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"domains\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "visible":
			if err := func() error {
				s.Visible.Reset()
				if err := s.Visible.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"visible\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK2AuthenticationOptionsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK2AuthenticationOptionsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK2AuthenticationOptionsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK3) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK3) encodeFields(e *jx.Encoder) {
	{
		if s.MeetingSecurity.Set {
			e.FieldStart("meeting_security")
			s.MeetingSecurity.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK3 = [1]string{
	0: "meeting_security",
}

// Decode decodes GetGroupSettingsOK3 from json.
func (s *GetGroupSettingsOK3) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK3 to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "meeting_security":
			if err := func() error {
				s.MeetingSecurity.Reset()
				if err := s.MeetingSecurity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_security\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK3")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK3) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK3) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK3MeetingSecurity) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK3MeetingSecurity) encodeFields(e *jx.Encoder) {
	{
		if s.AutoSecurity.Set {
			e.FieldStart("auto_security")
			s.AutoSecurity.Encode(e)
		}
	}
	{
		if s.BlockUserDomain.Set {
			e.FieldStart("block_user_domain")
			s.BlockUserDomain.Encode(e)
		}
	}
	{
		if s.BlockUserDomainList != nil {
			e.FieldStart("block_user_domain_list")
			e.ArrStart()
			for _, elem := range s.BlockUserDomainList {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ChatEtiquetteTool.Set {
			e.FieldStart("chat_etiquette_tool")
			s.ChatEtiquetteTool.Encode(e)
		}
	}
	{
		if s.EmbedPasswordInJoinLink.Set {
			e.FieldStart("embed_password_in_join_link")
			s.EmbedPasswordInJoinLink.Encode(e)
		}
	}
	{
		if s.EncryptionType.Set {
			e.FieldStart("encryption_type")
			s.EncryptionType.Encode(e)
		}
	}
	{
		if s.EndToEndEncryptedMeetings.Set {
			e.FieldStart("end_to_end_encrypted_meetings")
			s.EndToEndEncryptedMeetings.Encode(e)
		}
	}
	{
		if s.MeetingPassword.Set {
			e.FieldStart("meeting_password")
			s.MeetingPassword.Encode(e)
		}
	}
	{
		if s.MeetingPasswordRequirement.Set {
			e.FieldStart("meeting_password_requirement")
			s.MeetingPasswordRequirement.Encode(e)
		}
	}
	{
		if s.OnlyAuthenticatedCanJoinFromWebclient.Set {
			e.FieldStart("only_authenticated_can_join_from_webclient")
			s.OnlyAuthenticatedCanJoinFromWebclient.Encode(e)
		}
	}
	{
		if s.PhonePassword.Set {
			e.FieldStart("phone_password")
			s.PhonePassword.Encode(e)
		}
	}
	{
		if s.PmiPassword.Set {
			e.FieldStart("pmi_password")
			s.PmiPassword.Encode(e)
		}
	}
	{
		if s.RequirePasswordForScheduledMeeting.Set {
			e.FieldStart("require_password_for_scheduled_meeting")
			s.RequirePasswordForScheduledMeeting.Encode(e)
		}
	}
	{
		if s.RequirePasswordForScheduledWebinar.Set {
			e.FieldStart("require_password_for_scheduled_webinar")
			s.RequirePasswordForScheduledWebinar.Encode(e)
		}
	}
	{
		if s.WaitingRoom.Set {
			e.FieldStart("waiting_room")
			s.WaitingRoom.Encode(e)
		}
	}
	{
		if s.WaitingRoomSettings.Set {
			e.FieldStart("waiting_room_settings")
			s.WaitingRoomSettings.Encode(e)
		}
	}
	{
		if s.WebinarPassword.Set {
			e.FieldStart("webinar_password")
			s.WebinarPassword.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK3MeetingSecurity = [17]string{
	0:  "auto_security",
	1:  "block_user_domain",
	2:  "block_user_domain_list",
	3:  "chat_etiquette_tool",
	4:  "embed_password_in_join_link",
	5:  "encryption_type",
	6:  "end_to_end_encrypted_meetings",
	7:  "meeting_password",
	8:  "meeting_password_requirement",
	9:  "only_authenticated_can_join_from_webclient",
	10: "phone_password",
	11: "pmi_password",
	12: "require_password_for_scheduled_meeting",
	13: "require_password_for_scheduled_webinar",
	14: "waiting_room",
	15: "waiting_room_settings",
	16: "webinar_password",
}

// Decode decodes GetGroupSettingsOK3MeetingSecurity from json.
func (s *GetGroupSettingsOK3MeetingSecurity) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK3MeetingSecurity to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "auto_security":
			if err := func() error {
				s.AutoSecurity.Reset()
				if err := s.AutoSecurity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_security\"")
			}
		case "block_user_domain":
			if err := func() error {
				s.BlockUserDomain.Reset()
				if err := s.BlockUserDomain.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"block_user_domain\"")
			}
		case "block_user_domain_list":
			if err := func() error {
				s.BlockUserDomainList = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.BlockUserDomainList = append(s.BlockUserDomainList, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"block_user_domain_list\"")
			}
		case "chat_etiquette_tool":
			if err := func() error {
				s.ChatEtiquetteTool.Reset()
				if err := s.ChatEtiquetteTool.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"chat_etiquette_tool\"")
			}
		case "embed_password_in_join_link":
			if err := func() error {
				s.EmbedPasswordInJoinLink.Reset()
				if err := s.EmbedPasswordInJoinLink.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"embed_password_in_join_link\"")
			}
		case "encryption_type":
			if err := func() error {
				s.EncryptionType.Reset()
				if err := s.EncryptionType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"encryption_type\"")
			}
		case "end_to_end_encrypted_meetings":
			if err := func() error {
				s.EndToEndEncryptedMeetings.Reset()
				if err := s.EndToEndEncryptedMeetings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"end_to_end_encrypted_meetings\"")
			}
		case "meeting_password":
			if err := func() error {
				s.MeetingPassword.Reset()
				if err := s.MeetingPassword.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_password\"")
			}
		case "meeting_password_requirement":
			if err := func() error {
				s.MeetingPasswordRequirement.Reset()
				if err := s.MeetingPasswordRequirement.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_password_requirement\"")
			}
		case "only_authenticated_can_join_from_webclient":
			if err := func() error {
				s.OnlyAuthenticatedCanJoinFromWebclient.Reset()
				if err := s.OnlyAuthenticatedCanJoinFromWebclient.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"only_authenticated_can_join_from_webclient\"")
			}
		case "phone_password":
			if err := func() error {
				s.PhonePassword.Reset()
				if err := s.PhonePassword.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_password\"")
			}
		case "pmi_password":
			if err := func() error {
				s.PmiPassword.Reset()
				if err := s.PmiPassword.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pmi_password\"")
			}
		case "require_password_for_scheduled_meeting":
			if err := func() error {
				s.RequirePasswordForScheduledMeeting.Reset()
				if err := s.RequirePasswordForScheduledMeeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_password_for_scheduled_meeting\"")
			}
		case "require_password_for_scheduled_webinar":
			if err := func() error {
				s.RequirePasswordForScheduledWebinar.Reset()
				if err := s.RequirePasswordForScheduledWebinar.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_password_for_scheduled_webinar\"")
			}
		case "waiting_room":
			if err := func() error {
				s.WaitingRoom.Reset()
				if err := s.WaitingRoom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"waiting_room\"")
			}
		case "waiting_room_settings":
			if err := func() error {
				s.WaitingRoomSettings.Reset()
				if err := s.WaitingRoomSettings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"waiting_room_settings\"")
			}
		case "webinar_password":
			if err := func() error {
				s.WebinarPassword.Reset()
				if err := s.WebinarPassword.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webinar_password\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK3MeetingSecurity")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK3MeetingSecurity) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK3MeetingSecurity) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK3MeetingSecurityChatEtiquetteTool) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK3MeetingSecurityChatEtiquetteTool) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Policies != nil {
			e.FieldStart("policies")
			e.ArrStart()
			for _, elem := range s.Policies {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK3MeetingSecurityChatEtiquetteTool = [2]string{
	0: "enable",
	1: "policies",
}

// Decode decodes GetGroupSettingsOK3MeetingSecurityChatEtiquetteTool from json.
func (s *GetGroupSettingsOK3MeetingSecurityChatEtiquetteTool) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK3MeetingSecurityChatEtiquetteTool to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "policies":
			if err := func() error {
				s.Policies = make([]GetGroupSettingsOK3MeetingSecurityChatEtiquetteToolPoliciesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GetGroupSettingsOK3MeetingSecurityChatEtiquetteToolPoliciesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Policies = append(s.Policies, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"policies\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK3MeetingSecurityChatEtiquetteTool")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK3MeetingSecurityChatEtiquetteTool) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK3MeetingSecurityChatEtiquetteTool) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK3MeetingSecurityChatEtiquetteToolPoliciesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK3MeetingSecurityChatEtiquetteToolPoliciesItem) encodeFields(e *jx.Encoder) {
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.IsLocked.Set {
			e.FieldStart("is_locked")
			s.IsLocked.Encode(e)
		}
	}
	{
		if s.Keywords != nil {
			e.FieldStart("keywords")
			e.ArrStart()
			for _, elem := range s.Keywords {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.RegularExpression.Set {
			e.FieldStart("regular_expression")
			s.RegularExpression.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.TriggerAction.Set {
			e.FieldStart("trigger_action")
			s.TriggerAction.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK3MeetingSecurityChatEtiquetteToolPoliciesItem = [8]string{
	0: "description",
	1: "id",
	2: "is_locked",
	3: "keywords",
	4: "name",
	5: "regular_expression",
	6: "status",
	7: "trigger_action",
}

// Decode decodes GetGroupSettingsOK3MeetingSecurityChatEtiquetteToolPoliciesItem from json.
func (s *GetGroupSettingsOK3MeetingSecurityChatEtiquetteToolPoliciesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK3MeetingSecurityChatEtiquetteToolPoliciesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "is_locked":
			if err := func() error {
				s.IsLocked.Reset()
				if err := s.IsLocked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"is_locked\"")
			}
		case "keywords":
			if err := func() error {
				s.Keywords = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Keywords = append(s.Keywords, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"keywords\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "regular_expression":
			if err := func() error {
				s.RegularExpression.Reset()
				if err := s.RegularExpression.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"regular_expression\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "trigger_action":
			if err := func() error {
				s.TriggerAction.Reset()
				if err := s.TriggerAction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"trigger_action\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK3MeetingSecurityChatEtiquetteToolPoliciesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK3MeetingSecurityChatEtiquetteToolPoliciesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK3MeetingSecurityChatEtiquetteToolPoliciesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement) encodeFields(e *jx.Encoder) {
	{
		if s.ConsecutiveCharactersLength.Set {
			e.FieldStart("consecutive_characters_length")
			s.ConsecutiveCharactersLength.Encode(e)
		}
	}
	{
		if s.HaveLetter.Set {
			e.FieldStart("have_letter")
			s.HaveLetter.Encode(e)
		}
	}
	{
		if s.HaveNumber.Set {
			e.FieldStart("have_number")
			s.HaveNumber.Encode(e)
		}
	}
	{
		if s.HaveSpecialCharacter.Set {
			e.FieldStart("have_special_character")
			s.HaveSpecialCharacter.Encode(e)
		}
	}
	{
		if s.HaveUpperAndLowerCharacters.Set {
			e.FieldStart("have_upper_and_lower_characters")
			s.HaveUpperAndLowerCharacters.Encode(e)
		}
	}
	{
		if s.Length.Set {
			e.FieldStart("length")
			s.Length.Encode(e)
		}
	}
	{
		if s.OnlyAllowNumeric.Set {
			e.FieldStart("only_allow_numeric")
			s.OnlyAllowNumeric.Encode(e)
		}
	}
	{
		if s.WeakEnhanceDetection.Set {
			e.FieldStart("weak_enhance_detection")
			s.WeakEnhanceDetection.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement = [8]string{
	0: "consecutive_characters_length",
	1: "have_letter",
	2: "have_number",
	3: "have_special_character",
	4: "have_upper_and_lower_characters",
	5: "length",
	6: "only_allow_numeric",
	7: "weak_enhance_detection",
}

// Decode decodes GetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement from json.
func (s *GetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "consecutive_characters_length":
			if err := func() error {
				s.ConsecutiveCharactersLength.Reset()
				if err := s.ConsecutiveCharactersLength.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"consecutive_characters_length\"")
			}
		case "have_letter":
			if err := func() error {
				s.HaveLetter.Reset()
				if err := s.HaveLetter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"have_letter\"")
			}
		case "have_number":
			if err := func() error {
				s.HaveNumber.Reset()
				if err := s.HaveNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"have_number\"")
			}
		case "have_special_character":
			if err := func() error {
				s.HaveSpecialCharacter.Reset()
				if err := s.HaveSpecialCharacter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"have_special_character\"")
			}
		case "have_upper_and_lower_characters":
			if err := func() error {
				s.HaveUpperAndLowerCharacters.Reset()
				if err := s.HaveUpperAndLowerCharacters.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"have_upper_and_lower_characters\"")
			}
		case "length":
			if err := func() error {
				s.Length.Reset()
				if err := s.Length.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"length\"")
			}
		case "only_allow_numeric":
			if err := func() error {
				s.OnlyAllowNumeric.Reset()
				if err := s.OnlyAllowNumeric.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"only_allow_numeric\"")
			}
		case "weak_enhance_detection":
			if err := func() error {
				s.WeakEnhanceDetection.Reset()
				if err := s.WeakEnhanceDetection.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"weak_enhance_detection\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetGroupSettingsOK3MeetingSecurityWaitingRoomSettings) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetGroupSettingsOK3MeetingSecurityWaitingRoomSettings) encodeFields(e *jx.Encoder) {
	{
		if s.ParticipantsToPlaceInWaitingRoom.Set {
			e.FieldStart("participants_to_place_in_waiting_room")
			s.ParticipantsToPlaceInWaitingRoom.Encode(e)
		}
	}
	{
		if s.UsersWhoCanAdmitParticipantsFromWaitingRoom.Set {
			e.FieldStart("users_who_can_admit_participants_from_waiting_room")
			s.UsersWhoCanAdmitParticipantsFromWaitingRoom.Encode(e)
		}
	}
	{
		if s.WhitelistedDomainsForWaitingRoom.Set {
			e.FieldStart("whitelisted_domains_for_waiting_room")
			s.WhitelistedDomainsForWaitingRoom.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetGroupSettingsOK3MeetingSecurityWaitingRoomSettings = [3]string{
	0: "participants_to_place_in_waiting_room",
	1: "users_who_can_admit_participants_from_waiting_room",
	2: "whitelisted_domains_for_waiting_room",
}

// Decode decodes GetGroupSettingsOK3MeetingSecurityWaitingRoomSettings from json.
func (s *GetGroupSettingsOK3MeetingSecurityWaitingRoomSettings) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetGroupSettingsOK3MeetingSecurityWaitingRoomSettings to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "participants_to_place_in_waiting_room":
			if err := func() error {
				s.ParticipantsToPlaceInWaitingRoom.Reset()
				if err := s.ParticipantsToPlaceInWaitingRoom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"participants_to_place_in_waiting_room\"")
			}
		case "users_who_can_admit_participants_from_waiting_room":
			if err := func() error {
				s.UsersWhoCanAdmitParticipantsFromWaitingRoom.Reset()
				if err := s.UsersWhoCanAdmitParticipantsFromWaitingRoom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"users_who_can_admit_participants_from_waiting_room\"")
			}
		case "whitelisted_domains_for_waiting_room":
			if err := func() error {
				s.WhitelistedDomainsForWaitingRoom.Reset()
				if err := s.WhitelistedDomainsForWaitingRoom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"whitelisted_domains_for_waiting_room\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetGroupSettingsOK3MeetingSecurityWaitingRoomSettings")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetGroupSettingsOK3MeetingSecurityWaitingRoomSettings) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetGroupSettingsOK3MeetingSecurityWaitingRoomSettings) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetUserMeetingTemplatesOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetUserMeetingTemplatesOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Settings.Set {
			e.FieldStart("settings")
			s.Settings.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetUserMeetingTemplatesOK = [3]string{
	0: "id",
	1: "name",
	2: "settings",
}

// Decode decodes GetUserMeetingTemplatesOK from json.
func (s *GetUserMeetingTemplatesOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetUserMeetingTemplatesOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "settings":
			if err := func() error {
				s.Settings.Reset()
				if err := s.Settings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"settings\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetUserMeetingTemplatesOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetUserMeetingTemplatesOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetUserMeetingTemplatesOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetUserMeetingTemplatesOKSettings) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetUserMeetingTemplatesOKSettings) encodeFields(e *jx.Encoder) {
	{
		if s.InMeeting.Set {
			e.FieldStart("in_meeting")
			s.InMeeting.Encode(e)
		}
	}
	{
		if s.Recording.Set {
			e.FieldStart("recording")
			s.Recording.Encode(e)
		}
	}
	{
		if s.ScheduleMeeting.Set {
			e.FieldStart("schedule_meeting")
			s.ScheduleMeeting.Encode(e)
		}
	}
	{
		if s.MeetingSecurity.Set {
			e.FieldStart("meeting_security")
			s.MeetingSecurity.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetUserMeetingTemplatesOKSettings = [4]string{
	0: "in_meeting",
	1: "recording",
	2: "schedule_meeting",
	3: "meeting_security",
}

// Decode decodes GetUserMeetingTemplatesOKSettings from json.
func (s *GetUserMeetingTemplatesOKSettings) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetUserMeetingTemplatesOKSettings to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "in_meeting":
			if err := func() error {
				s.InMeeting.Reset()
				if err := s.InMeeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"in_meeting\"")
			}
		case "recording":
			if err := func() error {
				s.Recording.Reset()
				if err := s.Recording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording\"")
			}
		case "schedule_meeting":
			if err := func() error {
				s.ScheduleMeeting.Reset()
				if err := s.ScheduleMeeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"schedule_meeting\"")
			}
		case "meeting_security":
			if err := func() error {
				s.MeetingSecurity.Reset()
				if err := s.MeetingSecurity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_security\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetUserMeetingTemplatesOKSettings")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetUserMeetingTemplatesOKSettings) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetUserMeetingTemplatesOKSettings) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetUserMeetingTemplatesOKSettingsInMeeting) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetUserMeetingTemplatesOKSettingsInMeeting) encodeFields(e *jx.Encoder) {
	{
		if s.EntryExitChime.Set {
			e.FieldStart("entry_exit_chime")
			s.EntryExitChime.Encode(e)
		}
	}
	{
		if s.Feedback.Set {
			e.FieldStart("feedback")
			s.Feedback.Encode(e)
		}
	}
	{
		if s.Polling.Set {
			e.FieldStart("polling")
			s.Polling.Encode(e)
		}
	}
	{
		if s.PostMeetingFeedback.Set {
			e.FieldStart("post_meeting_feedback")
			s.PostMeetingFeedback.Encode(e)
		}
	}
	{
		if s.ScreenSharing.Set {
			e.FieldStart("screen_sharing")
			s.ScreenSharing.Encode(e)
		}
	}
	{
		if s.WhoCanShareScreen.Set {
			e.FieldStart("who_can_share_screen")
			s.WhoCanShareScreen.Encode(e)
		}
	}
	{
		if s.WhoCanShareScreenWhenSomeoneIsSharing.Set {
			e.FieldStart("who_can_share_screen_when_someone_is_sharing")
			s.WhoCanShareScreenWhenSomeoneIsSharing.Encode(e)
		}
	}
	{
		if s.DisableScreenSharingForHostMeetings.Set {
			e.FieldStart("disable_screen_sharing_for_host_meetings")
			s.DisableScreenSharingForHostMeetings.Encode(e)
		}
	}
	{
		if s.Annotation.Set {
			e.FieldStart("annotation")
			s.Annotation.Encode(e)
		}
	}
	{
		if s.Whiteboard.Set {
			e.FieldStart("whiteboard")
			s.Whiteboard.Encode(e)
		}
	}
	{
		if s.RemoteControl.Set {
			e.FieldStart("remote_control")
			s.RemoteControl.Encode(e)
		}
	}
	{
		if s.NonVerbalFeedback.Set {
			e.FieldStart("non_verbal_feedback")
			s.NonVerbalFeedback.Encode(e)
		}
	}
	{
		if s.AllowParticipantsToRename.Set {
			e.FieldStart("allow_participants_to_rename")
			s.AllowParticipantsToRename.Encode(e)
		}
	}
	{
		if s.BreakoutRoom.Set {
			e.FieldStart("breakout_room")
			s.BreakoutRoom.Encode(e)
		}
	}
	{
		if s.RemoteSupport.Set {
			e.FieldStart("remote_support")
			s.RemoteSupport.Encode(e)
		}
	}
	{
		if s.ManualCaptioning.Set {
			e.FieldStart("manual_captioning")
			s.ManualCaptioning.Encode(e)
		}
	}
	{
		if s.ClosedCaptioning.Set {
			e.FieldStart("closed_captioning")
			s.ClosedCaptioning.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetUserMeetingTemplatesOKSettingsInMeeting = [17]string{
	0:  "entry_exit_chime",
	1:  "feedback",
	2:  "polling",
	3:  "post_meeting_feedback",
	4:  "screen_sharing",
	5:  "who_can_share_screen",
	6:  "who_can_share_screen_when_someone_is_sharing",
	7:  "disable_screen_sharing_for_host_meetings",
	8:  "annotation",
	9:  "whiteboard",
	10: "remote_control",
	11: "non_verbal_feedback",
	12: "allow_participants_to_rename",
	13: "breakout_room",
	14: "remote_support",
	15: "manual_captioning",
	16: "closed_captioning",
}

// Decode decodes GetUserMeetingTemplatesOKSettingsInMeeting from json.
func (s *GetUserMeetingTemplatesOKSettingsInMeeting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetUserMeetingTemplatesOKSettingsInMeeting to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "entry_exit_chime":
			if err := func() error {
				s.EntryExitChime.Reset()
				if err := s.EntryExitChime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"entry_exit_chime\"")
			}
		case "feedback":
			if err := func() error {
				s.Feedback.Reset()
				if err := s.Feedback.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"feedback\"")
			}
		case "polling":
			if err := func() error {
				s.Polling.Reset()
				if err := s.Polling.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"polling\"")
			}
		case "post_meeting_feedback":
			if err := func() error {
				s.PostMeetingFeedback.Reset()
				if err := s.PostMeetingFeedback.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"post_meeting_feedback\"")
			}
		case "screen_sharing":
			if err := func() error {
				s.ScreenSharing.Reset()
				if err := s.ScreenSharing.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"screen_sharing\"")
			}
		case "who_can_share_screen":
			if err := func() error {
				s.WhoCanShareScreen.Reset()
				if err := s.WhoCanShareScreen.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"who_can_share_screen\"")
			}
		case "who_can_share_screen_when_someone_is_sharing":
			if err := func() error {
				s.WhoCanShareScreenWhenSomeoneIsSharing.Reset()
				if err := s.WhoCanShareScreenWhenSomeoneIsSharing.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"who_can_share_screen_when_someone_is_sharing\"")
			}
		case "disable_screen_sharing_for_host_meetings":
			if err := func() error {
				s.DisableScreenSharingForHostMeetings.Reset()
				if err := s.DisableScreenSharingForHostMeetings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"disable_screen_sharing_for_host_meetings\"")
			}
		case "annotation":
			if err := func() error {
				s.Annotation.Reset()
				if err := s.Annotation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"annotation\"")
			}
		case "whiteboard":
			if err := func() error {
				s.Whiteboard.Reset()
				if err := s.Whiteboard.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"whiteboard\"")
			}
		case "remote_control":
			if err := func() error {
				s.RemoteControl.Reset()
				if err := s.RemoteControl.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"remote_control\"")
			}
		case "non_verbal_feedback":
			if err := func() error {
				s.NonVerbalFeedback.Reset()
				if err := s.NonVerbalFeedback.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"non_verbal_feedback\"")
			}
		case "allow_participants_to_rename":
			if err := func() error {
				s.AllowParticipantsToRename.Reset()
				if err := s.AllowParticipantsToRename.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_participants_to_rename\"")
			}
		case "breakout_room":
			if err := func() error {
				s.BreakoutRoom.Reset()
				if err := s.BreakoutRoom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"breakout_room\"")
			}
		case "remote_support":
			if err := func() error {
				s.RemoteSupport.Reset()
				if err := s.RemoteSupport.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"remote_support\"")
			}
		case "manual_captioning":
			if err := func() error {
				s.ManualCaptioning.Reset()
				if err := s.ManualCaptioning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"manual_captioning\"")
			}
		case "closed_captioning":
			if err := func() error {
				s.ClosedCaptioning.Reset()
				if err := s.ClosedCaptioning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"closed_captioning\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetUserMeetingTemplatesOKSettingsInMeeting")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetUserMeetingTemplatesOKSettingsInMeeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetUserMeetingTemplatesOKSettingsInMeeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetUserMeetingTemplatesOKSettingsInMeetingClosedCaptioning) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetUserMeetingTemplatesOKSettingsInMeetingClosedCaptioning) encodeFields(e *jx.Encoder) {
	{
		if s.AutoTranscribing.Set {
			e.FieldStart("auto_transcribing")
			s.AutoTranscribing.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.SaveCaption.Set {
			e.FieldStart("save_caption")
			s.SaveCaption.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetUserMeetingTemplatesOKSettingsInMeetingClosedCaptioning = [3]string{
	0: "auto_transcribing",
	1: "enable",
	2: "save_caption",
}

// Decode decodes GetUserMeetingTemplatesOKSettingsInMeetingClosedCaptioning from json.
func (s *GetUserMeetingTemplatesOKSettingsInMeetingClosedCaptioning) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetUserMeetingTemplatesOKSettingsInMeetingClosedCaptioning to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "auto_transcribing":
			if err := func() error {
				s.AutoTranscribing.Reset()
				if err := s.AutoTranscribing.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_transcribing\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "save_caption":
			if err := func() error {
				s.SaveCaption.Reset()
				if err := s.SaveCaption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"save_caption\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetUserMeetingTemplatesOKSettingsInMeetingClosedCaptioning")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetUserMeetingTemplatesOKSettingsInMeetingClosedCaptioning) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetUserMeetingTemplatesOKSettingsInMeetingClosedCaptioning) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetUserMeetingTemplatesOKSettingsInMeetingManualCaptioning) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetUserMeetingTemplatesOKSettingsInMeetingManualCaptioning) encodeFields(e *jx.Encoder) {
	{
		if s.AutoGeneratedCaptions.Set {
			e.FieldStart("auto_generated_captions")
			s.AutoGeneratedCaptions.Encode(e)
		}
	}
	{
		if s.AllowToType.Set {
			e.FieldStart("allow_to_type")
			s.AllowToType.Encode(e)
		}
	}
	{
		if s.ManualCaptions.Set {
			e.FieldStart("manual_captions")
			s.ManualCaptions.Encode(e)
		}
	}
	{
		if s.SaveCaptions.Set {
			e.FieldStart("save_captions")
			s.SaveCaptions.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetUserMeetingTemplatesOKSettingsInMeetingManualCaptioning = [4]string{
	0: "auto_generated_captions",
	1: "allow_to_type",
	2: "manual_captions",
	3: "save_captions",
}

// Decode decodes GetUserMeetingTemplatesOKSettingsInMeetingManualCaptioning from json.
func (s *GetUserMeetingTemplatesOKSettingsInMeetingManualCaptioning) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetUserMeetingTemplatesOKSettingsInMeetingManualCaptioning to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "auto_generated_captions":
			if err := func() error {
				s.AutoGeneratedCaptions.Reset()
				if err := s.AutoGeneratedCaptions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_generated_captions\"")
			}
		case "allow_to_type":
			if err := func() error {
				s.AllowToType.Reset()
				if err := s.AllowToType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_to_type\"")
			}
		case "manual_captions":
			if err := func() error {
				s.ManualCaptions.Reset()
				if err := s.ManualCaptions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"manual_captions\"")
			}
		case "save_captions":
			if err := func() error {
				s.SaveCaptions.Reset()
				if err := s.SaveCaptions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"save_captions\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetUserMeetingTemplatesOKSettingsInMeetingManualCaptioning")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetUserMeetingTemplatesOKSettingsInMeetingManualCaptioning) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetUserMeetingTemplatesOKSettingsInMeetingManualCaptioning) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetUserMeetingTemplatesOKSettingsMeetingSecurity) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetUserMeetingTemplatesOKSettingsMeetingSecurity) encodeFields(e *jx.Encoder) {
	{
		if s.WaitingRoom.Set {
			e.FieldStart("waiting_room")
			s.WaitingRoom.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetUserMeetingTemplatesOKSettingsMeetingSecurity = [1]string{
	0: "waiting_room",
}

// Decode decodes GetUserMeetingTemplatesOKSettingsMeetingSecurity from json.
func (s *GetUserMeetingTemplatesOKSettingsMeetingSecurity) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetUserMeetingTemplatesOKSettingsMeetingSecurity to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "waiting_room":
			if err := func() error {
				s.WaitingRoom.Reset()
				if err := s.WaitingRoom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"waiting_room\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetUserMeetingTemplatesOKSettingsMeetingSecurity")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetUserMeetingTemplatesOKSettingsMeetingSecurity) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetUserMeetingTemplatesOKSettingsMeetingSecurity) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetUserMeetingTemplatesOKSettingsRecording) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetUserMeetingTemplatesOKSettingsRecording) encodeFields(e *jx.Encoder) {
	{
		if s.AutoRecording.Set {
			e.FieldStart("auto_recording")
			s.AutoRecording.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetUserMeetingTemplatesOKSettingsRecording = [1]string{
	0: "auto_recording",
}

// Decode decodes GetUserMeetingTemplatesOKSettingsRecording from json.
func (s *GetUserMeetingTemplatesOKSettingsRecording) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetUserMeetingTemplatesOKSettingsRecording to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "auto_recording":
			if err := func() error {
				s.AutoRecording.Reset()
				if err := s.AutoRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_recording\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetUserMeetingTemplatesOKSettingsRecording")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetUserMeetingTemplatesOKSettingsRecording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetUserMeetingTemplatesOKSettingsRecording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetUserMeetingTemplatesOKSettingsScheduleMeeting) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetUserMeetingTemplatesOKSettingsScheduleMeeting) encodeFields(e *jx.Encoder) {
	{
		if s.HostVideo.Set {
			e.FieldStart("host_video")
			s.HostVideo.Encode(e)
		}
	}
	{
		if s.ParticipantVideo.Set {
			e.FieldStart("participant_video")
			s.ParticipantVideo.Encode(e)
		}
	}
	{
		if s.MuteUponEntry.Set {
			e.FieldStart("mute_upon_entry")
			s.MuteUponEntry.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetUserMeetingTemplatesOKSettingsScheduleMeeting = [3]string{
	0: "host_video",
	1: "participant_video",
	2: "mute_upon_entry",
}

// Decode decodes GetUserMeetingTemplatesOKSettingsScheduleMeeting from json.
func (s *GetUserMeetingTemplatesOKSettingsScheduleMeeting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetUserMeetingTemplatesOKSettingsScheduleMeeting to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "host_video":
			if err := func() error {
				s.HostVideo.Reset()
				if err := s.HostVideo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"host_video\"")
			}
		case "participant_video":
			if err := func() error {
				s.ParticipantVideo.Reset()
				if err := s.ParticipantVideo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"participant_video\"")
			}
		case "mute_upon_entry":
			if err := func() error {
				s.MuteUponEntry.Reset()
				if err := s.MuteUponEntry.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mute_upon_entry\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetUserMeetingTemplatesOKSettingsScheduleMeeting")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetUserMeetingTemplatesOKSettingsScheduleMeeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetUserMeetingTemplatesOKSettingsScheduleMeeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetUserPresenceStatusOK as json.
func (s GetUserPresenceStatusOK) Encode(e *jx.Encoder) {
	switch s.Type {
	case GetUserPresenceStatusOK0GetUserPresenceStatusOK:
		s.GetUserPresenceStatusOK0.Encode(e)
	case GetUserPresenceStatusOK1GetUserPresenceStatusOK:
		s.GetUserPresenceStatusOK1.Encode(e)
	}
}

func (s GetUserPresenceStatusOK) encodeFields(e *jx.Encoder) {
	switch s.Type {
	case GetUserPresenceStatusOK0GetUserPresenceStatusOK:
		s.GetUserPresenceStatusOK0.encodeFields(e)
	case GetUserPresenceStatusOK1GetUserPresenceStatusOK:
		s.GetUserPresenceStatusOK1.encodeFields(e)
	}
}

// Decode decodes GetUserPresenceStatusOK from json.
func (s *GetUserPresenceStatusOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetUserPresenceStatusOK to nil")
	}
	// Sum type fields.
	if typ := d.Next(); typ != jx.Object {
		return errors.Errorf("unexpected json type %q", typ)
	}

	var found bool
	if err := d.Capture(func(d *jx.Decoder) error {
		return d.ObjBytes(func(d *jx.Decoder, key []byte) error {
			switch string(key) {
			case "end_time":
				match := GetUserPresenceStatusOK0GetUserPresenceStatusOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "remaining_time":
				match := GetUserPresenceStatusOK0GetUserPresenceStatusOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			}
			return d.Skip()
		})
	}); err != nil {
		return errors.Wrap(err, "capture")
	}
	if !found {
		s.Type = GetUserPresenceStatusOK1GetUserPresenceStatusOK
	}
	switch s.Type {
	case GetUserPresenceStatusOK0GetUserPresenceStatusOK:
		if err := s.GetUserPresenceStatusOK0.Decode(d); err != nil {
			return err
		}
	case GetUserPresenceStatusOK1GetUserPresenceStatusOK:
		if err := s.GetUserPresenceStatusOK1.Decode(d); err != nil {
			return err
		}
	default:
		return errors.Errorf("inferred invalid type: %s", s.Type)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GetUserPresenceStatusOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetUserPresenceStatusOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetUserPresenceStatusOK0) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetUserPresenceStatusOK0) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("status")
		e.Str(s.Status)
	}
	{
		e.FieldStart("end_time")
		e.Str(s.EndTime)
	}
	{
		e.FieldStart("remaining_time")
		e.Float64(s.RemainingTime)
	}
}

var jsonFieldsNameOfGetUserPresenceStatusOK0 = [3]string{
	0: "status",
	1: "end_time",
	2: "remaining_time",
}

// Decode decodes GetUserPresenceStatusOK0 from json.
func (s *GetUserPresenceStatusOK0) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetUserPresenceStatusOK0 to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "status":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Status = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "end_time":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.EndTime = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"end_time\"")
			}
		case "remaining_time":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Float64()
				s.RemainingTime = float64(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"remaining_time\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetUserPresenceStatusOK0")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000111,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGetUserPresenceStatusOK0) {
					name = jsonFieldsNameOfGetUserPresenceStatusOK0[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetUserPresenceStatusOK0) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetUserPresenceStatusOK0) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GetUserPresenceStatusOK1) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GetUserPresenceStatusOK1) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("status")
		e.Str(s.Status)
	}
}

var jsonFieldsNameOfGetUserPresenceStatusOK1 = [1]string{
	0: "status",
}

// Decode decodes GetUserPresenceStatusOK1 from json.
func (s *GetUserPresenceStatusOK1) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetUserPresenceStatusOK1 to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "status":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Status = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetUserPresenceStatusOK1")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGetUserPresenceStatusOK1) {
					name = jsonFieldsNameOfGetUserPresenceStatusOK1[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetUserPresenceStatusOK1) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetUserPresenceStatusOK1) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GroupAdminsCreateCreated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GroupAdminsCreateCreated) encodeFields(e *jx.Encoder) {
	{
		if s.AddedAt.Set {
			e.FieldStart("added_at")
			s.AddedAt.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.Ids.Set {
			e.FieldStart("ids")
			s.Ids.Encode(e)
		}
	}
}

var jsonFieldsNameOfGroupAdminsCreateCreated = [2]string{
	0: "added_at",
	1: "ids",
}

// Decode decodes GroupAdminsCreateCreated from json.
func (s *GroupAdminsCreateCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GroupAdminsCreateCreated to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "added_at":
			if err := func() error {
				s.AddedAt.Reset()
				if err := s.AddedAt.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"added_at\"")
			}
		case "ids":
			if err := func() error {
				s.Ids.Reset()
				if err := s.Ids.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ids\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GroupAdminsCreateCreated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GroupAdminsCreateCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GroupAdminsCreateCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GroupAdminsCreateReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GroupAdminsCreateReq) encodeFields(e *jx.Encoder) {
	{
		if s.Admins != nil {
			e.FieldStart("admins")
			e.ArrStart()
			for _, elem := range s.Admins {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGroupAdminsCreateReq = [1]string{
	0: "admins",
}

// Decode decodes GroupAdminsCreateReq from json.
func (s *GroupAdminsCreateReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GroupAdminsCreateReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "admins":
			if err := func() error {
				s.Admins = make([]GroupAdminsCreateReqAdminsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GroupAdminsCreateReqAdminsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Admins = append(s.Admins, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"admins\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GroupAdminsCreateReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GroupAdminsCreateReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GroupAdminsCreateReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GroupAdminsCreateReqAdminsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GroupAdminsCreateReqAdminsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Email.Set {
			e.FieldStart("email")
			s.Email.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
}

var jsonFieldsNameOfGroupAdminsCreateReqAdminsItem = [2]string{
	0: "email",
	1: "id",
}

// Decode decodes GroupAdminsCreateReqAdminsItem from json.
func (s *GroupAdminsCreateReqAdminsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GroupAdminsCreateReqAdminsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "email":
			if err := func() error {
				s.Email.Reset()
				if err := s.Email.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GroupAdminsCreateReqAdminsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GroupAdminsCreateReqAdminsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GroupAdminsCreateReqAdminsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GroupAdminsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GroupAdminsOK) encodeFields(e *jx.Encoder) {
	{
		if s.Admins != nil {
			e.FieldStart("admins")
			e.ArrStart()
			for _, elem := range s.Admins {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
	{
		if s.TotalRecords.Set {
			e.FieldStart("total_records")
			s.TotalRecords.Encode(e)
		}
	}
}

var jsonFieldsNameOfGroupAdminsOK = [4]string{
	0: "admins",
	1: "next_page_token",
	2: "page_size",
	3: "total_records",
}

// Decode decodes GroupAdminsOK from json.
func (s *GroupAdminsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GroupAdminsOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "admins":
			if err := func() error {
				s.Admins = make([]GroupAdminsOKAdminsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GroupAdminsOKAdminsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Admins = append(s.Admins, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"admins\"")
			}
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		case "total_records":
			if err := func() error {
				s.TotalRecords.Reset()
				if err := s.TotalRecords.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_records\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GroupAdminsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GroupAdminsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GroupAdminsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GroupAdminsOKAdminsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GroupAdminsOKAdminsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Email.Set {
			e.FieldStart("email")
			s.Email.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGroupAdminsOKAdminsItem = [2]string{
	0: "email",
	1: "name",
}

// Decode decodes GroupAdminsOKAdminsItem from json.
func (s *GroupAdminsOKAdminsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GroupAdminsOKAdminsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "email":
			if err := func() error {
				s.Email.Reset()
				if err := s.Email.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GroupAdminsOKAdminsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GroupAdminsOKAdminsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GroupAdminsOKAdminsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GroupChannelsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GroupChannelsOK) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("channels")
		e.ArrStart()
		for _, elem := range s.Channels {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("group_id")
		e.Str(s.GroupID)
	}
}

var jsonFieldsNameOfGroupChannelsOK = [2]string{
	0: "channels",
	1: "group_id",
}

// Decode decodes GroupChannelsOK from json.
func (s *GroupChannelsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GroupChannelsOK to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "channels":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				s.Channels = make([]GroupChannelsOKChannelsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GroupChannelsOKChannelsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Channels = append(s.Channels, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"channels\"")
			}
		case "group_id":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.GroupID = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"group_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GroupChannelsOK")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGroupChannelsOK) {
					name = jsonFieldsNameOfGroupChannelsOK[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GroupChannelsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GroupChannelsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GroupChannelsOKChannelsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GroupChannelsOKChannelsItem) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("channel_id")
		e.Str(s.ChannelID)
	}
	{
		e.FieldStart("channel_name")
		e.Str(s.ChannelName)
	}
	{
		e.FieldStart("member_count")
		e.Int(s.MemberCount)
	}
}

var jsonFieldsNameOfGroupChannelsOKChannelsItem = [3]string{
	0: "channel_id",
	1: "channel_name",
	2: "member_count",
}

// Decode decodes GroupChannelsOKChannelsItem from json.
func (s *GroupChannelsOKChannelsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GroupChannelsOKChannelsItem to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "channel_id":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.ChannelID = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"channel_id\"")
			}
		case "channel_name":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.ChannelName = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"channel_name\"")
			}
		case "member_count":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Int()
				s.MemberCount = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"member_count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GroupChannelsOKChannelsItem")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000111,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGroupChannelsOKChannelsItem) {
					name = jsonFieldsNameOfGroupChannelsOKChannelsItem[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GroupChannelsOKChannelsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GroupChannelsOKChannelsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GroupCreateCreated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GroupCreateCreated) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.TotalMembers.Set {
			e.FieldStart("total_members")
			s.TotalMembers.Encode(e)
		}
	}
}

var jsonFieldsNameOfGroupCreateCreated = [3]string{
	0: "id",
	1: "name",
	2: "total_members",
}

// Decode decodes GroupCreateCreated from json.
func (s *GroupCreateCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GroupCreateCreated to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "total_members":
			if err := func() error {
				s.TotalMembers.Reset()
				if err := s.TotalMembers.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_members\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GroupCreateCreated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GroupCreateCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GroupCreateCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GroupCreateReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GroupCreateReq) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGroupCreateReq = [1]string{
	0: "name",
}

// Decode decodes GroupCreateReq from json.
func (s *GroupCreateReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GroupCreateReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GroupCreateReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GroupCreateReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GroupCreateReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GroupLockedSettingsReq as json.
func (s GroupLockedSettingsReq) Encode(e *jx.Encoder) {
	switch s.Type {
	case GroupLockedSettingsReq0GroupLockedSettingsReq:
		s.GroupLockedSettingsReq0.Encode(e)
	case GroupLockedSettingsReq1GroupLockedSettingsReq:
		s.GroupLockedSettingsReq1.Encode(e)
	}
}

func (s GroupLockedSettingsReq) encodeFields(e *jx.Encoder) {
	switch s.Type {
	case GroupLockedSettingsReq0GroupLockedSettingsReq:
		s.GroupLockedSettingsReq0.encodeFields(e)
	case GroupLockedSettingsReq1GroupLockedSettingsReq:
		s.GroupLockedSettingsReq1.encodeFields(e)
	}
}

// Decode decodes GroupLockedSettingsReq from json.
func (s *GroupLockedSettingsReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GroupLockedSettingsReq to nil")
	}
	// Sum type fields.
	if typ := d.Next(); typ != jx.Object {
		return errors.Errorf("unexpected json type %q", typ)
	}

	var found bool
	if err := d.Capture(func(d *jx.Decoder) error {
		return d.ObjBytes(func(d *jx.Decoder, key []byte) error {
			switch string(key) {
			case "audio_conferencing":
				match := GroupLockedSettingsReq0GroupLockedSettingsReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "email_notification":
				match := GroupLockedSettingsReq0GroupLockedSettingsReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "in_meeting":
				match := GroupLockedSettingsReq0GroupLockedSettingsReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "other_options":
				match := GroupLockedSettingsReq0GroupLockedSettingsReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "recording":
				match := GroupLockedSettingsReq0GroupLockedSettingsReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "schedule_meeting":
				match := GroupLockedSettingsReq0GroupLockedSettingsReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "telephony":
				match := GroupLockedSettingsReq0GroupLockedSettingsReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "meeting_security":
				match := GroupLockedSettingsReq1GroupLockedSettingsReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			}
			return d.Skip()
		})
	}); err != nil {
		return errors.Wrap(err, "capture")
	}
	if !found {
		return errors.New("unable to detect sum type variant")
	}
	switch s.Type {
	case GroupLockedSettingsReq0GroupLockedSettingsReq:
		if err := s.GroupLockedSettingsReq0.Decode(d); err != nil {
			return err
		}
	case GroupLockedSettingsReq1GroupLockedSettingsReq:
		if err := s.GroupLockedSettingsReq1.Decode(d); err != nil {
			return err
		}
	default:
		return errors.Errorf("inferred invalid type: %s", s.Type)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GroupLockedSettingsReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GroupLockedSettingsReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GroupLockedSettingsReq0) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GroupLockedSettingsReq0) encodeFields(e *jx.Encoder) {
	{
		if s.AudioConferencing.Set {
			e.FieldStart("audio_conferencing")
			s.AudioConferencing.Encode(e)
		}
	}
	{
		if s.EmailNotification.Set {
			e.FieldStart("email_notification")
			s.EmailNotification.Encode(e)
		}
	}
	{
		if s.InMeeting.Set {
			e.FieldStart("in_meeting")
			s.InMeeting.Encode(e)
		}
	}
	{
		if s.OtherOptions.Set {
			e.FieldStart("other_options")
			s.OtherOptions.Encode(e)
		}
	}
	{
		if s.Recording.Set {
			e.FieldStart("recording")
			s.Recording.Encode(e)
		}
	}
	{
		if s.ScheduleMeeting.Set {
			e.FieldStart("schedule_meeting")
			s.ScheduleMeeting.Encode(e)
		}
	}
	{
		if s.Telephony.Set {
			e.FieldStart("telephony")
			s.Telephony.Encode(e)
		}
	}
}

var jsonFieldsNameOfGroupLockedSettingsReq0 = [7]string{
	0: "audio_conferencing",
	1: "email_notification",
	2: "in_meeting",
	3: "other_options",
	4: "recording",
	5: "schedule_meeting",
	6: "telephony",
}

// Decode decodes GroupLockedSettingsReq0 from json.
func (s *GroupLockedSettingsReq0) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GroupLockedSettingsReq0 to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_conferencing":
			if err := func() error {
				s.AudioConferencing.Reset()
				if err := s.AudioConferencing.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_conferencing\"")
			}
		case "email_notification":
			if err := func() error {
				s.EmailNotification.Reset()
				if err := s.EmailNotification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email_notification\"")
			}
		case "in_meeting":
			if err := func() error {
				s.InMeeting.Reset()
				if err := s.InMeeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"in_meeting\"")
			}
		case "other_options":
			if err := func() error {
				s.OtherOptions.Reset()
				if err := s.OtherOptions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"other_options\"")
			}
		case "recording":
			if err := func() error {
				s.Recording.Reset()
				if err := s.Recording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording\"")
			}
		case "schedule_meeting":
			if err := func() error {
				s.ScheduleMeeting.Reset()
				if err := s.ScheduleMeeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"schedule_meeting\"")
			}
		case "telephony":
			if err := func() error {
				s.Telephony.Reset()
				if err := s.Telephony.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"telephony\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GroupLockedSettingsReq0")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GroupLockedSettingsReq0) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GroupLockedSettingsReq0) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GroupLockedSettingsReq0AudioConferencing) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GroupLockedSettingsReq0AudioConferencing) encodeFields(e *jx.Encoder) {
	{
		if s.TollFreeAndFeeBasedTollCall.Set {
			e.FieldStart("toll_free_and_fee_based_toll_call")
			s.TollFreeAndFeeBasedTollCall.Encode(e)
		}
	}
}

var jsonFieldsNameOfGroupLockedSettingsReq0AudioConferencing = [1]string{
	0: "toll_free_and_fee_based_toll_call",
}

// Decode decodes GroupLockedSettingsReq0AudioConferencing from json.
func (s *GroupLockedSettingsReq0AudioConferencing) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GroupLockedSettingsReq0AudioConferencing to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "toll_free_and_fee_based_toll_call":
			if err := func() error {
				s.TollFreeAndFeeBasedTollCall.Reset()
				if err := s.TollFreeAndFeeBasedTollCall.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"toll_free_and_fee_based_toll_call\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GroupLockedSettingsReq0AudioConferencing")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GroupLockedSettingsReq0AudioConferencing) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GroupLockedSettingsReq0AudioConferencing) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GroupLockedSettingsReq0EmailNotification) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GroupLockedSettingsReq0EmailNotification) encodeFields(e *jx.Encoder) {
	{
		if s.AlternativeHostReminder.Set {
			e.FieldStart("alternative_host_reminder")
			s.AlternativeHostReminder.Encode(e)
		}
	}
	{
		if s.CancelMeetingReminder.Set {
			e.FieldStart("cancel_meeting_reminder")
			s.CancelMeetingReminder.Encode(e)
		}
	}
	{
		if s.CloudRecordingAvailableReminder.Set {
			e.FieldStart("cloud_recording_available_reminder")
			s.CloudRecordingAvailableReminder.Encode(e)
		}
	}
	{
		if s.JbhReminder.Set {
			e.FieldStart("jbh_reminder")
			s.JbhReminder.Encode(e)
		}
	}
	{
		if s.ScheduleForReminder.Set {
			e.FieldStart("schedule_for_reminder")
			s.ScheduleForReminder.Encode(e)
		}
	}
}

var jsonFieldsNameOfGroupLockedSettingsReq0EmailNotification = [5]string{
	0: "alternative_host_reminder",
	1: "cancel_meeting_reminder",
	2: "cloud_recording_available_reminder",
	3: "jbh_reminder",
	4: "schedule_for_reminder",
}

// Decode decodes GroupLockedSettingsReq0EmailNotification from json.
func (s *GroupLockedSettingsReq0EmailNotification) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GroupLockedSettingsReq0EmailNotification to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "alternative_host_reminder":
			if err := func() error {
				s.AlternativeHostReminder.Reset()
				if err := s.AlternativeHostReminder.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"alternative_host_reminder\"")
			}
		case "cancel_meeting_reminder":
			if err := func() error {
				s.CancelMeetingReminder.Reset()
				if err := s.CancelMeetingReminder.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cancel_meeting_reminder\"")
			}
		case "cloud_recording_available_reminder":
			if err := func() error {
				s.CloudRecordingAvailableReminder.Reset()
				if err := s.CloudRecordingAvailableReminder.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cloud_recording_available_reminder\"")
			}
		case "jbh_reminder":
			if err := func() error {
				s.JbhReminder.Reset()
				if err := s.JbhReminder.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"jbh_reminder\"")
			}
		case "schedule_for_reminder":
			if err := func() error {
				s.ScheduleForReminder.Reset()
				if err := s.ScheduleForReminder.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"schedule_for_reminder\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GroupLockedSettingsReq0EmailNotification")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GroupLockedSettingsReq0EmailNotification) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GroupLockedSettingsReq0EmailNotification) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GroupLockedSettingsReq0InMeeting) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GroupLockedSettingsReq0InMeeting) encodeFields(e *jx.Encoder) {
	{
		if s.AlertGuestJoin.Set {
			e.FieldStart("alert_guest_join")
			s.AlertGuestJoin.Encode(e)
		}
	}
	{
		if s.AllowUsersToDeleteMessagesInMeetingChat.Set {
			e.FieldStart("allow_users_to_delete_messages_in_meeting_chat")
			s.AllowUsersToDeleteMessagesInMeetingChat.Encode(e)
		}
	}
	{
		if s.AllowLiveStreaming.Set {
			e.FieldStart("allow_live_streaming")
			s.AllowLiveStreaming.Encode(e)
		}
	}
	{
		if s.AllowShowZoomWindows.Set {
			e.FieldStart("allow_show_zoom_windows")
			s.AllowShowZoomWindows.Encode(e)
		}
	}
	{
		if s.Annotation.Set {
			e.FieldStart("annotation")
			s.Annotation.Encode(e)
		}
	}
	{
		if s.AttendeeOnHold.Set {
			e.FieldStart("attendee_on_hold")
			s.AttendeeOnHold.Encode(e)
		}
	}
	{
		if s.AutoAnswer.Set {
			e.FieldStart("auto_answer")
			s.AutoAnswer.Encode(e)
		}
	}
	{
		if s.AutoGeneratedCaptions.Set {
			e.FieldStart("auto_generated_captions")
			s.AutoGeneratedCaptions.Encode(e)
		}
	}
	{
		if s.AutoSavingChat.Set {
			e.FieldStart("auto_saving_chat")
			s.AutoSavingChat.Encode(e)
		}
	}
	{
		if s.BreakoutRoom.Set {
			e.FieldStart("breakout_room")
			s.BreakoutRoom.Encode(e)
		}
	}
	{
		if s.Chat.Set {
			e.FieldStart("chat")
			s.Chat.Encode(e)
		}
	}
	{
		if s.MeetingQuestionAnswer.Set {
			e.FieldStart("meeting_question_answer")
			s.MeetingQuestionAnswer.Encode(e)
		}
	}
	{
		if s.ClosedCaption.Set {
			e.FieldStart("closed_caption")
			s.ClosedCaption.Encode(e)
		}
	}
	{
		if s.CoHost.Set {
			e.FieldStart("co_host")
			s.CoHost.Encode(e)
		}
	}
	{
		if s.CustomDataCenterRegions.Set {
			e.FieldStart("custom_data_center_regions")
			s.CustomDataCenterRegions.Encode(e)
		}
	}
	{
		if s.DisableScreenSharingForHostMeetings.Set {
			e.FieldStart("disable_screen_sharing_for_host_meetings")
			s.DisableScreenSharingForHostMeetings.Encode(e)
		}
	}
	{
		if s.DisableScreenSharingForInMeetingGuests.Set {
			e.FieldStart("disable_screen_sharing_for_in_meeting_guests")
			s.DisableScreenSharingForInMeetingGuests.Encode(e)
		}
	}
	{
		if s.E2eEncryption.Set {
			e.FieldStart("e2e_encryption")
			s.E2eEncryption.Encode(e)
		}
	}
	{
		if s.EntryExitChime.Set {
			e.FieldStart("entry_exit_chime")
			s.EntryExitChime.Encode(e)
		}
	}
	{
		if s.FarEndCameraControl.Set {
			e.FieldStart("far_end_camera_control")
			s.FarEndCameraControl.Encode(e)
		}
	}
	{
		if s.Feedback.Set {
			e.FieldStart("feedback")
			s.Feedback.Encode(e)
		}
	}
	{
		if s.FileTransfer.Set {
			e.FieldStart("file_transfer")
			s.FileTransfer.Encode(e)
		}
	}
	{
		if s.FullTranscript.Set {
			e.FieldStart("full_transcript")
			s.FullTranscript.Encode(e)
		}
	}
	{
		if s.GroupHd.Set {
			e.FieldStart("group_hd")
			s.GroupHd.Encode(e)
		}
	}
	{
		if s.WebinarGroupHd.Set {
			e.FieldStart("webinar_group_hd")
			s.WebinarGroupHd.Encode(e)
		}
	}
	{
		if s.LanguageInterpretation.Set {
			e.FieldStart("language_interpretation")
			s.LanguageInterpretation.Encode(e)
		}
	}
	{
		if s.SignLanguageInterpretation.Set {
			e.FieldStart("sign_language_interpretation")
			s.SignLanguageInterpretation.Encode(e)
		}
	}
	{
		if s.WebinarReactions.Set {
			e.FieldStart("webinar_reactions")
			s.WebinarReactions.Encode(e)
		}
	}
	{
		if s.MeetingSurvey.Set {
			e.FieldStart("meeting_survey")
			s.MeetingSurvey.Encode(e)
		}
	}
	{
		if s.NonVerbalFeedback.Set {
			e.FieldStart("non_verbal_feedback")
			s.NonVerbalFeedback.Encode(e)
		}
	}
	{
		if s.OriginalAudio.Set {
			e.FieldStart("original_audio")
			s.OriginalAudio.Encode(e)
		}
	}
	{
		if s.Polling.Set {
			e.FieldStart("polling")
			s.Polling.Encode(e)
		}
	}
	{
		if s.PostMeetingFeedback.Set {
			e.FieldStart("post_meeting_feedback")
			s.PostMeetingFeedback.Encode(e)
		}
	}
	{
		if s.PrivateChat.Set {
			e.FieldStart("private_chat")
			s.PrivateChat.Encode(e)
		}
	}
	{
		if s.RemoteControl.Set {
			e.FieldStart("remote_control")
			s.RemoteControl.Encode(e)
		}
	}
	{
		if s.RemoteSupport.Set {
			e.FieldStart("remote_support")
			s.RemoteSupport.Encode(e)
		}
	}
	{
		if s.RequestPermissionToUnmuteParticipants.Set {
			e.FieldStart("request_permission_to_unmute_participants")
			s.RequestPermissionToUnmuteParticipants.Encode(e)
		}
	}
	{
		if s.SaveCaption.Set {
			e.FieldStart("save_caption")
			s.SaveCaption.Encode(e)
		}
	}
	{
		if s.SaveCaptions.Set {
			e.FieldStart("save_captions")
			s.SaveCaptions.Encode(e)
		}
	}
	{
		if s.ScreenSharing.Set {
			e.FieldStart("screen_sharing")
			s.ScreenSharing.Encode(e)
		}
	}
	{
		if s.SendingDefaultEmailInvites.Set {
			e.FieldStart("sending_default_email_invites")
			s.SendingDefaultEmailInvites.Encode(e)
		}
	}
	{
		if s.ShowAJoinFromYourBrowserLink.Set {
			e.FieldStart("show_a_join_from_your_browser_link")
			s.ShowAJoinFromYourBrowserLink.Encode(e)
		}
	}
	{
		if s.ShowBrowserJoinLink.Set {
			e.FieldStart("show_browser_join_link")
			s.ShowBrowserJoinLink.Encode(e)
		}
	}
	{
		if s.ShowMeetingControlToolbar.Set {
			e.FieldStart("show_meeting_control_toolbar")
			s.ShowMeetingControlToolbar.Encode(e)
		}
	}
	{
		if s.SlideControl.Set {
			e.FieldStart("slide_control")
			s.SlideControl.Encode(e)
		}
	}
	{
		if s.StereoAudio.Set {
			e.FieldStart("stereo_audio")
			s.StereoAudio.Encode(e)
		}
	}
	{
		if s.UseHTMLFormatEmail.Set {
			e.FieldStart("use_html_format_email")
			s.UseHTMLFormatEmail.Encode(e)
		}
	}
	{
		if s.VirtualBackground.Set {
			e.FieldStart("virtual_background")
			s.VirtualBackground.Encode(e)
		}
	}
	{
		if s.WaitingRoom.Set {
			e.FieldStart("waiting_room")
			s.WaitingRoom.Encode(e)
		}
	}
	{
		if s.WebinarChat.Set {
			e.FieldStart("webinar_chat")
			s.WebinarChat.Encode(e)
		}
	}
	{
		if s.WebinarLiveStreaming.Set {
			e.FieldStart("webinar_live_streaming")
			s.WebinarLiveStreaming.Encode(e)
		}
	}
	{
		if s.WebinarPolling.Set {
			e.FieldStart("webinar_polling")
			s.WebinarPolling.Encode(e)
		}
	}
	{
		if s.WebinarQuestionAnswer.Set {
			e.FieldStart("webinar_question_answer")
			s.WebinarQuestionAnswer.Encode(e)
		}
	}
	{
		if s.WebinarSurvey.Set {
			e.FieldStart("webinar_survey")
			s.WebinarSurvey.Encode(e)
		}
	}
	{
		if s.Whiteboard.Set {
			e.FieldStart("whiteboard")
			s.Whiteboard.Encode(e)
		}
	}
}

var jsonFieldsNameOfGroupLockedSettingsReq0InMeeting = [55]string{
	0:  "alert_guest_join",
	1:  "allow_users_to_delete_messages_in_meeting_chat",
	2:  "allow_live_streaming",
	3:  "allow_show_zoom_windows",
	4:  "annotation",
	5:  "attendee_on_hold",
	6:  "auto_answer",
	7:  "auto_generated_captions",
	8:  "auto_saving_chat",
	9:  "breakout_room",
	10: "chat",
	11: "meeting_question_answer",
	12: "closed_caption",
	13: "co_host",
	14: "custom_data_center_regions",
	15: "disable_screen_sharing_for_host_meetings",
	16: "disable_screen_sharing_for_in_meeting_guests",
	17: "e2e_encryption",
	18: "entry_exit_chime",
	19: "far_end_camera_control",
	20: "feedback",
	21: "file_transfer",
	22: "full_transcript",
	23: "group_hd",
	24: "webinar_group_hd",
	25: "language_interpretation",
	26: "sign_language_interpretation",
	27: "webinar_reactions",
	28: "meeting_survey",
	29: "non_verbal_feedback",
	30: "original_audio",
	31: "polling",
	32: "post_meeting_feedback",
	33: "private_chat",
	34: "remote_control",
	35: "remote_support",
	36: "request_permission_to_unmute_participants",
	37: "save_caption",
	38: "save_captions",
	39: "screen_sharing",
	40: "sending_default_email_invites",
	41: "show_a_join_from_your_browser_link",
	42: "show_browser_join_link",
	43: "show_meeting_control_toolbar",
	44: "slide_control",
	45: "stereo_audio",
	46: "use_html_format_email",
	47: "virtual_background",
	48: "waiting_room",
	49: "webinar_chat",
	50: "webinar_live_streaming",
	51: "webinar_polling",
	52: "webinar_question_answer",
	53: "webinar_survey",
	54: "whiteboard",
}

// Decode decodes GroupLockedSettingsReq0InMeeting from json.
func (s *GroupLockedSettingsReq0InMeeting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GroupLockedSettingsReq0InMeeting to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "alert_guest_join":
			if err := func() error {
				s.AlertGuestJoin.Reset()
				if err := s.AlertGuestJoin.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"alert_guest_join\"")
			}
		case "allow_users_to_delete_messages_in_meeting_chat":
			if err := func() error {
				s.AllowUsersToDeleteMessagesInMeetingChat.Reset()
				if err := s.AllowUsersToDeleteMessagesInMeetingChat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_users_to_delete_messages_in_meeting_chat\"")
			}
		case "allow_live_streaming":
			if err := func() error {
				s.AllowLiveStreaming.Reset()
				if err := s.AllowLiveStreaming.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_live_streaming\"")
			}
		case "allow_show_zoom_windows":
			if err := func() error {
				s.AllowShowZoomWindows.Reset()
				if err := s.AllowShowZoomWindows.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_show_zoom_windows\"")
			}
		case "annotation":
			if err := func() error {
				s.Annotation.Reset()
				if err := s.Annotation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"annotation\"")
			}
		case "attendee_on_hold":
			if err := func() error {
				s.AttendeeOnHold.Reset()
				if err := s.AttendeeOnHold.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"attendee_on_hold\"")
			}
		case "auto_answer":
			if err := func() error {
				s.AutoAnswer.Reset()
				if err := s.AutoAnswer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_answer\"")
			}
		case "auto_generated_captions":
			if err := func() error {
				s.AutoGeneratedCaptions.Reset()
				if err := s.AutoGeneratedCaptions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_generated_captions\"")
			}
		case "auto_saving_chat":
			if err := func() error {
				s.AutoSavingChat.Reset()
				if err := s.AutoSavingChat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_saving_chat\"")
			}
		case "breakout_room":
			if err := func() error {
				s.BreakoutRoom.Reset()
				if err := s.BreakoutRoom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"breakout_room\"")
			}
		case "chat":
			if err := func() error {
				s.Chat.Reset()
				if err := s.Chat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"chat\"")
			}
		case "meeting_question_answer":
			if err := func() error {
				s.MeetingQuestionAnswer.Reset()
				if err := s.MeetingQuestionAnswer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_question_answer\"")
			}
		case "closed_caption":
			if err := func() error {
				s.ClosedCaption.Reset()
				if err := s.ClosedCaption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"closed_caption\"")
			}
		case "co_host":
			if err := func() error {
				s.CoHost.Reset()
				if err := s.CoHost.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"co_host\"")
			}
		case "custom_data_center_regions":
			if err := func() error {
				s.CustomDataCenterRegions.Reset()
				if err := s.CustomDataCenterRegions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"custom_data_center_regions\"")
			}
		case "disable_screen_sharing_for_host_meetings":
			if err := func() error {
				s.DisableScreenSharingForHostMeetings.Reset()
				if err := s.DisableScreenSharingForHostMeetings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"disable_screen_sharing_for_host_meetings\"")
			}
		case "disable_screen_sharing_for_in_meeting_guests":
			if err := func() error {
				s.DisableScreenSharingForInMeetingGuests.Reset()
				if err := s.DisableScreenSharingForInMeetingGuests.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"disable_screen_sharing_for_in_meeting_guests\"")
			}
		case "e2e_encryption":
			if err := func() error {
				s.E2eEncryption.Reset()
				if err := s.E2eEncryption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"e2e_encryption\"")
			}
		case "entry_exit_chime":
			if err := func() error {
				s.EntryExitChime.Reset()
				if err := s.EntryExitChime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"entry_exit_chime\"")
			}
		case "far_end_camera_control":
			if err := func() error {
				s.FarEndCameraControl.Reset()
				if err := s.FarEndCameraControl.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"far_end_camera_control\"")
			}
		case "feedback":
			if err := func() error {
				s.Feedback.Reset()
				if err := s.Feedback.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"feedback\"")
			}
		case "file_transfer":
			if err := func() error {
				s.FileTransfer.Reset()
				if err := s.FileTransfer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"file_transfer\"")
			}
		case "full_transcript":
			if err := func() error {
				s.FullTranscript.Reset()
				if err := s.FullTranscript.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"full_transcript\"")
			}
		case "group_hd":
			if err := func() error {
				s.GroupHd.Reset()
				if err := s.GroupHd.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"group_hd\"")
			}
		case "webinar_group_hd":
			if err := func() error {
				s.WebinarGroupHd.Reset()
				if err := s.WebinarGroupHd.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webinar_group_hd\"")
			}
		case "language_interpretation":
			if err := func() error {
				s.LanguageInterpretation.Reset()
				if err := s.LanguageInterpretation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"language_interpretation\"")
			}
		case "sign_language_interpretation":
			if err := func() error {
				s.SignLanguageInterpretation.Reset()
				if err := s.SignLanguageInterpretation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sign_language_interpretation\"")
			}
		case "webinar_reactions":
			if err := func() error {
				s.WebinarReactions.Reset()
				if err := s.WebinarReactions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webinar_reactions\"")
			}
		case "meeting_survey":
			if err := func() error {
				s.MeetingSurvey.Reset()
				if err := s.MeetingSurvey.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_survey\"")
			}
		case "non_verbal_feedback":
			if err := func() error {
				s.NonVerbalFeedback.Reset()
				if err := s.NonVerbalFeedback.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"non_verbal_feedback\"")
			}
		case "original_audio":
			if err := func() error {
				s.OriginalAudio.Reset()
				if err := s.OriginalAudio.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_audio\"")
			}
		case "polling":
			if err := func() error {
				s.Polling.Reset()
				if err := s.Polling.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"polling\"")
			}
		case "post_meeting_feedback":
			if err := func() error {
				s.PostMeetingFeedback.Reset()
				if err := s.PostMeetingFeedback.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"post_meeting_feedback\"")
			}
		case "private_chat":
			if err := func() error {
				s.PrivateChat.Reset()
				if err := s.PrivateChat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"private_chat\"")
			}
		case "remote_control":
			if err := func() error {
				s.RemoteControl.Reset()
				if err := s.RemoteControl.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"remote_control\"")
			}
		case "remote_support":
			if err := func() error {
				s.RemoteSupport.Reset()
				if err := s.RemoteSupport.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"remote_support\"")
			}
		case "request_permission_to_unmute_participants":
			if err := func() error {
				s.RequestPermissionToUnmuteParticipants.Reset()
				if err := s.RequestPermissionToUnmuteParticipants.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"request_permission_to_unmute_participants\"")
			}
		case "save_caption":
			if err := func() error {
				s.SaveCaption.Reset()
				if err := s.SaveCaption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"save_caption\"")
			}
		case "save_captions":
			if err := func() error {
				s.SaveCaptions.Reset()
				if err := s.SaveCaptions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"save_captions\"")
			}
		case "screen_sharing":
			if err := func() error {
				s.ScreenSharing.Reset()
				if err := s.ScreenSharing.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"screen_sharing\"")
			}
		case "sending_default_email_invites":
			if err := func() error {
				s.SendingDefaultEmailInvites.Reset()
				if err := s.SendingDefaultEmailInvites.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sending_default_email_invites\"")
			}
		case "show_a_join_from_your_browser_link":
			if err := func() error {
				s.ShowAJoinFromYourBrowserLink.Reset()
				if err := s.ShowAJoinFromYourBrowserLink.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"show_a_join_from_your_browser_link\"")
			}
		case "show_browser_join_link":
			if err := func() error {
				s.ShowBrowserJoinLink.Reset()
				if err := s.ShowBrowserJoinLink.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"show_browser_join_link\"")
			}
		case "show_meeting_control_toolbar":
			if err := func() error {
				s.ShowMeetingControlToolbar.Reset()
				if err := s.ShowMeetingControlToolbar.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"show_meeting_control_toolbar\"")
			}
		case "slide_control":
			if err := func() error {
				s.SlideControl.Reset()
				if err := s.SlideControl.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"slide_control\"")
			}
		case "stereo_audio":
			if err := func() error {
				s.StereoAudio.Reset()
				if err := s.StereoAudio.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"stereo_audio\"")
			}
		case "use_html_format_email":
			if err := func() error {
				s.UseHTMLFormatEmail.Reset()
				if err := s.UseHTMLFormatEmail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"use_html_format_email\"")
			}
		case "virtual_background":
			if err := func() error {
				s.VirtualBackground.Reset()
				if err := s.VirtualBackground.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"virtual_background\"")
			}
		case "waiting_room":
			if err := func() error {
				s.WaitingRoom.Reset()
				if err := s.WaitingRoom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"waiting_room\"")
			}
		case "webinar_chat":
			if err := func() error {
				s.WebinarChat.Reset()
				if err := s.WebinarChat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webinar_chat\"")
			}
		case "webinar_live_streaming":
			if err := func() error {
				s.WebinarLiveStreaming.Reset()
				if err := s.WebinarLiveStreaming.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webinar_live_streaming\"")
			}
		case "webinar_polling":
			if err := func() error {
				s.WebinarPolling.Reset()
				if err := s.WebinarPolling.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webinar_polling\"")
			}
		case "webinar_question_answer":
			if err := func() error {
				s.WebinarQuestionAnswer.Reset()
				if err := s.WebinarQuestionAnswer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webinar_question_answer\"")
			}
		case "webinar_survey":
			if err := func() error {
				s.WebinarSurvey.Reset()
				if err := s.WebinarSurvey.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webinar_survey\"")
			}
		case "whiteboard":
			if err := func() error {
				s.Whiteboard.Reset()
				if err := s.Whiteboard.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"whiteboard\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GroupLockedSettingsReq0InMeeting")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GroupLockedSettingsReq0InMeeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GroupLockedSettingsReq0InMeeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GroupLockedSettingsReq0OtherOptions) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GroupLockedSettingsReq0OtherOptions) encodeFields(e *jx.Encoder) {
	{
		if s.BlurSnapshot.Set {
			e.FieldStart("blur_snapshot")
			s.BlurSnapshot.Encode(e)
		}
	}
}

var jsonFieldsNameOfGroupLockedSettingsReq0OtherOptions = [1]string{
	0: "blur_snapshot",
}

// Decode decodes GroupLockedSettingsReq0OtherOptions from json.
func (s *GroupLockedSettingsReq0OtherOptions) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GroupLockedSettingsReq0OtherOptions to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "blur_snapshot":
			if err := func() error {
				s.BlurSnapshot.Reset()
				if err := s.BlurSnapshot.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"blur_snapshot\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GroupLockedSettingsReq0OtherOptions")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GroupLockedSettingsReq0OtherOptions) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GroupLockedSettingsReq0OtherOptions) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GroupLockedSettingsReq0Recording) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GroupLockedSettingsReq0Recording) encodeFields(e *jx.Encoder) {
	{
		if s.AccountUserAccessRecording.Set {
			e.FieldStart("account_user_access_recording")
			s.AccountUserAccessRecording.Encode(e)
		}
	}
	{
		if s.AutoDeleteCmr.Set {
			e.FieldStart("auto_delete_cmr")
			s.AutoDeleteCmr.Encode(e)
		}
	}
	{
		if s.AutoRecording.Set {
			e.FieldStart("auto_recording")
			s.AutoRecording.Encode(e)
		}
	}
	{
		if s.CloudRecording.Set {
			e.FieldStart("cloud_recording")
			s.CloudRecording.Encode(e)
		}
	}
	{
		if s.CloudRecordingDownload.Set {
			e.FieldStart("cloud_recording_download")
			s.CloudRecordingDownload.Encode(e)
		}
	}
	{
		if s.HostDeleteCloudRecording.Set {
			e.FieldStart("host_delete_cloud_recording")
			s.HostDeleteCloudRecording.Encode(e)
		}
	}
	{
		if s.IPAddressAccessControl.Set {
			e.FieldStart("ip_address_access_control")
			s.IPAddressAccessControl.Encode(e)
		}
	}
	{
		if s.LocalRecording.Set {
			e.FieldStart("local_recording")
			s.LocalRecording.Encode(e)
		}
	}
	{
		if s.RecordingAuthentication.Set {
			e.FieldStart("recording_authentication")
			s.RecordingAuthentication.Encode(e)
		}
	}
	{
		if s.Archive.Set {
			e.FieldStart("archive")
			s.Archive.Encode(e)
		}
	}
}

var jsonFieldsNameOfGroupLockedSettingsReq0Recording = [10]string{
	0: "account_user_access_recording",
	1: "auto_delete_cmr",
	2: "auto_recording",
	3: "cloud_recording",
	4: "cloud_recording_download",
	5: "host_delete_cloud_recording",
	6: "ip_address_access_control",
	7: "local_recording",
	8: "recording_authentication",
	9: "archive",
}

// Decode decodes GroupLockedSettingsReq0Recording from json.
func (s *GroupLockedSettingsReq0Recording) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GroupLockedSettingsReq0Recording to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "account_user_access_recording":
			if err := func() error {
				s.AccountUserAccessRecording.Reset()
				if err := s.AccountUserAccessRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_user_access_recording\"")
			}
		case "auto_delete_cmr":
			if err := func() error {
				s.AutoDeleteCmr.Reset()
				if err := s.AutoDeleteCmr.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_delete_cmr\"")
			}
		case "auto_recording":
			if err := func() error {
				s.AutoRecording.Reset()
				if err := s.AutoRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_recording\"")
			}
		case "cloud_recording":
			if err := func() error {
				s.CloudRecording.Reset()
				if err := s.CloudRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cloud_recording\"")
			}
		case "cloud_recording_download":
			if err := func() error {
				s.CloudRecordingDownload.Reset()
				if err := s.CloudRecordingDownload.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cloud_recording_download\"")
			}
		case "host_delete_cloud_recording":
			if err := func() error {
				s.HostDeleteCloudRecording.Reset()
				if err := s.HostDeleteCloudRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"host_delete_cloud_recording\"")
			}
		case "ip_address_access_control":
			if err := func() error {
				s.IPAddressAccessControl.Reset()
				if err := s.IPAddressAccessControl.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ip_address_access_control\"")
			}
		case "local_recording":
			if err := func() error {
				s.LocalRecording.Reset()
				if err := s.LocalRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"local_recording\"")
			}
		case "recording_authentication":
			if err := func() error {
				s.RecordingAuthentication.Reset()
				if err := s.RecordingAuthentication.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_authentication\"")
			}
		case "archive":
			if err := func() error {
				s.Archive.Reset()
				if err := s.Archive.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"archive\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GroupLockedSettingsReq0Recording")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GroupLockedSettingsReq0Recording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GroupLockedSettingsReq0Recording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GroupLockedSettingsReq0RecordingIPAddressAccessControl) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GroupLockedSettingsReq0RecordingIPAddressAccessControl) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.IPAddressesOrRanges.Set {
			e.FieldStart("ip_addresses_or_ranges")
			s.IPAddressesOrRanges.Encode(e)
		}
	}
}

var jsonFieldsNameOfGroupLockedSettingsReq0RecordingIPAddressAccessControl = [2]string{
	0: "enable",
	1: "ip_addresses_or_ranges",
}

// Decode decodes GroupLockedSettingsReq0RecordingIPAddressAccessControl from json.
func (s *GroupLockedSettingsReq0RecordingIPAddressAccessControl) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GroupLockedSettingsReq0RecordingIPAddressAccessControl to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "ip_addresses_or_ranges":
			if err := func() error {
				s.IPAddressesOrRanges.Reset()
				if err := s.IPAddressesOrRanges.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ip_addresses_or_ranges\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GroupLockedSettingsReq0RecordingIPAddressAccessControl")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GroupLockedSettingsReq0RecordingIPAddressAccessControl) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GroupLockedSettingsReq0RecordingIPAddressAccessControl) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GroupLockedSettingsReq0ScheduleMeeting) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GroupLockedSettingsReq0ScheduleMeeting) encodeFields(e *jx.Encoder) {
	{
		if s.AudioType.Set {
			e.FieldStart("audio_type")
			s.AudioType.Encode(e)
		}
	}
	{
		if s.EmbedPasswordInJoinLink.Set {
			e.FieldStart("embed_password_in_join_link")
			s.EmbedPasswordInJoinLink.Encode(e)
		}
	}
	{
		if s.ForcePmiJbhPassword.Set {
			e.FieldStart("force_pmi_jbh_password")
			s.ForcePmiJbhPassword.Encode(e)
		}
	}
	{
		if s.HostVideo.Set {
			e.FieldStart("host_video")
			s.HostVideo.Encode(e)
		}
	}
	{
		if s.JoinBeforeHost.Set {
			e.FieldStart("join_before_host")
			s.JoinBeforeHost.Encode(e)
		}
	}
	{
		if s.MeetingAuthentication.Set {
			e.FieldStart("meeting_authentication")
			s.MeetingAuthentication.Encode(e)
		}
	}
	{
		if s.MuteUponEntry.Set {
			e.FieldStart("mute_upon_entry")
			s.MuteUponEntry.Encode(e)
		}
	}
	{
		if s.ParticipantVideo.Set {
			e.FieldStart("participant_video")
			s.ParticipantVideo.Encode(e)
		}
	}
	{
		if s.PersonalMeeting.Set {
			e.FieldStart("personal_meeting")
			s.PersonalMeeting.Encode(e)
		}
	}
	{
		if s.PstnPasswordProtected.Set {
			e.FieldStart("pstn_password_protected")
			s.PstnPasswordProtected.Encode(e)
		}
	}
	{
		if s.RequirePasswordForInstantMeetings.Set {
			e.FieldStart("require_password_for_instant_meetings")
			s.RequirePasswordForInstantMeetings.Encode(e)
		}
	}
	{
		if s.RequirePasswordForPmiMeetings.Set {
			e.FieldStart("require_password_for_pmi_meetings")
			s.RequirePasswordForPmiMeetings.Encode(e)
		}
	}
	{
		if s.RequirePasswordForSchedulingNewMeetings.Set {
			e.FieldStart("require_password_for_scheduling_new_meetings")
			s.RequirePasswordForSchedulingNewMeetings.Encode(e)
		}
	}
	{
		if s.UpcomingMeetingReminder.Set {
			e.FieldStart("upcoming_meeting_reminder")
			s.UpcomingMeetingReminder.Encode(e)
		}
	}
	{
		if s.ContinuousMeetingChat.Set {
			e.FieldStart("continuous_meeting_chat")
			s.ContinuousMeetingChat.Encode(e)
		}
	}
}

var jsonFieldsNameOfGroupLockedSettingsReq0ScheduleMeeting = [15]string{
	0:  "audio_type",
	1:  "embed_password_in_join_link",
	2:  "force_pmi_jbh_password",
	3:  "host_video",
	4:  "join_before_host",
	5:  "meeting_authentication",
	6:  "mute_upon_entry",
	7:  "participant_video",
	8:  "personal_meeting",
	9:  "pstn_password_protected",
	10: "require_password_for_instant_meetings",
	11: "require_password_for_pmi_meetings",
	12: "require_password_for_scheduling_new_meetings",
	13: "upcoming_meeting_reminder",
	14: "continuous_meeting_chat",
}

// Decode decodes GroupLockedSettingsReq0ScheduleMeeting from json.
func (s *GroupLockedSettingsReq0ScheduleMeeting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GroupLockedSettingsReq0ScheduleMeeting to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_type":
			if err := func() error {
				s.AudioType.Reset()
				if err := s.AudioType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_type\"")
			}
		case "embed_password_in_join_link":
			if err := func() error {
				s.EmbedPasswordInJoinLink.Reset()
				if err := s.EmbedPasswordInJoinLink.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"embed_password_in_join_link\"")
			}
		case "force_pmi_jbh_password":
			if err := func() error {
				s.ForcePmiJbhPassword.Reset()
				if err := s.ForcePmiJbhPassword.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"force_pmi_jbh_password\"")
			}
		case "host_video":
			if err := func() error {
				s.HostVideo.Reset()
				if err := s.HostVideo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"host_video\"")
			}
		case "join_before_host":
			if err := func() error {
				s.JoinBeforeHost.Reset()
				if err := s.JoinBeforeHost.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"join_before_host\"")
			}
		case "meeting_authentication":
			if err := func() error {
				s.MeetingAuthentication.Reset()
				if err := s.MeetingAuthentication.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_authentication\"")
			}
		case "mute_upon_entry":
			if err := func() error {
				s.MuteUponEntry.Reset()
				if err := s.MuteUponEntry.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mute_upon_entry\"")
			}
		case "participant_video":
			if err := func() error {
				s.ParticipantVideo.Reset()
				if err := s.ParticipantVideo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"participant_video\"")
			}
		case "personal_meeting":
			if err := func() error {
				s.PersonalMeeting.Reset()
				if err := s.PersonalMeeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"personal_meeting\"")
			}
		case "pstn_password_protected":
			if err := func() error {
				s.PstnPasswordProtected.Reset()
				if err := s.PstnPasswordProtected.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pstn_password_protected\"")
			}
		case "require_password_for_instant_meetings":
			if err := func() error {
				s.RequirePasswordForInstantMeetings.Reset()
				if err := s.RequirePasswordForInstantMeetings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_password_for_instant_meetings\"")
			}
		case "require_password_for_pmi_meetings":
			if err := func() error {
				s.RequirePasswordForPmiMeetings.Reset()
				if err := s.RequirePasswordForPmiMeetings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_password_for_pmi_meetings\"")
			}
		case "require_password_for_scheduling_new_meetings":
			if err := func() error {
				s.RequirePasswordForSchedulingNewMeetings.Reset()
				if err := s.RequirePasswordForSchedulingNewMeetings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_password_for_scheduling_new_meetings\"")
			}
		case "upcoming_meeting_reminder":
			if err := func() error {
				s.UpcomingMeetingReminder.Reset()
				if err := s.UpcomingMeetingReminder.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"upcoming_meeting_reminder\"")
			}
		case "continuous_meeting_chat":
			if err := func() error {
				s.ContinuousMeetingChat.Reset()
				if err := s.ContinuousMeetingChat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"continuous_meeting_chat\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GroupLockedSettingsReq0ScheduleMeeting")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GroupLockedSettingsReq0ScheduleMeeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GroupLockedSettingsReq0ScheduleMeeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GroupLockedSettingsReq0Telephony) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GroupLockedSettingsReq0Telephony) encodeFields(e *jx.Encoder) {
	{
		if s.TelephonyRegions.Set {
			e.FieldStart("telephony_regions")
			s.TelephonyRegions.Encode(e)
		}
	}
	{
		if s.ThirdPartyAudio.Set {
			e.FieldStart("third_party_audio")
			s.ThirdPartyAudio.Encode(e)
		}
	}
}

var jsonFieldsNameOfGroupLockedSettingsReq0Telephony = [2]string{
	0: "telephony_regions",
	1: "third_party_audio",
}

// Decode decodes GroupLockedSettingsReq0Telephony from json.
func (s *GroupLockedSettingsReq0Telephony) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GroupLockedSettingsReq0Telephony to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "telephony_regions":
			if err := func() error {
				s.TelephonyRegions.Reset()
				if err := s.TelephonyRegions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"telephony_regions\"")
			}
		case "third_party_audio":
			if err := func() error {
				s.ThirdPartyAudio.Reset()
				if err := s.ThirdPartyAudio.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"third_party_audio\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GroupLockedSettingsReq0Telephony")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GroupLockedSettingsReq0Telephony) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GroupLockedSettingsReq0Telephony) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GroupLockedSettingsReq1) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GroupLockedSettingsReq1) encodeFields(e *jx.Encoder) {
	{
		if s.MeetingSecurity.Set {
			e.FieldStart("meeting_security")
			s.MeetingSecurity.Encode(e)
		}
	}
}

var jsonFieldsNameOfGroupLockedSettingsReq1 = [1]string{
	0: "meeting_security",
}

// Decode decodes GroupLockedSettingsReq1 from json.
func (s *GroupLockedSettingsReq1) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GroupLockedSettingsReq1 to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "meeting_security":
			if err := func() error {
				s.MeetingSecurity.Reset()
				if err := s.MeetingSecurity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_security\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GroupLockedSettingsReq1")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GroupLockedSettingsReq1) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GroupLockedSettingsReq1) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GroupLockedSettingsReq1MeetingSecurity) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GroupLockedSettingsReq1MeetingSecurity) encodeFields(e *jx.Encoder) {
	{
		if s.ApprovedOrDeniedCountriesOrRegions.Set {
			e.FieldStart("approved_or_denied_countries_or_regions")
			s.ApprovedOrDeniedCountriesOrRegions.Encode(e)
		}
	}
	{
		if s.AutoSecurity.Set {
			e.FieldStart("auto_security")
			s.AutoSecurity.Encode(e)
		}
	}
	{
		if s.BlockUserDomain.Set {
			e.FieldStart("block_user_domain")
			s.BlockUserDomain.Encode(e)
		}
	}
	{
		if s.EmbedPasswordInJoinLink.Set {
			e.FieldStart("embed_password_in_join_link")
			s.EmbedPasswordInJoinLink.Encode(e)
		}
	}
	{
		if s.EncryptionType.Set {
			e.FieldStart("encryption_type")
			s.EncryptionType.Encode(e)
		}
	}
	{
		if s.EndToEndEncryptedMeetings.Set {
			e.FieldStart("end_to_end_encrypted_meetings")
			s.EndToEndEncryptedMeetings.Encode(e)
		}
	}
	{
		if s.MeetingPassword.Set {
			e.FieldStart("meeting_password")
			s.MeetingPassword.Encode(e)
		}
	}
	{
		if s.OnlyAuthenticatedCanJoinFromWebclient.Set {
			e.FieldStart("only_authenticated_can_join_from_webclient")
			s.OnlyAuthenticatedCanJoinFromWebclient.Encode(e)
		}
	}
	{
		if s.PhonePassword.Set {
			e.FieldStart("phone_password")
			s.PhonePassword.Encode(e)
		}
	}
	{
		if s.PmiPassword.Set {
			e.FieldStart("pmi_password")
			s.PmiPassword.Encode(e)
		}
	}
	{
		if s.WaitingRoom.Set {
			e.FieldStart("waiting_room")
			s.WaitingRoom.Encode(e)
		}
	}
	{
		if s.WebinarPassword.Set {
			e.FieldStart("webinar_password")
			s.WebinarPassword.Encode(e)
		}
	}
}

var jsonFieldsNameOfGroupLockedSettingsReq1MeetingSecurity = [12]string{
	0:  "approved_or_denied_countries_or_regions",
	1:  "auto_security",
	2:  "block_user_domain",
	3:  "embed_password_in_join_link",
	4:  "encryption_type",
	5:  "end_to_end_encrypted_meetings",
	6:  "meeting_password",
	7:  "only_authenticated_can_join_from_webclient",
	8:  "phone_password",
	9:  "pmi_password",
	10: "waiting_room",
	11: "webinar_password",
}

// Decode decodes GroupLockedSettingsReq1MeetingSecurity from json.
func (s *GroupLockedSettingsReq1MeetingSecurity) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GroupLockedSettingsReq1MeetingSecurity to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "approved_or_denied_countries_or_regions":
			if err := func() error {
				s.ApprovedOrDeniedCountriesOrRegions.Reset()
				if err := s.ApprovedOrDeniedCountriesOrRegions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"approved_or_denied_countries_or_regions\"")
			}
		case "auto_security":
			if err := func() error {
				s.AutoSecurity.Reset()
				if err := s.AutoSecurity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_security\"")
			}
		case "block_user_domain":
			if err := func() error {
				s.BlockUserDomain.Reset()
				if err := s.BlockUserDomain.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"block_user_domain\"")
			}
		case "embed_password_in_join_link":
			if err := func() error {
				s.EmbedPasswordInJoinLink.Reset()
				if err := s.EmbedPasswordInJoinLink.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"embed_password_in_join_link\"")
			}
		case "encryption_type":
			if err := func() error {
				s.EncryptionType.Reset()
				if err := s.EncryptionType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"encryption_type\"")
			}
		case "end_to_end_encrypted_meetings":
			if err := func() error {
				s.EndToEndEncryptedMeetings.Reset()
				if err := s.EndToEndEncryptedMeetings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"end_to_end_encrypted_meetings\"")
			}
		case "meeting_password":
			if err := func() error {
				s.MeetingPassword.Reset()
				if err := s.MeetingPassword.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_password\"")
			}
		case "only_authenticated_can_join_from_webclient":
			if err := func() error {
				s.OnlyAuthenticatedCanJoinFromWebclient.Reset()
				if err := s.OnlyAuthenticatedCanJoinFromWebclient.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"only_authenticated_can_join_from_webclient\"")
			}
		case "phone_password":
			if err := func() error {
				s.PhonePassword.Reset()
				if err := s.PhonePassword.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_password\"")
			}
		case "pmi_password":
			if err := func() error {
				s.PmiPassword.Reset()
				if err := s.PmiPassword.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pmi_password\"")
			}
		case "waiting_room":
			if err := func() error {
				s.WaitingRoom.Reset()
				if err := s.WaitingRoom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"waiting_room\"")
			}
		case "webinar_password":
			if err := func() error {
				s.WebinarPassword.Reset()
				if err := s.WebinarPassword.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webinar_password\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GroupLockedSettingsReq1MeetingSecurity")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GroupLockedSettingsReq1MeetingSecurity) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GroupLockedSettingsReq1MeetingSecurity) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GroupMembersCreateCreated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GroupMembersCreateCreated) encodeFields(e *jx.Encoder) {
	{
		if s.AddedAt.Set {
			e.FieldStart("added_at")
			s.AddedAt.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.Ids.Set {
			e.FieldStart("ids")
			s.Ids.Encode(e)
		}
	}
}

var jsonFieldsNameOfGroupMembersCreateCreated = [2]string{
	0: "added_at",
	1: "ids",
}

// Decode decodes GroupMembersCreateCreated from json.
func (s *GroupMembersCreateCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GroupMembersCreateCreated to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "added_at":
			if err := func() error {
				s.AddedAt.Reset()
				if err := s.AddedAt.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"added_at\"")
			}
		case "ids":
			if err := func() error {
				s.Ids.Reset()
				if err := s.Ids.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ids\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GroupMembersCreateCreated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GroupMembersCreateCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GroupMembersCreateCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GroupMembersCreateReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GroupMembersCreateReq) encodeFields(e *jx.Encoder) {
	{
		if s.Members != nil {
			e.FieldStart("members")
			e.ArrStart()
			for _, elem := range s.Members {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGroupMembersCreateReq = [1]string{
	0: "members",
}

// Decode decodes GroupMembersCreateReq from json.
func (s *GroupMembersCreateReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GroupMembersCreateReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "members":
			if err := func() error {
				s.Members = make([]GroupMembersCreateReqMembersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GroupMembersCreateReqMembersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Members = append(s.Members, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"members\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GroupMembersCreateReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GroupMembersCreateReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GroupMembersCreateReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GroupMembersCreateReqMembersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GroupMembersCreateReqMembersItem) encodeFields(e *jx.Encoder) {
	{
		if s.Email.Set {
			e.FieldStart("email")
			s.Email.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
}

var jsonFieldsNameOfGroupMembersCreateReqMembersItem = [2]string{
	0: "email",
	1: "id",
}

// Decode decodes GroupMembersCreateReqMembersItem from json.
func (s *GroupMembersCreateReqMembersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GroupMembersCreateReqMembersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "email":
			if err := func() error {
				s.Email.Reset()
				if err := s.Email.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GroupMembersCreateReqMembersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GroupMembersCreateReqMembersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GroupMembersCreateReqMembersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GroupMembersOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GroupMembersOK) encodeFields(e *jx.Encoder) {
	{
		if s.Members != nil {
			e.FieldStart("members")
			e.ArrStart()
			for _, elem := range s.Members {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageCount.Set {
			e.FieldStart("page_count")
			s.PageCount.Encode(e)
		}
	}
	{
		if s.PageNumber.Set {
			e.FieldStart("page_number")
			s.PageNumber.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
	{
		if s.TotalRecords.Set {
			e.FieldStart("total_records")
			s.TotalRecords.Encode(e)
		}
	}
}

var jsonFieldsNameOfGroupMembersOK = [6]string{
	0: "members",
	1: "next_page_token",
	2: "page_count",
	3: "page_number",
	4: "page_size",
	5: "total_records",
}

// Decode decodes GroupMembersOK from json.
func (s *GroupMembersOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GroupMembersOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "members":
			if err := func() error {
				s.Members = make([]GroupMembersOKMembersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GroupMembersOKMembersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Members = append(s.Members, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"members\"")
			}
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_count":
			if err := func() error {
				s.PageCount.Reset()
				if err := s.PageCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_count\"")
			}
		case "page_number":
			if err := func() error {
				s.PageNumber.Reset()
				if err := s.PageNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_number\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		case "total_records":
			if err := func() error {
				s.TotalRecords.Reset()
				if err := s.TotalRecords.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_records\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GroupMembersOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GroupMembersOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GroupMembersOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GroupMembersOKMembersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GroupMembersOKMembersItem) encodeFields(e *jx.Encoder) {
	{
		if s.Email.Set {
			e.FieldStart("email")
			s.Email.Encode(e)
		}
	}
	{
		if s.FirstName.Set {
			e.FieldStart("first_name")
			s.FirstName.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.LastName.Set {
			e.FieldStart("last_name")
			s.LastName.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfGroupMembersOKMembersItem = [5]string{
	0: "email",
	1: "first_name",
	2: "id",
	3: "last_name",
	4: "type",
}

// Decode decodes GroupMembersOKMembersItem from json.
func (s *GroupMembersOKMembersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GroupMembersOKMembersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "email":
			if err := func() error {
				s.Email.Reset()
				if err := s.Email.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		case "first_name":
			if err := func() error {
				s.FirstName.Reset()
				if err := s.FirstName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"first_name\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "last_name":
			if err := func() error {
				s.LastName.Reset()
				if err := s.LastName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"last_name\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GroupMembersOKMembersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GroupMembersOKMembersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GroupMembersOKMembersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GroupOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GroupOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.TotalMembers.Set {
			e.FieldStart("total_members")
			s.TotalMembers.Encode(e)
		}
	}
}

var jsonFieldsNameOfGroupOK = [3]string{
	0: "id",
	1: "name",
	2: "total_members",
}

// Decode decodes GroupOK from json.
func (s *GroupOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GroupOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "total_members":
			if err := func() error {
				s.TotalMembers.Reset()
				if err := s.TotalMembers.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_members\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GroupOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GroupOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GroupOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GroupSettingsRegistrationOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GroupSettingsRegistrationOK) encodeFields(e *jx.Encoder) {
	{
		if s.Options.Set {
			e.FieldStart("options")
			s.Options.Encode(e)
		}
	}
	{
		if s.Questions != nil {
			e.FieldStart("questions")
			e.ArrStart()
			for _, elem := range s.Questions {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ApproveType.Set {
			e.FieldStart("approve_type")
			s.ApproveType.Encode(e)
		}
	}
	{
		if s.CustomQuestions != nil {
			e.FieldStart("custom_questions")
			e.ArrStart()
			for _, elem := range s.CustomQuestions {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGroupSettingsRegistrationOK = [4]string{
	0: "options",
	1: "questions",
	2: "approve_type",
	3: "custom_questions",
}

// Decode decodes GroupSettingsRegistrationOK from json.
func (s *GroupSettingsRegistrationOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GroupSettingsRegistrationOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "options":
			if err := func() error {
				s.Options.Reset()
				if err := s.Options.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"options\"")
			}
		case "questions":
			if err := func() error {
				s.Questions = make([]GroupSettingsRegistrationOKQuestionsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GroupSettingsRegistrationOKQuestionsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Questions = append(s.Questions, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"questions\"")
			}
		case "approve_type":
			if err := func() error {
				s.ApproveType.Reset()
				if err := s.ApproveType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"approve_type\"")
			}
		case "custom_questions":
			if err := func() error {
				s.CustomQuestions = make([]GroupSettingsRegistrationOKCustomQuestionsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GroupSettingsRegistrationOKCustomQuestionsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CustomQuestions = append(s.CustomQuestions, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"custom_questions\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GroupSettingsRegistrationOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GroupSettingsRegistrationOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GroupSettingsRegistrationOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GroupSettingsRegistrationOKCustomQuestionsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GroupSettingsRegistrationOKCustomQuestionsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Title.Set {
			e.FieldStart("title")
			s.Title.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.Required.Set {
			e.FieldStart("required")
			s.Required.Encode(e)
		}
	}
	{
		if s.Selected.Set {
			e.FieldStart("selected")
			s.Selected.Encode(e)
		}
	}
	{
		if s.Answers != nil {
			e.FieldStart("answers")
			e.ArrStart()
			for _, elem := range s.Answers {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGroupSettingsRegistrationOKCustomQuestionsItem = [5]string{
	0: "title",
	1: "type",
	2: "required",
	3: "selected",
	4: "answers",
}

// Decode decodes GroupSettingsRegistrationOKCustomQuestionsItem from json.
func (s *GroupSettingsRegistrationOKCustomQuestionsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GroupSettingsRegistrationOKCustomQuestionsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "title":
			if err := func() error {
				s.Title.Reset()
				if err := s.Title.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"title\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "required":
			if err := func() error {
				s.Required.Reset()
				if err := s.Required.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required\"")
			}
		case "selected":
			if err := func() error {
				s.Selected.Reset()
				if err := s.Selected.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"selected\"")
			}
		case "answers":
			if err := func() error {
				s.Answers = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Answers = append(s.Answers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"answers\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GroupSettingsRegistrationOKCustomQuestionsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GroupSettingsRegistrationOKCustomQuestionsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GroupSettingsRegistrationOKCustomQuestionsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GroupSettingsRegistrationOKOptions) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GroupSettingsRegistrationOKOptions) encodeFields(e *jx.Encoder) {
	{
		if s.HostEmailNotification.Set {
			e.FieldStart("host_email_notification")
			s.HostEmailNotification.Encode(e)
		}
	}
	{
		if s.CloseRegistration.Set {
			e.FieldStart("close_registration")
			s.CloseRegistration.Encode(e)
		}
	}
	{
		if s.AllowParticipantsToJoinFromMultipleDevices.Set {
			e.FieldStart("allow_participants_to_join_from_multiple_devices")
			s.AllowParticipantsToJoinFromMultipleDevices.Encode(e)
		}
	}
	{
		if s.ShowSocialShareButtons.Set {
			e.FieldStart("show_social_share_buttons")
			s.ShowSocialShareButtons.Encode(e)
		}
	}
}

var jsonFieldsNameOfGroupSettingsRegistrationOKOptions = [4]string{
	0: "host_email_notification",
	1: "close_registration",
	2: "allow_participants_to_join_from_multiple_devices",
	3: "show_social_share_buttons",
}

// Decode decodes GroupSettingsRegistrationOKOptions from json.
func (s *GroupSettingsRegistrationOKOptions) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GroupSettingsRegistrationOKOptions to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "host_email_notification":
			if err := func() error {
				s.HostEmailNotification.Reset()
				if err := s.HostEmailNotification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"host_email_notification\"")
			}
		case "close_registration":
			if err := func() error {
				s.CloseRegistration.Reset()
				if err := s.CloseRegistration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"close_registration\"")
			}
		case "allow_participants_to_join_from_multiple_devices":
			if err := func() error {
				s.AllowParticipantsToJoinFromMultipleDevices.Reset()
				if err := s.AllowParticipantsToJoinFromMultipleDevices.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_participants_to_join_from_multiple_devices\"")
			}
		case "show_social_share_buttons":
			if err := func() error {
				s.ShowSocialShareButtons.Reset()
				if err := s.ShowSocialShareButtons.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"show_social_share_buttons\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GroupSettingsRegistrationOKOptions")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GroupSettingsRegistrationOKOptions) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GroupSettingsRegistrationOKOptions) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GroupSettingsRegistrationOKQuestionsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GroupSettingsRegistrationOKQuestionsItem) encodeFields(e *jx.Encoder) {
	{
		if s.FieldName.Set {
			e.FieldStart("field_name")
			s.FieldName.Encode(e)
		}
	}
	{
		if s.Required.Set {
			e.FieldStart("required")
			s.Required.Encode(e)
		}
	}
	{
		if s.Selected.Set {
			e.FieldStart("selected")
			s.Selected.Encode(e)
		}
	}
}

var jsonFieldsNameOfGroupSettingsRegistrationOKQuestionsItem = [3]string{
	0: "field_name",
	1: "required",
	2: "selected",
}

// Decode decodes GroupSettingsRegistrationOKQuestionsItem from json.
func (s *GroupSettingsRegistrationOKQuestionsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GroupSettingsRegistrationOKQuestionsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "field_name":
			if err := func() error {
				s.FieldName.Reset()
				if err := s.FieldName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"field_name\"")
			}
		case "required":
			if err := func() error {
				s.Required.Reset()
				if err := s.Required.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required\"")
			}
		case "selected":
			if err := func() error {
				s.Selected.Reset()
				if err := s.Selected.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"selected\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GroupSettingsRegistrationOKQuestionsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GroupSettingsRegistrationOKQuestionsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GroupSettingsRegistrationOKQuestionsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GroupSettingsRegistrationUpdateReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GroupSettingsRegistrationUpdateReq) encodeFields(e *jx.Encoder) {
	{
		if s.Options.Set {
			e.FieldStart("options")
			s.Options.Encode(e)
		}
	}
	{
		if s.Questions != nil {
			e.FieldStart("questions")
			e.ArrStart()
			for _, elem := range s.Questions {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ApproveType.Set {
			e.FieldStart("approve_type")
			s.ApproveType.Encode(e)
		}
	}
	{
		if s.CustomQuestions != nil {
			e.FieldStart("custom_questions")
			e.ArrStart()
			for _, elem := range s.CustomQuestions {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGroupSettingsRegistrationUpdateReq = [4]string{
	0: "options",
	1: "questions",
	2: "approve_type",
	3: "custom_questions",
}

// Decode decodes GroupSettingsRegistrationUpdateReq from json.
func (s *GroupSettingsRegistrationUpdateReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GroupSettingsRegistrationUpdateReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "options":
			if err := func() error {
				s.Options.Reset()
				if err := s.Options.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"options\"")
			}
		case "questions":
			if err := func() error {
				s.Questions = make([]GroupSettingsRegistrationUpdateReqQuestionsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GroupSettingsRegistrationUpdateReqQuestionsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Questions = append(s.Questions, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"questions\"")
			}
		case "approve_type":
			if err := func() error {
				s.ApproveType.Reset()
				if err := s.ApproveType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"approve_type\"")
			}
		case "custom_questions":
			if err := func() error {
				s.CustomQuestions = make([]GroupSettingsRegistrationUpdateReqCustomQuestionsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GroupSettingsRegistrationUpdateReqCustomQuestionsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CustomQuestions = append(s.CustomQuestions, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"custom_questions\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GroupSettingsRegistrationUpdateReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GroupSettingsRegistrationUpdateReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GroupSettingsRegistrationUpdateReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GroupSettingsRegistrationUpdateReqCustomQuestionsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GroupSettingsRegistrationUpdateReqCustomQuestionsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Title.Set {
			e.FieldStart("title")
			s.Title.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.Required.Set {
			e.FieldStart("required")
			s.Required.Encode(e)
		}
	}
	{
		if s.Selected.Set {
			e.FieldStart("selected")
			s.Selected.Encode(e)
		}
	}
	{
		if s.Answers != nil {
			e.FieldStart("answers")
			e.ArrStart()
			for _, elem := range s.Answers {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGroupSettingsRegistrationUpdateReqCustomQuestionsItem = [5]string{
	0: "title",
	1: "type",
	2: "required",
	3: "selected",
	4: "answers",
}

// Decode decodes GroupSettingsRegistrationUpdateReqCustomQuestionsItem from json.
func (s *GroupSettingsRegistrationUpdateReqCustomQuestionsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GroupSettingsRegistrationUpdateReqCustomQuestionsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "title":
			if err := func() error {
				s.Title.Reset()
				if err := s.Title.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"title\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "required":
			if err := func() error {
				s.Required.Reset()
				if err := s.Required.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required\"")
			}
		case "selected":
			if err := func() error {
				s.Selected.Reset()
				if err := s.Selected.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"selected\"")
			}
		case "answers":
			if err := func() error {
				s.Answers = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Answers = append(s.Answers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"answers\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GroupSettingsRegistrationUpdateReqCustomQuestionsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GroupSettingsRegistrationUpdateReqCustomQuestionsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GroupSettingsRegistrationUpdateReqCustomQuestionsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GroupSettingsRegistrationUpdateReqOptions) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GroupSettingsRegistrationUpdateReqOptions) encodeFields(e *jx.Encoder) {
	{
		if s.HostEmailNotification.Set {
			e.FieldStart("host_email_notification")
			s.HostEmailNotification.Encode(e)
		}
	}
	{
		if s.CloseRegistration.Set {
			e.FieldStart("close_registration")
			s.CloseRegistration.Encode(e)
		}
	}
	{
		if s.AllowParticipantsToJoinFromMultipleDevices.Set {
			e.FieldStart("allow_participants_to_join_from_multiple_devices")
			s.AllowParticipantsToJoinFromMultipleDevices.Encode(e)
		}
	}
	{
		if s.ShowSocialShareButtons.Set {
			e.FieldStart("show_social_share_buttons")
			s.ShowSocialShareButtons.Encode(e)
		}
	}
}

var jsonFieldsNameOfGroupSettingsRegistrationUpdateReqOptions = [4]string{
	0: "host_email_notification",
	1: "close_registration",
	2: "allow_participants_to_join_from_multiple_devices",
	3: "show_social_share_buttons",
}

// Decode decodes GroupSettingsRegistrationUpdateReqOptions from json.
func (s *GroupSettingsRegistrationUpdateReqOptions) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GroupSettingsRegistrationUpdateReqOptions to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "host_email_notification":
			if err := func() error {
				s.HostEmailNotification.Reset()
				if err := s.HostEmailNotification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"host_email_notification\"")
			}
		case "close_registration":
			if err := func() error {
				s.CloseRegistration.Reset()
				if err := s.CloseRegistration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"close_registration\"")
			}
		case "allow_participants_to_join_from_multiple_devices":
			if err := func() error {
				s.AllowParticipantsToJoinFromMultipleDevices.Reset()
				if err := s.AllowParticipantsToJoinFromMultipleDevices.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_participants_to_join_from_multiple_devices\"")
			}
		case "show_social_share_buttons":
			if err := func() error {
				s.ShowSocialShareButtons.Reset()
				if err := s.ShowSocialShareButtons.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"show_social_share_buttons\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GroupSettingsRegistrationUpdateReqOptions")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GroupSettingsRegistrationUpdateReqOptions) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GroupSettingsRegistrationUpdateReqOptions) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GroupSettingsRegistrationUpdateReqQuestionsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GroupSettingsRegistrationUpdateReqQuestionsItem) encodeFields(e *jx.Encoder) {
	{
		if s.FieldName.Set {
			e.FieldStart("field_name")
			s.FieldName.Encode(e)
		}
	}
	{
		if s.Required.Set {
			e.FieldStart("required")
			s.Required.Encode(e)
		}
	}
	{
		if s.Selected.Set {
			e.FieldStart("selected")
			s.Selected.Encode(e)
		}
	}
}

var jsonFieldsNameOfGroupSettingsRegistrationUpdateReqQuestionsItem = [3]string{
	0: "field_name",
	1: "required",
	2: "selected",
}

// Decode decodes GroupSettingsRegistrationUpdateReqQuestionsItem from json.
func (s *GroupSettingsRegistrationUpdateReqQuestionsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GroupSettingsRegistrationUpdateReqQuestionsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "field_name":
			if err := func() error {
				s.FieldName.Reset()
				if err := s.FieldName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"field_name\"")
			}
		case "required":
			if err := func() error {
				s.Required.Reset()
				if err := s.Required.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required\"")
			}
		case "selected":
			if err := func() error {
				s.Selected.Reset()
				if err := s.Selected.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"selected\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GroupSettingsRegistrationUpdateReqQuestionsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GroupSettingsRegistrationUpdateReqQuestionsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GroupSettingsRegistrationUpdateReqQuestionsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GroupUpdateReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GroupUpdateReq) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGroupUpdateReq = [1]string{
	0: "name",
}

// Decode decodes GroupUpdateReq from json.
func (s *GroupUpdateReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GroupUpdateReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GroupUpdateReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GroupUpdateReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GroupUpdateReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GroupsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GroupsOK) encodeFields(e *jx.Encoder) {
	{
		if s.Groups != nil {
			e.FieldStart("groups")
			e.ArrStart()
			for _, elem := range s.Groups {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalRecords.Set {
			e.FieldStart("total_records")
			s.TotalRecords.Encode(e)
		}
	}
}

var jsonFieldsNameOfGroupsOK = [2]string{
	0: "groups",
	1: "total_records",
}

// Decode decodes GroupsOK from json.
func (s *GroupsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GroupsOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "groups":
			if err := func() error {
				s.Groups = make([]GroupsOKGroupsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GroupsOKGroupsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Groups = append(s.Groups, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"groups\"")
			}
		case "total_records":
			if err := func() error {
				s.TotalRecords.Reset()
				if err := s.TotalRecords.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_records\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GroupsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GroupsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GroupsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GroupsOKGroupsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GroupsOKGroupsItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.TotalMembers.Set {
			e.FieldStart("total_members")
			s.TotalMembers.Encode(e)
		}
	}
}

var jsonFieldsNameOfGroupsOKGroupsItem = [3]string{
	0: "id",
	1: "name",
	2: "total_members",
}

// Decode decodes GroupsOKGroupsItem from json.
func (s *GroupsOKGroupsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GroupsOKGroupsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "total_members":
			if err := func() error {
				s.TotalMembers.Reset()
				if err := s.TotalMembers.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_members\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GroupsOKGroupsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GroupsOKGroupsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GroupsOKGroupsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListCollaborationDevicesOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListCollaborationDevicesOK) encodeFields(e *jx.Encoder) {
	{
		if s.TotalRecords.Set {
			e.FieldStart("total_records")
			s.TotalRecords.Encode(e)
		}
	}
	{
		if s.CollaborationDevices != nil {
			e.FieldStart("collaboration_devices")
			e.ArrStart()
			for _, elem := range s.CollaborationDevices {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfListCollaborationDevicesOK = [2]string{
	0: "total_records",
	1: "collaboration_devices",
}

// Decode decodes ListCollaborationDevicesOK from json.
func (s *ListCollaborationDevicesOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListCollaborationDevicesOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "total_records":
			if err := func() error {
				s.TotalRecords.Reset()
				if err := s.TotalRecords.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_records\"")
			}
		case "collaboration_devices":
			if err := func() error {
				s.CollaborationDevices = make([]ListCollaborationDevicesOKCollaborationDevicesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListCollaborationDevicesOKCollaborationDevicesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CollaborationDevices = append(s.CollaborationDevices, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"collaboration_devices\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListCollaborationDevicesOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListCollaborationDevicesOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListCollaborationDevicesOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListCollaborationDevicesOKCollaborationDevicesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListCollaborationDevicesOKCollaborationDevicesItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.DeviceName.Set {
			e.FieldStart("device_name")
			s.DeviceName.Encode(e)
		}
	}
	{
		if s.RoomName.Set {
			e.FieldStart("room_name")
			s.RoomName.Encode(e)
		}
	}
	{
		if s.RoomUserID.Set {
			e.FieldStart("room_user_id")
			s.RoomUserID.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
}

var jsonFieldsNameOfListCollaborationDevicesOKCollaborationDevicesItem = [5]string{
	0: "id",
	1: "device_name",
	2: "room_name",
	3: "room_user_id",
	4: "status",
}

// Decode decodes ListCollaborationDevicesOKCollaborationDevicesItem from json.
func (s *ListCollaborationDevicesOKCollaborationDevicesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListCollaborationDevicesOKCollaborationDevicesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "device_name":
			if err := func() error {
				s.DeviceName.Reset()
				if err := s.DeviceName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_name\"")
			}
		case "room_name":
			if err := func() error {
				s.RoomName.Reset()
				if err := s.RoomName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"room_name\"")
			}
		case "room_user_id":
			if err := func() error {
				s.RoomUserID.Reset()
				if err := s.RoomUserID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"room_user_id\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListCollaborationDevicesOKCollaborationDevicesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListCollaborationDevicesOKCollaborationDevicesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListCollaborationDevicesOKCollaborationDevicesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes bool as json.
func (o OptBool) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Bool(bool(o.Value))
}

// Decode decodes bool from json.
func (o *OptBool) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptBool to nil")
	}
	o.Set = true
	v, err := d.Bool()
	if err != nil {
		return err
	}
	o.Value = bool(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptBool) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptBool) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes BulkUpdateFeatureReq as json.
func (o OptBulkUpdateFeatureReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes BulkUpdateFeatureReq from json.
func (o *OptBulkUpdateFeatureReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptBulkUpdateFeatureReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptBulkUpdateFeatureReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptBulkUpdateFeatureReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContactGroupCreateReq as json.
func (o OptContactGroupCreateReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ContactGroupCreateReq from json.
func (o *OptContactGroupCreateReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptContactGroupCreateReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptContactGroupCreateReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptContactGroupCreateReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContactGroupMemberAddReq as json.
func (o OptContactGroupMemberAddReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ContactGroupMemberAddReq from json.
func (o *OptContactGroupMemberAddReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptContactGroupMemberAddReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptContactGroupMemberAddReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptContactGroupMemberAddReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContactGroupUpdateReq as json.
func (o OptContactGroupUpdateReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ContactGroupUpdateReq from json.
func (o *OptContactGroupUpdateReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptContactGroupUpdateReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptContactGroupUpdateReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptContactGroupUpdateReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes time.Time as json.
func (o OptDateTime) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if !o.Set {
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *OptDateTime) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDateTime to nil")
	}
	o.Set = true
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptDateTime) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeDateTime)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptDateTime) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeDateTime)
}

// Encode encodes GetGroupLockSettingsOK0AudioConferencing as json.
func (o OptGetGroupLockSettingsOK0AudioConferencing) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupLockSettingsOK0AudioConferencing from json.
func (o *OptGetGroupLockSettingsOK0AudioConferencing) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupLockSettingsOK0AudioConferencing to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupLockSettingsOK0AudioConferencing) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupLockSettingsOK0AudioConferencing) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupLockSettingsOK0EmailNotification as json.
func (o OptGetGroupLockSettingsOK0EmailNotification) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupLockSettingsOK0EmailNotification from json.
func (o *OptGetGroupLockSettingsOK0EmailNotification) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupLockSettingsOK0EmailNotification to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupLockSettingsOK0EmailNotification) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupLockSettingsOK0EmailNotification) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupLockSettingsOK0InMeeting as json.
func (o OptGetGroupLockSettingsOK0InMeeting) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupLockSettingsOK0InMeeting from json.
func (o *OptGetGroupLockSettingsOK0InMeeting) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupLockSettingsOK0InMeeting to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupLockSettingsOK0InMeeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupLockSettingsOK0InMeeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupLockSettingsOK0OtherOptions as json.
func (o OptGetGroupLockSettingsOK0OtherOptions) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupLockSettingsOK0OtherOptions from json.
func (o *OptGetGroupLockSettingsOK0OtherOptions) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupLockSettingsOK0OtherOptions to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupLockSettingsOK0OtherOptions) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupLockSettingsOK0OtherOptions) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupLockSettingsOK0Recording as json.
func (o OptGetGroupLockSettingsOK0Recording) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupLockSettingsOK0Recording from json.
func (o *OptGetGroupLockSettingsOK0Recording) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupLockSettingsOK0Recording to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupLockSettingsOK0Recording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupLockSettingsOK0Recording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupLockSettingsOK0RecordingIPAddressAccessControl as json.
func (o OptGetGroupLockSettingsOK0RecordingIPAddressAccessControl) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupLockSettingsOK0RecordingIPAddressAccessControl from json.
func (o *OptGetGroupLockSettingsOK0RecordingIPAddressAccessControl) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupLockSettingsOK0RecordingIPAddressAccessControl to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupLockSettingsOK0RecordingIPAddressAccessControl) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupLockSettingsOK0RecordingIPAddressAccessControl) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupLockSettingsOK0ScheduleMeeting as json.
func (o OptGetGroupLockSettingsOK0ScheduleMeeting) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupLockSettingsOK0ScheduleMeeting from json.
func (o *OptGetGroupLockSettingsOK0ScheduleMeeting) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupLockSettingsOK0ScheduleMeeting to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupLockSettingsOK0ScheduleMeeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupLockSettingsOK0ScheduleMeeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupLockSettingsOK0Telephony as json.
func (o OptGetGroupLockSettingsOK0Telephony) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupLockSettingsOK0Telephony from json.
func (o *OptGetGroupLockSettingsOK0Telephony) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupLockSettingsOK0Telephony to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupLockSettingsOK0Telephony) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupLockSettingsOK0Telephony) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupLockSettingsOK1MeetingSecurity as json.
func (o OptGetGroupLockSettingsOK1MeetingSecurity) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupLockSettingsOK1MeetingSecurity from json.
func (o *OptGetGroupLockSettingsOK1MeetingSecurity) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupLockSettingsOK1MeetingSecurity to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupLockSettingsOK1MeetingSecurity) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupLockSettingsOK1MeetingSecurity) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupSettingsOK0AudioConferencing as json.
func (o OptGetGroupSettingsOK0AudioConferencing) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupSettingsOK0AudioConferencing from json.
func (o *OptGetGroupSettingsOK0AudioConferencing) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupSettingsOK0AudioConferencing to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupSettingsOK0AudioConferencing) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupSettingsOK0AudioConferencing) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall as json.
func (o OptGetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall from json.
func (o *OptGetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupSettingsOK0Chat as json.
func (o OptGetGroupSettingsOK0Chat) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupSettingsOK0Chat from json.
func (o *OptGetGroupSettingsOK0Chat) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupSettingsOK0Chat to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupSettingsOK0Chat) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupSettingsOK0Chat) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupSettingsOK0ChatAllowUsersToAddContacts as json.
func (o OptGetGroupSettingsOK0ChatAllowUsersToAddContacts) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupSettingsOK0ChatAllowUsersToAddContacts from json.
func (o *OptGetGroupSettingsOK0ChatAllowUsersToAddContacts) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupSettingsOK0ChatAllowUsersToAddContacts to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupSettingsOK0ChatAllowUsersToAddContacts) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupSettingsOK0ChatAllowUsersToAddContacts) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupSettingsOK0ChatAllowUsersToChatWithOthers as json.
func (o OptGetGroupSettingsOK0ChatAllowUsersToChatWithOthers) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupSettingsOK0ChatAllowUsersToChatWithOthers from json.
func (o *OptGetGroupSettingsOK0ChatAllowUsersToChatWithOthers) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupSettingsOK0ChatAllowUsersToChatWithOthers to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupSettingsOK0ChatAllowUsersToChatWithOthers) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupSettingsOK0ChatAllowUsersToChatWithOthers) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupSettingsOK0ChatChatEmojis as json.
func (o OptGetGroupSettingsOK0ChatChatEmojis) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupSettingsOK0ChatChatEmojis from json.
func (o *OptGetGroupSettingsOK0ChatChatEmojis) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupSettingsOK0ChatChatEmojis to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupSettingsOK0ChatChatEmojis) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupSettingsOK0ChatChatEmojis) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupSettingsOK0ChatChatEtiquetteTool as json.
func (o OptGetGroupSettingsOK0ChatChatEtiquetteTool) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupSettingsOK0ChatChatEtiquetteTool from json.
func (o *OptGetGroupSettingsOK0ChatChatEtiquetteTool) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupSettingsOK0ChatChatEtiquetteTool to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupSettingsOK0ChatChatEtiquetteTool) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupSettingsOK0ChatChatEtiquetteTool) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupSettingsOK0ChatSearchAndSendAnimatedGIFImages as json.
func (o OptGetGroupSettingsOK0ChatSearchAndSendAnimatedGIFImages) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupSettingsOK0ChatSearchAndSendAnimatedGIFImages from json.
func (o *OptGetGroupSettingsOK0ChatSearchAndSendAnimatedGIFImages) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupSettingsOK0ChatSearchAndSendAnimatedGIFImages to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupSettingsOK0ChatSearchAndSendAnimatedGIFImages) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupSettingsOK0ChatSearchAndSendAnimatedGIFImages) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupSettingsOK0ChatSendDataToThirdPartyArchivingService as json.
func (o OptGetGroupSettingsOK0ChatSendDataToThirdPartyArchivingService) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupSettingsOK0ChatSendDataToThirdPartyArchivingService from json.
func (o *OptGetGroupSettingsOK0ChatSendDataToThirdPartyArchivingService) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupSettingsOK0ChatSendDataToThirdPartyArchivingService to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupSettingsOK0ChatSendDataToThirdPartyArchivingService) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupSettingsOK0ChatSendDataToThirdPartyArchivingService) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupSettingsOK0ChatSetRetentionPeriodInCloud as json.
func (o OptGetGroupSettingsOK0ChatSetRetentionPeriodInCloud) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupSettingsOK0ChatSetRetentionPeriodInCloud from json.
func (o *OptGetGroupSettingsOK0ChatSetRetentionPeriodInCloud) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupSettingsOK0ChatSetRetentionPeriodInCloud to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupSettingsOK0ChatSetRetentionPeriodInCloud) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupSettingsOK0ChatSetRetentionPeriodInCloud) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupSettingsOK0ChatSetRetentionPeriodInLocal as json.
func (o OptGetGroupSettingsOK0ChatSetRetentionPeriodInLocal) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupSettingsOK0ChatSetRetentionPeriodInLocal from json.
func (o *OptGetGroupSettingsOK0ChatSetRetentionPeriodInLocal) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupSettingsOK0ChatSetRetentionPeriodInLocal to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupSettingsOK0ChatSetRetentionPeriodInLocal) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupSettingsOK0ChatSetRetentionPeriodInLocal) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupSettingsOK0ChatShareFiles as json.
func (o OptGetGroupSettingsOK0ChatShareFiles) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupSettingsOK0ChatShareFiles from json.
func (o *OptGetGroupSettingsOK0ChatShareFiles) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupSettingsOK0ChatShareFiles to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupSettingsOK0ChatShareFiles) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupSettingsOK0ChatShareFiles) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupSettingsOK0EmailNotification as json.
func (o OptGetGroupSettingsOK0EmailNotification) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupSettingsOK0EmailNotification from json.
func (o *OptGetGroupSettingsOK0EmailNotification) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupSettingsOK0EmailNotification to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupSettingsOK0EmailNotification) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupSettingsOK0EmailNotification) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupSettingsOK0InMeeting as json.
func (o OptGetGroupSettingsOK0InMeeting) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupSettingsOK0InMeeting from json.
func (o *OptGetGroupSettingsOK0InMeeting) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupSettingsOK0InMeeting to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupSettingsOK0InMeeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupSettingsOK0InMeeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupSettingsOK0InMeetingAutoGeneratedTranslation as json.
func (o OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslation) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupSettingsOK0InMeetingAutoGeneratedTranslation from json.
func (o *OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslation) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslation to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslation) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslation) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairList as json.
func (o OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairList) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairList from json.
func (o *OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairList) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairList to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairList) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairList) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage as json.
func (o OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage from json.
func (o *OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo as json.
func (o OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo from json.
func (o *OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupSettingsOK0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupSettingsOK0InMeetingClosedCaptioning as json.
func (o OptGetGroupSettingsOK0InMeetingClosedCaptioning) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupSettingsOK0InMeetingClosedCaptioning from json.
func (o *OptGetGroupSettingsOK0InMeetingClosedCaptioning) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupSettingsOK0InMeetingClosedCaptioning to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupSettingsOK0InMeetingClosedCaptioning) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupSettingsOK0InMeetingClosedCaptioning) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupSettingsOK0InMeetingLanguageInterpretation as json.
func (o OptGetGroupSettingsOK0InMeetingLanguageInterpretation) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupSettingsOK0InMeetingLanguageInterpretation from json.
func (o *OptGetGroupSettingsOK0InMeetingLanguageInterpretation) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupSettingsOK0InMeetingLanguageInterpretation to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupSettingsOK0InMeetingLanguageInterpretation) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupSettingsOK0InMeetingLanguageInterpretation) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupSettingsOK0InMeetingManualCaptioning as json.
func (o OptGetGroupSettingsOK0InMeetingManualCaptioning) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupSettingsOK0InMeetingManualCaptioning from json.
func (o *OptGetGroupSettingsOK0InMeetingManualCaptioning) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupSettingsOK0InMeetingManualCaptioning to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupSettingsOK0InMeetingManualCaptioning) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupSettingsOK0InMeetingManualCaptioning) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupSettingsOK0InMeetingMeetingPolling as json.
func (o OptGetGroupSettingsOK0InMeetingMeetingPolling) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupSettingsOK0InMeetingMeetingPolling from json.
func (o *OptGetGroupSettingsOK0InMeetingMeetingPolling) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupSettingsOK0InMeetingMeetingPolling to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupSettingsOK0InMeetingMeetingPolling) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupSettingsOK0InMeetingMeetingPolling) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupSettingsOK0InMeetingSignLanguageInterpretation as json.
func (o OptGetGroupSettingsOK0InMeetingSignLanguageInterpretation) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupSettingsOK0InMeetingSignLanguageInterpretation from json.
func (o *OptGetGroupSettingsOK0InMeetingSignLanguageInterpretation) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupSettingsOK0InMeetingSignLanguageInterpretation to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupSettingsOK0InMeetingSignLanguageInterpretation) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupSettingsOK0InMeetingSignLanguageInterpretation) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupSettingsOK0InMeetingVirtualBackgroundSettings as json.
func (o OptGetGroupSettingsOK0InMeetingVirtualBackgroundSettings) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupSettingsOK0InMeetingVirtualBackgroundSettings from json.
func (o *OptGetGroupSettingsOK0InMeetingVirtualBackgroundSettings) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupSettingsOK0InMeetingVirtualBackgroundSettings to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupSettingsOK0InMeetingVirtualBackgroundSettings) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupSettingsOK0InMeetingVirtualBackgroundSettings) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupSettingsOK0InMeetingWebinarChat as json.
func (o OptGetGroupSettingsOK0InMeetingWebinarChat) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupSettingsOK0InMeetingWebinarChat from json.
func (o *OptGetGroupSettingsOK0InMeetingWebinarChat) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupSettingsOK0InMeetingWebinarChat to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupSettingsOK0InMeetingWebinarChat) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupSettingsOK0InMeetingWebinarChat) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupSettingsOK0InMeetingWebinarLiveStreaming as json.
func (o OptGetGroupSettingsOK0InMeetingWebinarLiveStreaming) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupSettingsOK0InMeetingWebinarLiveStreaming from json.
func (o *OptGetGroupSettingsOK0InMeetingWebinarLiveStreaming) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupSettingsOK0InMeetingWebinarLiveStreaming to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupSettingsOK0InMeetingWebinarLiveStreaming) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupSettingsOK0InMeetingWebinarLiveStreaming) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupSettingsOK0InMeetingWebinarPolling as json.
func (o OptGetGroupSettingsOK0InMeetingWebinarPolling) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupSettingsOK0InMeetingWebinarPolling from json.
func (o *OptGetGroupSettingsOK0InMeetingWebinarPolling) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupSettingsOK0InMeetingWebinarPolling to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupSettingsOK0InMeetingWebinarPolling) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupSettingsOK0InMeetingWebinarPolling) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupSettingsOK0OtherOptions as json.
func (o OptGetGroupSettingsOK0OtherOptions) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupSettingsOK0OtherOptions from json.
func (o *OptGetGroupSettingsOK0OtherOptions) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupSettingsOK0OtherOptions to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupSettingsOK0OtherOptions) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupSettingsOK0OtherOptions) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupSettingsOK0OtherOptionsWebinarRegistrationOptions as json.
func (o OptGetGroupSettingsOK0OtherOptionsWebinarRegistrationOptions) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupSettingsOK0OtherOptionsWebinarRegistrationOptions from json.
func (o *OptGetGroupSettingsOK0OtherOptionsWebinarRegistrationOptions) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupSettingsOK0OtherOptionsWebinarRegistrationOptions to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupSettingsOK0OtherOptionsWebinarRegistrationOptions) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupSettingsOK0OtherOptionsWebinarRegistrationOptions) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupSettingsOK0Profile as json.
func (o OptGetGroupSettingsOK0Profile) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupSettingsOK0Profile from json.
func (o *OptGetGroupSettingsOK0Profile) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupSettingsOK0Profile to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupSettingsOK0Profile) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupSettingsOK0Profile) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupSettingsOK0ProfileRecordingStorageLocation as json.
func (o OptGetGroupSettingsOK0ProfileRecordingStorageLocation) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupSettingsOK0ProfileRecordingStorageLocation from json.
func (o *OptGetGroupSettingsOK0ProfileRecordingStorageLocation) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupSettingsOK0ProfileRecordingStorageLocation to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupSettingsOK0ProfileRecordingStorageLocation) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupSettingsOK0ProfileRecordingStorageLocation) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupSettingsOK0Recording as json.
func (o OptGetGroupSettingsOK0Recording) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupSettingsOK0Recording from json.
func (o *OptGetGroupSettingsOK0Recording) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupSettingsOK0Recording to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupSettingsOK0Recording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupSettingsOK0Recording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupSettingsOK0RecordingArchive as json.
func (o OptGetGroupSettingsOK0RecordingArchive) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupSettingsOK0RecordingArchive from json.
func (o *OptGetGroupSettingsOK0RecordingArchive) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupSettingsOK0RecordingArchive to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupSettingsOK0RecordingArchive) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupSettingsOK0RecordingArchive) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupSettingsOK0RecordingArchiveSettings as json.
func (o OptGetGroupSettingsOK0RecordingArchiveSettings) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupSettingsOK0RecordingArchiveSettings from json.
func (o *OptGetGroupSettingsOK0RecordingArchiveSettings) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupSettingsOK0RecordingArchiveSettings to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupSettingsOK0RecordingArchiveSettings) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupSettingsOK0RecordingArchiveSettings) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupSettingsOK0RecordingIPAddressAccessControl as json.
func (o OptGetGroupSettingsOK0RecordingIPAddressAccessControl) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupSettingsOK0RecordingIPAddressAccessControl from json.
func (o *OptGetGroupSettingsOK0RecordingIPAddressAccessControl) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupSettingsOK0RecordingIPAddressAccessControl to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupSettingsOK0RecordingIPAddressAccessControl) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupSettingsOK0RecordingIPAddressAccessControl) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupSettingsOK0RecordingRecordFilesSeparately as json.
func (o OptGetGroupSettingsOK0RecordingRecordFilesSeparately) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupSettingsOK0RecordingRecordFilesSeparately from json.
func (o *OptGetGroupSettingsOK0RecordingRecordFilesSeparately) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupSettingsOK0RecordingRecordFilesSeparately to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupSettingsOK0RecordingRecordFilesSeparately) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupSettingsOK0RecordingRecordFilesSeparately) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupSettingsOK0RecordingSmartRecording as json.
func (o OptGetGroupSettingsOK0RecordingSmartRecording) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupSettingsOK0RecordingSmartRecording from json.
func (o *OptGetGroupSettingsOK0RecordingSmartRecording) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupSettingsOK0RecordingSmartRecording to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupSettingsOK0RecordingSmartRecording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupSettingsOK0RecordingSmartRecording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupSettingsOK0ScheduleMeeting as json.
func (o OptGetGroupSettingsOK0ScheduleMeeting) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupSettingsOK0ScheduleMeeting from json.
func (o *OptGetGroupSettingsOK0ScheduleMeeting) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupSettingsOK0ScheduleMeeting to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupSettingsOK0ScheduleMeeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupSettingsOK0ScheduleMeeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic as json.
func (o OptGetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic from json.
func (o *OptGetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic as json.
func (o OptGetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic from json.
func (o *OptGetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupSettingsOK0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupSettingsOK0ScheduleMeetingContinuousMeetingChat as json.
func (o OptGetGroupSettingsOK0ScheduleMeetingContinuousMeetingChat) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupSettingsOK0ScheduleMeetingContinuousMeetingChat from json.
func (o *OptGetGroupSettingsOK0ScheduleMeetingContinuousMeetingChat) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupSettingsOK0ScheduleMeetingContinuousMeetingChat to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupSettingsOK0ScheduleMeetingContinuousMeetingChat) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupSettingsOK0ScheduleMeetingContinuousMeetingChat) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupSettingsOK0Telephony as json.
func (o OptGetGroupSettingsOK0Telephony) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupSettingsOK0Telephony from json.
func (o *OptGetGroupSettingsOK0Telephony) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupSettingsOK0Telephony to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupSettingsOK0Telephony) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupSettingsOK0Telephony) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupSettingsOK0TelephonyTelephonyRegions as json.
func (o OptGetGroupSettingsOK0TelephonyTelephonyRegions) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupSettingsOK0TelephonyTelephonyRegions from json.
func (o *OptGetGroupSettingsOK0TelephonyTelephonyRegions) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupSettingsOK0TelephonyTelephonyRegions to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupSettingsOK0TelephonyTelephonyRegions) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupSettingsOK0TelephonyTelephonyRegions) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupSettingsOK3MeetingSecurity as json.
func (o OptGetGroupSettingsOK3MeetingSecurity) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupSettingsOK3MeetingSecurity from json.
func (o *OptGetGroupSettingsOK3MeetingSecurity) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupSettingsOK3MeetingSecurity to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupSettingsOK3MeetingSecurity) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupSettingsOK3MeetingSecurity) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupSettingsOK3MeetingSecurityChatEtiquetteTool as json.
func (o OptGetGroupSettingsOK3MeetingSecurityChatEtiquetteTool) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupSettingsOK3MeetingSecurityChatEtiquetteTool from json.
func (o *OptGetGroupSettingsOK3MeetingSecurityChatEtiquetteTool) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupSettingsOK3MeetingSecurityChatEtiquetteTool to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupSettingsOK3MeetingSecurityChatEtiquetteTool) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupSettingsOK3MeetingSecurityChatEtiquetteTool) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement as json.
func (o OptGetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement from json.
func (o *OptGetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupSettingsOK3MeetingSecurityMeetingPasswordRequirement) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetGroupSettingsOK3MeetingSecurityWaitingRoomSettings as json.
func (o OptGetGroupSettingsOK3MeetingSecurityWaitingRoomSettings) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetGroupSettingsOK3MeetingSecurityWaitingRoomSettings from json.
func (o *OptGetGroupSettingsOK3MeetingSecurityWaitingRoomSettings) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetGroupSettingsOK3MeetingSecurityWaitingRoomSettings to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetGroupSettingsOK3MeetingSecurityWaitingRoomSettings) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetGroupSettingsOK3MeetingSecurityWaitingRoomSettings) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetUserMeetingTemplatesOKSettings as json.
func (o OptGetUserMeetingTemplatesOKSettings) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetUserMeetingTemplatesOKSettings from json.
func (o *OptGetUserMeetingTemplatesOKSettings) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetUserMeetingTemplatesOKSettings to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetUserMeetingTemplatesOKSettings) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetUserMeetingTemplatesOKSettings) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetUserMeetingTemplatesOKSettingsInMeeting as json.
func (o OptGetUserMeetingTemplatesOKSettingsInMeeting) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetUserMeetingTemplatesOKSettingsInMeeting from json.
func (o *OptGetUserMeetingTemplatesOKSettingsInMeeting) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetUserMeetingTemplatesOKSettingsInMeeting to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetUserMeetingTemplatesOKSettingsInMeeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetUserMeetingTemplatesOKSettingsInMeeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetUserMeetingTemplatesOKSettingsInMeetingClosedCaptioning as json.
func (o OptGetUserMeetingTemplatesOKSettingsInMeetingClosedCaptioning) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetUserMeetingTemplatesOKSettingsInMeetingClosedCaptioning from json.
func (o *OptGetUserMeetingTemplatesOKSettingsInMeetingClosedCaptioning) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetUserMeetingTemplatesOKSettingsInMeetingClosedCaptioning to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetUserMeetingTemplatesOKSettingsInMeetingClosedCaptioning) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetUserMeetingTemplatesOKSettingsInMeetingClosedCaptioning) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetUserMeetingTemplatesOKSettingsInMeetingManualCaptioning as json.
func (o OptGetUserMeetingTemplatesOKSettingsInMeetingManualCaptioning) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetUserMeetingTemplatesOKSettingsInMeetingManualCaptioning from json.
func (o *OptGetUserMeetingTemplatesOKSettingsInMeetingManualCaptioning) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetUserMeetingTemplatesOKSettingsInMeetingManualCaptioning to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetUserMeetingTemplatesOKSettingsInMeetingManualCaptioning) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetUserMeetingTemplatesOKSettingsInMeetingManualCaptioning) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetUserMeetingTemplatesOKSettingsMeetingSecurity as json.
func (o OptGetUserMeetingTemplatesOKSettingsMeetingSecurity) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetUserMeetingTemplatesOKSettingsMeetingSecurity from json.
func (o *OptGetUserMeetingTemplatesOKSettingsMeetingSecurity) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetUserMeetingTemplatesOKSettingsMeetingSecurity to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetUserMeetingTemplatesOKSettingsMeetingSecurity) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetUserMeetingTemplatesOKSettingsMeetingSecurity) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetUserMeetingTemplatesOKSettingsRecording as json.
func (o OptGetUserMeetingTemplatesOKSettingsRecording) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetUserMeetingTemplatesOKSettingsRecording from json.
func (o *OptGetUserMeetingTemplatesOKSettingsRecording) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetUserMeetingTemplatesOKSettingsRecording to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetUserMeetingTemplatesOKSettingsRecording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetUserMeetingTemplatesOKSettingsRecording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetUserMeetingTemplatesOKSettingsScheduleMeeting as json.
func (o OptGetUserMeetingTemplatesOKSettingsScheduleMeeting) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetUserMeetingTemplatesOKSettingsScheduleMeeting from json.
func (o *OptGetUserMeetingTemplatesOKSettingsScheduleMeeting) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetUserMeetingTemplatesOKSettingsScheduleMeeting to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetUserMeetingTemplatesOKSettingsScheduleMeeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetUserMeetingTemplatesOKSettingsScheduleMeeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GroupAdminsCreateReq as json.
func (o OptGroupAdminsCreateReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GroupAdminsCreateReq from json.
func (o *OptGroupAdminsCreateReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGroupAdminsCreateReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGroupAdminsCreateReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGroupAdminsCreateReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GroupCreateReq as json.
func (o OptGroupCreateReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GroupCreateReq from json.
func (o *OptGroupCreateReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGroupCreateReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGroupCreateReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGroupCreateReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GroupLockedSettingsReq as json.
func (o OptGroupLockedSettingsReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GroupLockedSettingsReq from json.
func (o *OptGroupLockedSettingsReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGroupLockedSettingsReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGroupLockedSettingsReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGroupLockedSettingsReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GroupLockedSettingsReq0AudioConferencing as json.
func (o OptGroupLockedSettingsReq0AudioConferencing) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GroupLockedSettingsReq0AudioConferencing from json.
func (o *OptGroupLockedSettingsReq0AudioConferencing) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGroupLockedSettingsReq0AudioConferencing to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGroupLockedSettingsReq0AudioConferencing) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGroupLockedSettingsReq0AudioConferencing) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GroupLockedSettingsReq0EmailNotification as json.
func (o OptGroupLockedSettingsReq0EmailNotification) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GroupLockedSettingsReq0EmailNotification from json.
func (o *OptGroupLockedSettingsReq0EmailNotification) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGroupLockedSettingsReq0EmailNotification to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGroupLockedSettingsReq0EmailNotification) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGroupLockedSettingsReq0EmailNotification) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GroupLockedSettingsReq0InMeeting as json.
func (o OptGroupLockedSettingsReq0InMeeting) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GroupLockedSettingsReq0InMeeting from json.
func (o *OptGroupLockedSettingsReq0InMeeting) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGroupLockedSettingsReq0InMeeting to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGroupLockedSettingsReq0InMeeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGroupLockedSettingsReq0InMeeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GroupLockedSettingsReq0OtherOptions as json.
func (o OptGroupLockedSettingsReq0OtherOptions) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GroupLockedSettingsReq0OtherOptions from json.
func (o *OptGroupLockedSettingsReq0OtherOptions) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGroupLockedSettingsReq0OtherOptions to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGroupLockedSettingsReq0OtherOptions) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGroupLockedSettingsReq0OtherOptions) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GroupLockedSettingsReq0Recording as json.
func (o OptGroupLockedSettingsReq0Recording) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GroupLockedSettingsReq0Recording from json.
func (o *OptGroupLockedSettingsReq0Recording) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGroupLockedSettingsReq0Recording to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGroupLockedSettingsReq0Recording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGroupLockedSettingsReq0Recording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GroupLockedSettingsReq0RecordingIPAddressAccessControl as json.
func (o OptGroupLockedSettingsReq0RecordingIPAddressAccessControl) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GroupLockedSettingsReq0RecordingIPAddressAccessControl from json.
func (o *OptGroupLockedSettingsReq0RecordingIPAddressAccessControl) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGroupLockedSettingsReq0RecordingIPAddressAccessControl to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGroupLockedSettingsReq0RecordingIPAddressAccessControl) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGroupLockedSettingsReq0RecordingIPAddressAccessControl) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GroupLockedSettingsReq0ScheduleMeeting as json.
func (o OptGroupLockedSettingsReq0ScheduleMeeting) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GroupLockedSettingsReq0ScheduleMeeting from json.
func (o *OptGroupLockedSettingsReq0ScheduleMeeting) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGroupLockedSettingsReq0ScheduleMeeting to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGroupLockedSettingsReq0ScheduleMeeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGroupLockedSettingsReq0ScheduleMeeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GroupLockedSettingsReq0Telephony as json.
func (o OptGroupLockedSettingsReq0Telephony) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GroupLockedSettingsReq0Telephony from json.
func (o *OptGroupLockedSettingsReq0Telephony) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGroupLockedSettingsReq0Telephony to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGroupLockedSettingsReq0Telephony) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGroupLockedSettingsReq0Telephony) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GroupLockedSettingsReq1MeetingSecurity as json.
func (o OptGroupLockedSettingsReq1MeetingSecurity) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GroupLockedSettingsReq1MeetingSecurity from json.
func (o *OptGroupLockedSettingsReq1MeetingSecurity) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGroupLockedSettingsReq1MeetingSecurity to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGroupLockedSettingsReq1MeetingSecurity) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGroupLockedSettingsReq1MeetingSecurity) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GroupMembersCreateReq as json.
func (o OptGroupMembersCreateReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GroupMembersCreateReq from json.
func (o *OptGroupMembersCreateReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGroupMembersCreateReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGroupMembersCreateReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGroupMembersCreateReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GroupSettingsRegistrationOKOptions as json.
func (o OptGroupSettingsRegistrationOKOptions) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GroupSettingsRegistrationOKOptions from json.
func (o *OptGroupSettingsRegistrationOKOptions) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGroupSettingsRegistrationOKOptions to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGroupSettingsRegistrationOKOptions) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGroupSettingsRegistrationOKOptions) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GroupSettingsRegistrationUpdateReq as json.
func (o OptGroupSettingsRegistrationUpdateReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GroupSettingsRegistrationUpdateReq from json.
func (o *OptGroupSettingsRegistrationUpdateReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGroupSettingsRegistrationUpdateReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGroupSettingsRegistrationUpdateReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGroupSettingsRegistrationUpdateReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GroupSettingsRegistrationUpdateReqOptions as json.
func (o OptGroupSettingsRegistrationUpdateReqOptions) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GroupSettingsRegistrationUpdateReqOptions from json.
func (o *OptGroupSettingsRegistrationUpdateReqOptions) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGroupSettingsRegistrationUpdateReqOptions to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGroupSettingsRegistrationUpdateReqOptions) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGroupSettingsRegistrationUpdateReqOptions) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GroupUpdateReq as json.
func (o OptGroupUpdateReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GroupUpdateReq from json.
func (o *OptGroupUpdateReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGroupUpdateReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGroupUpdateReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGroupUpdateReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int as json.
func (o OptInt) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes int from json.
func (o *OptInt) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptInt to nil")
	}
	o.Set = true
	v, err := d.Int()
	if err != nil {
		return err
	}
	o.Value = int(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptInt) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptInt) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int64 as json.
func (o OptInt64) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int64(int64(o.Value))
}

// Decode decodes int64 from json.
func (o *OptInt64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptInt64 to nil")
	}
	o.Set = true
	v, err := d.Int64()
	if err != nil {
		return err
	}
	o.Value = int64(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptInt64) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptInt64) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes string as json.
func (o OptString) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes string from json.
func (o *OptString) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptString to nil")
	}
	o.Set = true
	v, err := d.Str()
	if err != nil {
		return err
	}
	o.Value = string(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptString) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptString) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateAGroupMemberReq as json.
func (o OptUpdateAGroupMemberReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateAGroupMemberReq from json.
func (o *OptUpdateAGroupMemberReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateAGroupMemberReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateAGroupMemberReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateAGroupMemberReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateGroupSettingsReq as json.
func (o OptUpdateGroupSettingsReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateGroupSettingsReq from json.
func (o *OptUpdateGroupSettingsReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateGroupSettingsReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateGroupSettingsReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateGroupSettingsReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateGroupSettingsReq0AudioConferencing as json.
func (o OptUpdateGroupSettingsReq0AudioConferencing) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateGroupSettingsReq0AudioConferencing from json.
func (o *OptUpdateGroupSettingsReq0AudioConferencing) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateGroupSettingsReq0AudioConferencing to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateGroupSettingsReq0AudioConferencing) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateGroupSettingsReq0AudioConferencing) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCall as json.
func (o OptUpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCall) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCall from json.
func (o *OptUpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCall) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCall to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCall) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCall) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateGroupSettingsReq0Chat as json.
func (o OptUpdateGroupSettingsReq0Chat) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateGroupSettingsReq0Chat from json.
func (o *OptUpdateGroupSettingsReq0Chat) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateGroupSettingsReq0Chat to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateGroupSettingsReq0Chat) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateGroupSettingsReq0Chat) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateGroupSettingsReq0ChatAllowUsersToAddContacts as json.
func (o OptUpdateGroupSettingsReq0ChatAllowUsersToAddContacts) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateGroupSettingsReq0ChatAllowUsersToAddContacts from json.
func (o *OptUpdateGroupSettingsReq0ChatAllowUsersToAddContacts) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateGroupSettingsReq0ChatAllowUsersToAddContacts to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateGroupSettingsReq0ChatAllowUsersToAddContacts) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateGroupSettingsReq0ChatAllowUsersToAddContacts) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateGroupSettingsReq0ChatAllowUsersToChatWithOthers as json.
func (o OptUpdateGroupSettingsReq0ChatAllowUsersToChatWithOthers) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateGroupSettingsReq0ChatAllowUsersToChatWithOthers from json.
func (o *OptUpdateGroupSettingsReq0ChatAllowUsersToChatWithOthers) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateGroupSettingsReq0ChatAllowUsersToChatWithOthers to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateGroupSettingsReq0ChatAllowUsersToChatWithOthers) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateGroupSettingsReq0ChatAllowUsersToChatWithOthers) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateGroupSettingsReq0ChatChatEmojis as json.
func (o OptUpdateGroupSettingsReq0ChatChatEmojis) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateGroupSettingsReq0ChatChatEmojis from json.
func (o *OptUpdateGroupSettingsReq0ChatChatEmojis) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateGroupSettingsReq0ChatChatEmojis to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateGroupSettingsReq0ChatChatEmojis) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateGroupSettingsReq0ChatChatEmojis) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateGroupSettingsReq0ChatChatEtiquetteTool as json.
func (o OptUpdateGroupSettingsReq0ChatChatEtiquetteTool) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateGroupSettingsReq0ChatChatEtiquetteTool from json.
func (o *OptUpdateGroupSettingsReq0ChatChatEtiquetteTool) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateGroupSettingsReq0ChatChatEtiquetteTool to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateGroupSettingsReq0ChatChatEtiquetteTool) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateGroupSettingsReq0ChatChatEtiquetteTool) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateGroupSettingsReq0ChatSearchAndSendAnimatedGIFImages as json.
func (o OptUpdateGroupSettingsReq0ChatSearchAndSendAnimatedGIFImages) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateGroupSettingsReq0ChatSearchAndSendAnimatedGIFImages from json.
func (o *OptUpdateGroupSettingsReq0ChatSearchAndSendAnimatedGIFImages) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateGroupSettingsReq0ChatSearchAndSendAnimatedGIFImages to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateGroupSettingsReq0ChatSearchAndSendAnimatedGIFImages) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateGroupSettingsReq0ChatSearchAndSendAnimatedGIFImages) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateGroupSettingsReq0ChatSendDataToThirdPartyArchivingService as json.
func (o OptUpdateGroupSettingsReq0ChatSendDataToThirdPartyArchivingService) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateGroupSettingsReq0ChatSendDataToThirdPartyArchivingService from json.
func (o *OptUpdateGroupSettingsReq0ChatSendDataToThirdPartyArchivingService) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateGroupSettingsReq0ChatSendDataToThirdPartyArchivingService to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateGroupSettingsReq0ChatSendDataToThirdPartyArchivingService) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateGroupSettingsReq0ChatSendDataToThirdPartyArchivingService) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateGroupSettingsReq0ChatSetRetentionPeriodInCloud as json.
func (o OptUpdateGroupSettingsReq0ChatSetRetentionPeriodInCloud) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateGroupSettingsReq0ChatSetRetentionPeriodInCloud from json.
func (o *OptUpdateGroupSettingsReq0ChatSetRetentionPeriodInCloud) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateGroupSettingsReq0ChatSetRetentionPeriodInCloud to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateGroupSettingsReq0ChatSetRetentionPeriodInCloud) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateGroupSettingsReq0ChatSetRetentionPeriodInCloud) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateGroupSettingsReq0ChatSetRetentionPeriodInLocal as json.
func (o OptUpdateGroupSettingsReq0ChatSetRetentionPeriodInLocal) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateGroupSettingsReq0ChatSetRetentionPeriodInLocal from json.
func (o *OptUpdateGroupSettingsReq0ChatSetRetentionPeriodInLocal) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateGroupSettingsReq0ChatSetRetentionPeriodInLocal to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateGroupSettingsReq0ChatSetRetentionPeriodInLocal) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateGroupSettingsReq0ChatSetRetentionPeriodInLocal) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateGroupSettingsReq0ChatShareFiles as json.
func (o OptUpdateGroupSettingsReq0ChatShareFiles) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateGroupSettingsReq0ChatShareFiles from json.
func (o *OptUpdateGroupSettingsReq0ChatShareFiles) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateGroupSettingsReq0ChatShareFiles to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateGroupSettingsReq0ChatShareFiles) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateGroupSettingsReq0ChatShareFiles) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateGroupSettingsReq0EmailNotification as json.
func (o OptUpdateGroupSettingsReq0EmailNotification) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateGroupSettingsReq0EmailNotification from json.
func (o *OptUpdateGroupSettingsReq0EmailNotification) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateGroupSettingsReq0EmailNotification to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateGroupSettingsReq0EmailNotification) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateGroupSettingsReq0EmailNotification) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateGroupSettingsReq0InMeeting as json.
func (o OptUpdateGroupSettingsReq0InMeeting) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateGroupSettingsReq0InMeeting from json.
func (o *OptUpdateGroupSettingsReq0InMeeting) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateGroupSettingsReq0InMeeting to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateGroupSettingsReq0InMeeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateGroupSettingsReq0InMeeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslation as json.
func (o OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslation) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslation from json.
func (o *OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslation) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslation to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslation) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslation) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairList as json.
func (o OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairList) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairList from json.
func (o *OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairList) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairList to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairList) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairList) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage as json.
func (o OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage from json.
func (o *OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo as json.
func (o OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo from json.
func (o *OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateGroupSettingsReq0InMeetingClosedCaptioning as json.
func (o OptUpdateGroupSettingsReq0InMeetingClosedCaptioning) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateGroupSettingsReq0InMeetingClosedCaptioning from json.
func (o *OptUpdateGroupSettingsReq0InMeetingClosedCaptioning) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateGroupSettingsReq0InMeetingClosedCaptioning to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateGroupSettingsReq0InMeetingClosedCaptioning) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateGroupSettingsReq0InMeetingClosedCaptioning) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateGroupSettingsReq0InMeetingLanguageInterpretation as json.
func (o OptUpdateGroupSettingsReq0InMeetingLanguageInterpretation) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateGroupSettingsReq0InMeetingLanguageInterpretation from json.
func (o *OptUpdateGroupSettingsReq0InMeetingLanguageInterpretation) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateGroupSettingsReq0InMeetingLanguageInterpretation to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateGroupSettingsReq0InMeetingLanguageInterpretation) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateGroupSettingsReq0InMeetingLanguageInterpretation) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateGroupSettingsReq0InMeetingManualCaptioning as json.
func (o OptUpdateGroupSettingsReq0InMeetingManualCaptioning) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateGroupSettingsReq0InMeetingManualCaptioning from json.
func (o *OptUpdateGroupSettingsReq0InMeetingManualCaptioning) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateGroupSettingsReq0InMeetingManualCaptioning to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateGroupSettingsReq0InMeetingManualCaptioning) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateGroupSettingsReq0InMeetingManualCaptioning) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateGroupSettingsReq0InMeetingMeetingPolling as json.
func (o OptUpdateGroupSettingsReq0InMeetingMeetingPolling) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateGroupSettingsReq0InMeetingMeetingPolling from json.
func (o *OptUpdateGroupSettingsReq0InMeetingMeetingPolling) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateGroupSettingsReq0InMeetingMeetingPolling to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateGroupSettingsReq0InMeetingMeetingPolling) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateGroupSettingsReq0InMeetingMeetingPolling) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateGroupSettingsReq0InMeetingSignLanguageInterpretation as json.
func (o OptUpdateGroupSettingsReq0InMeetingSignLanguageInterpretation) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateGroupSettingsReq0InMeetingSignLanguageInterpretation from json.
func (o *OptUpdateGroupSettingsReq0InMeetingSignLanguageInterpretation) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateGroupSettingsReq0InMeetingSignLanguageInterpretation to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateGroupSettingsReq0InMeetingSignLanguageInterpretation) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateGroupSettingsReq0InMeetingSignLanguageInterpretation) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateGroupSettingsReq0InMeetingWebinarChat as json.
func (o OptUpdateGroupSettingsReq0InMeetingWebinarChat) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateGroupSettingsReq0InMeetingWebinarChat from json.
func (o *OptUpdateGroupSettingsReq0InMeetingWebinarChat) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateGroupSettingsReq0InMeetingWebinarChat to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateGroupSettingsReq0InMeetingWebinarChat) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateGroupSettingsReq0InMeetingWebinarChat) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateGroupSettingsReq0InMeetingWebinarLiveStreaming as json.
func (o OptUpdateGroupSettingsReq0InMeetingWebinarLiveStreaming) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateGroupSettingsReq0InMeetingWebinarLiveStreaming from json.
func (o *OptUpdateGroupSettingsReq0InMeetingWebinarLiveStreaming) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateGroupSettingsReq0InMeetingWebinarLiveStreaming to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateGroupSettingsReq0InMeetingWebinarLiveStreaming) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateGroupSettingsReq0InMeetingWebinarLiveStreaming) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateGroupSettingsReq0InMeetingWebinarPolling as json.
func (o OptUpdateGroupSettingsReq0InMeetingWebinarPolling) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateGroupSettingsReq0InMeetingWebinarPolling from json.
func (o *OptUpdateGroupSettingsReq0InMeetingWebinarPolling) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateGroupSettingsReq0InMeetingWebinarPolling to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateGroupSettingsReq0InMeetingWebinarPolling) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateGroupSettingsReq0InMeetingWebinarPolling) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateGroupSettingsReq0OtherOptions as json.
func (o OptUpdateGroupSettingsReq0OtherOptions) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateGroupSettingsReq0OtherOptions from json.
func (o *OptUpdateGroupSettingsReq0OtherOptions) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateGroupSettingsReq0OtherOptions to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateGroupSettingsReq0OtherOptions) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateGroupSettingsReq0OtherOptions) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateGroupSettingsReq0OtherOptionsWebinarRegistrationOptions as json.
func (o OptUpdateGroupSettingsReq0OtherOptionsWebinarRegistrationOptions) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateGroupSettingsReq0OtherOptionsWebinarRegistrationOptions from json.
func (o *OptUpdateGroupSettingsReq0OtherOptionsWebinarRegistrationOptions) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateGroupSettingsReq0OtherOptionsWebinarRegistrationOptions to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateGroupSettingsReq0OtherOptionsWebinarRegistrationOptions) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateGroupSettingsReq0OtherOptionsWebinarRegistrationOptions) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateGroupSettingsReq0Profile as json.
func (o OptUpdateGroupSettingsReq0Profile) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateGroupSettingsReq0Profile from json.
func (o *OptUpdateGroupSettingsReq0Profile) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateGroupSettingsReq0Profile to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateGroupSettingsReq0Profile) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateGroupSettingsReq0Profile) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateGroupSettingsReq0ProfileRecordingStorageLocation as json.
func (o OptUpdateGroupSettingsReq0ProfileRecordingStorageLocation) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateGroupSettingsReq0ProfileRecordingStorageLocation from json.
func (o *OptUpdateGroupSettingsReq0ProfileRecordingStorageLocation) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateGroupSettingsReq0ProfileRecordingStorageLocation to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateGroupSettingsReq0ProfileRecordingStorageLocation) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateGroupSettingsReq0ProfileRecordingStorageLocation) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateGroupSettingsReq0Recording as json.
func (o OptUpdateGroupSettingsReq0Recording) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateGroupSettingsReq0Recording from json.
func (o *OptUpdateGroupSettingsReq0Recording) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateGroupSettingsReq0Recording to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateGroupSettingsReq0Recording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateGroupSettingsReq0Recording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateGroupSettingsReq0RecordingArchive as json.
func (o OptUpdateGroupSettingsReq0RecordingArchive) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateGroupSettingsReq0RecordingArchive from json.
func (o *OptUpdateGroupSettingsReq0RecordingArchive) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateGroupSettingsReq0RecordingArchive to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateGroupSettingsReq0RecordingArchive) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateGroupSettingsReq0RecordingArchive) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateGroupSettingsReq0RecordingArchiveSettings as json.
func (o OptUpdateGroupSettingsReq0RecordingArchiveSettings) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateGroupSettingsReq0RecordingArchiveSettings from json.
func (o *OptUpdateGroupSettingsReq0RecordingArchiveSettings) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateGroupSettingsReq0RecordingArchiveSettings to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateGroupSettingsReq0RecordingArchiveSettings) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateGroupSettingsReq0RecordingArchiveSettings) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateGroupSettingsReq0RecordingIPAddressAccessControl as json.
func (o OptUpdateGroupSettingsReq0RecordingIPAddressAccessControl) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateGroupSettingsReq0RecordingIPAddressAccessControl from json.
func (o *OptUpdateGroupSettingsReq0RecordingIPAddressAccessControl) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateGroupSettingsReq0RecordingIPAddressAccessControl to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateGroupSettingsReq0RecordingIPAddressAccessControl) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateGroupSettingsReq0RecordingIPAddressAccessControl) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateGroupSettingsReq0RecordingRecordFilesSeparately as json.
func (o OptUpdateGroupSettingsReq0RecordingRecordFilesSeparately) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateGroupSettingsReq0RecordingRecordFilesSeparately from json.
func (o *OptUpdateGroupSettingsReq0RecordingRecordFilesSeparately) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateGroupSettingsReq0RecordingRecordFilesSeparately to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateGroupSettingsReq0RecordingRecordFilesSeparately) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateGroupSettingsReq0RecordingRecordFilesSeparately) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateGroupSettingsReq0RecordingSmartRecording as json.
func (o OptUpdateGroupSettingsReq0RecordingSmartRecording) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateGroupSettingsReq0RecordingSmartRecording from json.
func (o *OptUpdateGroupSettingsReq0RecordingSmartRecording) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateGroupSettingsReq0RecordingSmartRecording to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateGroupSettingsReq0RecordingSmartRecording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateGroupSettingsReq0RecordingSmartRecording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateGroupSettingsReq0ScheduleMeeting as json.
func (o OptUpdateGroupSettingsReq0ScheduleMeeting) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateGroupSettingsReq0ScheduleMeeting from json.
func (o *OptUpdateGroupSettingsReq0ScheduleMeeting) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateGroupSettingsReq0ScheduleMeeting to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateGroupSettingsReq0ScheduleMeeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateGroupSettingsReq0ScheduleMeeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic as json.
func (o OptUpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic from json.
func (o *OptUpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic as json.
func (o OptUpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic from json.
func (o *OptUpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateGroupSettingsReq0ScheduleMeetingContinuousMeetingChat as json.
func (o OptUpdateGroupSettingsReq0ScheduleMeetingContinuousMeetingChat) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateGroupSettingsReq0ScheduleMeetingContinuousMeetingChat from json.
func (o *OptUpdateGroupSettingsReq0ScheduleMeetingContinuousMeetingChat) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateGroupSettingsReq0ScheduleMeetingContinuousMeetingChat to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateGroupSettingsReq0ScheduleMeetingContinuousMeetingChat) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateGroupSettingsReq0ScheduleMeetingContinuousMeetingChat) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateGroupSettingsReq0Telephony as json.
func (o OptUpdateGroupSettingsReq0Telephony) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateGroupSettingsReq0Telephony from json.
func (o *OptUpdateGroupSettingsReq0Telephony) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateGroupSettingsReq0Telephony to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateGroupSettingsReq0Telephony) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateGroupSettingsReq0Telephony) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateGroupSettingsReq1AuthenticationOption as json.
func (o OptUpdateGroupSettingsReq1AuthenticationOption) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateGroupSettingsReq1AuthenticationOption from json.
func (o *OptUpdateGroupSettingsReq1AuthenticationOption) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateGroupSettingsReq1AuthenticationOption to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateGroupSettingsReq1AuthenticationOption) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateGroupSettingsReq1AuthenticationOption) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateGroupSettingsReq2AuthenticationOption as json.
func (o OptUpdateGroupSettingsReq2AuthenticationOption) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateGroupSettingsReq2AuthenticationOption from json.
func (o *OptUpdateGroupSettingsReq2AuthenticationOption) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateGroupSettingsReq2AuthenticationOption to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateGroupSettingsReq2AuthenticationOption) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateGroupSettingsReq2AuthenticationOption) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateGroupSettingsReq3MeetingSecurity as json.
func (o OptUpdateGroupSettingsReq3MeetingSecurity) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateGroupSettingsReq3MeetingSecurity from json.
func (o *OptUpdateGroupSettingsReq3MeetingSecurity) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateGroupSettingsReq3MeetingSecurity to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateGroupSettingsReq3MeetingSecurity) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateGroupSettingsReq3MeetingSecurity) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateGroupSettingsReq3MeetingSecurityChatEtiquetteTool as json.
func (o OptUpdateGroupSettingsReq3MeetingSecurityChatEtiquetteTool) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateGroupSettingsReq3MeetingSecurityChatEtiquetteTool from json.
func (o *OptUpdateGroupSettingsReq3MeetingSecurityChatEtiquetteTool) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateGroupSettingsReq3MeetingSecurityChatEtiquetteTool to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateGroupSettingsReq3MeetingSecurityChatEtiquetteTool) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateGroupSettingsReq3MeetingSecurityChatEtiquetteTool) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement as json.
func (o OptUpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement from json.
func (o *OptUpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateGroupSettingsReq3MeetingSecurityWaitingRoomSettings as json.
func (o OptUpdateGroupSettingsReq3MeetingSecurityWaitingRoomSettings) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateGroupSettingsReq3MeetingSecurityWaitingRoomSettings from json.
func (o *OptUpdateGroupSettingsReq3MeetingSecurityWaitingRoomSettings) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdateGroupSettingsReq3MeetingSecurityWaitingRoomSettings to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdateGroupSettingsReq3MeetingSecurityWaitingRoomSettings) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdateGroupSettingsReq3MeetingSecurityWaitingRoomSettings) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdatePresenceStatusReq as json.
func (o OptUpdatePresenceStatusReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdatePresenceStatusReq from json.
func (o *OptUpdatePresenceStatusReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUpdatePresenceStatusReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUpdatePresenceStatusReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUpdatePresenceStatusReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserAssistantCreateReq as json.
func (o OptUserAssistantCreateReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserAssistantCreateReq from json.
func (o *OptUserAssistantCreateReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserAssistantCreateReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserAssistantCreateReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserAssistantCreateReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserCreateReq as json.
func (o OptUserCreateReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserCreateReq from json.
func (o *OptUserCreateReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserCreateReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserCreateReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserCreateReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserCreateReqUserInfo as json.
func (o OptUserCreateReqUserInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserCreateReqUserInfo from json.
func (o *OptUserCreateReqUserInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserCreateReqUserInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserCreateReqUserInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserCreateReqUserInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserCreateReqUserInfoFeature as json.
func (o OptUserCreateReqUserInfoFeature) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserCreateReqUserInfoFeature from json.
func (o *OptUserCreateReqUserInfoFeature) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserCreateReqUserInfoFeature to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserCreateReqUserInfoFeature) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserCreateReqUserInfoFeature) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserEmailUpdateReq as json.
func (o OptUserEmailUpdateReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserEmailUpdateReq from json.
func (o *OptUserEmailUpdateReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserEmailUpdateReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserEmailUpdateReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserEmailUpdateReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserPasswordReq as json.
func (o OptUserPasswordReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserPasswordReq from json.
func (o *OptUserPasswordReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserPasswordReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserPasswordReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserPasswordReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsOK0AudioConferencing as json.
func (o OptUserSettingsOK0AudioConferencing) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsOK0AudioConferencing from json.
func (o *OptUserSettingsOK0AudioConferencing) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsOK0AudioConferencing to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsOK0AudioConferencing) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsOK0AudioConferencing) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall as json.
func (o OptUserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall from json.
func (o *OptUserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsOK0EmailNotification as json.
func (o OptUserSettingsOK0EmailNotification) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsOK0EmailNotification from json.
func (o *OptUserSettingsOK0EmailNotification) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsOK0EmailNotification to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsOK0EmailNotification) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsOK0EmailNotification) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsOK0Feature as json.
func (o OptUserSettingsOK0Feature) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsOK0Feature from json.
func (o *OptUserSettingsOK0Feature) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsOK0Feature to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsOK0Feature) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsOK0Feature) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsOK0InMeeting as json.
func (o OptUserSettingsOK0InMeeting) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsOK0InMeeting from json.
func (o *OptUserSettingsOK0InMeeting) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsOK0InMeeting to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsOK0InMeeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsOK0InMeeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsOK0InMeetingClosedCaptioning as json.
func (o OptUserSettingsOK0InMeetingClosedCaptioning) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsOK0InMeetingClosedCaptioning from json.
func (o *OptUserSettingsOK0InMeetingClosedCaptioning) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsOK0InMeetingClosedCaptioning to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsOK0InMeetingClosedCaptioning) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsOK0InMeetingClosedCaptioning) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsOK0InMeetingLanguageInterpretation as json.
func (o OptUserSettingsOK0InMeetingLanguageInterpretation) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsOK0InMeetingLanguageInterpretation from json.
func (o *OptUserSettingsOK0InMeetingLanguageInterpretation) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsOK0InMeetingLanguageInterpretation to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsOK0InMeetingLanguageInterpretation) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsOK0InMeetingLanguageInterpretation) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsOK0InMeetingManualCaptioning as json.
func (o OptUserSettingsOK0InMeetingManualCaptioning) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsOK0InMeetingManualCaptioning from json.
func (o *OptUserSettingsOK0InMeetingManualCaptioning) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsOK0InMeetingManualCaptioning to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsOK0InMeetingManualCaptioning) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsOK0InMeetingManualCaptioning) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsOK0InMeetingMeetingPolling as json.
func (o OptUserSettingsOK0InMeetingMeetingPolling) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsOK0InMeetingMeetingPolling from json.
func (o *OptUserSettingsOK0InMeetingMeetingPolling) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsOK0InMeetingMeetingPolling to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsOK0InMeetingMeetingPolling) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsOK0InMeetingMeetingPolling) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsOK0InMeetingSignLanguageInterpretation as json.
func (o OptUserSettingsOK0InMeetingSignLanguageInterpretation) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsOK0InMeetingSignLanguageInterpretation from json.
func (o *OptUserSettingsOK0InMeetingSignLanguageInterpretation) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsOK0InMeetingSignLanguageInterpretation to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsOK0InMeetingSignLanguageInterpretation) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsOK0InMeetingSignLanguageInterpretation) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsOK0InMeetingVirtualBackgroundSettings as json.
func (o OptUserSettingsOK0InMeetingVirtualBackgroundSettings) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsOK0InMeetingVirtualBackgroundSettings from json.
func (o *OptUserSettingsOK0InMeetingVirtualBackgroundSettings) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsOK0InMeetingVirtualBackgroundSettings to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsOK0InMeetingVirtualBackgroundSettings) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsOK0InMeetingVirtualBackgroundSettings) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsOK0InMeetingWebinarChat as json.
func (o OptUserSettingsOK0InMeetingWebinarChat) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsOK0InMeetingWebinarChat from json.
func (o *OptUserSettingsOK0InMeetingWebinarChat) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsOK0InMeetingWebinarChat to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsOK0InMeetingWebinarChat) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsOK0InMeetingWebinarChat) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsOK0InMeetingWebinarLiveStreaming as json.
func (o OptUserSettingsOK0InMeetingWebinarLiveStreaming) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsOK0InMeetingWebinarLiveStreaming from json.
func (o *OptUserSettingsOK0InMeetingWebinarLiveStreaming) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsOK0InMeetingWebinarLiveStreaming to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsOK0InMeetingWebinarLiveStreaming) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsOK0InMeetingWebinarLiveStreaming) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsOK0InMeetingWebinarPolling as json.
func (o OptUserSettingsOK0InMeetingWebinarPolling) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsOK0InMeetingWebinarPolling from json.
func (o *OptUserSettingsOK0InMeetingWebinarPolling) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsOK0InMeetingWebinarPolling to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsOK0InMeetingWebinarPolling) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsOK0InMeetingWebinarPolling) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsOK0Profile as json.
func (o OptUserSettingsOK0Profile) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsOK0Profile from json.
func (o *OptUserSettingsOK0Profile) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsOK0Profile to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsOK0Profile) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsOK0Profile) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsOK0ProfileRecordingStorageLocation as json.
func (o OptUserSettingsOK0ProfileRecordingStorageLocation) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsOK0ProfileRecordingStorageLocation from json.
func (o *OptUserSettingsOK0ProfileRecordingStorageLocation) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsOK0ProfileRecordingStorageLocation to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsOK0ProfileRecordingStorageLocation) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsOK0ProfileRecordingStorageLocation) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsOK0Recording as json.
func (o OptUserSettingsOK0Recording) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsOK0Recording from json.
func (o *OptUserSettingsOK0Recording) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsOK0Recording to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsOK0Recording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsOK0Recording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsOK0RecordingIPAddressAccessControl as json.
func (o OptUserSettingsOK0RecordingIPAddressAccessControl) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsOK0RecordingIPAddressAccessControl from json.
func (o *OptUserSettingsOK0RecordingIPAddressAccessControl) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsOK0RecordingIPAddressAccessControl to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsOK0RecordingIPAddressAccessControl) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsOK0RecordingIPAddressAccessControl) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsOK0RecordingRecordFilesSeparately as json.
func (o OptUserSettingsOK0RecordingRecordFilesSeparately) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsOK0RecordingRecordFilesSeparately from json.
func (o *OptUserSettingsOK0RecordingRecordFilesSeparately) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsOK0RecordingRecordFilesSeparately to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsOK0RecordingRecordFilesSeparately) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsOK0RecordingRecordFilesSeparately) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsOK0RecordingRecordingPasswordRequirement as json.
func (o OptUserSettingsOK0RecordingRecordingPasswordRequirement) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsOK0RecordingRecordingPasswordRequirement from json.
func (o *OptUserSettingsOK0RecordingRecordingPasswordRequirement) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsOK0RecordingRecordingPasswordRequirement to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsOK0RecordingRecordingPasswordRequirement) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsOK0RecordingRecordingPasswordRequirement) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsOK0RecordingSmartRecording as json.
func (o OptUserSettingsOK0RecordingSmartRecording) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsOK0RecordingSmartRecording from json.
func (o *OptUserSettingsOK0RecordingSmartRecording) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsOK0RecordingSmartRecording to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsOK0RecordingSmartRecording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsOK0RecordingSmartRecording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsOK0ScheduleMeeting as json.
func (o OptUserSettingsOK0ScheduleMeeting) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsOK0ScheduleMeeting from json.
func (o *OptUserSettingsOK0ScheduleMeeting) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsOK0ScheduleMeeting to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsOK0ScheduleMeeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsOK0ScheduleMeeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsOK0ScheduleMeetingContinuousMeetingChat as json.
func (o OptUserSettingsOK0ScheduleMeetingContinuousMeetingChat) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsOK0ScheduleMeetingContinuousMeetingChat from json.
func (o *OptUserSettingsOK0ScheduleMeetingContinuousMeetingChat) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsOK0ScheduleMeetingContinuousMeetingChat to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsOK0ScheduleMeetingContinuousMeetingChat) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsOK0ScheduleMeetingContinuousMeetingChat) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsOK0ScheduleMeetingMeetingPasswordRequirement as json.
func (o OptUserSettingsOK0ScheduleMeetingMeetingPasswordRequirement) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsOK0ScheduleMeetingMeetingPasswordRequirement from json.
func (o *OptUserSettingsOK0ScheduleMeetingMeetingPasswordRequirement) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsOK0ScheduleMeetingMeetingPasswordRequirement to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsOK0ScheduleMeetingMeetingPasswordRequirement) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsOK0ScheduleMeetingMeetingPasswordRequirement) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsOK0Telephony as json.
func (o OptUserSettingsOK0Telephony) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsOK0Telephony from json.
func (o *OptUserSettingsOK0Telephony) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsOK0Telephony to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsOK0Telephony) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsOK0Telephony) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsOK0TelephonyTelephonyRegions as json.
func (o OptUserSettingsOK0TelephonyTelephonyRegions) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsOK0TelephonyTelephonyRegions from json.
func (o *OptUserSettingsOK0TelephonyTelephonyRegions) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsOK0TelephonyTelephonyRegions to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsOK0TelephonyTelephonyRegions) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsOK0TelephonyTelephonyRegions) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsOK0Tsp as json.
func (o OptUserSettingsOK0Tsp) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsOK0Tsp from json.
func (o *OptUserSettingsOK0Tsp) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsOK0Tsp to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsOK0Tsp) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsOK0Tsp) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsOK0Whiteboard as json.
func (o OptUserSettingsOK0Whiteboard) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsOK0Whiteboard from json.
func (o *OptUserSettingsOK0Whiteboard) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsOK0Whiteboard to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsOK0Whiteboard) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsOK0Whiteboard) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsOK1AuthenticationOptions as json.
func (o OptUserSettingsOK1AuthenticationOptions) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsOK1AuthenticationOptions from json.
func (o *OptUserSettingsOK1AuthenticationOptions) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsOK1AuthenticationOptions to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsOK1AuthenticationOptions) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsOK1AuthenticationOptions) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsOK1AuthenticationOptionsMeetingAuthentication as json.
func (o OptUserSettingsOK1AuthenticationOptionsMeetingAuthentication) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsOK1AuthenticationOptionsMeetingAuthentication from json.
func (o *OptUserSettingsOK1AuthenticationOptionsMeetingAuthentication) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsOK1AuthenticationOptionsMeetingAuthentication to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsOK1AuthenticationOptionsMeetingAuthentication) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsOK1AuthenticationOptionsMeetingAuthentication) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsOK1AuthenticationOptionsRecordingAuthentication as json.
func (o OptUserSettingsOK1AuthenticationOptionsRecordingAuthentication) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsOK1AuthenticationOptionsRecordingAuthentication from json.
func (o *OptUserSettingsOK1AuthenticationOptionsRecordingAuthentication) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsOK1AuthenticationOptionsRecordingAuthentication to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsOK1AuthenticationOptionsRecordingAuthentication) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsOK1AuthenticationOptionsRecordingAuthentication) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsOK4MeetingSecurity as json.
func (o OptUserSettingsOK4MeetingSecurity) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsOK4MeetingSecurity from json.
func (o *OptUserSettingsOK4MeetingSecurity) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsOK4MeetingSecurity to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsOK4MeetingSecurity) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsOK4MeetingSecurity) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsOK4MeetingSecurityMeetingPasswordRequirement as json.
func (o OptUserSettingsOK4MeetingSecurityMeetingPasswordRequirement) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsOK4MeetingSecurityMeetingPasswordRequirement from json.
func (o *OptUserSettingsOK4MeetingSecurityMeetingPasswordRequirement) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsOK4MeetingSecurityMeetingPasswordRequirement to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsOK4MeetingSecurityMeetingPasswordRequirement) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsOK4MeetingSecurityMeetingPasswordRequirement) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsOK4MeetingSecurityWaitingRoomSettings as json.
func (o OptUserSettingsOK4MeetingSecurityWaitingRoomSettings) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsOK4MeetingSecurityWaitingRoomSettings from json.
func (o *OptUserSettingsOK4MeetingSecurityWaitingRoomSettings) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsOK4MeetingSecurityWaitingRoomSettings to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsOK4MeetingSecurityWaitingRoomSettings) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsOK4MeetingSecurityWaitingRoomSettings) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsUpdateReq as json.
func (o OptUserSettingsUpdateReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsUpdateReq from json.
func (o *OptUserSettingsUpdateReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsUpdateReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsUpdateReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsUpdateReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsUpdateReq0EmailNotification as json.
func (o OptUserSettingsUpdateReq0EmailNotification) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsUpdateReq0EmailNotification from json.
func (o *OptUserSettingsUpdateReq0EmailNotification) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsUpdateReq0EmailNotification to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsUpdateReq0EmailNotification) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsUpdateReq0EmailNotification) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsUpdateReq0Feature as json.
func (o OptUserSettingsUpdateReq0Feature) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsUpdateReq0Feature from json.
func (o *OptUserSettingsUpdateReq0Feature) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsUpdateReq0Feature to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsUpdateReq0Feature) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsUpdateReq0Feature) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsUpdateReq0InMeeting as json.
func (o OptUserSettingsUpdateReq0InMeeting) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsUpdateReq0InMeeting from json.
func (o *OptUserSettingsUpdateReq0InMeeting) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsUpdateReq0InMeeting to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsUpdateReq0InMeeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsUpdateReq0InMeeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsUpdateReq0InMeetingClosedCaptioning as json.
func (o OptUserSettingsUpdateReq0InMeetingClosedCaptioning) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsUpdateReq0InMeetingClosedCaptioning from json.
func (o *OptUserSettingsUpdateReq0InMeetingClosedCaptioning) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsUpdateReq0InMeetingClosedCaptioning to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsUpdateReq0InMeetingClosedCaptioning) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsUpdateReq0InMeetingClosedCaptioning) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsUpdateReq0InMeetingLanguageInterpretation as json.
func (o OptUserSettingsUpdateReq0InMeetingLanguageInterpretation) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsUpdateReq0InMeetingLanguageInterpretation from json.
func (o *OptUserSettingsUpdateReq0InMeetingLanguageInterpretation) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsUpdateReq0InMeetingLanguageInterpretation to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsUpdateReq0InMeetingLanguageInterpretation) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsUpdateReq0InMeetingLanguageInterpretation) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsUpdateReq0InMeetingManualCaptioning as json.
func (o OptUserSettingsUpdateReq0InMeetingManualCaptioning) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsUpdateReq0InMeetingManualCaptioning from json.
func (o *OptUserSettingsUpdateReq0InMeetingManualCaptioning) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsUpdateReq0InMeetingManualCaptioning to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsUpdateReq0InMeetingManualCaptioning) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsUpdateReq0InMeetingManualCaptioning) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsUpdateReq0InMeetingMeetingPolling as json.
func (o OptUserSettingsUpdateReq0InMeetingMeetingPolling) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsUpdateReq0InMeetingMeetingPolling from json.
func (o *OptUserSettingsUpdateReq0InMeetingMeetingPolling) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsUpdateReq0InMeetingMeetingPolling to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsUpdateReq0InMeetingMeetingPolling) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsUpdateReq0InMeetingMeetingPolling) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsUpdateReq0InMeetingSignLanguageInterpretation as json.
func (o OptUserSettingsUpdateReq0InMeetingSignLanguageInterpretation) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsUpdateReq0InMeetingSignLanguageInterpretation from json.
func (o *OptUserSettingsUpdateReq0InMeetingSignLanguageInterpretation) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsUpdateReq0InMeetingSignLanguageInterpretation to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsUpdateReq0InMeetingSignLanguageInterpretation) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsUpdateReq0InMeetingSignLanguageInterpretation) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsUpdateReq0InMeetingVirtualBackgroundSettings as json.
func (o OptUserSettingsUpdateReq0InMeetingVirtualBackgroundSettings) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsUpdateReq0InMeetingVirtualBackgroundSettings from json.
func (o *OptUserSettingsUpdateReq0InMeetingVirtualBackgroundSettings) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsUpdateReq0InMeetingVirtualBackgroundSettings to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsUpdateReq0InMeetingVirtualBackgroundSettings) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsUpdateReq0InMeetingVirtualBackgroundSettings) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsUpdateReq0InMeetingWebinarChat as json.
func (o OptUserSettingsUpdateReq0InMeetingWebinarChat) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsUpdateReq0InMeetingWebinarChat from json.
func (o *OptUserSettingsUpdateReq0InMeetingWebinarChat) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsUpdateReq0InMeetingWebinarChat to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsUpdateReq0InMeetingWebinarChat) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsUpdateReq0InMeetingWebinarChat) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsUpdateReq0InMeetingWebinarLiveStreaming as json.
func (o OptUserSettingsUpdateReq0InMeetingWebinarLiveStreaming) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsUpdateReq0InMeetingWebinarLiveStreaming from json.
func (o *OptUserSettingsUpdateReq0InMeetingWebinarLiveStreaming) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsUpdateReq0InMeetingWebinarLiveStreaming to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsUpdateReq0InMeetingWebinarLiveStreaming) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsUpdateReq0InMeetingWebinarLiveStreaming) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsUpdateReq0InMeetingWebinarPolling as json.
func (o OptUserSettingsUpdateReq0InMeetingWebinarPolling) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsUpdateReq0InMeetingWebinarPolling from json.
func (o *OptUserSettingsUpdateReq0InMeetingWebinarPolling) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsUpdateReq0InMeetingWebinarPolling to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsUpdateReq0InMeetingWebinarPolling) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsUpdateReq0InMeetingWebinarPolling) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsUpdateReq0Profile as json.
func (o OptUserSettingsUpdateReq0Profile) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsUpdateReq0Profile from json.
func (o *OptUserSettingsUpdateReq0Profile) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsUpdateReq0Profile to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsUpdateReq0Profile) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsUpdateReq0Profile) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsUpdateReq0ProfileRecordingStorageLocation as json.
func (o OptUserSettingsUpdateReq0ProfileRecordingStorageLocation) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsUpdateReq0ProfileRecordingStorageLocation from json.
func (o *OptUserSettingsUpdateReq0ProfileRecordingStorageLocation) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsUpdateReq0ProfileRecordingStorageLocation to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsUpdateReq0ProfileRecordingStorageLocation) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsUpdateReq0ProfileRecordingStorageLocation) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsUpdateReq0Recording as json.
func (o OptUserSettingsUpdateReq0Recording) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsUpdateReq0Recording from json.
func (o *OptUserSettingsUpdateReq0Recording) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsUpdateReq0Recording to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsUpdateReq0Recording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsUpdateReq0Recording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsUpdateReq0RecordingIPAddressAccessControl as json.
func (o OptUserSettingsUpdateReq0RecordingIPAddressAccessControl) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsUpdateReq0RecordingIPAddressAccessControl from json.
func (o *OptUserSettingsUpdateReq0RecordingIPAddressAccessControl) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsUpdateReq0RecordingIPAddressAccessControl to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsUpdateReq0RecordingIPAddressAccessControl) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsUpdateReq0RecordingIPAddressAccessControl) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsUpdateReq0RecordingRecordFilesSeparately as json.
func (o OptUserSettingsUpdateReq0RecordingRecordFilesSeparately) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsUpdateReq0RecordingRecordFilesSeparately from json.
func (o *OptUserSettingsUpdateReq0RecordingRecordFilesSeparately) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsUpdateReq0RecordingRecordFilesSeparately to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsUpdateReq0RecordingRecordFilesSeparately) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsUpdateReq0RecordingRecordFilesSeparately) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsUpdateReq0RecordingRecordingPasswordRequirement as json.
func (o OptUserSettingsUpdateReq0RecordingRecordingPasswordRequirement) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsUpdateReq0RecordingRecordingPasswordRequirement from json.
func (o *OptUserSettingsUpdateReq0RecordingRecordingPasswordRequirement) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsUpdateReq0RecordingRecordingPasswordRequirement to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsUpdateReq0RecordingRecordingPasswordRequirement) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsUpdateReq0RecordingRecordingPasswordRequirement) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsUpdateReq0RecordingSmartRecording as json.
func (o OptUserSettingsUpdateReq0RecordingSmartRecording) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsUpdateReq0RecordingSmartRecording from json.
func (o *OptUserSettingsUpdateReq0RecordingSmartRecording) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsUpdateReq0RecordingSmartRecording to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsUpdateReq0RecordingSmartRecording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsUpdateReq0RecordingSmartRecording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsUpdateReq0ScheduleMeeting as json.
func (o OptUserSettingsUpdateReq0ScheduleMeeting) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsUpdateReq0ScheduleMeeting from json.
func (o *OptUserSettingsUpdateReq0ScheduleMeeting) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsUpdateReq0ScheduleMeeting to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsUpdateReq0ScheduleMeeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsUpdateReq0ScheduleMeeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement as json.
func (o OptUserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement from json.
func (o *OptUserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsUpdateReq0Telephony as json.
func (o OptUserSettingsUpdateReq0Telephony) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsUpdateReq0Telephony from json.
func (o *OptUserSettingsUpdateReq0Telephony) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsUpdateReq0Telephony to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsUpdateReq0Telephony) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsUpdateReq0Telephony) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsUpdateReq0TelephonyTelephonyRegions as json.
func (o OptUserSettingsUpdateReq0TelephonyTelephonyRegions) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsUpdateReq0TelephonyTelephonyRegions from json.
func (o *OptUserSettingsUpdateReq0TelephonyTelephonyRegions) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsUpdateReq0TelephonyTelephonyRegions to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsUpdateReq0TelephonyTelephonyRegions) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsUpdateReq0TelephonyTelephonyRegions) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsUpdateReq0Tsp as json.
func (o OptUserSettingsUpdateReq0Tsp) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsUpdateReq0Tsp from json.
func (o *OptUserSettingsUpdateReq0Tsp) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsUpdateReq0Tsp to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsUpdateReq0Tsp) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsUpdateReq0Tsp) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsUpdateReq1AuthenticationOption as json.
func (o OptUserSettingsUpdateReq1AuthenticationOption) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsUpdateReq1AuthenticationOption from json.
func (o *OptUserSettingsUpdateReq1AuthenticationOption) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsUpdateReq1AuthenticationOption to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsUpdateReq1AuthenticationOption) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsUpdateReq1AuthenticationOption) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsUpdateReq2AuthenticationOption as json.
func (o OptUserSettingsUpdateReq2AuthenticationOption) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsUpdateReq2AuthenticationOption from json.
func (o *OptUserSettingsUpdateReq2AuthenticationOption) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsUpdateReq2AuthenticationOption to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsUpdateReq2AuthenticationOption) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsUpdateReq2AuthenticationOption) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsUpdateReq3MeetingSecurity as json.
func (o OptUserSettingsUpdateReq3MeetingSecurity) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsUpdateReq3MeetingSecurity from json.
func (o *OptUserSettingsUpdateReq3MeetingSecurity) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsUpdateReq3MeetingSecurity to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsUpdateReq3MeetingSecurity) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsUpdateReq3MeetingSecurity) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement as json.
func (o OptUserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement from json.
func (o *OptUserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsUpdateReq3MeetingSecurityWaitingRoomSettings as json.
func (o OptUserSettingsUpdateReq3MeetingSecurityWaitingRoomSettings) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserSettingsUpdateReq3MeetingSecurityWaitingRoomSettings from json.
func (o *OptUserSettingsUpdateReq3MeetingSecurityWaitingRoomSettings) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserSettingsUpdateReq3MeetingSecurityWaitingRoomSettings to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserSettingsUpdateReq3MeetingSecurityWaitingRoomSettings) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserSettingsUpdateReq3MeetingSecurityWaitingRoomSettings) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserStatusReq as json.
func (o OptUserStatusReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserStatusReq from json.
func (o *OptUserStatusReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserStatusReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserStatusReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserStatusReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserUpdateReq as json.
func (o OptUserUpdateReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserUpdateReq from json.
func (o *OptUserUpdateReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserUpdateReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserUpdateReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserUpdateReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserUpdateReqFeature as json.
func (o OptUserUpdateReqFeature) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserUpdateReqFeature from json.
func (o *OptUserUpdateReqFeature) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserUpdateReqFeature to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserUpdateReqFeature) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserUpdateReqFeature) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateAGroupMemberReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateAGroupMemberReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("action")
		e.Str(s.Action)
	}
	{
		if s.TargetGroupID.Set {
			e.FieldStart("target_group_id")
			s.TargetGroupID.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateAGroupMemberReq = [2]string{
	0: "action",
	1: "target_group_id",
}

// Decode decodes UpdateAGroupMemberReq from json.
func (s *UpdateAGroupMemberReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateAGroupMemberReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "action":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Action = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"action\"")
			}
		case "target_group_id":
			if err := func() error {
				s.TargetGroupID.Reset()
				if err := s.TargetGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"target_group_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateAGroupMemberReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfUpdateAGroupMemberReq) {
					name = jsonFieldsNameOfUpdateAGroupMemberReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateAGroupMemberReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateAGroupMemberReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsOK) encodeFields(e *jx.Encoder) {
}

var jsonFieldsNameOfUpdateGroupSettingsOK = [0]string{}

// Decode decodes UpdateGroupSettingsOK from json.
func (s *UpdateGroupSettingsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateGroupSettingsReq as json.
func (s UpdateGroupSettingsReq) Encode(e *jx.Encoder) {
	switch s.Type {
	case UpdateGroupSettingsReq0UpdateGroupSettingsReq:
		s.UpdateGroupSettingsReq0.Encode(e)
	case UpdateGroupSettingsReq1UpdateGroupSettingsReq:
		s.UpdateGroupSettingsReq1.Encode(e)
	case UpdateGroupSettingsReq2UpdateGroupSettingsReq:
		s.UpdateGroupSettingsReq2.Encode(e)
	case UpdateGroupSettingsReq3UpdateGroupSettingsReq:
		s.UpdateGroupSettingsReq3.Encode(e)
	}
}

func (s UpdateGroupSettingsReq) encodeFields(e *jx.Encoder) {
	switch s.Type {
	case UpdateGroupSettingsReq0UpdateGroupSettingsReq:
		s.UpdateGroupSettingsReq0.encodeFields(e)
	case UpdateGroupSettingsReq1UpdateGroupSettingsReq:
		s.UpdateGroupSettingsReq1.encodeFields(e)
	case UpdateGroupSettingsReq2UpdateGroupSettingsReq:
		s.UpdateGroupSettingsReq2.encodeFields(e)
	case UpdateGroupSettingsReq3UpdateGroupSettingsReq:
		s.UpdateGroupSettingsReq3.encodeFields(e)
	}
}

// Decode decodes UpdateGroupSettingsReq from json.
func (s *UpdateGroupSettingsReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq to nil")
	}
	// Sum type fields.
	if typ := d.Next(); typ != jx.Object {
		return errors.Errorf("unexpected json type %q", typ)
	}

	var found bool
	if err := d.Capture(func(d *jx.Decoder) error {
		return d.ObjBytes(func(d *jx.Decoder, key []byte) error {
			switch string(key) {
			case "audio_conferencing":
				match := UpdateGroupSettingsReq0UpdateGroupSettingsReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "email_notification":
				match := UpdateGroupSettingsReq0UpdateGroupSettingsReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "in_meeting":
				match := UpdateGroupSettingsReq0UpdateGroupSettingsReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "other_options":
				match := UpdateGroupSettingsReq0UpdateGroupSettingsReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "profile":
				match := UpdateGroupSettingsReq0UpdateGroupSettingsReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "recording":
				match := UpdateGroupSettingsReq0UpdateGroupSettingsReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "schedule_meeting":
				match := UpdateGroupSettingsReq0UpdateGroupSettingsReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "telephony":
				match := UpdateGroupSettingsReq0UpdateGroupSettingsReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "chat":
				match := UpdateGroupSettingsReq0UpdateGroupSettingsReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "meeting_authentication":
				match := UpdateGroupSettingsReq1UpdateGroupSettingsReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "recording_authentication":
				match := UpdateGroupSettingsReq2UpdateGroupSettingsReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "meeting_security":
				match := UpdateGroupSettingsReq3UpdateGroupSettingsReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			}
			return d.Skip()
		})
	}); err != nil {
		return errors.Wrap(err, "capture")
	}
	if !found {
		return errors.New("unable to detect sum type variant")
	}
	switch s.Type {
	case UpdateGroupSettingsReq0UpdateGroupSettingsReq:
		if err := s.UpdateGroupSettingsReq0.Decode(d); err != nil {
			return err
		}
	case UpdateGroupSettingsReq1UpdateGroupSettingsReq:
		if err := s.UpdateGroupSettingsReq1.Decode(d); err != nil {
			return err
		}
	case UpdateGroupSettingsReq2UpdateGroupSettingsReq:
		if err := s.UpdateGroupSettingsReq2.Decode(d); err != nil {
			return err
		}
	case UpdateGroupSettingsReq3UpdateGroupSettingsReq:
		if err := s.UpdateGroupSettingsReq3.Decode(d); err != nil {
			return err
		}
	default:
		return errors.Errorf("inferred invalid type: %s", s.Type)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s UpdateGroupSettingsReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq0) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq0) encodeFields(e *jx.Encoder) {
	{
		if s.AudioConferencing.Set {
			e.FieldStart("audio_conferencing")
			s.AudioConferencing.Encode(e)
		}
	}
	{
		if s.EmailNotification.Set {
			e.FieldStart("email_notification")
			s.EmailNotification.Encode(e)
		}
	}
	{
		if s.InMeeting.Set {
			e.FieldStart("in_meeting")
			s.InMeeting.Encode(e)
		}
	}
	{
		if s.OtherOptions.Set {
			e.FieldStart("other_options")
			s.OtherOptions.Encode(e)
		}
	}
	{
		if s.Profile.Set {
			e.FieldStart("profile")
			s.Profile.Encode(e)
		}
	}
	{
		if s.Recording.Set {
			e.FieldStart("recording")
			s.Recording.Encode(e)
		}
	}
	{
		if s.ScheduleMeeting.Set {
			e.FieldStart("schedule_meeting")
			s.ScheduleMeeting.Encode(e)
		}
	}
	{
		if s.Telephony.Set {
			e.FieldStart("telephony")
			s.Telephony.Encode(e)
		}
	}
	{
		if s.Chat.Set {
			e.FieldStart("chat")
			s.Chat.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq0 = [9]string{
	0: "audio_conferencing",
	1: "email_notification",
	2: "in_meeting",
	3: "other_options",
	4: "profile",
	5: "recording",
	6: "schedule_meeting",
	7: "telephony",
	8: "chat",
}

// Decode decodes UpdateGroupSettingsReq0 from json.
func (s *UpdateGroupSettingsReq0) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq0 to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_conferencing":
			if err := func() error {
				s.AudioConferencing.Reset()
				if err := s.AudioConferencing.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_conferencing\"")
			}
		case "email_notification":
			if err := func() error {
				s.EmailNotification.Reset()
				if err := s.EmailNotification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email_notification\"")
			}
		case "in_meeting":
			if err := func() error {
				s.InMeeting.Reset()
				if err := s.InMeeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"in_meeting\"")
			}
		case "other_options":
			if err := func() error {
				s.OtherOptions.Reset()
				if err := s.OtherOptions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"other_options\"")
			}
		case "profile":
			if err := func() error {
				s.Profile.Reset()
				if err := s.Profile.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"profile\"")
			}
		case "recording":
			if err := func() error {
				s.Recording.Reset()
				if err := s.Recording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording\"")
			}
		case "schedule_meeting":
			if err := func() error {
				s.ScheduleMeeting.Reset()
				if err := s.ScheduleMeeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"schedule_meeting\"")
			}
		case "telephony":
			if err := func() error {
				s.Telephony.Reset()
				if err := s.Telephony.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"telephony\"")
			}
		case "chat":
			if err := func() error {
				s.Chat.Reset()
				if err := s.Chat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"chat\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq0")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq0) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq0) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq0AudioConferencing) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq0AudioConferencing) encodeFields(e *jx.Encoder) {
	{
		if s.TollFreeAndFeeBasedTollCall.Set {
			e.FieldStart("toll_free_and_fee_based_toll_call")
			s.TollFreeAndFeeBasedTollCall.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq0AudioConferencing = [1]string{
	0: "toll_free_and_fee_based_toll_call",
}

// Decode decodes UpdateGroupSettingsReq0AudioConferencing from json.
func (s *UpdateGroupSettingsReq0AudioConferencing) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq0AudioConferencing to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "toll_free_and_fee_based_toll_call":
			if err := func() error {
				s.TollFreeAndFeeBasedTollCall.Reset()
				if err := s.TollFreeAndFeeBasedTollCall.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"toll_free_and_fee_based_toll_call\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq0AudioConferencing")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq0AudioConferencing) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq0AudioConferencing) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCall) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCall) encodeFields(e *jx.Encoder) {
	{
		if s.AllowWebinarAttendeesDial.Set {
			e.FieldStart("allow_webinar_attendees_dial")
			s.AllowWebinarAttendeesDial.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Numbers != nil {
			e.FieldStart("numbers")
			e.ArrStart()
			for _, elem := range s.Numbers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCall = [3]string{
	0: "allow_webinar_attendees_dial",
	1: "enable",
	2: "numbers",
}

// Decode decodes UpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCall from json.
func (s *UpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCall) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCall to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allow_webinar_attendees_dial":
			if err := func() error {
				s.AllowWebinarAttendeesDial.Reset()
				if err := s.AllowWebinarAttendeesDial.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_webinar_attendees_dial\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "numbers":
			if err := func() error {
				s.Numbers = make([]UpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem UpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Numbers = append(s.Numbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"numbers\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCall")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCall) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCall) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem) encodeFields(e *jx.Encoder) {
	{
		if s.Code.Set {
			e.FieldStart("code")
			s.Code.Encode(e)
		}
	}
	{
		if s.CountryCode.Set {
			e.FieldStart("country_code")
			s.CountryCode.Encode(e)
		}
	}
	{
		if s.CountryName.Set {
			e.FieldStart("country_name")
			s.CountryName.Encode(e)
		}
	}
	{
		if s.DisplayNumber.Set {
			e.FieldStart("display_number")
			s.DisplayNumber.Encode(e)
		}
	}
	{
		if s.Number.Set {
			e.FieldStart("number")
			s.Number.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem = [5]string{
	0: "code",
	1: "country_code",
	2: "country_name",
	3: "display_number",
	4: "number",
}

// Decode decodes UpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem from json.
func (s *UpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "code":
			if err := func() error {
				s.Code.Reset()
				if err := s.Code.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code\"")
			}
		case "country_code":
			if err := func() error {
				s.CountryCode.Reset()
				if err := s.CountryCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country_code\"")
			}
		case "country_name":
			if err := func() error {
				s.CountryName.Reset()
				if err := s.CountryName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country_name\"")
			}
		case "display_number":
			if err := func() error {
				s.DisplayNumber.Reset()
				if err := s.DisplayNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_number\"")
			}
		case "number":
			if err := func() error {
				s.Number.Reset()
				if err := s.Number.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq0Chat) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq0Chat) encodeFields(e *jx.Encoder) {
	{
		if s.ShareFiles.Set {
			e.FieldStart("share_files")
			s.ShareFiles.Encode(e)
		}
	}
	{
		if s.ChatEmojis.Set {
			e.FieldStart("chat_emojis")
			s.ChatEmojis.Encode(e)
		}
	}
	{
		if s.RecordVoiceMessages.Set {
			e.FieldStart("record_voice_messages")
			s.RecordVoiceMessages.Encode(e)
		}
	}
	{
		if s.RecordVideoMessages.Set {
			e.FieldStart("record_video_messages")
			s.RecordVideoMessages.Encode(e)
		}
	}
	{
		if s.ScreenCapture.Set {
			e.FieldStart("screen_capture")
			s.ScreenCapture.Encode(e)
		}
	}
	{
		if s.CreatePublicChannels.Set {
			e.FieldStart("create_public_channels")
			s.CreatePublicChannels.Encode(e)
		}
	}
	{
		if s.CreatePrivateChannels.Set {
			e.FieldStart("create_private_channels")
			s.CreatePrivateChannels.Encode(e)
		}
	}
	{
		if s.ShareLinksInChat.Set {
			e.FieldStart("share_links_in_chat")
			s.ShareLinksInChat.Encode(e)
		}
	}
	{
		if s.ScheduleMeetingsInChat.Set {
			e.FieldStart("schedule_meetings_in_chat")
			s.ScheduleMeetingsInChat.Encode(e)
		}
	}
	{
		if s.SetRetentionPeriodInCloud.Set {
			e.FieldStart("set_retention_period_in_cloud")
			s.SetRetentionPeriodInCloud.Encode(e)
		}
	}
	{
		if s.SetRetentionPeriodInLocal.Set {
			e.FieldStart("set_retention_period_in_local")
			s.SetRetentionPeriodInLocal.Encode(e)
		}
	}
	{
		if s.AllowUsersToSearchOthersOptions.Set {
			e.FieldStart("allow_users_to_search_others_options")
			s.AllowUsersToSearchOthersOptions.Encode(e)
		}
	}
	{
		if s.AllowUsersToAddContacts.Set {
			e.FieldStart("allow_users_to_add_contacts")
			s.AllowUsersToAddContacts.Encode(e)
		}
	}
	{
		if s.AllowUsersToChatWithOthers.Set {
			e.FieldStart("allow_users_to_chat_with_others")
			s.AllowUsersToChatWithOthers.Encode(e)
		}
	}
	{
		if s.ChatEtiquetteTool.Set {
			e.FieldStart("chat_etiquette_tool")
			s.ChatEtiquetteTool.Encode(e)
		}
	}
	{
		if s.SendDataToThirdPartyArchivingService.Set {
			e.FieldStart("send_data_to_third_party_archiving_service")
			s.SendDataToThirdPartyArchivingService.Encode(e)
		}
	}
	{
		if s.TranslateMessages.Set {
			e.FieldStart("translate_messages")
			s.TranslateMessages.Encode(e)
		}
	}
	{
		if s.SearchAndSendAnimatedGIFImages.Set {
			e.FieldStart("search_and_send_animated_gif_images")
			s.SearchAndSendAnimatedGIFImages.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq0Chat = [18]string{
	0:  "share_files",
	1:  "chat_emojis",
	2:  "record_voice_messages",
	3:  "record_video_messages",
	4:  "screen_capture",
	5:  "create_public_channels",
	6:  "create_private_channels",
	7:  "share_links_in_chat",
	8:  "schedule_meetings_in_chat",
	9:  "set_retention_period_in_cloud",
	10: "set_retention_period_in_local",
	11: "allow_users_to_search_others_options",
	12: "allow_users_to_add_contacts",
	13: "allow_users_to_chat_with_others",
	14: "chat_etiquette_tool",
	15: "send_data_to_third_party_archiving_service",
	16: "translate_messages",
	17: "search_and_send_animated_gif_images",
}

// Decode decodes UpdateGroupSettingsReq0Chat from json.
func (s *UpdateGroupSettingsReq0Chat) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq0Chat to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "share_files":
			if err := func() error {
				s.ShareFiles.Reset()
				if err := s.ShareFiles.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"share_files\"")
			}
		case "chat_emojis":
			if err := func() error {
				s.ChatEmojis.Reset()
				if err := s.ChatEmojis.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"chat_emojis\"")
			}
		case "record_voice_messages":
			if err := func() error {
				s.RecordVoiceMessages.Reset()
				if err := s.RecordVoiceMessages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"record_voice_messages\"")
			}
		case "record_video_messages":
			if err := func() error {
				s.RecordVideoMessages.Reset()
				if err := s.RecordVideoMessages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"record_video_messages\"")
			}
		case "screen_capture":
			if err := func() error {
				s.ScreenCapture.Reset()
				if err := s.ScreenCapture.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"screen_capture\"")
			}
		case "create_public_channels":
			if err := func() error {
				s.CreatePublicChannels.Reset()
				if err := s.CreatePublicChannels.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"create_public_channels\"")
			}
		case "create_private_channels":
			if err := func() error {
				s.CreatePrivateChannels.Reset()
				if err := s.CreatePrivateChannels.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"create_private_channels\"")
			}
		case "share_links_in_chat":
			if err := func() error {
				s.ShareLinksInChat.Reset()
				if err := s.ShareLinksInChat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"share_links_in_chat\"")
			}
		case "schedule_meetings_in_chat":
			if err := func() error {
				s.ScheduleMeetingsInChat.Reset()
				if err := s.ScheduleMeetingsInChat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"schedule_meetings_in_chat\"")
			}
		case "set_retention_period_in_cloud":
			if err := func() error {
				s.SetRetentionPeriodInCloud.Reset()
				if err := s.SetRetentionPeriodInCloud.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"set_retention_period_in_cloud\"")
			}
		case "set_retention_period_in_local":
			if err := func() error {
				s.SetRetentionPeriodInLocal.Reset()
				if err := s.SetRetentionPeriodInLocal.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"set_retention_period_in_local\"")
			}
		case "allow_users_to_search_others_options":
			if err := func() error {
				s.AllowUsersToSearchOthersOptions.Reset()
				if err := s.AllowUsersToSearchOthersOptions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_users_to_search_others_options\"")
			}
		case "allow_users_to_add_contacts":
			if err := func() error {
				s.AllowUsersToAddContacts.Reset()
				if err := s.AllowUsersToAddContacts.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_users_to_add_contacts\"")
			}
		case "allow_users_to_chat_with_others":
			if err := func() error {
				s.AllowUsersToChatWithOthers.Reset()
				if err := s.AllowUsersToChatWithOthers.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_users_to_chat_with_others\"")
			}
		case "chat_etiquette_tool":
			if err := func() error {
				s.ChatEtiquetteTool.Reset()
				if err := s.ChatEtiquetteTool.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"chat_etiquette_tool\"")
			}
		case "send_data_to_third_party_archiving_service":
			if err := func() error {
				s.SendDataToThirdPartyArchivingService.Reset()
				if err := s.SendDataToThirdPartyArchivingService.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"send_data_to_third_party_archiving_service\"")
			}
		case "translate_messages":
			if err := func() error {
				s.TranslateMessages.Reset()
				if err := s.TranslateMessages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"translate_messages\"")
			}
		case "search_and_send_animated_gif_images":
			if err := func() error {
				s.SearchAndSendAnimatedGIFImages.Reset()
				if err := s.SearchAndSendAnimatedGIFImages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"search_and_send_animated_gif_images\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq0Chat")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq0Chat) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq0Chat) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq0ChatAllowUsersToAddContacts) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq0ChatAllowUsersToAddContacts) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.SelectedOption.Set {
			e.FieldStart("selected_option")
			s.SelectedOption.Encode(e)
		}
	}
	{
		if s.UserEmailAddresses.Set {
			e.FieldStart("user_email_addresses")
			s.UserEmailAddresses.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq0ChatAllowUsersToAddContacts = [3]string{
	0: "enable",
	1: "selected_option",
	2: "user_email_addresses",
}

// Decode decodes UpdateGroupSettingsReq0ChatAllowUsersToAddContacts from json.
func (s *UpdateGroupSettingsReq0ChatAllowUsersToAddContacts) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq0ChatAllowUsersToAddContacts to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "selected_option":
			if err := func() error {
				s.SelectedOption.Reset()
				if err := s.SelectedOption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"selected_option\"")
			}
		case "user_email_addresses":
			if err := func() error {
				s.UserEmailAddresses.Reset()
				if err := s.UserEmailAddresses.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"user_email_addresses\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq0ChatAllowUsersToAddContacts")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq0ChatAllowUsersToAddContacts) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq0ChatAllowUsersToAddContacts) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq0ChatAllowUsersToChatWithOthers) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq0ChatAllowUsersToChatWithOthers) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.SelectedOption.Set {
			e.FieldStart("selected_option")
			s.SelectedOption.Encode(e)
		}
	}
	{
		if s.UserEmailAddresses.Set {
			e.FieldStart("user_email_addresses")
			s.UserEmailAddresses.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq0ChatAllowUsersToChatWithOthers = [3]string{
	0: "enable",
	1: "selected_option",
	2: "user_email_addresses",
}

// Decode decodes UpdateGroupSettingsReq0ChatAllowUsersToChatWithOthers from json.
func (s *UpdateGroupSettingsReq0ChatAllowUsersToChatWithOthers) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq0ChatAllowUsersToChatWithOthers to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "selected_option":
			if err := func() error {
				s.SelectedOption.Reset()
				if err := s.SelectedOption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"selected_option\"")
			}
		case "user_email_addresses":
			if err := func() error {
				s.UserEmailAddresses.Reset()
				if err := s.UserEmailAddresses.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"user_email_addresses\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq0ChatAllowUsersToChatWithOthers")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq0ChatAllowUsersToChatWithOthers) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq0ChatAllowUsersToChatWithOthers) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq0ChatChatEmojis) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq0ChatChatEmojis) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.EmojisOption.Set {
			e.FieldStart("emojis_option")
			s.EmojisOption.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq0ChatChatEmojis = [2]string{
	0: "enable",
	1: "emojis_option",
}

// Decode decodes UpdateGroupSettingsReq0ChatChatEmojis from json.
func (s *UpdateGroupSettingsReq0ChatChatEmojis) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq0ChatChatEmojis to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "emojis_option":
			if err := func() error {
				s.EmojisOption.Reset()
				if err := s.EmojisOption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"emojis_option\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq0ChatChatEmojis")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq0ChatChatEmojis) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq0ChatChatEmojis) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq0ChatChatEtiquetteTool) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq0ChatChatEtiquetteTool) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Policies != nil {
			e.FieldStart("policies")
			e.ArrStart()
			for _, elem := range s.Policies {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq0ChatChatEtiquetteTool = [2]string{
	0: "enable",
	1: "policies",
}

// Decode decodes UpdateGroupSettingsReq0ChatChatEtiquetteTool from json.
func (s *UpdateGroupSettingsReq0ChatChatEtiquetteTool) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq0ChatChatEtiquetteTool to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "policies":
			if err := func() error {
				s.Policies = make([]UpdateGroupSettingsReq0ChatChatEtiquetteToolPoliciesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem UpdateGroupSettingsReq0ChatChatEtiquetteToolPoliciesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Policies = append(s.Policies, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"policies\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq0ChatChatEtiquetteTool")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq0ChatChatEtiquetteTool) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq0ChatChatEtiquetteTool) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq0ChatChatEtiquetteToolPoliciesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq0ChatChatEtiquetteToolPoliciesItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq0ChatChatEtiquetteToolPoliciesItem = [2]string{
	0: "id",
	1: "status",
}

// Decode decodes UpdateGroupSettingsReq0ChatChatEtiquetteToolPoliciesItem from json.
func (s *UpdateGroupSettingsReq0ChatChatEtiquetteToolPoliciesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq0ChatChatEtiquetteToolPoliciesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq0ChatChatEtiquetteToolPoliciesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq0ChatChatEtiquetteToolPoliciesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq0ChatChatEtiquetteToolPoliciesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq0ChatSearchAndSendAnimatedGIFImages) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq0ChatSearchAndSendAnimatedGIFImages) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq0ChatSearchAndSendAnimatedGIFImages = [1]string{
	0: "enable",
}

// Decode decodes UpdateGroupSettingsReq0ChatSearchAndSendAnimatedGIFImages from json.
func (s *UpdateGroupSettingsReq0ChatSearchAndSendAnimatedGIFImages) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq0ChatSearchAndSendAnimatedGIFImages to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq0ChatSearchAndSendAnimatedGIFImages")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq0ChatSearchAndSendAnimatedGIFImages) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq0ChatSearchAndSendAnimatedGIFImages) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq0ChatSendDataToThirdPartyArchivingService) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq0ChatSendDataToThirdPartyArchivingService) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq0ChatSendDataToThirdPartyArchivingService = [1]string{
	0: "enable",
}

// Decode decodes UpdateGroupSettingsReq0ChatSendDataToThirdPartyArchivingService from json.
func (s *UpdateGroupSettingsReq0ChatSendDataToThirdPartyArchivingService) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq0ChatSendDataToThirdPartyArchivingService to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq0ChatSendDataToThirdPartyArchivingService")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq0ChatSendDataToThirdPartyArchivingService) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq0ChatSendDataToThirdPartyArchivingService) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq0ChatSetRetentionPeriodInCloud) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq0ChatSetRetentionPeriodInCloud) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.RetentionPeriodOfDirectMessagesAndGroupConversation.Set {
			e.FieldStart("retention_period_of_direct_messages_and_group_conversation")
			s.RetentionPeriodOfDirectMessagesAndGroupConversation.Encode(e)
		}
	}
	{
		if s.RetentionPeriodOfChannels.Set {
			e.FieldStart("retention_period_of_channels")
			s.RetentionPeriodOfChannels.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq0ChatSetRetentionPeriodInCloud = [3]string{
	0: "enable",
	1: "retention_period_of_direct_messages_and_group_conversation",
	2: "retention_period_of_channels",
}

// Decode decodes UpdateGroupSettingsReq0ChatSetRetentionPeriodInCloud from json.
func (s *UpdateGroupSettingsReq0ChatSetRetentionPeriodInCloud) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq0ChatSetRetentionPeriodInCloud to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "retention_period_of_direct_messages_and_group_conversation":
			if err := func() error {
				s.RetentionPeriodOfDirectMessagesAndGroupConversation.Reset()
				if err := s.RetentionPeriodOfDirectMessagesAndGroupConversation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"retention_period_of_direct_messages_and_group_conversation\"")
			}
		case "retention_period_of_channels":
			if err := func() error {
				s.RetentionPeriodOfChannels.Reset()
				if err := s.RetentionPeriodOfChannels.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"retention_period_of_channels\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq0ChatSetRetentionPeriodInCloud")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq0ChatSetRetentionPeriodInCloud) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq0ChatSetRetentionPeriodInCloud) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq0ChatSetRetentionPeriodInLocal) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq0ChatSetRetentionPeriodInLocal) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.RetentionPeriodOfDirectMessagesAndGroupConversation.Set {
			e.FieldStart("retention_period_of_direct_messages_and_group_conversation")
			s.RetentionPeriodOfDirectMessagesAndGroupConversation.Encode(e)
		}
	}
	{
		if s.RetentionPeriodOfChannels.Set {
			e.FieldStart("retention_period_of_channels")
			s.RetentionPeriodOfChannels.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq0ChatSetRetentionPeriodInLocal = [3]string{
	0: "enable",
	1: "retention_period_of_direct_messages_and_group_conversation",
	2: "retention_period_of_channels",
}

// Decode decodes UpdateGroupSettingsReq0ChatSetRetentionPeriodInLocal from json.
func (s *UpdateGroupSettingsReq0ChatSetRetentionPeriodInLocal) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq0ChatSetRetentionPeriodInLocal to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "retention_period_of_direct_messages_and_group_conversation":
			if err := func() error {
				s.RetentionPeriodOfDirectMessagesAndGroupConversation.Reset()
				if err := s.RetentionPeriodOfDirectMessagesAndGroupConversation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"retention_period_of_direct_messages_and_group_conversation\"")
			}
		case "retention_period_of_channels":
			if err := func() error {
				s.RetentionPeriodOfChannels.Reset()
				if err := s.RetentionPeriodOfChannels.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"retention_period_of_channels\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq0ChatSetRetentionPeriodInLocal")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq0ChatSetRetentionPeriodInLocal) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq0ChatSetRetentionPeriodInLocal) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq0ChatShareFiles) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq0ChatShareFiles) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.ShareOption.Set {
			e.FieldStart("share_option")
			s.ShareOption.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq0ChatShareFiles = [2]string{
	0: "enable",
	1: "share_option",
}

// Decode decodes UpdateGroupSettingsReq0ChatShareFiles from json.
func (s *UpdateGroupSettingsReq0ChatShareFiles) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq0ChatShareFiles to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "share_option":
			if err := func() error {
				s.ShareOption.Reset()
				if err := s.ShareOption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"share_option\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq0ChatShareFiles")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq0ChatShareFiles) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq0ChatShareFiles) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq0EmailNotification) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq0EmailNotification) encodeFields(e *jx.Encoder) {
	{
		if s.AlternativeHostReminder.Set {
			e.FieldStart("alternative_host_reminder")
			s.AlternativeHostReminder.Encode(e)
		}
	}
	{
		if s.CancelMeetingReminder.Set {
			e.FieldStart("cancel_meeting_reminder")
			s.CancelMeetingReminder.Encode(e)
		}
	}
	{
		if s.CloudRecordingAvailableReminder.Set {
			e.FieldStart("cloud_recording_available_reminder")
			s.CloudRecordingAvailableReminder.Encode(e)
		}
	}
	{
		if s.JbhReminder.Set {
			e.FieldStart("jbh_reminder")
			s.JbhReminder.Encode(e)
		}
	}
	{
		if s.RecordingAvailableReminderAlternativeHosts.Set {
			e.FieldStart("recording_available_reminder_alternative_hosts")
			s.RecordingAvailableReminderAlternativeHosts.Encode(e)
		}
	}
	{
		if s.RecordingAvailableReminderSchedulers.Set {
			e.FieldStart("recording_available_reminder_schedulers")
			s.RecordingAvailableReminderSchedulers.Encode(e)
		}
	}
	{
		if s.ScheduleForReminder.Set {
			e.FieldStart("schedule_for_reminder")
			s.ScheduleForReminder.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq0EmailNotification = [7]string{
	0: "alternative_host_reminder",
	1: "cancel_meeting_reminder",
	2: "cloud_recording_available_reminder",
	3: "jbh_reminder",
	4: "recording_available_reminder_alternative_hosts",
	5: "recording_available_reminder_schedulers",
	6: "schedule_for_reminder",
}

// Decode decodes UpdateGroupSettingsReq0EmailNotification from json.
func (s *UpdateGroupSettingsReq0EmailNotification) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq0EmailNotification to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "alternative_host_reminder":
			if err := func() error {
				s.AlternativeHostReminder.Reset()
				if err := s.AlternativeHostReminder.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"alternative_host_reminder\"")
			}
		case "cancel_meeting_reminder":
			if err := func() error {
				s.CancelMeetingReminder.Reset()
				if err := s.CancelMeetingReminder.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cancel_meeting_reminder\"")
			}
		case "cloud_recording_available_reminder":
			if err := func() error {
				s.CloudRecordingAvailableReminder.Reset()
				if err := s.CloudRecordingAvailableReminder.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cloud_recording_available_reminder\"")
			}
		case "jbh_reminder":
			if err := func() error {
				s.JbhReminder.Reset()
				if err := s.JbhReminder.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"jbh_reminder\"")
			}
		case "recording_available_reminder_alternative_hosts":
			if err := func() error {
				s.RecordingAvailableReminderAlternativeHosts.Reset()
				if err := s.RecordingAvailableReminderAlternativeHosts.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_available_reminder_alternative_hosts\"")
			}
		case "recording_available_reminder_schedulers":
			if err := func() error {
				s.RecordingAvailableReminderSchedulers.Reset()
				if err := s.RecordingAvailableReminderSchedulers.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_available_reminder_schedulers\"")
			}
		case "schedule_for_reminder":
			if err := func() error {
				s.ScheduleForReminder.Reset()
				if err := s.ScheduleForReminder.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"schedule_for_reminder\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq0EmailNotification")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq0EmailNotification) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq0EmailNotification) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq0InMeeting) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq0InMeeting) encodeFields(e *jx.Encoder) {
	{
		if s.AlertGuestJoin.Set {
			e.FieldStart("alert_guest_join")
			s.AlertGuestJoin.Encode(e)
		}
	}
	{
		if s.AllowUsersToDeleteMessagesInMeetingChat.Set {
			e.FieldStart("allow_users_to_delete_messages_in_meeting_chat")
			s.AllowUsersToDeleteMessagesInMeetingChat.Encode(e)
		}
	}
	{
		if s.AllowLiveStreaming.Set {
			e.FieldStart("allow_live_streaming")
			s.AllowLiveStreaming.Encode(e)
		}
	}
	{
		if s.AllowParticipantsChatWith.Set {
			e.FieldStart("allow_participants_chat_with")
			s.AllowParticipantsChatWith.Encode(e)
		}
	}
	{
		if s.AllowShowZoomWindows.Set {
			e.FieldStart("allow_show_zoom_windows")
			s.AllowShowZoomWindows.Encode(e)
		}
	}
	{
		if s.AllowUsersSaveChats.Set {
			e.FieldStart("allow_users_save_chats")
			s.AllowUsersSaveChats.Encode(e)
		}
	}
	{
		if s.Annotation.Set {
			e.FieldStart("annotation")
			s.Annotation.Encode(e)
		}
	}
	{
		if s.AttendeeOnHold.Set {
			e.FieldStart("attendee_on_hold")
			s.AttendeeOnHold.Encode(e)
		}
	}
	{
		if s.AutoAnswer.Set {
			e.FieldStart("auto_answer")
			s.AutoAnswer.Encode(e)
		}
	}
	{
		if s.AutoSavingChat.Set {
			e.FieldStart("auto_saving_chat")
			s.AutoSavingChat.Encode(e)
		}
	}
	{
		if s.BreakoutRoom.Set {
			e.FieldStart("breakout_room")
			s.BreakoutRoom.Encode(e)
		}
	}
	{
		if s.BreakoutRoomSchedule.Set {
			e.FieldStart("breakout_room_schedule")
			s.BreakoutRoomSchedule.Encode(e)
		}
	}
	{
		if s.Chat.Set {
			e.FieldStart("chat")
			s.Chat.Encode(e)
		}
	}
	{
		if s.MeetingQuestionAnswer.Set {
			e.FieldStart("meeting_question_answer")
			s.MeetingQuestionAnswer.Encode(e)
		}
	}
	{
		if s.ClosedCaption.Set {
			e.FieldStart("closed_caption")
			s.ClosedCaption.Encode(e)
		}
	}
	{
		if s.ClosedCaptioning.Set {
			e.FieldStart("closed_captioning")
			s.ClosedCaptioning.Encode(e)
		}
	}
	{
		if s.CoHost.Set {
			e.FieldStart("co_host")
			s.CoHost.Encode(e)
		}
	}
	{
		if s.CustomDataCenterRegions.Set {
			e.FieldStart("custom_data_center_regions")
			s.CustomDataCenterRegions.Encode(e)
		}
	}
	{
		if s.CustomLiveStreamingService.Set {
			e.FieldStart("custom_live_streaming_service")
			s.CustomLiveStreamingService.Encode(e)
		}
	}
	{
		if s.CustomServiceInstructions.Set {
			e.FieldStart("custom_service_instructions")
			s.CustomServiceInstructions.Encode(e)
		}
	}
	{
		if s.DataCenterRegions != nil {
			e.FieldStart("data_center_regions")
			e.ArrStart()
			for _, elem := range s.DataCenterRegions {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.DisableScreenSharingForHostMeetings.Set {
			e.FieldStart("disable_screen_sharing_for_host_meetings")
			s.DisableScreenSharingForHostMeetings.Encode(e)
		}
	}
	{
		if s.DisableScreenSharingForInMeetingGuests.Set {
			e.FieldStart("disable_screen_sharing_for_in_meeting_guests")
			s.DisableScreenSharingForInMeetingGuests.Encode(e)
		}
	}
	{
		if s.E2eEncryption.Set {
			e.FieldStart("e2e_encryption")
			s.E2eEncryption.Encode(e)
		}
	}
	{
		if s.EntryExitChime.Set {
			e.FieldStart("entry_exit_chime")
			s.EntryExitChime.Encode(e)
		}
	}
	{
		if s.FarEndCameraControl.Set {
			e.FieldStart("far_end_camera_control")
			s.FarEndCameraControl.Encode(e)
		}
	}
	{
		if s.Feedback.Set {
			e.FieldStart("feedback")
			s.Feedback.Encode(e)
		}
	}
	{
		if s.FileTransfer.Set {
			e.FieldStart("file_transfer")
			s.FileTransfer.Encode(e)
		}
	}
	{
		if s.GroupHd.Set {
			e.FieldStart("group_hd")
			s.GroupHd.Encode(e)
		}
	}
	{
		if s.WebinarGroupHd.Set {
			e.FieldStart("webinar_group_hd")
			s.WebinarGroupHd.Encode(e)
		}
	}
	{
		if s.JoinFromDesktop.Set {
			e.FieldStart("join_from_desktop")
			s.JoinFromDesktop.Encode(e)
		}
	}
	{
		if s.JoinFromMobile.Set {
			e.FieldStart("join_from_mobile")
			s.JoinFromMobile.Encode(e)
		}
	}
	{
		if s.AutoGeneratedTranslation.Set {
			e.FieldStart("auto_generated_translation")
			s.AutoGeneratedTranslation.Encode(e)
		}
	}
	{
		if s.LanguageInterpretation.Set {
			e.FieldStart("language_interpretation")
			s.LanguageInterpretation.Encode(e)
		}
	}
	{
		if s.SignLanguageInterpretation.Set {
			e.FieldStart("sign_language_interpretation")
			s.SignLanguageInterpretation.Encode(e)
		}
	}
	{
		if s.LiveStreamingFacebook.Set {
			e.FieldStart("live_streaming_facebook")
			s.LiveStreamingFacebook.Encode(e)
		}
	}
	{
		if s.LiveStreamingYoutube.Set {
			e.FieldStart("live_streaming_youtube")
			s.LiveStreamingYoutube.Encode(e)
		}
	}
	{
		if s.ManualCaptioning.Set {
			e.FieldStart("manual_captioning")
			s.ManualCaptioning.Encode(e)
		}
	}
	{
		if s.MeetingReactions.Set {
			e.FieldStart("meeting_reactions")
			s.MeetingReactions.Encode(e)
		}
	}
	{
		if s.MeetingReactionsEmojis.Set {
			e.FieldStart("meeting_reactions_emojis")
			s.MeetingReactionsEmojis.Encode(e)
		}
	}
	{
		if s.AllowHostPanelistsToUseAudibleClap.Set {
			e.FieldStart("allow_host_panelists_to_use_audible_clap")
			s.AllowHostPanelistsToUseAudibleClap.Encode(e)
		}
	}
	{
		if s.WebinarReactions.Set {
			e.FieldStart("webinar_reactions")
			s.WebinarReactions.Encode(e)
		}
	}
	{
		if s.MeetingSurvey.Set {
			e.FieldStart("meeting_survey")
			s.MeetingSurvey.Encode(e)
		}
	}
	{
		if s.NonVerbalFeedback.Set {
			e.FieldStart("non_verbal_feedback")
			s.NonVerbalFeedback.Encode(e)
		}
	}
	{
		if s.OnlyHostViewDeviceList.Set {
			e.FieldStart("only_host_view_device_list")
			s.OnlyHostViewDeviceList.Encode(e)
		}
	}
	{
		if s.OriginalAudio.Set {
			e.FieldStart("original_audio")
			s.OriginalAudio.Encode(e)
		}
	}
	{
		if s.Polling.Set {
			e.FieldStart("polling")
			s.Polling.Encode(e)
		}
	}
	{
		if s.PostMeetingFeedback.Set {
			e.FieldStart("post_meeting_feedback")
			s.PostMeetingFeedback.Encode(e)
		}
	}
	{
		if s.PrivateChat.Set {
			e.FieldStart("private_chat")
			s.PrivateChat.Encode(e)
		}
	}
	{
		if s.RecordPlayOwnVoice.Set {
			e.FieldStart("record_play_own_voice")
			s.RecordPlayOwnVoice.Encode(e)
		}
	}
	{
		if s.RemoteControl.Set {
			e.FieldStart("remote_control")
			s.RemoteControl.Encode(e)
		}
	}
	{
		if s.RemoteSupport.Set {
			e.FieldStart("remote_support")
			s.RemoteSupport.Encode(e)
		}
	}
	{
		if s.RequestPermissionToUnmuteParticipants.Set {
			e.FieldStart("request_permission_to_unmute_participants")
			s.RequestPermissionToUnmuteParticipants.Encode(e)
		}
	}
	{
		if s.ScreenSharing.Set {
			e.FieldStart("screen_sharing")
			s.ScreenSharing.Encode(e)
		}
	}
	{
		if s.SendingDefaultEmailInvites.Set {
			e.FieldStart("sending_default_email_invites")
			s.SendingDefaultEmailInvites.Encode(e)
		}
	}
	{
		if s.ShowAJoinFromYourBrowserLink.Set {
			e.FieldStart("show_a_join_from_your_browser_link")
			s.ShowAJoinFromYourBrowserLink.Encode(e)
		}
	}
	{
		if s.ShowBrowserJoinLink.Set {
			e.FieldStart("show_browser_join_link")
			s.ShowBrowserJoinLink.Encode(e)
		}
	}
	{
		if s.ShowDeviceList.Set {
			e.FieldStart("show_device_list")
			s.ShowDeviceList.Encode(e)
		}
	}
	{
		if s.ShowMeetingControlToolbar.Set {
			e.FieldStart("show_meeting_control_toolbar")
			s.ShowMeetingControlToolbar.Encode(e)
		}
	}
	{
		if s.SlideControl.Set {
			e.FieldStart("slide_control")
			s.SlideControl.Encode(e)
		}
	}
	{
		if s.StereoAudio.Set {
			e.FieldStart("stereo_audio")
			s.StereoAudio.Encode(e)
		}
	}
	{
		if s.UseHTMLFormatEmail.Set {
			e.FieldStart("use_html_format_email")
			s.UseHTMLFormatEmail.Encode(e)
		}
	}
	{
		if s.VirtualBackground.Set {
			e.FieldStart("virtual_background")
			s.VirtualBackground.Encode(e)
		}
	}
	{
		if s.WaitingRoom.Set {
			e.FieldStart("waiting_room")
			s.WaitingRoom.Encode(e)
		}
	}
	{
		if s.WebinarChat.Set {
			e.FieldStart("webinar_chat")
			s.WebinarChat.Encode(e)
		}
	}
	{
		if s.WebinarLiveStreaming.Set {
			e.FieldStart("webinar_live_streaming")
			s.WebinarLiveStreaming.Encode(e)
		}
	}
	{
		if s.MeetingPolling.Set {
			e.FieldStart("meeting_polling")
			s.MeetingPolling.Encode(e)
		}
	}
	{
		if s.WebinarPolling.Set {
			e.FieldStart("webinar_polling")
			s.WebinarPolling.Encode(e)
		}
	}
	{
		if s.WebinarQuestionAnswer.Set {
			e.FieldStart("webinar_question_answer")
			s.WebinarQuestionAnswer.Encode(e)
		}
	}
	{
		if s.WebinarSurvey.Set {
			e.FieldStart("webinar_survey")
			s.WebinarSurvey.Encode(e)
		}
	}
	{
		if s.Whiteboard.Set {
			e.FieldStart("whiteboard")
			s.Whiteboard.Encode(e)
		}
	}
	{
		if s.WhoCanShareScreen.Set {
			e.FieldStart("who_can_share_screen")
			s.WhoCanShareScreen.Encode(e)
		}
	}
	{
		if s.WhoCanShareScreenWhenSomeoneIsSharing.Set {
			e.FieldStart("who_can_share_screen_when_someone_is_sharing")
			s.WhoCanShareScreenWhenSomeoneIsSharing.Encode(e)
		}
	}
	{
		if s.ParticipantsShareSimultaneously.Set {
			e.FieldStart("participants_share_simultaneously")
			s.ParticipantsShareSimultaneously.Encode(e)
		}
	}
	{
		if s.WorkplaceByFacebook.Set {
			e.FieldStart("workplace_by_facebook")
			s.WorkplaceByFacebook.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq0InMeeting = [75]string{
	0:  "alert_guest_join",
	1:  "allow_users_to_delete_messages_in_meeting_chat",
	2:  "allow_live_streaming",
	3:  "allow_participants_chat_with",
	4:  "allow_show_zoom_windows",
	5:  "allow_users_save_chats",
	6:  "annotation",
	7:  "attendee_on_hold",
	8:  "auto_answer",
	9:  "auto_saving_chat",
	10: "breakout_room",
	11: "breakout_room_schedule",
	12: "chat",
	13: "meeting_question_answer",
	14: "closed_caption",
	15: "closed_captioning",
	16: "co_host",
	17: "custom_data_center_regions",
	18: "custom_live_streaming_service",
	19: "custom_service_instructions",
	20: "data_center_regions",
	21: "disable_screen_sharing_for_host_meetings",
	22: "disable_screen_sharing_for_in_meeting_guests",
	23: "e2e_encryption",
	24: "entry_exit_chime",
	25: "far_end_camera_control",
	26: "feedback",
	27: "file_transfer",
	28: "group_hd",
	29: "webinar_group_hd",
	30: "join_from_desktop",
	31: "join_from_mobile",
	32: "auto_generated_translation",
	33: "language_interpretation",
	34: "sign_language_interpretation",
	35: "live_streaming_facebook",
	36: "live_streaming_youtube",
	37: "manual_captioning",
	38: "meeting_reactions",
	39: "meeting_reactions_emojis",
	40: "allow_host_panelists_to_use_audible_clap",
	41: "webinar_reactions",
	42: "meeting_survey",
	43: "non_verbal_feedback",
	44: "only_host_view_device_list",
	45: "original_audio",
	46: "polling",
	47: "post_meeting_feedback",
	48: "private_chat",
	49: "record_play_own_voice",
	50: "remote_control",
	51: "remote_support",
	52: "request_permission_to_unmute_participants",
	53: "screen_sharing",
	54: "sending_default_email_invites",
	55: "show_a_join_from_your_browser_link",
	56: "show_browser_join_link",
	57: "show_device_list",
	58: "show_meeting_control_toolbar",
	59: "slide_control",
	60: "stereo_audio",
	61: "use_html_format_email",
	62: "virtual_background",
	63: "waiting_room",
	64: "webinar_chat",
	65: "webinar_live_streaming",
	66: "meeting_polling",
	67: "webinar_polling",
	68: "webinar_question_answer",
	69: "webinar_survey",
	70: "whiteboard",
	71: "who_can_share_screen",
	72: "who_can_share_screen_when_someone_is_sharing",
	73: "participants_share_simultaneously",
	74: "workplace_by_facebook",
}

// Decode decodes UpdateGroupSettingsReq0InMeeting from json.
func (s *UpdateGroupSettingsReq0InMeeting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq0InMeeting to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "alert_guest_join":
			if err := func() error {
				s.AlertGuestJoin.Reset()
				if err := s.AlertGuestJoin.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"alert_guest_join\"")
			}
		case "allow_users_to_delete_messages_in_meeting_chat":
			if err := func() error {
				s.AllowUsersToDeleteMessagesInMeetingChat.Reset()
				if err := s.AllowUsersToDeleteMessagesInMeetingChat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_users_to_delete_messages_in_meeting_chat\"")
			}
		case "allow_live_streaming":
			if err := func() error {
				s.AllowLiveStreaming.Reset()
				if err := s.AllowLiveStreaming.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_live_streaming\"")
			}
		case "allow_participants_chat_with":
			if err := func() error {
				s.AllowParticipantsChatWith.Reset()
				if err := s.AllowParticipantsChatWith.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_participants_chat_with\"")
			}
		case "allow_show_zoom_windows":
			if err := func() error {
				s.AllowShowZoomWindows.Reset()
				if err := s.AllowShowZoomWindows.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_show_zoom_windows\"")
			}
		case "allow_users_save_chats":
			if err := func() error {
				s.AllowUsersSaveChats.Reset()
				if err := s.AllowUsersSaveChats.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_users_save_chats\"")
			}
		case "annotation":
			if err := func() error {
				s.Annotation.Reset()
				if err := s.Annotation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"annotation\"")
			}
		case "attendee_on_hold":
			if err := func() error {
				s.AttendeeOnHold.Reset()
				if err := s.AttendeeOnHold.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"attendee_on_hold\"")
			}
		case "auto_answer":
			if err := func() error {
				s.AutoAnswer.Reset()
				if err := s.AutoAnswer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_answer\"")
			}
		case "auto_saving_chat":
			if err := func() error {
				s.AutoSavingChat.Reset()
				if err := s.AutoSavingChat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_saving_chat\"")
			}
		case "breakout_room":
			if err := func() error {
				s.BreakoutRoom.Reset()
				if err := s.BreakoutRoom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"breakout_room\"")
			}
		case "breakout_room_schedule":
			if err := func() error {
				s.BreakoutRoomSchedule.Reset()
				if err := s.BreakoutRoomSchedule.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"breakout_room_schedule\"")
			}
		case "chat":
			if err := func() error {
				s.Chat.Reset()
				if err := s.Chat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"chat\"")
			}
		case "meeting_question_answer":
			if err := func() error {
				s.MeetingQuestionAnswer.Reset()
				if err := s.MeetingQuestionAnswer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_question_answer\"")
			}
		case "closed_caption":
			if err := func() error {
				s.ClosedCaption.Reset()
				if err := s.ClosedCaption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"closed_caption\"")
			}
		case "closed_captioning":
			if err := func() error {
				s.ClosedCaptioning.Reset()
				if err := s.ClosedCaptioning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"closed_captioning\"")
			}
		case "co_host":
			if err := func() error {
				s.CoHost.Reset()
				if err := s.CoHost.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"co_host\"")
			}
		case "custom_data_center_regions":
			if err := func() error {
				s.CustomDataCenterRegions.Reset()
				if err := s.CustomDataCenterRegions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"custom_data_center_regions\"")
			}
		case "custom_live_streaming_service":
			if err := func() error {
				s.CustomLiveStreamingService.Reset()
				if err := s.CustomLiveStreamingService.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"custom_live_streaming_service\"")
			}
		case "custom_service_instructions":
			if err := func() error {
				s.CustomServiceInstructions.Reset()
				if err := s.CustomServiceInstructions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"custom_service_instructions\"")
			}
		case "data_center_regions":
			if err := func() error {
				s.DataCenterRegions = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.DataCenterRegions = append(s.DataCenterRegions, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"data_center_regions\"")
			}
		case "disable_screen_sharing_for_host_meetings":
			if err := func() error {
				s.DisableScreenSharingForHostMeetings.Reset()
				if err := s.DisableScreenSharingForHostMeetings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"disable_screen_sharing_for_host_meetings\"")
			}
		case "disable_screen_sharing_for_in_meeting_guests":
			if err := func() error {
				s.DisableScreenSharingForInMeetingGuests.Reset()
				if err := s.DisableScreenSharingForInMeetingGuests.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"disable_screen_sharing_for_in_meeting_guests\"")
			}
		case "e2e_encryption":
			if err := func() error {
				s.E2eEncryption.Reset()
				if err := s.E2eEncryption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"e2e_encryption\"")
			}
		case "entry_exit_chime":
			if err := func() error {
				s.EntryExitChime.Reset()
				if err := s.EntryExitChime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"entry_exit_chime\"")
			}
		case "far_end_camera_control":
			if err := func() error {
				s.FarEndCameraControl.Reset()
				if err := s.FarEndCameraControl.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"far_end_camera_control\"")
			}
		case "feedback":
			if err := func() error {
				s.Feedback.Reset()
				if err := s.Feedback.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"feedback\"")
			}
		case "file_transfer":
			if err := func() error {
				s.FileTransfer.Reset()
				if err := s.FileTransfer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"file_transfer\"")
			}
		case "group_hd":
			if err := func() error {
				s.GroupHd.Reset()
				if err := s.GroupHd.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"group_hd\"")
			}
		case "webinar_group_hd":
			if err := func() error {
				s.WebinarGroupHd.Reset()
				if err := s.WebinarGroupHd.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webinar_group_hd\"")
			}
		case "join_from_desktop":
			if err := func() error {
				s.JoinFromDesktop.Reset()
				if err := s.JoinFromDesktop.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"join_from_desktop\"")
			}
		case "join_from_mobile":
			if err := func() error {
				s.JoinFromMobile.Reset()
				if err := s.JoinFromMobile.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"join_from_mobile\"")
			}
		case "auto_generated_translation":
			if err := func() error {
				s.AutoGeneratedTranslation.Reset()
				if err := s.AutoGeneratedTranslation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_generated_translation\"")
			}
		case "language_interpretation":
			if err := func() error {
				s.LanguageInterpretation.Reset()
				if err := s.LanguageInterpretation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"language_interpretation\"")
			}
		case "sign_language_interpretation":
			if err := func() error {
				s.SignLanguageInterpretation.Reset()
				if err := s.SignLanguageInterpretation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sign_language_interpretation\"")
			}
		case "live_streaming_facebook":
			if err := func() error {
				s.LiveStreamingFacebook.Reset()
				if err := s.LiveStreamingFacebook.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"live_streaming_facebook\"")
			}
		case "live_streaming_youtube":
			if err := func() error {
				s.LiveStreamingYoutube.Reset()
				if err := s.LiveStreamingYoutube.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"live_streaming_youtube\"")
			}
		case "manual_captioning":
			if err := func() error {
				s.ManualCaptioning.Reset()
				if err := s.ManualCaptioning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"manual_captioning\"")
			}
		case "meeting_reactions":
			if err := func() error {
				s.MeetingReactions.Reset()
				if err := s.MeetingReactions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_reactions\"")
			}
		case "meeting_reactions_emojis":
			if err := func() error {
				s.MeetingReactionsEmojis.Reset()
				if err := s.MeetingReactionsEmojis.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_reactions_emojis\"")
			}
		case "allow_host_panelists_to_use_audible_clap":
			if err := func() error {
				s.AllowHostPanelistsToUseAudibleClap.Reset()
				if err := s.AllowHostPanelistsToUseAudibleClap.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_host_panelists_to_use_audible_clap\"")
			}
		case "webinar_reactions":
			if err := func() error {
				s.WebinarReactions.Reset()
				if err := s.WebinarReactions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webinar_reactions\"")
			}
		case "meeting_survey":
			if err := func() error {
				s.MeetingSurvey.Reset()
				if err := s.MeetingSurvey.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_survey\"")
			}
		case "non_verbal_feedback":
			if err := func() error {
				s.NonVerbalFeedback.Reset()
				if err := s.NonVerbalFeedback.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"non_verbal_feedback\"")
			}
		case "only_host_view_device_list":
			if err := func() error {
				s.OnlyHostViewDeviceList.Reset()
				if err := s.OnlyHostViewDeviceList.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"only_host_view_device_list\"")
			}
		case "original_audio":
			if err := func() error {
				s.OriginalAudio.Reset()
				if err := s.OriginalAudio.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_audio\"")
			}
		case "polling":
			if err := func() error {
				s.Polling.Reset()
				if err := s.Polling.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"polling\"")
			}
		case "post_meeting_feedback":
			if err := func() error {
				s.PostMeetingFeedback.Reset()
				if err := s.PostMeetingFeedback.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"post_meeting_feedback\"")
			}
		case "private_chat":
			if err := func() error {
				s.PrivateChat.Reset()
				if err := s.PrivateChat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"private_chat\"")
			}
		case "record_play_own_voice":
			if err := func() error {
				s.RecordPlayOwnVoice.Reset()
				if err := s.RecordPlayOwnVoice.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"record_play_own_voice\"")
			}
		case "remote_control":
			if err := func() error {
				s.RemoteControl.Reset()
				if err := s.RemoteControl.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"remote_control\"")
			}
		case "remote_support":
			if err := func() error {
				s.RemoteSupport.Reset()
				if err := s.RemoteSupport.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"remote_support\"")
			}
		case "request_permission_to_unmute_participants":
			if err := func() error {
				s.RequestPermissionToUnmuteParticipants.Reset()
				if err := s.RequestPermissionToUnmuteParticipants.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"request_permission_to_unmute_participants\"")
			}
		case "screen_sharing":
			if err := func() error {
				s.ScreenSharing.Reset()
				if err := s.ScreenSharing.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"screen_sharing\"")
			}
		case "sending_default_email_invites":
			if err := func() error {
				s.SendingDefaultEmailInvites.Reset()
				if err := s.SendingDefaultEmailInvites.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sending_default_email_invites\"")
			}
		case "show_a_join_from_your_browser_link":
			if err := func() error {
				s.ShowAJoinFromYourBrowserLink.Reset()
				if err := s.ShowAJoinFromYourBrowserLink.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"show_a_join_from_your_browser_link\"")
			}
		case "show_browser_join_link":
			if err := func() error {
				s.ShowBrowserJoinLink.Reset()
				if err := s.ShowBrowserJoinLink.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"show_browser_join_link\"")
			}
		case "show_device_list":
			if err := func() error {
				s.ShowDeviceList.Reset()
				if err := s.ShowDeviceList.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"show_device_list\"")
			}
		case "show_meeting_control_toolbar":
			if err := func() error {
				s.ShowMeetingControlToolbar.Reset()
				if err := s.ShowMeetingControlToolbar.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"show_meeting_control_toolbar\"")
			}
		case "slide_control":
			if err := func() error {
				s.SlideControl.Reset()
				if err := s.SlideControl.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"slide_control\"")
			}
		case "stereo_audio":
			if err := func() error {
				s.StereoAudio.Reset()
				if err := s.StereoAudio.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"stereo_audio\"")
			}
		case "use_html_format_email":
			if err := func() error {
				s.UseHTMLFormatEmail.Reset()
				if err := s.UseHTMLFormatEmail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"use_html_format_email\"")
			}
		case "virtual_background":
			if err := func() error {
				s.VirtualBackground.Reset()
				if err := s.VirtualBackground.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"virtual_background\"")
			}
		case "waiting_room":
			if err := func() error {
				s.WaitingRoom.Reset()
				if err := s.WaitingRoom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"waiting_room\"")
			}
		case "webinar_chat":
			if err := func() error {
				s.WebinarChat.Reset()
				if err := s.WebinarChat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webinar_chat\"")
			}
		case "webinar_live_streaming":
			if err := func() error {
				s.WebinarLiveStreaming.Reset()
				if err := s.WebinarLiveStreaming.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webinar_live_streaming\"")
			}
		case "meeting_polling":
			if err := func() error {
				s.MeetingPolling.Reset()
				if err := s.MeetingPolling.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_polling\"")
			}
		case "webinar_polling":
			if err := func() error {
				s.WebinarPolling.Reset()
				if err := s.WebinarPolling.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webinar_polling\"")
			}
		case "webinar_question_answer":
			if err := func() error {
				s.WebinarQuestionAnswer.Reset()
				if err := s.WebinarQuestionAnswer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webinar_question_answer\"")
			}
		case "webinar_survey":
			if err := func() error {
				s.WebinarSurvey.Reset()
				if err := s.WebinarSurvey.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webinar_survey\"")
			}
		case "whiteboard":
			if err := func() error {
				s.Whiteboard.Reset()
				if err := s.Whiteboard.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"whiteboard\"")
			}
		case "who_can_share_screen":
			if err := func() error {
				s.WhoCanShareScreen.Reset()
				if err := s.WhoCanShareScreen.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"who_can_share_screen\"")
			}
		case "who_can_share_screen_when_someone_is_sharing":
			if err := func() error {
				s.WhoCanShareScreenWhenSomeoneIsSharing.Reset()
				if err := s.WhoCanShareScreenWhenSomeoneIsSharing.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"who_can_share_screen_when_someone_is_sharing\"")
			}
		case "participants_share_simultaneously":
			if err := func() error {
				s.ParticipantsShareSimultaneously.Reset()
				if err := s.ParticipantsShareSimultaneously.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"participants_share_simultaneously\"")
			}
		case "workplace_by_facebook":
			if err := func() error {
				s.WorkplaceByFacebook.Reset()
				if err := s.WorkplaceByFacebook.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"workplace_by_facebook\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq0InMeeting")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq0InMeeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq0InMeeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslation) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslation) encodeFields(e *jx.Encoder) {
	{
		if s.LanguageItemPairList.Set {
			e.FieldStart("language_item_pairList")
			s.LanguageItemPairList.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslation = [2]string{
	0: "language_item_pairList",
	1: "enable",
}

// Decode decodes UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslation from json.
func (s *UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslation) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslation to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "language_item_pairList":
			if err := func() error {
				s.LanguageItemPairList.Reset()
				if err := s.LanguageItemPairList.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"language_item_pairList\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslation")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslation) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslation) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairList) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairList) encodeFields(e *jx.Encoder) {
	{
		if s.TransLangConfig != nil {
			e.FieldStart("trans_lang_config")
			e.ArrStart()
			for _, elem := range s.TransLangConfig {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.All.Set {
			e.FieldStart("all")
			s.All.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairList = [2]string{
	0: "trans_lang_config",
	1: "all",
}

// Decode decodes UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairList from json.
func (s *UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairList) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairList to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "trans_lang_config":
			if err := func() error {
				s.TransLangConfig = make([]UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.TransLangConfig = append(s.TransLangConfig, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"trans_lang_config\"")
			}
		case "all":
			if err := func() error {
				s.All.Reset()
				if err := s.All.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"all\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairList")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairList) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairList) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItem) encodeFields(e *jx.Encoder) {
	{
		if s.SpeakLanguage.Set {
			e.FieldStart("speak_language")
			s.SpeakLanguage.Encode(e)
		}
	}
	{
		if s.TranslateTo.Set {
			e.FieldStart("translate_to")
			s.TranslateTo.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItem = [2]string{
	0: "speak_language",
	1: "translate_to",
}

// Decode decodes UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItem from json.
func (s *UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "speak_language":
			if err := func() error {
				s.SpeakLanguage.Reset()
				if err := s.SpeakLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"speak_language\"")
			}
		case "translate_to":
			if err := func() error {
				s.TranslateTo.Reset()
				if err := s.TranslateTo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"translate_to\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Code.Set {
			e.FieldStart("code")
			s.Code.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage = [2]string{
	0: "name",
	1: "code",
}

// Decode decodes UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage from json.
func (s *UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "code":
			if err := func() error {
				s.Code.Reset()
				if err := s.Code.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemSpeakLanguage) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo) encodeFields(e *jx.Encoder) {
	{
		if s.All.Set {
			e.FieldStart("all")
			s.All.Encode(e)
		}
	}
	{
		if s.LanguageConfig != nil {
			e.FieldStart("language_config")
			e.ArrStart()
			for _, elem := range s.LanguageConfig {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo = [2]string{
	0: "all",
	1: "language_config",
}

// Decode decodes UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo from json.
func (s *UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "all":
			if err := func() error {
				s.All.Reset()
				if err := s.All.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"all\"")
			}
		case "language_config":
			if err := func() error {
				s.LanguageConfig = make([]UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateToLanguageConfigItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateToLanguageConfigItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.LanguageConfig = append(s.LanguageConfig, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"language_config\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateTo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateToLanguageConfigItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateToLanguageConfigItem) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Code.Set {
			e.FieldStart("code")
			s.Code.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateToLanguageConfigItem = [2]string{
	0: "name",
	1: "code",
}

// Decode decodes UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateToLanguageConfigItem from json.
func (s *UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateToLanguageConfigItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateToLanguageConfigItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "code":
			if err := func() error {
				s.Code.Reset()
				if err := s.Code.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateToLanguageConfigItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateToLanguageConfigItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq0InMeetingAutoGeneratedTranslationLanguageItemPairListTransLangConfigItemTranslateToLanguageConfigItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq0InMeetingClosedCaptioning) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq0InMeetingClosedCaptioning) encodeFields(e *jx.Encoder) {
	{
		if s.AutoTranscribing.Set {
			e.FieldStart("auto_transcribing")
			s.AutoTranscribing.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.SaveCaption.Set {
			e.FieldStart("save_caption")
			s.SaveCaption.Encode(e)
		}
	}
	{
		if s.ThirdPartyCaptioningService.Set {
			e.FieldStart("third_party_captioning_service")
			s.ThirdPartyCaptioningService.Encode(e)
		}
	}
	{
		if s.ViewFullTranscript.Set {
			e.FieldStart("view_full_transcript")
			s.ViewFullTranscript.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq0InMeetingClosedCaptioning = [5]string{
	0: "auto_transcribing",
	1: "enable",
	2: "save_caption",
	3: "third_party_captioning_service",
	4: "view_full_transcript",
}

// Decode decodes UpdateGroupSettingsReq0InMeetingClosedCaptioning from json.
func (s *UpdateGroupSettingsReq0InMeetingClosedCaptioning) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq0InMeetingClosedCaptioning to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "auto_transcribing":
			if err := func() error {
				s.AutoTranscribing.Reset()
				if err := s.AutoTranscribing.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_transcribing\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "save_caption":
			if err := func() error {
				s.SaveCaption.Reset()
				if err := s.SaveCaption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"save_caption\"")
			}
		case "third_party_captioning_service":
			if err := func() error {
				s.ThirdPartyCaptioningService.Reset()
				if err := s.ThirdPartyCaptioningService.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"third_party_captioning_service\"")
			}
		case "view_full_transcript":
			if err := func() error {
				s.ViewFullTranscript.Reset()
				if err := s.ViewFullTranscript.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"view_full_transcript\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq0InMeetingClosedCaptioning")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq0InMeetingClosedCaptioning) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq0InMeetingClosedCaptioning) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq0InMeetingLanguageInterpretation) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq0InMeetingLanguageInterpretation) encodeFields(e *jx.Encoder) {
	{
		if s.CustomLanguages != nil {
			e.FieldStart("custom_languages")
			e.ArrStart()
			for _, elem := range s.CustomLanguages {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.EnableLanguageInterpretationByDefault.Set {
			e.FieldStart("enable_language_interpretation_by_default")
			s.EnableLanguageInterpretationByDefault.Encode(e)
		}
	}
	{
		if s.AllowParticipantsToSpeakInListeningChannel.Set {
			e.FieldStart("allow_participants_to_speak_in_listening_channel")
			s.AllowParticipantsToSpeakInListeningChannel.Encode(e)
		}
	}
	{
		if s.AllowUpTo25CustomLanguagesWhenSchedulingMeetings.Set {
			e.FieldStart("allow_up_to_25_custom_languages_when_scheduling_meetings")
			s.AllowUpTo25CustomLanguagesWhenSchedulingMeetings.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq0InMeetingLanguageInterpretation = [5]string{
	0: "custom_languages",
	1: "enable_language_interpretation_by_default",
	2: "allow_participants_to_speak_in_listening_channel",
	3: "allow_up_to_25_custom_languages_when_scheduling_meetings",
	4: "enable",
}

// Decode decodes UpdateGroupSettingsReq0InMeetingLanguageInterpretation from json.
func (s *UpdateGroupSettingsReq0InMeetingLanguageInterpretation) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq0InMeetingLanguageInterpretation to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "custom_languages":
			if err := func() error {
				s.CustomLanguages = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.CustomLanguages = append(s.CustomLanguages, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"custom_languages\"")
			}
		case "enable_language_interpretation_by_default":
			if err := func() error {
				s.EnableLanguageInterpretationByDefault.Reset()
				if err := s.EnableLanguageInterpretationByDefault.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable_language_interpretation_by_default\"")
			}
		case "allow_participants_to_speak_in_listening_channel":
			if err := func() error {
				s.AllowParticipantsToSpeakInListeningChannel.Reset()
				if err := s.AllowParticipantsToSpeakInListeningChannel.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_participants_to_speak_in_listening_channel\"")
			}
		case "allow_up_to_25_custom_languages_when_scheduling_meetings":
			if err := func() error {
				s.AllowUpTo25CustomLanguagesWhenSchedulingMeetings.Reset()
				if err := s.AllowUpTo25CustomLanguagesWhenSchedulingMeetings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_up_to_25_custom_languages_when_scheduling_meetings\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq0InMeetingLanguageInterpretation")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq0InMeetingLanguageInterpretation) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq0InMeetingLanguageInterpretation) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq0InMeetingManualCaptioning) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq0InMeetingManualCaptioning) encodeFields(e *jx.Encoder) {
	{
		if s.AllowToType.Set {
			e.FieldStart("allow_to_type")
			s.AllowToType.Encode(e)
		}
	}
	{
		if s.AutoGeneratedCaptions.Set {
			e.FieldStart("auto_generated_captions")
			s.AutoGeneratedCaptions.Encode(e)
		}
	}
	{
		if s.FullTranscript.Set {
			e.FieldStart("full_transcript")
			s.FullTranscript.Encode(e)
		}
	}
	{
		if s.ManualCaptions.Set {
			e.FieldStart("manual_captions")
			s.ManualCaptions.Encode(e)
		}
	}
	{
		if s.SaveCaptions.Set {
			e.FieldStart("save_captions")
			s.SaveCaptions.Encode(e)
		}
	}
	{
		if s.ThirdPartyCaptioningService.Set {
			e.FieldStart("third_party_captioning_service")
			s.ThirdPartyCaptioningService.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq0InMeetingManualCaptioning = [6]string{
	0: "allow_to_type",
	1: "auto_generated_captions",
	2: "full_transcript",
	3: "manual_captions",
	4: "save_captions",
	5: "third_party_captioning_service",
}

// Decode decodes UpdateGroupSettingsReq0InMeetingManualCaptioning from json.
func (s *UpdateGroupSettingsReq0InMeetingManualCaptioning) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq0InMeetingManualCaptioning to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allow_to_type":
			if err := func() error {
				s.AllowToType.Reset()
				if err := s.AllowToType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_to_type\"")
			}
		case "auto_generated_captions":
			if err := func() error {
				s.AutoGeneratedCaptions.Reset()
				if err := s.AutoGeneratedCaptions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_generated_captions\"")
			}
		case "full_transcript":
			if err := func() error {
				s.FullTranscript.Reset()
				if err := s.FullTranscript.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"full_transcript\"")
			}
		case "manual_captions":
			if err := func() error {
				s.ManualCaptions.Reset()
				if err := s.ManualCaptions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"manual_captions\"")
			}
		case "save_captions":
			if err := func() error {
				s.SaveCaptions.Reset()
				if err := s.SaveCaptions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"save_captions\"")
			}
		case "third_party_captioning_service":
			if err := func() error {
				s.ThirdPartyCaptioningService.Reset()
				if err := s.ThirdPartyCaptioningService.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"third_party_captioning_service\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq0InMeetingManualCaptioning")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq0InMeetingManualCaptioning) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq0InMeetingManualCaptioning) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq0InMeetingMeetingPolling) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq0InMeetingMeetingPolling) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.AdvancedPolls.Set {
			e.FieldStart("advanced_polls")
			s.AdvancedPolls.Encode(e)
		}
	}
	{
		if s.ManageSavedPollsAndQuizzes.Set {
			e.FieldStart("manage_saved_polls_and_quizzes")
			s.ManageSavedPollsAndQuizzes.Encode(e)
		}
	}
	{
		if s.RequireAnswersToBeAnonymous.Set {
			e.FieldStart("require_answers_to_be_anonymous")
			s.RequireAnswersToBeAnonymous.Encode(e)
		}
	}
	{
		if s.AllowHostToUploadImage.Set {
			e.FieldStart("allow_host_to_upload_image")
			s.AllowHostToUploadImage.Encode(e)
		}
	}
	{
		if s.AllowAlternativeHostToAddEdit.Set {
			e.FieldStart("allow_alternative_host_to_add_edit")
			s.AllowAlternativeHostToAddEdit.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq0InMeetingMeetingPolling = [6]string{
	0: "enable",
	1: "advanced_polls",
	2: "manage_saved_polls_and_quizzes",
	3: "require_answers_to_be_anonymous",
	4: "allow_host_to_upload_image",
	5: "allow_alternative_host_to_add_edit",
}

// Decode decodes UpdateGroupSettingsReq0InMeetingMeetingPolling from json.
func (s *UpdateGroupSettingsReq0InMeetingMeetingPolling) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq0InMeetingMeetingPolling to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "advanced_polls":
			if err := func() error {
				s.AdvancedPolls.Reset()
				if err := s.AdvancedPolls.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"advanced_polls\"")
			}
		case "manage_saved_polls_and_quizzes":
			if err := func() error {
				s.ManageSavedPollsAndQuizzes.Reset()
				if err := s.ManageSavedPollsAndQuizzes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"manage_saved_polls_and_quizzes\"")
			}
		case "require_answers_to_be_anonymous":
			if err := func() error {
				s.RequireAnswersToBeAnonymous.Reset()
				if err := s.RequireAnswersToBeAnonymous.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_answers_to_be_anonymous\"")
			}
		case "allow_host_to_upload_image":
			if err := func() error {
				s.AllowHostToUploadImage.Reset()
				if err := s.AllowHostToUploadImage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_host_to_upload_image\"")
			}
		case "allow_alternative_host_to_add_edit":
			if err := func() error {
				s.AllowAlternativeHostToAddEdit.Reset()
				if err := s.AllowAlternativeHostToAddEdit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_alternative_host_to_add_edit\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq0InMeetingMeetingPolling")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq0InMeetingMeetingPolling) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq0InMeetingMeetingPolling) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq0InMeetingSignLanguageInterpretation) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq0InMeetingSignLanguageInterpretation) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.EnableSignLanguageInterpretationByDefault.Set {
			e.FieldStart("enable_sign_language_interpretation_by_default")
			s.EnableSignLanguageInterpretationByDefault.Encode(e)
		}
	}
	{
		if s.CustomLanguages != nil {
			e.FieldStart("custom_languages")
			e.ArrStart()
			for _, elem := range s.CustomLanguages {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq0InMeetingSignLanguageInterpretation = [3]string{
	0: "enable",
	1: "enable_sign_language_interpretation_by_default",
	2: "custom_languages",
}

// Decode decodes UpdateGroupSettingsReq0InMeetingSignLanguageInterpretation from json.
func (s *UpdateGroupSettingsReq0InMeetingSignLanguageInterpretation) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq0InMeetingSignLanguageInterpretation to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "enable_sign_language_interpretation_by_default":
			if err := func() error {
				s.EnableSignLanguageInterpretationByDefault.Reset()
				if err := s.EnableSignLanguageInterpretationByDefault.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable_sign_language_interpretation_by_default\"")
			}
		case "custom_languages":
			if err := func() error {
				s.CustomLanguages = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.CustomLanguages = append(s.CustomLanguages, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"custom_languages\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq0InMeetingSignLanguageInterpretation")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq0InMeetingSignLanguageInterpretation) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq0InMeetingSignLanguageInterpretation) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq0InMeetingWebinarChat) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq0InMeetingWebinarChat) encodeFields(e *jx.Encoder) {
	{
		if s.AllowAttendeesChatWith.Set {
			e.FieldStart("allow_attendees_chat_with")
			s.AllowAttendeesChatWith.Encode(e)
		}
	}
	{
		if s.AllowAutoSaveLocalChatFile.Set {
			e.FieldStart("allow_auto_save_local_chat_file")
			s.AllowAutoSaveLocalChatFile.Encode(e)
		}
	}
	{
		if s.AllowPanelistsChatWith.Set {
			e.FieldStart("allow_panelists_chat_with")
			s.AllowPanelistsChatWith.Encode(e)
		}
	}
	{
		if s.AllowPanelistsSendDirectMessage.Set {
			e.FieldStart("allow_panelists_send_direct_message")
			s.AllowPanelistsSendDirectMessage.Encode(e)
		}
	}
	{
		if s.AllowUsersSaveChats.Set {
			e.FieldStart("allow_users_save_chats")
			s.AllowUsersSaveChats.Encode(e)
		}
	}
	{
		if s.DefaultAttendeesChatWith.Set {
			e.FieldStart("default_attendees_chat_with")
			s.DefaultAttendeesChatWith.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq0InMeetingWebinarChat = [7]string{
	0: "allow_attendees_chat_with",
	1: "allow_auto_save_local_chat_file",
	2: "allow_panelists_chat_with",
	3: "allow_panelists_send_direct_message",
	4: "allow_users_save_chats",
	5: "default_attendees_chat_with",
	6: "enable",
}

// Decode decodes UpdateGroupSettingsReq0InMeetingWebinarChat from json.
func (s *UpdateGroupSettingsReq0InMeetingWebinarChat) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq0InMeetingWebinarChat to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allow_attendees_chat_with":
			if err := func() error {
				s.AllowAttendeesChatWith.Reset()
				if err := s.AllowAttendeesChatWith.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_attendees_chat_with\"")
			}
		case "allow_auto_save_local_chat_file":
			if err := func() error {
				s.AllowAutoSaveLocalChatFile.Reset()
				if err := s.AllowAutoSaveLocalChatFile.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_auto_save_local_chat_file\"")
			}
		case "allow_panelists_chat_with":
			if err := func() error {
				s.AllowPanelistsChatWith.Reset()
				if err := s.AllowPanelistsChatWith.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_panelists_chat_with\"")
			}
		case "allow_panelists_send_direct_message":
			if err := func() error {
				s.AllowPanelistsSendDirectMessage.Reset()
				if err := s.AllowPanelistsSendDirectMessage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_panelists_send_direct_message\"")
			}
		case "allow_users_save_chats":
			if err := func() error {
				s.AllowUsersSaveChats.Reset()
				if err := s.AllowUsersSaveChats.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_users_save_chats\"")
			}
		case "default_attendees_chat_with":
			if err := func() error {
				s.DefaultAttendeesChatWith.Reset()
				if err := s.DefaultAttendeesChatWith.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"default_attendees_chat_with\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq0InMeetingWebinarChat")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq0InMeetingWebinarChat) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq0InMeetingWebinarChat) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq0InMeetingWebinarLiveStreaming) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq0InMeetingWebinarLiveStreaming) encodeFields(e *jx.Encoder) {
	{
		if s.CustomServiceInstructions.Set {
			e.FieldStart("custom_service_instructions")
			s.CustomServiceInstructions.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.LiveStreamingReminder.Set {
			e.FieldStart("live_streaming_reminder")
			s.LiveStreamingReminder.Encode(e)
		}
	}
	{
		if s.LiveStreamingService != nil {
			e.FieldStart("live_streaming_service")
			e.ArrStart()
			for _, elem := range s.LiveStreamingService {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq0InMeetingWebinarLiveStreaming = [4]string{
	0: "custom_service_instructions",
	1: "enable",
	2: "live_streaming_reminder",
	3: "live_streaming_service",
}

// Decode decodes UpdateGroupSettingsReq0InMeetingWebinarLiveStreaming from json.
func (s *UpdateGroupSettingsReq0InMeetingWebinarLiveStreaming) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq0InMeetingWebinarLiveStreaming to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "custom_service_instructions":
			if err := func() error {
				s.CustomServiceInstructions.Reset()
				if err := s.CustomServiceInstructions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"custom_service_instructions\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "live_streaming_reminder":
			if err := func() error {
				s.LiveStreamingReminder.Reset()
				if err := s.LiveStreamingReminder.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"live_streaming_reminder\"")
			}
		case "live_streaming_service":
			if err := func() error {
				s.LiveStreamingService = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.LiveStreamingService = append(s.LiveStreamingService, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"live_streaming_service\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq0InMeetingWebinarLiveStreaming")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq0InMeetingWebinarLiveStreaming) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq0InMeetingWebinarLiveStreaming) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq0InMeetingWebinarPolling) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq0InMeetingWebinarPolling) encodeFields(e *jx.Encoder) {
	{
		if s.AdvancedPolls.Set {
			e.FieldStart("advanced_polls")
			s.AdvancedPolls.Encode(e)
		}
	}
	{
		if s.AllowAlternativeHostToAddEdit.Set {
			e.FieldStart("allow_alternative_host_to_add_edit")
			s.AllowAlternativeHostToAddEdit.Encode(e)
		}
	}
	{
		if s.ManageSavedPollsAndQuizzes.Set {
			e.FieldStart("manage_saved_polls_and_quizzes")
			s.ManageSavedPollsAndQuizzes.Encode(e)
		}
	}
	{
		if s.RequireAnswersToBeAnonymous.Set {
			e.FieldStart("require_answers_to_be_anonymous")
			s.RequireAnswersToBeAnonymous.Encode(e)
		}
	}
	{
		if s.AllowHostToUploadImage.Set {
			e.FieldStart("allow_host_to_upload_image")
			s.AllowHostToUploadImage.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq0InMeetingWebinarPolling = [6]string{
	0: "advanced_polls",
	1: "allow_alternative_host_to_add_edit",
	2: "manage_saved_polls_and_quizzes",
	3: "require_answers_to_be_anonymous",
	4: "allow_host_to_upload_image",
	5: "enable",
}

// Decode decodes UpdateGroupSettingsReq0InMeetingWebinarPolling from json.
func (s *UpdateGroupSettingsReq0InMeetingWebinarPolling) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq0InMeetingWebinarPolling to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "advanced_polls":
			if err := func() error {
				s.AdvancedPolls.Reset()
				if err := s.AdvancedPolls.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"advanced_polls\"")
			}
		case "allow_alternative_host_to_add_edit":
			if err := func() error {
				s.AllowAlternativeHostToAddEdit.Reset()
				if err := s.AllowAlternativeHostToAddEdit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_alternative_host_to_add_edit\"")
			}
		case "manage_saved_polls_and_quizzes":
			if err := func() error {
				s.ManageSavedPollsAndQuizzes.Reset()
				if err := s.ManageSavedPollsAndQuizzes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"manage_saved_polls_and_quizzes\"")
			}
		case "require_answers_to_be_anonymous":
			if err := func() error {
				s.RequireAnswersToBeAnonymous.Reset()
				if err := s.RequireAnswersToBeAnonymous.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_answers_to_be_anonymous\"")
			}
		case "allow_host_to_upload_image":
			if err := func() error {
				s.AllowHostToUploadImage.Reset()
				if err := s.AllowHostToUploadImage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_host_to_upload_image\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq0InMeetingWebinarPolling")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq0InMeetingWebinarPolling) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq0InMeetingWebinarPolling) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq0OtherOptions) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq0OtherOptions) encodeFields(e *jx.Encoder) {
	{
		if s.AllowUsersContactSupportViaChat.Set {
			e.FieldStart("allow_users_contact_support_via_chat")
			s.AllowUsersContactSupportViaChat.Encode(e)
		}
	}
	{
		if s.BlurSnapshot.Set {
			e.FieldStart("blur_snapshot")
			s.BlurSnapshot.Encode(e)
		}
	}
	{
		if s.WebinarRegistrationOptions.Set {
			e.FieldStart("webinar_registration_options")
			s.WebinarRegistrationOptions.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq0OtherOptions = [3]string{
	0: "allow_users_contact_support_via_chat",
	1: "blur_snapshot",
	2: "webinar_registration_options",
}

// Decode decodes UpdateGroupSettingsReq0OtherOptions from json.
func (s *UpdateGroupSettingsReq0OtherOptions) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq0OtherOptions to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allow_users_contact_support_via_chat":
			if err := func() error {
				s.AllowUsersContactSupportViaChat.Reset()
				if err := s.AllowUsersContactSupportViaChat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_users_contact_support_via_chat\"")
			}
		case "blur_snapshot":
			if err := func() error {
				s.BlurSnapshot.Reset()
				if err := s.BlurSnapshot.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"blur_snapshot\"")
			}
		case "webinar_registration_options":
			if err := func() error {
				s.WebinarRegistrationOptions.Reset()
				if err := s.WebinarRegistrationOptions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webinar_registration_options\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq0OtherOptions")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq0OtherOptions) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq0OtherOptions) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq0OtherOptionsWebinarRegistrationOptions) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq0OtherOptionsWebinarRegistrationOptions) encodeFields(e *jx.Encoder) {
	{
		if s.AllowHostToEnableJoinInfo.Set {
			e.FieldStart("allow_host_to_enable_join_info")
			s.AllowHostToEnableJoinInfo.Encode(e)
		}
	}
	{
		if s.AllowHostToEnableSocialShareButtons.Set {
			e.FieldStart("allow_host_to_enable_social_share_buttons")
			s.AllowHostToEnableSocialShareButtons.Encode(e)
		}
	}
	{
		if s.EnableCustomQuestions.Set {
			e.FieldStart("enable_custom_questions")
			s.EnableCustomQuestions.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq0OtherOptionsWebinarRegistrationOptions = [3]string{
	0: "allow_host_to_enable_join_info",
	1: "allow_host_to_enable_social_share_buttons",
	2: "enable_custom_questions",
}

// Decode decodes UpdateGroupSettingsReq0OtherOptionsWebinarRegistrationOptions from json.
func (s *UpdateGroupSettingsReq0OtherOptionsWebinarRegistrationOptions) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq0OtherOptionsWebinarRegistrationOptions to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allow_host_to_enable_join_info":
			if err := func() error {
				s.AllowHostToEnableJoinInfo.Reset()
				if err := s.AllowHostToEnableJoinInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_host_to_enable_join_info\"")
			}
		case "allow_host_to_enable_social_share_buttons":
			if err := func() error {
				s.AllowHostToEnableSocialShareButtons.Reset()
				if err := s.AllowHostToEnableSocialShareButtons.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_host_to_enable_social_share_buttons\"")
			}
		case "enable_custom_questions":
			if err := func() error {
				s.EnableCustomQuestions.Reset()
				if err := s.EnableCustomQuestions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable_custom_questions\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq0OtherOptionsWebinarRegistrationOptions")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq0OtherOptionsWebinarRegistrationOptions) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq0OtherOptionsWebinarRegistrationOptions) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq0Profile) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq0Profile) encodeFields(e *jx.Encoder) {
	{
		if s.RecordingStorageLocation.Set {
			e.FieldStart("recording_storage_location")
			s.RecordingStorageLocation.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq0Profile = [1]string{
	0: "recording_storage_location",
}

// Decode decodes UpdateGroupSettingsReq0Profile from json.
func (s *UpdateGroupSettingsReq0Profile) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq0Profile to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "recording_storage_location":
			if err := func() error {
				s.RecordingStorageLocation.Reset()
				if err := s.RecordingStorageLocation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_storage_location\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq0Profile")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq0Profile) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq0Profile) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq0ProfileRecordingStorageLocation) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq0ProfileRecordingStorageLocation) encodeFields(e *jx.Encoder) {
	{
		if s.AllowedValues != nil {
			e.FieldStart("allowed_values")
			e.ArrStart()
			for _, elem := range s.AllowedValues {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Value.Set {
			e.FieldStart("value")
			s.Value.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq0ProfileRecordingStorageLocation = [2]string{
	0: "allowed_values",
	1: "value",
}

// Decode decodes UpdateGroupSettingsReq0ProfileRecordingStorageLocation from json.
func (s *UpdateGroupSettingsReq0ProfileRecordingStorageLocation) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq0ProfileRecordingStorageLocation to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allowed_values":
			if err := func() error {
				s.AllowedValues = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.AllowedValues = append(s.AllowedValues, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allowed_values\"")
			}
		case "value":
			if err := func() error {
				s.Value.Reset()
				if err := s.Value.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"value\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq0ProfileRecordingStorageLocation")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq0ProfileRecordingStorageLocation) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq0ProfileRecordingStorageLocation) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq0Recording) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq0Recording) encodeFields(e *jx.Encoder) {
	{
		if s.AccountUserAccessRecording.Set {
			e.FieldStart("account_user_access_recording")
			s.AccountUserAccessRecording.Encode(e)
		}
	}
	{
		if s.Archive.Set {
			e.FieldStart("archive")
			s.Archive.Encode(e)
		}
	}
	{
		if s.AutoRecording.Set {
			e.FieldStart("auto_recording")
			s.AutoRecording.Encode(e)
		}
	}
	{
		if s.CloudRecording.Set {
			e.FieldStart("cloud_recording")
			s.CloudRecording.Encode(e)
		}
	}
	{
		if s.CloudRecordingDownload.Set {
			e.FieldStart("cloud_recording_download")
			s.CloudRecordingDownload.Encode(e)
		}
	}
	{
		if s.CloudRecordingDownloadHost.Set {
			e.FieldStart("cloud_recording_download_host")
			s.CloudRecordingDownloadHost.Encode(e)
		}
	}
	{
		if s.HostDeleteCloudRecording.Set {
			e.FieldStart("host_delete_cloud_recording")
			s.HostDeleteCloudRecording.Encode(e)
		}
	}
	{
		if s.RecordFilesSeparately.Set {
			e.FieldStart("record_files_separately")
			s.RecordFilesSeparately.Encode(e)
		}
	}
	{
		if s.DisplayParticipantName.Set {
			e.FieldStart("display_participant_name")
			s.DisplayParticipantName.Encode(e)
		}
	}
	{
		if s.RecordingThumbnails.Set {
			e.FieldStart("recording_thumbnails")
			s.RecordingThumbnails.Encode(e)
		}
	}
	{
		if s.OptimizeRecordingFor3rdPartyVideoEditor.Set {
			e.FieldStart("optimize_recording_for_3rd_party_video_editor")
			s.OptimizeRecordingFor3rdPartyVideoEditor.Encode(e)
		}
	}
	{
		if s.RecordingHighlight.Set {
			e.FieldStart("recording_highlight")
			s.RecordingHighlight.Encode(e)
		}
	}
	{
		if s.SavePanelistChat.Set {
			e.FieldStart("save_panelist_chat")
			s.SavePanelistChat.Encode(e)
		}
	}
	{
		if s.SavePollResults.Set {
			e.FieldStart("save_poll_results")
			s.SavePollResults.Encode(e)
		}
	}
	{
		if s.SaveCloseCaption.Set {
			e.FieldStart("save_close_caption")
			s.SaveCloseCaption.Encode(e)
		}
	}
	{
		if s.IPAddressAccessControl.Set {
			e.FieldStart("ip_address_access_control")
			s.IPAddressAccessControl.Encode(e)
		}
	}
	{
		if s.LocalRecording.Set {
			e.FieldStart("local_recording")
			s.LocalRecording.Encode(e)
		}
	}
	{
		if s.PreventHostAccessRecording.Set {
			e.FieldStart("prevent_host_access_recording")
			s.PreventHostAccessRecording.Encode(e)
		}
	}
	{
		if s.RecordAudioFile.Set {
			e.FieldStart("record_audio_file")
			s.RecordAudioFile.Encode(e)
		}
	}
	{
		if s.RecordGalleryView.Set {
			e.FieldStart("record_gallery_view")
			s.RecordGalleryView.Encode(e)
		}
	}
	{
		if s.RecordSpeakerView.Set {
			e.FieldStart("record_speaker_view")
			s.RecordSpeakerView.Encode(e)
		}
	}
	{
		if s.RecordingAudioTranscript.Set {
			e.FieldStart("recording_audio_transcript")
			s.RecordingAudioTranscript.Encode(e)
		}
	}
	{
		if s.SmartRecording.Set {
			e.FieldStart("smart_recording")
			s.SmartRecording.Encode(e)
		}
	}
	{
		if s.SaveChatText.Set {
			e.FieldStart("save_chat_text")
			s.SaveChatText.Encode(e)
		}
	}
	{
		if s.ShowTimestamp.Set {
			e.FieldStart("show_timestamp")
			s.ShowTimestamp.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq0Recording = [25]string{
	0:  "account_user_access_recording",
	1:  "archive",
	2:  "auto_recording",
	3:  "cloud_recording",
	4:  "cloud_recording_download",
	5:  "cloud_recording_download_host",
	6:  "host_delete_cloud_recording",
	7:  "record_files_separately",
	8:  "display_participant_name",
	9:  "recording_thumbnails",
	10: "optimize_recording_for_3rd_party_video_editor",
	11: "recording_highlight",
	12: "save_panelist_chat",
	13: "save_poll_results",
	14: "save_close_caption",
	15: "ip_address_access_control",
	16: "local_recording",
	17: "prevent_host_access_recording",
	18: "record_audio_file",
	19: "record_gallery_view",
	20: "record_speaker_view",
	21: "recording_audio_transcript",
	22: "smart_recording",
	23: "save_chat_text",
	24: "show_timestamp",
}

// Decode decodes UpdateGroupSettingsReq0Recording from json.
func (s *UpdateGroupSettingsReq0Recording) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq0Recording to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "account_user_access_recording":
			if err := func() error {
				s.AccountUserAccessRecording.Reset()
				if err := s.AccountUserAccessRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_user_access_recording\"")
			}
		case "archive":
			if err := func() error {
				s.Archive.Reset()
				if err := s.Archive.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"archive\"")
			}
		case "auto_recording":
			if err := func() error {
				s.AutoRecording.Reset()
				if err := s.AutoRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_recording\"")
			}
		case "cloud_recording":
			if err := func() error {
				s.CloudRecording.Reset()
				if err := s.CloudRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cloud_recording\"")
			}
		case "cloud_recording_download":
			if err := func() error {
				s.CloudRecordingDownload.Reset()
				if err := s.CloudRecordingDownload.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cloud_recording_download\"")
			}
		case "cloud_recording_download_host":
			if err := func() error {
				s.CloudRecordingDownloadHost.Reset()
				if err := s.CloudRecordingDownloadHost.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cloud_recording_download_host\"")
			}
		case "host_delete_cloud_recording":
			if err := func() error {
				s.HostDeleteCloudRecording.Reset()
				if err := s.HostDeleteCloudRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"host_delete_cloud_recording\"")
			}
		case "record_files_separately":
			if err := func() error {
				s.RecordFilesSeparately.Reset()
				if err := s.RecordFilesSeparately.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"record_files_separately\"")
			}
		case "display_participant_name":
			if err := func() error {
				s.DisplayParticipantName.Reset()
				if err := s.DisplayParticipantName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_participant_name\"")
			}
		case "recording_thumbnails":
			if err := func() error {
				s.RecordingThumbnails.Reset()
				if err := s.RecordingThumbnails.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_thumbnails\"")
			}
		case "optimize_recording_for_3rd_party_video_editor":
			if err := func() error {
				s.OptimizeRecordingFor3rdPartyVideoEditor.Reset()
				if err := s.OptimizeRecordingFor3rdPartyVideoEditor.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optimize_recording_for_3rd_party_video_editor\"")
			}
		case "recording_highlight":
			if err := func() error {
				s.RecordingHighlight.Reset()
				if err := s.RecordingHighlight.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_highlight\"")
			}
		case "save_panelist_chat":
			if err := func() error {
				s.SavePanelistChat.Reset()
				if err := s.SavePanelistChat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"save_panelist_chat\"")
			}
		case "save_poll_results":
			if err := func() error {
				s.SavePollResults.Reset()
				if err := s.SavePollResults.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"save_poll_results\"")
			}
		case "save_close_caption":
			if err := func() error {
				s.SaveCloseCaption.Reset()
				if err := s.SaveCloseCaption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"save_close_caption\"")
			}
		case "ip_address_access_control":
			if err := func() error {
				s.IPAddressAccessControl.Reset()
				if err := s.IPAddressAccessControl.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ip_address_access_control\"")
			}
		case "local_recording":
			if err := func() error {
				s.LocalRecording.Reset()
				if err := s.LocalRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"local_recording\"")
			}
		case "prevent_host_access_recording":
			if err := func() error {
				s.PreventHostAccessRecording.Reset()
				if err := s.PreventHostAccessRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"prevent_host_access_recording\"")
			}
		case "record_audio_file":
			if err := func() error {
				s.RecordAudioFile.Reset()
				if err := s.RecordAudioFile.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"record_audio_file\"")
			}
		case "record_gallery_view":
			if err := func() error {
				s.RecordGalleryView.Reset()
				if err := s.RecordGalleryView.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"record_gallery_view\"")
			}
		case "record_speaker_view":
			if err := func() error {
				s.RecordSpeakerView.Reset()
				if err := s.RecordSpeakerView.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"record_speaker_view\"")
			}
		case "recording_audio_transcript":
			if err := func() error {
				s.RecordingAudioTranscript.Reset()
				if err := s.RecordingAudioTranscript.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_audio_transcript\"")
			}
		case "smart_recording":
			if err := func() error {
				s.SmartRecording.Reset()
				if err := s.SmartRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"smart_recording\"")
			}
		case "save_chat_text":
			if err := func() error {
				s.SaveChatText.Reset()
				if err := s.SaveChatText.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"save_chat_text\"")
			}
		case "show_timestamp":
			if err := func() error {
				s.ShowTimestamp.Reset()
				if err := s.ShowTimestamp.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"show_timestamp\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq0Recording")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq0Recording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq0Recording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq0RecordingArchive) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq0RecordingArchive) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Settings.Set {
			e.FieldStart("settings")
			s.Settings.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq0RecordingArchive = [3]string{
	0: "enable",
	1: "settings",
	2: "type",
}

// Decode decodes UpdateGroupSettingsReq0RecordingArchive from json.
func (s *UpdateGroupSettingsReq0RecordingArchive) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq0RecordingArchive to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "settings":
			if err := func() error {
				s.Settings.Reset()
				if err := s.Settings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"settings\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq0RecordingArchive")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq0RecordingArchive) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq0RecordingArchive) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq0RecordingArchiveSettings) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq0RecordingArchiveSettings) encodeFields(e *jx.Encoder) {
	{
		if s.AudioFile.Set {
			e.FieldStart("audio_file")
			s.AudioFile.Encode(e)
		}
	}
	{
		if s.CcTranscriptFile.Set {
			e.FieldStart("cc_transcript_file")
			s.CcTranscriptFile.Encode(e)
		}
	}
	{
		if s.ChatFile.Set {
			e.FieldStart("chat_file")
			s.ChatFile.Encode(e)
		}
	}
	{
		if s.ChatWithSenderEmail.Set {
			e.FieldStart("chat_with_sender_email")
			s.ChatWithSenderEmail.Encode(e)
		}
	}
	{
		if s.VideoFile.Set {
			e.FieldStart("video_file")
			s.VideoFile.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq0RecordingArchiveSettings = [5]string{
	0: "audio_file",
	1: "cc_transcript_file",
	2: "chat_file",
	3: "chat_with_sender_email",
	4: "video_file",
}

// Decode decodes UpdateGroupSettingsReq0RecordingArchiveSettings from json.
func (s *UpdateGroupSettingsReq0RecordingArchiveSettings) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq0RecordingArchiveSettings to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_file":
			if err := func() error {
				s.AudioFile.Reset()
				if err := s.AudioFile.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_file\"")
			}
		case "cc_transcript_file":
			if err := func() error {
				s.CcTranscriptFile.Reset()
				if err := s.CcTranscriptFile.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cc_transcript_file\"")
			}
		case "chat_file":
			if err := func() error {
				s.ChatFile.Reset()
				if err := s.ChatFile.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"chat_file\"")
			}
		case "chat_with_sender_email":
			if err := func() error {
				s.ChatWithSenderEmail.Reset()
				if err := s.ChatWithSenderEmail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"chat_with_sender_email\"")
			}
		case "video_file":
			if err := func() error {
				s.VideoFile.Reset()
				if err := s.VideoFile.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video_file\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq0RecordingArchiveSettings")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq0RecordingArchiveSettings) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq0RecordingArchiveSettings) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq0RecordingIPAddressAccessControl) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq0RecordingIPAddressAccessControl) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.IPAddressesOrRanges.Set {
			e.FieldStart("ip_addresses_or_ranges")
			s.IPAddressesOrRanges.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq0RecordingIPAddressAccessControl = [2]string{
	0: "enable",
	1: "ip_addresses_or_ranges",
}

// Decode decodes UpdateGroupSettingsReq0RecordingIPAddressAccessControl from json.
func (s *UpdateGroupSettingsReq0RecordingIPAddressAccessControl) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq0RecordingIPAddressAccessControl to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "ip_addresses_or_ranges":
			if err := func() error {
				s.IPAddressesOrRanges.Reset()
				if err := s.IPAddressesOrRanges.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ip_addresses_or_ranges\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq0RecordingIPAddressAccessControl")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq0RecordingIPAddressAccessControl) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq0RecordingIPAddressAccessControl) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq0RecordingRecordFilesSeparately) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq0RecordingRecordFilesSeparately) encodeFields(e *jx.Encoder) {
	{
		if s.ActiveSpeaker.Set {
			e.FieldStart("active_speaker")
			s.ActiveSpeaker.Encode(e)
		}
	}
	{
		if s.GalleryView.Set {
			e.FieldStart("gallery_view")
			s.GalleryView.Encode(e)
		}
	}
	{
		if s.SharedScreen.Set {
			e.FieldStart("shared_screen")
			s.SharedScreen.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq0RecordingRecordFilesSeparately = [3]string{
	0: "active_speaker",
	1: "gallery_view",
	2: "shared_screen",
}

// Decode decodes UpdateGroupSettingsReq0RecordingRecordFilesSeparately from json.
func (s *UpdateGroupSettingsReq0RecordingRecordFilesSeparately) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq0RecordingRecordFilesSeparately to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "active_speaker":
			if err := func() error {
				s.ActiveSpeaker.Reset()
				if err := s.ActiveSpeaker.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"active_speaker\"")
			}
		case "gallery_view":
			if err := func() error {
				s.GalleryView.Reset()
				if err := s.GalleryView.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"gallery_view\"")
			}
		case "shared_screen":
			if err := func() error {
				s.SharedScreen.Reset()
				if err := s.SharedScreen.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shared_screen\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq0RecordingRecordFilesSeparately")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq0RecordingRecordFilesSeparately) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq0RecordingRecordFilesSeparately) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq0RecordingSmartRecording) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq0RecordingSmartRecording) encodeFields(e *jx.Encoder) {
	{
		if s.CreateRecordingHighlights.Set {
			e.FieldStart("create_recording_highlights")
			s.CreateRecordingHighlights.Encode(e)
		}
	}
	{
		if s.CreateSmartChapters.Set {
			e.FieldStart("create_smart_chapters")
			s.CreateSmartChapters.Encode(e)
		}
	}
	{
		if s.CreateNextSteps.Set {
			e.FieldStart("create_next_steps")
			s.CreateNextSteps.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq0RecordingSmartRecording = [3]string{
	0: "create_recording_highlights",
	1: "create_smart_chapters",
	2: "create_next_steps",
}

// Decode decodes UpdateGroupSettingsReq0RecordingSmartRecording from json.
func (s *UpdateGroupSettingsReq0RecordingSmartRecording) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq0RecordingSmartRecording to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "create_recording_highlights":
			if err := func() error {
				s.CreateRecordingHighlights.Reset()
				if err := s.CreateRecordingHighlights.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"create_recording_highlights\"")
			}
		case "create_smart_chapters":
			if err := func() error {
				s.CreateSmartChapters.Reset()
				if err := s.CreateSmartChapters.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"create_smart_chapters\"")
			}
		case "create_next_steps":
			if err := func() error {
				s.CreateNextSteps.Reset()
				if err := s.CreateNextSteps.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"create_next_steps\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq0RecordingSmartRecording")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq0RecordingSmartRecording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq0RecordingSmartRecording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq0ScheduleMeeting) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq0ScheduleMeeting) encodeFields(e *jx.Encoder) {
	{
		if s.AudioType.Set {
			e.FieldStart("audio_type")
			s.AudioType.Encode(e)
		}
	}
	{
		if s.EmbedPasswordInJoinLink.Set {
			e.FieldStart("embed_password_in_join_link")
			s.EmbedPasswordInJoinLink.Encode(e)
		}
	}
	{
		if s.ForcePmiJbhPassword.Set {
			e.FieldStart("force_pmi_jbh_password")
			s.ForcePmiJbhPassword.Encode(e)
		}
	}
	{
		if s.HostVideo.Set {
			e.FieldStart("host_video")
			s.HostVideo.Encode(e)
		}
	}
	{
		if s.JoinBeforeHost.Set {
			e.FieldStart("join_before_host")
			s.JoinBeforeHost.Encode(e)
		}
	}
	{
		if s.MuteUponEntry.Set {
			e.FieldStart("mute_upon_entry")
			s.MuteUponEntry.Encode(e)
		}
	}
	{
		if s.ParticipantVideo.Set {
			e.FieldStart("participant_video")
			s.ParticipantVideo.Encode(e)
		}
	}
	{
		if s.PstnPasswordProtected.Set {
			e.FieldStart("pstn_password_protected")
			s.PstnPasswordProtected.Encode(e)
		}
	}
	{
		if s.RequirePasswordForAllMeetings.Set {
			e.FieldStart("require_password_for_all_meetings")
			s.RequirePasswordForAllMeetings.Encode(e)
		}
	}
	{
		if s.RequirePasswordForInstantMeetings.Set {
			e.FieldStart("require_password_for_instant_meetings")
			s.RequirePasswordForInstantMeetings.Encode(e)
		}
	}
	{
		if s.RequirePasswordForPmiMeetings.Set {
			e.FieldStart("require_password_for_pmi_meetings")
			s.RequirePasswordForPmiMeetings.Encode(e)
		}
	}
	{
		if s.RequirePasswordForScheduledMeetings.Set {
			e.FieldStart("require_password_for_scheduled_meetings")
			s.RequirePasswordForScheduledMeetings.Encode(e)
		}
	}
	{
		if s.RequirePasswordForSchedulingNewMeetings.Set {
			e.FieldStart("require_password_for_scheduling_new_meetings")
			s.RequirePasswordForSchedulingNewMeetings.Encode(e)
		}
	}
	{
		if s.UpcomingMeetingReminder.Set {
			e.FieldStart("upcoming_meeting_reminder")
			s.UpcomingMeetingReminder.Encode(e)
		}
	}
	{
		if s.AlwaysDisplayZoomMeetingAsTopic.Set {
			e.FieldStart("always_display_zoom_meeting_as_topic")
			s.AlwaysDisplayZoomMeetingAsTopic.Encode(e)
		}
	}
	{
		if s.AlwaysDisplayZoomWebinarAsTopic.Set {
			e.FieldStart("always_display_zoom_webinar_as_topic")
			s.AlwaysDisplayZoomWebinarAsTopic.Encode(e)
		}
	}
	{
		if s.ContinuousMeetingChat.Set {
			e.FieldStart("continuous_meeting_chat")
			s.ContinuousMeetingChat.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq0ScheduleMeeting = [17]string{
	0:  "audio_type",
	1:  "embed_password_in_join_link",
	2:  "force_pmi_jbh_password",
	3:  "host_video",
	4:  "join_before_host",
	5:  "mute_upon_entry",
	6:  "participant_video",
	7:  "pstn_password_protected",
	8:  "require_password_for_all_meetings",
	9:  "require_password_for_instant_meetings",
	10: "require_password_for_pmi_meetings",
	11: "require_password_for_scheduled_meetings",
	12: "require_password_for_scheduling_new_meetings",
	13: "upcoming_meeting_reminder",
	14: "always_display_zoom_meeting_as_topic",
	15: "always_display_zoom_webinar_as_topic",
	16: "continuous_meeting_chat",
}

// Decode decodes UpdateGroupSettingsReq0ScheduleMeeting from json.
func (s *UpdateGroupSettingsReq0ScheduleMeeting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq0ScheduleMeeting to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_type":
			if err := func() error {
				s.AudioType.Reset()
				if err := s.AudioType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_type\"")
			}
		case "embed_password_in_join_link":
			if err := func() error {
				s.EmbedPasswordInJoinLink.Reset()
				if err := s.EmbedPasswordInJoinLink.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"embed_password_in_join_link\"")
			}
		case "force_pmi_jbh_password":
			if err := func() error {
				s.ForcePmiJbhPassword.Reset()
				if err := s.ForcePmiJbhPassword.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"force_pmi_jbh_password\"")
			}
		case "host_video":
			if err := func() error {
				s.HostVideo.Reset()
				if err := s.HostVideo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"host_video\"")
			}
		case "join_before_host":
			if err := func() error {
				s.JoinBeforeHost.Reset()
				if err := s.JoinBeforeHost.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"join_before_host\"")
			}
		case "mute_upon_entry":
			if err := func() error {
				s.MuteUponEntry.Reset()
				if err := s.MuteUponEntry.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mute_upon_entry\"")
			}
		case "participant_video":
			if err := func() error {
				s.ParticipantVideo.Reset()
				if err := s.ParticipantVideo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"participant_video\"")
			}
		case "pstn_password_protected":
			if err := func() error {
				s.PstnPasswordProtected.Reset()
				if err := s.PstnPasswordProtected.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pstn_password_protected\"")
			}
		case "require_password_for_all_meetings":
			if err := func() error {
				s.RequirePasswordForAllMeetings.Reset()
				if err := s.RequirePasswordForAllMeetings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_password_for_all_meetings\"")
			}
		case "require_password_for_instant_meetings":
			if err := func() error {
				s.RequirePasswordForInstantMeetings.Reset()
				if err := s.RequirePasswordForInstantMeetings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_password_for_instant_meetings\"")
			}
		case "require_password_for_pmi_meetings":
			if err := func() error {
				s.RequirePasswordForPmiMeetings.Reset()
				if err := s.RequirePasswordForPmiMeetings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_password_for_pmi_meetings\"")
			}
		case "require_password_for_scheduled_meetings":
			if err := func() error {
				s.RequirePasswordForScheduledMeetings.Reset()
				if err := s.RequirePasswordForScheduledMeetings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_password_for_scheduled_meetings\"")
			}
		case "require_password_for_scheduling_new_meetings":
			if err := func() error {
				s.RequirePasswordForSchedulingNewMeetings.Reset()
				if err := s.RequirePasswordForSchedulingNewMeetings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_password_for_scheduling_new_meetings\"")
			}
		case "upcoming_meeting_reminder":
			if err := func() error {
				s.UpcomingMeetingReminder.Reset()
				if err := s.UpcomingMeetingReminder.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"upcoming_meeting_reminder\"")
			}
		case "always_display_zoom_meeting_as_topic":
			if err := func() error {
				s.AlwaysDisplayZoomMeetingAsTopic.Reset()
				if err := s.AlwaysDisplayZoomMeetingAsTopic.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"always_display_zoom_meeting_as_topic\"")
			}
		case "always_display_zoom_webinar_as_topic":
			if err := func() error {
				s.AlwaysDisplayZoomWebinarAsTopic.Reset()
				if err := s.AlwaysDisplayZoomWebinarAsTopic.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"always_display_zoom_webinar_as_topic\"")
			}
		case "continuous_meeting_chat":
			if err := func() error {
				s.ContinuousMeetingChat.Reset()
				if err := s.ContinuousMeetingChat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"continuous_meeting_chat\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq0ScheduleMeeting")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq0ScheduleMeeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq0ScheduleMeeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.DisplayTopicForScheduledMeetings.Set {
			e.FieldStart("display_topic_for_scheduled_meetings")
			s.DisplayTopicForScheduledMeetings.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic = [2]string{
	0: "enable",
	1: "display_topic_for_scheduled_meetings",
}

// Decode decodes UpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic from json.
func (s *UpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "display_topic_for_scheduled_meetings":
			if err := func() error {
				s.DisplayTopicForScheduledMeetings.Reset()
				if err := s.DisplayTopicForScheduledMeetings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_topic_for_scheduled_meetings\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomMeetingAsTopic) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.DisplayTopicForScheduledWebinars.Set {
			e.FieldStart("display_topic_for_scheduled_webinars")
			s.DisplayTopicForScheduledWebinars.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic = [2]string{
	0: "enable",
	1: "display_topic_for_scheduled_webinars",
}

// Decode decodes UpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic from json.
func (s *UpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "display_topic_for_scheduled_webinars":
			if err := func() error {
				s.DisplayTopicForScheduledWebinars.Reset()
				if err := s.DisplayTopicForScheduledWebinars.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_topic_for_scheduled_webinars\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq0ScheduleMeetingAlwaysDisplayZoomWebinarAsTopic) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq0ScheduleMeetingContinuousMeetingChat) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq0ScheduleMeetingContinuousMeetingChat) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.CanAddExternalUsers.Set {
			e.FieldStart("can_add_external_users")
			s.CanAddExternalUsers.Encode(e)
		}
	}
	{
		if s.AutoAddInvitedExternalUsers.Set {
			e.FieldStart("auto_add_invited_external_users")
			s.AutoAddInvitedExternalUsers.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq0ScheduleMeetingContinuousMeetingChat = [3]string{
	0: "enable",
	1: "can_add_external_users",
	2: "auto_add_invited_external_users",
}

// Decode decodes UpdateGroupSettingsReq0ScheduleMeetingContinuousMeetingChat from json.
func (s *UpdateGroupSettingsReq0ScheduleMeetingContinuousMeetingChat) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq0ScheduleMeetingContinuousMeetingChat to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "can_add_external_users":
			if err := func() error {
				s.CanAddExternalUsers.Reset()
				if err := s.CanAddExternalUsers.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"can_add_external_users\"")
			}
		case "auto_add_invited_external_users":
			if err := func() error {
				s.AutoAddInvitedExternalUsers.Reset()
				if err := s.AutoAddInvitedExternalUsers.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_add_invited_external_users\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq0ScheduleMeetingContinuousMeetingChat")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq0ScheduleMeetingContinuousMeetingChat) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq0ScheduleMeetingContinuousMeetingChat) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq0Telephony) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq0Telephony) encodeFields(e *jx.Encoder) {
	{
		if s.AudioConferenceInfo.Set {
			e.FieldStart("audio_conference_info")
			s.AudioConferenceInfo.Encode(e)
		}
	}
	{
		if s.ThirdPartyAudio.Set {
			e.FieldStart("third_party_audio")
			s.ThirdPartyAudio.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq0Telephony = [2]string{
	0: "audio_conference_info",
	1: "third_party_audio",
}

// Decode decodes UpdateGroupSettingsReq0Telephony from json.
func (s *UpdateGroupSettingsReq0Telephony) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq0Telephony to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_conference_info":
			if err := func() error {
				s.AudioConferenceInfo.Reset()
				if err := s.AudioConferenceInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_conference_info\"")
			}
		case "third_party_audio":
			if err := func() error {
				s.ThirdPartyAudio.Reset()
				if err := s.ThirdPartyAudio.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"third_party_audio\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq0Telephony")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq0Telephony) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq0Telephony) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq1) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq1) encodeFields(e *jx.Encoder) {
	{
		if s.AuthenticationOption.Set {
			e.FieldStart("authentication_option")
			s.AuthenticationOption.Encode(e)
		}
	}
	{
		if s.MeetingAuthentication.Set {
			e.FieldStart("meeting_authentication")
			s.MeetingAuthentication.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq1 = [2]string{
	0: "authentication_option",
	1: "meeting_authentication",
}

// Decode decodes UpdateGroupSettingsReq1 from json.
func (s *UpdateGroupSettingsReq1) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq1 to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "authentication_option":
			if err := func() error {
				s.AuthenticationOption.Reset()
				if err := s.AuthenticationOption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"authentication_option\"")
			}
		case "meeting_authentication":
			if err := func() error {
				s.MeetingAuthentication.Reset()
				if err := s.MeetingAuthentication.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_authentication\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq1")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq1) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq1) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq1AuthenticationOption) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq1AuthenticationOption) encodeFields(e *jx.Encoder) {
	{
		if s.Action.Set {
			e.FieldStart("action")
			s.Action.Encode(e)
		}
	}
	{
		if s.DefaultOption.Set {
			e.FieldStart("default_option")
			s.DefaultOption.Encode(e)
		}
	}
	{
		if s.Domains.Set {
			e.FieldStart("domains")
			s.Domains.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq1AuthenticationOption = [6]string{
	0: "action",
	1: "default_option",
	2: "domains",
	3: "id",
	4: "name",
	5: "type",
}

// Decode decodes UpdateGroupSettingsReq1AuthenticationOption from json.
func (s *UpdateGroupSettingsReq1AuthenticationOption) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq1AuthenticationOption to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "action":
			if err := func() error {
				s.Action.Reset()
				if err := s.Action.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"action\"")
			}
		case "default_option":
			if err := func() error {
				s.DefaultOption.Reset()
				if err := s.DefaultOption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"default_option\"")
			}
		case "domains":
			if err := func() error {
				s.Domains.Reset()
				if err := s.Domains.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"domains\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq1AuthenticationOption")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq1AuthenticationOption) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq1AuthenticationOption) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq2) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq2) encodeFields(e *jx.Encoder) {
	{
		if s.AuthenticationOption.Set {
			e.FieldStart("authentication_option")
			s.AuthenticationOption.Encode(e)
		}
	}
	{
		if s.RecordingAuthentication.Set {
			e.FieldStart("recording_authentication")
			s.RecordingAuthentication.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq2 = [2]string{
	0: "authentication_option",
	1: "recording_authentication",
}

// Decode decodes UpdateGroupSettingsReq2 from json.
func (s *UpdateGroupSettingsReq2) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq2 to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "authentication_option":
			if err := func() error {
				s.AuthenticationOption.Reset()
				if err := s.AuthenticationOption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"authentication_option\"")
			}
		case "recording_authentication":
			if err := func() error {
				s.RecordingAuthentication.Reset()
				if err := s.RecordingAuthentication.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_authentication\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq2")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq2) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq2) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq2AuthenticationOption) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq2AuthenticationOption) encodeFields(e *jx.Encoder) {
	{
		if s.Action.Set {
			e.FieldStart("action")
			s.Action.Encode(e)
		}
	}
	{
		if s.DefaultOption.Set {
			e.FieldStart("default_option")
			s.DefaultOption.Encode(e)
		}
	}
	{
		if s.Domains.Set {
			e.FieldStart("domains")
			s.Domains.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq2AuthenticationOption = [6]string{
	0: "action",
	1: "default_option",
	2: "domains",
	3: "id",
	4: "name",
	5: "type",
}

// Decode decodes UpdateGroupSettingsReq2AuthenticationOption from json.
func (s *UpdateGroupSettingsReq2AuthenticationOption) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq2AuthenticationOption to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "action":
			if err := func() error {
				s.Action.Reset()
				if err := s.Action.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"action\"")
			}
		case "default_option":
			if err := func() error {
				s.DefaultOption.Reset()
				if err := s.DefaultOption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"default_option\"")
			}
		case "domains":
			if err := func() error {
				s.Domains.Reset()
				if err := s.Domains.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"domains\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq2AuthenticationOption")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq2AuthenticationOption) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq2AuthenticationOption) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq3) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq3) encodeFields(e *jx.Encoder) {
	{
		if s.MeetingSecurity.Set {
			e.FieldStart("meeting_security")
			s.MeetingSecurity.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq3 = [1]string{
	0: "meeting_security",
}

// Decode decodes UpdateGroupSettingsReq3 from json.
func (s *UpdateGroupSettingsReq3) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq3 to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "meeting_security":
			if err := func() error {
				s.MeetingSecurity.Reset()
				if err := s.MeetingSecurity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_security\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq3")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq3) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq3) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq3MeetingSecurity) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq3MeetingSecurity) encodeFields(e *jx.Encoder) {
	{
		if s.AutoSecurity.Set {
			e.FieldStart("auto_security")
			s.AutoSecurity.Encode(e)
		}
	}
	{
		if s.BlockUserDomain.Set {
			e.FieldStart("block_user_domain")
			s.BlockUserDomain.Encode(e)
		}
	}
	{
		if s.BlockUserDomainList != nil {
			e.FieldStart("block_user_domain_list")
			e.ArrStart()
			for _, elem := range s.BlockUserDomainList {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ChatEtiquetteTool.Set {
			e.FieldStart("chat_etiquette_tool")
			s.ChatEtiquetteTool.Encode(e)
		}
	}
	{
		if s.EmbedPasswordInJoinLink.Set {
			e.FieldStart("embed_password_in_join_link")
			s.EmbedPasswordInJoinLink.Encode(e)
		}
	}
	{
		if s.EncryptionType.Set {
			e.FieldStart("encryption_type")
			s.EncryptionType.Encode(e)
		}
	}
	{
		if s.EndToEndEncryptedMeetings.Set {
			e.FieldStart("end_to_end_encrypted_meetings")
			s.EndToEndEncryptedMeetings.Encode(e)
		}
	}
	{
		if s.MeetingPassword.Set {
			e.FieldStart("meeting_password")
			s.MeetingPassword.Encode(e)
		}
	}
	{
		if s.MeetingPasswordRequirement.Set {
			e.FieldStart("meeting_password_requirement")
			s.MeetingPasswordRequirement.Encode(e)
		}
	}
	{
		if s.OnlyAuthenticatedCanJoinFromWebclient.Set {
			e.FieldStart("only_authenticated_can_join_from_webclient")
			s.OnlyAuthenticatedCanJoinFromWebclient.Encode(e)
		}
	}
	{
		if s.PhonePassword.Set {
			e.FieldStart("phone_password")
			s.PhonePassword.Encode(e)
		}
	}
	{
		if s.PmiPassword.Set {
			e.FieldStart("pmi_password")
			s.PmiPassword.Encode(e)
		}
	}
	{
		if s.RequirePasswordForScheduledMeeting.Set {
			e.FieldStart("require_password_for_scheduled_meeting")
			s.RequirePasswordForScheduledMeeting.Encode(e)
		}
	}
	{
		if s.RequirePasswordForScheduledWebinar.Set {
			e.FieldStart("require_password_for_scheduled_webinar")
			s.RequirePasswordForScheduledWebinar.Encode(e)
		}
	}
	{
		if s.WaitingRoom.Set {
			e.FieldStart("waiting_room")
			s.WaitingRoom.Encode(e)
		}
	}
	{
		if s.WaitingRoomSettings.Set {
			e.FieldStart("waiting_room_settings")
			s.WaitingRoomSettings.Encode(e)
		}
	}
	{
		if s.WebinarPassword.Set {
			e.FieldStart("webinar_password")
			s.WebinarPassword.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq3MeetingSecurity = [17]string{
	0:  "auto_security",
	1:  "block_user_domain",
	2:  "block_user_domain_list",
	3:  "chat_etiquette_tool",
	4:  "embed_password_in_join_link",
	5:  "encryption_type",
	6:  "end_to_end_encrypted_meetings",
	7:  "meeting_password",
	8:  "meeting_password_requirement",
	9:  "only_authenticated_can_join_from_webclient",
	10: "phone_password",
	11: "pmi_password",
	12: "require_password_for_scheduled_meeting",
	13: "require_password_for_scheduled_webinar",
	14: "waiting_room",
	15: "waiting_room_settings",
	16: "webinar_password",
}

// Decode decodes UpdateGroupSettingsReq3MeetingSecurity from json.
func (s *UpdateGroupSettingsReq3MeetingSecurity) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq3MeetingSecurity to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "auto_security":
			if err := func() error {
				s.AutoSecurity.Reset()
				if err := s.AutoSecurity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_security\"")
			}
		case "block_user_domain":
			if err := func() error {
				s.BlockUserDomain.Reset()
				if err := s.BlockUserDomain.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"block_user_domain\"")
			}
		case "block_user_domain_list":
			if err := func() error {
				s.BlockUserDomainList = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.BlockUserDomainList = append(s.BlockUserDomainList, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"block_user_domain_list\"")
			}
		case "chat_etiquette_tool":
			if err := func() error {
				s.ChatEtiquetteTool.Reset()
				if err := s.ChatEtiquetteTool.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"chat_etiquette_tool\"")
			}
		case "embed_password_in_join_link":
			if err := func() error {
				s.EmbedPasswordInJoinLink.Reset()
				if err := s.EmbedPasswordInJoinLink.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"embed_password_in_join_link\"")
			}
		case "encryption_type":
			if err := func() error {
				s.EncryptionType.Reset()
				if err := s.EncryptionType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"encryption_type\"")
			}
		case "end_to_end_encrypted_meetings":
			if err := func() error {
				s.EndToEndEncryptedMeetings.Reset()
				if err := s.EndToEndEncryptedMeetings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"end_to_end_encrypted_meetings\"")
			}
		case "meeting_password":
			if err := func() error {
				s.MeetingPassword.Reset()
				if err := s.MeetingPassword.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_password\"")
			}
		case "meeting_password_requirement":
			if err := func() error {
				s.MeetingPasswordRequirement.Reset()
				if err := s.MeetingPasswordRequirement.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_password_requirement\"")
			}
		case "only_authenticated_can_join_from_webclient":
			if err := func() error {
				s.OnlyAuthenticatedCanJoinFromWebclient.Reset()
				if err := s.OnlyAuthenticatedCanJoinFromWebclient.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"only_authenticated_can_join_from_webclient\"")
			}
		case "phone_password":
			if err := func() error {
				s.PhonePassword.Reset()
				if err := s.PhonePassword.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_password\"")
			}
		case "pmi_password":
			if err := func() error {
				s.PmiPassword.Reset()
				if err := s.PmiPassword.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pmi_password\"")
			}
		case "require_password_for_scheduled_meeting":
			if err := func() error {
				s.RequirePasswordForScheduledMeeting.Reset()
				if err := s.RequirePasswordForScheduledMeeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_password_for_scheduled_meeting\"")
			}
		case "require_password_for_scheduled_webinar":
			if err := func() error {
				s.RequirePasswordForScheduledWebinar.Reset()
				if err := s.RequirePasswordForScheduledWebinar.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_password_for_scheduled_webinar\"")
			}
		case "waiting_room":
			if err := func() error {
				s.WaitingRoom.Reset()
				if err := s.WaitingRoom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"waiting_room\"")
			}
		case "waiting_room_settings":
			if err := func() error {
				s.WaitingRoomSettings.Reset()
				if err := s.WaitingRoomSettings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"waiting_room_settings\"")
			}
		case "webinar_password":
			if err := func() error {
				s.WebinarPassword.Reset()
				if err := s.WebinarPassword.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webinar_password\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq3MeetingSecurity")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq3MeetingSecurity) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq3MeetingSecurity) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq3MeetingSecurityChatEtiquetteTool) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq3MeetingSecurityChatEtiquetteTool) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Policies != nil {
			e.FieldStart("policies")
			e.ArrStart()
			for _, elem := range s.Policies {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq3MeetingSecurityChatEtiquetteTool = [2]string{
	0: "enable",
	1: "policies",
}

// Decode decodes UpdateGroupSettingsReq3MeetingSecurityChatEtiquetteTool from json.
func (s *UpdateGroupSettingsReq3MeetingSecurityChatEtiquetteTool) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq3MeetingSecurityChatEtiquetteTool to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "policies":
			if err := func() error {
				s.Policies = make([]UpdateGroupSettingsReq3MeetingSecurityChatEtiquetteToolPoliciesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem UpdateGroupSettingsReq3MeetingSecurityChatEtiquetteToolPoliciesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Policies = append(s.Policies, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"policies\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq3MeetingSecurityChatEtiquetteTool")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq3MeetingSecurityChatEtiquetteTool) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq3MeetingSecurityChatEtiquetteTool) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq3MeetingSecurityChatEtiquetteToolPoliciesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq3MeetingSecurityChatEtiquetteToolPoliciesItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq3MeetingSecurityChatEtiquetteToolPoliciesItem = [2]string{
	0: "id",
	1: "status",
}

// Decode decodes UpdateGroupSettingsReq3MeetingSecurityChatEtiquetteToolPoliciesItem from json.
func (s *UpdateGroupSettingsReq3MeetingSecurityChatEtiquetteToolPoliciesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq3MeetingSecurityChatEtiquetteToolPoliciesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq3MeetingSecurityChatEtiquetteToolPoliciesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq3MeetingSecurityChatEtiquetteToolPoliciesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq3MeetingSecurityChatEtiquetteToolPoliciesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement) encodeFields(e *jx.Encoder) {
	{
		if s.ConsecutiveCharactersLength.Set {
			e.FieldStart("consecutive_characters_length")
			s.ConsecutiveCharactersLength.Encode(e)
		}
	}
	{
		if s.HaveLetter.Set {
			e.FieldStart("have_letter")
			s.HaveLetter.Encode(e)
		}
	}
	{
		if s.HaveNumber.Set {
			e.FieldStart("have_number")
			s.HaveNumber.Encode(e)
		}
	}
	{
		if s.HaveSpecialCharacter.Set {
			e.FieldStart("have_special_character")
			s.HaveSpecialCharacter.Encode(e)
		}
	}
	{
		if s.HaveUpperAndLowerCharacters.Set {
			e.FieldStart("have_upper_and_lower_characters")
			s.HaveUpperAndLowerCharacters.Encode(e)
		}
	}
	{
		if s.Length.Set {
			e.FieldStart("length")
			s.Length.Encode(e)
		}
	}
	{
		if s.OnlyAllowNumeric.Set {
			e.FieldStart("only_allow_numeric")
			s.OnlyAllowNumeric.Encode(e)
		}
	}
	{
		if s.WeakEnhanceDetection.Set {
			e.FieldStart("weak_enhance_detection")
			s.WeakEnhanceDetection.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement = [8]string{
	0: "consecutive_characters_length",
	1: "have_letter",
	2: "have_number",
	3: "have_special_character",
	4: "have_upper_and_lower_characters",
	5: "length",
	6: "only_allow_numeric",
	7: "weak_enhance_detection",
}

// Decode decodes UpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement from json.
func (s *UpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "consecutive_characters_length":
			if err := func() error {
				s.ConsecutiveCharactersLength.Reset()
				if err := s.ConsecutiveCharactersLength.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"consecutive_characters_length\"")
			}
		case "have_letter":
			if err := func() error {
				s.HaveLetter.Reset()
				if err := s.HaveLetter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"have_letter\"")
			}
		case "have_number":
			if err := func() error {
				s.HaveNumber.Reset()
				if err := s.HaveNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"have_number\"")
			}
		case "have_special_character":
			if err := func() error {
				s.HaveSpecialCharacter.Reset()
				if err := s.HaveSpecialCharacter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"have_special_character\"")
			}
		case "have_upper_and_lower_characters":
			if err := func() error {
				s.HaveUpperAndLowerCharacters.Reset()
				if err := s.HaveUpperAndLowerCharacters.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"have_upper_and_lower_characters\"")
			}
		case "length":
			if err := func() error {
				s.Length.Reset()
				if err := s.Length.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"length\"")
			}
		case "only_allow_numeric":
			if err := func() error {
				s.OnlyAllowNumeric.Reset()
				if err := s.OnlyAllowNumeric.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"only_allow_numeric\"")
			}
		case "weak_enhance_detection":
			if err := func() error {
				s.WeakEnhanceDetection.Reset()
				if err := s.WeakEnhanceDetection.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"weak_enhance_detection\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq3MeetingSecurityMeetingPasswordRequirement) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdateGroupSettingsReq3MeetingSecurityWaitingRoomSettings) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdateGroupSettingsReq3MeetingSecurityWaitingRoomSettings) encodeFields(e *jx.Encoder) {
	{
		if s.ParticipantsToPlaceInWaitingRoom.Set {
			e.FieldStart("participants_to_place_in_waiting_room")
			s.ParticipantsToPlaceInWaitingRoom.Encode(e)
		}
	}
	{
		if s.UsersWhoCanAdmitParticipantsFromWaitingRoom.Set {
			e.FieldStart("users_who_can_admit_participants_from_waiting_room")
			s.UsersWhoCanAdmitParticipantsFromWaitingRoom.Encode(e)
		}
	}
	{
		if s.WhitelistedDomainsForWaitingRoom.Set {
			e.FieldStart("whitelisted_domains_for_waiting_room")
			s.WhitelistedDomainsForWaitingRoom.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdateGroupSettingsReq3MeetingSecurityWaitingRoomSettings = [3]string{
	0: "participants_to_place_in_waiting_room",
	1: "users_who_can_admit_participants_from_waiting_room",
	2: "whitelisted_domains_for_waiting_room",
}

// Decode decodes UpdateGroupSettingsReq3MeetingSecurityWaitingRoomSettings from json.
func (s *UpdateGroupSettingsReq3MeetingSecurityWaitingRoomSettings) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateGroupSettingsReq3MeetingSecurityWaitingRoomSettings to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "participants_to_place_in_waiting_room":
			if err := func() error {
				s.ParticipantsToPlaceInWaitingRoom.Reset()
				if err := s.ParticipantsToPlaceInWaitingRoom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"participants_to_place_in_waiting_room\"")
			}
		case "users_who_can_admit_participants_from_waiting_room":
			if err := func() error {
				s.UsersWhoCanAdmitParticipantsFromWaitingRoom.Reset()
				if err := s.UsersWhoCanAdmitParticipantsFromWaitingRoom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"users_who_can_admit_participants_from_waiting_room\"")
			}
		case "whitelisted_domains_for_waiting_room":
			if err := func() error {
				s.WhitelistedDomainsForWaitingRoom.Reset()
				if err := s.WhitelistedDomainsForWaitingRoom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"whitelisted_domains_for_waiting_room\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdateGroupSettingsReq3MeetingSecurityWaitingRoomSettings")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdateGroupSettingsReq3MeetingSecurityWaitingRoomSettings) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateGroupSettingsReq3MeetingSecurityWaitingRoomSettings) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdatePresenceStatusReq as json.
func (s UpdatePresenceStatusReq) Encode(e *jx.Encoder) {
	switch s.Type {
	case UpdatePresenceStatusReq0UpdatePresenceStatusReq:
		s.UpdatePresenceStatusReq0.Encode(e)
	case UpdatePresenceStatusReq1UpdatePresenceStatusReq:
		s.UpdatePresenceStatusReq1.Encode(e)
	}
}

func (s UpdatePresenceStatusReq) encodeFields(e *jx.Encoder) {
	switch s.Type {
	case UpdatePresenceStatusReq0UpdatePresenceStatusReq:
		s.UpdatePresenceStatusReq0.encodeFields(e)
	case UpdatePresenceStatusReq1UpdatePresenceStatusReq:
		s.UpdatePresenceStatusReq1.encodeFields(e)
	}
}

// Decode decodes UpdatePresenceStatusReq from json.
func (s *UpdatePresenceStatusReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdatePresenceStatusReq to nil")
	}
	// Sum type fields.
	if typ := d.Next(); typ != jx.Object {
		return errors.Errorf("unexpected json type %q", typ)
	}

	var found bool
	if err := d.Capture(func(d *jx.Decoder) error {
		return d.ObjBytes(func(d *jx.Decoder, key []byte) error {
			switch string(key) {
			case "duration":
				match := UpdatePresenceStatusReq1UpdatePresenceStatusReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			}
			return d.Skip()
		})
	}); err != nil {
		return errors.Wrap(err, "capture")
	}
	if !found {
		s.Type = UpdatePresenceStatusReq0UpdatePresenceStatusReq
	}
	switch s.Type {
	case UpdatePresenceStatusReq0UpdatePresenceStatusReq:
		if err := s.UpdatePresenceStatusReq0.Decode(d); err != nil {
			return err
		}
	case UpdatePresenceStatusReq1UpdatePresenceStatusReq:
		if err := s.UpdatePresenceStatusReq1.Decode(d); err != nil {
			return err
		}
	default:
		return errors.Errorf("inferred invalid type: %s", s.Type)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s UpdatePresenceStatusReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdatePresenceStatusReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdatePresenceStatusReq0) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdatePresenceStatusReq0) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("status")
		e.Str(s.Status)
	}
}

var jsonFieldsNameOfUpdatePresenceStatusReq0 = [1]string{
	0: "status",
}

// Decode decodes UpdatePresenceStatusReq0 from json.
func (s *UpdatePresenceStatusReq0) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdatePresenceStatusReq0 to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "status":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Status = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdatePresenceStatusReq0")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfUpdatePresenceStatusReq0) {
					name = jsonFieldsNameOfUpdatePresenceStatusReq0[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdatePresenceStatusReq0) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdatePresenceStatusReq0) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UpdatePresenceStatusReq1) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UpdatePresenceStatusReq1) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("status")
		e.Str(s.Status)
	}
	{
		if s.Duration.Set {
			e.FieldStart("duration")
			s.Duration.Encode(e)
		}
	}
}

var jsonFieldsNameOfUpdatePresenceStatusReq1 = [2]string{
	0: "status",
	1: "duration",
}

// Decode decodes UpdatePresenceStatusReq1 from json.
func (s *UpdatePresenceStatusReq1) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdatePresenceStatusReq1 to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "status":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Status = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "duration":
			if err := func() error {
				s.Duration.Reset()
				if err := s.Duration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"duration\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UpdatePresenceStatusReq1")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfUpdatePresenceStatusReq1) {
					name = jsonFieldsNameOfUpdatePresenceStatusReq1[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UpdatePresenceStatusReq1) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdatePresenceStatusReq1) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UploadGroupVBCreated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UploadGroupVBCreated) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.IsDefault.Set {
			e.FieldStart("is_default")
			s.IsDefault.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Size.Set {
			e.FieldStart("size")
			s.Size.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfUploadGroupVBCreated = [5]string{
	0: "id",
	1: "is_default",
	2: "name",
	3: "size",
	4: "type",
}

// Decode decodes UploadGroupVBCreated from json.
func (s *UploadGroupVBCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UploadGroupVBCreated to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "is_default":
			if err := func() error {
				s.IsDefault.Reset()
				if err := s.IsDefault.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"is_default\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "size":
			if err := func() error {
				s.Size.Reset()
				if err := s.Size.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UploadGroupVBCreated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UploadGroupVBCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UploadGroupVBCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UploadVBuserCreated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UploadVBuserCreated) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.IsDefault.Set {
			e.FieldStart("is_default")
			s.IsDefault.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Size.Set {
			e.FieldStart("size")
			s.Size.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfUploadVBuserCreated = [5]string{
	0: "id",
	1: "is_default",
	2: "name",
	3: "size",
	4: "type",
}

// Decode decodes UploadVBuserCreated from json.
func (s *UploadVBuserCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UploadVBuserCreated to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "is_default":
			if err := func() error {
				s.IsDefault.Reset()
				if err := s.IsDefault.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"is_default\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "size":
			if err := func() error {
				s.Size.Reset()
				if err := s.Size.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UploadVBuserCreated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UploadVBuserCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UploadVBuserCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserAssistantCreateCreated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserAssistantCreateCreated) encodeFields(e *jx.Encoder) {
	{
		if s.AddAt.Set {
			e.FieldStart("add_at")
			s.AddAt.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.Ids.Set {
			e.FieldStart("ids")
			s.Ids.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserAssistantCreateCreated = [2]string{
	0: "add_at",
	1: "ids",
}

// Decode decodes UserAssistantCreateCreated from json.
func (s *UserAssistantCreateCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserAssistantCreateCreated to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "add_at":
			if err := func() error {
				s.AddAt.Reset()
				if err := s.AddAt.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"add_at\"")
			}
		case "ids":
			if err := func() error {
				s.Ids.Reset()
				if err := s.Ids.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ids\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserAssistantCreateCreated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserAssistantCreateCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserAssistantCreateCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserAssistantCreateReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserAssistantCreateReq) encodeFields(e *jx.Encoder) {
	{
		if s.Assistants != nil {
			e.FieldStart("assistants")
			e.ArrStart()
			for _, elem := range s.Assistants {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfUserAssistantCreateReq = [1]string{
	0: "assistants",
}

// Decode decodes UserAssistantCreateReq from json.
func (s *UserAssistantCreateReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserAssistantCreateReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "assistants":
			if err := func() error {
				s.Assistants = make([]UserAssistantCreateReqAssistantsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem UserAssistantCreateReqAssistantsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Assistants = append(s.Assistants, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"assistants\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserAssistantCreateReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserAssistantCreateReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserAssistantCreateReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserAssistantCreateReqAssistantsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserAssistantCreateReqAssistantsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Email.Set {
			e.FieldStart("email")
			s.Email.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserAssistantCreateReqAssistantsItem = [2]string{
	0: "email",
	1: "id",
}

// Decode decodes UserAssistantCreateReqAssistantsItem from json.
func (s *UserAssistantCreateReqAssistantsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserAssistantCreateReqAssistantsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "email":
			if err := func() error {
				s.Email.Reset()
				if err := s.Email.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserAssistantCreateReqAssistantsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserAssistantCreateReqAssistantsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserAssistantCreateReqAssistantsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserAssistantsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserAssistantsOK) encodeFields(e *jx.Encoder) {
	{
		if s.Assistants != nil {
			e.FieldStart("assistants")
			e.ArrStart()
			for _, elem := range s.Assistants {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfUserAssistantsOK = [1]string{
	0: "assistants",
}

// Decode decodes UserAssistantsOK from json.
func (s *UserAssistantsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserAssistantsOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "assistants":
			if err := func() error {
				s.Assistants = make([]UserAssistantsOKAssistantsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem UserAssistantsOKAssistantsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Assistants = append(s.Assistants, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"assistants\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserAssistantsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserAssistantsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserAssistantsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserAssistantsOKAssistantsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserAssistantsOKAssistantsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Email.Set {
			e.FieldStart("email")
			s.Email.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserAssistantsOKAssistantsItem = [2]string{
	0: "email",
	1: "id",
}

// Decode decodes UserAssistantsOKAssistantsItem from json.
func (s *UserAssistantsOKAssistantsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserAssistantsOKAssistantsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "email":
			if err := func() error {
				s.Email.Reset()
				if err := s.Email.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserAssistantsOKAssistantsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserAssistantsOKAssistantsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserAssistantsOKAssistantsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserCreateCreated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserCreateCreated) encodeFields(e *jx.Encoder) {
	{
		if s.Email.Set {
			e.FieldStart("email")
			s.Email.Encode(e)
		}
	}
	{
		if s.FirstName.Set {
			e.FieldStart("first_name")
			s.FirstName.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.LastName.Set {
			e.FieldStart("last_name")
			s.LastName.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserCreateCreated = [5]string{
	0: "email",
	1: "first_name",
	2: "id",
	3: "last_name",
	4: "type",
}

// Decode decodes UserCreateCreated from json.
func (s *UserCreateCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserCreateCreated to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "email":
			if err := func() error {
				s.Email.Reset()
				if err := s.Email.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		case "first_name":
			if err := func() error {
				s.FirstName.Reset()
				if err := s.FirstName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"first_name\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "last_name":
			if err := func() error {
				s.LastName.Reset()
				if err := s.LastName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"last_name\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserCreateCreated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserCreateCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserCreateCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserCreateReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserCreateReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("action")
		e.Str(s.Action)
	}
	{
		if s.UserInfo.Set {
			e.FieldStart("user_info")
			s.UserInfo.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserCreateReq = [2]string{
	0: "action",
	1: "user_info",
}

// Decode decodes UserCreateReq from json.
func (s *UserCreateReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserCreateReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "action":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Action = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"action\"")
			}
		case "user_info":
			if err := func() error {
				s.UserInfo.Reset()
				if err := s.UserInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"user_info\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserCreateReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfUserCreateReq) {
					name = jsonFieldsNameOfUserCreateReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserCreateReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserCreateReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserCreateReqUserInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserCreateReqUserInfo) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("email")
		e.Str(s.Email)
	}
	{
		if s.FirstName.Set {
			e.FieldStart("first_name")
			s.FirstName.Encode(e)
		}
	}
	{
		if s.LastName.Set {
			e.FieldStart("last_name")
			s.LastName.Encode(e)
		}
	}
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.Password.Set {
			e.FieldStart("password")
			s.Password.Encode(e)
		}
	}
	{
		e.FieldStart("type")
		e.Int(s.Type)
	}
	{
		if s.Feature.Set {
			e.FieldStart("feature")
			s.Feature.Encode(e)
		}
	}
	{
		if s.PlanUnitedType.Set {
			e.FieldStart("plan_united_type")
			s.PlanUnitedType.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserCreateReqUserInfo = [8]string{
	0: "email",
	1: "first_name",
	2: "last_name",
	3: "display_name",
	4: "password",
	5: "type",
	6: "feature",
	7: "plan_united_type",
}

// Decode decodes UserCreateReqUserInfo from json.
func (s *UserCreateReqUserInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserCreateReqUserInfo to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "email":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Email = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		case "first_name":
			if err := func() error {
				s.FirstName.Reset()
				if err := s.FirstName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"first_name\"")
			}
		case "last_name":
			if err := func() error {
				s.LastName.Reset()
				if err := s.LastName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"last_name\"")
			}
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "password":
			if err := func() error {
				s.Password.Reset()
				if err := s.Password.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"password\"")
			}
		case "type":
			requiredBitSet[0] |= 1 << 5
			if err := func() error {
				v, err := d.Int()
				s.Type = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "feature":
			if err := func() error {
				s.Feature.Reset()
				if err := s.Feature.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"feature\"")
			}
		case "plan_united_type":
			if err := func() error {
				s.PlanUnitedType.Reset()
				if err := s.PlanUnitedType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"plan_united_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserCreateReqUserInfo")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00100001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfUserCreateReqUserInfo) {
					name = jsonFieldsNameOfUserCreateReqUserInfo[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserCreateReqUserInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserCreateReqUserInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserCreateReqUserInfoFeature) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserCreateReqUserInfoFeature) encodeFields(e *jx.Encoder) {
	{
		if s.ZoomPhone.Set {
			e.FieldStart("zoom_phone")
			s.ZoomPhone.Encode(e)
		}
	}
	{
		if s.ZoomOneType.Set {
			e.FieldStart("zoom_one_type")
			s.ZoomOneType.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserCreateReqUserInfoFeature = [2]string{
	0: "zoom_phone",
	1: "zoom_one_type",
}

// Decode decodes UserCreateReqUserInfoFeature from json.
func (s *UserCreateReqUserInfoFeature) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserCreateReqUserInfoFeature to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "zoom_phone":
			if err := func() error {
				s.ZoomPhone.Reset()
				if err := s.ZoomPhone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_phone\"")
			}
		case "zoom_one_type":
			if err := func() error {
				s.ZoomOneType.Reset()
				if err := s.ZoomOneType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_one_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserCreateReqUserInfoFeature")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserCreateReqUserInfoFeature) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserCreateReqUserInfoFeature) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserEmailOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserEmailOK) encodeFields(e *jx.Encoder) {
	{
		if s.ExistedEmail.Set {
			e.FieldStart("existed_email")
			s.ExistedEmail.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserEmailOK = [1]string{
	0: "existed_email",
}

// Decode decodes UserEmailOK from json.
func (s *UserEmailOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserEmailOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "existed_email":
			if err := func() error {
				s.ExistedEmail.Reset()
				if err := s.ExistedEmail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"existed_email\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserEmailOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserEmailOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserEmailOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserEmailUpdateReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserEmailUpdateReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("email")
		e.Str(s.Email)
	}
}

var jsonFieldsNameOfUserEmailUpdateReq = [1]string{
	0: "email",
}

// Decode decodes UserEmailUpdateReq from json.
func (s *UserEmailUpdateReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserEmailUpdateReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "email":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Email = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserEmailUpdateReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfUserEmailUpdateReq) {
					name = jsonFieldsNameOfUserEmailUpdateReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserEmailUpdateReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserEmailUpdateReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.CreatedAt.Set {
			e.FieldStart("created_at")
			s.CreatedAt.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.Dept.Set {
			e.FieldStart("dept")
			s.Dept.Encode(e)
		}
	}
	{
		if s.Email.Set {
			e.FieldStart("email")
			s.Email.Encode(e)
		}
	}
	{
		if s.FirstName.Set {
			e.FieldStart("first_name")
			s.FirstName.Encode(e)
		}
	}
	{
		if s.LastClientVersion.Set {
			e.FieldStart("last_client_version")
			s.LastClientVersion.Encode(e)
		}
	}
	{
		if s.LastLoginTime.Set {
			e.FieldStart("last_login_time")
			s.LastLoginTime.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.LastName.Set {
			e.FieldStart("last_name")
			s.LastName.Encode(e)
		}
	}
	{
		if s.Pmi.Set {
			e.FieldStart("pmi")
			s.Pmi.Encode(e)
		}
	}
	{
		if s.RoleName.Set {
			e.FieldStart("role_name")
			s.RoleName.Encode(e)
		}
	}
	{
		if s.Timezone.Set {
			e.FieldStart("timezone")
			s.Timezone.Encode(e)
		}
	}
	{
		e.FieldStart("type")
		e.Int(s.Type)
	}
	{
		if s.UsePmi.Set {
			e.FieldStart("use_pmi")
			s.UsePmi.Encode(e)
		}
	}
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.AccountID.Set {
			e.FieldStart("account_id")
			s.AccountID.Encode(e)
		}
	}
	{
		if s.AccountNumber.Set {
			e.FieldStart("account_number")
			s.AccountNumber.Encode(e)
		}
	}
	{
		if s.CmsUserID.Set {
			e.FieldStart("cms_user_id")
			s.CmsUserID.Encode(e)
		}
	}
	{
		if s.Company.Set {
			e.FieldStart("company")
			s.Company.Encode(e)
		}
	}
	{
		if s.UserCreatedAt.Set {
			e.FieldStart("user_created_at")
			s.UserCreatedAt.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.CustomAttributes != nil {
			e.FieldStart("custom_attributes")
			e.ArrStart()
			for _, elem := range s.CustomAttributes {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.EmployeeUniqueID.Set {
			e.FieldStart("employee_unique_id")
			s.EmployeeUniqueID.Encode(e)
		}
	}
	{
		if s.GroupIds != nil {
			e.FieldStart("group_ids")
			e.ArrStart()
			for _, elem := range s.GroupIds {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ImGroupIds != nil {
			e.FieldStart("im_group_ids")
			e.ArrStart()
			for _, elem := range s.ImGroupIds {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Jid.Set {
			e.FieldStart("jid")
			s.Jid.Encode(e)
		}
	}
	{
		if s.JobTitle.Set {
			e.FieldStart("job_title")
			s.JobTitle.Encode(e)
		}
	}
	{
		if s.Language.Set {
			e.FieldStart("language")
			s.Language.Encode(e)
		}
	}
	{
		if s.Location.Set {
			e.FieldStart("location")
			s.Location.Encode(e)
		}
	}
	{
		if s.LoginTypes != nil {
			e.FieldStart("login_types")
			e.ArrStart()
			for _, elem := range s.LoginTypes {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Manager.Set {
			e.FieldStart("manager")
			s.Manager.Encode(e)
		}
	}
	{
		if s.PersonalMeetingURL.Set {
			e.FieldStart("personal_meeting_url")
			s.PersonalMeetingURL.Encode(e)
		}
	}
	{
		if s.PhoneCountry.Set {
			e.FieldStart("phone_country")
			s.PhoneCountry.Encode(e)
		}
	}
	{
		if s.PhoneNumber.Set {
			e.FieldStart("phone_number")
			s.PhoneNumber.Encode(e)
		}
	}
	{
		if s.PhoneNumbers != nil {
			e.FieldStart("phone_numbers")
			e.ArrStart()
			for _, elem := range s.PhoneNumbers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.PicURL.Set {
			e.FieldStart("pic_url")
			s.PicURL.Encode(e)
		}
	}
	{
		if s.PlanUnitedType.Set {
			e.FieldStart("plan_united_type")
			s.PlanUnitedType.Encode(e)
		}
	}
	{
		if s.Pronouns.Set {
			e.FieldStart("pronouns")
			s.Pronouns.Encode(e)
		}
	}
	{
		if s.PronounsOption.Set {
			e.FieldStart("pronouns_option")
			s.PronounsOption.Encode(e)
		}
	}
	{
		if s.RoleID.Set {
			e.FieldStart("role_id")
			s.RoleID.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.VanityURL.Set {
			e.FieldStart("vanity_url")
			s.VanityURL.Encode(e)
		}
	}
	{
		if s.Verified.Set {
			e.FieldStart("verified")
			s.Verified.Encode(e)
		}
	}
	{
		if s.Cluster.Set {
			e.FieldStart("cluster")
			s.Cluster.Encode(e)
		}
	}
	{
		if s.ZoomOneType.Set {
			e.FieldStart("zoom_one_type")
			s.ZoomOneType.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserOK = [43]string{
	0:  "id",
	1:  "created_at",
	2:  "dept",
	3:  "email",
	4:  "first_name",
	5:  "last_client_version",
	6:  "last_login_time",
	7:  "last_name",
	8:  "pmi",
	9:  "role_name",
	10: "timezone",
	11: "type",
	12: "use_pmi",
	13: "display_name",
	14: "account_id",
	15: "account_number",
	16: "cms_user_id",
	17: "company",
	18: "user_created_at",
	19: "custom_attributes",
	20: "employee_unique_id",
	21: "group_ids",
	22: "im_group_ids",
	23: "jid",
	24: "job_title",
	25: "language",
	26: "location",
	27: "login_types",
	28: "manager",
	29: "personal_meeting_url",
	30: "phone_country",
	31: "phone_number",
	32: "phone_numbers",
	33: "pic_url",
	34: "plan_united_type",
	35: "pronouns",
	36: "pronouns_option",
	37: "role_id",
	38: "status",
	39: "vanity_url",
	40: "verified",
	41: "cluster",
	42: "zoom_one_type",
}

// Decode decodes UserOK from json.
func (s *UserOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserOK to nil")
	}
	var requiredBitSet [6]uint8
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "created_at":
			if err := func() error {
				s.CreatedAt.Reset()
				if err := s.CreatedAt.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created_at\"")
			}
		case "dept":
			if err := func() error {
				s.Dept.Reset()
				if err := s.Dept.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"dept\"")
			}
		case "email":
			if err := func() error {
				s.Email.Reset()
				if err := s.Email.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		case "first_name":
			if err := func() error {
				s.FirstName.Reset()
				if err := s.FirstName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"first_name\"")
			}
		case "last_client_version":
			if err := func() error {
				s.LastClientVersion.Reset()
				if err := s.LastClientVersion.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"last_client_version\"")
			}
		case "last_login_time":
			if err := func() error {
				s.LastLoginTime.Reset()
				if err := s.LastLoginTime.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"last_login_time\"")
			}
		case "last_name":
			if err := func() error {
				s.LastName.Reset()
				if err := s.LastName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"last_name\"")
			}
		case "pmi":
			if err := func() error {
				s.Pmi.Reset()
				if err := s.Pmi.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pmi\"")
			}
		case "role_name":
			if err := func() error {
				s.RoleName.Reset()
				if err := s.RoleName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"role_name\"")
			}
		case "timezone":
			if err := func() error {
				s.Timezone.Reset()
				if err := s.Timezone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"timezone\"")
			}
		case "type":
			requiredBitSet[1] |= 1 << 3
			if err := func() error {
				v, err := d.Int()
				s.Type = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "use_pmi":
			if err := func() error {
				s.UsePmi.Reset()
				if err := s.UsePmi.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"use_pmi\"")
			}
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "account_id":
			if err := func() error {
				s.AccountID.Reset()
				if err := s.AccountID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_id\"")
			}
		case "account_number":
			if err := func() error {
				s.AccountNumber.Reset()
				if err := s.AccountNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_number\"")
			}
		case "cms_user_id":
			if err := func() error {
				s.CmsUserID.Reset()
				if err := s.CmsUserID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cms_user_id\"")
			}
		case "company":
			if err := func() error {
				s.Company.Reset()
				if err := s.Company.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company\"")
			}
		case "user_created_at":
			if err := func() error {
				s.UserCreatedAt.Reset()
				if err := s.UserCreatedAt.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"user_created_at\"")
			}
		case "custom_attributes":
			if err := func() error {
				s.CustomAttributes = make([]UserOKCustomAttributesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem UserOKCustomAttributesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CustomAttributes = append(s.CustomAttributes, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"custom_attributes\"")
			}
		case "employee_unique_id":
			if err := func() error {
				s.EmployeeUniqueID.Reset()
				if err := s.EmployeeUniqueID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"employee_unique_id\"")
			}
		case "group_ids":
			if err := func() error {
				s.GroupIds = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.GroupIds = append(s.GroupIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"group_ids\"")
			}
		case "im_group_ids":
			if err := func() error {
				s.ImGroupIds = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.ImGroupIds = append(s.ImGroupIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"im_group_ids\"")
			}
		case "jid":
			if err := func() error {
				s.Jid.Reset()
				if err := s.Jid.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"jid\"")
			}
		case "job_title":
			if err := func() error {
				s.JobTitle.Reset()
				if err := s.JobTitle.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_title\"")
			}
		case "language":
			if err := func() error {
				s.Language.Reset()
				if err := s.Language.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"language\"")
			}
		case "location":
			if err := func() error {
				s.Location.Reset()
				if err := s.Location.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"location\"")
			}
		case "login_types":
			if err := func() error {
				s.LoginTypes = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.LoginTypes = append(s.LoginTypes, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"login_types\"")
			}
		case "manager":
			if err := func() error {
				s.Manager.Reset()
				if err := s.Manager.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"manager\"")
			}
		case "personal_meeting_url":
			if err := func() error {
				s.PersonalMeetingURL.Reset()
				if err := s.PersonalMeetingURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"personal_meeting_url\"")
			}
		case "phone_country":
			if err := func() error {
				s.PhoneCountry.Reset()
				if err := s.PhoneCountry.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_country\"")
			}
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		case "phone_numbers":
			if err := func() error {
				s.PhoneNumbers = make([]UserOKPhoneNumbersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem UserOKPhoneNumbersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.PhoneNumbers = append(s.PhoneNumbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_numbers\"")
			}
		case "pic_url":
			if err := func() error {
				s.PicURL.Reset()
				if err := s.PicURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pic_url\"")
			}
		case "plan_united_type":
			if err := func() error {
				s.PlanUnitedType.Reset()
				if err := s.PlanUnitedType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"plan_united_type\"")
			}
		case "pronouns":
			if err := func() error {
				s.Pronouns.Reset()
				if err := s.Pronouns.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pronouns\"")
			}
		case "pronouns_option":
			if err := func() error {
				s.PronounsOption.Reset()
				if err := s.PronounsOption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pronouns_option\"")
			}
		case "role_id":
			if err := func() error {
				s.RoleID.Reset()
				if err := s.RoleID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"role_id\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "vanity_url":
			if err := func() error {
				s.VanityURL.Reset()
				if err := s.VanityURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vanity_url\"")
			}
		case "verified":
			if err := func() error {
				s.Verified.Reset()
				if err := s.Verified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"verified\"")
			}
		case "cluster":
			if err := func() error {
				s.Cluster.Reset()
				if err := s.Cluster.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cluster\"")
			}
		case "zoom_one_type":
			if err := func() error {
				s.ZoomOneType.Reset()
				if err := s.ZoomOneType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_one_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserOK")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [6]uint8{
		0b00000000,
		0b00001000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfUserOK) {
					name = jsonFieldsNameOfUserOK[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserOKCustomAttributesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserOKCustomAttributesItem) encodeFields(e *jx.Encoder) {
	{
		if s.Key.Set {
			e.FieldStart("key")
			s.Key.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Value.Set {
			e.FieldStart("value")
			s.Value.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserOKCustomAttributesItem = [3]string{
	0: "key",
	1: "name",
	2: "value",
}

// Decode decodes UserOKCustomAttributesItem from json.
func (s *UserOKCustomAttributesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserOKCustomAttributesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "key":
			if err := func() error {
				s.Key.Reset()
				if err := s.Key.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"key\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "value":
			if err := func() error {
				s.Value.Reset()
				if err := s.Value.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"value\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserOKCustomAttributesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserOKCustomAttributesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserOKCustomAttributesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserOKPhoneNumbersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserOKPhoneNumbersItem) encodeFields(e *jx.Encoder) {
	{
		if s.Code.Set {
			e.FieldStart("code")
			s.Code.Encode(e)
		}
	}
	{
		if s.Country.Set {
			e.FieldStart("country")
			s.Country.Encode(e)
		}
	}
	{
		if s.Label.Set {
			e.FieldStart("label")
			s.Label.Encode(e)
		}
	}
	{
		if s.Number.Set {
			e.FieldStart("number")
			s.Number.Encode(e)
		}
	}
	{
		if s.Verified.Set {
			e.FieldStart("verified")
			s.Verified.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserOKPhoneNumbersItem = [5]string{
	0: "code",
	1: "country",
	2: "label",
	3: "number",
	4: "verified",
}

// Decode decodes UserOKPhoneNumbersItem from json.
func (s *UserOKPhoneNumbersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserOKPhoneNumbersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "code":
			if err := func() error {
				s.Code.Reset()
				if err := s.Code.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code\"")
			}
		case "country":
			if err := func() error {
				s.Country.Reset()
				if err := s.Country.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country\"")
			}
		case "label":
			if err := func() error {
				s.Label.Reset()
				if err := s.Label.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"label\"")
			}
		case "number":
			if err := func() error {
				s.Number.Reset()
				if err := s.Number.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "verified":
			if err := func() error {
				s.Verified.Reset()
				if err := s.Verified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"verified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserOKPhoneNumbersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserOKPhoneNumbersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserOKPhoneNumbersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserPasswordReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserPasswordReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("password")
		e.Str(s.Password)
	}
}

var jsonFieldsNameOfUserPasswordReq = [1]string{
	0: "password",
}

// Decode decodes UserPasswordReq from json.
func (s *UserPasswordReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserPasswordReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "password":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Password = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"password\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserPasswordReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfUserPasswordReq) {
					name = jsonFieldsNameOfUserPasswordReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserPasswordReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserPasswordReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserPermissionOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserPermissionOK) encodeFields(e *jx.Encoder) {
	{
		if s.Permissions != nil {
			e.FieldStart("permissions")
			e.ArrStart()
			for _, elem := range s.Permissions {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfUserPermissionOK = [1]string{
	0: "permissions",
}

// Decode decodes UserPermissionOK from json.
func (s *UserPermissionOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserPermissionOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "permissions":
			if err := func() error {
				s.Permissions = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Permissions = append(s.Permissions, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"permissions\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserPermissionOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserPermissionOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserPermissionOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserPictureCreated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserPictureCreated) encodeFields(e *jx.Encoder) {
}

var jsonFieldsNameOfUserPictureCreated = [0]string{}

// Decode decodes UserPictureCreated from json.
func (s *UserPictureCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserPictureCreated to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
	}); err != nil {
		return errors.Wrap(err, "decode UserPictureCreated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserPictureCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserPictureCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSchedulersOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSchedulersOK) encodeFields(e *jx.Encoder) {
	{
		if s.Schedulers != nil {
			e.FieldStart("schedulers")
			e.ArrStart()
			for _, elem := range s.Schedulers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfUserSchedulersOK = [1]string{
	0: "schedulers",
}

// Decode decodes UserSchedulersOK from json.
func (s *UserSchedulersOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSchedulersOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "schedulers":
			if err := func() error {
				s.Schedulers = make([]UserSchedulersOKSchedulersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem UserSchedulersOKSchedulersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Schedulers = append(s.Schedulers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"schedulers\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSchedulersOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSchedulersOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSchedulersOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSchedulersOKSchedulersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSchedulersOKSchedulersItem) encodeFields(e *jx.Encoder) {
	{
		if s.Email.Set {
			e.FieldStart("email")
			s.Email.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Pmi.Set {
			e.FieldStart("pmi")
			s.Pmi.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSchedulersOKSchedulersItem = [3]string{
	0: "email",
	1: "id",
	2: "pmi",
}

// Decode decodes UserSchedulersOKSchedulersItem from json.
func (s *UserSchedulersOKSchedulersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSchedulersOKSchedulersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "email":
			if err := func() error {
				s.Email.Reset()
				if err := s.Email.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "pmi":
			if err := func() error {
				s.Pmi.Reset()
				if err := s.Pmi.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pmi\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSchedulersOKSchedulersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSchedulersOKSchedulersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSchedulersOKSchedulersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsOK as json.
func (s UserSettingsOK) Encode(e *jx.Encoder) {
	switch s.Type {
	case UserSettingsOK0UserSettingsOK:
		s.UserSettingsOK0.Encode(e)
	case UserSettingsOK1UserSettingsOK:
		s.UserSettingsOK1.Encode(e)
	case UserSettingsOK2UserSettingsOK:
		s.UserSettingsOK2.Encode(e)
	case UserSettingsOK3UserSettingsOK:
		s.UserSettingsOK3.Encode(e)
	case UserSettingsOK4UserSettingsOK:
		s.UserSettingsOK4.Encode(e)
	}
}

func (s UserSettingsOK) encodeFields(e *jx.Encoder) {
	switch s.Type {
	case UserSettingsOK0UserSettingsOK:
		s.UserSettingsOK0.encodeFields(e)
	case UserSettingsOK1UserSettingsOK:
		s.UserSettingsOK1.encodeFields(e)
	case UserSettingsOK2UserSettingsOK:
		s.UserSettingsOK2.encodeFields(e)
	case UserSettingsOK3UserSettingsOK:
		s.UserSettingsOK3.encodeFields(e)
	case UserSettingsOK4UserSettingsOK:
		s.UserSettingsOK4.encodeFields(e)
	}
}

// Decode decodes UserSettingsOK from json.
func (s *UserSettingsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsOK to nil")
	}
	// Sum type fields.
	if typ := d.Next(); typ != jx.Object {
		return errors.Errorf("unexpected json type %q", typ)
	}

	var found bool
	if err := d.Capture(func(d *jx.Decoder) error {
		return d.ObjBytes(func(d *jx.Decoder, key []byte) error {
			switch string(key) {
			case "audio_conferencing":
				match := UserSettingsOK0UserSettingsOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "email_notification":
				match := UserSettingsOK0UserSettingsOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "feature":
				match := UserSettingsOK0UserSettingsOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "in_meeting":
				match := UserSettingsOK0UserSettingsOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "profile":
				match := UserSettingsOK0UserSettingsOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "recording":
				match := UserSettingsOK0UserSettingsOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "schedule_meeting":
				match := UserSettingsOK0UserSettingsOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "telephony":
				match := UserSettingsOK0UserSettingsOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tsp":
				match := UserSettingsOK0UserSettingsOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "whiteboard":
				match := UserSettingsOK0UserSettingsOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "allow_authentication_exception":
				match := UserSettingsOK2UserSettingsOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "meeting_authentication":
				match := UserSettingsOK2UserSettingsOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "recording_authentication":
				match := UserSettingsOK3UserSettingsOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "meeting_security":
				match := UserSettingsOK4UserSettingsOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			}
			return d.Skip()
		})
	}); err != nil {
		return errors.Wrap(err, "capture")
	}
	if !found {
		s.Type = UserSettingsOK1UserSettingsOK
	}
	switch s.Type {
	case UserSettingsOK0UserSettingsOK:
		if err := s.UserSettingsOK0.Decode(d); err != nil {
			return err
		}
	case UserSettingsOK1UserSettingsOK:
		if err := s.UserSettingsOK1.Decode(d); err != nil {
			return err
		}
	case UserSettingsOK2UserSettingsOK:
		if err := s.UserSettingsOK2.Decode(d); err != nil {
			return err
		}
	case UserSettingsOK3UserSettingsOK:
		if err := s.UserSettingsOK3.Decode(d); err != nil {
			return err
		}
	case UserSettingsOK4UserSettingsOK:
		if err := s.UserSettingsOK4.Decode(d); err != nil {
			return err
		}
	default:
		return errors.Errorf("inferred invalid type: %s", s.Type)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s UserSettingsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsOK0) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsOK0) encodeFields(e *jx.Encoder) {
	{
		if s.AudioConferencing.Set {
			e.FieldStart("audio_conferencing")
			s.AudioConferencing.Encode(e)
		}
	}
	{
		if s.EmailNotification.Set {
			e.FieldStart("email_notification")
			s.EmailNotification.Encode(e)
		}
	}
	{
		if s.Feature.Set {
			e.FieldStart("feature")
			s.Feature.Encode(e)
		}
	}
	{
		if s.InMeeting.Set {
			e.FieldStart("in_meeting")
			s.InMeeting.Encode(e)
		}
	}
	{
		if s.Profile.Set {
			e.FieldStart("profile")
			s.Profile.Encode(e)
		}
	}
	{
		if s.Recording.Set {
			e.FieldStart("recording")
			s.Recording.Encode(e)
		}
	}
	{
		if s.ScheduleMeeting.Set {
			e.FieldStart("schedule_meeting")
			s.ScheduleMeeting.Encode(e)
		}
	}
	{
		if s.Telephony.Set {
			e.FieldStart("telephony")
			s.Telephony.Encode(e)
		}
	}
	{
		if s.Tsp.Set {
			e.FieldStart("tsp")
			s.Tsp.Encode(e)
		}
	}
	{
		if s.Whiteboard.Set {
			e.FieldStart("whiteboard")
			s.Whiteboard.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsOK0 = [10]string{
	0: "audio_conferencing",
	1: "email_notification",
	2: "feature",
	3: "in_meeting",
	4: "profile",
	5: "recording",
	6: "schedule_meeting",
	7: "telephony",
	8: "tsp",
	9: "whiteboard",
}

// Decode decodes UserSettingsOK0 from json.
func (s *UserSettingsOK0) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsOK0 to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_conferencing":
			if err := func() error {
				s.AudioConferencing.Reset()
				if err := s.AudioConferencing.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_conferencing\"")
			}
		case "email_notification":
			if err := func() error {
				s.EmailNotification.Reset()
				if err := s.EmailNotification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email_notification\"")
			}
		case "feature":
			if err := func() error {
				s.Feature.Reset()
				if err := s.Feature.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"feature\"")
			}
		case "in_meeting":
			if err := func() error {
				s.InMeeting.Reset()
				if err := s.InMeeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"in_meeting\"")
			}
		case "profile":
			if err := func() error {
				s.Profile.Reset()
				if err := s.Profile.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"profile\"")
			}
		case "recording":
			if err := func() error {
				s.Recording.Reset()
				if err := s.Recording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording\"")
			}
		case "schedule_meeting":
			if err := func() error {
				s.ScheduleMeeting.Reset()
				if err := s.ScheduleMeeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"schedule_meeting\"")
			}
		case "telephony":
			if err := func() error {
				s.Telephony.Reset()
				if err := s.Telephony.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"telephony\"")
			}
		case "tsp":
			if err := func() error {
				s.Tsp.Reset()
				if err := s.Tsp.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tsp\"")
			}
		case "whiteboard":
			if err := func() error {
				s.Whiteboard.Reset()
				if err := s.Whiteboard.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"whiteboard\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsOK0")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsOK0) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsOK0) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsOK0AudioConferencing) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsOK0AudioConferencing) encodeFields(e *jx.Encoder) {
	{
		if s.TollFreeAndFeeBasedTollCall.Set {
			e.FieldStart("toll_free_and_fee_based_toll_call")
			s.TollFreeAndFeeBasedTollCall.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsOK0AudioConferencing = [1]string{
	0: "toll_free_and_fee_based_toll_call",
}

// Decode decodes UserSettingsOK0AudioConferencing from json.
func (s *UserSettingsOK0AudioConferencing) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsOK0AudioConferencing to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "toll_free_and_fee_based_toll_call":
			if err := func() error {
				s.TollFreeAndFeeBasedTollCall.Reset()
				if err := s.TollFreeAndFeeBasedTollCall.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"toll_free_and_fee_based_toll_call\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsOK0AudioConferencing")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsOK0AudioConferencing) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsOK0AudioConferencing) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall) encodeFields(e *jx.Encoder) {
	{
		if s.AllowWebinarAttendeesDial.Set {
			e.FieldStart("allow_webinar_attendees_dial")
			s.AllowWebinarAttendeesDial.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Numbers != nil {
			e.FieldStart("numbers")
			e.ArrStart()
			for _, elem := range s.Numbers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfUserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall = [3]string{
	0: "allow_webinar_attendees_dial",
	1: "enable",
	2: "numbers",
}

// Decode decodes UserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall from json.
func (s *UserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allow_webinar_attendees_dial":
			if err := func() error {
				s.AllowWebinarAttendeesDial.Reset()
				if err := s.AllowWebinarAttendeesDial.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_webinar_attendees_dial\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "numbers":
			if err := func() error {
				s.Numbers = make([]UserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem UserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Numbers = append(s.Numbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"numbers\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCall) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem) encodeFields(e *jx.Encoder) {
	{
		if s.Code.Set {
			e.FieldStart("code")
			s.Code.Encode(e)
		}
	}
	{
		if s.CountryCode.Set {
			e.FieldStart("country_code")
			s.CountryCode.Encode(e)
		}
	}
	{
		if s.CountryName.Set {
			e.FieldStart("country_name")
			s.CountryName.Encode(e)
		}
	}
	{
		if s.DisplayNumber.Set {
			e.FieldStart("display_number")
			s.DisplayNumber.Encode(e)
		}
	}
	{
		if s.Number.Set {
			e.FieldStart("number")
			s.Number.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem = [5]string{
	0: "code",
	1: "country_code",
	2: "country_name",
	3: "display_number",
	4: "number",
}

// Decode decodes UserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem from json.
func (s *UserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "code":
			if err := func() error {
				s.Code.Reset()
				if err := s.Code.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code\"")
			}
		case "country_code":
			if err := func() error {
				s.CountryCode.Reset()
				if err := s.CountryCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country_code\"")
			}
		case "country_name":
			if err := func() error {
				s.CountryName.Reset()
				if err := s.CountryName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country_name\"")
			}
		case "display_number":
			if err := func() error {
				s.DisplayNumber.Reset()
				if err := s.DisplayNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_number\"")
			}
		case "number":
			if err := func() error {
				s.Number.Reset()
				if err := s.Number.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsOK0AudioConferencingTollFreeAndFeeBasedTollCallNumbersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsOK0EmailNotification) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsOK0EmailNotification) encodeFields(e *jx.Encoder) {
	{
		if s.AlternativeHostReminder.Set {
			e.FieldStart("alternative_host_reminder")
			s.AlternativeHostReminder.Encode(e)
		}
	}
	{
		if s.CancelMeetingReminder.Set {
			e.FieldStart("cancel_meeting_reminder")
			s.CancelMeetingReminder.Encode(e)
		}
	}
	{
		if s.CloudRecordingAvailableReminder.Set {
			e.FieldStart("cloud_recording_available_reminder")
			s.CloudRecordingAvailableReminder.Encode(e)
		}
	}
	{
		if s.JbhReminder.Set {
			e.FieldStart("jbh_reminder")
			s.JbhReminder.Encode(e)
		}
	}
	{
		if s.RecordingAvailableReminderAlternativeHosts.Set {
			e.FieldStart("recording_available_reminder_alternative_hosts")
			s.RecordingAvailableReminderAlternativeHosts.Encode(e)
		}
	}
	{
		if s.RecordingAvailableReminderSchedulers.Set {
			e.FieldStart("recording_available_reminder_schedulers")
			s.RecordingAvailableReminderSchedulers.Encode(e)
		}
	}
	{
		if s.ScheduleForReminder.Set {
			e.FieldStart("schedule_for_reminder")
			s.ScheduleForReminder.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsOK0EmailNotification = [7]string{
	0: "alternative_host_reminder",
	1: "cancel_meeting_reminder",
	2: "cloud_recording_available_reminder",
	3: "jbh_reminder",
	4: "recording_available_reminder_alternative_hosts",
	5: "recording_available_reminder_schedulers",
	6: "schedule_for_reminder",
}

// Decode decodes UserSettingsOK0EmailNotification from json.
func (s *UserSettingsOK0EmailNotification) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsOK0EmailNotification to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "alternative_host_reminder":
			if err := func() error {
				s.AlternativeHostReminder.Reset()
				if err := s.AlternativeHostReminder.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"alternative_host_reminder\"")
			}
		case "cancel_meeting_reminder":
			if err := func() error {
				s.CancelMeetingReminder.Reset()
				if err := s.CancelMeetingReminder.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cancel_meeting_reminder\"")
			}
		case "cloud_recording_available_reminder":
			if err := func() error {
				s.CloudRecordingAvailableReminder.Reset()
				if err := s.CloudRecordingAvailableReminder.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cloud_recording_available_reminder\"")
			}
		case "jbh_reminder":
			if err := func() error {
				s.JbhReminder.Reset()
				if err := s.JbhReminder.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"jbh_reminder\"")
			}
		case "recording_available_reminder_alternative_hosts":
			if err := func() error {
				s.RecordingAvailableReminderAlternativeHosts.Reset()
				if err := s.RecordingAvailableReminderAlternativeHosts.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_available_reminder_alternative_hosts\"")
			}
		case "recording_available_reminder_schedulers":
			if err := func() error {
				s.RecordingAvailableReminderSchedulers.Reset()
				if err := s.RecordingAvailableReminderSchedulers.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_available_reminder_schedulers\"")
			}
		case "schedule_for_reminder":
			if err := func() error {
				s.ScheduleForReminder.Reset()
				if err := s.ScheduleForReminder.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"schedule_for_reminder\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsOK0EmailNotification")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsOK0EmailNotification) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsOK0EmailNotification) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsOK0Feature) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsOK0Feature) encodeFields(e *jx.Encoder) {
	{
		if s.CnMeeting.Set {
			e.FieldStart("cn_meeting")
			s.CnMeeting.Encode(e)
		}
	}
	{
		if s.ConcurrentMeeting.Set {
			e.FieldStart("concurrent_meeting")
			s.ConcurrentMeeting.Encode(e)
		}
	}
	{
		if s.InMeeting.Set {
			e.FieldStart("in_meeting")
			s.InMeeting.Encode(e)
		}
	}
	{
		if s.LargeMeeting.Set {
			e.FieldStart("large_meeting")
			s.LargeMeeting.Encode(e)
		}
	}
	{
		if s.LargeMeetingCapacity.Set {
			e.FieldStart("large_meeting_capacity")
			s.LargeMeetingCapacity.Encode(e)
		}
	}
	{
		if s.MeetingCapacity.Set {
			e.FieldStart("meeting_capacity")
			s.MeetingCapacity.Encode(e)
		}
	}
	{
		if s.Webinar.Set {
			e.FieldStart("webinar")
			s.Webinar.Encode(e)
		}
	}
	{
		if s.WebinarCapacity.Set {
			e.FieldStart("webinar_capacity")
			s.WebinarCapacity.Encode(e)
		}
	}
	{
		if s.ZoomEvents.Set {
			e.FieldStart("zoom_events")
			s.ZoomEvents.Encode(e)
		}
	}
	{
		if s.ZoomEventsCapacity.Set {
			e.FieldStart("zoom_events_capacity")
			s.ZoomEventsCapacity.Encode(e)
		}
	}
	{
		if s.ZoomEventsUnlimited.Set {
			e.FieldStart("zoom_events_unlimited")
			s.ZoomEventsUnlimited.Encode(e)
		}
	}
	{
		if s.ZoomEventsUnlimitedCapacities != nil {
			e.FieldStart("zoom_events_unlimited_capacities")
			e.ArrStart()
			for _, elem := range s.ZoomEventsUnlimitedCapacities {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ZoomSessionsUnlimited.Set {
			e.FieldStart("zoom_sessions_unlimited")
			s.ZoomSessionsUnlimited.Encode(e)
		}
	}
	{
		if s.ZoomSessionsUnlimitedCapacities != nil {
			e.FieldStart("zoom_sessions_unlimited_capacities")
			e.ArrStart()
			for _, elem := range s.ZoomSessionsUnlimitedCapacities {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ZoomEventsPayPerAttendee.Set {
			e.FieldStart("zoom_events_pay_per_attendee")
			s.ZoomEventsPayPerAttendee.Encode(e)
		}
	}
	{
		if s.ZoomSessionsPayPerAttendee.Set {
			e.FieldStart("zoom_sessions_pay_per_attendee")
			s.ZoomSessionsPayPerAttendee.Encode(e)
		}
	}
	{
		if s.ZoomPhone.Set {
			e.FieldStart("zoom_phone")
			s.ZoomPhone.Encode(e)
		}
	}
	{
		if s.ZoomIqForSales.Set {
			e.FieldStart("zoom_iq_for_sales")
			s.ZoomIqForSales.Encode(e)
		}
	}
	{
		if s.ZoomRevenueAccelerator.Set {
			e.FieldStart("zoom_revenue_accelerator")
			s.ZoomRevenueAccelerator.Encode(e)
		}
	}
	{
		if s.ZoomWhiteboard.Set {
			e.FieldStart("zoom_whiteboard")
			s.ZoomWhiteboard.Encode(e)
		}
	}
	{
		if s.ZoomWhiteboardPlus.Set {
			e.FieldStart("zoom_whiteboard_plus")
			s.ZoomWhiteboardPlus.Encode(e)
		}
	}
	{
		if s.ZoomTranslatedCaptions.Set {
			e.FieldStart("zoom_translated_captions")
			s.ZoomTranslatedCaptions.Encode(e)
		}
	}
	{
		if s.ZoomCustomerManagedKey.Set {
			e.FieldStart("zoom_customer_managed_key")
			s.ZoomCustomerManagedKey.Encode(e)
		}
	}
	{
		if s.ZoomHuddles.Set {
			e.FieldStart("zoom_huddles")
			s.ZoomHuddles.Encode(e)
		}
	}
	{
		if s.ZoomQualityManagement.Set {
			e.FieldStart("zoom_quality_management")
			s.ZoomQualityManagement.Encode(e)
		}
	}
	{
		if s.ZoomWorkforceManagement.Set {
			e.FieldStart("zoom_workforce_management")
			s.ZoomWorkforceManagement.Encode(e)
		}
	}
	{
		if s.ZoomScheduler.Set {
			e.FieldStart("zoom_scheduler")
			s.ZoomScheduler.Encode(e)
		}
	}
	{
		if s.ZoomClipsPlus.Set {
			e.FieldStart("zoom_clips_plus")
			s.ZoomClipsPlus.Encode(e)
		}
	}
	{
		if s.ZoomMailCalendar.Set {
			e.FieldStart("zoom_mail_calendar")
			s.ZoomMailCalendar.Encode(e)
		}
	}
	{
		if s.ZoomComplianceManagement.Set {
			e.FieldStart("zoom_compliance_management")
			s.ZoomComplianceManagement.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsOK0Feature = [30]string{
	0:  "cn_meeting",
	1:  "concurrent_meeting",
	2:  "in_meeting",
	3:  "large_meeting",
	4:  "large_meeting_capacity",
	5:  "meeting_capacity",
	6:  "webinar",
	7:  "webinar_capacity",
	8:  "zoom_events",
	9:  "zoom_events_capacity",
	10: "zoom_events_unlimited",
	11: "zoom_events_unlimited_capacities",
	12: "zoom_sessions_unlimited",
	13: "zoom_sessions_unlimited_capacities",
	14: "zoom_events_pay_per_attendee",
	15: "zoom_sessions_pay_per_attendee",
	16: "zoom_phone",
	17: "zoom_iq_for_sales",
	18: "zoom_revenue_accelerator",
	19: "zoom_whiteboard",
	20: "zoom_whiteboard_plus",
	21: "zoom_translated_captions",
	22: "zoom_customer_managed_key",
	23: "zoom_huddles",
	24: "zoom_quality_management",
	25: "zoom_workforce_management",
	26: "zoom_scheduler",
	27: "zoom_clips_plus",
	28: "zoom_mail_calendar",
	29: "zoom_compliance_management",
}

// Decode decodes UserSettingsOK0Feature from json.
func (s *UserSettingsOK0Feature) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsOK0Feature to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "cn_meeting":
			if err := func() error {
				s.CnMeeting.Reset()
				if err := s.CnMeeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cn_meeting\"")
			}
		case "concurrent_meeting":
			if err := func() error {
				s.ConcurrentMeeting.Reset()
				if err := s.ConcurrentMeeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"concurrent_meeting\"")
			}
		case "in_meeting":
			if err := func() error {
				s.InMeeting.Reset()
				if err := s.InMeeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"in_meeting\"")
			}
		case "large_meeting":
			if err := func() error {
				s.LargeMeeting.Reset()
				if err := s.LargeMeeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"large_meeting\"")
			}
		case "large_meeting_capacity":
			if err := func() error {
				s.LargeMeetingCapacity.Reset()
				if err := s.LargeMeetingCapacity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"large_meeting_capacity\"")
			}
		case "meeting_capacity":
			if err := func() error {
				s.MeetingCapacity.Reset()
				if err := s.MeetingCapacity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_capacity\"")
			}
		case "webinar":
			if err := func() error {
				s.Webinar.Reset()
				if err := s.Webinar.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webinar\"")
			}
		case "webinar_capacity":
			if err := func() error {
				s.WebinarCapacity.Reset()
				if err := s.WebinarCapacity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webinar_capacity\"")
			}
		case "zoom_events":
			if err := func() error {
				s.ZoomEvents.Reset()
				if err := s.ZoomEvents.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_events\"")
			}
		case "zoom_events_capacity":
			if err := func() error {
				s.ZoomEventsCapacity.Reset()
				if err := s.ZoomEventsCapacity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_events_capacity\"")
			}
		case "zoom_events_unlimited":
			if err := func() error {
				s.ZoomEventsUnlimited.Reset()
				if err := s.ZoomEventsUnlimited.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_events_unlimited\"")
			}
		case "zoom_events_unlimited_capacities":
			if err := func() error {
				s.ZoomEventsUnlimitedCapacities = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.ZoomEventsUnlimitedCapacities = append(s.ZoomEventsUnlimitedCapacities, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_events_unlimited_capacities\"")
			}
		case "zoom_sessions_unlimited":
			if err := func() error {
				s.ZoomSessionsUnlimited.Reset()
				if err := s.ZoomSessionsUnlimited.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_sessions_unlimited\"")
			}
		case "zoom_sessions_unlimited_capacities":
			if err := func() error {
				s.ZoomSessionsUnlimitedCapacities = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.ZoomSessionsUnlimitedCapacities = append(s.ZoomSessionsUnlimitedCapacities, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_sessions_unlimited_capacities\"")
			}
		case "zoom_events_pay_per_attendee":
			if err := func() error {
				s.ZoomEventsPayPerAttendee.Reset()
				if err := s.ZoomEventsPayPerAttendee.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_events_pay_per_attendee\"")
			}
		case "zoom_sessions_pay_per_attendee":
			if err := func() error {
				s.ZoomSessionsPayPerAttendee.Reset()
				if err := s.ZoomSessionsPayPerAttendee.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_sessions_pay_per_attendee\"")
			}
		case "zoom_phone":
			if err := func() error {
				s.ZoomPhone.Reset()
				if err := s.ZoomPhone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_phone\"")
			}
		case "zoom_iq_for_sales":
			if err := func() error {
				s.ZoomIqForSales.Reset()
				if err := s.ZoomIqForSales.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_iq_for_sales\"")
			}
		case "zoom_revenue_accelerator":
			if err := func() error {
				s.ZoomRevenueAccelerator.Reset()
				if err := s.ZoomRevenueAccelerator.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_revenue_accelerator\"")
			}
		case "zoom_whiteboard":
			if err := func() error {
				s.ZoomWhiteboard.Reset()
				if err := s.ZoomWhiteboard.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_whiteboard\"")
			}
		case "zoom_whiteboard_plus":
			if err := func() error {
				s.ZoomWhiteboardPlus.Reset()
				if err := s.ZoomWhiteboardPlus.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_whiteboard_plus\"")
			}
		case "zoom_translated_captions":
			if err := func() error {
				s.ZoomTranslatedCaptions.Reset()
				if err := s.ZoomTranslatedCaptions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_translated_captions\"")
			}
		case "zoom_customer_managed_key":
			if err := func() error {
				s.ZoomCustomerManagedKey.Reset()
				if err := s.ZoomCustomerManagedKey.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_customer_managed_key\"")
			}
		case "zoom_huddles":
			if err := func() error {
				s.ZoomHuddles.Reset()
				if err := s.ZoomHuddles.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_huddles\"")
			}
		case "zoom_quality_management":
			if err := func() error {
				s.ZoomQualityManagement.Reset()
				if err := s.ZoomQualityManagement.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_quality_management\"")
			}
		case "zoom_workforce_management":
			if err := func() error {
				s.ZoomWorkforceManagement.Reset()
				if err := s.ZoomWorkforceManagement.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_workforce_management\"")
			}
		case "zoom_scheduler":
			if err := func() error {
				s.ZoomScheduler.Reset()
				if err := s.ZoomScheduler.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_scheduler\"")
			}
		case "zoom_clips_plus":
			if err := func() error {
				s.ZoomClipsPlus.Reset()
				if err := s.ZoomClipsPlus.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_clips_plus\"")
			}
		case "zoom_mail_calendar":
			if err := func() error {
				s.ZoomMailCalendar.Reset()
				if err := s.ZoomMailCalendar.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_mail_calendar\"")
			}
		case "zoom_compliance_management":
			if err := func() error {
				s.ZoomComplianceManagement.Reset()
				if err := s.ZoomComplianceManagement.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_compliance_management\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsOK0Feature")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsOK0Feature) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsOK0Feature) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsOK0InMeeting) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsOK0InMeeting) encodeFields(e *jx.Encoder) {
	{
		if s.AllowHostToEnableFocusMode.Set {
			e.FieldStart("allow_host_to_enable_focus_mode")
			s.AllowHostToEnableFocusMode.Encode(e)
		}
	}
	{
		if s.AllowUsersToDeleteMessagesInMeetingChat.Set {
			e.FieldStart("allow_users_to_delete_messages_in_meeting_chat")
			s.AllowUsersToDeleteMessagesInMeetingChat.Encode(e)
		}
	}
	{
		if s.AllowLiveStreaming.Set {
			e.FieldStart("allow_live_streaming")
			s.AllowLiveStreaming.Encode(e)
		}
	}
	{
		if s.PostMeetingFeedback.Set {
			e.FieldStart("post_meeting_feedback")
			s.PostMeetingFeedback.Encode(e)
		}
	}
	{
		if s.Whiteboard.Set {
			e.FieldStart("whiteboard")
			s.Whiteboard.Encode(e)
		}
	}
	{
		if s.AllowParticipantsChatWith.Set {
			e.FieldStart("allow_participants_chat_with")
			s.AllowParticipantsChatWith.Encode(e)
		}
	}
	{
		if s.AllowUsersSaveChats.Set {
			e.FieldStart("allow_users_save_chats")
			s.AllowUsersSaveChats.Encode(e)
		}
	}
	{
		if s.Annotation.Set {
			e.FieldStart("annotation")
			s.Annotation.Encode(e)
		}
	}
	{
		if s.AttendeeOnHold.Set {
			e.FieldStart("attendee_on_hold")
			s.AttendeeOnHold.Encode(e)
		}
	}
	{
		if s.AttentionModeFocusMode.Set {
			e.FieldStart("attention_mode_focus_mode")
			s.AttentionModeFocusMode.Encode(e)
		}
	}
	{
		if s.AutoSavingChat.Set {
			e.FieldStart("auto_saving_chat")
			s.AutoSavingChat.Encode(e)
		}
	}
	{
		if s.BreakoutRoom.Set {
			e.FieldStart("breakout_room")
			s.BreakoutRoom.Encode(e)
		}
	}
	{
		if s.BreakoutRoomSchedule.Set {
			e.FieldStart("breakout_room_schedule")
			s.BreakoutRoomSchedule.Encode(e)
		}
	}
	{
		if s.Chat.Set {
			e.FieldStart("chat")
			s.Chat.Encode(e)
		}
	}
	{
		if s.MeetingQuestionAnswer.Set {
			e.FieldStart("meeting_question_answer")
			s.MeetingQuestionAnswer.Encode(e)
		}
	}
	{
		if s.ClosedCaption.Set {
			e.FieldStart("closed_caption")
			s.ClosedCaption.Encode(e)
		}
	}
	{
		if s.ClosedCaptioning.Set {
			e.FieldStart("closed_captioning")
			s.ClosedCaptioning.Encode(e)
		}
	}
	{
		if s.CoHost.Set {
			e.FieldStart("co_host")
			s.CoHost.Encode(e)
		}
	}
	{
		if s.CustomDataCenterRegions.Set {
			e.FieldStart("custom_data_center_regions")
			s.CustomDataCenterRegions.Encode(e)
		}
	}
	{
		if s.CustomLiveStreamingService.Set {
			e.FieldStart("custom_live_streaming_service")
			s.CustomLiveStreamingService.Encode(e)
		}
	}
	{
		if s.CustomServiceInstructions.Set {
			e.FieldStart("custom_service_instructions")
			s.CustomServiceInstructions.Encode(e)
		}
	}
	{
		if s.DataCenterRegions != nil {
			e.FieldStart("data_center_regions")
			e.ArrStart()
			for _, elem := range s.DataCenterRegions {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.DisableScreenSharingForHostMeetings.Set {
			e.FieldStart("disable_screen_sharing_for_host_meetings")
			s.DisableScreenSharingForHostMeetings.Encode(e)
		}
	}
	{
		if s.DisableScreenSharingForInMeetingGuests.Set {
			e.FieldStart("disable_screen_sharing_for_in_meeting_guests")
			s.DisableScreenSharingForInMeetingGuests.Encode(e)
		}
	}
	{
		if s.E2eEncryption.Set {
			e.FieldStart("e2e_encryption")
			s.E2eEncryption.Encode(e)
		}
	}
	{
		if s.EntryExitChime.Set {
			e.FieldStart("entry_exit_chime")
			s.EntryExitChime.Encode(e)
		}
	}
	{
		if s.FarEndCameraControl.Set {
			e.FieldStart("far_end_camera_control")
			s.FarEndCameraControl.Encode(e)
		}
	}
	{
		if s.Feedback.Set {
			e.FieldStart("feedback")
			s.Feedback.Encode(e)
		}
	}
	{
		if s.FileTransfer.Set {
			e.FieldStart("file_transfer")
			s.FileTransfer.Encode(e)
		}
	}
	{
		if s.GroupHd.Set {
			e.FieldStart("group_hd")
			s.GroupHd.Encode(e)
		}
	}
	{
		if s.WebinarGroupHd.Set {
			e.FieldStart("webinar_group_hd")
			s.WebinarGroupHd.Encode(e)
		}
	}
	{
		if s.JoinFromDesktop.Set {
			e.FieldStart("join_from_desktop")
			s.JoinFromDesktop.Encode(e)
		}
	}
	{
		if s.JoinFromMobile.Set {
			e.FieldStart("join_from_mobile")
			s.JoinFromMobile.Encode(e)
		}
	}
	{
		if s.LanguageInterpretation.Set {
			e.FieldStart("language_interpretation")
			s.LanguageInterpretation.Encode(e)
		}
	}
	{
		if s.SignLanguageInterpretation.Set {
			e.FieldStart("sign_language_interpretation")
			s.SignLanguageInterpretation.Encode(e)
		}
	}
	{
		if s.LiveStreamingFacebook.Set {
			e.FieldStart("live_streaming_facebook")
			s.LiveStreamingFacebook.Encode(e)
		}
	}
	{
		if s.LiveStreamingYoutube.Set {
			e.FieldStart("live_streaming_youtube")
			s.LiveStreamingYoutube.Encode(e)
		}
	}
	{
		if s.ManualCaptioning.Set {
			e.FieldStart("manual_captioning")
			s.ManualCaptioning.Encode(e)
		}
	}
	{
		if s.MeetingReactions.Set {
			e.FieldStart("meeting_reactions")
			s.MeetingReactions.Encode(e)
		}
	}
	{
		if s.MeetingReactionsEmojis.Set {
			e.FieldStart("meeting_reactions_emojis")
			s.MeetingReactionsEmojis.Encode(e)
		}
	}
	{
		if s.AllowHostPanelistsToUseAudibleClap.Set {
			e.FieldStart("allow_host_panelists_to_use_audible_clap")
			s.AllowHostPanelistsToUseAudibleClap.Encode(e)
		}
	}
	{
		if s.WebinarReactions.Set {
			e.FieldStart("webinar_reactions")
			s.WebinarReactions.Encode(e)
		}
	}
	{
		if s.MeetingSurvey.Set {
			e.FieldStart("meeting_survey")
			s.MeetingSurvey.Encode(e)
		}
	}
	{
		if s.NonVerbalFeedback.Set {
			e.FieldStart("non_verbal_feedback")
			s.NonVerbalFeedback.Encode(e)
		}
	}
	{
		if s.Polling.Set {
			e.FieldStart("polling")
			s.Polling.Encode(e)
		}
	}
	{
		if s.PrivateChat.Set {
			e.FieldStart("private_chat")
			s.PrivateChat.Encode(e)
		}
	}
	{
		if s.RecordPlayVoice.Set {
			e.FieldStart("record_play_voice")
			s.RecordPlayVoice.Encode(e)
		}
	}
	{
		if s.RemoteControl.Set {
			e.FieldStart("remote_control")
			s.RemoteControl.Encode(e)
		}
	}
	{
		if s.RemoteSupport.Set {
			e.FieldStart("remote_support")
			s.RemoteSupport.Encode(e)
		}
	}
	{
		if s.RequestPermissionToUnmuteParticipants.Set {
			e.FieldStart("request_permission_to_unmute_participants")
			s.RequestPermissionToUnmuteParticipants.Encode(e)
		}
	}
	{
		if s.ScreenSharing.Set {
			e.FieldStart("screen_sharing")
			s.ScreenSharing.Encode(e)
		}
	}
	{
		if s.ShareDualCamera.Set {
			e.FieldStart("share_dual_camera")
			s.ShareDualCamera.Encode(e)
		}
	}
	{
		if s.ShowAJoinFromYourBrowserLink.Set {
			e.FieldStart("show_a_join_from_your_browser_link")
			s.ShowAJoinFromYourBrowserLink.Encode(e)
		}
	}
	{
		if s.ShowMeetingControlToolbar.Set {
			e.FieldStart("show_meeting_control_toolbar")
			s.ShowMeetingControlToolbar.Encode(e)
		}
	}
	{
		if s.SlideControl.Set {
			e.FieldStart("slide_control")
			s.SlideControl.Encode(e)
		}
	}
	{
		if s.UncheckedDataCenterRegions != nil {
			e.FieldStart("unchecked_data_center_regions")
			e.ArrStart()
			for _, elem := range s.UncheckedDataCenterRegions {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.VirtualBackground.Set {
			e.FieldStart("virtual_background")
			s.VirtualBackground.Encode(e)
		}
	}
	{
		if s.VirtualBackgroundSettings.Set {
			e.FieldStart("virtual_background_settings")
			s.VirtualBackgroundSettings.Encode(e)
		}
	}
	{
		if s.WaitingRoom.Set {
			e.FieldStart("waiting_room")
			s.WaitingRoom.Encode(e)
		}
	}
	{
		if s.WebinarChat.Set {
			e.FieldStart("webinar_chat")
			s.WebinarChat.Encode(e)
		}
	}
	{
		if s.WebinarLiveStreaming.Set {
			e.FieldStart("webinar_live_streaming")
			s.WebinarLiveStreaming.Encode(e)
		}
	}
	{
		if s.MeetingPolling.Set {
			e.FieldStart("meeting_polling")
			s.MeetingPolling.Encode(e)
		}
	}
	{
		if s.WebinarPolling.Set {
			e.FieldStart("webinar_polling")
			s.WebinarPolling.Encode(e)
		}
	}
	{
		if s.WebinarSurvey.Set {
			e.FieldStart("webinar_survey")
			s.WebinarSurvey.Encode(e)
		}
	}
	{
		if s.WhoCanShareScreen.Set {
			e.FieldStart("who_can_share_screen")
			s.WhoCanShareScreen.Encode(e)
		}
	}
	{
		if s.WhoCanShareScreenWhenSomeoneIsSharing.Set {
			e.FieldStart("who_can_share_screen_when_someone_is_sharing")
			s.WhoCanShareScreenWhenSomeoneIsSharing.Encode(e)
		}
	}
	{
		if s.ParticipantsShareSimultaneously.Set {
			e.FieldStart("participants_share_simultaneously")
			s.ParticipantsShareSimultaneously.Encode(e)
		}
	}
	{
		if s.WorkplaceByFacebook.Set {
			e.FieldStart("workplace_by_facebook")
			s.WorkplaceByFacebook.Encode(e)
		}
	}
	{
		if s.TransferMeetingsBetweenDevices.Set {
			e.FieldStart("transfer_meetings_between_devices")
			s.TransferMeetingsBetweenDevices.Encode(e)
		}
	}
	{
		if s.AllowShowZoomWindows.Set {
			e.FieldStart("allow_show_zoom_windows")
			s.AllowShowZoomWindows.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsOK0InMeeting = [70]string{
	0:  "allow_host_to_enable_focus_mode",
	1:  "allow_users_to_delete_messages_in_meeting_chat",
	2:  "allow_live_streaming",
	3:  "post_meeting_feedback",
	4:  "whiteboard",
	5:  "allow_participants_chat_with",
	6:  "allow_users_save_chats",
	7:  "annotation",
	8:  "attendee_on_hold",
	9:  "attention_mode_focus_mode",
	10: "auto_saving_chat",
	11: "breakout_room",
	12: "breakout_room_schedule",
	13: "chat",
	14: "meeting_question_answer",
	15: "closed_caption",
	16: "closed_captioning",
	17: "co_host",
	18: "custom_data_center_regions",
	19: "custom_live_streaming_service",
	20: "custom_service_instructions",
	21: "data_center_regions",
	22: "disable_screen_sharing_for_host_meetings",
	23: "disable_screen_sharing_for_in_meeting_guests",
	24: "e2e_encryption",
	25: "entry_exit_chime",
	26: "far_end_camera_control",
	27: "feedback",
	28: "file_transfer",
	29: "group_hd",
	30: "webinar_group_hd",
	31: "join_from_desktop",
	32: "join_from_mobile",
	33: "language_interpretation",
	34: "sign_language_interpretation",
	35: "live_streaming_facebook",
	36: "live_streaming_youtube",
	37: "manual_captioning",
	38: "meeting_reactions",
	39: "meeting_reactions_emojis",
	40: "allow_host_panelists_to_use_audible_clap",
	41: "webinar_reactions",
	42: "meeting_survey",
	43: "non_verbal_feedback",
	44: "polling",
	45: "private_chat",
	46: "record_play_voice",
	47: "remote_control",
	48: "remote_support",
	49: "request_permission_to_unmute_participants",
	50: "screen_sharing",
	51: "share_dual_camera",
	52: "show_a_join_from_your_browser_link",
	53: "show_meeting_control_toolbar",
	54: "slide_control",
	55: "unchecked_data_center_regions",
	56: "virtual_background",
	57: "virtual_background_settings",
	58: "waiting_room",
	59: "webinar_chat",
	60: "webinar_live_streaming",
	61: "meeting_polling",
	62: "webinar_polling",
	63: "webinar_survey",
	64: "who_can_share_screen",
	65: "who_can_share_screen_when_someone_is_sharing",
	66: "participants_share_simultaneously",
	67: "workplace_by_facebook",
	68: "transfer_meetings_between_devices",
	69: "allow_show_zoom_windows",
}

// Decode decodes UserSettingsOK0InMeeting from json.
func (s *UserSettingsOK0InMeeting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsOK0InMeeting to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allow_host_to_enable_focus_mode":
			if err := func() error {
				s.AllowHostToEnableFocusMode.Reset()
				if err := s.AllowHostToEnableFocusMode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_host_to_enable_focus_mode\"")
			}
		case "allow_users_to_delete_messages_in_meeting_chat":
			if err := func() error {
				s.AllowUsersToDeleteMessagesInMeetingChat.Reset()
				if err := s.AllowUsersToDeleteMessagesInMeetingChat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_users_to_delete_messages_in_meeting_chat\"")
			}
		case "allow_live_streaming":
			if err := func() error {
				s.AllowLiveStreaming.Reset()
				if err := s.AllowLiveStreaming.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_live_streaming\"")
			}
		case "post_meeting_feedback":
			if err := func() error {
				s.PostMeetingFeedback.Reset()
				if err := s.PostMeetingFeedback.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"post_meeting_feedback\"")
			}
		case "whiteboard":
			if err := func() error {
				s.Whiteboard.Reset()
				if err := s.Whiteboard.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"whiteboard\"")
			}
		case "allow_participants_chat_with":
			if err := func() error {
				s.AllowParticipantsChatWith.Reset()
				if err := s.AllowParticipantsChatWith.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_participants_chat_with\"")
			}
		case "allow_users_save_chats":
			if err := func() error {
				s.AllowUsersSaveChats.Reset()
				if err := s.AllowUsersSaveChats.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_users_save_chats\"")
			}
		case "annotation":
			if err := func() error {
				s.Annotation.Reset()
				if err := s.Annotation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"annotation\"")
			}
		case "attendee_on_hold":
			if err := func() error {
				s.AttendeeOnHold.Reset()
				if err := s.AttendeeOnHold.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"attendee_on_hold\"")
			}
		case "attention_mode_focus_mode":
			if err := func() error {
				s.AttentionModeFocusMode.Reset()
				if err := s.AttentionModeFocusMode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"attention_mode_focus_mode\"")
			}
		case "auto_saving_chat":
			if err := func() error {
				s.AutoSavingChat.Reset()
				if err := s.AutoSavingChat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_saving_chat\"")
			}
		case "breakout_room":
			if err := func() error {
				s.BreakoutRoom.Reset()
				if err := s.BreakoutRoom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"breakout_room\"")
			}
		case "breakout_room_schedule":
			if err := func() error {
				s.BreakoutRoomSchedule.Reset()
				if err := s.BreakoutRoomSchedule.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"breakout_room_schedule\"")
			}
		case "chat":
			if err := func() error {
				s.Chat.Reset()
				if err := s.Chat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"chat\"")
			}
		case "meeting_question_answer":
			if err := func() error {
				s.MeetingQuestionAnswer.Reset()
				if err := s.MeetingQuestionAnswer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_question_answer\"")
			}
		case "closed_caption":
			if err := func() error {
				s.ClosedCaption.Reset()
				if err := s.ClosedCaption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"closed_caption\"")
			}
		case "closed_captioning":
			if err := func() error {
				s.ClosedCaptioning.Reset()
				if err := s.ClosedCaptioning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"closed_captioning\"")
			}
		case "co_host":
			if err := func() error {
				s.CoHost.Reset()
				if err := s.CoHost.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"co_host\"")
			}
		case "custom_data_center_regions":
			if err := func() error {
				s.CustomDataCenterRegions.Reset()
				if err := s.CustomDataCenterRegions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"custom_data_center_regions\"")
			}
		case "custom_live_streaming_service":
			if err := func() error {
				s.CustomLiveStreamingService.Reset()
				if err := s.CustomLiveStreamingService.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"custom_live_streaming_service\"")
			}
		case "custom_service_instructions":
			if err := func() error {
				s.CustomServiceInstructions.Reset()
				if err := s.CustomServiceInstructions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"custom_service_instructions\"")
			}
		case "data_center_regions":
			if err := func() error {
				s.DataCenterRegions = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.DataCenterRegions = append(s.DataCenterRegions, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"data_center_regions\"")
			}
		case "disable_screen_sharing_for_host_meetings":
			if err := func() error {
				s.DisableScreenSharingForHostMeetings.Reset()
				if err := s.DisableScreenSharingForHostMeetings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"disable_screen_sharing_for_host_meetings\"")
			}
		case "disable_screen_sharing_for_in_meeting_guests":
			if err := func() error {
				s.DisableScreenSharingForInMeetingGuests.Reset()
				if err := s.DisableScreenSharingForInMeetingGuests.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"disable_screen_sharing_for_in_meeting_guests\"")
			}
		case "e2e_encryption":
			if err := func() error {
				s.E2eEncryption.Reset()
				if err := s.E2eEncryption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"e2e_encryption\"")
			}
		case "entry_exit_chime":
			if err := func() error {
				s.EntryExitChime.Reset()
				if err := s.EntryExitChime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"entry_exit_chime\"")
			}
		case "far_end_camera_control":
			if err := func() error {
				s.FarEndCameraControl.Reset()
				if err := s.FarEndCameraControl.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"far_end_camera_control\"")
			}
		case "feedback":
			if err := func() error {
				s.Feedback.Reset()
				if err := s.Feedback.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"feedback\"")
			}
		case "file_transfer":
			if err := func() error {
				s.FileTransfer.Reset()
				if err := s.FileTransfer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"file_transfer\"")
			}
		case "group_hd":
			if err := func() error {
				s.GroupHd.Reset()
				if err := s.GroupHd.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"group_hd\"")
			}
		case "webinar_group_hd":
			if err := func() error {
				s.WebinarGroupHd.Reset()
				if err := s.WebinarGroupHd.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webinar_group_hd\"")
			}
		case "join_from_desktop":
			if err := func() error {
				s.JoinFromDesktop.Reset()
				if err := s.JoinFromDesktop.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"join_from_desktop\"")
			}
		case "join_from_mobile":
			if err := func() error {
				s.JoinFromMobile.Reset()
				if err := s.JoinFromMobile.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"join_from_mobile\"")
			}
		case "language_interpretation":
			if err := func() error {
				s.LanguageInterpretation.Reset()
				if err := s.LanguageInterpretation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"language_interpretation\"")
			}
		case "sign_language_interpretation":
			if err := func() error {
				s.SignLanguageInterpretation.Reset()
				if err := s.SignLanguageInterpretation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sign_language_interpretation\"")
			}
		case "live_streaming_facebook":
			if err := func() error {
				s.LiveStreamingFacebook.Reset()
				if err := s.LiveStreamingFacebook.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"live_streaming_facebook\"")
			}
		case "live_streaming_youtube":
			if err := func() error {
				s.LiveStreamingYoutube.Reset()
				if err := s.LiveStreamingYoutube.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"live_streaming_youtube\"")
			}
		case "manual_captioning":
			if err := func() error {
				s.ManualCaptioning.Reset()
				if err := s.ManualCaptioning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"manual_captioning\"")
			}
		case "meeting_reactions":
			if err := func() error {
				s.MeetingReactions.Reset()
				if err := s.MeetingReactions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_reactions\"")
			}
		case "meeting_reactions_emojis":
			if err := func() error {
				s.MeetingReactionsEmojis.Reset()
				if err := s.MeetingReactionsEmojis.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_reactions_emojis\"")
			}
		case "allow_host_panelists_to_use_audible_clap":
			if err := func() error {
				s.AllowHostPanelistsToUseAudibleClap.Reset()
				if err := s.AllowHostPanelistsToUseAudibleClap.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_host_panelists_to_use_audible_clap\"")
			}
		case "webinar_reactions":
			if err := func() error {
				s.WebinarReactions.Reset()
				if err := s.WebinarReactions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webinar_reactions\"")
			}
		case "meeting_survey":
			if err := func() error {
				s.MeetingSurvey.Reset()
				if err := s.MeetingSurvey.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_survey\"")
			}
		case "non_verbal_feedback":
			if err := func() error {
				s.NonVerbalFeedback.Reset()
				if err := s.NonVerbalFeedback.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"non_verbal_feedback\"")
			}
		case "polling":
			if err := func() error {
				s.Polling.Reset()
				if err := s.Polling.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"polling\"")
			}
		case "private_chat":
			if err := func() error {
				s.PrivateChat.Reset()
				if err := s.PrivateChat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"private_chat\"")
			}
		case "record_play_voice":
			if err := func() error {
				s.RecordPlayVoice.Reset()
				if err := s.RecordPlayVoice.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"record_play_voice\"")
			}
		case "remote_control":
			if err := func() error {
				s.RemoteControl.Reset()
				if err := s.RemoteControl.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"remote_control\"")
			}
		case "remote_support":
			if err := func() error {
				s.RemoteSupport.Reset()
				if err := s.RemoteSupport.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"remote_support\"")
			}
		case "request_permission_to_unmute_participants":
			if err := func() error {
				s.RequestPermissionToUnmuteParticipants.Reset()
				if err := s.RequestPermissionToUnmuteParticipants.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"request_permission_to_unmute_participants\"")
			}
		case "screen_sharing":
			if err := func() error {
				s.ScreenSharing.Reset()
				if err := s.ScreenSharing.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"screen_sharing\"")
			}
		case "share_dual_camera":
			if err := func() error {
				s.ShareDualCamera.Reset()
				if err := s.ShareDualCamera.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"share_dual_camera\"")
			}
		case "show_a_join_from_your_browser_link":
			if err := func() error {
				s.ShowAJoinFromYourBrowserLink.Reset()
				if err := s.ShowAJoinFromYourBrowserLink.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"show_a_join_from_your_browser_link\"")
			}
		case "show_meeting_control_toolbar":
			if err := func() error {
				s.ShowMeetingControlToolbar.Reset()
				if err := s.ShowMeetingControlToolbar.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"show_meeting_control_toolbar\"")
			}
		case "slide_control":
			if err := func() error {
				s.SlideControl.Reset()
				if err := s.SlideControl.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"slide_control\"")
			}
		case "unchecked_data_center_regions":
			if err := func() error {
				s.UncheckedDataCenterRegions = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.UncheckedDataCenterRegions = append(s.UncheckedDataCenterRegions, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"unchecked_data_center_regions\"")
			}
		case "virtual_background":
			if err := func() error {
				s.VirtualBackground.Reset()
				if err := s.VirtualBackground.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"virtual_background\"")
			}
		case "virtual_background_settings":
			if err := func() error {
				s.VirtualBackgroundSettings.Reset()
				if err := s.VirtualBackgroundSettings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"virtual_background_settings\"")
			}
		case "waiting_room":
			if err := func() error {
				s.WaitingRoom.Reset()
				if err := s.WaitingRoom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"waiting_room\"")
			}
		case "webinar_chat":
			if err := func() error {
				s.WebinarChat.Reset()
				if err := s.WebinarChat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webinar_chat\"")
			}
		case "webinar_live_streaming":
			if err := func() error {
				s.WebinarLiveStreaming.Reset()
				if err := s.WebinarLiveStreaming.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webinar_live_streaming\"")
			}
		case "meeting_polling":
			if err := func() error {
				s.MeetingPolling.Reset()
				if err := s.MeetingPolling.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_polling\"")
			}
		case "webinar_polling":
			if err := func() error {
				s.WebinarPolling.Reset()
				if err := s.WebinarPolling.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webinar_polling\"")
			}
		case "webinar_survey":
			if err := func() error {
				s.WebinarSurvey.Reset()
				if err := s.WebinarSurvey.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webinar_survey\"")
			}
		case "who_can_share_screen":
			if err := func() error {
				s.WhoCanShareScreen.Reset()
				if err := s.WhoCanShareScreen.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"who_can_share_screen\"")
			}
		case "who_can_share_screen_when_someone_is_sharing":
			if err := func() error {
				s.WhoCanShareScreenWhenSomeoneIsSharing.Reset()
				if err := s.WhoCanShareScreenWhenSomeoneIsSharing.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"who_can_share_screen_when_someone_is_sharing\"")
			}
		case "participants_share_simultaneously":
			if err := func() error {
				s.ParticipantsShareSimultaneously.Reset()
				if err := s.ParticipantsShareSimultaneously.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"participants_share_simultaneously\"")
			}
		case "workplace_by_facebook":
			if err := func() error {
				s.WorkplaceByFacebook.Reset()
				if err := s.WorkplaceByFacebook.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"workplace_by_facebook\"")
			}
		case "transfer_meetings_between_devices":
			if err := func() error {
				s.TransferMeetingsBetweenDevices.Reset()
				if err := s.TransferMeetingsBetweenDevices.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transfer_meetings_between_devices\"")
			}
		case "allow_show_zoom_windows":
			if err := func() error {
				s.AllowShowZoomWindows.Reset()
				if err := s.AllowShowZoomWindows.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_show_zoom_windows\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsOK0InMeeting")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsOK0InMeeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsOK0InMeeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsOK0InMeetingClosedCaptioning) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsOK0InMeetingClosedCaptioning) encodeFields(e *jx.Encoder) {
	{
		if s.AutoTranscribing.Set {
			e.FieldStart("auto_transcribing")
			s.AutoTranscribing.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.SaveCaption.Set {
			e.FieldStart("save_caption")
			s.SaveCaption.Encode(e)
		}
	}
	{
		if s.ThirdPartyCaptioningService.Set {
			e.FieldStart("third_party_captioning_service")
			s.ThirdPartyCaptioningService.Encode(e)
		}
	}
	{
		if s.ViewFullTranscript.Set {
			e.FieldStart("view_full_transcript")
			s.ViewFullTranscript.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsOK0InMeetingClosedCaptioning = [5]string{
	0: "auto_transcribing",
	1: "enable",
	2: "save_caption",
	3: "third_party_captioning_service",
	4: "view_full_transcript",
}

// Decode decodes UserSettingsOK0InMeetingClosedCaptioning from json.
func (s *UserSettingsOK0InMeetingClosedCaptioning) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsOK0InMeetingClosedCaptioning to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "auto_transcribing":
			if err := func() error {
				s.AutoTranscribing.Reset()
				if err := s.AutoTranscribing.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_transcribing\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "save_caption":
			if err := func() error {
				s.SaveCaption.Reset()
				if err := s.SaveCaption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"save_caption\"")
			}
		case "third_party_captioning_service":
			if err := func() error {
				s.ThirdPartyCaptioningService.Reset()
				if err := s.ThirdPartyCaptioningService.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"third_party_captioning_service\"")
			}
		case "view_full_transcript":
			if err := func() error {
				s.ViewFullTranscript.Reset()
				if err := s.ViewFullTranscript.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"view_full_transcript\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsOK0InMeetingClosedCaptioning")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsOK0InMeetingClosedCaptioning) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsOK0InMeetingClosedCaptioning) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsOK0InMeetingLanguageInterpretation) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsOK0InMeetingLanguageInterpretation) encodeFields(e *jx.Encoder) {
	{
		if s.CustomLanguages != nil {
			e.FieldStart("custom_languages")
			e.ArrStart()
			for _, elem := range s.CustomLanguages {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.EnableLanguageInterpretationByDefault.Set {
			e.FieldStart("enable_language_interpretation_by_default")
			s.EnableLanguageInterpretationByDefault.Encode(e)
		}
	}
	{
		if s.AllowParticipantsToSpeakInListeningChannel.Set {
			e.FieldStart("allow_participants_to_speak_in_listening_channel")
			s.AllowParticipantsToSpeakInListeningChannel.Encode(e)
		}
	}
	{
		if s.AllowUpTo25CustomLanguagesWhenSchedulingMeetings.Set {
			e.FieldStart("allow_up_to_25_custom_languages_when_scheduling_meetings")
			s.AllowUpTo25CustomLanguagesWhenSchedulingMeetings.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Languages != nil {
			e.FieldStart("languages")
			e.ArrStart()
			for _, elem := range s.Languages {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfUserSettingsOK0InMeetingLanguageInterpretation = [6]string{
	0: "custom_languages",
	1: "enable_language_interpretation_by_default",
	2: "allow_participants_to_speak_in_listening_channel",
	3: "allow_up_to_25_custom_languages_when_scheduling_meetings",
	4: "enable",
	5: "languages",
}

// Decode decodes UserSettingsOK0InMeetingLanguageInterpretation from json.
func (s *UserSettingsOK0InMeetingLanguageInterpretation) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsOK0InMeetingLanguageInterpretation to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "custom_languages":
			if err := func() error {
				s.CustomLanguages = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.CustomLanguages = append(s.CustomLanguages, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"custom_languages\"")
			}
		case "enable_language_interpretation_by_default":
			if err := func() error {
				s.EnableLanguageInterpretationByDefault.Reset()
				if err := s.EnableLanguageInterpretationByDefault.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable_language_interpretation_by_default\"")
			}
		case "allow_participants_to_speak_in_listening_channel":
			if err := func() error {
				s.AllowParticipantsToSpeakInListeningChannel.Reset()
				if err := s.AllowParticipantsToSpeakInListeningChannel.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_participants_to_speak_in_listening_channel\"")
			}
		case "allow_up_to_25_custom_languages_when_scheduling_meetings":
			if err := func() error {
				s.AllowUpTo25CustomLanguagesWhenSchedulingMeetings.Reset()
				if err := s.AllowUpTo25CustomLanguagesWhenSchedulingMeetings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_up_to_25_custom_languages_when_scheduling_meetings\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "languages":
			if err := func() error {
				s.Languages = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Languages = append(s.Languages, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"languages\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsOK0InMeetingLanguageInterpretation")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsOK0InMeetingLanguageInterpretation) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsOK0InMeetingLanguageInterpretation) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsOK0InMeetingManualCaptioning) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsOK0InMeetingManualCaptioning) encodeFields(e *jx.Encoder) {
	{
		if s.AllowToType.Set {
			e.FieldStart("allow_to_type")
			s.AllowToType.Encode(e)
		}
	}
	{
		if s.AutoGeneratedCaptions.Set {
			e.FieldStart("auto_generated_captions")
			s.AutoGeneratedCaptions.Encode(e)
		}
	}
	{
		if s.FullTranscript.Set {
			e.FieldStart("full_transcript")
			s.FullTranscript.Encode(e)
		}
	}
	{
		if s.ManualCaptions.Set {
			e.FieldStart("manual_captions")
			s.ManualCaptions.Encode(e)
		}
	}
	{
		if s.SaveCaptions.Set {
			e.FieldStart("save_captions")
			s.SaveCaptions.Encode(e)
		}
	}
	{
		if s.ThirdPartyCaptioningService.Set {
			e.FieldStart("third_party_captioning_service")
			s.ThirdPartyCaptioningService.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsOK0InMeetingManualCaptioning = [6]string{
	0: "allow_to_type",
	1: "auto_generated_captions",
	2: "full_transcript",
	3: "manual_captions",
	4: "save_captions",
	5: "third_party_captioning_service",
}

// Decode decodes UserSettingsOK0InMeetingManualCaptioning from json.
func (s *UserSettingsOK0InMeetingManualCaptioning) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsOK0InMeetingManualCaptioning to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allow_to_type":
			if err := func() error {
				s.AllowToType.Reset()
				if err := s.AllowToType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_to_type\"")
			}
		case "auto_generated_captions":
			if err := func() error {
				s.AutoGeneratedCaptions.Reset()
				if err := s.AutoGeneratedCaptions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_generated_captions\"")
			}
		case "full_transcript":
			if err := func() error {
				s.FullTranscript.Reset()
				if err := s.FullTranscript.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"full_transcript\"")
			}
		case "manual_captions":
			if err := func() error {
				s.ManualCaptions.Reset()
				if err := s.ManualCaptions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"manual_captions\"")
			}
		case "save_captions":
			if err := func() error {
				s.SaveCaptions.Reset()
				if err := s.SaveCaptions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"save_captions\"")
			}
		case "third_party_captioning_service":
			if err := func() error {
				s.ThirdPartyCaptioningService.Reset()
				if err := s.ThirdPartyCaptioningService.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"third_party_captioning_service\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsOK0InMeetingManualCaptioning")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsOK0InMeetingManualCaptioning) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsOK0InMeetingManualCaptioning) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsOK0InMeetingMeetingPolling) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsOK0InMeetingMeetingPolling) encodeFields(e *jx.Encoder) {
	{
		if s.AdvancedPolls.Set {
			e.FieldStart("advanced_polls")
			s.AdvancedPolls.Encode(e)
		}
	}
	{
		if s.AllowAlternativeHostToAddEdit.Set {
			e.FieldStart("allow_alternative_host_to_add_edit")
			s.AllowAlternativeHostToAddEdit.Encode(e)
		}
	}
	{
		if s.RequireAnswersToBeAnonymous.Set {
			e.FieldStart("require_answers_to_be_anonymous")
			s.RequireAnswersToBeAnonymous.Encode(e)
		}
	}
	{
		if s.AllowHostToUploadImage.Set {
			e.FieldStart("allow_host_to_upload_image")
			s.AllowHostToUploadImage.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsOK0InMeetingMeetingPolling = [5]string{
	0: "advanced_polls",
	1: "allow_alternative_host_to_add_edit",
	2: "require_answers_to_be_anonymous",
	3: "allow_host_to_upload_image",
	4: "enable",
}

// Decode decodes UserSettingsOK0InMeetingMeetingPolling from json.
func (s *UserSettingsOK0InMeetingMeetingPolling) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsOK0InMeetingMeetingPolling to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "advanced_polls":
			if err := func() error {
				s.AdvancedPolls.Reset()
				if err := s.AdvancedPolls.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"advanced_polls\"")
			}
		case "allow_alternative_host_to_add_edit":
			if err := func() error {
				s.AllowAlternativeHostToAddEdit.Reset()
				if err := s.AllowAlternativeHostToAddEdit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_alternative_host_to_add_edit\"")
			}
		case "require_answers_to_be_anonymous":
			if err := func() error {
				s.RequireAnswersToBeAnonymous.Reset()
				if err := s.RequireAnswersToBeAnonymous.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_answers_to_be_anonymous\"")
			}
		case "allow_host_to_upload_image":
			if err := func() error {
				s.AllowHostToUploadImage.Reset()
				if err := s.AllowHostToUploadImage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_host_to_upload_image\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsOK0InMeetingMeetingPolling")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsOK0InMeetingMeetingPolling) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsOK0InMeetingMeetingPolling) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsOK0InMeetingSignLanguageInterpretation) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsOK0InMeetingSignLanguageInterpretation) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.EnableSignLanguageInterpretationByDefault.Set {
			e.FieldStart("enable_sign_language_interpretation_by_default")
			s.EnableSignLanguageInterpretationByDefault.Encode(e)
		}
	}
	{
		if s.Languages != nil {
			e.FieldStart("languages")
			e.ArrStart()
			for _, elem := range s.Languages {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.CustomLanguages != nil {
			e.FieldStart("custom_languages")
			e.ArrStart()
			for _, elem := range s.CustomLanguages {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfUserSettingsOK0InMeetingSignLanguageInterpretation = [4]string{
	0: "enable",
	1: "enable_sign_language_interpretation_by_default",
	2: "languages",
	3: "custom_languages",
}

// Decode decodes UserSettingsOK0InMeetingSignLanguageInterpretation from json.
func (s *UserSettingsOK0InMeetingSignLanguageInterpretation) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsOK0InMeetingSignLanguageInterpretation to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "enable_sign_language_interpretation_by_default":
			if err := func() error {
				s.EnableSignLanguageInterpretationByDefault.Reset()
				if err := s.EnableSignLanguageInterpretationByDefault.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable_sign_language_interpretation_by_default\"")
			}
		case "languages":
			if err := func() error {
				s.Languages = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Languages = append(s.Languages, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"languages\"")
			}
		case "custom_languages":
			if err := func() error {
				s.CustomLanguages = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.CustomLanguages = append(s.CustomLanguages, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"custom_languages\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsOK0InMeetingSignLanguageInterpretation")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsOK0InMeetingSignLanguageInterpretation) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsOK0InMeetingSignLanguageInterpretation) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsOK0InMeetingVirtualBackgroundSettings) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsOK0InMeetingVirtualBackgroundSettings) encodeFields(e *jx.Encoder) {
	{
		if s.AllowUploadCustom.Set {
			e.FieldStart("allow_upload_custom")
			s.AllowUploadCustom.Encode(e)
		}
	}
	{
		if s.AllowVideos.Set {
			e.FieldStart("allow_videos")
			s.AllowVideos.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Files != nil {
			e.FieldStart("files")
			e.ArrStart()
			for _, elem := range s.Files {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfUserSettingsOK0InMeetingVirtualBackgroundSettings = [4]string{
	0: "allow_upload_custom",
	1: "allow_videos",
	2: "enable",
	3: "files",
}

// Decode decodes UserSettingsOK0InMeetingVirtualBackgroundSettings from json.
func (s *UserSettingsOK0InMeetingVirtualBackgroundSettings) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsOK0InMeetingVirtualBackgroundSettings to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allow_upload_custom":
			if err := func() error {
				s.AllowUploadCustom.Reset()
				if err := s.AllowUploadCustom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_upload_custom\"")
			}
		case "allow_videos":
			if err := func() error {
				s.AllowVideos.Reset()
				if err := s.AllowVideos.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_videos\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "files":
			if err := func() error {
				s.Files = make([]UserSettingsOK0InMeetingVirtualBackgroundSettingsFilesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem UserSettingsOK0InMeetingVirtualBackgroundSettingsFilesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Files = append(s.Files, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"files\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsOK0InMeetingVirtualBackgroundSettings")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsOK0InMeetingVirtualBackgroundSettings) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsOK0InMeetingVirtualBackgroundSettings) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsOK0InMeetingVirtualBackgroundSettingsFilesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsOK0InMeetingVirtualBackgroundSettingsFilesItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.IsDefault.Set {
			e.FieldStart("is_default")
			s.IsDefault.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Size.Set {
			e.FieldStart("size")
			s.Size.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsOK0InMeetingVirtualBackgroundSettingsFilesItem = [5]string{
	0: "id",
	1: "is_default",
	2: "name",
	3: "size",
	4: "type",
}

// Decode decodes UserSettingsOK0InMeetingVirtualBackgroundSettingsFilesItem from json.
func (s *UserSettingsOK0InMeetingVirtualBackgroundSettingsFilesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsOK0InMeetingVirtualBackgroundSettingsFilesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "is_default":
			if err := func() error {
				s.IsDefault.Reset()
				if err := s.IsDefault.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"is_default\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "size":
			if err := func() error {
				s.Size.Reset()
				if err := s.Size.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsOK0InMeetingVirtualBackgroundSettingsFilesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsOK0InMeetingVirtualBackgroundSettingsFilesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsOK0InMeetingVirtualBackgroundSettingsFilesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsOK0InMeetingWebinarChat) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsOK0InMeetingWebinarChat) encodeFields(e *jx.Encoder) {
	{
		if s.AllowAttendeesChatWith.Set {
			e.FieldStart("allow_attendees_chat_with")
			s.AllowAttendeesChatWith.Encode(e)
		}
	}
	{
		if s.AllowAutoSaveLocalChatFile.Set {
			e.FieldStart("allow_auto_save_local_chat_file")
			s.AllowAutoSaveLocalChatFile.Encode(e)
		}
	}
	{
		if s.AllowPanelistsChatWith.Set {
			e.FieldStart("allow_panelists_chat_with")
			s.AllowPanelistsChatWith.Encode(e)
		}
	}
	{
		if s.AllowPanelistsSendDirectMessage.Set {
			e.FieldStart("allow_panelists_send_direct_message")
			s.AllowPanelistsSendDirectMessage.Encode(e)
		}
	}
	{
		if s.AllowUsersSaveChats.Set {
			e.FieldStart("allow_users_save_chats")
			s.AllowUsersSaveChats.Encode(e)
		}
	}
	{
		if s.DefaultAttendeesChatWith.Set {
			e.FieldStart("default_attendees_chat_with")
			s.DefaultAttendeesChatWith.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsOK0InMeetingWebinarChat = [7]string{
	0: "allow_attendees_chat_with",
	1: "allow_auto_save_local_chat_file",
	2: "allow_panelists_chat_with",
	3: "allow_panelists_send_direct_message",
	4: "allow_users_save_chats",
	5: "default_attendees_chat_with",
	6: "enable",
}

// Decode decodes UserSettingsOK0InMeetingWebinarChat from json.
func (s *UserSettingsOK0InMeetingWebinarChat) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsOK0InMeetingWebinarChat to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allow_attendees_chat_with":
			if err := func() error {
				s.AllowAttendeesChatWith.Reset()
				if err := s.AllowAttendeesChatWith.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_attendees_chat_with\"")
			}
		case "allow_auto_save_local_chat_file":
			if err := func() error {
				s.AllowAutoSaveLocalChatFile.Reset()
				if err := s.AllowAutoSaveLocalChatFile.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_auto_save_local_chat_file\"")
			}
		case "allow_panelists_chat_with":
			if err := func() error {
				s.AllowPanelistsChatWith.Reset()
				if err := s.AllowPanelistsChatWith.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_panelists_chat_with\"")
			}
		case "allow_panelists_send_direct_message":
			if err := func() error {
				s.AllowPanelistsSendDirectMessage.Reset()
				if err := s.AllowPanelistsSendDirectMessage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_panelists_send_direct_message\"")
			}
		case "allow_users_save_chats":
			if err := func() error {
				s.AllowUsersSaveChats.Reset()
				if err := s.AllowUsersSaveChats.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_users_save_chats\"")
			}
		case "default_attendees_chat_with":
			if err := func() error {
				s.DefaultAttendeesChatWith.Reset()
				if err := s.DefaultAttendeesChatWith.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"default_attendees_chat_with\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsOK0InMeetingWebinarChat")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsOK0InMeetingWebinarChat) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsOK0InMeetingWebinarChat) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsOK0InMeetingWebinarLiveStreaming) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsOK0InMeetingWebinarLiveStreaming) encodeFields(e *jx.Encoder) {
	{
		if s.CustomServiceInstructions.Set {
			e.FieldStart("custom_service_instructions")
			s.CustomServiceInstructions.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.LiveStreamingReminder.Set {
			e.FieldStart("live_streaming_reminder")
			s.LiveStreamingReminder.Encode(e)
		}
	}
	{
		if s.LiveStreamingService != nil {
			e.FieldStart("live_streaming_service")
			e.ArrStart()
			for _, elem := range s.LiveStreamingService {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfUserSettingsOK0InMeetingWebinarLiveStreaming = [4]string{
	0: "custom_service_instructions",
	1: "enable",
	2: "live_streaming_reminder",
	3: "live_streaming_service",
}

// Decode decodes UserSettingsOK0InMeetingWebinarLiveStreaming from json.
func (s *UserSettingsOK0InMeetingWebinarLiveStreaming) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsOK0InMeetingWebinarLiveStreaming to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "custom_service_instructions":
			if err := func() error {
				s.CustomServiceInstructions.Reset()
				if err := s.CustomServiceInstructions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"custom_service_instructions\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "live_streaming_reminder":
			if err := func() error {
				s.LiveStreamingReminder.Reset()
				if err := s.LiveStreamingReminder.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"live_streaming_reminder\"")
			}
		case "live_streaming_service":
			if err := func() error {
				s.LiveStreamingService = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.LiveStreamingService = append(s.LiveStreamingService, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"live_streaming_service\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsOK0InMeetingWebinarLiveStreaming")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsOK0InMeetingWebinarLiveStreaming) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsOK0InMeetingWebinarLiveStreaming) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsOK0InMeetingWebinarPolling) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsOK0InMeetingWebinarPolling) encodeFields(e *jx.Encoder) {
	{
		if s.AdvancedPolls.Set {
			e.FieldStart("advanced_polls")
			s.AdvancedPolls.Encode(e)
		}
	}
	{
		if s.AllowAlternativeHostToAddEdit.Set {
			e.FieldStart("allow_alternative_host_to_add_edit")
			s.AllowAlternativeHostToAddEdit.Encode(e)
		}
	}
	{
		if s.RequireAnswersToBeAnonymous.Set {
			e.FieldStart("require_answers_to_be_anonymous")
			s.RequireAnswersToBeAnonymous.Encode(e)
		}
	}
	{
		if s.AllowHostToUploadImage.Set {
			e.FieldStart("allow_host_to_upload_image")
			s.AllowHostToUploadImage.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsOK0InMeetingWebinarPolling = [5]string{
	0: "advanced_polls",
	1: "allow_alternative_host_to_add_edit",
	2: "require_answers_to_be_anonymous",
	3: "allow_host_to_upload_image",
	4: "enable",
}

// Decode decodes UserSettingsOK0InMeetingWebinarPolling from json.
func (s *UserSettingsOK0InMeetingWebinarPolling) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsOK0InMeetingWebinarPolling to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "advanced_polls":
			if err := func() error {
				s.AdvancedPolls.Reset()
				if err := s.AdvancedPolls.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"advanced_polls\"")
			}
		case "allow_alternative_host_to_add_edit":
			if err := func() error {
				s.AllowAlternativeHostToAddEdit.Reset()
				if err := s.AllowAlternativeHostToAddEdit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_alternative_host_to_add_edit\"")
			}
		case "require_answers_to_be_anonymous":
			if err := func() error {
				s.RequireAnswersToBeAnonymous.Reset()
				if err := s.RequireAnswersToBeAnonymous.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_answers_to_be_anonymous\"")
			}
		case "allow_host_to_upload_image":
			if err := func() error {
				s.AllowHostToUploadImage.Reset()
				if err := s.AllowHostToUploadImage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_host_to_upload_image\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsOK0InMeetingWebinarPolling")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsOK0InMeetingWebinarPolling) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsOK0InMeetingWebinarPolling) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsOK0Profile) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsOK0Profile) encodeFields(e *jx.Encoder) {
	{
		if s.RecordingStorageLocation.Set {
			e.FieldStart("recording_storage_location")
			s.RecordingStorageLocation.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsOK0Profile = [1]string{
	0: "recording_storage_location",
}

// Decode decodes UserSettingsOK0Profile from json.
func (s *UserSettingsOK0Profile) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsOK0Profile to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "recording_storage_location":
			if err := func() error {
				s.RecordingStorageLocation.Reset()
				if err := s.RecordingStorageLocation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_storage_location\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsOK0Profile")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsOK0Profile) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsOK0Profile) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsOK0ProfileRecordingStorageLocation) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsOK0ProfileRecordingStorageLocation) encodeFields(e *jx.Encoder) {
	{
		if s.AllowedValues != nil {
			e.FieldStart("allowed_values")
			e.ArrStart()
			for _, elem := range s.AllowedValues {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Value.Set {
			e.FieldStart("value")
			s.Value.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsOK0ProfileRecordingStorageLocation = [2]string{
	0: "allowed_values",
	1: "value",
}

// Decode decodes UserSettingsOK0ProfileRecordingStorageLocation from json.
func (s *UserSettingsOK0ProfileRecordingStorageLocation) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsOK0ProfileRecordingStorageLocation to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allowed_values":
			if err := func() error {
				s.AllowedValues = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.AllowedValues = append(s.AllowedValues, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allowed_values\"")
			}
		case "value":
			if err := func() error {
				s.Value.Reset()
				if err := s.Value.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"value\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsOK0ProfileRecordingStorageLocation")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsOK0ProfileRecordingStorageLocation) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsOK0ProfileRecordingStorageLocation) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsOK0Recording) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsOK0Recording) encodeFields(e *jx.Encoder) {
	{
		if s.AskHostToConfirmDisclaimer.Set {
			e.FieldStart("ask_host_to_confirm_disclaimer")
			s.AskHostToConfirmDisclaimer.Encode(e)
		}
	}
	{
		if s.AskParticipantsToConsentDisclaimer.Set {
			e.FieldStart("ask_participants_to_consent_disclaimer")
			s.AskParticipantsToConsentDisclaimer.Encode(e)
		}
	}
	{
		if s.AutoDeleteCmr.Set {
			e.FieldStart("auto_delete_cmr")
			s.AutoDeleteCmr.Encode(e)
		}
	}
	{
		if s.AutoDeleteCmrDays.Set {
			e.FieldStart("auto_delete_cmr_days")
			s.AutoDeleteCmrDays.Encode(e)
		}
	}
	{
		if s.RecordFilesSeparately.Set {
			e.FieldStart("record_files_separately")
			s.RecordFilesSeparately.Encode(e)
		}
	}
	{
		if s.DisplayParticipantName.Set {
			e.FieldStart("display_participant_name")
			s.DisplayParticipantName.Encode(e)
		}
	}
	{
		if s.RecordingThumbnails.Set {
			e.FieldStart("recording_thumbnails")
			s.RecordingThumbnails.Encode(e)
		}
	}
	{
		if s.OptimizeRecordingFor3rdPartyVideoEditor.Set {
			e.FieldStart("optimize_recording_for_3rd_party_video_editor")
			s.OptimizeRecordingFor3rdPartyVideoEditor.Encode(e)
		}
	}
	{
		if s.RecordingHighlight.Set {
			e.FieldStart("recording_highlight")
			s.RecordingHighlight.Encode(e)
		}
	}
	{
		if s.SavePanelistChat.Set {
			e.FieldStart("save_panelist_chat")
			s.SavePanelistChat.Encode(e)
		}
	}
	{
		if s.SavePollResults.Set {
			e.FieldStart("save_poll_results")
			s.SavePollResults.Encode(e)
		}
	}
	{
		if s.SaveCloseCaption.Set {
			e.FieldStart("save_close_caption")
			s.SaveCloseCaption.Encode(e)
		}
	}
	{
		if s.AutoRecording.Set {
			e.FieldStart("auto_recording")
			s.AutoRecording.Encode(e)
		}
	}
	{
		if s.CloudRecording.Set {
			e.FieldStart("cloud_recording")
			s.CloudRecording.Encode(e)
		}
	}
	{
		if s.HostPauseStopRecording.Set {
			e.FieldStart("host_pause_stop_recording")
			s.HostPauseStopRecording.Encode(e)
		}
	}
	{
		if s.IPAddressAccessControl.Set {
			e.FieldStart("ip_address_access_control")
			s.IPAddressAccessControl.Encode(e)
		}
	}
	{
		if s.LocalRecording.Set {
			e.FieldStart("local_recording")
			s.LocalRecording.Encode(e)
		}
	}
	{
		if s.RecordAudioFile.Set {
			e.FieldStart("record_audio_file")
			s.RecordAudioFile.Encode(e)
		}
	}
	{
		if s.RecordGalleryView.Set {
			e.FieldStart("record_gallery_view")
			s.RecordGalleryView.Encode(e)
		}
	}
	{
		if s.RecordSpeakerView.Set {
			e.FieldStart("record_speaker_view")
			s.RecordSpeakerView.Encode(e)
		}
	}
	{
		if s.RecordingAudioTranscript.Set {
			e.FieldStart("recording_audio_transcript")
			s.RecordingAudioTranscript.Encode(e)
		}
	}
	{
		if s.RecordingDisclaimer.Set {
			e.FieldStart("recording_disclaimer")
			s.RecordingDisclaimer.Encode(e)
		}
	}
	{
		if s.SmartRecording.Set {
			e.FieldStart("smart_recording")
			s.SmartRecording.Encode(e)
		}
	}
	{
		if s.RecordingPasswordRequirement.Set {
			e.FieldStart("recording_password_requirement")
			s.RecordingPasswordRequirement.Encode(e)
		}
	}
	{
		if s.SaveChatText.Set {
			e.FieldStart("save_chat_text")
			s.SaveChatText.Encode(e)
		}
	}
	{
		if s.ShowTimestamp.Set {
			e.FieldStart("show_timestamp")
			s.ShowTimestamp.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsOK0Recording = [26]string{
	0:  "ask_host_to_confirm_disclaimer",
	1:  "ask_participants_to_consent_disclaimer",
	2:  "auto_delete_cmr",
	3:  "auto_delete_cmr_days",
	4:  "record_files_separately",
	5:  "display_participant_name",
	6:  "recording_thumbnails",
	7:  "optimize_recording_for_3rd_party_video_editor",
	8:  "recording_highlight",
	9:  "save_panelist_chat",
	10: "save_poll_results",
	11: "save_close_caption",
	12: "auto_recording",
	13: "cloud_recording",
	14: "host_pause_stop_recording",
	15: "ip_address_access_control",
	16: "local_recording",
	17: "record_audio_file",
	18: "record_gallery_view",
	19: "record_speaker_view",
	20: "recording_audio_transcript",
	21: "recording_disclaimer",
	22: "smart_recording",
	23: "recording_password_requirement",
	24: "save_chat_text",
	25: "show_timestamp",
}

// Decode decodes UserSettingsOK0Recording from json.
func (s *UserSettingsOK0Recording) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsOK0Recording to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "ask_host_to_confirm_disclaimer":
			if err := func() error {
				s.AskHostToConfirmDisclaimer.Reset()
				if err := s.AskHostToConfirmDisclaimer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ask_host_to_confirm_disclaimer\"")
			}
		case "ask_participants_to_consent_disclaimer":
			if err := func() error {
				s.AskParticipantsToConsentDisclaimer.Reset()
				if err := s.AskParticipantsToConsentDisclaimer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ask_participants_to_consent_disclaimer\"")
			}
		case "auto_delete_cmr":
			if err := func() error {
				s.AutoDeleteCmr.Reset()
				if err := s.AutoDeleteCmr.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_delete_cmr\"")
			}
		case "auto_delete_cmr_days":
			if err := func() error {
				s.AutoDeleteCmrDays.Reset()
				if err := s.AutoDeleteCmrDays.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_delete_cmr_days\"")
			}
		case "record_files_separately":
			if err := func() error {
				s.RecordFilesSeparately.Reset()
				if err := s.RecordFilesSeparately.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"record_files_separately\"")
			}
		case "display_participant_name":
			if err := func() error {
				s.DisplayParticipantName.Reset()
				if err := s.DisplayParticipantName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_participant_name\"")
			}
		case "recording_thumbnails":
			if err := func() error {
				s.RecordingThumbnails.Reset()
				if err := s.RecordingThumbnails.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_thumbnails\"")
			}
		case "optimize_recording_for_3rd_party_video_editor":
			if err := func() error {
				s.OptimizeRecordingFor3rdPartyVideoEditor.Reset()
				if err := s.OptimizeRecordingFor3rdPartyVideoEditor.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optimize_recording_for_3rd_party_video_editor\"")
			}
		case "recording_highlight":
			if err := func() error {
				s.RecordingHighlight.Reset()
				if err := s.RecordingHighlight.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_highlight\"")
			}
		case "save_panelist_chat":
			if err := func() error {
				s.SavePanelistChat.Reset()
				if err := s.SavePanelistChat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"save_panelist_chat\"")
			}
		case "save_poll_results":
			if err := func() error {
				s.SavePollResults.Reset()
				if err := s.SavePollResults.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"save_poll_results\"")
			}
		case "save_close_caption":
			if err := func() error {
				s.SaveCloseCaption.Reset()
				if err := s.SaveCloseCaption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"save_close_caption\"")
			}
		case "auto_recording":
			if err := func() error {
				s.AutoRecording.Reset()
				if err := s.AutoRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_recording\"")
			}
		case "cloud_recording":
			if err := func() error {
				s.CloudRecording.Reset()
				if err := s.CloudRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cloud_recording\"")
			}
		case "host_pause_stop_recording":
			if err := func() error {
				s.HostPauseStopRecording.Reset()
				if err := s.HostPauseStopRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"host_pause_stop_recording\"")
			}
		case "ip_address_access_control":
			if err := func() error {
				s.IPAddressAccessControl.Reset()
				if err := s.IPAddressAccessControl.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ip_address_access_control\"")
			}
		case "local_recording":
			if err := func() error {
				s.LocalRecording.Reset()
				if err := s.LocalRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"local_recording\"")
			}
		case "record_audio_file":
			if err := func() error {
				s.RecordAudioFile.Reset()
				if err := s.RecordAudioFile.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"record_audio_file\"")
			}
		case "record_gallery_view":
			if err := func() error {
				s.RecordGalleryView.Reset()
				if err := s.RecordGalleryView.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"record_gallery_view\"")
			}
		case "record_speaker_view":
			if err := func() error {
				s.RecordSpeakerView.Reset()
				if err := s.RecordSpeakerView.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"record_speaker_view\"")
			}
		case "recording_audio_transcript":
			if err := func() error {
				s.RecordingAudioTranscript.Reset()
				if err := s.RecordingAudioTranscript.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_audio_transcript\"")
			}
		case "recording_disclaimer":
			if err := func() error {
				s.RecordingDisclaimer.Reset()
				if err := s.RecordingDisclaimer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_disclaimer\"")
			}
		case "smart_recording":
			if err := func() error {
				s.SmartRecording.Reset()
				if err := s.SmartRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"smart_recording\"")
			}
		case "recording_password_requirement":
			if err := func() error {
				s.RecordingPasswordRequirement.Reset()
				if err := s.RecordingPasswordRequirement.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_password_requirement\"")
			}
		case "save_chat_text":
			if err := func() error {
				s.SaveChatText.Reset()
				if err := s.SaveChatText.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"save_chat_text\"")
			}
		case "show_timestamp":
			if err := func() error {
				s.ShowTimestamp.Reset()
				if err := s.ShowTimestamp.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"show_timestamp\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsOK0Recording")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsOK0Recording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsOK0Recording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsOK0RecordingIPAddressAccessControl) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsOK0RecordingIPAddressAccessControl) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.IPAddressesOrRanges.Set {
			e.FieldStart("ip_addresses_or_ranges")
			s.IPAddressesOrRanges.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsOK0RecordingIPAddressAccessControl = [2]string{
	0: "enable",
	1: "ip_addresses_or_ranges",
}

// Decode decodes UserSettingsOK0RecordingIPAddressAccessControl from json.
func (s *UserSettingsOK0RecordingIPAddressAccessControl) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsOK0RecordingIPAddressAccessControl to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "ip_addresses_or_ranges":
			if err := func() error {
				s.IPAddressesOrRanges.Reset()
				if err := s.IPAddressesOrRanges.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ip_addresses_or_ranges\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsOK0RecordingIPAddressAccessControl")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsOK0RecordingIPAddressAccessControl) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsOK0RecordingIPAddressAccessControl) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsOK0RecordingRecordFilesSeparately) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsOK0RecordingRecordFilesSeparately) encodeFields(e *jx.Encoder) {
	{
		if s.ActiveSpeaker.Set {
			e.FieldStart("active_speaker")
			s.ActiveSpeaker.Encode(e)
		}
	}
	{
		if s.GalleryView.Set {
			e.FieldStart("gallery_view")
			s.GalleryView.Encode(e)
		}
	}
	{
		if s.SharedScreen.Set {
			e.FieldStart("shared_screen")
			s.SharedScreen.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsOK0RecordingRecordFilesSeparately = [3]string{
	0: "active_speaker",
	1: "gallery_view",
	2: "shared_screen",
}

// Decode decodes UserSettingsOK0RecordingRecordFilesSeparately from json.
func (s *UserSettingsOK0RecordingRecordFilesSeparately) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsOK0RecordingRecordFilesSeparately to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "active_speaker":
			if err := func() error {
				s.ActiveSpeaker.Reset()
				if err := s.ActiveSpeaker.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"active_speaker\"")
			}
		case "gallery_view":
			if err := func() error {
				s.GalleryView.Reset()
				if err := s.GalleryView.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"gallery_view\"")
			}
		case "shared_screen":
			if err := func() error {
				s.SharedScreen.Reset()
				if err := s.SharedScreen.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shared_screen\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsOK0RecordingRecordFilesSeparately")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsOK0RecordingRecordFilesSeparately) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsOK0RecordingRecordFilesSeparately) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsOK0RecordingRecordingPasswordRequirement) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsOK0RecordingRecordingPasswordRequirement) encodeFields(e *jx.Encoder) {
	{
		if s.HaveLetter.Set {
			e.FieldStart("have_letter")
			s.HaveLetter.Encode(e)
		}
	}
	{
		if s.HaveNumber.Set {
			e.FieldStart("have_number")
			s.HaveNumber.Encode(e)
		}
	}
	{
		if s.HaveSpecialCharacter.Set {
			e.FieldStart("have_special_character")
			s.HaveSpecialCharacter.Encode(e)
		}
	}
	{
		if s.Length.Set {
			e.FieldStart("length")
			s.Length.Encode(e)
		}
	}
	{
		if s.OnlyAllowNumeric.Set {
			e.FieldStart("only_allow_numeric")
			s.OnlyAllowNumeric.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsOK0RecordingRecordingPasswordRequirement = [5]string{
	0: "have_letter",
	1: "have_number",
	2: "have_special_character",
	3: "length",
	4: "only_allow_numeric",
}

// Decode decodes UserSettingsOK0RecordingRecordingPasswordRequirement from json.
func (s *UserSettingsOK0RecordingRecordingPasswordRequirement) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsOK0RecordingRecordingPasswordRequirement to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "have_letter":
			if err := func() error {
				s.HaveLetter.Reset()
				if err := s.HaveLetter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"have_letter\"")
			}
		case "have_number":
			if err := func() error {
				s.HaveNumber.Reset()
				if err := s.HaveNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"have_number\"")
			}
		case "have_special_character":
			if err := func() error {
				s.HaveSpecialCharacter.Reset()
				if err := s.HaveSpecialCharacter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"have_special_character\"")
			}
		case "length":
			if err := func() error {
				s.Length.Reset()
				if err := s.Length.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"length\"")
			}
		case "only_allow_numeric":
			if err := func() error {
				s.OnlyAllowNumeric.Reset()
				if err := s.OnlyAllowNumeric.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"only_allow_numeric\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsOK0RecordingRecordingPasswordRequirement")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsOK0RecordingRecordingPasswordRequirement) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsOK0RecordingRecordingPasswordRequirement) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsOK0RecordingSmartRecording) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsOK0RecordingSmartRecording) encodeFields(e *jx.Encoder) {
	{
		if s.CreateRecordingHighlights.Set {
			e.FieldStart("create_recording_highlights")
			s.CreateRecordingHighlights.Encode(e)
		}
	}
	{
		if s.CreateSmartChapters.Set {
			e.FieldStart("create_smart_chapters")
			s.CreateSmartChapters.Encode(e)
		}
	}
	{
		if s.CreateNextSteps.Set {
			e.FieldStart("create_next_steps")
			s.CreateNextSteps.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsOK0RecordingSmartRecording = [3]string{
	0: "create_recording_highlights",
	1: "create_smart_chapters",
	2: "create_next_steps",
}

// Decode decodes UserSettingsOK0RecordingSmartRecording from json.
func (s *UserSettingsOK0RecordingSmartRecording) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsOK0RecordingSmartRecording to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "create_recording_highlights":
			if err := func() error {
				s.CreateRecordingHighlights.Reset()
				if err := s.CreateRecordingHighlights.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"create_recording_highlights\"")
			}
		case "create_smart_chapters":
			if err := func() error {
				s.CreateSmartChapters.Reset()
				if err := s.CreateSmartChapters.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"create_smart_chapters\"")
			}
		case "create_next_steps":
			if err := func() error {
				s.CreateNextSteps.Reset()
				if err := s.CreateNextSteps.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"create_next_steps\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsOK0RecordingSmartRecording")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsOK0RecordingSmartRecording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsOK0RecordingSmartRecording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsOK0ScheduleMeeting) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsOK0ScheduleMeeting) encodeFields(e *jx.Encoder) {
	{
		if s.AudioType.Set {
			e.FieldStart("audio_type")
			s.AudioType.Encode(e)
		}
	}
	{
		if s.DefaultPasswordForScheduledMeetings.Set {
			e.FieldStart("default_password_for_scheduled_meetings")
			s.DefaultPasswordForScheduledMeetings.Encode(e)
		}
	}
	{
		if s.EmbedPasswordInJoinLink.Set {
			e.FieldStart("embed_password_in_join_link")
			s.EmbedPasswordInJoinLink.Encode(e)
		}
	}
	{
		if s.ForcePmiJbhPassword.Set {
			e.FieldStart("force_pmi_jbh_password")
			s.ForcePmiJbhPassword.Encode(e)
		}
	}
	{
		if s.HostVideo.Set {
			e.FieldStart("host_video")
			s.HostVideo.Encode(e)
		}
	}
	{
		if s.JoinBeforeHost.Set {
			e.FieldStart("join_before_host")
			s.JoinBeforeHost.Encode(e)
		}
	}
	{
		if s.MeetingPasswordRequirement.Set {
			e.FieldStart("meeting_password_requirement")
			s.MeetingPasswordRequirement.Encode(e)
		}
	}
	{
		if s.ParticipantsVideo.Set {
			e.FieldStart("participants_video")
			s.ParticipantsVideo.Encode(e)
		}
	}
	{
		if s.PersonalMeeting.Set {
			e.FieldStart("personal_meeting")
			s.PersonalMeeting.Encode(e)
		}
	}
	{
		if s.PmiPassword.Set {
			e.FieldStart("pmi_password")
			s.PmiPassword.Encode(e)
		}
	}
	{
		if s.PstnPasswordProtected.Set {
			e.FieldStart("pstn_password_protected")
			s.PstnPasswordProtected.Encode(e)
		}
	}
	{
		if s.RequirePasswordForInstantMeetings.Set {
			e.FieldStart("require_password_for_instant_meetings")
			s.RequirePasswordForInstantMeetings.Encode(e)
		}
	}
	{
		if s.RequirePasswordForPmiMeetings.Set {
			e.FieldStart("require_password_for_pmi_meetings")
			s.RequirePasswordForPmiMeetings.Encode(e)
		}
	}
	{
		if s.RequirePasswordForScheduledMeetings.Set {
			e.FieldStart("require_password_for_scheduled_meetings")
			s.RequirePasswordForScheduledMeetings.Encode(e)
		}
	}
	{
		if s.RequirePasswordForSchedulingNewMeetings.Set {
			e.FieldStart("require_password_for_scheduling_new_meetings")
			s.RequirePasswordForSchedulingNewMeetings.Encode(e)
		}
	}
	{
		if s.UsePmiForInstantMeetings.Set {
			e.FieldStart("use_pmi_for_instant_meetings")
			s.UsePmiForInstantMeetings.Encode(e)
		}
	}
	{
		if s.UsePmiForScheduledMeetings.Set {
			e.FieldStart("use_pmi_for_scheduled_meetings")
			s.UsePmiForScheduledMeetings.Encode(e)
		}
	}
	{
		if s.ContinuousMeetingChat.Set {
			e.FieldStart("continuous_meeting_chat")
			s.ContinuousMeetingChat.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsOK0ScheduleMeeting = [18]string{
	0:  "audio_type",
	1:  "default_password_for_scheduled_meetings",
	2:  "embed_password_in_join_link",
	3:  "force_pmi_jbh_password",
	4:  "host_video",
	5:  "join_before_host",
	6:  "meeting_password_requirement",
	7:  "participants_video",
	8:  "personal_meeting",
	9:  "pmi_password",
	10: "pstn_password_protected",
	11: "require_password_for_instant_meetings",
	12: "require_password_for_pmi_meetings",
	13: "require_password_for_scheduled_meetings",
	14: "require_password_for_scheduling_new_meetings",
	15: "use_pmi_for_instant_meetings",
	16: "use_pmi_for_scheduled_meetings",
	17: "continuous_meeting_chat",
}

// Decode decodes UserSettingsOK0ScheduleMeeting from json.
func (s *UserSettingsOK0ScheduleMeeting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsOK0ScheduleMeeting to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_type":
			if err := func() error {
				s.AudioType.Reset()
				if err := s.AudioType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_type\"")
			}
		case "default_password_for_scheduled_meetings":
			if err := func() error {
				s.DefaultPasswordForScheduledMeetings.Reset()
				if err := s.DefaultPasswordForScheduledMeetings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"default_password_for_scheduled_meetings\"")
			}
		case "embed_password_in_join_link":
			if err := func() error {
				s.EmbedPasswordInJoinLink.Reset()
				if err := s.EmbedPasswordInJoinLink.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"embed_password_in_join_link\"")
			}
		case "force_pmi_jbh_password":
			if err := func() error {
				s.ForcePmiJbhPassword.Reset()
				if err := s.ForcePmiJbhPassword.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"force_pmi_jbh_password\"")
			}
		case "host_video":
			if err := func() error {
				s.HostVideo.Reset()
				if err := s.HostVideo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"host_video\"")
			}
		case "join_before_host":
			if err := func() error {
				s.JoinBeforeHost.Reset()
				if err := s.JoinBeforeHost.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"join_before_host\"")
			}
		case "meeting_password_requirement":
			if err := func() error {
				s.MeetingPasswordRequirement.Reset()
				if err := s.MeetingPasswordRequirement.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_password_requirement\"")
			}
		case "participants_video":
			if err := func() error {
				s.ParticipantsVideo.Reset()
				if err := s.ParticipantsVideo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"participants_video\"")
			}
		case "personal_meeting":
			if err := func() error {
				s.PersonalMeeting.Reset()
				if err := s.PersonalMeeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"personal_meeting\"")
			}
		case "pmi_password":
			if err := func() error {
				s.PmiPassword.Reset()
				if err := s.PmiPassword.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pmi_password\"")
			}
		case "pstn_password_protected":
			if err := func() error {
				s.PstnPasswordProtected.Reset()
				if err := s.PstnPasswordProtected.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pstn_password_protected\"")
			}
		case "require_password_for_instant_meetings":
			if err := func() error {
				s.RequirePasswordForInstantMeetings.Reset()
				if err := s.RequirePasswordForInstantMeetings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_password_for_instant_meetings\"")
			}
		case "require_password_for_pmi_meetings":
			if err := func() error {
				s.RequirePasswordForPmiMeetings.Reset()
				if err := s.RequirePasswordForPmiMeetings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_password_for_pmi_meetings\"")
			}
		case "require_password_for_scheduled_meetings":
			if err := func() error {
				s.RequirePasswordForScheduledMeetings.Reset()
				if err := s.RequirePasswordForScheduledMeetings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_password_for_scheduled_meetings\"")
			}
		case "require_password_for_scheduling_new_meetings":
			if err := func() error {
				s.RequirePasswordForSchedulingNewMeetings.Reset()
				if err := s.RequirePasswordForSchedulingNewMeetings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_password_for_scheduling_new_meetings\"")
			}
		case "use_pmi_for_instant_meetings":
			if err := func() error {
				s.UsePmiForInstantMeetings.Reset()
				if err := s.UsePmiForInstantMeetings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"use_pmi_for_instant_meetings\"")
			}
		case "use_pmi_for_scheduled_meetings":
			if err := func() error {
				s.UsePmiForScheduledMeetings.Reset()
				if err := s.UsePmiForScheduledMeetings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"use_pmi_for_scheduled_meetings\"")
			}
		case "continuous_meeting_chat":
			if err := func() error {
				s.ContinuousMeetingChat.Reset()
				if err := s.ContinuousMeetingChat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"continuous_meeting_chat\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsOK0ScheduleMeeting")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsOK0ScheduleMeeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsOK0ScheduleMeeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsOK0ScheduleMeetingContinuousMeetingChat) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsOK0ScheduleMeetingContinuousMeetingChat) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.CanAddExternalUsers.Set {
			e.FieldStart("can_add_external_users")
			s.CanAddExternalUsers.Encode(e)
		}
	}
	{
		if s.AutoAddInvitedExternalUsers.Set {
			e.FieldStart("auto_add_invited_external_users")
			s.AutoAddInvitedExternalUsers.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsOK0ScheduleMeetingContinuousMeetingChat = [3]string{
	0: "enable",
	1: "can_add_external_users",
	2: "auto_add_invited_external_users",
}

// Decode decodes UserSettingsOK0ScheduleMeetingContinuousMeetingChat from json.
func (s *UserSettingsOK0ScheduleMeetingContinuousMeetingChat) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsOK0ScheduleMeetingContinuousMeetingChat to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "can_add_external_users":
			if err := func() error {
				s.CanAddExternalUsers.Reset()
				if err := s.CanAddExternalUsers.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"can_add_external_users\"")
			}
		case "auto_add_invited_external_users":
			if err := func() error {
				s.AutoAddInvitedExternalUsers.Reset()
				if err := s.AutoAddInvitedExternalUsers.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_add_invited_external_users\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsOK0ScheduleMeetingContinuousMeetingChat")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsOK0ScheduleMeetingContinuousMeetingChat) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsOK0ScheduleMeetingContinuousMeetingChat) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsOK0ScheduleMeetingMeetingPasswordRequirement) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsOK0ScheduleMeetingMeetingPasswordRequirement) encodeFields(e *jx.Encoder) {
	{
		if s.ConsecutiveCharactersLength.Set {
			e.FieldStart("consecutive_characters_length")
			s.ConsecutiveCharactersLength.Encode(e)
		}
	}
	{
		if s.HaveLetter.Set {
			e.FieldStart("have_letter")
			s.HaveLetter.Encode(e)
		}
	}
	{
		if s.HaveNumber.Set {
			e.FieldStart("have_number")
			s.HaveNumber.Encode(e)
		}
	}
	{
		if s.HaveSpecialCharacter.Set {
			e.FieldStart("have_special_character")
			s.HaveSpecialCharacter.Encode(e)
		}
	}
	{
		if s.HaveUpperAndLowerCharacters.Set {
			e.FieldStart("have_upper_and_lower_characters")
			s.HaveUpperAndLowerCharacters.Encode(e)
		}
	}
	{
		if s.Length.Set {
			e.FieldStart("length")
			s.Length.Encode(e)
		}
	}
	{
		if s.OnlyAllowNumeric.Set {
			e.FieldStart("only_allow_numeric")
			s.OnlyAllowNumeric.Encode(e)
		}
	}
	{
		if s.WeakEnhanceDetection.Set {
			e.FieldStart("weak_enhance_detection")
			s.WeakEnhanceDetection.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsOK0ScheduleMeetingMeetingPasswordRequirement = [8]string{
	0: "consecutive_characters_length",
	1: "have_letter",
	2: "have_number",
	3: "have_special_character",
	4: "have_upper_and_lower_characters",
	5: "length",
	6: "only_allow_numeric",
	7: "weak_enhance_detection",
}

// Decode decodes UserSettingsOK0ScheduleMeetingMeetingPasswordRequirement from json.
func (s *UserSettingsOK0ScheduleMeetingMeetingPasswordRequirement) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsOK0ScheduleMeetingMeetingPasswordRequirement to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "consecutive_characters_length":
			if err := func() error {
				s.ConsecutiveCharactersLength.Reset()
				if err := s.ConsecutiveCharactersLength.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"consecutive_characters_length\"")
			}
		case "have_letter":
			if err := func() error {
				s.HaveLetter.Reset()
				if err := s.HaveLetter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"have_letter\"")
			}
		case "have_number":
			if err := func() error {
				s.HaveNumber.Reset()
				if err := s.HaveNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"have_number\"")
			}
		case "have_special_character":
			if err := func() error {
				s.HaveSpecialCharacter.Reset()
				if err := s.HaveSpecialCharacter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"have_special_character\"")
			}
		case "have_upper_and_lower_characters":
			if err := func() error {
				s.HaveUpperAndLowerCharacters.Reset()
				if err := s.HaveUpperAndLowerCharacters.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"have_upper_and_lower_characters\"")
			}
		case "length":
			if err := func() error {
				s.Length.Reset()
				if err := s.Length.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"length\"")
			}
		case "only_allow_numeric":
			if err := func() error {
				s.OnlyAllowNumeric.Reset()
				if err := s.OnlyAllowNumeric.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"only_allow_numeric\"")
			}
		case "weak_enhance_detection":
			if err := func() error {
				s.WeakEnhanceDetection.Reset()
				if err := s.WeakEnhanceDetection.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"weak_enhance_detection\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsOK0ScheduleMeetingMeetingPasswordRequirement")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsOK0ScheduleMeetingMeetingPasswordRequirement) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsOK0ScheduleMeetingMeetingPasswordRequirement) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsOK0Telephony) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsOK0Telephony) encodeFields(e *jx.Encoder) {
	{
		if s.AudioConferenceInfo.Set {
			e.FieldStart("audio_conference_info")
			s.AudioConferenceInfo.Encode(e)
		}
	}
	{
		if s.ShowInternationalNumbersLink.Set {
			e.FieldStart("show_international_numbers_link")
			s.ShowInternationalNumbersLink.Encode(e)
		}
	}
	{
		if s.TelephonyRegions.Set {
			e.FieldStart("telephony_regions")
			s.TelephonyRegions.Encode(e)
		}
	}
	{
		if s.ThirdPartyAudio.Set {
			e.FieldStart("third_party_audio")
			s.ThirdPartyAudio.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsOK0Telephony = [4]string{
	0: "audio_conference_info",
	1: "show_international_numbers_link",
	2: "telephony_regions",
	3: "third_party_audio",
}

// Decode decodes UserSettingsOK0Telephony from json.
func (s *UserSettingsOK0Telephony) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsOK0Telephony to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_conference_info":
			if err := func() error {
				s.AudioConferenceInfo.Reset()
				if err := s.AudioConferenceInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_conference_info\"")
			}
		case "show_international_numbers_link":
			if err := func() error {
				s.ShowInternationalNumbersLink.Reset()
				if err := s.ShowInternationalNumbersLink.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"show_international_numbers_link\"")
			}
		case "telephony_regions":
			if err := func() error {
				s.TelephonyRegions.Reset()
				if err := s.TelephonyRegions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"telephony_regions\"")
			}
		case "third_party_audio":
			if err := func() error {
				s.ThirdPartyAudio.Reset()
				if err := s.ThirdPartyAudio.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"third_party_audio\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsOK0Telephony")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsOK0Telephony) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsOK0Telephony) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsOK0TelephonyTelephonyRegions) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsOK0TelephonyTelephonyRegions) encodeFields(e *jx.Encoder) {
	{
		if s.AllowedValues != nil {
			e.FieldStart("allowed_values")
			e.ArrStart()
			for _, elem := range s.AllowedValues {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.SelectionValues.Set {
			e.FieldStart("selection_values")
			s.SelectionValues.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsOK0TelephonyTelephonyRegions = [2]string{
	0: "allowed_values",
	1: "selection_values",
}

// Decode decodes UserSettingsOK0TelephonyTelephonyRegions from json.
func (s *UserSettingsOK0TelephonyTelephonyRegions) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsOK0TelephonyTelephonyRegions to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allowed_values":
			if err := func() error {
				s.AllowedValues = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.AllowedValues = append(s.AllowedValues, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allowed_values\"")
			}
		case "selection_values":
			if err := func() error {
				s.SelectionValues.Reset()
				if err := s.SelectionValues.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"selection_values\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsOK0TelephonyTelephonyRegions")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsOK0TelephonyTelephonyRegions) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsOK0TelephonyTelephonyRegions) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsOK0Tsp) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsOK0Tsp) encodeFields(e *jx.Encoder) {
	{
		if s.CallOut.Set {
			e.FieldStart("call_out")
			s.CallOut.Encode(e)
		}
	}
	{
		if s.CallOutCountries != nil {
			e.FieldStart("call_out_countries")
			e.ArrStart()
			for _, elem := range s.CallOutCountries {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ShowInternationalNumbersLink.Set {
			e.FieldStart("show_international_numbers_link")
			s.ShowInternationalNumbersLink.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsOK0Tsp = [3]string{
	0: "call_out",
	1: "call_out_countries",
	2: "show_international_numbers_link",
}

// Decode decodes UserSettingsOK0Tsp from json.
func (s *UserSettingsOK0Tsp) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsOK0Tsp to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "call_out":
			if err := func() error {
				s.CallOut.Reset()
				if err := s.CallOut.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_out\"")
			}
		case "call_out_countries":
			if err := func() error {
				s.CallOutCountries = make([]UserSettingsOK0TspCallOutCountriesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem UserSettingsOK0TspCallOutCountriesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CallOutCountries = append(s.CallOutCountries, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_out_countries\"")
			}
		case "show_international_numbers_link":
			if err := func() error {
				s.ShowInternationalNumbersLink.Reset()
				if err := s.ShowInternationalNumbersLink.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"show_international_numbers_link\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsOK0Tsp")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsOK0Tsp) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsOK0Tsp) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsOK0TspCallOutCountriesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsOK0TspCallOutCountriesItem) encodeFields(e *jx.Encoder) {
}

var jsonFieldsNameOfUserSettingsOK0TspCallOutCountriesItem = [0]string{}

// Decode decodes UserSettingsOK0TspCallOutCountriesItem from json.
func (s *UserSettingsOK0TspCallOutCountriesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsOK0TspCallOutCountriesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsOK0TspCallOutCountriesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsOK0TspCallOutCountriesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsOK0TspCallOutCountriesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsOK0Whiteboard) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsOK0Whiteboard) encodeFields(e *jx.Encoder) {
	{
		if s.OutMeetingAdvancedWhiteboard.Set {
			e.FieldStart("out_meeting_advanced_whiteboard")
			s.OutMeetingAdvancedWhiteboard.Encode(e)
		}
	}
	{
		if s.InMeetingAdvancedWhiteboard.Set {
			e.FieldStart("in_meeting_advanced_whiteboard")
			s.InMeetingAdvancedWhiteboard.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsOK0Whiteboard = [2]string{
	0: "out_meeting_advanced_whiteboard",
	1: "in_meeting_advanced_whiteboard",
}

// Decode decodes UserSettingsOK0Whiteboard from json.
func (s *UserSettingsOK0Whiteboard) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsOK0Whiteboard to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "out_meeting_advanced_whiteboard":
			if err := func() error {
				s.OutMeetingAdvancedWhiteboard.Reset()
				if err := s.OutMeetingAdvancedWhiteboard.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"out_meeting_advanced_whiteboard\"")
			}
		case "in_meeting_advanced_whiteboard":
			if err := func() error {
				s.InMeetingAdvancedWhiteboard.Reset()
				if err := s.InMeetingAdvancedWhiteboard.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"in_meeting_advanced_whiteboard\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsOK0Whiteboard")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsOK0Whiteboard) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsOK0Whiteboard) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsOK1) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsOK1) encodeFields(e *jx.Encoder) {
	{
		if s.AuthenticationOptions.Set {
			e.FieldStart("authentication_options")
			s.AuthenticationOptions.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsOK1 = [1]string{
	0: "authentication_options",
}

// Decode decodes UserSettingsOK1 from json.
func (s *UserSettingsOK1) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsOK1 to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "authentication_options":
			if err := func() error {
				s.AuthenticationOptions.Reset()
				if err := s.AuthenticationOptions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"authentication_options\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsOK1")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsOK1) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsOK1) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsOK1AuthenticationOptions) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsOK1AuthenticationOptions) encodeFields(e *jx.Encoder) {
	{
		if s.MeetingAuthentication.Set {
			e.FieldStart("meeting_authentication")
			s.MeetingAuthentication.Encode(e)
		}
	}
	{
		if s.RecordingAuthentication.Set {
			e.FieldStart("recording_authentication")
			s.RecordingAuthentication.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsOK1AuthenticationOptions = [2]string{
	0: "meeting_authentication",
	1: "recording_authentication",
}

// Decode decodes UserSettingsOK1AuthenticationOptions from json.
func (s *UserSettingsOK1AuthenticationOptions) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsOK1AuthenticationOptions to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "meeting_authentication":
			if err := func() error {
				s.MeetingAuthentication.Reset()
				if err := s.MeetingAuthentication.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_authentication\"")
			}
		case "recording_authentication":
			if err := func() error {
				s.RecordingAuthentication.Reset()
				if err := s.RecordingAuthentication.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_authentication\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsOK1AuthenticationOptions")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsOK1AuthenticationOptions) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsOK1AuthenticationOptions) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsOK1AuthenticationOptionsMeetingAuthentication) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsOK1AuthenticationOptionsMeetingAuthentication) encodeFields(e *jx.Encoder) {
	{
		if s.AllowAuthenticationException.Set {
			e.FieldStart("allow_authentication_exception")
			s.AllowAuthenticationException.Encode(e)
		}
	}
	{
		if s.AuthenticationOptions != nil {
			e.FieldStart("authentication_options")
			e.ArrStart()
			for _, elem := range s.AuthenticationOptions {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.MeetingAuthentication.Set {
			e.FieldStart("meeting_authentication")
			s.MeetingAuthentication.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsOK1AuthenticationOptionsMeetingAuthentication = [3]string{
	0: "allow_authentication_exception",
	1: "authentication_options",
	2: "meeting_authentication",
}

// Decode decodes UserSettingsOK1AuthenticationOptionsMeetingAuthentication from json.
func (s *UserSettingsOK1AuthenticationOptionsMeetingAuthentication) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsOK1AuthenticationOptionsMeetingAuthentication to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allow_authentication_exception":
			if err := func() error {
				s.AllowAuthenticationException.Reset()
				if err := s.AllowAuthenticationException.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_authentication_exception\"")
			}
		case "authentication_options":
			if err := func() error {
				s.AuthenticationOptions = make([]UserSettingsOK1AuthenticationOptionsMeetingAuthenticationAuthenticationOptionsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem UserSettingsOK1AuthenticationOptionsMeetingAuthenticationAuthenticationOptionsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.AuthenticationOptions = append(s.AuthenticationOptions, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"authentication_options\"")
			}
		case "meeting_authentication":
			if err := func() error {
				s.MeetingAuthentication.Reset()
				if err := s.MeetingAuthentication.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_authentication\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsOK1AuthenticationOptionsMeetingAuthentication")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsOK1AuthenticationOptionsMeetingAuthentication) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsOK1AuthenticationOptionsMeetingAuthentication) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsOK1AuthenticationOptionsMeetingAuthenticationAuthenticationOptionsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsOK1AuthenticationOptionsMeetingAuthenticationAuthenticationOptionsItem) encodeFields(e *jx.Encoder) {
	{
		if s.DefaultOption.Set {
			e.FieldStart("default_option")
			s.DefaultOption.Encode(e)
		}
	}
	{
		if s.Domains.Set {
			e.FieldStart("domains")
			s.Domains.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.Visible.Set {
			e.FieldStart("visible")
			s.Visible.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsOK1AuthenticationOptionsMeetingAuthenticationAuthenticationOptionsItem = [6]string{
	0: "default_option",
	1: "domains",
	2: "id",
	3: "name",
	4: "type",
	5: "visible",
}

// Decode decodes UserSettingsOK1AuthenticationOptionsMeetingAuthenticationAuthenticationOptionsItem from json.
func (s *UserSettingsOK1AuthenticationOptionsMeetingAuthenticationAuthenticationOptionsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsOK1AuthenticationOptionsMeetingAuthenticationAuthenticationOptionsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "default_option":
			if err := func() error {
				s.DefaultOption.Reset()
				if err := s.DefaultOption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"default_option\"")
			}
		case "domains":
			if err := func() error {
				s.Domains.Reset()
				if err := s.Domains.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"domains\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "visible":
			if err := func() error {
				s.Visible.Reset()
				if err := s.Visible.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"visible\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsOK1AuthenticationOptionsMeetingAuthenticationAuthenticationOptionsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsOK1AuthenticationOptionsMeetingAuthenticationAuthenticationOptionsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsOK1AuthenticationOptionsMeetingAuthenticationAuthenticationOptionsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsOK1AuthenticationOptionsRecordingAuthentication) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsOK1AuthenticationOptionsRecordingAuthentication) encodeFields(e *jx.Encoder) {
	{
		if s.AuthenticationOptions != nil {
			e.FieldStart("authentication_options")
			e.ArrStart()
			for _, elem := range s.AuthenticationOptions {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.RecordingAuthentication.Set {
			e.FieldStart("recording_authentication")
			s.RecordingAuthentication.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsOK1AuthenticationOptionsRecordingAuthentication = [2]string{
	0: "authentication_options",
	1: "recording_authentication",
}

// Decode decodes UserSettingsOK1AuthenticationOptionsRecordingAuthentication from json.
func (s *UserSettingsOK1AuthenticationOptionsRecordingAuthentication) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsOK1AuthenticationOptionsRecordingAuthentication to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "authentication_options":
			if err := func() error {
				s.AuthenticationOptions = make([]UserSettingsOK1AuthenticationOptionsRecordingAuthenticationAuthenticationOptionsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem UserSettingsOK1AuthenticationOptionsRecordingAuthenticationAuthenticationOptionsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.AuthenticationOptions = append(s.AuthenticationOptions, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"authentication_options\"")
			}
		case "recording_authentication":
			if err := func() error {
				s.RecordingAuthentication.Reset()
				if err := s.RecordingAuthentication.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_authentication\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsOK1AuthenticationOptionsRecordingAuthentication")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsOK1AuthenticationOptionsRecordingAuthentication) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsOK1AuthenticationOptionsRecordingAuthentication) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsOK1AuthenticationOptionsRecordingAuthenticationAuthenticationOptionsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsOK1AuthenticationOptionsRecordingAuthenticationAuthenticationOptionsItem) encodeFields(e *jx.Encoder) {
	{
		if s.DefaultOption.Set {
			e.FieldStart("default_option")
			s.DefaultOption.Encode(e)
		}
	}
	{
		if s.Domains.Set {
			e.FieldStart("domains")
			s.Domains.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.Visible.Set {
			e.FieldStart("visible")
			s.Visible.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsOK1AuthenticationOptionsRecordingAuthenticationAuthenticationOptionsItem = [6]string{
	0: "default_option",
	1: "domains",
	2: "id",
	3: "name",
	4: "type",
	5: "visible",
}

// Decode decodes UserSettingsOK1AuthenticationOptionsRecordingAuthenticationAuthenticationOptionsItem from json.
func (s *UserSettingsOK1AuthenticationOptionsRecordingAuthenticationAuthenticationOptionsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsOK1AuthenticationOptionsRecordingAuthenticationAuthenticationOptionsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "default_option":
			if err := func() error {
				s.DefaultOption.Reset()
				if err := s.DefaultOption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"default_option\"")
			}
		case "domains":
			if err := func() error {
				s.Domains.Reset()
				if err := s.Domains.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"domains\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "visible":
			if err := func() error {
				s.Visible.Reset()
				if err := s.Visible.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"visible\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsOK1AuthenticationOptionsRecordingAuthenticationAuthenticationOptionsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsOK1AuthenticationOptionsRecordingAuthenticationAuthenticationOptionsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsOK1AuthenticationOptionsRecordingAuthenticationAuthenticationOptionsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsOK2) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsOK2) encodeFields(e *jx.Encoder) {
	{
		if s.AllowAuthenticationException.Set {
			e.FieldStart("allow_authentication_exception")
			s.AllowAuthenticationException.Encode(e)
		}
	}
	{
		if s.AuthenticationOptions != nil {
			e.FieldStart("authentication_options")
			e.ArrStart()
			for _, elem := range s.AuthenticationOptions {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.MeetingAuthentication.Set {
			e.FieldStart("meeting_authentication")
			s.MeetingAuthentication.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsOK2 = [3]string{
	0: "allow_authentication_exception",
	1: "authentication_options",
	2: "meeting_authentication",
}

// Decode decodes UserSettingsOK2 from json.
func (s *UserSettingsOK2) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsOK2 to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allow_authentication_exception":
			if err := func() error {
				s.AllowAuthenticationException.Reset()
				if err := s.AllowAuthenticationException.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_authentication_exception\"")
			}
		case "authentication_options":
			if err := func() error {
				s.AuthenticationOptions = make([]UserSettingsOK2AuthenticationOptionsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem UserSettingsOK2AuthenticationOptionsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.AuthenticationOptions = append(s.AuthenticationOptions, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"authentication_options\"")
			}
		case "meeting_authentication":
			if err := func() error {
				s.MeetingAuthentication.Reset()
				if err := s.MeetingAuthentication.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_authentication\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsOK2")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsOK2) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsOK2) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsOK2AuthenticationOptionsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsOK2AuthenticationOptionsItem) encodeFields(e *jx.Encoder) {
	{
		if s.DefaultOption.Set {
			e.FieldStart("default_option")
			s.DefaultOption.Encode(e)
		}
	}
	{
		if s.Domains.Set {
			e.FieldStart("domains")
			s.Domains.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.Visible.Set {
			e.FieldStart("visible")
			s.Visible.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsOK2AuthenticationOptionsItem = [6]string{
	0: "default_option",
	1: "domains",
	2: "id",
	3: "name",
	4: "type",
	5: "visible",
}

// Decode decodes UserSettingsOK2AuthenticationOptionsItem from json.
func (s *UserSettingsOK2AuthenticationOptionsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsOK2AuthenticationOptionsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "default_option":
			if err := func() error {
				s.DefaultOption.Reset()
				if err := s.DefaultOption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"default_option\"")
			}
		case "domains":
			if err := func() error {
				s.Domains.Reset()
				if err := s.Domains.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"domains\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "visible":
			if err := func() error {
				s.Visible.Reset()
				if err := s.Visible.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"visible\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsOK2AuthenticationOptionsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsOK2AuthenticationOptionsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsOK2AuthenticationOptionsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsOK3) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsOK3) encodeFields(e *jx.Encoder) {
	{
		if s.AuthenticationOptions != nil {
			e.FieldStart("authentication_options")
			e.ArrStart()
			for _, elem := range s.AuthenticationOptions {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.RecordingAuthentication.Set {
			e.FieldStart("recording_authentication")
			s.RecordingAuthentication.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsOK3 = [2]string{
	0: "authentication_options",
	1: "recording_authentication",
}

// Decode decodes UserSettingsOK3 from json.
func (s *UserSettingsOK3) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsOK3 to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "authentication_options":
			if err := func() error {
				s.AuthenticationOptions = make([]UserSettingsOK3AuthenticationOptionsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem UserSettingsOK3AuthenticationOptionsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.AuthenticationOptions = append(s.AuthenticationOptions, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"authentication_options\"")
			}
		case "recording_authentication":
			if err := func() error {
				s.RecordingAuthentication.Reset()
				if err := s.RecordingAuthentication.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_authentication\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsOK3")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsOK3) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsOK3) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsOK3AuthenticationOptionsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsOK3AuthenticationOptionsItem) encodeFields(e *jx.Encoder) {
	{
		if s.DefaultOption.Set {
			e.FieldStart("default_option")
			s.DefaultOption.Encode(e)
		}
	}
	{
		if s.Domains.Set {
			e.FieldStart("domains")
			s.Domains.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.Visible.Set {
			e.FieldStart("visible")
			s.Visible.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsOK3AuthenticationOptionsItem = [6]string{
	0: "default_option",
	1: "domains",
	2: "id",
	3: "name",
	4: "type",
	5: "visible",
}

// Decode decodes UserSettingsOK3AuthenticationOptionsItem from json.
func (s *UserSettingsOK3AuthenticationOptionsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsOK3AuthenticationOptionsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "default_option":
			if err := func() error {
				s.DefaultOption.Reset()
				if err := s.DefaultOption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"default_option\"")
			}
		case "domains":
			if err := func() error {
				s.Domains.Reset()
				if err := s.Domains.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"domains\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "visible":
			if err := func() error {
				s.Visible.Reset()
				if err := s.Visible.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"visible\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsOK3AuthenticationOptionsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsOK3AuthenticationOptionsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsOK3AuthenticationOptionsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsOK4) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsOK4) encodeFields(e *jx.Encoder) {
	{
		if s.MeetingSecurity.Set {
			e.FieldStart("meeting_security")
			s.MeetingSecurity.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsOK4 = [1]string{
	0: "meeting_security",
}

// Decode decodes UserSettingsOK4 from json.
func (s *UserSettingsOK4) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsOK4 to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "meeting_security":
			if err := func() error {
				s.MeetingSecurity.Reset()
				if err := s.MeetingSecurity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_security\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsOK4")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsOK4) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsOK4) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsOK4MeetingSecurity) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsOK4MeetingSecurity) encodeFields(e *jx.Encoder) {
	{
		if s.AutoSecurity.Set {
			e.FieldStart("auto_security")
			s.AutoSecurity.Encode(e)
		}
	}
	{
		if s.BlockUserDomain.Set {
			e.FieldStart("block_user_domain")
			s.BlockUserDomain.Encode(e)
		}
	}
	{
		if s.BlockUserDomainList != nil {
			e.FieldStart("block_user_domain_list")
			e.ArrStart()
			for _, elem := range s.BlockUserDomainList {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.EmbedPasswordInJoinLink.Set {
			e.FieldStart("embed_password_in_join_link")
			s.EmbedPasswordInJoinLink.Encode(e)
		}
	}
	{
		if s.EncryptionType.Set {
			e.FieldStart("encryption_type")
			s.EncryptionType.Encode(e)
		}
	}
	{
		if s.EndToEndEncryptedMeetings.Set {
			e.FieldStart("end_to_end_encrypted_meetings")
			s.EndToEndEncryptedMeetings.Encode(e)
		}
	}
	{
		if s.MeetingPassword.Set {
			e.FieldStart("meeting_password")
			s.MeetingPassword.Encode(e)
		}
	}
	{
		if s.MeetingPasswordRequirement.Set {
			e.FieldStart("meeting_password_requirement")
			s.MeetingPasswordRequirement.Encode(e)
		}
	}
	{
		if s.OnlyAuthenticatedCanJoinFromWebclient.Set {
			e.FieldStart("only_authenticated_can_join_from_webclient")
			s.OnlyAuthenticatedCanJoinFromWebclient.Encode(e)
		}
	}
	{
		if s.PhonePassword.Set {
			e.FieldStart("phone_password")
			s.PhonePassword.Encode(e)
		}
	}
	{
		if s.PmiPassword.Set {
			e.FieldStart("pmi_password")
			s.PmiPassword.Encode(e)
		}
	}
	{
		if s.RequirePasswordForScheduledMeeting.Set {
			e.FieldStart("require_password_for_scheduled_meeting")
			s.RequirePasswordForScheduledMeeting.Encode(e)
		}
	}
	{
		if s.RequirePasswordForScheduledWebinar.Set {
			e.FieldStart("require_password_for_scheduled_webinar")
			s.RequirePasswordForScheduledWebinar.Encode(e)
		}
	}
	{
		if s.WaitingRoom.Set {
			e.FieldStart("waiting_room")
			s.WaitingRoom.Encode(e)
		}
	}
	{
		if s.WaitingRoomSettings.Set {
			e.FieldStart("waiting_room_settings")
			s.WaitingRoomSettings.Encode(e)
		}
	}
	{
		if s.WebinarPassword.Set {
			e.FieldStart("webinar_password")
			s.WebinarPassword.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsOK4MeetingSecurity = [16]string{
	0:  "auto_security",
	1:  "block_user_domain",
	2:  "block_user_domain_list",
	3:  "embed_password_in_join_link",
	4:  "encryption_type",
	5:  "end_to_end_encrypted_meetings",
	6:  "meeting_password",
	7:  "meeting_password_requirement",
	8:  "only_authenticated_can_join_from_webclient",
	9:  "phone_password",
	10: "pmi_password",
	11: "require_password_for_scheduled_meeting",
	12: "require_password_for_scheduled_webinar",
	13: "waiting_room",
	14: "waiting_room_settings",
	15: "webinar_password",
}

// Decode decodes UserSettingsOK4MeetingSecurity from json.
func (s *UserSettingsOK4MeetingSecurity) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsOK4MeetingSecurity to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "auto_security":
			if err := func() error {
				s.AutoSecurity.Reset()
				if err := s.AutoSecurity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_security\"")
			}
		case "block_user_domain":
			if err := func() error {
				s.BlockUserDomain.Reset()
				if err := s.BlockUserDomain.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"block_user_domain\"")
			}
		case "block_user_domain_list":
			if err := func() error {
				s.BlockUserDomainList = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.BlockUserDomainList = append(s.BlockUserDomainList, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"block_user_domain_list\"")
			}
		case "embed_password_in_join_link":
			if err := func() error {
				s.EmbedPasswordInJoinLink.Reset()
				if err := s.EmbedPasswordInJoinLink.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"embed_password_in_join_link\"")
			}
		case "encryption_type":
			if err := func() error {
				s.EncryptionType.Reset()
				if err := s.EncryptionType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"encryption_type\"")
			}
		case "end_to_end_encrypted_meetings":
			if err := func() error {
				s.EndToEndEncryptedMeetings.Reset()
				if err := s.EndToEndEncryptedMeetings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"end_to_end_encrypted_meetings\"")
			}
		case "meeting_password":
			if err := func() error {
				s.MeetingPassword.Reset()
				if err := s.MeetingPassword.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_password\"")
			}
		case "meeting_password_requirement":
			if err := func() error {
				s.MeetingPasswordRequirement.Reset()
				if err := s.MeetingPasswordRequirement.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_password_requirement\"")
			}
		case "only_authenticated_can_join_from_webclient":
			if err := func() error {
				s.OnlyAuthenticatedCanJoinFromWebclient.Reset()
				if err := s.OnlyAuthenticatedCanJoinFromWebclient.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"only_authenticated_can_join_from_webclient\"")
			}
		case "phone_password":
			if err := func() error {
				s.PhonePassword.Reset()
				if err := s.PhonePassword.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_password\"")
			}
		case "pmi_password":
			if err := func() error {
				s.PmiPassword.Reset()
				if err := s.PmiPassword.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pmi_password\"")
			}
		case "require_password_for_scheduled_meeting":
			if err := func() error {
				s.RequirePasswordForScheduledMeeting.Reset()
				if err := s.RequirePasswordForScheduledMeeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_password_for_scheduled_meeting\"")
			}
		case "require_password_for_scheduled_webinar":
			if err := func() error {
				s.RequirePasswordForScheduledWebinar.Reset()
				if err := s.RequirePasswordForScheduledWebinar.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_password_for_scheduled_webinar\"")
			}
		case "waiting_room":
			if err := func() error {
				s.WaitingRoom.Reset()
				if err := s.WaitingRoom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"waiting_room\"")
			}
		case "waiting_room_settings":
			if err := func() error {
				s.WaitingRoomSettings.Reset()
				if err := s.WaitingRoomSettings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"waiting_room_settings\"")
			}
		case "webinar_password":
			if err := func() error {
				s.WebinarPassword.Reset()
				if err := s.WebinarPassword.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webinar_password\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsOK4MeetingSecurity")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsOK4MeetingSecurity) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsOK4MeetingSecurity) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsOK4MeetingSecurityMeetingPasswordRequirement) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsOK4MeetingSecurityMeetingPasswordRequirement) encodeFields(e *jx.Encoder) {
	{
		if s.ConsecutiveCharactersLength.Set {
			e.FieldStart("consecutive_characters_length")
			s.ConsecutiveCharactersLength.Encode(e)
		}
	}
	{
		if s.HaveLetter.Set {
			e.FieldStart("have_letter")
			s.HaveLetter.Encode(e)
		}
	}
	{
		if s.HaveNumber.Set {
			e.FieldStart("have_number")
			s.HaveNumber.Encode(e)
		}
	}
	{
		if s.HaveSpecialCharacter.Set {
			e.FieldStart("have_special_character")
			s.HaveSpecialCharacter.Encode(e)
		}
	}
	{
		if s.HaveUpperAndLowerCharacters.Set {
			e.FieldStart("have_upper_and_lower_characters")
			s.HaveUpperAndLowerCharacters.Encode(e)
		}
	}
	{
		if s.Length.Set {
			e.FieldStart("length")
			s.Length.Encode(e)
		}
	}
	{
		if s.OnlyAllowNumeric.Set {
			e.FieldStart("only_allow_numeric")
			s.OnlyAllowNumeric.Encode(e)
		}
	}
	{
		if s.WeakEnhanceDetection.Set {
			e.FieldStart("weak_enhance_detection")
			s.WeakEnhanceDetection.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsOK4MeetingSecurityMeetingPasswordRequirement = [8]string{
	0: "consecutive_characters_length",
	1: "have_letter",
	2: "have_number",
	3: "have_special_character",
	4: "have_upper_and_lower_characters",
	5: "length",
	6: "only_allow_numeric",
	7: "weak_enhance_detection",
}

// Decode decodes UserSettingsOK4MeetingSecurityMeetingPasswordRequirement from json.
func (s *UserSettingsOK4MeetingSecurityMeetingPasswordRequirement) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsOK4MeetingSecurityMeetingPasswordRequirement to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "consecutive_characters_length":
			if err := func() error {
				s.ConsecutiveCharactersLength.Reset()
				if err := s.ConsecutiveCharactersLength.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"consecutive_characters_length\"")
			}
		case "have_letter":
			if err := func() error {
				s.HaveLetter.Reset()
				if err := s.HaveLetter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"have_letter\"")
			}
		case "have_number":
			if err := func() error {
				s.HaveNumber.Reset()
				if err := s.HaveNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"have_number\"")
			}
		case "have_special_character":
			if err := func() error {
				s.HaveSpecialCharacter.Reset()
				if err := s.HaveSpecialCharacter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"have_special_character\"")
			}
		case "have_upper_and_lower_characters":
			if err := func() error {
				s.HaveUpperAndLowerCharacters.Reset()
				if err := s.HaveUpperAndLowerCharacters.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"have_upper_and_lower_characters\"")
			}
		case "length":
			if err := func() error {
				s.Length.Reset()
				if err := s.Length.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"length\"")
			}
		case "only_allow_numeric":
			if err := func() error {
				s.OnlyAllowNumeric.Reset()
				if err := s.OnlyAllowNumeric.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"only_allow_numeric\"")
			}
		case "weak_enhance_detection":
			if err := func() error {
				s.WeakEnhanceDetection.Reset()
				if err := s.WeakEnhanceDetection.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"weak_enhance_detection\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsOK4MeetingSecurityMeetingPasswordRequirement")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsOK4MeetingSecurityMeetingPasswordRequirement) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsOK4MeetingSecurityMeetingPasswordRequirement) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsOK4MeetingSecurityWaitingRoomSettings) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsOK4MeetingSecurityWaitingRoomSettings) encodeFields(e *jx.Encoder) {
	{
		if s.ParticipantsToPlaceInWaitingRoom.Set {
			e.FieldStart("participants_to_place_in_waiting_room")
			s.ParticipantsToPlaceInWaitingRoom.Encode(e)
		}
	}
	{
		if s.UsersWhoCanAdmitParticipantsFromWaitingRoom.Set {
			e.FieldStart("users_who_can_admit_participants_from_waiting_room")
			s.UsersWhoCanAdmitParticipantsFromWaitingRoom.Encode(e)
		}
	}
	{
		if s.WhitelistedDomainsForWaitingRoom.Set {
			e.FieldStart("whitelisted_domains_for_waiting_room")
			s.WhitelistedDomainsForWaitingRoom.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsOK4MeetingSecurityWaitingRoomSettings = [3]string{
	0: "participants_to_place_in_waiting_room",
	1: "users_who_can_admit_participants_from_waiting_room",
	2: "whitelisted_domains_for_waiting_room",
}

// Decode decodes UserSettingsOK4MeetingSecurityWaitingRoomSettings from json.
func (s *UserSettingsOK4MeetingSecurityWaitingRoomSettings) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsOK4MeetingSecurityWaitingRoomSettings to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "participants_to_place_in_waiting_room":
			if err := func() error {
				s.ParticipantsToPlaceInWaitingRoom.Reset()
				if err := s.ParticipantsToPlaceInWaitingRoom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"participants_to_place_in_waiting_room\"")
			}
		case "users_who_can_admit_participants_from_waiting_room":
			if err := func() error {
				s.UsersWhoCanAdmitParticipantsFromWaitingRoom.Reset()
				if err := s.UsersWhoCanAdmitParticipantsFromWaitingRoom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"users_who_can_admit_participants_from_waiting_room\"")
			}
		case "whitelisted_domains_for_waiting_room":
			if err := func() error {
				s.WhitelistedDomainsForWaitingRoom.Reset()
				if err := s.WhitelistedDomainsForWaitingRoom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"whitelisted_domains_for_waiting_room\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsOK4MeetingSecurityWaitingRoomSettings")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsOK4MeetingSecurityWaitingRoomSettings) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsOK4MeetingSecurityWaitingRoomSettings) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserSettingsUpdateReq as json.
func (s UserSettingsUpdateReq) Encode(e *jx.Encoder) {
	switch s.Type {
	case UserSettingsUpdateReq0UserSettingsUpdateReq:
		s.UserSettingsUpdateReq0.Encode(e)
	case UserSettingsUpdateReq1UserSettingsUpdateReq:
		s.UserSettingsUpdateReq1.Encode(e)
	case UserSettingsUpdateReq2UserSettingsUpdateReq:
		s.UserSettingsUpdateReq2.Encode(e)
	case UserSettingsUpdateReq3UserSettingsUpdateReq:
		s.UserSettingsUpdateReq3.Encode(e)
	}
}

func (s UserSettingsUpdateReq) encodeFields(e *jx.Encoder) {
	switch s.Type {
	case UserSettingsUpdateReq0UserSettingsUpdateReq:
		s.UserSettingsUpdateReq0.encodeFields(e)
	case UserSettingsUpdateReq1UserSettingsUpdateReq:
		s.UserSettingsUpdateReq1.encodeFields(e)
	case UserSettingsUpdateReq2UserSettingsUpdateReq:
		s.UserSettingsUpdateReq2.encodeFields(e)
	case UserSettingsUpdateReq3UserSettingsUpdateReq:
		s.UserSettingsUpdateReq3.encodeFields(e)
	}
}

// Decode decodes UserSettingsUpdateReq from json.
func (s *UserSettingsUpdateReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsUpdateReq to nil")
	}
	// Sum type fields.
	if typ := d.Next(); typ != jx.Object {
		return errors.Errorf("unexpected json type %q", typ)
	}

	var found bool
	if err := d.Capture(func(d *jx.Decoder) error {
		return d.ObjBytes(func(d *jx.Decoder, key []byte) error {
			switch string(key) {
			case "email_notification":
				match := UserSettingsUpdateReq0UserSettingsUpdateReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "feature":
				match := UserSettingsUpdateReq0UserSettingsUpdateReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "in_meeting":
				match := UserSettingsUpdateReq0UserSettingsUpdateReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "profile":
				match := UserSettingsUpdateReq0UserSettingsUpdateReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "recording":
				match := UserSettingsUpdateReq0UserSettingsUpdateReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "schedule_meeting":
				match := UserSettingsUpdateReq0UserSettingsUpdateReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "telephony":
				match := UserSettingsUpdateReq0UserSettingsUpdateReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tsp":
				match := UserSettingsUpdateReq0UserSettingsUpdateReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "meeting_authentication":
				match := UserSettingsUpdateReq1UserSettingsUpdateReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "recording_authentication":
				match := UserSettingsUpdateReq2UserSettingsUpdateReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "meeting_security":
				match := UserSettingsUpdateReq3UserSettingsUpdateReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			}
			return d.Skip()
		})
	}); err != nil {
		return errors.Wrap(err, "capture")
	}
	if !found {
		return errors.New("unable to detect sum type variant")
	}
	switch s.Type {
	case UserSettingsUpdateReq0UserSettingsUpdateReq:
		if err := s.UserSettingsUpdateReq0.Decode(d); err != nil {
			return err
		}
	case UserSettingsUpdateReq1UserSettingsUpdateReq:
		if err := s.UserSettingsUpdateReq1.Decode(d); err != nil {
			return err
		}
	case UserSettingsUpdateReq2UserSettingsUpdateReq:
		if err := s.UserSettingsUpdateReq2.Decode(d); err != nil {
			return err
		}
	case UserSettingsUpdateReq3UserSettingsUpdateReq:
		if err := s.UserSettingsUpdateReq3.Decode(d); err != nil {
			return err
		}
	default:
		return errors.Errorf("inferred invalid type: %s", s.Type)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s UserSettingsUpdateReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsUpdateReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsUpdateReq0) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsUpdateReq0) encodeFields(e *jx.Encoder) {
	{
		if s.EmailNotification.Set {
			e.FieldStart("email_notification")
			s.EmailNotification.Encode(e)
		}
	}
	{
		if s.Feature.Set {
			e.FieldStart("feature")
			s.Feature.Encode(e)
		}
	}
	{
		if s.InMeeting.Set {
			e.FieldStart("in_meeting")
			s.InMeeting.Encode(e)
		}
	}
	{
		if s.Profile.Set {
			e.FieldStart("profile")
			s.Profile.Encode(e)
		}
	}
	{
		if s.Recording.Set {
			e.FieldStart("recording")
			s.Recording.Encode(e)
		}
	}
	{
		if s.ScheduleMeeting.Set {
			e.FieldStart("schedule_meeting")
			s.ScheduleMeeting.Encode(e)
		}
	}
	{
		if s.Telephony.Set {
			e.FieldStart("telephony")
			s.Telephony.Encode(e)
		}
	}
	{
		if s.Tsp.Set {
			e.FieldStart("tsp")
			s.Tsp.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsUpdateReq0 = [8]string{
	0: "email_notification",
	1: "feature",
	2: "in_meeting",
	3: "profile",
	4: "recording",
	5: "schedule_meeting",
	6: "telephony",
	7: "tsp",
}

// Decode decodes UserSettingsUpdateReq0 from json.
func (s *UserSettingsUpdateReq0) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsUpdateReq0 to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "email_notification":
			if err := func() error {
				s.EmailNotification.Reset()
				if err := s.EmailNotification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email_notification\"")
			}
		case "feature":
			if err := func() error {
				s.Feature.Reset()
				if err := s.Feature.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"feature\"")
			}
		case "in_meeting":
			if err := func() error {
				s.InMeeting.Reset()
				if err := s.InMeeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"in_meeting\"")
			}
		case "profile":
			if err := func() error {
				s.Profile.Reset()
				if err := s.Profile.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"profile\"")
			}
		case "recording":
			if err := func() error {
				s.Recording.Reset()
				if err := s.Recording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording\"")
			}
		case "schedule_meeting":
			if err := func() error {
				s.ScheduleMeeting.Reset()
				if err := s.ScheduleMeeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"schedule_meeting\"")
			}
		case "telephony":
			if err := func() error {
				s.Telephony.Reset()
				if err := s.Telephony.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"telephony\"")
			}
		case "tsp":
			if err := func() error {
				s.Tsp.Reset()
				if err := s.Tsp.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tsp\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsUpdateReq0")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsUpdateReq0) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsUpdateReq0) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsUpdateReq0EmailNotification) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsUpdateReq0EmailNotification) encodeFields(e *jx.Encoder) {
	{
		if s.AlternativeHostReminder.Set {
			e.FieldStart("alternative_host_reminder")
			s.AlternativeHostReminder.Encode(e)
		}
	}
	{
		if s.CancelMeetingReminder.Set {
			e.FieldStart("cancel_meeting_reminder")
			s.CancelMeetingReminder.Encode(e)
		}
	}
	{
		if s.CloudRecordingAvailableReminder.Set {
			e.FieldStart("cloud_recording_available_reminder")
			s.CloudRecordingAvailableReminder.Encode(e)
		}
	}
	{
		if s.JbhReminder.Set {
			e.FieldStart("jbh_reminder")
			s.JbhReminder.Encode(e)
		}
	}
	{
		if s.RecordingAvailableReminderAlternativeHosts.Set {
			e.FieldStart("recording_available_reminder_alternative_hosts")
			s.RecordingAvailableReminderAlternativeHosts.Encode(e)
		}
	}
	{
		if s.RecordingAvailableReminderSchedulers.Set {
			e.FieldStart("recording_available_reminder_schedulers")
			s.RecordingAvailableReminderSchedulers.Encode(e)
		}
	}
	{
		if s.ScheduleForReminder.Set {
			e.FieldStart("schedule_for_reminder")
			s.ScheduleForReminder.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsUpdateReq0EmailNotification = [7]string{
	0: "alternative_host_reminder",
	1: "cancel_meeting_reminder",
	2: "cloud_recording_available_reminder",
	3: "jbh_reminder",
	4: "recording_available_reminder_alternative_hosts",
	5: "recording_available_reminder_schedulers",
	6: "schedule_for_reminder",
}

// Decode decodes UserSettingsUpdateReq0EmailNotification from json.
func (s *UserSettingsUpdateReq0EmailNotification) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsUpdateReq0EmailNotification to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "alternative_host_reminder":
			if err := func() error {
				s.AlternativeHostReminder.Reset()
				if err := s.AlternativeHostReminder.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"alternative_host_reminder\"")
			}
		case "cancel_meeting_reminder":
			if err := func() error {
				s.CancelMeetingReminder.Reset()
				if err := s.CancelMeetingReminder.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cancel_meeting_reminder\"")
			}
		case "cloud_recording_available_reminder":
			if err := func() error {
				s.CloudRecordingAvailableReminder.Reset()
				if err := s.CloudRecordingAvailableReminder.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cloud_recording_available_reminder\"")
			}
		case "jbh_reminder":
			if err := func() error {
				s.JbhReminder.Reset()
				if err := s.JbhReminder.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"jbh_reminder\"")
			}
		case "recording_available_reminder_alternative_hosts":
			if err := func() error {
				s.RecordingAvailableReminderAlternativeHosts.Reset()
				if err := s.RecordingAvailableReminderAlternativeHosts.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_available_reminder_alternative_hosts\"")
			}
		case "recording_available_reminder_schedulers":
			if err := func() error {
				s.RecordingAvailableReminderSchedulers.Reset()
				if err := s.RecordingAvailableReminderSchedulers.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_available_reminder_schedulers\"")
			}
		case "schedule_for_reminder":
			if err := func() error {
				s.ScheduleForReminder.Reset()
				if err := s.ScheduleForReminder.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"schedule_for_reminder\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsUpdateReq0EmailNotification")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsUpdateReq0EmailNotification) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsUpdateReq0EmailNotification) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsUpdateReq0Feature) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsUpdateReq0Feature) encodeFields(e *jx.Encoder) {
	{
		if s.ConcurrentMeeting.Set {
			e.FieldStart("concurrent_meeting")
			s.ConcurrentMeeting.Encode(e)
		}
	}
	{
		if s.LargeMeeting.Set {
			e.FieldStart("large_meeting")
			s.LargeMeeting.Encode(e)
		}
	}
	{
		if s.LargeMeetingCapacity.Set {
			e.FieldStart("large_meeting_capacity")
			s.LargeMeetingCapacity.Encode(e)
		}
	}
	{
		if s.MeetingCapacity.Set {
			e.FieldStart("meeting_capacity")
			s.MeetingCapacity.Encode(e)
		}
	}
	{
		if s.Webinar.Set {
			e.FieldStart("webinar")
			s.Webinar.Encode(e)
		}
	}
	{
		if s.WebinarCapacity.Set {
			e.FieldStart("webinar_capacity")
			s.WebinarCapacity.Encode(e)
		}
	}
	{
		if s.ZoomEvents.Set {
			e.FieldStart("zoom_events")
			s.ZoomEvents.Encode(e)
		}
	}
	{
		if s.ZoomEventsCapacity.Set {
			e.FieldStart("zoom_events_capacity")
			s.ZoomEventsCapacity.Encode(e)
		}
	}
	{
		if s.ZoomEventsUnlimited.Set {
			e.FieldStart("zoom_events_unlimited")
			s.ZoomEventsUnlimited.Encode(e)
		}
	}
	{
		if s.ZoomEventsUnlimitedCapacities != nil {
			e.FieldStart("zoom_events_unlimited_capacities")
			e.ArrStart()
			for _, elem := range s.ZoomEventsUnlimitedCapacities {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ZoomSessionsUnlimited.Set {
			e.FieldStart("zoom_sessions_unlimited")
			s.ZoomSessionsUnlimited.Encode(e)
		}
	}
	{
		if s.ZoomSessionsUnlimitedCapacities != nil {
			e.FieldStart("zoom_sessions_unlimited_capacities")
			e.ArrStart()
			for _, elem := range s.ZoomSessionsUnlimitedCapacities {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ZoomEventsPayPerAttendee.Set {
			e.FieldStart("zoom_events_pay_per_attendee")
			s.ZoomEventsPayPerAttendee.Encode(e)
		}
	}
	{
		if s.ZoomSessionsPayPerAttendee.Set {
			e.FieldStart("zoom_sessions_pay_per_attendee")
			s.ZoomSessionsPayPerAttendee.Encode(e)
		}
	}
	{
		if s.ZoomPhone.Set {
			e.FieldStart("zoom_phone")
			s.ZoomPhone.Encode(e)
		}
	}
	{
		if s.ZoomIqForSales.Set {
			e.FieldStart("zoom_iq_for_sales")
			s.ZoomIqForSales.Encode(e)
		}
	}
	{
		if s.ZoomRevenueAccelerator.Set {
			e.FieldStart("zoom_revenue_accelerator")
			s.ZoomRevenueAccelerator.Encode(e)
		}
	}
	{
		if s.ZoomWhiteboard.Set {
			e.FieldStart("zoom_whiteboard")
			s.ZoomWhiteboard.Encode(e)
		}
	}
	{
		if s.ZoomWhiteboardPlus.Set {
			e.FieldStart("zoom_whiteboard_plus")
			s.ZoomWhiteboardPlus.Encode(e)
		}
	}
	{
		if s.ZoomTranslatedCaptions.Set {
			e.FieldStart("zoom_translated_captions")
			s.ZoomTranslatedCaptions.Encode(e)
		}
	}
	{
		if s.ZoomCustomerManagedKey.Set {
			e.FieldStart("zoom_customer_managed_key")
			s.ZoomCustomerManagedKey.Encode(e)
		}
	}
	{
		if s.ZoomHuddles.Set {
			e.FieldStart("zoom_huddles")
			s.ZoomHuddles.Encode(e)
		}
	}
	{
		if s.ZoomQualityManagement.Set {
			e.FieldStart("zoom_quality_management")
			s.ZoomQualityManagement.Encode(e)
		}
	}
	{
		if s.ZoomWorkforceManagement.Set {
			e.FieldStart("zoom_workforce_management")
			s.ZoomWorkforceManagement.Encode(e)
		}
	}
	{
		if s.ZoomScheduler.Set {
			e.FieldStart("zoom_scheduler")
			s.ZoomScheduler.Encode(e)
		}
	}
	{
		if s.ZoomClipsPlus.Set {
			e.FieldStart("zoom_clips_plus")
			s.ZoomClipsPlus.Encode(e)
		}
	}
	{
		if s.ZoomMailCalendar.Set {
			e.FieldStart("zoom_mail_calendar")
			s.ZoomMailCalendar.Encode(e)
		}
	}
	{
		if s.ZoomComplianceManagement.Set {
			e.FieldStart("zoom_compliance_management")
			s.ZoomComplianceManagement.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsUpdateReq0Feature = [28]string{
	0:  "concurrent_meeting",
	1:  "large_meeting",
	2:  "large_meeting_capacity",
	3:  "meeting_capacity",
	4:  "webinar",
	5:  "webinar_capacity",
	6:  "zoom_events",
	7:  "zoom_events_capacity",
	8:  "zoom_events_unlimited",
	9:  "zoom_events_unlimited_capacities",
	10: "zoom_sessions_unlimited",
	11: "zoom_sessions_unlimited_capacities",
	12: "zoom_events_pay_per_attendee",
	13: "zoom_sessions_pay_per_attendee",
	14: "zoom_phone",
	15: "zoom_iq_for_sales",
	16: "zoom_revenue_accelerator",
	17: "zoom_whiteboard",
	18: "zoom_whiteboard_plus",
	19: "zoom_translated_captions",
	20: "zoom_customer_managed_key",
	21: "zoom_huddles",
	22: "zoom_quality_management",
	23: "zoom_workforce_management",
	24: "zoom_scheduler",
	25: "zoom_clips_plus",
	26: "zoom_mail_calendar",
	27: "zoom_compliance_management",
}

// Decode decodes UserSettingsUpdateReq0Feature from json.
func (s *UserSettingsUpdateReq0Feature) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsUpdateReq0Feature to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "concurrent_meeting":
			if err := func() error {
				s.ConcurrentMeeting.Reset()
				if err := s.ConcurrentMeeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"concurrent_meeting\"")
			}
		case "large_meeting":
			if err := func() error {
				s.LargeMeeting.Reset()
				if err := s.LargeMeeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"large_meeting\"")
			}
		case "large_meeting_capacity":
			if err := func() error {
				s.LargeMeetingCapacity.Reset()
				if err := s.LargeMeetingCapacity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"large_meeting_capacity\"")
			}
		case "meeting_capacity":
			if err := func() error {
				s.MeetingCapacity.Reset()
				if err := s.MeetingCapacity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_capacity\"")
			}
		case "webinar":
			if err := func() error {
				s.Webinar.Reset()
				if err := s.Webinar.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webinar\"")
			}
		case "webinar_capacity":
			if err := func() error {
				s.WebinarCapacity.Reset()
				if err := s.WebinarCapacity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webinar_capacity\"")
			}
		case "zoom_events":
			if err := func() error {
				s.ZoomEvents.Reset()
				if err := s.ZoomEvents.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_events\"")
			}
		case "zoom_events_capacity":
			if err := func() error {
				s.ZoomEventsCapacity.Reset()
				if err := s.ZoomEventsCapacity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_events_capacity\"")
			}
		case "zoom_events_unlimited":
			if err := func() error {
				s.ZoomEventsUnlimited.Reset()
				if err := s.ZoomEventsUnlimited.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_events_unlimited\"")
			}
		case "zoom_events_unlimited_capacities":
			if err := func() error {
				s.ZoomEventsUnlimitedCapacities = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.ZoomEventsUnlimitedCapacities = append(s.ZoomEventsUnlimitedCapacities, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_events_unlimited_capacities\"")
			}
		case "zoom_sessions_unlimited":
			if err := func() error {
				s.ZoomSessionsUnlimited.Reset()
				if err := s.ZoomSessionsUnlimited.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_sessions_unlimited\"")
			}
		case "zoom_sessions_unlimited_capacities":
			if err := func() error {
				s.ZoomSessionsUnlimitedCapacities = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.ZoomSessionsUnlimitedCapacities = append(s.ZoomSessionsUnlimitedCapacities, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_sessions_unlimited_capacities\"")
			}
		case "zoom_events_pay_per_attendee":
			if err := func() error {
				s.ZoomEventsPayPerAttendee.Reset()
				if err := s.ZoomEventsPayPerAttendee.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_events_pay_per_attendee\"")
			}
		case "zoom_sessions_pay_per_attendee":
			if err := func() error {
				s.ZoomSessionsPayPerAttendee.Reset()
				if err := s.ZoomSessionsPayPerAttendee.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_sessions_pay_per_attendee\"")
			}
		case "zoom_phone":
			if err := func() error {
				s.ZoomPhone.Reset()
				if err := s.ZoomPhone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_phone\"")
			}
		case "zoom_iq_for_sales":
			if err := func() error {
				s.ZoomIqForSales.Reset()
				if err := s.ZoomIqForSales.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_iq_for_sales\"")
			}
		case "zoom_revenue_accelerator":
			if err := func() error {
				s.ZoomRevenueAccelerator.Reset()
				if err := s.ZoomRevenueAccelerator.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_revenue_accelerator\"")
			}
		case "zoom_whiteboard":
			if err := func() error {
				s.ZoomWhiteboard.Reset()
				if err := s.ZoomWhiteboard.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_whiteboard\"")
			}
		case "zoom_whiteboard_plus":
			if err := func() error {
				s.ZoomWhiteboardPlus.Reset()
				if err := s.ZoomWhiteboardPlus.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_whiteboard_plus\"")
			}
		case "zoom_translated_captions":
			if err := func() error {
				s.ZoomTranslatedCaptions.Reset()
				if err := s.ZoomTranslatedCaptions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_translated_captions\"")
			}
		case "zoom_customer_managed_key":
			if err := func() error {
				s.ZoomCustomerManagedKey.Reset()
				if err := s.ZoomCustomerManagedKey.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_customer_managed_key\"")
			}
		case "zoom_huddles":
			if err := func() error {
				s.ZoomHuddles.Reset()
				if err := s.ZoomHuddles.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_huddles\"")
			}
		case "zoom_quality_management":
			if err := func() error {
				s.ZoomQualityManagement.Reset()
				if err := s.ZoomQualityManagement.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_quality_management\"")
			}
		case "zoom_workforce_management":
			if err := func() error {
				s.ZoomWorkforceManagement.Reset()
				if err := s.ZoomWorkforceManagement.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_workforce_management\"")
			}
		case "zoom_scheduler":
			if err := func() error {
				s.ZoomScheduler.Reset()
				if err := s.ZoomScheduler.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_scheduler\"")
			}
		case "zoom_clips_plus":
			if err := func() error {
				s.ZoomClipsPlus.Reset()
				if err := s.ZoomClipsPlus.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_clips_plus\"")
			}
		case "zoom_mail_calendar":
			if err := func() error {
				s.ZoomMailCalendar.Reset()
				if err := s.ZoomMailCalendar.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_mail_calendar\"")
			}
		case "zoom_compliance_management":
			if err := func() error {
				s.ZoomComplianceManagement.Reset()
				if err := s.ZoomComplianceManagement.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_compliance_management\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsUpdateReq0Feature")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsUpdateReq0Feature) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsUpdateReq0Feature) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsUpdateReq0InMeeting) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsUpdateReq0InMeeting) encodeFields(e *jx.Encoder) {
	{
		if s.AllowHostToEnableFocusMode.Set {
			e.FieldStart("allow_host_to_enable_focus_mode")
			s.AllowHostToEnableFocusMode.Encode(e)
		}
	}
	{
		if s.AllowUsersToDeleteMessagesInMeetingChat.Set {
			e.FieldStart("allow_users_to_delete_messages_in_meeting_chat")
			s.AllowUsersToDeleteMessagesInMeetingChat.Encode(e)
		}
	}
	{
		if s.AllowLiveStreaming.Set {
			e.FieldStart("allow_live_streaming")
			s.AllowLiveStreaming.Encode(e)
		}
	}
	{
		if s.PostMeetingFeedback.Set {
			e.FieldStart("post_meeting_feedback")
			s.PostMeetingFeedback.Encode(e)
		}
	}
	{
		if s.Whiteboard.Set {
			e.FieldStart("whiteboard")
			s.Whiteboard.Encode(e)
		}
	}
	{
		if s.AllowParticipantsChatWith.Set {
			e.FieldStart("allow_participants_chat_with")
			s.AllowParticipantsChatWith.Encode(e)
		}
	}
	{
		if s.AllowUsersSaveChats.Set {
			e.FieldStart("allow_users_save_chats")
			s.AllowUsersSaveChats.Encode(e)
		}
	}
	{
		if s.Annotation.Set {
			e.FieldStart("annotation")
			s.Annotation.Encode(e)
		}
	}
	{
		if s.AttendeeOnHold.Set {
			e.FieldStart("attendee_on_hold")
			s.AttendeeOnHold.Encode(e)
		}
	}
	{
		if s.AttentionModeFocusMode.Set {
			e.FieldStart("attention_mode_focus_mode")
			s.AttentionModeFocusMode.Encode(e)
		}
	}
	{
		if s.AutoSavingChat.Set {
			e.FieldStart("auto_saving_chat")
			s.AutoSavingChat.Encode(e)
		}
	}
	{
		if s.BreakoutRoom.Set {
			e.FieldStart("breakout_room")
			s.BreakoutRoom.Encode(e)
		}
	}
	{
		if s.BreakoutRoomSchedule.Set {
			e.FieldStart("breakout_room_schedule")
			s.BreakoutRoomSchedule.Encode(e)
		}
	}
	{
		if s.Chat.Set {
			e.FieldStart("chat")
			s.Chat.Encode(e)
		}
	}
	{
		if s.MeetingQuestionAnswer.Set {
			e.FieldStart("meeting_question_answer")
			s.MeetingQuestionAnswer.Encode(e)
		}
	}
	{
		if s.ClosedCaption.Set {
			e.FieldStart("closed_caption")
			s.ClosedCaption.Encode(e)
		}
	}
	{
		if s.ClosedCaptioning.Set {
			e.FieldStart("closed_captioning")
			s.ClosedCaptioning.Encode(e)
		}
	}
	{
		if s.CoHost.Set {
			e.FieldStart("co_host")
			s.CoHost.Encode(e)
		}
	}
	{
		if s.CustomDataCenterRegions.Set {
			e.FieldStart("custom_data_center_regions")
			s.CustomDataCenterRegions.Encode(e)
		}
	}
	{
		if s.CustomLiveStreamingService.Set {
			e.FieldStart("custom_live_streaming_service")
			s.CustomLiveStreamingService.Encode(e)
		}
	}
	{
		if s.CustomServiceInstructions.Set {
			e.FieldStart("custom_service_instructions")
			s.CustomServiceInstructions.Encode(e)
		}
	}
	{
		if s.DataCenterRegions != nil {
			e.FieldStart("data_center_regions")
			e.ArrStart()
			for _, elem := range s.DataCenterRegions {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.DisableScreenSharingForHostMeetings.Set {
			e.FieldStart("disable_screen_sharing_for_host_meetings")
			s.DisableScreenSharingForHostMeetings.Encode(e)
		}
	}
	{
		if s.DisableScreenSharingForInMeetingGuests.Set {
			e.FieldStart("disable_screen_sharing_for_in_meeting_guests")
			s.DisableScreenSharingForInMeetingGuests.Encode(e)
		}
	}
	{
		if s.E2eEncryption.Set {
			e.FieldStart("e2e_encryption")
			s.E2eEncryption.Encode(e)
		}
	}
	{
		if s.EntryExitChime.Set {
			e.FieldStart("entry_exit_chime")
			s.EntryExitChime.Encode(e)
		}
	}
	{
		if s.FarEndCameraControl.Set {
			e.FieldStart("far_end_camera_control")
			s.FarEndCameraControl.Encode(e)
		}
	}
	{
		if s.Feedback.Set {
			e.FieldStart("feedback")
			s.Feedback.Encode(e)
		}
	}
	{
		if s.FileTransfer.Set {
			e.FieldStart("file_transfer")
			s.FileTransfer.Encode(e)
		}
	}
	{
		if s.GroupHd.Set {
			e.FieldStart("group_hd")
			s.GroupHd.Encode(e)
		}
	}
	{
		if s.WebinarGroupHd.Set {
			e.FieldStart("webinar_group_hd")
			s.WebinarGroupHd.Encode(e)
		}
	}
	{
		if s.JoinFromDesktop.Set {
			e.FieldStart("join_from_desktop")
			s.JoinFromDesktop.Encode(e)
		}
	}
	{
		if s.JoinFromMobile.Set {
			e.FieldStart("join_from_mobile")
			s.JoinFromMobile.Encode(e)
		}
	}
	{
		if s.LanguageInterpretation.Set {
			e.FieldStart("language_interpretation")
			s.LanguageInterpretation.Encode(e)
		}
	}
	{
		if s.SignLanguageInterpretation.Set {
			e.FieldStart("sign_language_interpretation")
			s.SignLanguageInterpretation.Encode(e)
		}
	}
	{
		if s.LiveStreamingFacebook.Set {
			e.FieldStart("live_streaming_facebook")
			s.LiveStreamingFacebook.Encode(e)
		}
	}
	{
		if s.LiveStreamingYoutube.Set {
			e.FieldStart("live_streaming_youtube")
			s.LiveStreamingYoutube.Encode(e)
		}
	}
	{
		if s.ManualCaptioning.Set {
			e.FieldStart("manual_captioning")
			s.ManualCaptioning.Encode(e)
		}
	}
	{
		if s.MeetingReactions.Set {
			e.FieldStart("meeting_reactions")
			s.MeetingReactions.Encode(e)
		}
	}
	{
		if s.MeetingReactionsEmojis.Set {
			e.FieldStart("meeting_reactions_emojis")
			s.MeetingReactionsEmojis.Encode(e)
		}
	}
	{
		if s.AllowHostPanelistsToUseAudibleClap.Set {
			e.FieldStart("allow_host_panelists_to_use_audible_clap")
			s.AllowHostPanelistsToUseAudibleClap.Encode(e)
		}
	}
	{
		if s.WebinarReactions.Set {
			e.FieldStart("webinar_reactions")
			s.WebinarReactions.Encode(e)
		}
	}
	{
		if s.MeetingSurvey.Set {
			e.FieldStart("meeting_survey")
			s.MeetingSurvey.Encode(e)
		}
	}
	{
		if s.NonVerbalFeedback.Set {
			e.FieldStart("non_verbal_feedback")
			s.NonVerbalFeedback.Encode(e)
		}
	}
	{
		if s.Polling.Set {
			e.FieldStart("polling")
			s.Polling.Encode(e)
		}
	}
	{
		if s.PrivateChat.Set {
			e.FieldStart("private_chat")
			s.PrivateChat.Encode(e)
		}
	}
	{
		if s.RecordPlayVoice.Set {
			e.FieldStart("record_play_voice")
			s.RecordPlayVoice.Encode(e)
		}
	}
	{
		if s.RemoteControl.Set {
			e.FieldStart("remote_control")
			s.RemoteControl.Encode(e)
		}
	}
	{
		if s.RemoteSupport.Set {
			e.FieldStart("remote_support")
			s.RemoteSupport.Encode(e)
		}
	}
	{
		if s.RequestPermissionToUnmuteParticipants.Set {
			e.FieldStart("request_permission_to_unmute_participants")
			s.RequestPermissionToUnmuteParticipants.Encode(e)
		}
	}
	{
		if s.ScreenSharing.Set {
			e.FieldStart("screen_sharing")
			s.ScreenSharing.Encode(e)
		}
	}
	{
		if s.ShareDualCamera.Set {
			e.FieldStart("share_dual_camera")
			s.ShareDualCamera.Encode(e)
		}
	}
	{
		if s.ShowAJoinFromYourBrowserLink.Set {
			e.FieldStart("show_a_join_from_your_browser_link")
			s.ShowAJoinFromYourBrowserLink.Encode(e)
		}
	}
	{
		if s.ShowMeetingControlToolbar.Set {
			e.FieldStart("show_meeting_control_toolbar")
			s.ShowMeetingControlToolbar.Encode(e)
		}
	}
	{
		if s.SlideControl.Set {
			e.FieldStart("slide_control")
			s.SlideControl.Encode(e)
		}
	}
	{
		if s.VirtualBackground.Set {
			e.FieldStart("virtual_background")
			s.VirtualBackground.Encode(e)
		}
	}
	{
		if s.VirtualBackgroundSettings.Set {
			e.FieldStart("virtual_background_settings")
			s.VirtualBackgroundSettings.Encode(e)
		}
	}
	{
		if s.WaitingRoom.Set {
			e.FieldStart("waiting_room")
			s.WaitingRoom.Encode(e)
		}
	}
	{
		if s.WebinarChat.Set {
			e.FieldStart("webinar_chat")
			s.WebinarChat.Encode(e)
		}
	}
	{
		if s.WebinarLiveStreaming.Set {
			e.FieldStart("webinar_live_streaming")
			s.WebinarLiveStreaming.Encode(e)
		}
	}
	{
		if s.MeetingPolling.Set {
			e.FieldStart("meeting_polling")
			s.MeetingPolling.Encode(e)
		}
	}
	{
		if s.WebinarPolling.Set {
			e.FieldStart("webinar_polling")
			s.WebinarPolling.Encode(e)
		}
	}
	{
		if s.WebinarSurvey.Set {
			e.FieldStart("webinar_survey")
			s.WebinarSurvey.Encode(e)
		}
	}
	{
		if s.WhoCanShareScreen.Set {
			e.FieldStart("who_can_share_screen")
			s.WhoCanShareScreen.Encode(e)
		}
	}
	{
		if s.WhoCanShareScreenWhenSomeoneIsSharing.Set {
			e.FieldStart("who_can_share_screen_when_someone_is_sharing")
			s.WhoCanShareScreenWhenSomeoneIsSharing.Encode(e)
		}
	}
	{
		if s.ParticipantsShareSimultaneously.Set {
			e.FieldStart("participants_share_simultaneously")
			s.ParticipantsShareSimultaneously.Encode(e)
		}
	}
	{
		if s.WorkplaceByFacebook.Set {
			e.FieldStart("workplace_by_facebook")
			s.WorkplaceByFacebook.Encode(e)
		}
	}
	{
		if s.AutoAnswer.Set {
			e.FieldStart("auto_answer")
			s.AutoAnswer.Encode(e)
		}
	}
	{
		if s.AllowShowZoomWindows.Set {
			e.FieldStart("allow_show_zoom_windows")
			s.AllowShowZoomWindows.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsUpdateReq0InMeeting = [69]string{
	0:  "allow_host_to_enable_focus_mode",
	1:  "allow_users_to_delete_messages_in_meeting_chat",
	2:  "allow_live_streaming",
	3:  "post_meeting_feedback",
	4:  "whiteboard",
	5:  "allow_participants_chat_with",
	6:  "allow_users_save_chats",
	7:  "annotation",
	8:  "attendee_on_hold",
	9:  "attention_mode_focus_mode",
	10: "auto_saving_chat",
	11: "breakout_room",
	12: "breakout_room_schedule",
	13: "chat",
	14: "meeting_question_answer",
	15: "closed_caption",
	16: "closed_captioning",
	17: "co_host",
	18: "custom_data_center_regions",
	19: "custom_live_streaming_service",
	20: "custom_service_instructions",
	21: "data_center_regions",
	22: "disable_screen_sharing_for_host_meetings",
	23: "disable_screen_sharing_for_in_meeting_guests",
	24: "e2e_encryption",
	25: "entry_exit_chime",
	26: "far_end_camera_control",
	27: "feedback",
	28: "file_transfer",
	29: "group_hd",
	30: "webinar_group_hd",
	31: "join_from_desktop",
	32: "join_from_mobile",
	33: "language_interpretation",
	34: "sign_language_interpretation",
	35: "live_streaming_facebook",
	36: "live_streaming_youtube",
	37: "manual_captioning",
	38: "meeting_reactions",
	39: "meeting_reactions_emojis",
	40: "allow_host_panelists_to_use_audible_clap",
	41: "webinar_reactions",
	42: "meeting_survey",
	43: "non_verbal_feedback",
	44: "polling",
	45: "private_chat",
	46: "record_play_voice",
	47: "remote_control",
	48: "remote_support",
	49: "request_permission_to_unmute_participants",
	50: "screen_sharing",
	51: "share_dual_camera",
	52: "show_a_join_from_your_browser_link",
	53: "show_meeting_control_toolbar",
	54: "slide_control",
	55: "virtual_background",
	56: "virtual_background_settings",
	57: "waiting_room",
	58: "webinar_chat",
	59: "webinar_live_streaming",
	60: "meeting_polling",
	61: "webinar_polling",
	62: "webinar_survey",
	63: "who_can_share_screen",
	64: "who_can_share_screen_when_someone_is_sharing",
	65: "participants_share_simultaneously",
	66: "workplace_by_facebook",
	67: "auto_answer",
	68: "allow_show_zoom_windows",
}

// Decode decodes UserSettingsUpdateReq0InMeeting from json.
func (s *UserSettingsUpdateReq0InMeeting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsUpdateReq0InMeeting to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allow_host_to_enable_focus_mode":
			if err := func() error {
				s.AllowHostToEnableFocusMode.Reset()
				if err := s.AllowHostToEnableFocusMode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_host_to_enable_focus_mode\"")
			}
		case "allow_users_to_delete_messages_in_meeting_chat":
			if err := func() error {
				s.AllowUsersToDeleteMessagesInMeetingChat.Reset()
				if err := s.AllowUsersToDeleteMessagesInMeetingChat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_users_to_delete_messages_in_meeting_chat\"")
			}
		case "allow_live_streaming":
			if err := func() error {
				s.AllowLiveStreaming.Reset()
				if err := s.AllowLiveStreaming.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_live_streaming\"")
			}
		case "post_meeting_feedback":
			if err := func() error {
				s.PostMeetingFeedback.Reset()
				if err := s.PostMeetingFeedback.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"post_meeting_feedback\"")
			}
		case "whiteboard":
			if err := func() error {
				s.Whiteboard.Reset()
				if err := s.Whiteboard.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"whiteboard\"")
			}
		case "allow_participants_chat_with":
			if err := func() error {
				s.AllowParticipantsChatWith.Reset()
				if err := s.AllowParticipantsChatWith.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_participants_chat_with\"")
			}
		case "allow_users_save_chats":
			if err := func() error {
				s.AllowUsersSaveChats.Reset()
				if err := s.AllowUsersSaveChats.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_users_save_chats\"")
			}
		case "annotation":
			if err := func() error {
				s.Annotation.Reset()
				if err := s.Annotation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"annotation\"")
			}
		case "attendee_on_hold":
			if err := func() error {
				s.AttendeeOnHold.Reset()
				if err := s.AttendeeOnHold.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"attendee_on_hold\"")
			}
		case "attention_mode_focus_mode":
			if err := func() error {
				s.AttentionModeFocusMode.Reset()
				if err := s.AttentionModeFocusMode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"attention_mode_focus_mode\"")
			}
		case "auto_saving_chat":
			if err := func() error {
				s.AutoSavingChat.Reset()
				if err := s.AutoSavingChat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_saving_chat\"")
			}
		case "breakout_room":
			if err := func() error {
				s.BreakoutRoom.Reset()
				if err := s.BreakoutRoom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"breakout_room\"")
			}
		case "breakout_room_schedule":
			if err := func() error {
				s.BreakoutRoomSchedule.Reset()
				if err := s.BreakoutRoomSchedule.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"breakout_room_schedule\"")
			}
		case "chat":
			if err := func() error {
				s.Chat.Reset()
				if err := s.Chat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"chat\"")
			}
		case "meeting_question_answer":
			if err := func() error {
				s.MeetingQuestionAnswer.Reset()
				if err := s.MeetingQuestionAnswer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_question_answer\"")
			}
		case "closed_caption":
			if err := func() error {
				s.ClosedCaption.Reset()
				if err := s.ClosedCaption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"closed_caption\"")
			}
		case "closed_captioning":
			if err := func() error {
				s.ClosedCaptioning.Reset()
				if err := s.ClosedCaptioning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"closed_captioning\"")
			}
		case "co_host":
			if err := func() error {
				s.CoHost.Reset()
				if err := s.CoHost.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"co_host\"")
			}
		case "custom_data_center_regions":
			if err := func() error {
				s.CustomDataCenterRegions.Reset()
				if err := s.CustomDataCenterRegions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"custom_data_center_regions\"")
			}
		case "custom_live_streaming_service":
			if err := func() error {
				s.CustomLiveStreamingService.Reset()
				if err := s.CustomLiveStreamingService.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"custom_live_streaming_service\"")
			}
		case "custom_service_instructions":
			if err := func() error {
				s.CustomServiceInstructions.Reset()
				if err := s.CustomServiceInstructions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"custom_service_instructions\"")
			}
		case "data_center_regions":
			if err := func() error {
				s.DataCenterRegions = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.DataCenterRegions = append(s.DataCenterRegions, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"data_center_regions\"")
			}
		case "disable_screen_sharing_for_host_meetings":
			if err := func() error {
				s.DisableScreenSharingForHostMeetings.Reset()
				if err := s.DisableScreenSharingForHostMeetings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"disable_screen_sharing_for_host_meetings\"")
			}
		case "disable_screen_sharing_for_in_meeting_guests":
			if err := func() error {
				s.DisableScreenSharingForInMeetingGuests.Reset()
				if err := s.DisableScreenSharingForInMeetingGuests.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"disable_screen_sharing_for_in_meeting_guests\"")
			}
		case "e2e_encryption":
			if err := func() error {
				s.E2eEncryption.Reset()
				if err := s.E2eEncryption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"e2e_encryption\"")
			}
		case "entry_exit_chime":
			if err := func() error {
				s.EntryExitChime.Reset()
				if err := s.EntryExitChime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"entry_exit_chime\"")
			}
		case "far_end_camera_control":
			if err := func() error {
				s.FarEndCameraControl.Reset()
				if err := s.FarEndCameraControl.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"far_end_camera_control\"")
			}
		case "feedback":
			if err := func() error {
				s.Feedback.Reset()
				if err := s.Feedback.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"feedback\"")
			}
		case "file_transfer":
			if err := func() error {
				s.FileTransfer.Reset()
				if err := s.FileTransfer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"file_transfer\"")
			}
		case "group_hd":
			if err := func() error {
				s.GroupHd.Reset()
				if err := s.GroupHd.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"group_hd\"")
			}
		case "webinar_group_hd":
			if err := func() error {
				s.WebinarGroupHd.Reset()
				if err := s.WebinarGroupHd.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webinar_group_hd\"")
			}
		case "join_from_desktop":
			if err := func() error {
				s.JoinFromDesktop.Reset()
				if err := s.JoinFromDesktop.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"join_from_desktop\"")
			}
		case "join_from_mobile":
			if err := func() error {
				s.JoinFromMobile.Reset()
				if err := s.JoinFromMobile.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"join_from_mobile\"")
			}
		case "language_interpretation":
			if err := func() error {
				s.LanguageInterpretation.Reset()
				if err := s.LanguageInterpretation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"language_interpretation\"")
			}
		case "sign_language_interpretation":
			if err := func() error {
				s.SignLanguageInterpretation.Reset()
				if err := s.SignLanguageInterpretation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sign_language_interpretation\"")
			}
		case "live_streaming_facebook":
			if err := func() error {
				s.LiveStreamingFacebook.Reset()
				if err := s.LiveStreamingFacebook.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"live_streaming_facebook\"")
			}
		case "live_streaming_youtube":
			if err := func() error {
				s.LiveStreamingYoutube.Reset()
				if err := s.LiveStreamingYoutube.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"live_streaming_youtube\"")
			}
		case "manual_captioning":
			if err := func() error {
				s.ManualCaptioning.Reset()
				if err := s.ManualCaptioning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"manual_captioning\"")
			}
		case "meeting_reactions":
			if err := func() error {
				s.MeetingReactions.Reset()
				if err := s.MeetingReactions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_reactions\"")
			}
		case "meeting_reactions_emojis":
			if err := func() error {
				s.MeetingReactionsEmojis.Reset()
				if err := s.MeetingReactionsEmojis.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_reactions_emojis\"")
			}
		case "allow_host_panelists_to_use_audible_clap":
			if err := func() error {
				s.AllowHostPanelistsToUseAudibleClap.Reset()
				if err := s.AllowHostPanelistsToUseAudibleClap.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_host_panelists_to_use_audible_clap\"")
			}
		case "webinar_reactions":
			if err := func() error {
				s.WebinarReactions.Reset()
				if err := s.WebinarReactions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webinar_reactions\"")
			}
		case "meeting_survey":
			if err := func() error {
				s.MeetingSurvey.Reset()
				if err := s.MeetingSurvey.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_survey\"")
			}
		case "non_verbal_feedback":
			if err := func() error {
				s.NonVerbalFeedback.Reset()
				if err := s.NonVerbalFeedback.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"non_verbal_feedback\"")
			}
		case "polling":
			if err := func() error {
				s.Polling.Reset()
				if err := s.Polling.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"polling\"")
			}
		case "private_chat":
			if err := func() error {
				s.PrivateChat.Reset()
				if err := s.PrivateChat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"private_chat\"")
			}
		case "record_play_voice":
			if err := func() error {
				s.RecordPlayVoice.Reset()
				if err := s.RecordPlayVoice.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"record_play_voice\"")
			}
		case "remote_control":
			if err := func() error {
				s.RemoteControl.Reset()
				if err := s.RemoteControl.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"remote_control\"")
			}
		case "remote_support":
			if err := func() error {
				s.RemoteSupport.Reset()
				if err := s.RemoteSupport.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"remote_support\"")
			}
		case "request_permission_to_unmute_participants":
			if err := func() error {
				s.RequestPermissionToUnmuteParticipants.Reset()
				if err := s.RequestPermissionToUnmuteParticipants.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"request_permission_to_unmute_participants\"")
			}
		case "screen_sharing":
			if err := func() error {
				s.ScreenSharing.Reset()
				if err := s.ScreenSharing.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"screen_sharing\"")
			}
		case "share_dual_camera":
			if err := func() error {
				s.ShareDualCamera.Reset()
				if err := s.ShareDualCamera.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"share_dual_camera\"")
			}
		case "show_a_join_from_your_browser_link":
			if err := func() error {
				s.ShowAJoinFromYourBrowserLink.Reset()
				if err := s.ShowAJoinFromYourBrowserLink.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"show_a_join_from_your_browser_link\"")
			}
		case "show_meeting_control_toolbar":
			if err := func() error {
				s.ShowMeetingControlToolbar.Reset()
				if err := s.ShowMeetingControlToolbar.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"show_meeting_control_toolbar\"")
			}
		case "slide_control":
			if err := func() error {
				s.SlideControl.Reset()
				if err := s.SlideControl.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"slide_control\"")
			}
		case "virtual_background":
			if err := func() error {
				s.VirtualBackground.Reset()
				if err := s.VirtualBackground.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"virtual_background\"")
			}
		case "virtual_background_settings":
			if err := func() error {
				s.VirtualBackgroundSettings.Reset()
				if err := s.VirtualBackgroundSettings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"virtual_background_settings\"")
			}
		case "waiting_room":
			if err := func() error {
				s.WaitingRoom.Reset()
				if err := s.WaitingRoom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"waiting_room\"")
			}
		case "webinar_chat":
			if err := func() error {
				s.WebinarChat.Reset()
				if err := s.WebinarChat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webinar_chat\"")
			}
		case "webinar_live_streaming":
			if err := func() error {
				s.WebinarLiveStreaming.Reset()
				if err := s.WebinarLiveStreaming.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webinar_live_streaming\"")
			}
		case "meeting_polling":
			if err := func() error {
				s.MeetingPolling.Reset()
				if err := s.MeetingPolling.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_polling\"")
			}
		case "webinar_polling":
			if err := func() error {
				s.WebinarPolling.Reset()
				if err := s.WebinarPolling.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webinar_polling\"")
			}
		case "webinar_survey":
			if err := func() error {
				s.WebinarSurvey.Reset()
				if err := s.WebinarSurvey.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webinar_survey\"")
			}
		case "who_can_share_screen":
			if err := func() error {
				s.WhoCanShareScreen.Reset()
				if err := s.WhoCanShareScreen.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"who_can_share_screen\"")
			}
		case "who_can_share_screen_when_someone_is_sharing":
			if err := func() error {
				s.WhoCanShareScreenWhenSomeoneIsSharing.Reset()
				if err := s.WhoCanShareScreenWhenSomeoneIsSharing.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"who_can_share_screen_when_someone_is_sharing\"")
			}
		case "participants_share_simultaneously":
			if err := func() error {
				s.ParticipantsShareSimultaneously.Reset()
				if err := s.ParticipantsShareSimultaneously.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"participants_share_simultaneously\"")
			}
		case "workplace_by_facebook":
			if err := func() error {
				s.WorkplaceByFacebook.Reset()
				if err := s.WorkplaceByFacebook.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"workplace_by_facebook\"")
			}
		case "auto_answer":
			if err := func() error {
				s.AutoAnswer.Reset()
				if err := s.AutoAnswer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_answer\"")
			}
		case "allow_show_zoom_windows":
			if err := func() error {
				s.AllowShowZoomWindows.Reset()
				if err := s.AllowShowZoomWindows.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_show_zoom_windows\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsUpdateReq0InMeeting")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsUpdateReq0InMeeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsUpdateReq0InMeeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsUpdateReq0InMeetingClosedCaptioning) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsUpdateReq0InMeetingClosedCaptioning) encodeFields(e *jx.Encoder) {
	{
		if s.AutoTranscribing.Set {
			e.FieldStart("auto_transcribing")
			s.AutoTranscribing.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.SaveCaption.Set {
			e.FieldStart("save_caption")
			s.SaveCaption.Encode(e)
		}
	}
	{
		if s.ThirdPartyCaptioningService.Set {
			e.FieldStart("third_party_captioning_service")
			s.ThirdPartyCaptioningService.Encode(e)
		}
	}
	{
		if s.ViewFullTranscript.Set {
			e.FieldStart("view_full_transcript")
			s.ViewFullTranscript.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsUpdateReq0InMeetingClosedCaptioning = [5]string{
	0: "auto_transcribing",
	1: "enable",
	2: "save_caption",
	3: "third_party_captioning_service",
	4: "view_full_transcript",
}

// Decode decodes UserSettingsUpdateReq0InMeetingClosedCaptioning from json.
func (s *UserSettingsUpdateReq0InMeetingClosedCaptioning) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsUpdateReq0InMeetingClosedCaptioning to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "auto_transcribing":
			if err := func() error {
				s.AutoTranscribing.Reset()
				if err := s.AutoTranscribing.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_transcribing\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "save_caption":
			if err := func() error {
				s.SaveCaption.Reset()
				if err := s.SaveCaption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"save_caption\"")
			}
		case "third_party_captioning_service":
			if err := func() error {
				s.ThirdPartyCaptioningService.Reset()
				if err := s.ThirdPartyCaptioningService.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"third_party_captioning_service\"")
			}
		case "view_full_transcript":
			if err := func() error {
				s.ViewFullTranscript.Reset()
				if err := s.ViewFullTranscript.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"view_full_transcript\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsUpdateReq0InMeetingClosedCaptioning")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsUpdateReq0InMeetingClosedCaptioning) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsUpdateReq0InMeetingClosedCaptioning) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsUpdateReq0InMeetingLanguageInterpretation) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsUpdateReq0InMeetingLanguageInterpretation) encodeFields(e *jx.Encoder) {
	{
		if s.CustomLanguages != nil {
			e.FieldStart("custom_languages")
			e.ArrStart()
			for _, elem := range s.CustomLanguages {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.EnableLanguageInterpretationByDefault.Set {
			e.FieldStart("enable_language_interpretation_by_default")
			s.EnableLanguageInterpretationByDefault.Encode(e)
		}
	}
	{
		if s.AllowParticipantsToSpeakInListeningChannel.Set {
			e.FieldStart("allow_participants_to_speak_in_listening_channel")
			s.AllowParticipantsToSpeakInListeningChannel.Encode(e)
		}
	}
	{
		if s.AllowUpTo25CustomLanguagesWhenSchedulingMeetings.Set {
			e.FieldStart("allow_up_to_25_custom_languages_when_scheduling_meetings")
			s.AllowUpTo25CustomLanguagesWhenSchedulingMeetings.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsUpdateReq0InMeetingLanguageInterpretation = [5]string{
	0: "custom_languages",
	1: "enable_language_interpretation_by_default",
	2: "allow_participants_to_speak_in_listening_channel",
	3: "allow_up_to_25_custom_languages_when_scheduling_meetings",
	4: "enable",
}

// Decode decodes UserSettingsUpdateReq0InMeetingLanguageInterpretation from json.
func (s *UserSettingsUpdateReq0InMeetingLanguageInterpretation) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsUpdateReq0InMeetingLanguageInterpretation to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "custom_languages":
			if err := func() error {
				s.CustomLanguages = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.CustomLanguages = append(s.CustomLanguages, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"custom_languages\"")
			}
		case "enable_language_interpretation_by_default":
			if err := func() error {
				s.EnableLanguageInterpretationByDefault.Reset()
				if err := s.EnableLanguageInterpretationByDefault.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable_language_interpretation_by_default\"")
			}
		case "allow_participants_to_speak_in_listening_channel":
			if err := func() error {
				s.AllowParticipantsToSpeakInListeningChannel.Reset()
				if err := s.AllowParticipantsToSpeakInListeningChannel.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_participants_to_speak_in_listening_channel\"")
			}
		case "allow_up_to_25_custom_languages_when_scheduling_meetings":
			if err := func() error {
				s.AllowUpTo25CustomLanguagesWhenSchedulingMeetings.Reset()
				if err := s.AllowUpTo25CustomLanguagesWhenSchedulingMeetings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_up_to_25_custom_languages_when_scheduling_meetings\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsUpdateReq0InMeetingLanguageInterpretation")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsUpdateReq0InMeetingLanguageInterpretation) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsUpdateReq0InMeetingLanguageInterpretation) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsUpdateReq0InMeetingManualCaptioning) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsUpdateReq0InMeetingManualCaptioning) encodeFields(e *jx.Encoder) {
	{
		if s.AllowToType.Set {
			e.FieldStart("allow_to_type")
			s.AllowToType.Encode(e)
		}
	}
	{
		if s.AutoGeneratedCaptions.Set {
			e.FieldStart("auto_generated_captions")
			s.AutoGeneratedCaptions.Encode(e)
		}
	}
	{
		if s.FullTranscript.Set {
			e.FieldStart("full_transcript")
			s.FullTranscript.Encode(e)
		}
	}
	{
		if s.ManualCaptions.Set {
			e.FieldStart("manual_captions")
			s.ManualCaptions.Encode(e)
		}
	}
	{
		if s.SaveCaptions.Set {
			e.FieldStart("save_captions")
			s.SaveCaptions.Encode(e)
		}
	}
	{
		if s.ThirdPartyCaptioningService.Set {
			e.FieldStart("third_party_captioning_service")
			s.ThirdPartyCaptioningService.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsUpdateReq0InMeetingManualCaptioning = [6]string{
	0: "allow_to_type",
	1: "auto_generated_captions",
	2: "full_transcript",
	3: "manual_captions",
	4: "save_captions",
	5: "third_party_captioning_service",
}

// Decode decodes UserSettingsUpdateReq0InMeetingManualCaptioning from json.
func (s *UserSettingsUpdateReq0InMeetingManualCaptioning) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsUpdateReq0InMeetingManualCaptioning to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allow_to_type":
			if err := func() error {
				s.AllowToType.Reset()
				if err := s.AllowToType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_to_type\"")
			}
		case "auto_generated_captions":
			if err := func() error {
				s.AutoGeneratedCaptions.Reset()
				if err := s.AutoGeneratedCaptions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_generated_captions\"")
			}
		case "full_transcript":
			if err := func() error {
				s.FullTranscript.Reset()
				if err := s.FullTranscript.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"full_transcript\"")
			}
		case "manual_captions":
			if err := func() error {
				s.ManualCaptions.Reset()
				if err := s.ManualCaptions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"manual_captions\"")
			}
		case "save_captions":
			if err := func() error {
				s.SaveCaptions.Reset()
				if err := s.SaveCaptions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"save_captions\"")
			}
		case "third_party_captioning_service":
			if err := func() error {
				s.ThirdPartyCaptioningService.Reset()
				if err := s.ThirdPartyCaptioningService.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"third_party_captioning_service\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsUpdateReq0InMeetingManualCaptioning")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsUpdateReq0InMeetingManualCaptioning) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsUpdateReq0InMeetingManualCaptioning) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsUpdateReq0InMeetingMeetingPolling) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsUpdateReq0InMeetingMeetingPolling) encodeFields(e *jx.Encoder) {
	{
		if s.AdvancedPolls.Set {
			e.FieldStart("advanced_polls")
			s.AdvancedPolls.Encode(e)
		}
	}
	{
		if s.AllowAlternativeHostToAddEdit.Set {
			e.FieldStart("allow_alternative_host_to_add_edit")
			s.AllowAlternativeHostToAddEdit.Encode(e)
		}
	}
	{
		if s.RequireAnswersToBeAnonymous.Set {
			e.FieldStart("require_answers_to_be_anonymous")
			s.RequireAnswersToBeAnonymous.Encode(e)
		}
	}
	{
		if s.AllowHostToUploadImage.Set {
			e.FieldStart("allow_host_to_upload_image")
			s.AllowHostToUploadImage.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsUpdateReq0InMeetingMeetingPolling = [5]string{
	0: "advanced_polls",
	1: "allow_alternative_host_to_add_edit",
	2: "require_answers_to_be_anonymous",
	3: "allow_host_to_upload_image",
	4: "enable",
}

// Decode decodes UserSettingsUpdateReq0InMeetingMeetingPolling from json.
func (s *UserSettingsUpdateReq0InMeetingMeetingPolling) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsUpdateReq0InMeetingMeetingPolling to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "advanced_polls":
			if err := func() error {
				s.AdvancedPolls.Reset()
				if err := s.AdvancedPolls.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"advanced_polls\"")
			}
		case "allow_alternative_host_to_add_edit":
			if err := func() error {
				s.AllowAlternativeHostToAddEdit.Reset()
				if err := s.AllowAlternativeHostToAddEdit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_alternative_host_to_add_edit\"")
			}
		case "require_answers_to_be_anonymous":
			if err := func() error {
				s.RequireAnswersToBeAnonymous.Reset()
				if err := s.RequireAnswersToBeAnonymous.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_answers_to_be_anonymous\"")
			}
		case "allow_host_to_upload_image":
			if err := func() error {
				s.AllowHostToUploadImage.Reset()
				if err := s.AllowHostToUploadImage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_host_to_upload_image\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsUpdateReq0InMeetingMeetingPolling")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsUpdateReq0InMeetingMeetingPolling) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsUpdateReq0InMeetingMeetingPolling) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsUpdateReq0InMeetingSignLanguageInterpretation) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsUpdateReq0InMeetingSignLanguageInterpretation) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.EnableSignLanguageInterpretationByDefault.Set {
			e.FieldStart("enable_sign_language_interpretation_by_default")
			s.EnableSignLanguageInterpretationByDefault.Encode(e)
		}
	}
	{
		if s.Languages != nil {
			e.FieldStart("languages")
			e.ArrStart()
			for _, elem := range s.Languages {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.CustomLanguages != nil {
			e.FieldStart("custom_languages")
			e.ArrStart()
			for _, elem := range s.CustomLanguages {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfUserSettingsUpdateReq0InMeetingSignLanguageInterpretation = [4]string{
	0: "enable",
	1: "enable_sign_language_interpretation_by_default",
	2: "languages",
	3: "custom_languages",
}

// Decode decodes UserSettingsUpdateReq0InMeetingSignLanguageInterpretation from json.
func (s *UserSettingsUpdateReq0InMeetingSignLanguageInterpretation) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsUpdateReq0InMeetingSignLanguageInterpretation to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "enable_sign_language_interpretation_by_default":
			if err := func() error {
				s.EnableSignLanguageInterpretationByDefault.Reset()
				if err := s.EnableSignLanguageInterpretationByDefault.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable_sign_language_interpretation_by_default\"")
			}
		case "languages":
			if err := func() error {
				s.Languages = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Languages = append(s.Languages, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"languages\"")
			}
		case "custom_languages":
			if err := func() error {
				s.CustomLanguages = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.CustomLanguages = append(s.CustomLanguages, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"custom_languages\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsUpdateReq0InMeetingSignLanguageInterpretation")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsUpdateReq0InMeetingSignLanguageInterpretation) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsUpdateReq0InMeetingSignLanguageInterpretation) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsUpdateReq0InMeetingVirtualBackgroundSettings) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsUpdateReq0InMeetingVirtualBackgroundSettings) encodeFields(e *jx.Encoder) {
	{
		if s.AllowUploadCustom.Set {
			e.FieldStart("allow_upload_custom")
			s.AllowUploadCustom.Encode(e)
		}
	}
	{
		if s.AllowVideos.Set {
			e.FieldStart("allow_videos")
			s.AllowVideos.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.Files != nil {
			e.FieldStart("files")
			e.ArrStart()
			for _, elem := range s.Files {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfUserSettingsUpdateReq0InMeetingVirtualBackgroundSettings = [4]string{
	0: "allow_upload_custom",
	1: "allow_videos",
	2: "enable",
	3: "files",
}

// Decode decodes UserSettingsUpdateReq0InMeetingVirtualBackgroundSettings from json.
func (s *UserSettingsUpdateReq0InMeetingVirtualBackgroundSettings) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsUpdateReq0InMeetingVirtualBackgroundSettings to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allow_upload_custom":
			if err := func() error {
				s.AllowUploadCustom.Reset()
				if err := s.AllowUploadCustom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_upload_custom\"")
			}
		case "allow_videos":
			if err := func() error {
				s.AllowVideos.Reset()
				if err := s.AllowVideos.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_videos\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "files":
			if err := func() error {
				s.Files = make([]UserSettingsUpdateReq0InMeetingVirtualBackgroundSettingsFilesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem UserSettingsUpdateReq0InMeetingVirtualBackgroundSettingsFilesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Files = append(s.Files, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"files\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsUpdateReq0InMeetingVirtualBackgroundSettings")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsUpdateReq0InMeetingVirtualBackgroundSettings) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsUpdateReq0InMeetingVirtualBackgroundSettings) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsUpdateReq0InMeetingVirtualBackgroundSettingsFilesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsUpdateReq0InMeetingVirtualBackgroundSettingsFilesItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.IsDefault.Set {
			e.FieldStart("is_default")
			s.IsDefault.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Size.Set {
			e.FieldStart("size")
			s.Size.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsUpdateReq0InMeetingVirtualBackgroundSettingsFilesItem = [5]string{
	0: "id",
	1: "is_default",
	2: "name",
	3: "size",
	4: "type",
}

// Decode decodes UserSettingsUpdateReq0InMeetingVirtualBackgroundSettingsFilesItem from json.
func (s *UserSettingsUpdateReq0InMeetingVirtualBackgroundSettingsFilesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsUpdateReq0InMeetingVirtualBackgroundSettingsFilesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "is_default":
			if err := func() error {
				s.IsDefault.Reset()
				if err := s.IsDefault.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"is_default\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "size":
			if err := func() error {
				s.Size.Reset()
				if err := s.Size.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsUpdateReq0InMeetingVirtualBackgroundSettingsFilesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsUpdateReq0InMeetingVirtualBackgroundSettingsFilesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsUpdateReq0InMeetingVirtualBackgroundSettingsFilesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsUpdateReq0InMeetingWebinarChat) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsUpdateReq0InMeetingWebinarChat) encodeFields(e *jx.Encoder) {
	{
		if s.AllowAttendeesChatWith.Set {
			e.FieldStart("allow_attendees_chat_with")
			s.AllowAttendeesChatWith.Encode(e)
		}
	}
	{
		if s.AllowAutoSaveLocalChatFile.Set {
			e.FieldStart("allow_auto_save_local_chat_file")
			s.AllowAutoSaveLocalChatFile.Encode(e)
		}
	}
	{
		if s.AllowPanelistsChatWith.Set {
			e.FieldStart("allow_panelists_chat_with")
			s.AllowPanelistsChatWith.Encode(e)
		}
	}
	{
		if s.AllowPanelistsSendDirectMessage.Set {
			e.FieldStart("allow_panelists_send_direct_message")
			s.AllowPanelistsSendDirectMessage.Encode(e)
		}
	}
	{
		if s.AllowUsersSaveChats.Set {
			e.FieldStart("allow_users_save_chats")
			s.AllowUsersSaveChats.Encode(e)
		}
	}
	{
		if s.DefaultAttendeesChatWith.Set {
			e.FieldStart("default_attendees_chat_with")
			s.DefaultAttendeesChatWith.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsUpdateReq0InMeetingWebinarChat = [7]string{
	0: "allow_attendees_chat_with",
	1: "allow_auto_save_local_chat_file",
	2: "allow_panelists_chat_with",
	3: "allow_panelists_send_direct_message",
	4: "allow_users_save_chats",
	5: "default_attendees_chat_with",
	6: "enable",
}

// Decode decodes UserSettingsUpdateReq0InMeetingWebinarChat from json.
func (s *UserSettingsUpdateReq0InMeetingWebinarChat) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsUpdateReq0InMeetingWebinarChat to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allow_attendees_chat_with":
			if err := func() error {
				s.AllowAttendeesChatWith.Reset()
				if err := s.AllowAttendeesChatWith.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_attendees_chat_with\"")
			}
		case "allow_auto_save_local_chat_file":
			if err := func() error {
				s.AllowAutoSaveLocalChatFile.Reset()
				if err := s.AllowAutoSaveLocalChatFile.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_auto_save_local_chat_file\"")
			}
		case "allow_panelists_chat_with":
			if err := func() error {
				s.AllowPanelistsChatWith.Reset()
				if err := s.AllowPanelistsChatWith.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_panelists_chat_with\"")
			}
		case "allow_panelists_send_direct_message":
			if err := func() error {
				s.AllowPanelistsSendDirectMessage.Reset()
				if err := s.AllowPanelistsSendDirectMessage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_panelists_send_direct_message\"")
			}
		case "allow_users_save_chats":
			if err := func() error {
				s.AllowUsersSaveChats.Reset()
				if err := s.AllowUsersSaveChats.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_users_save_chats\"")
			}
		case "default_attendees_chat_with":
			if err := func() error {
				s.DefaultAttendeesChatWith.Reset()
				if err := s.DefaultAttendeesChatWith.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"default_attendees_chat_with\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsUpdateReq0InMeetingWebinarChat")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsUpdateReq0InMeetingWebinarChat) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsUpdateReq0InMeetingWebinarChat) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsUpdateReq0InMeetingWebinarLiveStreaming) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsUpdateReq0InMeetingWebinarLiveStreaming) encodeFields(e *jx.Encoder) {
	{
		if s.CustomServiceInstructions.Set {
			e.FieldStart("custom_service_instructions")
			s.CustomServiceInstructions.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.LiveStreamingReminder.Set {
			e.FieldStart("live_streaming_reminder")
			s.LiveStreamingReminder.Encode(e)
		}
	}
	{
		if s.LiveStreamingService != nil {
			e.FieldStart("live_streaming_service")
			e.ArrStart()
			for _, elem := range s.LiveStreamingService {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfUserSettingsUpdateReq0InMeetingWebinarLiveStreaming = [4]string{
	0: "custom_service_instructions",
	1: "enable",
	2: "live_streaming_reminder",
	3: "live_streaming_service",
}

// Decode decodes UserSettingsUpdateReq0InMeetingWebinarLiveStreaming from json.
func (s *UserSettingsUpdateReq0InMeetingWebinarLiveStreaming) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsUpdateReq0InMeetingWebinarLiveStreaming to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "custom_service_instructions":
			if err := func() error {
				s.CustomServiceInstructions.Reset()
				if err := s.CustomServiceInstructions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"custom_service_instructions\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "live_streaming_reminder":
			if err := func() error {
				s.LiveStreamingReminder.Reset()
				if err := s.LiveStreamingReminder.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"live_streaming_reminder\"")
			}
		case "live_streaming_service":
			if err := func() error {
				s.LiveStreamingService = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.LiveStreamingService = append(s.LiveStreamingService, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"live_streaming_service\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsUpdateReq0InMeetingWebinarLiveStreaming")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsUpdateReq0InMeetingWebinarLiveStreaming) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsUpdateReq0InMeetingWebinarLiveStreaming) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsUpdateReq0InMeetingWebinarPolling) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsUpdateReq0InMeetingWebinarPolling) encodeFields(e *jx.Encoder) {
	{
		if s.AdvancedPolls.Set {
			e.FieldStart("advanced_polls")
			s.AdvancedPolls.Encode(e)
		}
	}
	{
		if s.AllowAlternativeHostToAddEdit.Set {
			e.FieldStart("allow_alternative_host_to_add_edit")
			s.AllowAlternativeHostToAddEdit.Encode(e)
		}
	}
	{
		if s.RequireAnswersToBeAnonymous.Set {
			e.FieldStart("require_answers_to_be_anonymous")
			s.RequireAnswersToBeAnonymous.Encode(e)
		}
	}
	{
		if s.AllowHostToUploadImage.Set {
			e.FieldStart("allow_host_to_upload_image")
			s.AllowHostToUploadImage.Encode(e)
		}
	}
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsUpdateReq0InMeetingWebinarPolling = [5]string{
	0: "advanced_polls",
	1: "allow_alternative_host_to_add_edit",
	2: "require_answers_to_be_anonymous",
	3: "allow_host_to_upload_image",
	4: "enable",
}

// Decode decodes UserSettingsUpdateReq0InMeetingWebinarPolling from json.
func (s *UserSettingsUpdateReq0InMeetingWebinarPolling) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsUpdateReq0InMeetingWebinarPolling to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "advanced_polls":
			if err := func() error {
				s.AdvancedPolls.Reset()
				if err := s.AdvancedPolls.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"advanced_polls\"")
			}
		case "allow_alternative_host_to_add_edit":
			if err := func() error {
				s.AllowAlternativeHostToAddEdit.Reset()
				if err := s.AllowAlternativeHostToAddEdit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_alternative_host_to_add_edit\"")
			}
		case "require_answers_to_be_anonymous":
			if err := func() error {
				s.RequireAnswersToBeAnonymous.Reset()
				if err := s.RequireAnswersToBeAnonymous.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_answers_to_be_anonymous\"")
			}
		case "allow_host_to_upload_image":
			if err := func() error {
				s.AllowHostToUploadImage.Reset()
				if err := s.AllowHostToUploadImage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allow_host_to_upload_image\"")
			}
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsUpdateReq0InMeetingWebinarPolling")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsUpdateReq0InMeetingWebinarPolling) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsUpdateReq0InMeetingWebinarPolling) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsUpdateReq0Profile) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsUpdateReq0Profile) encodeFields(e *jx.Encoder) {
	{
		if s.RecordingStorageLocation.Set {
			e.FieldStart("recording_storage_location")
			s.RecordingStorageLocation.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsUpdateReq0Profile = [1]string{
	0: "recording_storage_location",
}

// Decode decodes UserSettingsUpdateReq0Profile from json.
func (s *UserSettingsUpdateReq0Profile) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsUpdateReq0Profile to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "recording_storage_location":
			if err := func() error {
				s.RecordingStorageLocation.Reset()
				if err := s.RecordingStorageLocation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_storage_location\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsUpdateReq0Profile")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsUpdateReq0Profile) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsUpdateReq0Profile) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsUpdateReq0ProfileRecordingStorageLocation) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsUpdateReq0ProfileRecordingStorageLocation) encodeFields(e *jx.Encoder) {
	{
		if s.AllowedValues != nil {
			e.FieldStart("allowed_values")
			e.ArrStart()
			for _, elem := range s.AllowedValues {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Value.Set {
			e.FieldStart("value")
			s.Value.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsUpdateReq0ProfileRecordingStorageLocation = [2]string{
	0: "allowed_values",
	1: "value",
}

// Decode decodes UserSettingsUpdateReq0ProfileRecordingStorageLocation from json.
func (s *UserSettingsUpdateReq0ProfileRecordingStorageLocation) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsUpdateReq0ProfileRecordingStorageLocation to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allowed_values":
			if err := func() error {
				s.AllowedValues = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.AllowedValues = append(s.AllowedValues, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allowed_values\"")
			}
		case "value":
			if err := func() error {
				s.Value.Reset()
				if err := s.Value.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"value\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsUpdateReq0ProfileRecordingStorageLocation")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsUpdateReq0ProfileRecordingStorageLocation) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsUpdateReq0ProfileRecordingStorageLocation) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsUpdateReq0Recording) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsUpdateReq0Recording) encodeFields(e *jx.Encoder) {
	{
		if s.AskHostToConfirmDisclaimer.Set {
			e.FieldStart("ask_host_to_confirm_disclaimer")
			s.AskHostToConfirmDisclaimer.Encode(e)
		}
	}
	{
		if s.AskParticipantsToConsentDisclaimer.Set {
			e.FieldStart("ask_participants_to_consent_disclaimer")
			s.AskParticipantsToConsentDisclaimer.Encode(e)
		}
	}
	{
		if s.AutoDeleteCmr.Set {
			e.FieldStart("auto_delete_cmr")
			s.AutoDeleteCmr.Encode(e)
		}
	}
	{
		if s.AutoDeleteCmrDays.Set {
			e.FieldStart("auto_delete_cmr_days")
			s.AutoDeleteCmrDays.Encode(e)
		}
	}
	{
		if s.RecordFilesSeparately.Set {
			e.FieldStart("record_files_separately")
			s.RecordFilesSeparately.Encode(e)
		}
	}
	{
		if s.DisplayParticipantName.Set {
			e.FieldStart("display_participant_name")
			s.DisplayParticipantName.Encode(e)
		}
	}
	{
		if s.RecordingThumbnails.Set {
			e.FieldStart("recording_thumbnails")
			s.RecordingThumbnails.Encode(e)
		}
	}
	{
		if s.OptimizeRecordingFor3rdPartyVideoEditor.Set {
			e.FieldStart("optimize_recording_for_3rd_party_video_editor")
			s.OptimizeRecordingFor3rdPartyVideoEditor.Encode(e)
		}
	}
	{
		if s.RecordingHighlight.Set {
			e.FieldStart("recording_highlight")
			s.RecordingHighlight.Encode(e)
		}
	}
	{
		if s.SavePanelistChat.Set {
			e.FieldStart("save_panelist_chat")
			s.SavePanelistChat.Encode(e)
		}
	}
	{
		if s.SavePollResults.Set {
			e.FieldStart("save_poll_results")
			s.SavePollResults.Encode(e)
		}
	}
	{
		if s.SaveCloseCaption.Set {
			e.FieldStart("save_close_caption")
			s.SaveCloseCaption.Encode(e)
		}
	}
	{
		if s.AutoRecording.Set {
			e.FieldStart("auto_recording")
			s.AutoRecording.Encode(e)
		}
	}
	{
		if s.CloudRecording.Set {
			e.FieldStart("cloud_recording")
			s.CloudRecording.Encode(e)
		}
	}
	{
		if s.HostPauseStopRecording.Set {
			e.FieldStart("host_pause_stop_recording")
			s.HostPauseStopRecording.Encode(e)
		}
	}
	{
		if s.IPAddressAccessControl.Set {
			e.FieldStart("ip_address_access_control")
			s.IPAddressAccessControl.Encode(e)
		}
	}
	{
		if s.LocalRecording.Set {
			e.FieldStart("local_recording")
			s.LocalRecording.Encode(e)
		}
	}
	{
		if s.RecordAudioFile.Set {
			e.FieldStart("record_audio_file")
			s.RecordAudioFile.Encode(e)
		}
	}
	{
		if s.RecordGalleryView.Set {
			e.FieldStart("record_gallery_view")
			s.RecordGalleryView.Encode(e)
		}
	}
	{
		if s.RecordSpeakerView.Set {
			e.FieldStart("record_speaker_view")
			s.RecordSpeakerView.Encode(e)
		}
	}
	{
		if s.RecordingAudioTranscript.Set {
			e.FieldStart("recording_audio_transcript")
			s.RecordingAudioTranscript.Encode(e)
		}
	}
	{
		if s.RecordingDisclaimer.Set {
			e.FieldStart("recording_disclaimer")
			s.RecordingDisclaimer.Encode(e)
		}
	}
	{
		if s.SmartRecording.Set {
			e.FieldStart("smart_recording")
			s.SmartRecording.Encode(e)
		}
	}
	{
		if s.RecordingPasswordRequirement.Set {
			e.FieldStart("recording_password_requirement")
			s.RecordingPasswordRequirement.Encode(e)
		}
	}
	{
		if s.SaveChatText.Set {
			e.FieldStart("save_chat_text")
			s.SaveChatText.Encode(e)
		}
	}
	{
		if s.ShowTimestamp.Set {
			e.FieldStart("show_timestamp")
			s.ShowTimestamp.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsUpdateReq0Recording = [26]string{
	0:  "ask_host_to_confirm_disclaimer",
	1:  "ask_participants_to_consent_disclaimer",
	2:  "auto_delete_cmr",
	3:  "auto_delete_cmr_days",
	4:  "record_files_separately",
	5:  "display_participant_name",
	6:  "recording_thumbnails",
	7:  "optimize_recording_for_3rd_party_video_editor",
	8:  "recording_highlight",
	9:  "save_panelist_chat",
	10: "save_poll_results",
	11: "save_close_caption",
	12: "auto_recording",
	13: "cloud_recording",
	14: "host_pause_stop_recording",
	15: "ip_address_access_control",
	16: "local_recording",
	17: "record_audio_file",
	18: "record_gallery_view",
	19: "record_speaker_view",
	20: "recording_audio_transcript",
	21: "recording_disclaimer",
	22: "smart_recording",
	23: "recording_password_requirement",
	24: "save_chat_text",
	25: "show_timestamp",
}

// Decode decodes UserSettingsUpdateReq0Recording from json.
func (s *UserSettingsUpdateReq0Recording) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsUpdateReq0Recording to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "ask_host_to_confirm_disclaimer":
			if err := func() error {
				s.AskHostToConfirmDisclaimer.Reset()
				if err := s.AskHostToConfirmDisclaimer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ask_host_to_confirm_disclaimer\"")
			}
		case "ask_participants_to_consent_disclaimer":
			if err := func() error {
				s.AskParticipantsToConsentDisclaimer.Reset()
				if err := s.AskParticipantsToConsentDisclaimer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ask_participants_to_consent_disclaimer\"")
			}
		case "auto_delete_cmr":
			if err := func() error {
				s.AutoDeleteCmr.Reset()
				if err := s.AutoDeleteCmr.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_delete_cmr\"")
			}
		case "auto_delete_cmr_days":
			if err := func() error {
				s.AutoDeleteCmrDays.Reset()
				if err := s.AutoDeleteCmrDays.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_delete_cmr_days\"")
			}
		case "record_files_separately":
			if err := func() error {
				s.RecordFilesSeparately.Reset()
				if err := s.RecordFilesSeparately.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"record_files_separately\"")
			}
		case "display_participant_name":
			if err := func() error {
				s.DisplayParticipantName.Reset()
				if err := s.DisplayParticipantName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_participant_name\"")
			}
		case "recording_thumbnails":
			if err := func() error {
				s.RecordingThumbnails.Reset()
				if err := s.RecordingThumbnails.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_thumbnails\"")
			}
		case "optimize_recording_for_3rd_party_video_editor":
			if err := func() error {
				s.OptimizeRecordingFor3rdPartyVideoEditor.Reset()
				if err := s.OptimizeRecordingFor3rdPartyVideoEditor.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optimize_recording_for_3rd_party_video_editor\"")
			}
		case "recording_highlight":
			if err := func() error {
				s.RecordingHighlight.Reset()
				if err := s.RecordingHighlight.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_highlight\"")
			}
		case "save_panelist_chat":
			if err := func() error {
				s.SavePanelistChat.Reset()
				if err := s.SavePanelistChat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"save_panelist_chat\"")
			}
		case "save_poll_results":
			if err := func() error {
				s.SavePollResults.Reset()
				if err := s.SavePollResults.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"save_poll_results\"")
			}
		case "save_close_caption":
			if err := func() error {
				s.SaveCloseCaption.Reset()
				if err := s.SaveCloseCaption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"save_close_caption\"")
			}
		case "auto_recording":
			if err := func() error {
				s.AutoRecording.Reset()
				if err := s.AutoRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_recording\"")
			}
		case "cloud_recording":
			if err := func() error {
				s.CloudRecording.Reset()
				if err := s.CloudRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cloud_recording\"")
			}
		case "host_pause_stop_recording":
			if err := func() error {
				s.HostPauseStopRecording.Reset()
				if err := s.HostPauseStopRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"host_pause_stop_recording\"")
			}
		case "ip_address_access_control":
			if err := func() error {
				s.IPAddressAccessControl.Reset()
				if err := s.IPAddressAccessControl.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ip_address_access_control\"")
			}
		case "local_recording":
			if err := func() error {
				s.LocalRecording.Reset()
				if err := s.LocalRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"local_recording\"")
			}
		case "record_audio_file":
			if err := func() error {
				s.RecordAudioFile.Reset()
				if err := s.RecordAudioFile.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"record_audio_file\"")
			}
		case "record_gallery_view":
			if err := func() error {
				s.RecordGalleryView.Reset()
				if err := s.RecordGalleryView.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"record_gallery_view\"")
			}
		case "record_speaker_view":
			if err := func() error {
				s.RecordSpeakerView.Reset()
				if err := s.RecordSpeakerView.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"record_speaker_view\"")
			}
		case "recording_audio_transcript":
			if err := func() error {
				s.RecordingAudioTranscript.Reset()
				if err := s.RecordingAudioTranscript.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_audio_transcript\"")
			}
		case "recording_disclaimer":
			if err := func() error {
				s.RecordingDisclaimer.Reset()
				if err := s.RecordingDisclaimer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_disclaimer\"")
			}
		case "smart_recording":
			if err := func() error {
				s.SmartRecording.Reset()
				if err := s.SmartRecording.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"smart_recording\"")
			}
		case "recording_password_requirement":
			if err := func() error {
				s.RecordingPasswordRequirement.Reset()
				if err := s.RecordingPasswordRequirement.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_password_requirement\"")
			}
		case "save_chat_text":
			if err := func() error {
				s.SaveChatText.Reset()
				if err := s.SaveChatText.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"save_chat_text\"")
			}
		case "show_timestamp":
			if err := func() error {
				s.ShowTimestamp.Reset()
				if err := s.ShowTimestamp.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"show_timestamp\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsUpdateReq0Recording")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsUpdateReq0Recording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsUpdateReq0Recording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsUpdateReq0RecordingIPAddressAccessControl) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsUpdateReq0RecordingIPAddressAccessControl) encodeFields(e *jx.Encoder) {
	{
		if s.Enable.Set {
			e.FieldStart("enable")
			s.Enable.Encode(e)
		}
	}
	{
		if s.IPAddressesOrRanges.Set {
			e.FieldStart("ip_addresses_or_ranges")
			s.IPAddressesOrRanges.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsUpdateReq0RecordingIPAddressAccessControl = [2]string{
	0: "enable",
	1: "ip_addresses_or_ranges",
}

// Decode decodes UserSettingsUpdateReq0RecordingIPAddressAccessControl from json.
func (s *UserSettingsUpdateReq0RecordingIPAddressAccessControl) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsUpdateReq0RecordingIPAddressAccessControl to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enable":
			if err := func() error {
				s.Enable.Reset()
				if err := s.Enable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable\"")
			}
		case "ip_addresses_or_ranges":
			if err := func() error {
				s.IPAddressesOrRanges.Reset()
				if err := s.IPAddressesOrRanges.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ip_addresses_or_ranges\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsUpdateReq0RecordingIPAddressAccessControl")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsUpdateReq0RecordingIPAddressAccessControl) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsUpdateReq0RecordingIPAddressAccessControl) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsUpdateReq0RecordingRecordFilesSeparately) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsUpdateReq0RecordingRecordFilesSeparately) encodeFields(e *jx.Encoder) {
	{
		if s.ActiveSpeaker.Set {
			e.FieldStart("active_speaker")
			s.ActiveSpeaker.Encode(e)
		}
	}
	{
		if s.GalleryView.Set {
			e.FieldStart("gallery_view")
			s.GalleryView.Encode(e)
		}
	}
	{
		if s.SharedScreen.Set {
			e.FieldStart("shared_screen")
			s.SharedScreen.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsUpdateReq0RecordingRecordFilesSeparately = [3]string{
	0: "active_speaker",
	1: "gallery_view",
	2: "shared_screen",
}

// Decode decodes UserSettingsUpdateReq0RecordingRecordFilesSeparately from json.
func (s *UserSettingsUpdateReq0RecordingRecordFilesSeparately) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsUpdateReq0RecordingRecordFilesSeparately to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "active_speaker":
			if err := func() error {
				s.ActiveSpeaker.Reset()
				if err := s.ActiveSpeaker.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"active_speaker\"")
			}
		case "gallery_view":
			if err := func() error {
				s.GalleryView.Reset()
				if err := s.GalleryView.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"gallery_view\"")
			}
		case "shared_screen":
			if err := func() error {
				s.SharedScreen.Reset()
				if err := s.SharedScreen.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shared_screen\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsUpdateReq0RecordingRecordFilesSeparately")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsUpdateReq0RecordingRecordFilesSeparately) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsUpdateReq0RecordingRecordFilesSeparately) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsUpdateReq0RecordingRecordingPasswordRequirement) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsUpdateReq0RecordingRecordingPasswordRequirement) encodeFields(e *jx.Encoder) {
	{
		if s.HaveLetter.Set {
			e.FieldStart("have_letter")
			s.HaveLetter.Encode(e)
		}
	}
	{
		if s.HaveNumber.Set {
			e.FieldStart("have_number")
			s.HaveNumber.Encode(e)
		}
	}
	{
		if s.HaveSpecialCharacter.Set {
			e.FieldStart("have_special_character")
			s.HaveSpecialCharacter.Encode(e)
		}
	}
	{
		if s.Length.Set {
			e.FieldStart("length")
			s.Length.Encode(e)
		}
	}
	{
		if s.OnlyAllowNumeric.Set {
			e.FieldStart("only_allow_numeric")
			s.OnlyAllowNumeric.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsUpdateReq0RecordingRecordingPasswordRequirement = [5]string{
	0: "have_letter",
	1: "have_number",
	2: "have_special_character",
	3: "length",
	4: "only_allow_numeric",
}

// Decode decodes UserSettingsUpdateReq0RecordingRecordingPasswordRequirement from json.
func (s *UserSettingsUpdateReq0RecordingRecordingPasswordRequirement) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsUpdateReq0RecordingRecordingPasswordRequirement to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "have_letter":
			if err := func() error {
				s.HaveLetter.Reset()
				if err := s.HaveLetter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"have_letter\"")
			}
		case "have_number":
			if err := func() error {
				s.HaveNumber.Reset()
				if err := s.HaveNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"have_number\"")
			}
		case "have_special_character":
			if err := func() error {
				s.HaveSpecialCharacter.Reset()
				if err := s.HaveSpecialCharacter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"have_special_character\"")
			}
		case "length":
			if err := func() error {
				s.Length.Reset()
				if err := s.Length.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"length\"")
			}
		case "only_allow_numeric":
			if err := func() error {
				s.OnlyAllowNumeric.Reset()
				if err := s.OnlyAllowNumeric.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"only_allow_numeric\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsUpdateReq0RecordingRecordingPasswordRequirement")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsUpdateReq0RecordingRecordingPasswordRequirement) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsUpdateReq0RecordingRecordingPasswordRequirement) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsUpdateReq0RecordingSmartRecording) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsUpdateReq0RecordingSmartRecording) encodeFields(e *jx.Encoder) {
	{
		if s.CreateRecordingHighlights.Set {
			e.FieldStart("create_recording_highlights")
			s.CreateRecordingHighlights.Encode(e)
		}
	}
	{
		if s.CreateSmartChapters.Set {
			e.FieldStart("create_smart_chapters")
			s.CreateSmartChapters.Encode(e)
		}
	}
	{
		if s.CreateNextSteps.Set {
			e.FieldStart("create_next_steps")
			s.CreateNextSteps.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsUpdateReq0RecordingSmartRecording = [3]string{
	0: "create_recording_highlights",
	1: "create_smart_chapters",
	2: "create_next_steps",
}

// Decode decodes UserSettingsUpdateReq0RecordingSmartRecording from json.
func (s *UserSettingsUpdateReq0RecordingSmartRecording) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsUpdateReq0RecordingSmartRecording to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "create_recording_highlights":
			if err := func() error {
				s.CreateRecordingHighlights.Reset()
				if err := s.CreateRecordingHighlights.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"create_recording_highlights\"")
			}
		case "create_smart_chapters":
			if err := func() error {
				s.CreateSmartChapters.Reset()
				if err := s.CreateSmartChapters.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"create_smart_chapters\"")
			}
		case "create_next_steps":
			if err := func() error {
				s.CreateNextSteps.Reset()
				if err := s.CreateNextSteps.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"create_next_steps\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsUpdateReq0RecordingSmartRecording")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsUpdateReq0RecordingSmartRecording) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsUpdateReq0RecordingSmartRecording) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsUpdateReq0ScheduleMeeting) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsUpdateReq0ScheduleMeeting) encodeFields(e *jx.Encoder) {
	{
		if s.AudioType.Set {
			e.FieldStart("audio_type")
			s.AudioType.Encode(e)
		}
	}
	{
		if s.DefaultPasswordForScheduledMeetings.Set {
			e.FieldStart("default_password_for_scheduled_meetings")
			s.DefaultPasswordForScheduledMeetings.Encode(e)
		}
	}
	{
		if s.EmbedPasswordInJoinLink.Set {
			e.FieldStart("embed_password_in_join_link")
			s.EmbedPasswordInJoinLink.Encode(e)
		}
	}
	{
		if s.ForcePmiJbhPassword.Set {
			e.FieldStart("force_pmi_jbh_password")
			s.ForcePmiJbhPassword.Encode(e)
		}
	}
	{
		if s.HostVideo.Set {
			e.FieldStart("host_video")
			s.HostVideo.Encode(e)
		}
	}
	{
		if s.JoinBeforeHost.Set {
			e.FieldStart("join_before_host")
			s.JoinBeforeHost.Encode(e)
		}
	}
	{
		if s.MeetingPasswordRequirement.Set {
			e.FieldStart("meeting_password_requirement")
			s.MeetingPasswordRequirement.Encode(e)
		}
	}
	{
		if s.ParticipantsVideo.Set {
			e.FieldStart("participants_video")
			s.ParticipantsVideo.Encode(e)
		}
	}
	{
		if s.PersonalMeeting.Set {
			e.FieldStart("personal_meeting")
			s.PersonalMeeting.Encode(e)
		}
	}
	{
		if s.PmiPassword.Set {
			e.FieldStart("pmi_password")
			s.PmiPassword.Encode(e)
		}
	}
	{
		if s.PstnPasswordProtected.Set {
			e.FieldStart("pstn_password_protected")
			s.PstnPasswordProtected.Encode(e)
		}
	}
	{
		if s.RequirePasswordForInstantMeetings.Set {
			e.FieldStart("require_password_for_instant_meetings")
			s.RequirePasswordForInstantMeetings.Encode(e)
		}
	}
	{
		if s.RequirePasswordForPmiMeetings.Set {
			e.FieldStart("require_password_for_pmi_meetings")
			s.RequirePasswordForPmiMeetings.Encode(e)
		}
	}
	{
		if s.RequirePasswordForScheduledMeetings.Set {
			e.FieldStart("require_password_for_scheduled_meetings")
			s.RequirePasswordForScheduledMeetings.Encode(e)
		}
	}
	{
		if s.RequirePasswordForSchedulingNewMeetings.Set {
			e.FieldStart("require_password_for_scheduling_new_meetings")
			s.RequirePasswordForSchedulingNewMeetings.Encode(e)
		}
	}
	{
		if s.UsePmiForInstantMeetings.Set {
			e.FieldStart("use_pmi_for_instant_meetings")
			s.UsePmiForInstantMeetings.Encode(e)
		}
	}
	{
		if s.UsePmiForScheduledMeetings.Set {
			e.FieldStart("use_pmi_for_scheduled_meetings")
			s.UsePmiForScheduledMeetings.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsUpdateReq0ScheduleMeeting = [17]string{
	0:  "audio_type",
	1:  "default_password_for_scheduled_meetings",
	2:  "embed_password_in_join_link",
	3:  "force_pmi_jbh_password",
	4:  "host_video",
	5:  "join_before_host",
	6:  "meeting_password_requirement",
	7:  "participants_video",
	8:  "personal_meeting",
	9:  "pmi_password",
	10: "pstn_password_protected",
	11: "require_password_for_instant_meetings",
	12: "require_password_for_pmi_meetings",
	13: "require_password_for_scheduled_meetings",
	14: "require_password_for_scheduling_new_meetings",
	15: "use_pmi_for_instant_meetings",
	16: "use_pmi_for_scheduled_meetings",
}

// Decode decodes UserSettingsUpdateReq0ScheduleMeeting from json.
func (s *UserSettingsUpdateReq0ScheduleMeeting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsUpdateReq0ScheduleMeeting to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_type":
			if err := func() error {
				s.AudioType.Reset()
				if err := s.AudioType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_type\"")
			}
		case "default_password_for_scheduled_meetings":
			if err := func() error {
				s.DefaultPasswordForScheduledMeetings.Reset()
				if err := s.DefaultPasswordForScheduledMeetings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"default_password_for_scheduled_meetings\"")
			}
		case "embed_password_in_join_link":
			if err := func() error {
				s.EmbedPasswordInJoinLink.Reset()
				if err := s.EmbedPasswordInJoinLink.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"embed_password_in_join_link\"")
			}
		case "force_pmi_jbh_password":
			if err := func() error {
				s.ForcePmiJbhPassword.Reset()
				if err := s.ForcePmiJbhPassword.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"force_pmi_jbh_password\"")
			}
		case "host_video":
			if err := func() error {
				s.HostVideo.Reset()
				if err := s.HostVideo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"host_video\"")
			}
		case "join_before_host":
			if err := func() error {
				s.JoinBeforeHost.Reset()
				if err := s.JoinBeforeHost.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"join_before_host\"")
			}
		case "meeting_password_requirement":
			if err := func() error {
				s.MeetingPasswordRequirement.Reset()
				if err := s.MeetingPasswordRequirement.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_password_requirement\"")
			}
		case "participants_video":
			if err := func() error {
				s.ParticipantsVideo.Reset()
				if err := s.ParticipantsVideo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"participants_video\"")
			}
		case "personal_meeting":
			if err := func() error {
				s.PersonalMeeting.Reset()
				if err := s.PersonalMeeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"personal_meeting\"")
			}
		case "pmi_password":
			if err := func() error {
				s.PmiPassword.Reset()
				if err := s.PmiPassword.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pmi_password\"")
			}
		case "pstn_password_protected":
			if err := func() error {
				s.PstnPasswordProtected.Reset()
				if err := s.PstnPasswordProtected.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pstn_password_protected\"")
			}
		case "require_password_for_instant_meetings":
			if err := func() error {
				s.RequirePasswordForInstantMeetings.Reset()
				if err := s.RequirePasswordForInstantMeetings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_password_for_instant_meetings\"")
			}
		case "require_password_for_pmi_meetings":
			if err := func() error {
				s.RequirePasswordForPmiMeetings.Reset()
				if err := s.RequirePasswordForPmiMeetings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_password_for_pmi_meetings\"")
			}
		case "require_password_for_scheduled_meetings":
			if err := func() error {
				s.RequirePasswordForScheduledMeetings.Reset()
				if err := s.RequirePasswordForScheduledMeetings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_password_for_scheduled_meetings\"")
			}
		case "require_password_for_scheduling_new_meetings":
			if err := func() error {
				s.RequirePasswordForSchedulingNewMeetings.Reset()
				if err := s.RequirePasswordForSchedulingNewMeetings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_password_for_scheduling_new_meetings\"")
			}
		case "use_pmi_for_instant_meetings":
			if err := func() error {
				s.UsePmiForInstantMeetings.Reset()
				if err := s.UsePmiForInstantMeetings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"use_pmi_for_instant_meetings\"")
			}
		case "use_pmi_for_scheduled_meetings":
			if err := func() error {
				s.UsePmiForScheduledMeetings.Reset()
				if err := s.UsePmiForScheduledMeetings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"use_pmi_for_scheduled_meetings\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsUpdateReq0ScheduleMeeting")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsUpdateReq0ScheduleMeeting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsUpdateReq0ScheduleMeeting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement) encodeFields(e *jx.Encoder) {
	{
		if s.ConsecutiveCharactersLength.Set {
			e.FieldStart("consecutive_characters_length")
			s.ConsecutiveCharactersLength.Encode(e)
		}
	}
	{
		if s.HaveLetter.Set {
			e.FieldStart("have_letter")
			s.HaveLetter.Encode(e)
		}
	}
	{
		if s.HaveNumber.Set {
			e.FieldStart("have_number")
			s.HaveNumber.Encode(e)
		}
	}
	{
		if s.HaveSpecialCharacter.Set {
			e.FieldStart("have_special_character")
			s.HaveSpecialCharacter.Encode(e)
		}
	}
	{
		if s.HaveUpperAndLowerCharacters.Set {
			e.FieldStart("have_upper_and_lower_characters")
			s.HaveUpperAndLowerCharacters.Encode(e)
		}
	}
	{
		if s.Length.Set {
			e.FieldStart("length")
			s.Length.Encode(e)
		}
	}
	{
		if s.OnlyAllowNumeric.Set {
			e.FieldStart("only_allow_numeric")
			s.OnlyAllowNumeric.Encode(e)
		}
	}
	{
		if s.WeakEnhanceDetection.Set {
			e.FieldStart("weak_enhance_detection")
			s.WeakEnhanceDetection.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement = [8]string{
	0: "consecutive_characters_length",
	1: "have_letter",
	2: "have_number",
	3: "have_special_character",
	4: "have_upper_and_lower_characters",
	5: "length",
	6: "only_allow_numeric",
	7: "weak_enhance_detection",
}

// Decode decodes UserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement from json.
func (s *UserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "consecutive_characters_length":
			if err := func() error {
				s.ConsecutiveCharactersLength.Reset()
				if err := s.ConsecutiveCharactersLength.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"consecutive_characters_length\"")
			}
		case "have_letter":
			if err := func() error {
				s.HaveLetter.Reset()
				if err := s.HaveLetter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"have_letter\"")
			}
		case "have_number":
			if err := func() error {
				s.HaveNumber.Reset()
				if err := s.HaveNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"have_number\"")
			}
		case "have_special_character":
			if err := func() error {
				s.HaveSpecialCharacter.Reset()
				if err := s.HaveSpecialCharacter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"have_special_character\"")
			}
		case "have_upper_and_lower_characters":
			if err := func() error {
				s.HaveUpperAndLowerCharacters.Reset()
				if err := s.HaveUpperAndLowerCharacters.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"have_upper_and_lower_characters\"")
			}
		case "length":
			if err := func() error {
				s.Length.Reset()
				if err := s.Length.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"length\"")
			}
		case "only_allow_numeric":
			if err := func() error {
				s.OnlyAllowNumeric.Reset()
				if err := s.OnlyAllowNumeric.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"only_allow_numeric\"")
			}
		case "weak_enhance_detection":
			if err := func() error {
				s.WeakEnhanceDetection.Reset()
				if err := s.WeakEnhanceDetection.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"weak_enhance_detection\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsUpdateReq0ScheduleMeetingMeetingPasswordRequirement) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsUpdateReq0Telephony) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsUpdateReq0Telephony) encodeFields(e *jx.Encoder) {
	{
		if s.AudioConferenceInfo.Set {
			e.FieldStart("audio_conference_info")
			s.AudioConferenceInfo.Encode(e)
		}
	}
	{
		if s.ShowInternationalNumbersLink.Set {
			e.FieldStart("show_international_numbers_link")
			s.ShowInternationalNumbersLink.Encode(e)
		}
	}
	{
		if s.TelephonyRegions.Set {
			e.FieldStart("telephony_regions")
			s.TelephonyRegions.Encode(e)
		}
	}
	{
		if s.ThirdPartyAudio.Set {
			e.FieldStart("third_party_audio")
			s.ThirdPartyAudio.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsUpdateReq0Telephony = [4]string{
	0: "audio_conference_info",
	1: "show_international_numbers_link",
	2: "telephony_regions",
	3: "third_party_audio",
}

// Decode decodes UserSettingsUpdateReq0Telephony from json.
func (s *UserSettingsUpdateReq0Telephony) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsUpdateReq0Telephony to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "audio_conference_info":
			if err := func() error {
				s.AudioConferenceInfo.Reset()
				if err := s.AudioConferenceInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"audio_conference_info\"")
			}
		case "show_international_numbers_link":
			if err := func() error {
				s.ShowInternationalNumbersLink.Reset()
				if err := s.ShowInternationalNumbersLink.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"show_international_numbers_link\"")
			}
		case "telephony_regions":
			if err := func() error {
				s.TelephonyRegions.Reset()
				if err := s.TelephonyRegions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"telephony_regions\"")
			}
		case "third_party_audio":
			if err := func() error {
				s.ThirdPartyAudio.Reset()
				if err := s.ThirdPartyAudio.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"third_party_audio\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsUpdateReq0Telephony")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsUpdateReq0Telephony) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsUpdateReq0Telephony) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsUpdateReq0TelephonyTelephonyRegions) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsUpdateReq0TelephonyTelephonyRegions) encodeFields(e *jx.Encoder) {
	{
		if s.SelectionValues.Set {
			e.FieldStart("selection_values")
			s.SelectionValues.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsUpdateReq0TelephonyTelephonyRegions = [1]string{
	0: "selection_values",
}

// Decode decodes UserSettingsUpdateReq0TelephonyTelephonyRegions from json.
func (s *UserSettingsUpdateReq0TelephonyTelephonyRegions) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsUpdateReq0TelephonyTelephonyRegions to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "selection_values":
			if err := func() error {
				s.SelectionValues.Reset()
				if err := s.SelectionValues.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"selection_values\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsUpdateReq0TelephonyTelephonyRegions")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsUpdateReq0TelephonyTelephonyRegions) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsUpdateReq0TelephonyTelephonyRegions) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsUpdateReq0Tsp) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsUpdateReq0Tsp) encodeFields(e *jx.Encoder) {
	{
		if s.CallOut.Set {
			e.FieldStart("call_out")
			s.CallOut.Encode(e)
		}
	}
	{
		if s.CallOutCountries != nil {
			e.FieldStart("call_out_countries")
			e.ArrStart()
			for _, elem := range s.CallOutCountries {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ShowInternationalNumbersLink.Set {
			e.FieldStart("show_international_numbers_link")
			s.ShowInternationalNumbersLink.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsUpdateReq0Tsp = [3]string{
	0: "call_out",
	1: "call_out_countries",
	2: "show_international_numbers_link",
}

// Decode decodes UserSettingsUpdateReq0Tsp from json.
func (s *UserSettingsUpdateReq0Tsp) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsUpdateReq0Tsp to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "call_out":
			if err := func() error {
				s.CallOut.Reset()
				if err := s.CallOut.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_out\"")
			}
		case "call_out_countries":
			if err := func() error {
				s.CallOutCountries = make([]UserSettingsUpdateReq0TspCallOutCountriesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem UserSettingsUpdateReq0TspCallOutCountriesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CallOutCountries = append(s.CallOutCountries, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"call_out_countries\"")
			}
		case "show_international_numbers_link":
			if err := func() error {
				s.ShowInternationalNumbersLink.Reset()
				if err := s.ShowInternationalNumbersLink.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"show_international_numbers_link\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsUpdateReq0Tsp")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsUpdateReq0Tsp) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsUpdateReq0Tsp) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsUpdateReq0TspCallOutCountriesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsUpdateReq0TspCallOutCountriesItem) encodeFields(e *jx.Encoder) {
}

var jsonFieldsNameOfUserSettingsUpdateReq0TspCallOutCountriesItem = [0]string{}

// Decode decodes UserSettingsUpdateReq0TspCallOutCountriesItem from json.
func (s *UserSettingsUpdateReq0TspCallOutCountriesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsUpdateReq0TspCallOutCountriesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsUpdateReq0TspCallOutCountriesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsUpdateReq0TspCallOutCountriesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsUpdateReq0TspCallOutCountriesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsUpdateReq1) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsUpdateReq1) encodeFields(e *jx.Encoder) {
	{
		if s.AuthenticationOption.Set {
			e.FieldStart("authentication_option")
			s.AuthenticationOption.Encode(e)
		}
	}
	{
		if s.MeetingAuthentication.Set {
			e.FieldStart("meeting_authentication")
			s.MeetingAuthentication.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsUpdateReq1 = [2]string{
	0: "authentication_option",
	1: "meeting_authentication",
}

// Decode decodes UserSettingsUpdateReq1 from json.
func (s *UserSettingsUpdateReq1) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsUpdateReq1 to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "authentication_option":
			if err := func() error {
				s.AuthenticationOption.Reset()
				if err := s.AuthenticationOption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"authentication_option\"")
			}
		case "meeting_authentication":
			if err := func() error {
				s.MeetingAuthentication.Reset()
				if err := s.MeetingAuthentication.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_authentication\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsUpdateReq1")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsUpdateReq1) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsUpdateReq1) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsUpdateReq1AuthenticationOption) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsUpdateReq1AuthenticationOption) encodeFields(e *jx.Encoder) {
	{
		if s.Action.Set {
			e.FieldStart("action")
			s.Action.Encode(e)
		}
	}
	{
		if s.DefaultOption.Set {
			e.FieldStart("default_option")
			s.DefaultOption.Encode(e)
		}
	}
	{
		if s.Domains.Set {
			e.FieldStart("domains")
			s.Domains.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsUpdateReq1AuthenticationOption = [6]string{
	0: "action",
	1: "default_option",
	2: "domains",
	3: "id",
	4: "name",
	5: "type",
}

// Decode decodes UserSettingsUpdateReq1AuthenticationOption from json.
func (s *UserSettingsUpdateReq1AuthenticationOption) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsUpdateReq1AuthenticationOption to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "action":
			if err := func() error {
				s.Action.Reset()
				if err := s.Action.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"action\"")
			}
		case "default_option":
			if err := func() error {
				s.DefaultOption.Reset()
				if err := s.DefaultOption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"default_option\"")
			}
		case "domains":
			if err := func() error {
				s.Domains.Reset()
				if err := s.Domains.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"domains\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsUpdateReq1AuthenticationOption")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsUpdateReq1AuthenticationOption) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsUpdateReq1AuthenticationOption) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsUpdateReq2) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsUpdateReq2) encodeFields(e *jx.Encoder) {
	{
		if s.AuthenticationOption.Set {
			e.FieldStart("authentication_option")
			s.AuthenticationOption.Encode(e)
		}
	}
	{
		if s.RecordingAuthentication.Set {
			e.FieldStart("recording_authentication")
			s.RecordingAuthentication.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsUpdateReq2 = [2]string{
	0: "authentication_option",
	1: "recording_authentication",
}

// Decode decodes UserSettingsUpdateReq2 from json.
func (s *UserSettingsUpdateReq2) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsUpdateReq2 to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "authentication_option":
			if err := func() error {
				s.AuthenticationOption.Reset()
				if err := s.AuthenticationOption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"authentication_option\"")
			}
		case "recording_authentication":
			if err := func() error {
				s.RecordingAuthentication.Reset()
				if err := s.RecordingAuthentication.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recording_authentication\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsUpdateReq2")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsUpdateReq2) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsUpdateReq2) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsUpdateReq2AuthenticationOption) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsUpdateReq2AuthenticationOption) encodeFields(e *jx.Encoder) {
	{
		if s.Action.Set {
			e.FieldStart("action")
			s.Action.Encode(e)
		}
	}
	{
		if s.DefaultOption.Set {
			e.FieldStart("default_option")
			s.DefaultOption.Encode(e)
		}
	}
	{
		if s.Domains.Set {
			e.FieldStart("domains")
			s.Domains.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsUpdateReq2AuthenticationOption = [6]string{
	0: "action",
	1: "default_option",
	2: "domains",
	3: "id",
	4: "name",
	5: "type",
}

// Decode decodes UserSettingsUpdateReq2AuthenticationOption from json.
func (s *UserSettingsUpdateReq2AuthenticationOption) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsUpdateReq2AuthenticationOption to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "action":
			if err := func() error {
				s.Action.Reset()
				if err := s.Action.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"action\"")
			}
		case "default_option":
			if err := func() error {
				s.DefaultOption.Reset()
				if err := s.DefaultOption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"default_option\"")
			}
		case "domains":
			if err := func() error {
				s.Domains.Reset()
				if err := s.Domains.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"domains\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsUpdateReq2AuthenticationOption")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsUpdateReq2AuthenticationOption) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsUpdateReq2AuthenticationOption) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsUpdateReq3) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsUpdateReq3) encodeFields(e *jx.Encoder) {
	{
		if s.MeetingSecurity.Set {
			e.FieldStart("meeting_security")
			s.MeetingSecurity.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsUpdateReq3 = [1]string{
	0: "meeting_security",
}

// Decode decodes UserSettingsUpdateReq3 from json.
func (s *UserSettingsUpdateReq3) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsUpdateReq3 to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "meeting_security":
			if err := func() error {
				s.MeetingSecurity.Reset()
				if err := s.MeetingSecurity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_security\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsUpdateReq3")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsUpdateReq3) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsUpdateReq3) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsUpdateReq3MeetingSecurity) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsUpdateReq3MeetingSecurity) encodeFields(e *jx.Encoder) {
	{
		if s.AutoSecurity.Set {
			e.FieldStart("auto_security")
			s.AutoSecurity.Encode(e)
		}
	}
	{
		if s.BlockUserDomain.Set {
			e.FieldStart("block_user_domain")
			s.BlockUserDomain.Encode(e)
		}
	}
	{
		if s.BlockUserDomainList != nil {
			e.FieldStart("block_user_domain_list")
			e.ArrStart()
			for _, elem := range s.BlockUserDomainList {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.EmbedPasswordInJoinLink.Set {
			e.FieldStart("embed_password_in_join_link")
			s.EmbedPasswordInJoinLink.Encode(e)
		}
	}
	{
		if s.EncryptionType.Set {
			e.FieldStart("encryption_type")
			s.EncryptionType.Encode(e)
		}
	}
	{
		if s.EndToEndEncryptedMeetings.Set {
			e.FieldStart("end_to_end_encrypted_meetings")
			s.EndToEndEncryptedMeetings.Encode(e)
		}
	}
	{
		if s.MeetingPassword.Set {
			e.FieldStart("meeting_password")
			s.MeetingPassword.Encode(e)
		}
	}
	{
		if s.MeetingPasswordRequirement.Set {
			e.FieldStart("meeting_password_requirement")
			s.MeetingPasswordRequirement.Encode(e)
		}
	}
	{
		if s.OnlyAuthenticatedCanJoinFromWebclient.Set {
			e.FieldStart("only_authenticated_can_join_from_webclient")
			s.OnlyAuthenticatedCanJoinFromWebclient.Encode(e)
		}
	}
	{
		if s.PhonePassword.Set {
			e.FieldStart("phone_password")
			s.PhonePassword.Encode(e)
		}
	}
	{
		if s.PmiPassword.Set {
			e.FieldStart("pmi_password")
			s.PmiPassword.Encode(e)
		}
	}
	{
		if s.RequirePasswordForScheduledMeeting.Set {
			e.FieldStart("require_password_for_scheduled_meeting")
			s.RequirePasswordForScheduledMeeting.Encode(e)
		}
	}
	{
		if s.RequirePasswordForScheduledWebinar.Set {
			e.FieldStart("require_password_for_scheduled_webinar")
			s.RequirePasswordForScheduledWebinar.Encode(e)
		}
	}
	{
		if s.WaitingRoom.Set {
			e.FieldStart("waiting_room")
			s.WaitingRoom.Encode(e)
		}
	}
	{
		if s.WaitingRoomSettings.Set {
			e.FieldStart("waiting_room_settings")
			s.WaitingRoomSettings.Encode(e)
		}
	}
	{
		if s.WebinarPassword.Set {
			e.FieldStart("webinar_password")
			s.WebinarPassword.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsUpdateReq3MeetingSecurity = [16]string{
	0:  "auto_security",
	1:  "block_user_domain",
	2:  "block_user_domain_list",
	3:  "embed_password_in_join_link",
	4:  "encryption_type",
	5:  "end_to_end_encrypted_meetings",
	6:  "meeting_password",
	7:  "meeting_password_requirement",
	8:  "only_authenticated_can_join_from_webclient",
	9:  "phone_password",
	10: "pmi_password",
	11: "require_password_for_scheduled_meeting",
	12: "require_password_for_scheduled_webinar",
	13: "waiting_room",
	14: "waiting_room_settings",
	15: "webinar_password",
}

// Decode decodes UserSettingsUpdateReq3MeetingSecurity from json.
func (s *UserSettingsUpdateReq3MeetingSecurity) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsUpdateReq3MeetingSecurity to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "auto_security":
			if err := func() error {
				s.AutoSecurity.Reset()
				if err := s.AutoSecurity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auto_security\"")
			}
		case "block_user_domain":
			if err := func() error {
				s.BlockUserDomain.Reset()
				if err := s.BlockUserDomain.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"block_user_domain\"")
			}
		case "block_user_domain_list":
			if err := func() error {
				s.BlockUserDomainList = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.BlockUserDomainList = append(s.BlockUserDomainList, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"block_user_domain_list\"")
			}
		case "embed_password_in_join_link":
			if err := func() error {
				s.EmbedPasswordInJoinLink.Reset()
				if err := s.EmbedPasswordInJoinLink.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"embed_password_in_join_link\"")
			}
		case "encryption_type":
			if err := func() error {
				s.EncryptionType.Reset()
				if err := s.EncryptionType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"encryption_type\"")
			}
		case "end_to_end_encrypted_meetings":
			if err := func() error {
				s.EndToEndEncryptedMeetings.Reset()
				if err := s.EndToEndEncryptedMeetings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"end_to_end_encrypted_meetings\"")
			}
		case "meeting_password":
			if err := func() error {
				s.MeetingPassword.Reset()
				if err := s.MeetingPassword.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_password\"")
			}
		case "meeting_password_requirement":
			if err := func() error {
				s.MeetingPasswordRequirement.Reset()
				if err := s.MeetingPasswordRequirement.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meeting_password_requirement\"")
			}
		case "only_authenticated_can_join_from_webclient":
			if err := func() error {
				s.OnlyAuthenticatedCanJoinFromWebclient.Reset()
				if err := s.OnlyAuthenticatedCanJoinFromWebclient.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"only_authenticated_can_join_from_webclient\"")
			}
		case "phone_password":
			if err := func() error {
				s.PhonePassword.Reset()
				if err := s.PhonePassword.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_password\"")
			}
		case "pmi_password":
			if err := func() error {
				s.PmiPassword.Reset()
				if err := s.PmiPassword.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pmi_password\"")
			}
		case "require_password_for_scheduled_meeting":
			if err := func() error {
				s.RequirePasswordForScheduledMeeting.Reset()
				if err := s.RequirePasswordForScheduledMeeting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_password_for_scheduled_meeting\"")
			}
		case "require_password_for_scheduled_webinar":
			if err := func() error {
				s.RequirePasswordForScheduledWebinar.Reset()
				if err := s.RequirePasswordForScheduledWebinar.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"require_password_for_scheduled_webinar\"")
			}
		case "waiting_room":
			if err := func() error {
				s.WaitingRoom.Reset()
				if err := s.WaitingRoom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"waiting_room\"")
			}
		case "waiting_room_settings":
			if err := func() error {
				s.WaitingRoomSettings.Reset()
				if err := s.WaitingRoomSettings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"waiting_room_settings\"")
			}
		case "webinar_password":
			if err := func() error {
				s.WebinarPassword.Reset()
				if err := s.WebinarPassword.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"webinar_password\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsUpdateReq3MeetingSecurity")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsUpdateReq3MeetingSecurity) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsUpdateReq3MeetingSecurity) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement) encodeFields(e *jx.Encoder) {
	{
		if s.ConsecutiveCharactersLength.Set {
			e.FieldStart("consecutive_characters_length")
			s.ConsecutiveCharactersLength.Encode(e)
		}
	}
	{
		if s.HaveLetter.Set {
			e.FieldStart("have_letter")
			s.HaveLetter.Encode(e)
		}
	}
	{
		if s.HaveNumber.Set {
			e.FieldStart("have_number")
			s.HaveNumber.Encode(e)
		}
	}
	{
		if s.HaveSpecialCharacter.Set {
			e.FieldStart("have_special_character")
			s.HaveSpecialCharacter.Encode(e)
		}
	}
	{
		if s.HaveUpperAndLowerCharacters.Set {
			e.FieldStart("have_upper_and_lower_characters")
			s.HaveUpperAndLowerCharacters.Encode(e)
		}
	}
	{
		if s.Length.Set {
			e.FieldStart("length")
			s.Length.Encode(e)
		}
	}
	{
		if s.OnlyAllowNumeric.Set {
			e.FieldStart("only_allow_numeric")
			s.OnlyAllowNumeric.Encode(e)
		}
	}
	{
		if s.WeakEnhanceDetection.Set {
			e.FieldStart("weak_enhance_detection")
			s.WeakEnhanceDetection.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement = [8]string{
	0: "consecutive_characters_length",
	1: "have_letter",
	2: "have_number",
	3: "have_special_character",
	4: "have_upper_and_lower_characters",
	5: "length",
	6: "only_allow_numeric",
	7: "weak_enhance_detection",
}

// Decode decodes UserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement from json.
func (s *UserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "consecutive_characters_length":
			if err := func() error {
				s.ConsecutiveCharactersLength.Reset()
				if err := s.ConsecutiveCharactersLength.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"consecutive_characters_length\"")
			}
		case "have_letter":
			if err := func() error {
				s.HaveLetter.Reset()
				if err := s.HaveLetter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"have_letter\"")
			}
		case "have_number":
			if err := func() error {
				s.HaveNumber.Reset()
				if err := s.HaveNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"have_number\"")
			}
		case "have_special_character":
			if err := func() error {
				s.HaveSpecialCharacter.Reset()
				if err := s.HaveSpecialCharacter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"have_special_character\"")
			}
		case "have_upper_and_lower_characters":
			if err := func() error {
				s.HaveUpperAndLowerCharacters.Reset()
				if err := s.HaveUpperAndLowerCharacters.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"have_upper_and_lower_characters\"")
			}
		case "length":
			if err := func() error {
				s.Length.Reset()
				if err := s.Length.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"length\"")
			}
		case "only_allow_numeric":
			if err := func() error {
				s.OnlyAllowNumeric.Reset()
				if err := s.OnlyAllowNumeric.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"only_allow_numeric\"")
			}
		case "weak_enhance_detection":
			if err := func() error {
				s.WeakEnhanceDetection.Reset()
				if err := s.WeakEnhanceDetection.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"weak_enhance_detection\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsUpdateReq3MeetingSecurityMeetingPasswordRequirement) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSettingsUpdateReq3MeetingSecurityWaitingRoomSettings) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSettingsUpdateReq3MeetingSecurityWaitingRoomSettings) encodeFields(e *jx.Encoder) {
	{
		if s.ParticipantsToPlaceInWaitingRoom.Set {
			e.FieldStart("participants_to_place_in_waiting_room")
			s.ParticipantsToPlaceInWaitingRoom.Encode(e)
		}
	}
	{
		if s.UsersWhoCanAdmitParticipantsFromWaitingRoom.Set {
			e.FieldStart("users_who_can_admit_participants_from_waiting_room")
			s.UsersWhoCanAdmitParticipantsFromWaitingRoom.Encode(e)
		}
	}
	{
		if s.WhitelistedDomainsForWaitingRoom.Set {
			e.FieldStart("whitelisted_domains_for_waiting_room")
			s.WhitelistedDomainsForWaitingRoom.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSettingsUpdateReq3MeetingSecurityWaitingRoomSettings = [3]string{
	0: "participants_to_place_in_waiting_room",
	1: "users_who_can_admit_participants_from_waiting_room",
	2: "whitelisted_domains_for_waiting_room",
}

// Decode decodes UserSettingsUpdateReq3MeetingSecurityWaitingRoomSettings from json.
func (s *UserSettingsUpdateReq3MeetingSecurityWaitingRoomSettings) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSettingsUpdateReq3MeetingSecurityWaitingRoomSettings to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "participants_to_place_in_waiting_room":
			if err := func() error {
				s.ParticipantsToPlaceInWaitingRoom.Reset()
				if err := s.ParticipantsToPlaceInWaitingRoom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"participants_to_place_in_waiting_room\"")
			}
		case "users_who_can_admit_participants_from_waiting_room":
			if err := func() error {
				s.UsersWhoCanAdmitParticipantsFromWaitingRoom.Reset()
				if err := s.UsersWhoCanAdmitParticipantsFromWaitingRoom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"users_who_can_admit_participants_from_waiting_room\"")
			}
		case "whitelisted_domains_for_waiting_room":
			if err := func() error {
				s.WhitelistedDomainsForWaitingRoom.Reset()
				if err := s.WhitelistedDomainsForWaitingRoom.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"whitelisted_domains_for_waiting_room\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSettingsUpdateReq3MeetingSecurityWaitingRoomSettings")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSettingsUpdateReq3MeetingSecurityWaitingRoomSettings) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSettingsUpdateReq3MeetingSecurityWaitingRoomSettings) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserStatusOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserStatusOK) encodeFields(e *jx.Encoder) {
}

var jsonFieldsNameOfUserStatusOK = [0]string{}

// Decode decodes UserStatusOK from json.
func (s *UserStatusOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserStatusOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
	}); err != nil {
		return errors.Wrap(err, "decode UserStatusOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserStatusOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserStatusOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserStatusReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserStatusReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("action")
		e.Str(s.Action)
	}
}

var jsonFieldsNameOfUserStatusReq = [1]string{
	0: "action",
}

// Decode decodes UserStatusReq from json.
func (s *UserStatusReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserStatusReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "action":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Action = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"action\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserStatusReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfUserStatusReq) {
					name = jsonFieldsNameOfUserStatusReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserStatusReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserStatusReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserSummaryOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserSummaryOK) encodeFields(e *jx.Encoder) {
	{
		if s.LicensedUsersCount.Set {
			e.FieldStart("licensed_users_count")
			s.LicensedUsersCount.Encode(e)
		}
	}
	{
		if s.BasicUsersCount.Set {
			e.FieldStart("basic_users_count")
			s.BasicUsersCount.Encode(e)
		}
	}
	{
		if s.OnPremUsersCount.Set {
			e.FieldStart("on_prem_users_count")
			s.OnPremUsersCount.Encode(e)
		}
	}
	{
		if s.RoomUsersCount.Set {
			e.FieldStart("room_users_count")
			s.RoomUsersCount.Encode(e)
		}
	}
	{
		if s.PendingUsersCount.Set {
			e.FieldStart("pending_users_count")
			s.PendingUsersCount.Encode(e)
		}
	}
	{
		if s.JoinOnlyUsersCount.Set {
			e.FieldStart("join_only_users_count")
			s.JoinOnlyUsersCount.Encode(e)
		}
	}
	{
		if s.TotalUsersCount.Set {
			e.FieldStart("total_users_count")
			s.TotalUsersCount.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserSummaryOK = [7]string{
	0: "licensed_users_count",
	1: "basic_users_count",
	2: "on_prem_users_count",
	3: "room_users_count",
	4: "pending_users_count",
	5: "join_only_users_count",
	6: "total_users_count",
}

// Decode decodes UserSummaryOK from json.
func (s *UserSummaryOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserSummaryOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "licensed_users_count":
			if err := func() error {
				s.LicensedUsersCount.Reset()
				if err := s.LicensedUsersCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"licensed_users_count\"")
			}
		case "basic_users_count":
			if err := func() error {
				s.BasicUsersCount.Reset()
				if err := s.BasicUsersCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"basic_users_count\"")
			}
		case "on_prem_users_count":
			if err := func() error {
				s.OnPremUsersCount.Reset()
				if err := s.OnPremUsersCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"on_prem_users_count\"")
			}
		case "room_users_count":
			if err := func() error {
				s.RoomUsersCount.Reset()
				if err := s.RoomUsersCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"room_users_count\"")
			}
		case "pending_users_count":
			if err := func() error {
				s.PendingUsersCount.Reset()
				if err := s.PendingUsersCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pending_users_count\"")
			}
		case "join_only_users_count":
			if err := func() error {
				s.JoinOnlyUsersCount.Reset()
				if err := s.JoinOnlyUsersCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"join_only_users_count\"")
			}
		case "total_users_count":
			if err := func() error {
				s.TotalUsersCount.Reset()
				if err := s.TotalUsersCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_users_count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserSummaryOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserSummaryOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserSummaryOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserTokenOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserTokenOK) encodeFields(e *jx.Encoder) {
	{
		if s.Token.Set {
			e.FieldStart("token")
			s.Token.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserTokenOK = [1]string{
	0: "token",
}

// Decode decodes UserTokenOK from json.
func (s *UserTokenOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserTokenOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "token":
			if err := func() error {
				s.Token.Reset()
				if err := s.Token.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"token\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserTokenOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserTokenOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserTokenOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserUpdateReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserUpdateReq) encodeFields(e *jx.Encoder) {
	{
		if s.CmsUserID.Set {
			e.FieldStart("cms_user_id")
			s.CmsUserID.Encode(e)
		}
	}
	{
		if s.Company.Set {
			e.FieldStart("company")
			s.Company.Encode(e)
		}
	}
	{
		if s.CustomAttributes != nil {
			e.FieldStart("custom_attributes")
			e.ArrStart()
			for _, elem := range s.CustomAttributes {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Dept.Set {
			e.FieldStart("dept")
			s.Dept.Encode(e)
		}
	}
	{
		if s.FirstName.Set {
			e.FieldStart("first_name")
			s.FirstName.Encode(e)
		}
	}
	{
		if s.GroupID.Set {
			e.FieldStart("group_id")
			s.GroupID.Encode(e)
		}
	}
	{
		if s.HostKey.Set {
			e.FieldStart("host_key")
			s.HostKey.Encode(e)
		}
	}
	{
		if s.JobTitle.Set {
			e.FieldStart("job_title")
			s.JobTitle.Encode(e)
		}
	}
	{
		if s.Language.Set {
			e.FieldStart("language")
			s.Language.Encode(e)
		}
	}
	{
		if s.LastName.Set {
			e.FieldStart("last_name")
			s.LastName.Encode(e)
		}
	}
	{
		if s.Location.Set {
			e.FieldStart("location")
			s.Location.Encode(e)
		}
	}
	{
		if s.Manager.Set {
			e.FieldStart("manager")
			s.Manager.Encode(e)
		}
	}
	{
		if s.PhoneCountry.Set {
			e.FieldStart("phone_country")
			s.PhoneCountry.Encode(e)
		}
	}
	{
		if s.PhoneNumber.Set {
			e.FieldStart("phone_number")
			s.PhoneNumber.Encode(e)
		}
	}
	{
		if s.PhoneNumbers != nil {
			e.FieldStart("phone_numbers")
			e.ArrStart()
			for _, elem := range s.PhoneNumbers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Pmi.Set {
			e.FieldStart("pmi")
			s.Pmi.Encode(e)
		}
	}
	{
		if s.Pronouns.Set {
			e.FieldStart("pronouns")
			s.Pronouns.Encode(e)
		}
	}
	{
		if s.PronounsOption.Set {
			e.FieldStart("pronouns_option")
			s.PronounsOption.Encode(e)
		}
	}
	{
		if s.Timezone.Set {
			e.FieldStart("timezone")
			s.Timezone.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.UsePmi.Set {
			e.FieldStart("use_pmi")
			s.UsePmi.Encode(e)
		}
	}
	{
		if s.VanityName.Set {
			e.FieldStart("vanity_name")
			s.VanityName.Encode(e)
		}
	}
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ZoomOneType.Set {
			e.FieldStart("zoom_one_type")
			s.ZoomOneType.Encode(e)
		}
	}
	{
		if s.PlanUnitedType.Set {
			e.FieldStart("plan_united_type")
			s.PlanUnitedType.Encode(e)
		}
	}
	{
		if s.Feature.Set {
			e.FieldStart("feature")
			s.Feature.Encode(e)
		}
	}
	{
		if s.AboutMe.Set {
			e.FieldStart("about_me")
			s.AboutMe.Encode(e)
		}
	}
	{
		if s.LinkedinURL.Set {
			e.FieldStart("linkedin_url")
			s.LinkedinURL.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserUpdateReq = [28]string{
	0:  "cms_user_id",
	1:  "company",
	2:  "custom_attributes",
	3:  "dept",
	4:  "first_name",
	5:  "group_id",
	6:  "host_key",
	7:  "job_title",
	8:  "language",
	9:  "last_name",
	10: "location",
	11: "manager",
	12: "phone_country",
	13: "phone_number",
	14: "phone_numbers",
	15: "pmi",
	16: "pronouns",
	17: "pronouns_option",
	18: "timezone",
	19: "type",
	20: "use_pmi",
	21: "vanity_name",
	22: "display_name",
	23: "zoom_one_type",
	24: "plan_united_type",
	25: "feature",
	26: "about_me",
	27: "linkedin_url",
}

// Decode decodes UserUpdateReq from json.
func (s *UserUpdateReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserUpdateReq to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "cms_user_id":
			if err := func() error {
				s.CmsUserID.Reset()
				if err := s.CmsUserID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cms_user_id\"")
			}
		case "company":
			if err := func() error {
				s.Company.Reset()
				if err := s.Company.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company\"")
			}
		case "custom_attributes":
			if err := func() error {
				s.CustomAttributes = make([]UserUpdateReqCustomAttributesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem UserUpdateReqCustomAttributesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CustomAttributes = append(s.CustomAttributes, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"custom_attributes\"")
			}
		case "dept":
			if err := func() error {
				s.Dept.Reset()
				if err := s.Dept.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"dept\"")
			}
		case "first_name":
			if err := func() error {
				s.FirstName.Reset()
				if err := s.FirstName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"first_name\"")
			}
		case "group_id":
			if err := func() error {
				s.GroupID.Reset()
				if err := s.GroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"group_id\"")
			}
		case "host_key":
			if err := func() error {
				s.HostKey.Reset()
				if err := s.HostKey.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"host_key\"")
			}
		case "job_title":
			if err := func() error {
				s.JobTitle.Reset()
				if err := s.JobTitle.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_title\"")
			}
		case "language":
			if err := func() error {
				s.Language.Reset()
				if err := s.Language.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"language\"")
			}
		case "last_name":
			if err := func() error {
				s.LastName.Reset()
				if err := s.LastName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"last_name\"")
			}
		case "location":
			if err := func() error {
				s.Location.Reset()
				if err := s.Location.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"location\"")
			}
		case "manager":
			if err := func() error {
				s.Manager.Reset()
				if err := s.Manager.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"manager\"")
			}
		case "phone_country":
			if err := func() error {
				s.PhoneCountry.Reset()
				if err := s.PhoneCountry.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_country\"")
			}
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_number\"")
			}
		case "phone_numbers":
			if err := func() error {
				s.PhoneNumbers = make([]UserUpdateReqPhoneNumbersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem UserUpdateReqPhoneNumbersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.PhoneNumbers = append(s.PhoneNumbers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_numbers\"")
			}
		case "pmi":
			if err := func() error {
				s.Pmi.Reset()
				if err := s.Pmi.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pmi\"")
			}
		case "pronouns":
			if err := func() error {
				s.Pronouns.Reset()
				if err := s.Pronouns.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pronouns\"")
			}
		case "pronouns_option":
			if err := func() error {
				s.PronounsOption.Reset()
				if err := s.PronounsOption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pronouns_option\"")
			}
		case "timezone":
			if err := func() error {
				s.Timezone.Reset()
				if err := s.Timezone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"timezone\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "use_pmi":
			if err := func() error {
				s.UsePmi.Reset()
				if err := s.UsePmi.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"use_pmi\"")
			}
		case "vanity_name":
			if err := func() error {
				s.VanityName.Reset()
				if err := s.VanityName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vanity_name\"")
			}
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "zoom_one_type":
			if err := func() error {
				s.ZoomOneType.Reset()
				if err := s.ZoomOneType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_one_type\"")
			}
		case "plan_united_type":
			if err := func() error {
				s.PlanUnitedType.Reset()
				if err := s.PlanUnitedType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"plan_united_type\"")
			}
		case "feature":
			if err := func() error {
				s.Feature.Reset()
				if err := s.Feature.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"feature\"")
			}
		case "about_me":
			if err := func() error {
				s.AboutMe.Reset()
				if err := s.AboutMe.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"about_me\"")
			}
		case "linkedin_url":
			if err := func() error {
				s.LinkedinURL.Reset()
				if err := s.LinkedinURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"linkedin_url\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserUpdateReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserUpdateReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserUpdateReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserUpdateReqCustomAttributesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserUpdateReqCustomAttributesItem) encodeFields(e *jx.Encoder) {
	{
		if s.Key.Set {
			e.FieldStart("key")
			s.Key.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Value.Set {
			e.FieldStart("value")
			s.Value.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserUpdateReqCustomAttributesItem = [3]string{
	0: "key",
	1: "name",
	2: "value",
}

// Decode decodes UserUpdateReqCustomAttributesItem from json.
func (s *UserUpdateReqCustomAttributesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserUpdateReqCustomAttributesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "key":
			if err := func() error {
				s.Key.Reset()
				if err := s.Key.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"key\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "value":
			if err := func() error {
				s.Value.Reset()
				if err := s.Value.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"value\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserUpdateReqCustomAttributesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserUpdateReqCustomAttributesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserUpdateReqCustomAttributesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserUpdateReqFeature) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserUpdateReqFeature) encodeFields(e *jx.Encoder) {
	{
		if s.ZoomPhone.Set {
			e.FieldStart("zoom_phone")
			s.ZoomPhone.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserUpdateReqFeature = [1]string{
	0: "zoom_phone",
}

// Decode decodes UserUpdateReqFeature from json.
func (s *UserUpdateReqFeature) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserUpdateReqFeature to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "zoom_phone":
			if err := func() error {
				s.ZoomPhone.Reset()
				if err := s.ZoomPhone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zoom_phone\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserUpdateReqFeature")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserUpdateReqFeature) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserUpdateReqFeature) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserUpdateReqPhoneNumbersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserUpdateReqPhoneNumbersItem) encodeFields(e *jx.Encoder) {
	{
		if s.Code.Set {
			e.FieldStart("code")
			s.Code.Encode(e)
		}
	}
	{
		if s.Country.Set {
			e.FieldStart("country")
			s.Country.Encode(e)
		}
	}
	{
		if s.Label.Set {
			e.FieldStart("label")
			s.Label.Encode(e)
		}
	}
	{
		if s.Number.Set {
			e.FieldStart("number")
			s.Number.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserUpdateReqPhoneNumbersItem = [4]string{
	0: "code",
	1: "country",
	2: "label",
	3: "number",
}

// Decode decodes UserUpdateReqPhoneNumbersItem from json.
func (s *UserUpdateReqPhoneNumbersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserUpdateReqPhoneNumbersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "code":
			if err := func() error {
				s.Code.Reset()
				if err := s.Code.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code\"")
			}
		case "country":
			if err := func() error {
				s.Country.Reset()
				if err := s.Country.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country\"")
			}
		case "label":
			if err := func() error {
				s.Label.Reset()
				if err := s.Label.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"label\"")
			}
		case "number":
			if err := func() error {
				s.Number.Reset()
				if err := s.Number.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserUpdateReqPhoneNumbersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserUpdateReqPhoneNumbersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserUpdateReqPhoneNumbersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserVanityNameOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserVanityNameOK) encodeFields(e *jx.Encoder) {
	{
		if s.Existed.Set {
			e.FieldStart("existed")
			s.Existed.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserVanityNameOK = [1]string{
	0: "existed",
}

// Decode decodes UserVanityNameOK from json.
func (s *UserVanityNameOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserVanityNameOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "existed":
			if err := func() error {
				s.Existed.Reset()
				if err := s.Existed.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"existed\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserVanityNameOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserVanityNameOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserVanityNameOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UserZakOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UserZakOK) encodeFields(e *jx.Encoder) {
	{
		if s.Token.Set {
			e.FieldStart("token")
			s.Token.Encode(e)
		}
	}
}

var jsonFieldsNameOfUserZakOK = [1]string{
	0: "token",
}

// Decode decodes UserZakOK from json.
func (s *UserZakOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserZakOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "token":
			if err := func() error {
				s.Token.Reset()
				if err := s.Token.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"token\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UserZakOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UserZakOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserZakOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UsersOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UsersOK) encodeFields(e *jx.Encoder) {
	{
		if s.NextPageToken.Set {
			e.FieldStart("next_page_token")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.PageCount.Set {
			e.FieldStart("page_count")
			s.PageCount.Encode(e)
		}
	}
	{
		if s.PageNumber.Set {
			e.FieldStart("page_number")
			s.PageNumber.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("page_size")
			s.PageSize.Encode(e)
		}
	}
	{
		if s.TotalRecords.Set {
			e.FieldStart("total_records")
			s.TotalRecords.Encode(e)
		}
	}
	{
		if s.Users != nil {
			e.FieldStart("users")
			e.ArrStart()
			for _, elem := range s.Users {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfUsersOK = [6]string{
	0: "next_page_token",
	1: "page_count",
	2: "page_number",
	3: "page_size",
	4: "total_records",
	5: "users",
}

// Decode decodes UsersOK from json.
func (s *UsersOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UsersOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "next_page_token":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_page_token\"")
			}
		case "page_count":
			if err := func() error {
				s.PageCount.Reset()
				if err := s.PageCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_count\"")
			}
		case "page_number":
			if err := func() error {
				s.PageNumber.Reset()
				if err := s.PageNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_number\"")
			}
		case "page_size":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page_size\"")
			}
		case "total_records":
			if err := func() error {
				s.TotalRecords.Reset()
				if err := s.TotalRecords.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_records\"")
			}
		case "users":
			if err := func() error {
				s.Users = make([]UsersOKUsersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem UsersOKUsersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Users = append(s.Users, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"users\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UsersOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UsersOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UsersOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UsersOKUsersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UsersOKUsersItem) encodeFields(e *jx.Encoder) {
	{
		if s.UserCreatedAt.Set {
			e.FieldStart("user_created_at")
			s.UserCreatedAt.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.CreatedAt.Set {
			e.FieldStart("created_at")
			s.CreatedAt.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.CustomAttributes != nil {
			e.FieldStart("custom_attributes")
			e.ArrStart()
			for _, elem := range s.CustomAttributes {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Dept.Set {
			e.FieldStart("dept")
			s.Dept.Encode(e)
		}
	}
	{
		e.FieldStart("email")
		e.Str(s.Email)
	}
	{
		if s.EmployeeUniqueID.Set {
			e.FieldStart("employee_unique_id")
			s.EmployeeUniqueID.Encode(e)
		}
	}
	{
		if s.FirstName.Set {
			e.FieldStart("first_name")
			s.FirstName.Encode(e)
		}
	}
	{
		if s.GroupIds != nil {
			e.FieldStart("group_ids")
			e.ArrStart()
			for _, elem := range s.GroupIds {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.HostKey.Set {
			e.FieldStart("host_key")
			s.HostKey.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.ImGroupIds != nil {
			e.FieldStart("im_group_ids")
			e.ArrStart()
			for _, elem := range s.ImGroupIds {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.LastClientVersion.Set {
			e.FieldStart("last_client_version")
			s.LastClientVersion.Encode(e)
		}
	}
	{
		if s.LastLoginTime.Set {
			e.FieldStart("last_login_time")
			s.LastLoginTime.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.LastName.Set {
			e.FieldStart("last_name")
			s.LastName.Encode(e)
		}
	}
	{
		if s.PlanUnitedType.Set {
			e.FieldStart("plan_united_type")
			s.PlanUnitedType.Encode(e)
		}
	}
	{
		if s.Pmi.Set {
			e.FieldStart("pmi")
			s.Pmi.Encode(e)
		}
	}
	{
		if s.RoleID.Set {
			e.FieldStart("role_id")
			s.RoleID.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.Timezone.Set {
			e.FieldStart("timezone")
			s.Timezone.Encode(e)
		}
	}
	{
		e.FieldStart("type")
		e.Int(s.Type)
	}
	{
		if s.Verified.Set {
			e.FieldStart("verified")
			s.Verified.Encode(e)
		}
	}
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
}

var jsonFieldsNameOfUsersOKUsersItem = [22]string{
	0:  "user_created_at",
	1:  "created_at",
	2:  "custom_attributes",
	3:  "dept",
	4:  "email",
	5:  "employee_unique_id",
	6:  "first_name",
	7:  "group_ids",
	8:  "host_key",
	9:  "id",
	10: "im_group_ids",
	11: "last_client_version",
	12: "last_login_time",
	13: "last_name",
	14: "plan_united_type",
	15: "pmi",
	16: "role_id",
	17: "status",
	18: "timezone",
	19: "type",
	20: "verified",
	21: "display_name",
}

// Decode decodes UsersOKUsersItem from json.
func (s *UsersOKUsersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UsersOKUsersItem to nil")
	}
	var requiredBitSet [3]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "user_created_at":
			if err := func() error {
				s.UserCreatedAt.Reset()
				if err := s.UserCreatedAt.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"user_created_at\"")
			}
		case "created_at":
			if err := func() error {
				s.CreatedAt.Reset()
				if err := s.CreatedAt.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created_at\"")
			}
		case "custom_attributes":
			if err := func() error {
				s.CustomAttributes = make([]UsersOKUsersItemCustomAttributesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem UsersOKUsersItemCustomAttributesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CustomAttributes = append(s.CustomAttributes, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"custom_attributes\"")
			}
		case "dept":
			if err := func() error {
				s.Dept.Reset()
				if err := s.Dept.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"dept\"")
			}
		case "email":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				v, err := d.Str()
				s.Email = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		case "employee_unique_id":
			if err := func() error {
				s.EmployeeUniqueID.Reset()
				if err := s.EmployeeUniqueID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"employee_unique_id\"")
			}
		case "first_name":
			if err := func() error {
				s.FirstName.Reset()
				if err := s.FirstName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"first_name\"")
			}
		case "group_ids":
			if err := func() error {
				s.GroupIds = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.GroupIds = append(s.GroupIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"group_ids\"")
			}
		case "host_key":
			if err := func() error {
				s.HostKey.Reset()
				if err := s.HostKey.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"host_key\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "im_group_ids":
			if err := func() error {
				s.ImGroupIds = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.ImGroupIds = append(s.ImGroupIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"im_group_ids\"")
			}
		case "last_client_version":
			if err := func() error {
				s.LastClientVersion.Reset()
				if err := s.LastClientVersion.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"last_client_version\"")
			}
		case "last_login_time":
			if err := func() error {
				s.LastLoginTime.Reset()
				if err := s.LastLoginTime.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"last_login_time\"")
			}
		case "last_name":
			if err := func() error {
				s.LastName.Reset()
				if err := s.LastName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"last_name\"")
			}
		case "plan_united_type":
			if err := func() error {
				s.PlanUnitedType.Reset()
				if err := s.PlanUnitedType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"plan_united_type\"")
			}
		case "pmi":
			if err := func() error {
				s.Pmi.Reset()
				if err := s.Pmi.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pmi\"")
			}
		case "role_id":
			if err := func() error {
				s.RoleID.Reset()
				if err := s.RoleID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"role_id\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "timezone":
			if err := func() error {
				s.Timezone.Reset()
				if err := s.Timezone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"timezone\"")
			}
		case "type":
			requiredBitSet[2] |= 1 << 3
			if err := func() error {
				v, err := d.Int()
				s.Type = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "verified":
			if err := func() error {
				s.Verified.Reset()
				if err := s.Verified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"verified\"")
			}
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UsersOKUsersItem")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [3]uint8{
		0b00010000,
		0b00000000,
		0b00001000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfUsersOKUsersItem) {
					name = jsonFieldsNameOfUsersOKUsersItem[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UsersOKUsersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UsersOKUsersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UsersOKUsersItemCustomAttributesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UsersOKUsersItemCustomAttributesItem) encodeFields(e *jx.Encoder) {
	{
		if s.Key.Set {
			e.FieldStart("key")
			s.Key.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Value.Set {
			e.FieldStart("value")
			s.Value.Encode(e)
		}
	}
}

var jsonFieldsNameOfUsersOKUsersItemCustomAttributesItem = [3]string{
	0: "key",
	1: "name",
	2: "value",
}

// Decode decodes UsersOKUsersItemCustomAttributesItem from json.
func (s *UsersOKUsersItemCustomAttributesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UsersOKUsersItemCustomAttributesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "key":
			if err := func() error {
				s.Key.Reset()
				if err := s.Key.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"key\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "value":
			if err := func() error {
				s.Value.Reset()
				if err := s.Value.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"value\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UsersOKUsersItemCustomAttributesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UsersOKUsersItemCustomAttributesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UsersOKUsersItemCustomAttributesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}
